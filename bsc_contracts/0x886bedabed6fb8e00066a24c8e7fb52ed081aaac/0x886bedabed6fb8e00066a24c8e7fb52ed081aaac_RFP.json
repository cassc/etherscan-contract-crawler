{"SourceCode": "{\"Context.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\ncontract Context {\\r\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n  // an instance of this contract, which should be used via inheritance.\\r\\n  constructor () { }\\r\\n\\r\\n  function _msgSender() internal view returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\"},\"IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n       /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferWithoutFees(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mineReward(address to, uint256 amount, bool isFee) external;\\r\\n\\r\\n    function halving() external view returns (uint256);\\r\\n    \\r\\n     function totalMintSupply() external view returns (uint256);\\r\\n  \\r\\n    function swapAndLiquify(uint256 tokens) external;\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) external;\\r\\n    function getTransactionPin() external returns(uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Needs Transfer `pin`\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"ICanMint.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\ninterface ICanMint{\\r\\n\\r\\n    function isCanMint() external view returns(bool);\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor () {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\"},\"RFP.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at BscScan.com on 2022-02-13\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ICanMint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\n\\r\\n /// @title Dividend-Paying Token Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev An interface for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\r\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n  function withdrawDividend() external;\\r\\n\\r\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\r\\n  /// @param from The address which sends ether to this contract.\\r\\n  /// @param weiAmount The amount of distributed ether in wei.\\r\\n  event DividendsDistributed(\\r\\n    address indexed from,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n\\r\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\r\\n  /// @param to The address which withdraws ether from this contract.\\r\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\r\\n  event DividendWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n}\\r\\n\\r\\n/// @title Dividend-Paying Token Optional Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenOptionalInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n interface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPinkAntiBot {\\r\\n  function setTokenOwner(address owner) external;\\r\\n\\r\\n  function onPreTransferCheck(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\\r\\n /* @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\n\\r\\n\\r\\n\\r\\ncontract BEP20 is Context, IBEP20, Ownable {\\r\\n   \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 public _totalSupply;\\r\\n    uint256 private _totalMintSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _halving =1;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory namex, string memory symbolx)  {\\r\\n        _name = namex;\\r\\n        _symbol = symbolx;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external override view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public override view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public override view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of decimals used to get its user representation.\\r\\n    */\\r\\n    function decimals() public override view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function halving() public override view returns (uint256) {\\r\\n        return _halving;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function burnOutOfTotalSupply(uint256 _burnFees) public {\\r\\n                 _totalSupply = _totalSupply.sub(_burnFees);                  \\r\\n    }\\r\\n   \\r\\n    function totalMintSupply() public override view returns(uint256){\\r\\n        return _totalMintSupply;\\r\\n    }\\r\\n\\r\\n    function getTransactionPin() public virtual override returns(uint256) {}\\r\\n    \\r\\n   \\r\\n       /**\\r\\n     * @dev See {BEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom (address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n      \\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(amount, \\u0027BEP20: transfer amount exceeds allowance\\u0027)\\r\\n        );\\r\\n       \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferWithoutFees (address from, address to, uint256 amount) public override returns (bool) {\\r\\n      \\r\\n         _transferWithoutFees(from,to,amount) ;\\r\\n       \\r\\n        _approve(\\r\\n           from,\\r\\n            _msgSender(),\\r\\n            _allowances[from][_msgSender()].sub(amount, \\u0027BEP20: transfer amount exceeds allowance\\u0027)\\r\\n        );\\r\\n       \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _transferWithoutFees(address from, address to, uint256 amount) internal virtual returns(bool){}  \\r\\n   \\r\\n        function swapAndLiquify(uint256 tokens) public virtual override{}\\r\\n        function swapTokensForEth(uint256 tokenAmount) public virtual override{}\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\u0027BEP20: decreased allowance below zero\\u0027));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `msg.sender` must be the token owner\\r\\n     */\\r\\n    /*function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(_msgSender(), amount);\\r\\n        return true;\\r\\n    }*/\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer (address sender, address recipient, uint256 amount) virtual internal {\\r\\n        require(sender != address(0), \\u0027BEP20: transfer from the zero address\\u0027);\\r\\n        require(recipient != address(0), \\u0027BEP20: transfer to the zero address\\u0027);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\u0027BEP20: transfer amount exceeds balance\\u0027);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n   /* function _mint(address account, uint256 amount) virtual internal {\\r\\n        require(account != address(0), \\u0027BEP20: mint to the zero address\\u0027);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }*/\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function _mint(address account, uint256 totalMintAmount_, uint256 totalSupplyPercent) virtual internal{\\r\\n         require(account != address(0), \\u0027BEP20: mint to the zero address\\u0027);\\r\\n          \\r\\n          _totalMintSupply = _totalMintSupply.add(totalMintAmount_);\\r\\n           \\r\\n            _balances[account] = _balances[account].add(totalSupplyPercent);\\r\\n              _totalSupply = _totalSupply.add(totalSupplyPercent);\\r\\n       \\r\\n        emit Transfer(address(0),account,_totalSupply);\\r\\n         \\r\\n          \\r\\n        }\\r\\n\\r\\n        /**\\r\\n*@dev the `mineReward` Contract will be locked using a random Number,\\r\\n* Only the contracts (staking contract, NFT contract etc.) that hold the random number can access `mineReward` function\\r\\n* Basically, Dev is locked out of the `mineReward` function when locked. \\r\\n* the lock will be done by a random wallet address selected by concensus from the community. \\r\\n*\\r\\n */\\r\\n\\r\\n    function mineReward(address to,uint256 amount, bool isFee) virtual override public  {}  \\r\\n    \\r\\n     \\r\\n    \\r\\n     function _mintReward(address to, uint256 amount,uint256 fee) internal returns(uint256){\\r\\n        \\r\\n         address  deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n           amount = amount.sub(fee);\\r\\n           amount = amount.div(_halving);\\r\\n           fee= fee.div(2);\\r\\n\\r\\n            _balances[deadWallet] = _balances[deadWallet].add(fee.div(_halving));\\r\\n             _balances[address(this)] = _balances[address(this)].add(fee.div(_halving));\\r\\n           _balances[to] = _balances[to].add(amount.div(_halving));\\r\\n            _totalSupply = _totalSupply.add(amount);\\r\\n             _halving = (_totalSupply/_totalMintSupply.mul(2).div(100))+1;    \\r\\n            return fee;    \\r\\n     }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) virtual internal {\\r\\n        require(account != address(0), \\u0027BEP20: burn from the zero address\\u0027);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\u0027BEP20: burn amount exceeds balance\\u0027);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve (address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\u0027BEP20: approve from the zero address\\u0027);\\r\\n        require(spender != address(0), \\u0027BEP20: approve to the zero address\\u0027);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\u0027BEP20: burn amount exceeds allowance\\u0027));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract RFP is BEP20{\\r\\nusing SafeMath for uint256;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public  uniswapV2Pair;\\r\\n\\r\\n    bool public swapping = false;\\r\\n\\r\\n    //RFPDividendTracker public dividendTracker;\\r\\n\\r\\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n    uint256 public maxSellTransactionAmount = 300000 ether; //0.1%\\r\\n     uint256 public maxWalletToken = 300000 ether; //0.1%\\r\\n    \\r\\n    mapping(address =\\u003e bool) public _isBlacklisted;\\r\\n\\r\\n    uint256 public charityFee = 0;\\r\\n    uint256 public liquidityFee = 3;\\r\\n    uint256 public marketingFee = 4;\\r\\n    uint256 public devFee = 3;\\r\\n    uint256 public burnFees =2;\\r\\n    uint256 public extraFeeOnSell = 4;\\r\\n    bool private _enableTrading = false;\\r\\n    uint256 private enTrack=0;\\r\\n    uint256 public totalFees = charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n   \\r\\n\\r\\n    address public _marketingWalletAddress = 0x563A643a15253fc637B56facaA6B9149266Ee7d8;\\r\\n    address public _developmentWalletAddress = 0xee4FbdF874E7aD3F28d24Ef4b3b24358A47D88Df;\\r\\n    address public _charity = 0x783071c98dDf4ad067E73EbFf8DfDd6011fB54f6;\\r\\n\\r\\n\\r\\n    // use by default 300,000 gas to process auto-claiming dividends\\r\\n   // uint256 public gasForProcessing = 300000;\\r\\n\\r\\n     // exlcude from fees and max transaction amount\\r\\n    mapping (address =\\u003e bool) private _isExcludedFromFees;\\r\\n\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping (address =\\u003e bool) public automatedMarketMakerPairs;\\r\\n    mapping(uint256=\\u003ebool) public _isStakingContract;\\r\\n     \\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\\r\\n\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    \\r\\n    event SwapBNBForTokens(\\r\\n        uint256 amountIn,\\r\\n        address[] path\\r\\n    );\\r\\n\\r\\n   constructor()  BEP20(\\\"REWARD FOR PASSION\\\", \\\"RFP\\\") {\\r\\n    \\r\\n    \\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);  //mainnet\\r\\n    \\r\\n      // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);  //testnet\\r\\n\\r\\n         \\r\\n         // Create a uniswap pair for this new token\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this),  _uniswapV2Router.WETH()\\r\\n         //   0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd  \\r\\n            ); //testnet WBNB\\r\\n            \\r\\n            // _uniswapV2Router.WETH()\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n\\r\\n       // exclude from paying fees or having max transaction amount\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(_marketingWalletAddress, true);\\r\\n        excludeFromFees(_developmentWalletAddress, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(_charity, true);\\r\\n        \\r\\n      _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n        \\r\\n\\r\\n        /*\\r\\n            _mint is an internal function in ERC20.sol that is only called here,\\r\\n            and CANNOT be called ever again\\r\\n        */\\r\\n        _mint(owner(), 300000000 ether, 4125764 ether);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"RFP: The router already has that address\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n            .createPair(address(this), uniswapV2Router.WETH());\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(_isExcludedFromFees[account] != excluded, \\\"RFP: Account is already the value of \\u0027excluded\\u0027\\\");\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transferWithoutFees(address from, address to, uint256 amount) internal override returns(bool){\\r\\n          require(NewContract == address(0),\\\"MINT CONSENSUS : PLEASE CONSULT COMMUNITY\\\");\\r\\n          require (externalContractToUsePin[_msgSender()],\\\"Contract Not Permmitted\\\");\\r\\n        \\r\\n       \\r\\n                 \\r\\n               if(amount == 0) {\\r\\n                 super._transfer(from, to, 0);\\r\\n                 return false;\\r\\n            \\r\\n             }\\r\\n             \\r\\n            // taxCollection(from,to);         \\r\\n            super._transfer(from,to,amount);\\r\\n             return true;  \\r\\n  \\r\\n    }\\r\\n\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\\r\\n        for(uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _isExcludedFromFees[accounts[i]] = excluded;\\r\\n        }\\r\\n\\r\\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\r\\n    }\\r\\n    \\r\\n    function setMaxWalletToken(uint256 _maxToken) external onlyOwner {\\r\\n            require(_maxToken\\u003e1370,\\\"MaxWallet Token is `_maxToken`\\\");\\r\\n              maxWalletToken = _maxToken;\\r\\n  \\t}\\r\\n\\r\\n     \\t  \\t\\r\\n  \\tfunction setMaxSelltx(uint256 _maxSellTxAmount) public onlyOwner {\\r\\n       require(_maxSellTxAmount\\u003e1370,\\\"Maximun Sell Tx cannot be `_maxSellTxAmount`\\\");       \\r\\n        maxSellTransactionAmount = _maxSellTxAmount;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address payable wallet) external onlyOwner{\\r\\n            _marketingWalletAddress = wallet;\\r\\n    }\\r\\n    \\r\\n    function setDevWallet(address payable wallet) external onlyOwner{\\r\\n        _developmentWalletAddress = wallet;\\r\\n    }\\r\\n\\r\\n    function setCharityWallet(address payable wallet) external onlyOwner{\\r\\n        _charity = wallet;\\r\\n    }\\r\\n\\r\\n    function setCharityFee(uint256 _charityFee) external onlyOwner{\\r\\n            require(_charityFee\\u003c=4,\\\"Max liquidity Exceeded\\\");\\r\\n        charityFee = _charityFee;\\r\\n       totalFees= charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n    }\\r\\n\\r\\n    function setMarketingFee(uint256 _marketingFee) external onlyOwner{\\r\\n        require(_marketingFee\\u003c=7,\\\"Max Marketing Exceeded\\\");\\r\\n        marketingFee = _marketingFee;\\r\\n       totalFees= charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n\\r\\n    }\\r\\n\\r\\n    function setLiquidityFee(uint256 _liquidityFee) external onlyOwner{\\r\\n        require(_liquidityFee\\u003c=7,\\\"Max liquidity Exceeded\\\");\\r\\n        liquidityFee = _liquidityFee;\\r\\n       totalFees= charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n\\r\\n    }\\r\\n    \\r\\n    function setDevFee(uint256 _devFee) external onlyOwner{\\r\\n        require(_devFee\\u003c=7,\\\"Max Dev. Exceeded\\\");\\r\\n        devFee = _devFee;\\r\\n        totalFees= charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n\\r\\n    }\\r\\n\\r\\n     function setExtraFeeOnSell(uint256 _extraFeeOnSell) external onlyOwner{\\r\\n        require(_extraFeeOnSell\\u003c=50,\\\"Max Extra Fee Exceeded\\\");\\r\\n        extraFeeOnSell = _extraFeeOnSell;\\r\\n       totalFees= charityFee.add(liquidityFee).add(marketingFee).add(devFee);\\r\\n\\r\\n    }\\r\\n     function setBurnFee(uint256 _burnFee) external onlyOwner{\\r\\n        require(_burnFee\\u003c=100,\\\"Max Extra Fee Exceeded\\\");\\r\\n        burnFees = _burnFee;\\r\\n\\r\\n    }\\r\\n\\r\\n   \\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"RFP: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n    \\r\\n    function blacklistAddress(address account, bool value) external onlyOwner{\\r\\n        _isBlacklisted[account] = value;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"RFP: Automated market maker pair is already set to that value\\\");\\r\\n      \\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n       \\r\\n\\r\\n    function enableTrading(bool enableT) onlyOwner public  {\\r\\n            require(_enableTrading != enableT, \\\"Already in same value\\\" );\\r\\n            require(enTrack \\u003c3,\\\"Cannot disable Trading\\\");\\r\\n           _enableTrading = enableT;\\r\\n           enTrack +=1;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n\\r\\n        require(_enableTrading  ||  msg.sender == owner(), \\\"Trading is disabled \\\");\\r\\n\\r\\n        require(from != address(0), \\\"RFP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"RFP20: transfer to the zero address\\\");\\r\\n        \\r\\n     \\r\\n        require(!_isBlacklisted[from] \\u0026\\u0026 !_isBlacklisted[to], \\u0027Blacklisted address\\u0027);\\r\\n             \\r\\n        \\r\\n        if (\\r\\n            from != owner() \\u0026\\u0026\\r\\n            to != owner() \\u0026\\u0026\\r\\n            to != address(0) \\u0026\\u0026\\r\\n            to != address(0xdead) \\u0026\\u0026\\r\\n            to != uniswapV2Pair\\r\\n        ) {\\r\\n\\r\\n            uint256 contractBalanceRecepient = balanceOf(to);\\r\\n            require(\\r\\n                contractBalanceRecepient + amount \\u003c= maxWalletToken,\\r\\n                \\\"Exceeds maximum wallet token amount.\\\"\\r\\n            );\\r\\n            \\r\\n        }\\r\\n\\r\\n        \\r\\n        if(amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        if(automatedMarketMakerPairs[to] \\u0026\\u0026 (!_isExcludedFromFees[from]) \\u0026\\u0026 (!_isExcludedFromFees[to])){\\r\\n            require(amount \\u003c= maxSellTransactionAmount, \\\"Sell transfer amount exceeds the maxSellTransactionAmount.\\\");\\r\\n\\r\\n        }\\r\\n\\r\\n        \\r\\n         \\r\\n        \\r\\n\\t       bool takeFee = true;\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        //either account must be excluded before removing fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] ) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n          uint256 fees = 0;\\r\\n        if(takeFee) {\\r\\n        \\tfees = amount.mul(totalFees).div(100);\\r\\n        \\tuint256 extraFee;\\r\\n           \\r\\n        \\tif(automatedMarketMakerPairs[to]){ //uniswapPair Buying/Receiving RFP \\r\\n            \\r\\n        \\t     extraFee =amount.mul(extraFeeOnSell).div(100);\\r\\n                 \\r\\n                fees=fees+extraFee;\\r\\n                 \\r\\n         \\t\\r\\n             }\\r\\n\\r\\n\\r\\n           \\tamount = amount.sub(fees);  \\r\\n\\r\\n            uint256 burnFromFees = fees.mul(burnFees).div(100);  \\r\\n            super._transfer(from,deadWallet,burnFromFees);  \\r\\n            // subtract from totalSupply after sending to dead wallet.\\r\\n             burnOutOfTotalSupply(burnFromFees);  \\r\\n         \\r\\n            _transfer(from, address(this),fees.sub(burnFromFees)); \\r\\n                 \\r\\n                 \\r\\n                  taxCollection(from,to);  \\r\\n                \\r\\n           \\r\\n       \\r\\n         }\\r\\n         \\r\\n          super._transfer(from, to, amount);\\r\\n               \\r\\n\\r\\n        }\\r\\n       \\r\\n\\r\\n\\r\\n        function taxCollection(address from, address to) private {\\r\\n            \\r\\n             if(swapping \\u0026\\u0026 \\r\\n\\r\\n          !automatedMarketMakerPairs[from] \\u0026\\u0026  //uniswapPair is not the Seller\\r\\n          \\r\\n           from != owner() \\u0026\\u0026 to != owner() ) {\\r\\n            \\r\\n            swapping = false;  \\r\\n\\r\\n            _isExcludedFromFees[uniswapV2Pair] = !swapping;\\r\\n\\r\\n            uint256 contractRFPBalance = balanceOf(address(this));\\r\\n            uint256 otherFees = contractRFPBalance.mul(marketingFee.add(devFee).add(charityFee)).div(totalFees);\\r\\n            uint256 lpfees = contractRFPBalance.sub(otherFees);\\r\\n            swapTokensForEth(otherFees);\\r\\n            uint256 Balance = address(this).balance;\\r\\n            uint256 marketingAndDevFees = Balance.mul(marketingFee.add(devFee)).div(totalFees);\\r\\n            uint256 devShare = marketingAndDevFees.mul(devFee.div(marketingFee.add(devFee)));\\r\\n            uint256 marketingShare = marketingAndDevFees.sub(devShare);\\r\\n            uint256 charityShare = Balance.sub(marketingAndDevFees); \\r\\n            payable(_marketingWalletAddress).transfer(marketingShare);\\r\\n            payable(_developmentWalletAddress).transfer(devShare); \\r\\n            payable(_charity).transfer(charityShare);\\r\\n              swapAndLiquify(lpfees);\\r\\n           \\r\\n            swapping = true;\\r\\n            \\r\\n         _isExcludedFromFees[uniswapV2Pair] = !swapping;\\r\\n\\r\\n       \\r\\n      \\r\\n        }\\r\\n\\r\\n        }\\r\\n\\r\\n    \\r\\n    \\r\\n        function isExcludedFromFees(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function enableSwapping(bool isEnabled)public onlyOwner{\\r\\n\\r\\n        require(swapping !=isEnabled,\\\"Swapping is `isEnabled`\\\");\\r\\n        swapping = isEnabled;\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) override public {\\r\\n       // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        // capture the contract\\u0027s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half); // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) public override {\\r\\n        // generate the uniswap pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n   /*function swapTokensForETH(uint256 tokenAmount) public {\\r\\n\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        path[2] = ETH;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    } \\r\\n*/\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n     function withrawAllFund() public onlyOwner {\\r\\n        \\r\\n        uint256 amount = address(this).balance;\\r\\n        // send all Ether to owner\\r\\n        // Owner can receive Ether since the address of owner is payable\\r\\n        (bool success, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send BNB\\\");\\r\\n    }\\r\\n\\r\\n    //Function to transfer Ether from this contract to address from input\\r\\n\\r\\n    function transferToBNBAccount(address payable _to, uint256 _amount) public onlyOwner{\\r\\n        // Note that \\\"to\\\" is declared as payable\\r\\n       \\r\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send BNB\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *@dev \\r\\n    * \\r\\n     */\\r\\n\\r\\n    // Consesus Mechanism For Minting Contracts;\\r\\n         \\r\\n           address public NewContract;\\r\\n           mapping  (address=\\u003ebool) public externalContractToUsePin;\\r\\n           mapping (address=\\u003euint) public numberOfVotedDelegates;\\r\\n            bool[] private vote;\\r\\n           address public lastContractPermitted;\\r\\n           mapping (address=\\u003emapping(address=\\u003eDelegate)) private Voter;\\r\\n           uint256 voteStartTime;\\r\\n           uint256 voteEndTime;\\r\\n            uint256 private incentive;\\r\\n           bool firstExternalContract;\\r\\n           uint256 numberOfPermittedContracts;\\r\\n           address[] public PermmitedContracts;\\r\\n         \\r\\n           uint public numberOfDelegates;\\r\\n            struct  Delegate {\\r\\n             bool canVote;   \\r\\n             bool  voted;\\r\\n             bool voteType;\\r\\n             uint256 serial_number;\\r\\n               } \\r\\n\\r\\n\\r\\n\\r\\n   \\r\\n       // address private voteContract;  // More than 20 accounts is needed.\\r\\n     function startConsensus(address _contractToVote,address[20] memory voters) public onlyOwner{\\r\\n        require(ICanMint(_contractToVote).isCanMint(),\\\"Address Not Allowed\\\");\\r\\n        for(uint x =0; x\\u003cvoters.length;x++){\\r\\n         require(voters[x] !=address(0),\\\"RFP: Address Zero not allowed\\\");\\r\\n         Voter[voters[x]][_contractToVote] = Delegate({canVote:true,voted:false,voteType:false,serial_number:0});\\r\\n      \\r\\n    }\\r\\n\\r\\n           numberOfDelegates = voters.length;\\r\\n            NewContract = _contractToVote;\\r\\n                 \\r\\n            incentive = 1 ether;\\r\\n        \\r\\n          voteStartTime = block.timestamp + 30 minutes; //testing purpose we use minutes; change to hours\\r\\n          voteEndTime = voteStartTime + 1 hours;\\r\\n          delete vote;\\r\\n     }\\r\\n\\r\\n    \\r\\n\\r\\n     function iSVoted(address _votedUser, address con) public view returns(bool voted,bool voteType, uint serial_number) {\\r\\n       \\r\\n         Delegate memory delegate = Voter[_votedUser][con];\\r\\n         voted = delegate.voted;\\r\\n         voteType = delegate.voteType;\\r\\n         serial_number = delegate.serial_number;\\r\\n         \\r\\n         return (voted,voteType,serial_number);\\r\\n     }\\r\\n\\r\\n      \\r\\n\\r\\n        function disableExternalContractToUsePin(address _externalC) public onlyOwner{\\r\\n            require(_externalC != address(0),\\\"Address Zero not allowed\\\");\\r\\n            require(externalContractToUsePin[_externalC],\\\"External Contract not set\\\");\\r\\n            \\r\\n            externalContractToUsePin[_externalC]=false;\\r\\n        }\\r\\n\\r\\n        function voteExternalContractToUsePin(bool _vote) public{\\r\\n            require( block.timestamp \\u003e voteStartTime, \\\" Voting not Started\\\");\\r\\n           \\r\\n            require( block.timestamp \\u003c voteEndTime, \\\" Voting Ended\\\");\\r\\n                        \\r\\n            require(Voter[_msgSender()][NewContract].canVote, \\\"You are not Allowed to vote or You have Voted already\\\");\\r\\n                  vote.push(_vote);\\r\\n\\r\\n                Voter[_msgSender()][NewContract] = Delegate({canVote:false,voted:true,voteType:_vote,serial_number:vote.length});\\r\\n                numberOfVotedDelegates[NewContract] = vote.length;\\r\\n                  _mintReward(_msgSender(),incentive,0);\\r\\n               \\r\\n        }\\r\\n\\r\\n        /**\\r\\n        New contract must be address(0), A situation where new Contract is not address zero needs community attenton\\r\\n         */\\r\\n        function checkForNewContract() public view returns(address){\\r\\n            return NewContract;\\r\\n\\r\\n        }\\r\\n\\r\\n       function countVoteForExternalContract() public onlyOwner {\\r\\n        require (block.timestamp \\u003e voteEndTime,\\\"Voting is in process\\\");       \\r\\n           \\r\\n           uint yes = 0; \\r\\n          \\r\\n\\r\\n           for(uint x =0; x\\u003cvote.length;++x){\\r\\n            if(vote[x] == true){yes +=1;}\\r\\n           }\\r\\n\\r\\n        \\r\\n               if(yes \\u003e vote.length.mul(2).div(3) \\u0026\\u0026 vote.length\\u003enumberOfDelegates.div(2)){\\r\\n                externalContractToUsePin[NewContract]=true;\\r\\n                lastContractPermitted = NewContract;\\r\\n                numberOfPermittedContracts +=1;\\r\\n                PermmitedContracts.push(NewContract);\\r\\n                \\r\\n               }\\r\\n               \\r\\n                firstExternalContract = true;\\r\\n               NewContract = address(0);\\r\\n                 delete vote;\\r\\n               // use emit event \\r\\n                 \\r\\n       } \\r\\n\\r\\n             \\r\\n       function ownerVetoFirstExternalContractToUsePin(address staking)  public onlyOwner {\\r\\n             require(staking != address(0),\\\"Address Zero not allowed\\\");\\r\\n             require(firstExternalContract != true, \\\"firstExternalContract already set\\\");\\r\\n             require(ICanMint(staking).isCanMint(),\\\"Address Not Allowed\\\");\\r\\n\\r\\n                 \\r\\n                  externalContractToUsePin[staking]=true;\\r\\n                  lastContractPermitted = staking;\\r\\n                  NewContract =address(0);\\r\\n                  firstExternalContract = true;\\r\\n                  numberOfPermittedContracts=1;\\r\\n                  PermmitedContracts.push(staking);\\r\\n       }  \\r\\n\\r\\n\\r\\n\\r\\n       function mineReward(address to,uint256 amount, bool isFee) override public{ \\r\\n        require (externalContractToUsePin[_msgSender()],\\\" Contract not Permitted to use Function\\\");\\r\\n             \\r\\n        amount = totalSupply().add(amount) \\u003etotalMintSupply()? totalMintSupply().sub(totalSupply()):amount;    \\r\\n        require(totalSupply().add(amount) \\u003c= totalMintSupply(), \\\"RFP: `totalSupply` Exceeded\\\");\\r\\n\\r\\n            uint256 fee = isFee? amount.mul(5).div(100):0;\\r\\n             super._mintReward(to,amount,fee);  \\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n /* @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\n library SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b \\u003e= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations for int256 with overflow safety checks.\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a \\u003c 0 ? -a : a;\\r\\n    }\\r\\n\\r\\n\\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a \\u003e= 0);\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBNBForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NewContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PermmitedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developmentWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_isStakingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFees\",\"type\":\"uint256\"}],\"name\":\"burnOutOfTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkForNewContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countVoteForExternalContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalC\",\"type\":\"address\"}],\"name\":\"disableExternalContractToUsePin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"enableSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableT\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalContractToUsePin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionPin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votedUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"}],\"name\":\"iSVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"voteType\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"serial_number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastContractPermitted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFee\",\"type\":\"bool\"}],\"name\":\"mineReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfDelegates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfVotedDelegates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"ownerVetoFirstExternalContractToUsePin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"}],\"name\":\"setCharityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setExtraFeeOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSelltx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractToVote\",\"type\":\"address\"},{\"internalType\":\"address[20]\",\"name\":\"voters\",\"type\":\"address[20]\"}],\"name\":\"startConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToBNBAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferWithoutFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"voteExternalContractToUsePin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withrawAllFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RFP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e5e435e4f6ecf585bf24db53dc3041375cd4b81b6af2a3569f646d946a4cfc7"}