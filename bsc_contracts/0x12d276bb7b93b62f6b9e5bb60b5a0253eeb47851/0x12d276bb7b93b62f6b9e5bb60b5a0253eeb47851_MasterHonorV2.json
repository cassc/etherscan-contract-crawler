{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterHonorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ozeppelin/Ownable.sol\\\";\\nimport \\\"./ozeppelin/SafeMath.sol\\\";\\nimport \\\"./ozeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"./MasterHonorInc/IBEP20.sol\\\";\\nimport \\\"./MasterHonorInc/SafeBEP20.sol\\\";\\nimport \\\"./MasterHonorInc/IMasterChef.sol\\\";\\n\\n\\ncontract MasterHonorV2 is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 boostMultiplier;\\n    }\\n\\n\\n    struct PoolInfo {\\n        uint256 accHONORPerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n    }\\n\\n    /// @notice Address of MCV1 contract.\\n    IMasterChef public immutable MASTER_CHEF;\\n    /// @notice Address of HONOR contract.\\n    IBEP20 public immutable HONOR;\\n\\n    /// @notice The only address can withdraw all the burn HONOR.\\n    address public burnAdmin;\\n    /// @notice The contract handles the share boosts.\\n    address public boostContract;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IBEP20[] public lpToken;\\n\\n    /// @notice Info of each pool user.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\n    mapping(address => bool) public whiteList;\\n\\n    /// @notice The pool id of the MCV2 mock token pool in MCV1.\\n    uint256 public immutable MASTER_PID;\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\n    uint256 public totalRegularAllocPoint;\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\n    uint256 public totalSpecialAllocPoint;\\n    ///  @notice 40 HONORs per block in MCV1\\n    uint256 public constant MASTERCHEF_HONOR_PER_BLOCK = 40 * 1e18;\\n    uint256 public constant ACC_HONOR_PRECISION = 1e18;\\n\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    /// @notice total HONOR rate = toBurn + toRegular + toSpecial\\n    uint256 public constant HONOR_RATE_TOTAL_PRECISION = 1e12;\\n    /// @notice The last block number of HONOR burn action being executed.\\n    /// @notice HONOR distribute % for burn\\n    uint256 public honorRateToBurn = 643750000000;\\n    /// @notice HONOR distribute % for regular farm pool\\n    uint256 public honorRateToRegularFarm = 62847222222;\\n    /// @notice HONOR distribute % for special pools\\n    uint256 public honorRateToSpecialFarm = 293402777778;\\n\\n    uint256 public lastBurnedBlock;\\n\\n    event Init();\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, bool isRegular);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accHONORPerShare);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event UpdateHonorRate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event UpdateWhiteList(address indexed user, bool isValid);\\n    event UpdateBoostContract(address indexed boostContract);\\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\\n\\n    /// @param _MASTER_CHEF The PanHONORSwap MCV1 contract address.\\n    /// @param _HONOR The HONOR token contract address.\\n    /// @param _MASTER_PID The pool id of the dummy pool on the MCV1.\\n    /// @param _burnAdmin The address of burn admin.\\n    constructor(\\n        IMasterChef _MASTER_CHEF,\\n        IBEP20 _HONOR,\\n        uint256 _MASTER_PID,\\n        address _burnAdmin\\n    ) public {\\n        MASTER_CHEF = _MASTER_CHEF;\\n        HONOR = _HONOR;\\n        MASTER_PID = _MASTER_PID;\\n        burnAdmin = _burnAdmin;\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not the boost contract.\\n     */\\n    modifier onlyBoostContract() {\\n        require(boostContract == msg.sender, \\\"Ownable: caller is not the boost contract\\\");\\n        _;\\n    }\\n\\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of HONOR.\\n    /// It will transfer all the `dummyToken` in the tx sender address.\\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\\n    /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\\n    function init(IBEP20 dummyToken) external onlyOwner {\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"MasterChefV2: Balance must exceed 0\\\");\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n        dummyToken.approve(address(MASTER_CHEF), balance);\\n        MASTER_CHEF.deposit(MASTER_PID, balance);\\n        // MCV2 start to earn HONOR reward from current block in MCV1 pool\\n        lastBurnedBlock = block.number;\\n        emit Init();\\n    }\\n\\n    /// @notice Returns the number of MCV2 pools.\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _isRegular,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\n        // stake HONOR token will cause staked token and reward token mixed up,\\n        // may cause staked tokens withdraw as reward token,never do it.\\n        require(_lpToken != HONOR, \\\"HONOR token can't be added to farm pools\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (_isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\n        }\\n        lpToken.push(_lpToken);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n        allocPoint: _allocPoint,\\n        lastRewardBlock: block.number,\\n        accHONORPerShare: 0,\\n        isRegular: _isRegular,\\n        totalBoostedShare: 0\\n        })\\n        );\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\n    }\\n\\n    /// @notice Update the given pool's HONOR allocation point. Can only be called by the owner.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _allocPoint New number of allocation points for the pool.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\n        updatePool(_pid);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (poolInfo[_pid].isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        }\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice View function for checking pending HONOR rewards.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _user Address of the user.\\n    function pendingHONOR(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accHONORPerShare = pool.accHONORPerShare;\\n        uint256 lpSupply = pool.totalBoostedShare;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n\\n            uint256 HONORReward = multiplier.mul(HONORPerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\\n            );\\n            accHONORPerShare = accHONORPerShare.add(HONORReward.mul(ACC_HONOR_PRECISION).div(lpSupply));\\n        }\\n\\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier(_user, _pid)).div(BOOST_PRECISION);\\n        return boostedAmount.mul(accHONORPerShare).div(ACC_HONOR_PRECISION).sub(user.rewardDebt);\\n    }\\n\\n    /// @notice Update HONOR reward for all the active pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            if (pool.allocPoint != 0) {\\n                updatePool(pid);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of HONOR per block.\\n    /// @param _isRegular If the pool belongs to regular or special.\\n    function HONORPerBlock(bool _isRegular) public view returns (uint256 amount) {\\n        if (_isRegular) {\\n            amount = MASTERCHEF_HONOR_PER_BLOCK.mul(honorRateToRegularFarm).div(HONOR_RATE_TOTAL_PRECISION);\\n        } else {\\n            amount = MASTERCHEF_HONOR_PER_BLOCK.mul(honorRateToSpecialFarm).div(HONOR_RATE_TOTAL_PRECISION);\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of HONOR per block to burn.\\n    function HONORPerBlockToBurn() public view returns (uint256 amount) {\\n        amount = MASTERCHEF_HONOR_PER_BLOCK.mul(honorRateToBurn).div(HONOR_RATE_TOTAL_PRECISION);\\n    }\\n\\n    /// @notice Update reward variables for the given pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.totalBoostedShare;\\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\\n\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n                uint256 HONORReward = multiplier.mul(HONORPerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                pool.accHONORPerShare = pool.accHONORPerShare.add((HONORReward.mul(ACC_HONOR_PRECISION).div(lpSupply)));\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accHONORPerShare);\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to deposit.\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(\\n            pool.isRegular || whiteList[msg.sender],\\n            \\\"MasterChefV2: The address is not available to deposit in this pool\\\"\\n        );\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        if (user.amount > 0) {\\n            settlePendingHONOR(msg.sender, _pid, multiplier);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\n            user.amount = user.amount.add(_amount);\\n\\n            // Update total boosted share.\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accHONORPerShare).div(\\n            ACC_HONOR_PRECISION\\n        );\\n        poolInfo[_pid] = pool;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Withdraw LP tokens from pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to withdraw.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        settlePendingHONOR(msg.sender, _pid, multiplier);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accHONORPerShare).div(\\n            ACC_HONOR_PRECISION\\n        );\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Harvests HONOR from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\\n    function harvestFromMasterChef() public {\\n        MASTER_CHEF.deposit(MASTER_PID, 0);\\n    }\\n\\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        uint256 boostedAmount = amount.mul(getBoostMultiplier(msg.sender, _pid)).div(BOOST_PRECISION);\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /// @notice Send HONOR pending for burn to `burnAdmin`.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function burnHONOR(bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\n        uint256 pendingHONORToBurn = multiplier.mul(HONORPerBlockToBurn());\\n\\n        // SafeTransfer HONOR\\n        _safeTransfer(burnAdmin, pendingHONORToBurn);\\n        lastBurnedBlock = block.number;\\n    }\\n\\n    /// @notice Update the % of HONOR distributions for burn, regular pools and special pools.\\n    /// @param _burnRate The % of HONOR to burn each block.\\n    /// @param _regularFarmRate The % of HONOR to regular pools each block.\\n    /// @param _specialFarmRate The % of HONOR to special pools each block.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function updateHONORRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\n            \\\"MasterChefV2: HONOR rate must be greater than 0\\\"\\n        );\\n        require(\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == HONOR_RATE_TOTAL_PRECISION,\\n            \\\"MasterChefV2: Total rate must be 1e12\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        // burn HONOR base on old burn HONOR rate\\n        burnHONOR(false);\\n\\n        honorRateToBurn = _burnRate;\\n        honorRateToRegularFarm = _regularFarmRate;\\n        honorRateToSpecialFarm = _specialFarmRate;\\n\\n        emit UpdateHonorRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /// @notice Update burn admin address.\\n    /// @param _newAdmin The new burn admin address.\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\n        require(_newAdmin != address(0), \\\"MasterChefV2: Burn admin address must be valid\\\");\\n        require(_newAdmin != burnAdmin, \\\"MasterChefV2: Burn admin address is the same with current address\\\");\\n        address _oldAdmin = burnAdmin;\\n        burnAdmin = _newAdmin;\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\n    }\\n\\n    /// @notice Update whitelisted addresses for special pools.\\n    /// @param _user The address to be updated.\\n    /// @param _isValid The flag for valid or invalid.\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\n        require(_user != address(0), \\\"MasterChefV2: The white list address must be valid\\\");\\n\\n        whiteList[_user] = _isValid;\\n        emit UpdateWhiteList(_user, _isValid);\\n    }\\n\\n    /// @notice Update boost contract address and max boost factor.\\n    /// @param _newBoostContract The new address for handling all the share boosts.\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\n        require(\\n            _newBoostContract != address(0) && _newBoostContract != boostContract,\\n            \\\"MasterChefV2: New boost contract address must be valid\\\"\\n        );\\n\\n        boostContract = _newBoostContract;\\n        emit UpdateBoostContract(_newBoostContract);\\n    }\\n\\n    /// @notice Update user boost factor.\\n    /// @param _user The user address for boost factor updates.\\n    /// @param _pid The pool id for the boost factor updates.\\n    /// @param _newMultiplier New boost multiplier.\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external onlyBoostContract nonReentrant {\\n        require(_user != address(0), \\\"MasterChefV2: The user address must be valid\\\");\\n        require(poolInfo[_pid].isRegular, \\\"MasterChefV2: Only regular farm could be boosted\\\");\\n        require(\\n            _newMultiplier >= BOOST_PRECISION && _newMultiplier <= MAX_BOOST_PRECISION,\\n            \\\"MasterChefV2: Invalid new boost multiplier\\\"\\n        );\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\n        settlePendingHONOR(_user, _pid, prevMultiplier);\\n\\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.accHONORPerShare).div(\\n            ACC_HONOR_PRECISION\\n        );\\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\\n        );\\n        poolInfo[_pid] = pool;\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\n\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\n    }\\n\\n    /// @notice Get user boost multiplier for specific pool id.\\n    /// @param _user The user address.\\n    /// @param _pid The pool id.\\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\n    }\\n\\n    /// @notice Settles, distribute the pending HONOR rewards for given user.\\n    /// @param _user The user address for settling rewards.\\n    /// @param _pid The pool id.\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\n    function settlePendingHONOR(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _boostMultiplier\\n    ) internal {\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\\n        uint256 accHONOR = boostedAmount.mul(poolInfo[_pid].accHONORPerShare).div(ACC_HONOR_PRECISION);\\n        uint256 pending = accHONOR.sub(user.rewardDebt);\\n        // SafeTransfer HONOR\\n        _safeTransfer(_user, pending);\\n    }\\n\\n    /// @notice Safe Transfer HONOR.\\n    /// @param _to The HONOR receiver address.\\n    /// @param _amount transfer HONOR amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            // Check whether MCV2 has enough HONOR. If not, harvest from MCV1.\\n            if (HONOR.balanceOf(address(this)) < _amount) {\\n                harvestFromMasterChef();\\n            }\\n            uint256 balance = HONOR.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            HONOR.safeTransfer(_to, _amount);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/MasterHonorInc/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function pendingHonor(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\"\r\n    },\r\n    \"contracts/MasterHonorInc/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"../ozeppelin/Address.sol\\\";\\nimport \\\"../ozeppelin/SafeMath.sol\\\";\\n\\n\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IBEP20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n        token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n        address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/MasterHonorInc/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n   */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n   */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n   */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n   */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n   */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n   */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n    function allowance(address _owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/ozeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ozeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary SafeMath {\\n \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ozeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ozeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ozeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n\\nlibrary Address {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n   \\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n  \\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n  \\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_MASTER_CHEF\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_HONOR\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MASTER_PID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdateHonorRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accHONORPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_HONOR_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HONOR\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"HONORPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HONORPerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HONOR_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_HONOR_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_CHEF\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burnHONOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFromMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honorRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honorRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honorRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingHONOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accHONORPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBoostContract\",\"type\":\"address\"}],\"name\":\"updateBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateBurnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateHONORRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accHONORPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct MasterHonorV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterHonorV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000d942b5052a3b25bc8af8a0931ed793a2ba195d30000000000000000000000004cfac133438b25c22434ed56106eaf8503ec65ea00000000000000000000000000000000000000000000000000000000000000010000000000000000000000003f6b8d3a625be1d3b69b6375cfa08e7643c15b9a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}