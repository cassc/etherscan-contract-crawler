{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\nimport './interfaces/ISmoltingInu.sol';\\nimport './SmolGame.sol';\\n\\n/**\\n * @title Lottery\\n * @dev Chainlink VRF powered lottery for ERC-20 tokens\\n */\\ncontract Lottery is SmolGame, VRFConsumerBaseV2 {\\n  uint256 private constant PERCENT_DENOMENATOR = 1000;\\n\\n  ISmoltingInu smol = ISmoltingInu(0x553539d40AE81FD0d9C4b991B0b77bE6f6Bc030e);\\n  uint256 public currentMinWinAmount = 1000 * 10**18;\\n  uint256 public percentageFeeWin = (PERCENT_DENOMENATOR * 95) / 100;\\n  uint256 public lottoEntryFee = 10**18; // 1 token (assuming 18 decimals)\\n  uint256 public lottoTimespan = 60 * 60 * 24; // 24 hours\\n  uint16 public numberWinners = 1;\\n\\n  uint256[] public lotteries;\\n  // lottoTimestamp => isSettled\\n  mapping(uint256 => bool) public isLotterySettled;\\n  // lottoTimestamp => participants\\n  mapping(uint256 => address[]) public lottoParticipants;\\n  // user => currentLottery => numEntries\\n  mapping(address => mapping(uint256 => uint256)) public lotteryEntriesPerUser;\\n  // lottoTimestamp => winner\\n  mapping(uint256 => address[]) public lottoWinners;\\n  // lottoTimestamp => amountWon\\n  mapping(uint256 => uint256) public lottoWinnerAmounts;\\n\\n  mapping(uint256 => uint256) private _lotterySelectInit;\\n  mapping(uint256 => uint256) private _lotterySelectReqIdInit;\\n\\n  VRFCoordinatorV2Interface vrfCoord;\\n  LinkTokenInterface link;\\n  uint64 private _vrfSubscriptionId;\\n  bytes32 private _vrfKeyHash;\\n  uint16 private _vrfNumBlocks = 3;\\n  uint32 private _vrfCallbackGasLimit = 600000;\\n\\n  event DrawWinner(uint256 indexed lottoTimestamp);\\n  event SelectedWinners(\\n    uint256 indexed lottoTimestamp,\\n    address[] winner,\\n    uint256 amountWon\\n  );\\n\\n  constructor(\\n    address _nativeUSDFeed,\\n    address _vrfCoordinator,\\n    uint64 _subscriptionId,\\n    address _linkToken,\\n    bytes32 _keyHash\\n  ) SmolGame(_nativeUSDFeed) VRFConsumerBaseV2(_vrfCoordinator) {\\n    vrfCoord = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    link = LinkTokenInterface(_linkToken);\\n    _vrfSubscriptionId = _subscriptionId;\\n    _vrfKeyHash = _keyHash;\\n  }\\n\\n  function launch() external onlyOwner {\\n    lotteries.push(block.timestamp);\\n  }\\n\\n  function enterLotto(uint256 _entries) external payable {\\n    _enterLotto(msg.sender, msg.sender, _entries);\\n  }\\n\\n  function enterLottoForUser(address _user, uint256 _entries) external payable {\\n    _enterLotto(msg.sender, _user, _entries);\\n  }\\n\\n  function _enterLotto(\\n    address _payingUser,\\n    address _entryUser,\\n    uint256 _entries\\n  ) internal {\\n    _payServiceFee();\\n    uint256 _currentLottery = getCurrentLottery();\\n    if (block.timestamp > _currentLottery + lottoTimespan) {\\n      selectLottoWinner();\\n      _currentLottery = getCurrentLottery();\\n    }\\n\\n    smol.transferFrom(_payingUser, address(this), _entries * lottoEntryFee);\\n    smol.addPlayThrough(\\n      _entryUser,\\n      _entries * lottoEntryFee,\\n      percentageWagerTowardsRewards\\n    );\\n    lotteryEntriesPerUser[_entryUser][_currentLottery] += _entries;\\n    for (uint256 i = 0; i < _entries; i++) {\\n      lottoParticipants[_currentLottery].push(_entryUser);\\n    }\\n  }\\n\\n  function selectLottoWinner() public {\\n    uint256 _currentLottery = getCurrentLottery();\\n    require(\\n      block.timestamp > _currentLottery + lottoTimespan,\\n      'lottery time period must be past'\\n    );\\n    require(currentMinWinAmount > 0, 'no jackpot to win');\\n    require(_lotterySelectInit[_currentLottery] == 0, 'already initiated');\\n    lotteries.push(block.timestamp);\\n\\n    if (lottoParticipants[_currentLottery].length == 0) {\\n      _lotterySelectInit[_currentLottery] = 1;\\n      isLotterySettled[_currentLottery] = true;\\n      return;\\n    }\\n\\n    uint256 requestId = vrfCoord.requestRandomWords(\\n      _vrfKeyHash,\\n      _vrfSubscriptionId,\\n      _vrfNumBlocks,\\n      _vrfCallbackGasLimit,\\n      numberWinners\\n    );\\n    _lotterySelectInit[_currentLottery] = requestId;\\n    _lotterySelectReqIdInit[requestId] = _currentLottery;\\n    emit DrawWinner(_currentLottery);\\n  }\\n\\n  function manualSettleLottery(uint256 requestId, uint256[] memory randomWords)\\n    external\\n    onlyOwner\\n  {\\n    _settleLottery(requestId, randomWords);\\n  }\\n\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n    internal\\n    override\\n  {\\n    _settleLottery(requestId, randomWords);\\n  }\\n\\n  function _settleLottery(uint256 requestId, uint256[] memory randomWords)\\n    internal\\n  {\\n    uint256 _lotteryToSettle = _lotterySelectReqIdInit[requestId];\\n    require(_lotteryToSettle != 0, 'lottery selection does not exist');\\n\\n    uint256 _amountWon = getLotteryRewardAmount(_lotteryToSettle);\\n    address[] memory _winners = new address[](randomWords.length);\\n    for (uint256 i = 0; i < randomWords.length; i++) {\\n      uint256 _winnerIdx = randomWords[i] %\\n        lottoParticipants[_lotteryToSettle].length;\\n      _winners[i] = lottoParticipants[_lotteryToSettle][_winnerIdx];\\n      smol.gameMint(_winners[i], _amountWon / randomWords.length);\\n    }\\n\\n    smol.gameBurn(address(this), smol.balanceOf(address(this)));\\n    lottoWinners[_lotteryToSettle] = _winners;\\n    lottoWinnerAmounts[_lotteryToSettle] = _amountWon;\\n    isLotterySettled[_lotteryToSettle] = true;\\n    emit SelectedWinners(_lotteryToSettle, _winners, _amountWon);\\n  }\\n\\n  function getLottoToken() external view returns (address) {\\n    return address(smol);\\n  }\\n\\n  function getCurrentLottery() public view returns (uint256) {\\n    return lotteries[lotteries.length - 1];\\n  }\\n\\n  function getNumberLotteries() external view returns (uint256) {\\n    return lotteries.length;\\n  }\\n\\n  function getCurrentNumberEntriesForUser(address _user)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return lotteryEntriesPerUser[_user][getCurrentLottery()];\\n  }\\n\\n  function getCurrentLotteryRewardAmount() external view returns (uint256) {\\n    return getLotteryRewardAmount(getCurrentLottery());\\n  }\\n\\n  function getLotteryRewardAmount(uint256 _lottery)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 _participants = getLotteryEntries(_lottery);\\n    uint256 _entryFeesTotal = _participants * lottoEntryFee;\\n    uint256 _entryFeeWinAmount = (_entryFeesTotal * percentageFeeWin) /\\n      PERCENT_DENOMENATOR;\\n\\n    if (_entryFeeWinAmount < currentMinWinAmount) {\\n      return currentMinWinAmount;\\n    }\\n    return _entryFeeWinAmount;\\n  }\\n\\n  function getCurrentLotteryEntries() external view returns (uint256) {\\n    return getLotteryEntries(getCurrentLottery());\\n  }\\n\\n  function getLotteryEntries(uint256 _lottery) public view returns (uint256) {\\n    return lottoParticipants[_lottery].length;\\n  }\\n\\n  function setCurrentMinWinAmount(uint256 _amount) external onlyOwner {\\n    currentMinWinAmount = _amount;\\n  }\\n\\n  function setPercentageFeeWin(uint256 _percent) external onlyOwner {\\n    require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');\\n    require(_percent > 0, 'has to be more than 0%');\\n    percentageFeeWin = _percent;\\n  }\\n\\n  function setLottoToken(address _token) external onlyOwner {\\n    smol = ISmoltingInu(_token);\\n  }\\n\\n  function setLottoTimespan(uint256 _seconds) external onlyOwner {\\n    lottoTimespan = _seconds;\\n  }\\n\\n  function setLottoEntryFee(uint256 _fee) external onlyOwner {\\n    lottoEntryFee = _fee;\\n  }\\n\\n  function setNumberWinners(uint16 _number) external onlyOwner {\\n    require(_number > 0 && _number <= 20, 'no more than 20 winners');\\n    numberWinners = _number;\\n  }\\n\\n  function setVrfSubscriptionId(uint64 _subId) external onlyOwner {\\n    _vrfSubscriptionId = _subId;\\n  }\\n\\n  function setVrfNumBlocks(uint16 _numBlocks) external onlyOwner {\\n    _vrfNumBlocks = _numBlocks;\\n  }\\n\\n  function setVrfCallbackGasLimit(uint32 _gas) external onlyOwner {\\n    _vrfCallbackGasLimit = _gas;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmoltingInu.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @dev SmoltingInu token interface\\n */\\n\\ninterface ISmoltingInu is IERC20 {\\n  function gameMint(address _user, uint256 _amount) external;\\n\\n  function gameBurn(address _user, uint256 _amount) external;\\n\\n  function addPlayThrough(\\n    address _user,\\n    uint256 _amountWagered,\\n    uint8 _percentContribution\\n  ) external;\\n\\n  function setCanSellWithoutElevation(address _wallet, bool _canSellWithoutElev)\\n    external;\\n}\\n\"\r\n    },\r\n    \"contracts/SmolGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport './interfaces/ISmolGame.sol';\\nimport './interfaces/ISmolGameFeeAdjuster.sol';\\n\\ncontract SmolGame is ISmolGame, Ownable {\\n  address payable public treasury;\\n  uint256 public serviceFeeUSDCents = 200; // $2\\n  uint8 public percentageWagerTowardsRewards = 0; // 0%\\n\\n  address[] public walletsPlayed;\\n  mapping(address => bool) internal _walletsPlayedIndexed;\\n\\n  ISmolGameFeeAdjuster internal _feeDiscounter;\\n  AggregatorV3Interface internal _feeUSDConverterFeed;\\n\\n  uint256 public gameMinWagerAbsolute;\\n  uint256 public gameMaxWagerAbsolute;\\n  uint256 public gameMinWhaleWagerAbsolute = 500 * 10**18;\\n  uint256 public gameMaxWhaleWagerAbsolute;\\n  mapping(address => bool) public isGameWhale;\\n\\n  constructor(address _clPriceFeed) {\\n    // https://docs.chain.link/docs/reference-contracts/\\n    // https://github.com/pcaversaccio/chainlink-price-feed/blob/main/README.md\\n    _feeUSDConverterFeed = AggregatorV3Interface(_clPriceFeed);\\n  }\\n\\n  function _payServiceFee() internal {\\n    uint256 _serviceFeeWei = getFinalServiceFeeWei();\\n    if (_serviceFeeWei > 0) {\\n      require(msg.value >= _serviceFeeWei, 'not able to pay service fee');\\n      address payable _treasury = treasury == address(0)\\n        ? payable(owner())\\n        : treasury;\\n      (bool success, ) = _treasury.call{ value: msg.value }('');\\n      require(success, 'could not pay service fee');\\n    }\\n    if (!_walletsPlayedIndexed[msg.sender]) {\\n      walletsPlayed.push(msg.sender);\\n      _walletsPlayedIndexed[msg.sender] = true;\\n    }\\n  }\\n\\n  function getFinalServiceFeeWei() public view override returns (uint256) {\\n    uint256 _serviceFeeWei = getBaseServiceFeeWei(serviceFeeUSDCents);\\n    if (address(_feeDiscounter) != address(0)) {\\n      _serviceFeeWei = _feeDiscounter.getFinalServiceFeeWei(_serviceFeeWei);\\n    }\\n    return _serviceFeeWei;\\n  }\\n\\n  function getBaseServiceFeeWei(uint256 _costUSDCents)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Creates a USD balance with 18 decimals\\n    uint256 paymentUSD18 = (10**18 * _costUSDCents) / 100;\\n\\n    // adding back 18 decimals to get returned value in wei\\n    return (10**18 * paymentUSD18) / _getLatestETHPrice();\\n  }\\n\\n  /**\\n   * Returns the latest ETH/USD price with returned value at 18 decimals\\n   * https://docs.chain.link/docs/get-the-latest-price/\\n   */\\n  function _getLatestETHPrice() internal view returns (uint256) {\\n    uint8 decimals = _feeUSDConverterFeed.decimals();\\n    (, int256 price, , , ) = _feeUSDConverterFeed.latestRoundData();\\n    return uint256(price) * (10**18 / 10**decimals);\\n  }\\n\\n  function _enforceMinMaxWagerLogic(address _wagerer, uint256 _wagerAmount)\\n    internal\\n    view\\n  {\\n    if (isGameWhale[_wagerer]) {\\n      require(\\n        _wagerAmount >= gameMinWhaleWagerAbsolute,\\n        'does not meet minimum whale amount requirements'\\n      );\\n      require(\\n        gameMaxWhaleWagerAbsolute == 0 ||\\n          _wagerAmount <= gameMaxWhaleWagerAbsolute,\\n        'exceeds maximum whale amount requirements'\\n      );\\n    } else {\\n      require(\\n        _wagerAmount >= gameMinWagerAbsolute,\\n        'does not meet minimum amount requirements'\\n      );\\n      require(\\n        gameMaxWagerAbsolute == 0 || _wagerAmount <= gameMaxWagerAbsolute,\\n        'exceeds maximum amount requirements'\\n      );\\n    }\\n  }\\n\\n  function getNumberWalletsPlayed() external view returns (uint256) {\\n    return walletsPlayed.length;\\n  }\\n\\n  function getFeeDiscounter() external view returns (address) {\\n    return address(_feeDiscounter);\\n  }\\n\\n  function setFeeDiscounter(address _discounter) external onlyOwner {\\n    _feeDiscounter = ISmolGameFeeAdjuster(_discounter);\\n  }\\n\\n  function setTreasury(address _treasury) external onlyOwner {\\n    treasury = payable(_treasury);\\n  }\\n\\n  function setServiceFeeUSDCents(uint256 _cents) external onlyOwner {\\n    serviceFeeUSDCents = _cents;\\n  }\\n\\n  function setPercentageWagerTowardsRewards(uint8 _percent) external onlyOwner {\\n    require(_percent <= 100, 'cannot be more than 100%');\\n    percentageWagerTowardsRewards = _percent;\\n  }\\n\\n  function setGameMinWagerAbsolute(uint256 _amount) external onlyOwner {\\n    gameMinWagerAbsolute = _amount;\\n  }\\n\\n  function setGameMaxWagerAbsolute(uint256 _amount) external onlyOwner {\\n    gameMaxWagerAbsolute = _amount;\\n  }\\n\\n  function setGameMinWhaleWagerAbsolute(uint256 _amount) external onlyOwner {\\n    gameMinWhaleWagerAbsolute = _amount;\\n  }\\n\\n  function setGameMaxWhaleWagerAbsolute(uint256 _amount) external onlyOwner {\\n    gameMaxWhaleWagerAbsolute = _amount;\\n  }\\n\\n  function setIsGameWhale(address _user, bool _isWhale) external onlyOwner {\\n    isGameWhale[_user] = _isWhale;\\n  }\\n\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmolGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ISmolGame interface\\n */\\n\\ninterface ISmolGame {\\n  function getFinalServiceFeeWei() external view returns (uint256);\\n\\n  function getBaseServiceFeeWei(uint256 costUSDCents)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmolGameFeeAdjuster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ISmolGameFeeAdjuster interface\\n */\\n\\ninterface ISmolGameFeeAdjuster {\\n  function getFinalServiceFeeWei(uint256 _baseFeeWei)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeUSDFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lottoTimestamp\",\"type\":\"uint256\"}],\"name\":\"DrawWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lottoTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winner\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"SelectedWinners\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentMinWinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entries\",\"type\":\"uint256\"}],\"name\":\"enterLotto\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entries\",\"type\":\"uint256\"}],\"name\":\"enterLottoForUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMaxWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMaxWhaleWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMinWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMinWhaleWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costUSDCents\",\"type\":\"uint256\"}],\"name\":\"getBaseServiceFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLotteryEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLotteryRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentNumberEntriesForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDiscounter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalServiceFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottery\",\"type\":\"uint256\"}],\"name\":\"getLotteryEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottery\",\"type\":\"uint256\"}],\"name\":\"getLotteryRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLottoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberLotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberWalletsPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGameWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLotterySettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryEntriesPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lottoParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoTimespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lottoWinnerAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lottoWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"manualSettleLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageFeeWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageWagerTowardsRewards\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectLottoWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeUSDCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCurrentMinWinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discounter\",\"type\":\"address\"}],\"name\":\"setFeeDiscounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGameMaxWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGameMaxWhaleWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGameMinWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGameMinWhaleWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"}],\"name\":\"setIsGameWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setLottoEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setLottoTimespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setLottoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_number\",\"type\":\"uint16\"}],\"name\":\"setNumberWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPercentageFeeWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"setPercentageWagerTowardsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"setServiceFeeUSDCents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gas\",\"type\":\"uint32\"}],\"name\":\"setVrfCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_numBlocks\",\"type\":\"uint16\"}],\"name\":\"setVrfNumBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"setVrfSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletsPlayed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000c587d9053cd1118f25f645f9e08bb98c9712a4ee0000000000000000000000000000000000000000000000000000000000000082000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb75114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}