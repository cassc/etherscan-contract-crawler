{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IPancakeSwap {\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IOriginalContract {\r\n    struct User {\r\n        uint256 checkpoint;\r\n        uint256 totalInvested;\r\n        uint256 totalTokenPurchase;\r\n        uint256 totalUsdPurchase;\r\n        address referrer;\r\n        uint256[22] levels;\r\n        uint256[22] totalBusiness;\r\n        uint256 withdrawn;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n        Stake[] stakes;\r\n        Withdraw[] withdraws;\r\n        uint256 leg;\r\n        uint256 deposit_payouts;\r\n        uint256 userId;\r\n        uint256 directBonus;\r\n        uint256 directBonusWithdrawn;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 checkpoint;\r\n        uint256 recieved;\r\n    }\r\n\r\n    struct Withdraw {\r\n        uint256 amount;\r\n        uint256 checkpoint;\r\n        uint256 recieved;\r\n    }\r\n\r\n    function getUserInfo(\r\n        address userAddress\r\n    ) external view returns (User memory);\r\n\r\n    function getUserSellInfo(\r\n        address userAddress,\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 checkpoint, uint256 recieved);\r\n}\r\n\r\ncontract AmpleApp is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        uint256 checkpoint;\r\n        uint256 depositcheckpoint;\r\n        uint256 totalInvested;\r\n        uint256 totalTokenPurchase;\r\n        uint256 totalUsdPurchase;\r\n        address referrer;\r\n        uint256[22] levels;\r\n        uint256[22] totalBusiness;\r\n        uint256 withdrawn;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n        Stake[] stakes;\r\n        Withdraw[] withdraws;\r\n        uint256 leg;\r\n        uint256 deposit_payouts;\r\n        uint256 userId;\r\n        uint256 directBonus;\r\n        uint256 directBonusWithdrawn;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 checkpoint;\r\n        uint256 recieved;\r\n    }\r\n    struct Withdraw {\r\n        uint256 amount;\r\n        uint256 checkpoint;\r\n        uint256 recieved;\r\n    }\r\n\r\n    struct Leg {\r\n        uint256 legside;\r\n        address user;\r\n        uint256 rightamount;\r\n        uint256 leftamount;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public usersIds;\r\n    mapping(address => bool) public newUpdated;\r\n    mapping(address => Leg) public legData;\r\n\r\n    address payable public creatorWallet =\r\n        payable(0x63BFD1C560314530E527d22E5962f89F0AD04F4a);\r\n    uint256 public creatorFee = 100; // 10%\r\n    uint256 public creatorFeeCollected;\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant TIME_STEP = 1440 minutes; // 1 Day\r\n    uint256 public MIN_AMOUNT = 10 ether; // 10 Dollar\r\n    uint256 public totalInvested;\r\n    uint256 public approxUser;\r\n    uint256 public totalStakeCount;\r\n    uint256 public totalWithdrawCount;\r\n    bool public pancakePrice = false;\r\n    uint256 public staticPrice = 3 ether;\r\n    uint256 public userId = 48470;\r\n\r\n    uint256[] public REFERRAL_PERCENTS = [\r\n        70,\r\n        200,\r\n        100,\r\n        50,\r\n        50,\r\n        50,\r\n        50,\r\n        50,\r\n        50,\r\n        50,\r\n        50,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        10\r\n    ]; // 100 = 10%, 90 = 9%\r\n    uint256[] public MINIMUM_BUSINESS = [\r\n        10 ether,\r\n        499 ether,\r\n        500 ether,\r\n        2999 ether,\r\n        3000 ether,\r\n        4999 ether,\r\n        5000 ether\r\n    ]; // Dollar Rates\r\n    uint256[] public DAILY_BONUS = [4, 5, 6, 7]; // 0.4 = 4\r\n    uint256[] public DAILY_BONUS_INCOME = [4, 5, 6, 7]; // 0.5 = 5\r\n\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n\r\n    // Mainnet - 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    // Testnet - 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    address public pancakeSwapAddress =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E; // Address of the PancakeSwap contract\r\n    // Old Mainnet - 0xA2Df6b077d5036d4526A38Fb791b9aeE62435511\r\n    // New Mainnet - 0x285C0eeD32d55896F070244d008852b2e996951A\r\n    address public ampletoken = 0x285C0eeD32d55896F070244d008852b2e996951A;\r\n\r\n    address private originalContractAddress =\r\n        0xC0E08679b35E4A1c7BE31A0c04Ec67A604296A8c;\r\n    IOriginalContract private originalContract;\r\n\r\n    constructor() {\r\n        originalContract = IOriginalContract(originalContractAddress);\r\n    }\r\n\r\n    function stake(uint256 _amount, address _referrer, uint256 _leg) external {\r\n        // Calculate USD price using PancakeSwap contract interface\r\n        uint256 usdPrice = getTokenToUsd(_amount);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        require(_leg == 0 || _leg == 1, \"Leg has to be Right(0) or Left(1)\");\r\n        require(\r\n            usdPrice >= MIN_AMOUNT,\r\n            \"Ample Coin: Deposit value is too small\"\r\n        );\r\n        require(\r\n            IERC20(ampletoken).transferFrom(msg.sender, address(this), _amount),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        if (user.referrer == address(0) && _msgSender() != creatorWallet) {\r\n            if (\r\n                users[_referrer].totalTokenPurchase > 0 &&\r\n                _referrer != msg.sender\r\n            ) {\r\n                user.referrer = _referrer;\r\n            } else if (_referrer == creatorWallet) {\r\n                user.referrer = creatorWallet;\r\n            } else {\r\n                user.referrer = creatorWallet;\r\n            }\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.totalInvested == 0) {\r\n            approxUser = approxUser.add(1);\r\n            userId = userId.add(1);\r\n            usersIds[userId] = msg.sender;\r\n            user.userId = userId;\r\n            user.checkpoint = block.timestamp;\r\n            user.leg = _leg;\r\n            emit Newbie(msg.sender);\r\n            legData[msg.sender].legside = _leg;\r\n            legData[msg.sender].user = _referrer;\r\n        }else{\r\n            withdrawTopup();\r\n            user.depositcheckpoint = block.timestamp;\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            uint256 totalDirect = users[upline].levels[0];\r\n\r\n            for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].totalBusiness[i] = users[upline]\r\n                        .totalBusiness[i]\r\n                        .add(_amount);\r\n                    if (i == 0) {\r\n                        if (legData[msg.sender].legside == 0) {\r\n                            legData[upline].rightamount = legData[upline]\r\n                                .rightamount\r\n                                .add(_amount);\r\n                        } else {\r\n                            legData[upline].leftamount = legData[upline]\r\n                                .leftamount\r\n                                .add(_amount);\r\n                        }\r\n                    } else {\r\n                        if (legData[upline].legside == 0) {\r\n                            legData[users[upline].referrer]\r\n                                .rightamount = legData[users[upline].referrer]\r\n                                .rightamount\r\n                                .add(_amount);\r\n                        } else {\r\n                            legData[users[upline].referrer]\r\n                                .leftamount = legData[users[upline].referrer]\r\n                                .leftamount\r\n                                .add(_amount);\r\n                        }\r\n                    }\r\n\r\n                    uint256 rewardLevels = (2 * totalDirect) + 1;\r\n                    if (i < rewardLevels) {\r\n                        uint256 amount = _amount.mul(REFERRAL_PERCENTS[i]).div(\r\n                            PERCENTS_DIVIDER\r\n                        );\r\n\r\n                        if (i == 0) {\r\n                            users[upline].directBonus = users[upline]\r\n                                .directBonus\r\n                                .add((amount));\r\n                        } \r\n\r\n                        users[upline].bonus = users[upline].bonus.add(\r\n                                (amount)\r\n                            );\r\n\r\n                        emit RefBonus(\r\n                            upline,\r\n                            msg.sender,\r\n                            i,\r\n                            this.maxPayoutOf(amount)\r\n                        );\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                    totalDirect = users[upline].levels[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        user.totalInvested = user.totalInvested.add(_amount);\r\n        totalInvested = totalInvested.add(_amount);\r\n        totalStakeCount = totalStakeCount.add(1);\r\n\r\n        user.totalTokenPurchase = user.totalTokenPurchase.add(_amount);\r\n        user.totalUsdPurchase = user.totalUsdPurchase.add(usdPrice);\r\n        user.stakes.push(Stake(_amount, block.timestamp, usdPrice));\r\n\r\n        emit NewDeposit(msg.sender, _amount);\r\n    }\r\n\r\n    function getTokenToUsd(uint256 _tokenAmount) public view returns (uint256) {\r\n        if (pancakePrice) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(ampletoken); // Replace with the token address used for deposit\r\n            path[1] = address(0x55d398326f99059fF775485246999027B3197955); // Assuming this is the address of a stablecoin like USDT\r\n\r\n            uint256[] memory amounts = IPancakeSwap(pancakeSwapAddress)\r\n                .getAmountsOut(_tokenAmount, path);\r\n            return amounts[1]; // USD price of the token\r\n        } else {\r\n            return ((staticPrice / 1e18) * _tokenAmount);\r\n        }\r\n    }\r\n\r\n    function getUsdToToken(uint256 _usdAmount) public view returns (uint256) {\r\n        if (pancakePrice) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(0x55d398326f99059fF775485246999027B3197955); // Assuming this is the address of a stablecoin like USDT\r\n            path[1] = address(ampletoken); // Replace with the token address used for deposit\r\n\r\n            uint256[] memory amounts = IPancakeSwap(pancakeSwapAddress)\r\n                .getAmountsOut(_usdAmount, path);\r\n            return amounts[1]; // Token Output\r\n        } else {\r\n            return (_usdAmount / (staticPrice / 1e18));\r\n        }\r\n    }\r\n\r\n    function maxPayoutOf(uint256 _amount) external pure returns (uint256) {\r\n        return (_amount * 30) / 10; // 3X ROI\r\n    }\r\n\r\n    function maxPayoutOfIncome(\r\n        uint256 _amount\r\n    ) external pure returns (uint256) {\r\n        return (_amount * 20) / 10; // 2X Reward\r\n    }\r\n\r\n    function payoutOf(\r\n        address _addr\r\n    ) external view returns (uint256 payout, uint256 max_payout) {\r\n        max_payout = this.maxPayoutOf(users[_addr].totalTokenPurchase);\r\n        uint256 dailyPercent = DAILY_BONUS[0];\r\n\r\n        if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[0] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[1]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS[0];\r\n        } else if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[2] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[3]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS[1];\r\n        } else if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[4] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[5]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS[2];\r\n        } else {\r\n            dailyPercent = DAILY_BONUS[3];\r\n        }\r\n\r\n        if (users[_addr].deposit_payouts < max_payout) {\r\n            uint256 potentialPayout = (\r\n                (users[_addr].totalTokenPurchase *\r\n                dailyPercent *\r\n                ((block.timestamp - users[_addr].depositcheckpoint) / 1 days))\r\n                .div(PERCENTS_DIVIDER)\r\n            );\r\n\r\n            // Ensure the potentialPayout is not negative\r\n            if (potentialPayout > 0) {\r\n                payout = potentialPayout;\r\n                if (users[_addr].deposit_payouts.add(payout) > max_payout) {\r\n                    payout = max_payout.sub(users[_addr].deposit_payouts);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function payoutOfIncome(\r\n        address _addr\r\n    ) external view returns (uint256 payout, uint256 max_payout) {\r\n        max_payout = this.maxPayoutOfIncome(users[_addr].totalTokenPurchase);\r\n        uint256 dailyPercent = DAILY_BONUS_INCOME[0];\r\n\r\n        if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[0] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[1]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS_INCOME[0];\r\n        } else if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[2] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[3]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS_INCOME[1];\r\n        } else if (\r\n            users[_addr].totalUsdPurchase >= MINIMUM_BUSINESS[4] &&\r\n            users[_addr].totalUsdPurchase <= MINIMUM_BUSINESS[5]\r\n        ) {\r\n            dailyPercent = DAILY_BONUS_INCOME[2];\r\n        } else {\r\n            dailyPercent = DAILY_BONUS_INCOME[3];\r\n        }\r\n\r\n\r\n        if (users[_addr].directBonusWithdrawn + users[_addr].totalBonus < max_payout) {\r\n            uint256 potentialPayout = (\r\n                (users[_addr].bonus * dailyPercent * ((block.timestamp - users[_addr].checkpoint) / 1 days))\r\n                    .div(PERCENTS_DIVIDER)\r\n            ).sub(users[_addr].totalBonus);\r\n\r\n            // Ensure the potentialPayout is not negative\r\n            if (potentialPayout > 0) {\r\n                payout = potentialPayout;\r\n                if (users[_addr].directBonusWithdrawn.add(payout).add(users[_addr].totalBonus) > max_payout) {\r\n                    payout = max_payout.sub(users[_addr].totalBonus);\r\n                }\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    function withdrawLevel() external {\r\n        User storage user = users[msg.sender];\r\n        uint256 withdrawal = 0;\r\n\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOfIncome(\r\n            msg.sender\r\n        );\r\n\r\n        require(\r\n            users[msg.sender].totalBonus +\r\n                users[msg.sender].directBonusWithdrawn <\r\n                max_payout,\r\n            \"Full payouts\"\r\n        );\r\n\r\n        withdrawal += to_payout;\r\n        user.totalBonus = user.totalBonus.add(withdrawal);\r\n\r\n        uint256 usdPrice = getTokenToUsd(withdrawal);\r\n\r\n        uint256 feeCreator = withdrawal.mul(creatorFee).div(PERCENTS_DIVIDER);\r\n        withdrawal = withdrawal - feeCreator;\r\n        require(\r\n            usdPrice >= MIN_AMOUNT,\r\n            \"Ample Coin: Withdrawal value is too small\"\r\n        );\r\n\r\n        // Transfer the withdrawal amount to the user\r\n        require(\r\n            IERC20(ampletoken).transfer(msg.sender, withdrawal),\r\n            \"Token transfer failed\"\r\n        );\r\n        require(\r\n            IERC20(ampletoken).transfer(creatorWallet, feeCreator),\r\n            \"Token transfer failed\"\r\n        );\r\n        user.withdraws.push(Withdraw(withdrawal, block.timestamp, usdPrice));\r\n    }\r\n\r\n    function withdrawDirect(uint256 _amount) external {\r\n        User storage user = users[msg.sender];\r\n        uint256 withdrawal = 0;\r\n\r\n        (, uint256 max_payout) = this.payoutOfIncome(msg.sender);\r\n\r\n        require(user.directBonus > 0, \"Direct bonus is 0\");\r\n        require(\r\n            _amount < user.directBonus,\r\n            \"Entered Amount Greater than Payout\"\r\n        );\r\n\r\n        if (\r\n            _amount +\r\n                users[msg.sender].totalBonus +\r\n                users[msg.sender].directBonusWithdrawn >\r\n            max_payout\r\n        ) {\r\n            _amount =\r\n                max_payout -\r\n                (users[msg.sender].totalBonus +\r\n                    users[msg.sender].directBonusWithdrawn);\r\n        }\r\n\r\n        withdrawal += _amount;\r\n        if (user.directBonus > 0) {\r\n            user.directBonus = user.directBonus.sub(withdrawal);\r\n        }\r\n        user.directBonusWithdrawn = user.directBonusWithdrawn.add(withdrawal);\r\n\r\n        if (\r\n            users[msg.sender].totalBonus +\r\n                users[msg.sender].directBonusWithdrawn >=\r\n            max_payout\r\n        ) {\r\n            user.directBonus = 0;\r\n        }\r\n\r\n        uint256 usdPrice = getTokenToUsd(withdrawal);\r\n\r\n        uint256 feeCreator = withdrawal.mul(creatorFee).div(PERCENTS_DIVIDER);\r\n        withdrawal = withdrawal - feeCreator;\r\n\r\n        require(\r\n            usdPrice >= MIN_AMOUNT,\r\n            \"Ample Coin: Withdrawal value is too small\"\r\n        );\r\n\r\n        // Transfer the withdrawal amount to the user\r\n        require(\r\n            IERC20(ampletoken).transfer(msg.sender, withdrawal),\r\n            \"Token transfer failed\"\r\n        );\r\n        require(\r\n            IERC20(ampletoken).transfer(creatorWallet, feeCreator),\r\n            \"Token transfer failed\"\r\n        );\r\n        user.withdraws.push(Withdraw(withdrawal, block.timestamp, usdPrice));\r\n    }\r\n\r\n    function withdrawTopup() internal {\r\n        User storage user = users[msg.sender];\r\n        uint256 withdrawal = 0;\r\n\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n\r\n        // Deposit payout\r\n        if (to_payout > 0) {\r\n            if (users[msg.sender].deposit_payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].deposit_payouts;\r\n            }\r\n\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            withdrawal += to_payout;\r\n\r\n            uint256 usdPrice = getTokenToUsd(withdrawal);\r\n\r\n            uint256 feeCreator = withdrawal.mul(creatorFee).div(PERCENTS_DIVIDER);\r\n            withdrawal = withdrawal - feeCreator;\r\n\r\n            // Transfer the withdrawal amount to the user\r\n            require(\r\n                IERC20(ampletoken).transfer(msg.sender, withdrawal),\r\n                \"Token transfer failed\"\r\n            );\r\n            require(\r\n                IERC20(ampletoken).transfer(creatorWallet, feeCreator),\r\n                \"Token transfer failed\"\r\n            );\r\n            user.withdraws.push(Withdraw(withdrawal, block.timestamp, usdPrice));\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function withdraw() external {\r\n        User storage user = users[msg.sender];\r\n        uint256 withdrawal = 0;\r\n\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n\r\n        require(users[msg.sender].deposit_payouts < max_payout, \"Full payouts\");\r\n\r\n        // Deposit payout\r\n        if (to_payout > 0) {\r\n            if (users[msg.sender].deposit_payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].deposit_payouts;\r\n            }\r\n\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n        }\r\n\r\n        withdrawal += to_payout;\r\n\r\n        uint256 usdPrice = getTokenToUsd(withdrawal);\r\n\r\n        uint256 feeCreator = withdrawal.mul(creatorFee).div(PERCENTS_DIVIDER);\r\n        withdrawal = withdrawal - feeCreator;\r\n\r\n        require(\r\n            usdPrice >= MIN_AMOUNT,\r\n            \"Ample Coin: Withdrawal value is too small\"\r\n        );\r\n\r\n        // Transfer the withdrawal amount to the user\r\n        require(\r\n            IERC20(ampletoken).transfer(msg.sender, withdrawal),\r\n            \"Token transfer failed\"\r\n        );\r\n        require(\r\n            IERC20(ampletoken).transfer(creatorWallet, feeCreator),\r\n            \"Token transfer failed\"\r\n        );\r\n        user.withdraws.push(Withdraw(withdrawal, block.timestamp, usdPrice));\r\n    }\r\n\r\n    function getUserDownlineCount(\r\n        address userAddress\r\n    ) external view returns (uint256[22] memory referrals) {\r\n        return (users[userAddress].levels);\r\n    }\r\n\r\n    function getUserBusinessCount(\r\n        address userAddress\r\n    ) external view returns (uint256[22] memory business) {\r\n        return (users[userAddress].totalBusiness);\r\n    }\r\n\r\n    function getUserBuyInfo(\r\n        address userAddress,\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 checkpoint, uint256 recieved)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        amount = user.stakes[index].amount;\r\n        checkpoint = user.stakes[index].checkpoint;\r\n        recieved = user.stakes[index].recieved;\r\n    }\r\n\r\n    function getUserSellInfo(\r\n        address userAddress,\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 checkpoint, uint256 recieved)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        amount = user.withdraws[index].amount;\r\n        checkpoint = user.withdraws[index].checkpoint;\r\n        recieved = user.withdraws[index].recieved;\r\n    }\r\n\r\n    function getDepositLength(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n        return user.stakes.length;\r\n    }\r\n\r\n    function getWithdrawLength(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n        return user.withdraws.length;\r\n    }\r\n\r\n    function getUserTotalBusiness(\r\n        address userAddress\r\n    ) external view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < users[userAddress].totalBusiness.length; i++) {\r\n            amount = amount.add(users[userAddress].totalBusiness[i]);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalLevels(\r\n        address userAddress\r\n    ) external view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < users[userAddress].levels.length; i++) {\r\n            amount = amount.add(users[userAddress].levels[i]);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getUserDirectBusiness(\r\n        address userAddress\r\n    ) external view returns (uint256 amount) {\r\n        amount = (users[userAddress].totalBusiness[0]);\r\n        return amount;\r\n    }\r\n\r\n    function getUserDirectLevels(\r\n        address userAddress\r\n    ) external view returns (uint256 amount) {\r\n        amount = (users[userAddress].levels[0]);\r\n        return amount;\r\n    }\r\n\r\n    function switchPancake(\r\n        bool _pancakePrice,\r\n        uint256 _staticPrice\r\n    ) external onlyOwner {\r\n        require(\r\n            _staticPrice >= 1 ether,\r\n            \"Price should be greater than or equal to 1 USDT\"\r\n        );\r\n        pancakePrice = _pancakePrice;\r\n        staticPrice = _staticPrice;\r\n    }\r\n\r\n    function v1ToV2(\r\n        address _token,\r\n        address _to\r\n    ) external onlyOwner returns (bool _sent) {\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function v1ToV2Bnb() external onlyOwner {\r\n        payable(creatorWallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function getUserInfo(\r\n        address userAddress\r\n    ) external view returns (User memory) {\r\n        return users[userAddress];\r\n    }\r\n\r\n    function getUserInfoId(\r\n        uint256 usersId\r\n    ) external view returns (User memory) {\r\n        address userAddress = usersIds[usersId];\r\n        return users[userAddress];\r\n    }\r\n\r\n    function setCreatorWallet(address payable _wallet) external onlyOwner {\r\n        require(_wallet != address(0), \"Invalid wallet address\");\r\n        creatorWallet = _wallet;\r\n    }\r\n\r\n    function stakeUser(address _user, User memory _params) external onlyOwner {\r\n        users[_user].checkpoint = _params.checkpoint;\r\n        users[_user].totalInvested = _params.totalInvested;\r\n        users[_user].totalTokenPurchase = _params.totalTokenPurchase;\r\n        users[_user].totalUsdPurchase = _params.totalUsdPurchase;\r\n        users[_user].referrer = _params.referrer;\r\n        users[_user].withdrawn = _params.withdrawn;\r\n        users[_user].bonus = _params.bonus;\r\n        users[_user].totalBonus = _params.totalBonus;\r\n        users[_user].leg = _params.leg;\r\n        users[_user].deposit_payouts = _params.deposit_payouts;\r\n        users[_user].userId = _params.userId;\r\n        users[_user].directBonus = _params.directBonus;\r\n        users[_user].directBonusWithdrawn = _params.directBonusWithdrawn;\r\n        users[_user].depositcheckpoint = _params.checkpoint;\r\n\r\n    }\r\n\r\n\r\n    function upgradeUser(address _user, User memory _params) internal {\r\n        users[_user].checkpoint = _params.checkpoint;\r\n        users[_user].totalInvested = _params.totalInvested;\r\n        users[_user].totalTokenPurchase = _params.totalTokenPurchase;\r\n        users[_user].totalUsdPurchase = _params.totalUsdPurchase;\r\n        users[_user].referrer = _params.referrer;\r\n        users[_user].withdrawn = _params.withdrawn;\r\n        users[_user].bonus = _params.bonus;\r\n        users[_user].totalBonus = _params.totalBonus;\r\n        users[_user].leg = _params.leg;\r\n        users[_user].deposit_payouts = _params.deposit_payouts;\r\n        users[_user].userId = _params.userId;\r\n        users[_user].directBonus = _params.directBonus;\r\n        users[_user].directBonusWithdrawn = _params.directBonusWithdrawn;\r\n        users[_user].depositcheckpoint = _params.checkpoint;\r\n    }\r\n\r\n    function upgradeV2Own(address _user) external onlyOwner {\r\n        \r\n        if(!newUpdated[_user]){\r\n            IOriginalContract.User memory oldUserData = originalContract.getUserInfo(_user);\r\n\r\n            users[_user].checkpoint = oldUserData.checkpoint;\r\n            users[_user].totalInvested = oldUserData.totalInvested;\r\n            users[_user].totalTokenPurchase = oldUserData.totalTokenPurchase;\r\n            users[_user].totalUsdPurchase = oldUserData.totalUsdPurchase;\r\n            users[_user].referrer = oldUserData.referrer;\r\n            users[_user].levels = oldUserData.levels;\r\n            users[_user].totalBusiness = oldUserData.totalBusiness;\r\n            users[_user].withdrawn = oldUserData.withdrawn;\r\n            users[_user].bonus = oldUserData.bonus;\r\n            users[_user].totalBonus = oldUserData.totalBonus;\r\n            users[_user].leg = oldUserData.leg;\r\n            users[_user].deposit_payouts = oldUserData.deposit_payouts;\r\n            users[_user].userId = oldUserData.userId;\r\n            users[_user].directBonus = oldUserData.directBonus;\r\n            users[_user].directBonusWithdrawn = oldUserData.directBonusWithdrawn;\r\n            users[_user].depositcheckpoint = oldUserData.checkpoint;\r\n\r\n            newUpdated[_user] = true;\r\n        }\r\n\r\n    }\r\n\r\n    function upgradeV2() external {\r\n        address _user = msg.sender;\r\n        if(!newUpdated[_user]){\r\n            IOriginalContract.User memory oldUserData = originalContract.getUserInfo(_user);\r\n\r\n            users[_user].checkpoint = oldUserData.checkpoint;\r\n            users[_user].totalInvested = oldUserData.totalInvested;\r\n            users[_user].totalTokenPurchase = oldUserData.totalTokenPurchase;\r\n            users[_user].totalUsdPurchase = oldUserData.totalUsdPurchase;\r\n            users[_user].referrer = oldUserData.referrer;\r\n            users[_user].levels = oldUserData.levels;\r\n            users[_user].totalBusiness = oldUserData.totalBusiness;\r\n            users[_user].withdrawn = oldUserData.withdrawn;\r\n            users[_user].bonus = oldUserData.bonus;\r\n            users[_user].totalBonus = oldUserData.totalBonus;\r\n            users[_user].leg = oldUserData.leg;\r\n            users[_user].deposit_payouts = oldUserData.deposit_payouts;\r\n            users[_user].userId = oldUserData.userId;\r\n            users[_user].directBonus = oldUserData.directBonus;\r\n            users[_user].directBonusWithdrawn = oldUserData.directBonusWithdrawn;\r\n            users[_user].depositcheckpoint = oldUserData.checkpoint;\r\n\r\n            newUpdated[_user] = true;\r\n        }\r\n\r\n    }\r\n\r\n    function setCheckpoint(\r\n        address _user,\r\n        uint256 _checkpoint\r\n    ) external onlyOwner {\r\n        users[_user].checkpoint = _checkpoint;\r\n    }\r\n\r\n    function setTotalInvested(\r\n        address _user,\r\n        uint256 _totalInvested\r\n    ) external onlyOwner {\r\n        users[_user].totalInvested = _totalInvested;\r\n    }\r\n\r\n    function setTotalTokenPurchase(\r\n        address _user,\r\n        uint256 _totalTokenPurchase\r\n    ) external onlyOwner {\r\n        users[_user].totalTokenPurchase = _totalTokenPurchase;\r\n    }\r\n\r\n    function setTotalUsdPurchase(\r\n        address _user,\r\n        uint256 _totalUsdPurchase\r\n    ) external onlyOwner {\r\n        users[_user].totalUsdPurchase = _totalUsdPurchase;\r\n    }\r\n\r\n    function setReferrer(address _user, address _referrer) external onlyOwner {\r\n        users[_user].referrer = _referrer;\r\n    }\r\n\r\n    function setLevels(\r\n        address _user,\r\n        uint256[22] memory _levels\r\n    ) external onlyOwner {\r\n        users[_user].levels = _levels;\r\n    }\r\n\r\n    function setTotalBusiness(\r\n        address _user,\r\n        uint256[22] memory _totalBusiness\r\n    ) external onlyOwner {\r\n        users[_user].totalBusiness = _totalBusiness;\r\n    }\r\n\r\n    function setWithdrawn(\r\n        address _user,\r\n        uint256 _withdrawn\r\n    ) external onlyOwner {\r\n        users[_user].withdrawn = _withdrawn;\r\n    }\r\n\r\n    function setBonus(address _user, uint256 _bonus) external onlyOwner {\r\n        users[_user].bonus = _bonus;\r\n    }\r\n\r\n    function setTotalBonus(\r\n        address _user,\r\n        uint256 _totalBonus\r\n    ) external onlyOwner {\r\n        users[_user].totalBonus = _totalBonus;\r\n    }\r\n\r\n    function setLeg(address _user, uint256 _leg) external onlyOwner {\r\n        users[_user].leg = _leg;\r\n    }\r\n\r\n    function setDepositPayouts(\r\n        address _user,\r\n        uint256 _deposit_payouts\r\n    ) external onlyOwner {\r\n        users[_user].deposit_payouts = _deposit_payouts;\r\n    }\r\n\r\n    function setUserId(address _user, uint256 _userId) external onlyOwner {\r\n        users[_user].userId = _userId;\r\n    }\r\n\r\n    function setDirectBonus(\r\n        address _user,\r\n        uint256 _directBonus\r\n    ) external onlyOwner {\r\n        users[_user].directBonus = _directBonus;\r\n    }\r\n\r\n    function userFromOgContract(\r\n        address _userAddress\r\n    ) public view returns (IOriginalContract.User memory) {\r\n        return originalContract.getUserInfo(_userAddress);\r\n    }\r\n\r\n    function userFromOgContractSpecific(\r\n        address _userAddress\r\n    ) external view returns (IOriginalContract.User memory) {\r\n        IOriginalContract.User memory ogUser = originalContract.getUserInfo(\r\n            _userAddress\r\n        );\r\n\r\n        IOriginalContract.User memory user = IOriginalContract.User(\r\n            ogUser.checkpoint,\r\n            ogUser.totalInvested,\r\n            ogUser.totalTokenPurchase,\r\n            ogUser.totalUsdPurchase,\r\n            ogUser.referrer,\r\n            ogUser.levels,\r\n            ogUser.totalBusiness,\r\n            ogUser.withdrawn,\r\n            ogUser.bonus,\r\n            ogUser.totalBonus,\r\n            ogUser.stakes,\r\n            ogUser.withdraws,\r\n            ogUser.leg,\r\n            ogUser.deposit_payouts,\r\n            ogUser.userId,\r\n            ogUser.directBonus,\r\n            ogUser.directBonusWithdrawn\r\n            );\r\n\r\n        return user;\r\n    }\r\n\r\n    function oldDepositUsd(\r\n        address _userAddress\r\n    ) external view returns (uint256) {\r\n        IOriginalContract.User memory ogUser = originalContract.getUserInfo(\r\n            _userAddress\r\n        );\r\n        return ogUser.totalInvested;\r\n    }\r\n\r\n    function oldTransferData(\r\n        address _userAddress\r\n    ) external view returns (bool) {\r\n        return newUpdated[_userAddress];\r\n    }\r\n\r\n    function setStake(address _userAdd, Stake[] memory _data) internal {\r\n        for (uint256 i = 0; i < _data.length; i++) {\r\n            users[_userAdd].stakes.push(_data[i]);\r\n        }\r\n    }\r\n\r\n    function setWithdrawal(address _userAdd, Withdraw[] memory _data) internal {\r\n        for (uint256 i = 0; i < _data.length; i++) {\r\n            users[_userAdd].withdraws.push(_data[i]);\r\n        }\r\n    }\r\n\r\n    function setStakes(\r\n        address _userAdd,\r\n        Stake[] memory _data\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < _data.length; i++) {\r\n            users[_userAdd].stakes.push(_data[i]);\r\n        }\r\n    }\r\n\r\n    function setWithdrawals(\r\n        address _userAdd,\r\n        Withdraw[] memory _data\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < _data.length; i++) {\r\n            users[_userAdd].withdraws.push(_data[i]);\r\n        }\r\n    }\r\n\r\n    function addLeg(\r\n        uint256 _legside,\r\n        address _user,\r\n        uint256 _amountleft,\r\n        uint256 _amountright\r\n    ) public onlyOwner {\r\n        legData[_user].legside = _legside;\r\n        legData[_user].user = _user;\r\n        legData[_user].rightamount = _amountleft;\r\n        legData[_user].leftamount = _amountright;\r\n    }\r\n\r\n    function changeAmpleAdd(address _newAmple) external onlyOwner {\r\n        ampletoken = _newAmple;\r\n    }\r\n\r\n    function changeMinAmount(uint256 _newAmount) external onlyOwner {\r\n        MIN_AMOUNT = _newAmount;\r\n    }\r\n\r\n    function getLeg(\r\n        address _user\r\n    ) external view returns (uint256, address, uint256, uint256) {\r\n        Leg memory leg = legData[_user];\r\n        return (leg.legside, leg.user, leg.rightamount, leg.leftamount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAILY_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAILY_BONUS_INCOME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MINIMUM_BUSINESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_legside\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountleft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountright\",\"type\":\"uint256\"}],\"name\":\"addLeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampletoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approxUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAmple\",\"type\":\"address\"}],\"name\":\"changeAmpleAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getDepositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"getUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBusinessCount\",\"outputs\":[{\"internalType\":\"uint256[22]\",\"name\":\"business\",\"type\":\"uint256[22]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBuyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDirectBusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDirectLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[22]\",\"name\":\"referrals\",\"type\":\"uint256[22]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositcheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"levels\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"totalBusiness\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Withdraw[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usersId\",\"type\":\"uint256\"}],\"name\":\"getUserInfoId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositcheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"levels\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"totalBusiness\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Withdraw[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserSellInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalBusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"legData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"legside\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOfIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newUpdated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"oldDepositUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"oldTransferData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOfIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_checkpoint\",\"type\":\"uint256\"}],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setCreatorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit_payouts\",\"type\":\"uint256\"}],\"name\":\"setDepositPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_directBonus\",\"type\":\"uint256\"}],\"name\":\"setDirectBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_leg\",\"type\":\"uint256\"}],\"name\":\"setLeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"_levels\",\"type\":\"uint256[22]\"}],\"name\":\"setLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAdd\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Stake[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"setStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"name\":\"setTotalBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"_totalBusiness\",\"type\":\"uint256[22]\"}],\"name\":\"setTotalBusiness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"}],\"name\":\"setTotalInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenPurchase\",\"type\":\"uint256\"}],\"name\":\"setTotalTokenPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalUsdPurchase\",\"type\":\"uint256\"}],\"name\":\"setTotalUsdPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"setUserId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAdd\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Withdraw[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"setWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"}],\"name\":\"setWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_leg\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositcheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"levels\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"totalBusiness\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.Withdraw[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct AmpleApp.User\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"stakeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pancakePrice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staticPrice\",\"type\":\"uint256\"}],\"name\":\"switchPancake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"upgradeV2Own\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"userFromOgContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"levels\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"totalBusiness\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.Withdraw[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"userFromOgContractSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[22]\",\"name\":\"levels\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256[22]\",\"name\":\"totalBusiness\",\"type\":\"uint256[22]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.Withdraw[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginalContract.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositcheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonusWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"v1ToV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1ToV2Bnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AmpleApp", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ece1b627c9d21fa0d0d8c911a45a9b2f9b37fb4fd061c6ecabd825a03bfcf26a"}