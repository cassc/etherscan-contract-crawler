{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n \ud835\udd46\ud835\udd57\ud835\udd57\ud835\udd5a\ud835\udd54\ud835\udd5a\ud835\udd52\ud835\udd5d \ud835\udd43\ud835\udd52\ud835\udd5e\ud835\udd53\ud835\udd60\ud835\udd63\ud835\udd58\ud835\udd59\ud835\udd5a\ud835\udd5f\ud835\udd5a \ud835\udd3b\ud835\udd63\ud835\udd5a\ud835\udd67\ud835\udd56\ud835\udd63 \ud835\udd3e\ud835\udd52\ud835\udd5e\ud835\udd56 \u2102\ud835\udd60\ud835\udd5f\ud835\udd65\ud835\udd63\ud835\udd52\ud835\udd54\ud835\udd65 \ud835\udd57\ud835\udd60\ud835\udd63 \ud835\udd4b\ud835\udd5a\ud835\udd56\ud835\udd65\ud835\udd60\ud835\udd3c\ud835\udd4d\u211d\ud835\udd50 \u2102\ud835\udd60\ud835\udd63\ud835\udd61\ud835\udd60\ud835\udd63\ud835\udd52\ud835\udd65\ud835\udd5a\ud835\udd60\ud835\udd5f\r\n \ud835\udd4e\ud835\udd56\ud835\udd53\ud835\udd64\ud835\udd5a\ud835\udd65\ud835\udd56: https://tteb.finance\r\n \ud835\udd4b\ud835\udd56\ud835\udd5d\ud835\udd56\ud835\udd58\ud835\udd63\ud835\udd52\ud835\udd5e: https://t.me/TTEBfinance\r\n \ud835\udd3d\ud835\udd52\ud835\udd54\ud835\udd56\ud835\udd53\ud835\udd60\ud835\udd60\ud835\udd5c: https://fb.me/TTEBfinance \r\n \ud835\udd44\ud835\udd56\ud835\udd55\ud835\udd5a\ud835\udd66\ud835\udd5e: https://ttebfinance.medium.com\r\n \ud835\udd3e\ud835\udd5a\ud835\udd65\u210d\ud835\udd66\ud835\udd53: https://github.com/TTEB-finance\r\n*/\r\n\r\n\r\npragma solidity ^0.8.13; // solhint-disable-line\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract LamborghiniDriver is Context, Ownable {\r\n\tusing SafeMath for uint256;\r\n    \r\n    address LAMBO = 0xd83a832AD7202612FA53E0317DF685A5Df7cA8b8;\r\n    uint256 private INCOME_TO_EARN_1=1440000;\r\n    uint256 private PSN=10000;\r\n    uint256 private PSNH=5000;\r\n    bool private initialized=false;\r\n    address payable private ceoAddress;\r\n    address payable private ceoAddress1;\r\n    address payable private ceoAddress2;\r\n    mapping (address => uint256) private sellIncomeToLAMBO;\r\n    mapping (address => uint256) private claimedIncome;\r\n    mapping (address => uint256) private lastClaim;\r\n    mapping (address => address) private referrals;\r\n    uint256 private marketIncome;\r\n\t\r\n    constructor() {\r\n        ceoAddress = payable(msg.sender);\r\n        ceoAddress1 = payable(0xC6AE4a8afF887FeA80e8dB9D7bbb97F164e1Fdf3);\r\n        ceoAddress2 = payable(0xfFe31D2fc0D8452B863743CeeE321E7Cc734E4F2);\r\n    }\r\n\t\r\n    function reInvestIncome(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n        if(referrals[msg.sender]==address(0) && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 incomeUsed=getMyIncome(msg.sender);\r\n        uint256 newPrinters=SafeMath.div(incomeUsed,INCOME_TO_EARN_1);\r\n        sellIncomeToLAMBO[msg.sender]=SafeMath.add(sellIncomeToLAMBO[msg.sender],newPrinters);\r\n        claimedIncome[msg.sender]=0;\r\n        lastClaim[msg.sender]=block.timestamp;\r\n\t\t\r\n        //send referral income\r\n        claimedIncome[referrals[msg.sender]]=SafeMath.add(claimedIncome[referrals[msg.sender]],SafeMath.div(incomeUsed,10));\r\n\t\t\r\n\r\n        marketIncome=SafeMath.add(marketIncome,SafeMath.div(incomeUsed,5));\r\n    }\r\n\r\nreceive() external payable {}\r\n\r\n    function sellLamborghini() public {\r\n        require(initialized);\r\n        uint256 hasIncome=getMyIncome(msg.sender);\r\n        uint256 incomeValue=calculateMoneyClaim(hasIncome);\r\n        uint256 fee=devFee(incomeValue);\r\n        uint256 fee2=fee/3;\r\n        claimedIncome[msg.sender]=0;\r\n        lastClaim[msg.sender]=block.timestamp;\r\n        marketIncome=SafeMath.add(marketIncome,hasIncome);\r\n        IBEP20(LAMBO).transfer(ceoAddress, fee2);\r\n        IBEP20(LAMBO).transfer(ceoAddress1, fee2);\r\n        IBEP20(LAMBO).transfer(ceoAddress2, fee2);\r\n        IBEP20(LAMBO).transfer(address(msg.sender), SafeMath.sub(incomeValue,fee));\r\n    }\r\n    function buyDriver(address ref, uint256 amount) public {\r\n        require(initialized);\r\n    \r\n        IBEP20(LAMBO).transferFrom(address(msg.sender), address(this), amount);\r\n        \r\n        uint256 balance = IBEP20(LAMBO).balanceOf(address(this));\r\n        uint256 driverBought=calculatePrinterBuy(amount,SafeMath.sub(balance,amount));\r\n        driverBought=SafeMath.sub(driverBought,devFee(driverBought));\r\n        uint256 fee=devFee(amount);\r\n        uint256 fee2=fee/5;\r\n        IBEP20(LAMBO).transfer(ceoAddress, fee2);\r\n        IBEP20(LAMBO).transfer(ceoAddress1, fee2);\r\n        IBEP20(LAMBO).transfer(ceoAddress2, fee2);\r\n        claimedIncome[msg.sender]=SafeMath.add(claimedIncome[msg.sender],driverBought);\r\n        reInvestIncome(ref);\r\n    }\r\n\t\r\n    //magic happens here\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateMoneyClaim(uint256 income) public view returns(uint256) {\r\n        return calculateTrade(income,marketIncome,IBEP20(LAMBO).balanceOf(address(this)));\r\n    }\r\n    function calculatePrinterBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketIncome);\r\n    }\r\n    function calculatePrinterBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculatePrinterBuy(eth,IBEP20(LAMBO).balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n    function seedMarket(uint256 amount) public onlyOwner {\r\n    \r\n        require(marketIncome==0);\r\n        IBEP20(LAMBO).transferFrom(address(msg.sender), address(this), amount);\r\n        initialized=true;\r\n        marketIncome=144000000000;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return IBEP20(LAMBO).balanceOf(address(this));\r\n    }\r\n\r\n    function getMyDrivers() public view returns(uint256) {\r\n        return sellIncomeToLAMBO[msg.sender];\r\n    }\r\n    function getMyIncome(address adr) public view returns(uint256) {\r\n        return SafeMath.add(claimedIncome[adr],getIncomeSinceLastBuy(msg.sender));\r\n    }\r\n    function getIncomeSinceLastBuy(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(INCOME_TO_EARN_1,SafeMath.sub(block.timestamp,lastClaim[adr]));\r\n        return SafeMath.mul(secondsPassed,sellIncomeToLAMBO[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\tfunction withdraw() public onlyOwner {\r\n\t    require(msg.sender == ceoAddress, \"Only CEO can call this funtion\");\r\n         require(address(this).balance > 0, 'Contract has no money');\r\n         address payable wallet = payable(msg.sender);\r\n        wallet.transfer(address(this).balance);    \r\n    }   \r\n    function recoverTokens(IBEP20 tokenAddress)  public onlyOwner {\r\n\t\trequire(msg.sender == ceoAddress, \"Only CEO can call this funtion\");\r\n        IBEP20 tokenBEP = tokenAddress;\r\n        require(tokenAddress != IBEP20(LAMBO), \"Cannot withdraw $LAMBO token\");\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, 'BEP-20 balance is 0');\r\n        address wallet = (msg.sender);\r\n        tokenBEP.transfer(wallet, tokenAmt);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDriver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"}],\"name\":\"calculateMoneyClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePrinterBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculatePrinterBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getIncomeSinceLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyDrivers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"reInvestIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLamborghini\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LamborghiniDriver", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e0aeeedd60a20f0292ac917eda85eb54205b41b7f3529cfa3f54a38177f17d6"}