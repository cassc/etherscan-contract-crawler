{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2591\u2591\r\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2592\u258c\u2591\r\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u2580\u2592\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2592\u2592\u2592\u2590\r\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2580\u2592\u2592\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2590\r\n * \u2591\u2591\u2591\u2591\u2591\u2584\u2584\u2580\u2592\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2584\u2588\u2592\u2590\r\n * \u2591\u2591\u2591\u2584\u2580\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2580\u2588\u2588\u2580\u2592\u258c\r\n * \u2591\u2591\u2590\u2592\u2592\u2592\u2584\u2584\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2592\u2592\r\n * \u2591\u2591\u258c\u2591\u2591\u258c\u2588\u2580\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2590\r\n * \u2591\u2590\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2588\u2588\u2580\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2580\u2584\r\n * \u2591\u258c\u2591\u2592\u2584\u2588\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\r\n * \u2580\u2592\u2580\u2590\u2584\u2588\u2584\u2588\u258c\u2584\u2591\u2580\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\r\n * New Prosperity\r\n */\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private marketAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private startTradeBlock;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private _swapRouter;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n   \r\n    IERC20 private _usdtPair;\r\n\r\n    uint256 burnFee = 200;\r\n    uint256 activistFee = 200;\r\n    uint256 pairFee = 300;\r\n    uint256 marketingFee = 100;\r\n\r\n    address buyAddress1;\r\n    address buyAddress2;\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address MarketAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), _swapRouter.WETH());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _usdtPair=IERC20(usdtPair);\r\n        _swapPairList[mainPair] = true;\r\n        _swapPairList[usdtPair] = true;\r\n\r\n        _tTotal = Supply * 10 ** Decimals;\r\n        _balances[msg.sender] = _tTotal;\r\n\r\n        marketAddress = MarketAddress;\r\n\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[MarketAddress] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProvider[address(0x7ee058420e5937496F5a2096f04caA7721cF70cc)] = true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        bool needFee = false;\r\n        bool isBuy = false;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startTradeBlock) {\r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n                startTradeBlock = block.number;\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                needFee = true;\r\n                if (block.number <= startTradeBlock + 3) {\r\n                    if (!_swapPairList[to]) {\r\n                       _transferBot(from,to,amount);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (_swapPairList[from]) {\r\n                addLpProvider(to);\r\n                isBuy = true;\r\n\r\n            } else {\r\n                addLpProvider(from);\r\n            }   \r\n        }\r\n        _tokenTransfer(from,to,amount,needFee,isBuy);\r\n        if (\r\n            from != address(this)\r\n            && startTradeBlock > 0) {\r\n            _processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient,uint256 tAmount,bool needFee,bool isBuy) private{\r\n         _balances[sender] = _balances[sender] - tAmount;\r\n        if(!needFee){\r\n            _takeTransfer(sender,recipient,tAmount);\r\n            if(isBuy){\r\n                buyAddress1 = buyAddress2;\r\n                buyAddress2 = recipient;\r\n            }\r\n            return;\r\n        }\r\n        if(isBuy){\r\n            _transferBuy(sender, recipient, tAmount);\r\n        }else{\r\n            _transferSell(sender, recipient, tAmount);\r\n        }\r\n    }\r\n\r\n    function _transferBot(address sender, address recipient,uint256 tAmount) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _takeTransfer(sender,recipient,tAmount / 10);\r\n        _takeTransfer(sender,address(0),tAmount * 9 / 10);\r\n    }\r\n\r\n    function _transferSell(address sender, address recipient,uint256 tAmount) private {\r\n        uint256 burnAmount = tAmount * burnFee / 10000;\r\n        uint256 pairAmount = tAmount * pairFee / 10000;\r\n        uint256 marketingAmount = tAmount * marketingFee / 10000;\r\n        _takeTransfer(sender,recipient,tAmount - burnAmount - pairAmount - marketingAmount);\r\n        _takeTransfer(sender,address(0),burnAmount);\r\n        _takeTransfer(sender,address(this),pairAmount);\r\n        _takeTransfer(sender,marketAddress,marketingAmount);\r\n    }\r\n\r\n    function _transferBuy(address sender, address recipient,uint256 tAmount) private {\r\n        uint256 activistAmount = tAmount * activistFee / 10000;\r\n        uint256 pairAmount = tAmount * pairFee / 10000;\r\n        uint256 marketingAmount = tAmount * marketingFee / 10000;\r\n        _takeTransfer(sender,recipient,tAmount - activistAmount - pairAmount - marketingAmount);\r\n        _takeTransfer(sender,address(buyAddress1),activistAmount / 2);\r\n        _takeTransfer(sender,address(buyAddress2),activistAmount / 2);\r\n        _takeTransfer(sender,address(this),pairAmount);\r\n        _takeTransfer(sender,marketAddress,marketingAmount);\r\n        buyAddress1 = buyAddress2;\r\n        buyAddress2 = recipient;\r\n    }\r\n\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyOwner {\r\n        marketAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external onlyOwner{\r\n        IERC20(token).transfer(owner(), amount);\r\n    }\r\n\r\n    address[] private lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private lpRewardCondition = 1e14;\r\n    uint256 private progressLPBlock;\r\n\r\n    function _processLP(uint256 gas) private {\r\n        if (progressLPBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n        uint totalPair = _usdtPair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardBalance = _balances[address(this)];\r\n        if (rewardBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            pairBalance = _usdtPair.balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = rewardBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    _balances[address(this)]-=amount;\r\n                    _takeTransfer(address(this),shareHolder,amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n}\r\n\r\ncontract WCCToken is AbsToken {\r\n    constructor() AbsToken(\r\n        \"Winner Coin\",\r\n        \"WINC\",\r\n        18,\r\n        1000000,\r\n        address(0xB11A3b9c2be5e6a38e7C244CB9863Be712685E88)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WCCToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4c99fe395d0e29b50593b2d90af00c816ba1f781f4f6543c3dcab6eeb4fa1fc"}