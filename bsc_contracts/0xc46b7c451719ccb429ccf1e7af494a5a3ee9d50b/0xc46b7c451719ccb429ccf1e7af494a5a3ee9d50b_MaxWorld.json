{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-08-25\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface BEP20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract MaxWorld {   \r\n           \r\n    \r\n    address private admin;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin, \"Message sender must be the contract's owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor ()  {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    \r\n    function withdraw(BEP20 BUSD, address userAddress, uint256 amt) external onlyOwner() returns(bool){\r\n        require(BUSD.balanceOf(address(this)) >= amt,\"ErrAmt\");\r\n        BUSD.transfer(userAddress, amt);\r\n        // emit Withdrawn(userAddress, amt);\r\n        return true;\r\n    }\r\n\r\n    function multiwithdrawal(address payable[]  memory  _contributors, uint256[] memory _balances , BEP20 token) public payable {\r\n       \r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n           token.transferFrom(msg.sender,_contributors[i],_balances[i]);\r\n        }\r\n       \r\n    }\r\n\r\n    function withdrawal(address payable  _contributors, uint256 _balances , BEP20 token) public payable {        \r\n           token.transferFrom(msg.sender,_contributors,_balances);      \r\n    }\r\n    function airDrop(address _address, uint _amount,  BEP20 token) external onlyOwner{\r\n        token.transfer(_address,_amount);\r\n    }\r\n\r\n    function contribute(uint256 amount, BEP20 token) public{\r\n        token.transferFrom(msg.sender, address(this), amount);                 \r\n    }\r\n\r\n    \r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"multiwithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"BUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contributors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balances\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MaxWorld", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da45e86cdac11f01b8285dfcb2ddec9b8445b8e10191dda6c86b28a46d36c781"}