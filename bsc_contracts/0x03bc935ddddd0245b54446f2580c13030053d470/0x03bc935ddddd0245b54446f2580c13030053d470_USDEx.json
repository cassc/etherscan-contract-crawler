{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ncontract USDEx {\r\n    address payable public propietario;\r\n    string public nombreToken;\r\n    string public simboloToken;\r\n    uint8 public decimalesToken;\r\n    uint256 public feeCompra;\r\n    uint256 public feeVenta;\r\n    enum TipoCaja { USDT, BTC, ETH, USDE, BNB }\r\n    struct SaldoUsuario {\r\n        mapping(uint256 => uint256) saldos; \r\n    }\r\n    struct RecompensaAportacionLiquidez {\r\n        uint256 porcentajeDiario; \r\n        uint256 ultimaActualizacion; \r\n    }\r\n    struct Recompensa {\r\n        uint256 cantidad;\r\n        TipoCaja tipo; \r\n        bool activa;\r\n    }\r\n    struct DetalleSaldoUsuario {\r\n        uint256 saldoUSDT;\r\n        uint256 saldoBTC;\r\n        uint256 saldoETH;\r\n        uint256 saldoUSDE;\r\n        uint256 saldoBNB;\r\n        uint256 saldoTotalUSD;\r\n        bool tieneSaldoUSDT;\r\n        bool tieneSaldoBTC;\r\n        bool tieneSaldoETH;\r\n        bool tieneSaldoUSDE;\r\n        bool tieneSaldoBNB;\r\n    }\r\n    struct DetalleUsuario {\r\n        uint256 saldoUSDT;\r\n        uint256 saldoBTC;\r\n        uint256 saldoETH;\r\n        uint256 saldoUSDE;\r\n        uint256 saldoBNB;\r\n        uint256 saldoTotalUSD;\r\n    }\r\n    mapping(uint256 => RecompensaAportacionLiquidez) public recompensasAportacionLiquidez;\r\n    mapping(address => SaldoUsuario) private saldosUsuarios; \r\n    mapping(uint256 => mapping(address => bool)) public recompensaReclamada;\r\n    Recompensa public recompensaActual;\r\n    mapping(uint256 => uint256) public preciosCriptomonedas; \r\n    mapping(address => mapping(uint256 => uint256)) private fondosBloqueadosPorUsuarioYTipo;\r\n\r\n    event Mint(address indexed destino, uint256 cantidad);\r\n    event DepositoETH(address indexed usuario, uint256 cantidad);\r\n    event ModificacionSaldo(address indexed usuario, TipoCaja tipoCaja, uint256 nuevoSaldo);\r\n    event TransferenciaEntreCajas(address indexed origen, address indexed destino, TipoCaja tipoCaja, uint256 cantidad);\r\n    event RecompensaCreada(uint256 cantidad, string tipo);\r\n    event RecompensaReclamada(address usuario, uint256 cantidad, string tipo);\r\n    event PrecioCriptomonedaActualizado(TipoCaja tipoCaja, uint256 nuevoPrecio);\r\n    event FeeActualizado(uint256 nuevoFeeCompra, uint256 nuevoFeeVenta);\r\n    event RecompensaAportacionLiquidezActualizada(uint256 tipoCaja, uint256 nuevoPorcentaje);\r\n    event FondosBloqueados(address indexed usuario, uint256 indexed tipoCaja, uint256 cantidad);\r\n    event FondosDesbloqueados(address indexed usuario, uint256 indexed tipoCaja, uint256 cantidad);\r\n\r\n    constructor(string memory _nombreToken, string memory _simboloToken, uint8 _decimalesToken) {\r\n        propietario = payable(msg.sender);\r\n        nombreToken = _nombreToken;\r\n        simboloToken = _simboloToken;\r\n        decimalesToken = _decimalesToken;\r\n        feeCompra = 1; \r\n        feeVenta = 1; \r\n    }\r\n    modifier soloPropietario() {\r\n        require(msg.sender == propietario, \"Solo propietario\");\r\n        _;\r\n    }\r\n    function mintearUSD(address destino, uint256 cantidad) external soloPropietario {\r\n        saldosUsuarios[destino].saldos[uint256(TipoCaja.USDT)] += cantidad;\r\n        emit Mint(destino, cantidad);\r\n    }\r\n    function depositarETH() external payable {\r\n        saldosUsuarios[msg.sender].saldos[uint256(TipoCaja.ETH)] += msg.value;\r\n        emit DepositoETH(msg.sender, msg.value);\r\n    }\r\n    function modificarSaldoCaja(address usuario, TipoCaja tipoCaja, uint256 cantidad) external soloPropietario {\r\n        saldosUsuarios[usuario].saldos[uint256(tipoCaja)] = cantidad;\r\n        emit ModificacionSaldo(usuario, tipoCaja, cantidad);\r\n    }\r\n    function transferirEntreCajas(address origen, address destino, TipoCaja tipoCaja, uint256 cantidad) external {\r\n        uint256 saldoOrigen = saldosUsuarios[origen].saldos[uint256(tipoCaja)];\r\n        require(saldoOrigen >= cantidad, \"Saldo insuficiente en la caja de origen\");\r\n        saldosUsuarios[origen].saldos[uint256(tipoCaja)] = saldoOrigen - cantidad;\r\n        saldosUsuarios[destino].saldos[uint256(tipoCaja)] += cantidad;\r\n        emit TransferenciaEntreCajas(origen, destino, tipoCaja, cantidad);\r\n    }\r\n    function crearRecompensa(uint256 cantidad, TipoCaja tipo) external soloPropietario {\r\n        require(tipo >= TipoCaja.USDT && tipo <= TipoCaja.BNB, \"Tipo de caja no valido\");\r\n        recompensaActual = Recompensa(cantidad, tipo, true);\r\n        emit RecompensaCreada(cantidad, _tipoCajaToString(tipo));\r\n    }\r\n    function reclamarRecompensa() external {\r\n        require(recompensaActual.activa, \"No hay recompensa disponible\");\r\n        require(!recompensaReclamada[uint256(recompensaActual.tipo)][msg.sender], \"Recompensa ya reclamada\");\r\n        uint256 cantidad = recompensaActual.cantidad;\r\n        TipoCaja tipo = recompensaActual.tipo;\r\n        saldosUsuarios[msg.sender].saldos[uint256(tipo)] += cantidad;\r\n        recompensaReclamada[uint256(tipo)][msg.sender] = true;\r\n        emit RecompensaReclamada(msg.sender, cantidad, _tipoCajaToString(tipo));\r\n    }\r\n     function setFees(uint256 nuevoFeeCompra, uint256 nuevoFeeVenta) external soloPropietario {\r\n        require(nuevoFeeCompra <= 100, \"El fee de compra no puede ser mayor que 100%\");\r\n        require(nuevoFeeVenta <= 100, \"El fee de venta no puede ser mayor que 100%\");\r\n\r\n        feeCompra = nuevoFeeCompra;\r\n        feeVenta = nuevoFeeVenta;\r\n\r\n        emit FeeActualizado(nuevoFeeCompra, nuevoFeeVenta);\r\n    }\r\n    function consultarBalanceUsuario(address usuario, TipoCaja tipoCaja) external view returns (uint256) {\r\n        return saldosUsuarios[usuario].saldos[uint256(tipoCaja)];\r\n    }\r\n    function setPrecioCriptomoneda(TipoCaja tipoCaja, uint256 precioUSD) external soloPropietario {\r\n        preciosCriptomonedas[uint256(tipoCaja)] = precioUSD;\r\n        emit PrecioCriptomonedaActualizado(tipoCaja, precioUSD);\r\n    }\r\n    function comprarConBNBDesdeBilletera(TipoCaja tipoCaja, uint256 cantidadCajas, uint256 cantidadUSD) external payable {\r\n    require(preciosCriptomonedas[uint256(tipoCaja)] > 0, \"Tipo de caja no tiene precio establecido\");\r\n    uint256 cantidadTotalBNBCajas = 0;\r\n    uint256 cantidadTotalBNBUSD = 0;\r\n    if (tipoCaja == TipoCaja.BNB) {\r\n        cantidadTotalBNBCajas = cantidadCajas;\r\n    } else {\r\n        cantidadTotalBNBCajas = preciosCriptomonedas[uint256(tipoCaja)] * cantidadCajas;\r\n    }\r\n    cantidadTotalBNBUSD = cantidadUSD;\r\n    require(msg.value >= cantidadTotalBNBCajas + cantidadTotalBNBUSD, \"Fondos insuficientes para realizar la compra\");\r\n    if (tipoCaja != TipoCaja.BNB) {\r\n        propietario.transfer(cantidadTotalBNBCajas);\r\n    }\r\n    saldosUsuarios[msg.sender].saldos[uint256(tipoCaja)] += cantidadCajas;\r\n    emit TransferenciaEntreCajas(address(this), msg.sender, tipoCaja, cantidadCajas);\r\n    propietario.transfer(cantidadTotalBNBUSD);\r\n    saldosUsuarios[msg.sender].saldos[uint256(TipoCaja.USDT)] += cantidadUSD;\r\n    emit TransferenciaEntreCajas(address(this), msg.sender, TipoCaja.USDT, cantidadUSD);\r\n}\r\n    function comprarConUSD(TipoCaja tipoCaja, uint256 cantidadCajas) external {\r\n    require(preciosCriptomonedas[uint256(tipoCaja)] > 0, \"Tipo de caja no tiene precio establecido\");\r\n    uint256 costoTotalUSD = preciosCriptomonedas[uint256(tipoCaja)] * cantidadCajas;\r\n    require(saldosUsuarios[msg.sender].saldos[uint256(TipoCaja.USDT)] >= costoTotalUSD, \"Saldo USDT insuficiente para realizar la compra\");\r\n    saldosUsuarios[msg.sender].saldos[uint256(TipoCaja.USDT)] -= costoTotalUSD;\r\n    saldosUsuarios[msg.sender].saldos[uint256(tipoCaja)] += cantidadCajas;\r\n    emit TransferenciaEntreCajas(msg.sender, address(this), TipoCaja.USDT, costoTotalUSD);\r\n    emit TransferenciaEntreCajas(address(this), msg.sender, tipoCaja, cantidadCajas);\r\n}\r\n\r\n    function consultarValorCripto(TipoCaja tipoCaja) internal view returns (uint256) {\r\n        uint256 precio = preciosCriptomonedas[uint256(tipoCaja)];\r\n        if (precio == 0) {\r\n            return 1;\r\n        }\r\n        return precio;\r\n    }\r\n    function withdrawFunds() external onlyPropietario {\r\n    uint256 contractBalance = address(this).balance;\r\n    require(contractBalance > 0, \"El saldo del contrato es cero\");\r\n    propietario.transfer(contractBalance);\r\n}\r\n  modifier onlyPropietario() {\r\n        require(msg.sender == propietario, \"Solo el propietario puede realizar esta operacion\");\r\n        _;\r\n    }\r\n     function actualizarRecompensaAportacionLiquidez(uint256 tipoCaja, uint256 nuevoPorcentaje) external soloPropietario {\r\n        require(tipoCaja >= uint256(TipoCaja.USDT) && tipoCaja <= uint256(TipoCaja.BNB), \"Tipo de caja no valido\");\r\n        require(nuevoPorcentaje <= 100, \"El porcentaje de recompensa no puede ser mayor que 100%\");\r\n        recompensasAportacionLiquidez[tipoCaja].porcentajeDiario = nuevoPorcentaje;\r\n        recompensasAportacionLiquidez[tipoCaja].ultimaActualizacion = block.timestamp;\r\n        emit RecompensaAportacionLiquidezActualizada(tipoCaja, nuevoPorcentaje);\r\n    }\r\n    function calcularRecompensaAportacionLiquidez(uint256 tipoCaja, uint256 tiempoTranscurrido) internal view returns (uint256) {\r\n        uint256 porcentajeDiario = recompensasAportacionLiquidez[tipoCaja].porcentajeDiario;\r\n        uint256 recompensaAcumulada = (porcentajeDiario * tiempoTranscurrido) / (1 days);\r\n        return recompensaAcumulada;\r\n    }\r\n    function reclamarRecompensaAportacionLiquidez(uint256 tipoCaja) external {\r\n        require(saldosUsuarios[msg.sender].saldos[tipoCaja] > 0, \"El usuario no posee el tipo de caja seleccionado\");\r\n        uint256 tiempoTranscurrido = block.timestamp - recompensasAportacionLiquidez[tipoCaja].ultimaActualizacion;\r\n        uint256 recompensa = calcularRecompensaAportacionLiquidez(tipoCaja, tiempoTranscurrido);\r\n        require(recompensa > 0, \"No hay recompensa acumulada\");\r\n        recompensasAportacionLiquidez[tipoCaja].ultimaActualizacion = block.timestamp;     \r\n        bloquearFondos(msg.sender, tipoCaja, recompensa);\r\n        emit RecompensaReclamada(msg.sender, recompensa, _tipoCajaToString(TipoCaja(tipoCaja)));\r\n    }\r\n    function bloquearFondos(address usuario, uint256 tipoCaja, uint256 cantidad) internal {\r\n    require(msg.sender == propietario, \"Solo el propietario puede bloquear fondos\");\r\n    mapping(address => mapping(uint256 => uint256)) storage fondosBloqueados = fondosBloqueadosPorUsuarioYTipo;\r\n    require(saldosUsuarios[usuario].saldos[tipoCaja] >= cantidad, \"Fondos insuficientes para bloquear\");\r\n    saldosUsuarios[usuario].saldos[tipoCaja] -= cantidad;\r\n    fondosBloqueados[usuario][tipoCaja] += cantidad;\r\n    emit FondosBloqueados(usuario, tipoCaja, cantidad);\r\n}\r\nfunction desbloquearFondos(address usuario, uint256 tipoCaja, uint256 cantidad) external soloPropietario {\r\n    mapping(address => mapping(uint256 => uint256)) storage fondosBloqueados = fondosBloqueadosPorUsuarioYTipo;\r\n    require(fondosBloqueados[usuario][tipoCaja] >= cantidad, \"Fondos bloqueados insuficientes para desbloquear\");\r\n    fondosBloqueados[usuario][tipoCaja] -= cantidad;\r\n    saldosUsuarios[usuario].saldos[tipoCaja] += cantidad;\r\n    emit FondosDesbloqueados(usuario, tipoCaja, cantidad);\r\n}\r\n    function _tipoCajaToString(TipoCaja tipo) internal pure returns (string memory) {\r\n        if (tipo == TipoCaja.USDT) return \"USDT\";\r\n        if (tipo == TipoCaja.BTC) return \"BTC\";\r\n        if (tipo == TipoCaja.ETH) return \"ETH\";\r\n        if (tipo == TipoCaja.USDE) return \"USDE\";\r\n        if (tipo == TipoCaja.BNB) return \"BNB\";\r\n        revert(\"Tipo de caja no valido\");\r\n    }\r\n    function consultarDetalleUsuario(address usuario) external view returns (DetalleUsuario memory) {\r\n        DetalleSaldoUsuario memory saldoDetalle = _consultarDetalleSaldoUsuario(usuario);\r\n        return DetalleUsuario({\r\n            saldoUSDT: saldoDetalle.saldoUSDT,\r\n            saldoBTC: saldoDetalle.saldoBTC,\r\n            saldoETH: saldoDetalle.saldoETH,\r\n            saldoUSDE: saldoDetalle.saldoUSDE,\r\n            saldoBNB: saldoDetalle.saldoBNB,\r\n            saldoTotalUSD: saldoDetalle.saldoTotalUSD\r\n        });\r\n    }\r\n    function consultarSupplyActual(TipoCaja tipoCaja) external view returns (uint256) {\r\n        uint256 supply = 0;\r\n        supply += saldosUsuarios[address(this)].saldos[uint256(tipoCaja)] * preciosCriptomonedas[uint256(tipoCaja)];\r\n        return supply;\r\n    }\r\n    function _consultarDetalleSaldoUsuario(address usuario) internal view returns (DetalleSaldoUsuario memory) {\r\n        uint256 saldoUSDT = saldosUsuarios[usuario].saldos[uint256(TipoCaja.USDT)] * consultarValorCripto(TipoCaja.USDT);\r\n        uint256 saldoBTC = saldosUsuarios[usuario].saldos[uint256(TipoCaja.BTC)] * consultarValorCripto(TipoCaja.BTC);\r\n        uint256 saldoETH = saldosUsuarios[usuario].saldos[uint256(TipoCaja.ETH)] * consultarValorCripto(TipoCaja.ETH);\r\n        uint256 saldoUSDE = saldosUsuarios[usuario].saldos[uint256(TipoCaja.USDE)] * consultarValorCripto(TipoCaja.USDE);\r\n        uint256 saldoBNB = saldosUsuarios[usuario].saldos[uint256(TipoCaja.BNB)] * consultarValorCripto(TipoCaja.BNB);\r\n        uint256 saldoTotalUSD = saldoUSDT + saldoBTC + saldoETH + saldoUSDE + saldoBNB;\r\n        return DetalleSaldoUsuario({\r\n            saldoUSDT: saldoUSDT,\r\n            saldoBTC: saldoBTC,\r\n            saldoETH: saldoETH,\r\n            saldoUSDE: saldoUSDE,\r\n            saldoBNB: saldoBNB,\r\n            saldoTotalUSD: saldoTotalUSD,\r\n            tieneSaldoUSDT: saldoUSDT > 0,\r\n            tieneSaldoBTC: saldoBTC > 0,\r\n            tieneSaldoETH: saldoETH > 0,\r\n            tieneSaldoUSDE: saldoUSDE > 0,\r\n            tieneSaldoBNB: saldoBNB > 0\r\n        });\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nombreToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_simboloToken\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalesToken\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"DepositoETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nuevoFeeCompra\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nuevoFeeVenta\",\"type\":\"uint256\"}],\"name\":\"FeeActualizado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"FondosBloqueados\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"FondosDesbloqueados\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destino\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nuevoSaldo\",\"type\":\"uint256\"}],\"name\":\"ModificacionSaldo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nuevoPrecio\",\"type\":\"uint256\"}],\"name\":\"PrecioCriptomonedaActualizado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nuevoPorcentaje\",\"type\":\"uint256\"}],\"name\":\"RecompensaAportacionLiquidezActualizada\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tipo\",\"type\":\"string\"}],\"name\":\"RecompensaCreada\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tipo\",\"type\":\"string\"}],\"name\":\"RecompensaReclamada\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origen\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destino\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"TransferenciaEntreCajas\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nuevoPorcentaje\",\"type\":\"uint256\"}],\"name\":\"actualizarRecompensaAportacionLiquidez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cantidadCajas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cantidadUSD\",\"type\":\"uint256\"}],\"name\":\"comprarConBNBDesdeBilletera\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cantidadCajas\",\"type\":\"uint256\"}],\"name\":\"comprarConUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"}],\"name\":\"consultarBalanceUsuario\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"}],\"name\":\"consultarDetalleUsuario\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saldoUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saldoBTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saldoETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saldoUSDE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saldoBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saldoTotalUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct USDEx.DetalleUsuario\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"}],\"name\":\"consultarSupplyActual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"},{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipo\",\"type\":\"uint8\"}],\"name\":\"crearRecompensa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalesToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositarETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"desbloquearFondos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCompra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeVenta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destino\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"mintearUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usuario\",\"type\":\"address\"},{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"modificarSaldoCaja\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nombreToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preciosCriptomonedas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propietario\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclamarRecompensa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tipoCaja\",\"type\":\"uint256\"}],\"name\":\"reclamarRecompensaAportacionLiquidez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recompensaActual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"},{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipo\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"activa\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recompensaReclamada\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recompensasAportacionLiquidez\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"porcentajeDiario\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ultimaActualizacion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nuevoFeeCompra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nuevoFeeVenta\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"precioUSD\",\"type\":\"uint256\"}],\"name\":\"setPrecioCriptomoneda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simboloToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destino\",\"type\":\"address\"},{\"internalType\":\"enum USDEx.TipoCaja\",\"name\":\"tipoCaja\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cantidad\",\"type\":\"uint256\"}],\"name\":\"transferirEntreCajas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USDEx", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000003555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035553440000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae21d4f699b99f46bce40af2525f23a029c9c1d8f6b24464a01171623e44e766"}