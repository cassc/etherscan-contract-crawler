{"SourceCode": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface ITRC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    \r\n    event TransferPledge( address indexed to, uint256 value,uint256 timestamp,uint256 cycle);\r\n    \r\n    \r\n    event TransferPledgeRelease(address indexed from, address indexed to, uint256 value);\r\n\r\n    event TransferLock( address indexed to, uint256 value,uint256 timestamp,uint256 cycle);\r\n    \r\n    \r\n    event TransferLockRelease(address indexed from, uint256 timestamp, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Owend {\r\n    address public _owner;\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n    }\r\n   \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract AON is ITRC20, Owend{\r\n    using SafeMath for uint256;\r\n  \r\n\r\n    mapping (address => uint256) public whiteList;\r\n    mapping (address => uint256) public specialList;\r\n    mapping (address => uint256) public unilateralList;\r\n    mapping(address => address) public referrals;\r\n    address[] private referralsKey;\r\n\r\n    \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _lockBalances;\r\n    mapping (address => uint256) private _pledgeBalances;\r\n    \r\n    uint private referralsFee=3;\r\n    uint private burnFee=2;\r\n    uint private pledgeFee=5;\r\n    bool private _pledgeOnce=false;\r\n\r\n    \r\n     struct  PledgeRecord{\r\n        address account;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        uint isRedemption;\r\n        uint cycle;\r\n    }\r\n    mapping(address => PledgeRecord[]) _pledgeRecords;\r\n    \r\n    struct RedemptionRecord{\r\n        address account;\r\n        uint256 timestamp;\r\n        uint256 redemptionTimestamp;\r\n    }\r\n    RedemptionRecord[] public _redemptionRecord;\r\n    \r\n\r\n    mapping(address => uint256 ) private _lockReleaseTime;\r\n\r\n\r\n    struct LockReleaseRecord{\r\n        address _address;\r\n        uint256 _timestamp;\r\n        uint256 _amount;\r\n    }\r\n    LockReleaseRecord [] private _lockReleaseRecords;\r\n\r\n    struct LockRecord{\r\n        address _address;\r\n        uint256 _amount;\r\n        //day 1  month 30\r\n        uint _lockCycle;\r\n        uint _lockDays;\r\n    }\r\n    mapping(address => LockRecord) private _lockRecords;\r\n\r\n    uint256 private _totalSupply=210000000*10**18;\r\n    uint256 private _maxDestoryLimit=189000000*10**18;\r\n    uint256 private _destoryTotal;\r\n    string private _name =\"AON\";\r\n    string private _symbol=\"AON\";\r\n    uint256 private _decimals = 18;\r\n\r\n    address private _foundationAddress = 0x5De321fF94aBC9B8a53247Ba1E698a890447cbcD;\r\n    \r\n    address private _developerTeamAddress=0x63662cfd03aa5BA2724FE8b4a3d6160EDD0ae1AD;\r\n\r\n    address private _gameGuildAddress=0x19e8C4214603e1bB6EC33D3903326AEaB66659B8;\r\n\r\n    address private _nftPledgeAddress=0xFf6b3A849eDCB3d39d80CD9Ca953D81A7103B51E;\r\n\r\n    address private _marketSellAddress=0x0352769e780D34335f45A2E99D750030B3D65288;\r\n\r\n    address private _IDOAddress=0x4B75fF73206bDd78DcaC6a84B8A395FddDB02f24;\r\n    address private _blackholeAddress=address(0);\r\n\r\n    constructor()public{\r\n        whiteList[msg.sender]=1;\r\n        referrals[msg.sender]=msg.sender;\r\n        \r\n        uint256 _foundation=_totalSupply.mul(10).div(100);\r\n        _lockBalances[_foundationAddress]=_lockBalances[_foundationAddress].add(_foundation);\r\n        LockRecord memory _foundLockRecord= LockRecord(_foundationAddress,_foundation,1,1000);\r\n        _lockRecords[_foundationAddress]=_foundLockRecord;\r\n        _lockReleaseTime[_foundationAddress]=block.timestamp;\r\n        emit TransferLock(_foundationAddress, _foundation, block.timestamp, 1);\r\n\r\n        uint256 _developer=_totalSupply.mul(10).div(100);\r\n        _lockBalances[_developerTeamAddress]=_lockBalances[_developerTeamAddress].add(_developer);\r\n         LockRecord memory _developerLockRecord= LockRecord(_developerTeamAddress,_developer,1,1000);\r\n        _lockRecords[_developerTeamAddress]=_developerLockRecord;\r\n        _lockReleaseTime[_developerTeamAddress]=block.timestamp;\r\n        emit TransferLock(_developerTeamAddress, _developer, block.timestamp, 1);\r\n        \r\n        uint256 _gameGuild=_totalSupply.mul(30).div(100);\r\n        _balances[_gameGuildAddress]=_balances[_gameGuildAddress].add(_gameGuild);\r\n        emit Transfer(_blackholeAddress,_gameGuildAddress,_gameGuild);\r\n\r\n        uint256 _nftPledge=_totalSupply.mul(30).div(100);\r\n        _lockBalances[_nftPledgeAddress]=_lockBalances[_nftPledgeAddress].add(_nftPledge);\r\n         LockRecord memory _nftLockRecord= LockRecord(_nftPledgeAddress,_nftPledge,1,1000);\r\n        _lockRecords[_nftPledgeAddress]=_nftLockRecord;\r\n        _lockReleaseTime[_nftPledgeAddress]=block.timestamp;\r\n        emit TransferLock(_nftPledgeAddress, _nftPledge, block.timestamp, 1);\r\n        \r\n\r\n        uint256 _marketSell=_totalSupply.mul(10).div(100);\r\n        _balances[_marketSellAddress]=_balances[_marketSellAddress].add(_marketSell);\r\n        emit Transfer(_blackholeAddress,_marketSellAddress,_marketSell);\r\n\r\n        uint256 _ido=_totalSupply.mul(10).div(100);\r\n        _balances[_IDOAddress]=_balances[_IDOAddress].add(_ido);\r\n        emit Transfer(_blackholeAddress,_IDOAddress,_ido);\r\n\r\n    }\r\n    \r\n    function lockReleaseFound(address _address)public onlyOwner{\r\n        _release(_address);    \r\n    }\r\n\r\n    function lockReleaseFoundAll()public onlyOwner{\r\n        _release(_foundationAddress);   \r\n        _release(_developerTeamAddress);\r\n        _release(_nftPledgeAddress);\r\n    }\r\n\r\n\r\n    function lockRelease() public{\r\n        _release(msg.sender);\r\n    }\r\n\r\n    function _release(address _address) private{\r\n        LockRecord memory _lockRecord=_lockRecords[_address];\r\n        uint _cycle=_lockRecord._lockCycle;\r\n        uint _days=_lockRecord._lockDays;\r\n        uint256 _amount=_lockRecord._amount;\r\n        require(_amount>0,\"Error : not find record\");\r\n        uint256 _eachReleaseAmount=_amount.mul(_cycle).div(_days);\r\n        require(_lockBalances[_address]>0,\"Error: Insufficient balance\");\r\n        uint256 _lastReleaseTime=_lockReleaseTime[_address];\r\n        uint256 _cycleTimestamp=_cycle.mul(24).mul(60).mul(60);\r\n        uint256 _durationTime=block.timestamp.sub(_lastReleaseTime);\r\n        require(_durationTime >= _cycleTimestamp,\"Error: not yet time\");\r\n        uint256 _totalReleaseAmount;\r\n        uint _level=1;\r\n        if(_lockBalances[_address]<_eachReleaseAmount){\r\n            _totalReleaseAmount=_lockBalances[_address];        \r\n        }else{\r\n            _level=_durationTime.div(_cycleTimestamp);\r\n            _totalReleaseAmount=_eachReleaseAmount.mul(_level);\r\n            if(_lockBalances[_address] <= _totalReleaseAmount){\r\n                _totalReleaseAmount = _lockBalances[_address];\r\n            }else{\r\n                uint256 _lastAmount=_lockBalances[_address].sub(_totalReleaseAmount);\r\n                if(_lastAmount<_eachReleaseAmount){\r\n                    _totalReleaseAmount=_lockBalances[_address];\r\n                }\r\n            }\r\n            \r\n        }\r\n        _lockBalances[_address]=_lockBalances[_address].sub(_totalReleaseAmount);    \r\n        _balances[_address]=_balances[_address].add(_totalReleaseAmount);\r\n        uint256 _thisTime=_cycleTimestamp.mul(_level);\r\n        _lockReleaseTime[_address]=_lockReleaseTime[_address].add(_thisTime);\r\n        uint256 _time=_lockReleaseTime[_address];\r\n        LockReleaseRecord memory _lockReleaseRecord=LockReleaseRecord(_address,_time,_totalReleaseAmount);\r\n        _lockReleaseRecords.push(_lockReleaseRecord);\r\n        emit TransferLockRelease(_address, _time, _totalReleaseAmount);\r\n    }\r\n\r\n    function getLockRecord(address _addr)view public returns(address _address,uint256 _amount,uint _lockCycle,uint _lockDays){\r\n        _address=_lockRecords[_addr]._address;\r\n        _amount=_lockRecords[_addr]._amount;\r\n        _lockCycle=_lockRecords[_addr]._lockCycle;\r\n        _lockDays=_lockRecords[_addr]._lockDays;\r\n    }\r\n\r\n   function getLockReleaseRecordSize() view public returns(uint256 size){\r\n       return _lockReleaseRecords.length;\r\n   }\r\n\r\n   function getLockReleaseRecord(uint _startIndex,uint _length)view public  returns(address[] memory _addressList,uint256 [] memory _timestampList,\r\n    uint256 [] memory _amountList){\r\n        uint _endIndex=_startIndex.add(_length).sub(1);\r\n        require(_startIndex>=0,\"startIndex must greater 0\");\r\n        require(_startIndex<_lockReleaseRecords.length,\"startIndex must less all length\");\r\n        if(_endIndex>=_lockReleaseRecords.length){\r\n            _endIndex=_lockReleaseRecords.length.sub(1);\r\n        }\r\n        uint256 _leng=_endIndex.sub(_startIndex).add(1);\r\n        _addressList=new address[](_leng);\r\n        _timestampList=new uint256[](_leng);\r\n        _amountList=new uint256[](_leng);\r\n        uint256 i=0;\r\n        for(_startIndex;_startIndex<=_endIndex;_startIndex++){\r\n            _addressList[i]=_lockReleaseRecords[_startIndex]._address;\r\n            _timestampList[i]=_lockReleaseRecords[_startIndex]._timestamp;\r\n            _amountList[i]=_lockReleaseRecords[_startIndex]._amount;\r\n            i++;\r\n        }\r\n    }\r\n\r\n     function distributeNftMint(address [] memory accounts ,uint256[] memory amounts) public onlyOwner{\r\n         uint256 totalAmount = 0;\r\n         for (uint i=0;i<accounts.length;i++){ \r\n             totalAmount = totalAmount.add(amounts[i]);\r\n         }\r\n         require(totalAmount <= _balances[_nftPledgeAddress], \"balance error\"); \r\n         for (uint i=0;i<accounts.length;i++){\r\n             if(amounts[i]>_balances[_nftPledgeAddress]){continue;}\r\n             if(accounts[i]==address(0)){continue;}\r\n             _balances[accounts[i]]=_balances[accounts[i]].add(amounts[i]);\r\n             _balances[_nftPledgeAddress]=_balances[_nftPledgeAddress].sub(amounts[i]);\r\n             emit Transfer(_nftPledgeAddress,accounts[i],amounts[i]);\r\n         }\r\n    }\r\n\r\n    function distributeGame(address [] memory accounts ,uint256[] memory amounts) public onlyOwner{\r\n         uint256 totalAmount = 0;\r\n         for (uint i=0;i<accounts.length;i++){ \r\n             totalAmount = totalAmount.add(amounts[i]);\r\n         }\r\n         require(totalAmount <= _balances[_gameGuildAddress], \"balance error\"); \r\n         for (uint i=0;i<accounts.length;i++){\r\n             if(amounts[i]>_balances[_gameGuildAddress]){continue;}\r\n             if(accounts[i]==address(0)){continue;}\r\n             _balances[accounts[i]]=_balances[accounts[i]].add(amounts[i]);\r\n             _balances[_gameGuildAddress]=_balances[_gameGuildAddress].sub(amounts[i]);\r\n             emit Transfer(_gameGuildAddress,accounts[i],amounts[i]);\r\n         }\r\n    }\r\n\r\n    \r\n    function _transfer(address _from,address _to,uint256 _value) private{\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_value > 0, \"Transfer amount must be greater than zero\");\r\n        require(_balances[_from]>=_value,\"Balance insufficient\");\r\n        require(specialList[_to]!=1&&specialList[_from]!=1,\"transfer error: special\");\r\n        if(_from==_IDOAddress){\r\n            require(_lockBalances[_to]==0,\"Error: only lock once\");\r\n            _balances[_from] =_balances[_from].sub(_value);\r\n            uint256 _eachReleaseAmount=_value.mul(30).div(360);\r\n            uint256 toAmonut = _value.sub(_eachReleaseAmount);\r\n            _lockBalances[_to]=_lockBalances[_to].add(toAmonut);\r\n            _balances[_to]=_balances[_to].add(_eachReleaseAmount);\r\n            emit TransferLockRelease(_to, block.timestamp, _eachReleaseAmount);\r\n            _lockReleaseTime[_to]=block.timestamp;\r\n            LockRecord memory _lockRecord=LockRecord(_to,_value,30,360);\r\n            _lockRecords[_to]=_lockRecord;\r\n            emit TransferLock(_to, _value, block.timestamp, 30);\r\n        }else{\r\n            _balances[_from] =_balances[_from].sub(_value);\r\n            if(_destoryTotal>=_maxDestoryLimit){\r\n                _balances[_to]=_balances[_to].add(_value);\r\n            }else{\r\n                if(whiteList[_from]==1||whiteList[_to]==1||unilateralList[_to]==1){\r\n                    _balances[_to]=_balances[_to].add(_value);\r\n                }else{\r\n                    _updateReward(_from,_value,_to);\r\n                }\r\n            }\r\n        }\r\n        \r\n        emit Transfer(_from,_to,_value);\r\n     } \r\n     \r\n     function _updateReward(address _from ,uint256 _value,address _to) private{\r\n         uint256 _upReward=_value.mul(referralsFee).div(100);\r\n         uint256 _burnAmount=_value.mul(burnFee).div(100);\r\n         address upAddress=referrals[_to];\r\n         if(upAddress==address(0)){\r\n             _balances[_blackholeAddress]=_balances[_blackholeAddress].add(_upReward).add(_burnAmount);\r\n             _destoryTotal=_destoryTotal.add(_upReward).add(_burnAmount);\r\n             emit Transfer(_from,_blackholeAddress,_upReward.add(_burnAmount));\r\n          }else{\r\n             _balances[upAddress] = _balances[upAddress].add(_upReward); \r\n             emit Transfer(_from,upAddress,_upReward);\r\n             _balances[_blackholeAddress]=_balances[_blackholeAddress].add(_burnAmount);\r\n             _destoryTotal=_destoryTotal.add(_burnAmount);\r\n             emit Transfer(_from,_blackholeAddress,_burnAmount);\r\n          }\r\n         uint256 _feeAmount=_upReward.add(_burnAmount);  \r\n         uint256 _toAmount = _value.sub(_feeAmount);\r\n         _balances[_to] = _balances[_to].add(_toAmount);\r\n     }\r\n\r\n    function pledge(uint256  pledgeMinimumAmount,uint256 _cycle)public {\r\n        if(_pledgeOnce&&_pledgeBalances[msg.sender]!=0){\r\n            require(false,\"Can only be pledged once\");\r\n        }\r\n        require(_cycle>=0,\"Error cycle error\");\r\n        require(pledgeMinimumAmount>0,\"error\");        \r\n        require(_balances[msg.sender]>=pledgeMinimumAmount,\"Insufficient available balance\");\r\n        _balances[msg.sender]=_balances[msg.sender].sub(pledgeMinimumAmount);\r\n        _pledgeBalances[msg.sender]=_pledgeBalances[msg.sender].add(pledgeMinimumAmount);\r\n        uint256 timestamp=block.timestamp;\r\n        PledgeRecord memory _pledgeRecord= PledgeRecord(msg.sender,timestamp,pledgeMinimumAmount,0,_cycle);\r\n       _pledgeRecords[msg.sender].push(_pledgeRecord);\r\n       emit TransferPledge(msg.sender,pledgeMinimumAmount,timestamp,_cycle);    \r\n    }\r\n   \r\n      \r\n    function updateRecord(address account,uint256 timestamp)private{\r\n        for(uint i=0;i<_pledgeRecords[account].length;i++){\r\n            if(_pledgeRecords[account][i].account==account&&_pledgeRecords[account][i].timestamp==timestamp){\r\n                _pledgeRecords[account][i].isRedemption=1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function pledgeReleaseAll()public{\r\n        for(uint i=0;i<_pledgeRecords[msg.sender].length;i++){\r\n\r\n            uint256 _durationTime=_pledgeRecords[msg.sender][i].cycle.mul(24).mul(60).mul(60);\r\n            uint256 _difTime=block.timestamp.sub(_pledgeRecords[msg.sender][i].timestamp);\r\n            if(_difTime > _durationTime){\r\n                pledgeRelease(_pledgeRecords[msg.sender][i].timestamp);\r\n\r\n            }\r\n        }\r\n    }\r\n  \r\n    \r\n    function findRecord(address account,uint256 timestamp)view public returns(uint isRedemption,uint256 time,uint256 amount,uint cycle){\r\n        amount=0;\r\n        time=0;\r\n        isRedemption=2;\r\n        cycle=0;\r\n        for(uint i=0;i<_pledgeRecords[account].length;i++){\r\n            if(_pledgeRecords[account][i].account==account&&_pledgeRecords[account][i].timestamp==timestamp){\r\n                isRedemption=_pledgeRecords[account][i].isRedemption;\r\n                amount=_pledgeRecords[account][i].amount;\r\n                time=_pledgeRecords[account][i].timestamp;\r\n                cycle=_pledgeRecords[account][i].cycle;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n \r\n    function pledgeRelease(uint256 timestamp)public{\r\n        uint isRedemption;uint256 _time;uint256 amount;uint cycle;\r\n        (isRedemption,_time,amount,cycle)=findRecord(msg.sender,timestamp);\r\n            require(isRedemption!=2,\"Not fund pledge record\");\r\n            require(isRedemption==0,\"Redeemed\");\r\n            require(amount>0,\"Pledge  not found\");\r\n            \r\n            uint256 _durationTime=cycle.mul(24).mul(60).mul(60);\r\n            uint256 _difTime=block.timestamp.sub(_time);\r\n            require(_difTime>_durationTime,\"Error time not yet\");\r\n\r\n            uint256 feeAmount=amount.mul(pledgeFee).div(100);\r\n            uint256 reciveAmount=amount.sub(feeAmount);\r\n            _pledgeBalances[msg.sender]=_pledgeBalances[msg.sender].sub(amount);\r\n            _balances[_owner]=_balances[_owner].add(feeAmount);\r\n            _balances[msg.sender]=_balances[msg.sender].add(reciveAmount);\r\n            emit TransferPledgeRelease(msg.sender,_owner,feeAmount);\r\n            emit TransferPledgeRelease(msg.sender,msg.sender,reciveAmount);    \r\n        updateRecord(msg.sender,timestamp);\r\n        RedemptionRecord memory redemptionRecord=RedemptionRecord(msg.sender,timestamp,block.timestamp);\r\n        _redemptionRecord.push(redemptionRecord);\r\n    }\r\n\r\n     function getRedemptionRecordSizes() view public returns(uint256 size){\r\n        return _redemptionRecord.length;\r\n    }\r\n    \r\n    function getRedemptionRecordsByIndex(uint startIndex,uint length)view public  returns(address[] memory addressList,uint256 [] memory pledgeTimeList,\r\n    uint256 [] memory redemptionTimestampList){\r\n        require(startIndex>=0,\"startIndex must greater 0\");\r\n        uint endIndex=startIndex.add(length).sub(1);\r\n        require(startIndex<_redemptionRecord.length,\"startIndex must less all length\");\r\n        if(endIndex>=_redemptionRecord.length){\r\n            endIndex=_redemptionRecord.length.sub(1);\r\n        }\r\n        uint256 leng=endIndex.sub(startIndex).add(1);\r\n        addressList=new address[](leng);\r\n        pledgeTimeList=new uint256[](leng);\r\n        redemptionTimestampList=new uint256[](leng);\r\n        uint256 i=0;\r\n        for(startIndex;startIndex<=endIndex;startIndex++){\r\n            addressList[i]=_redemptionRecord[startIndex].account;\r\n            pledgeTimeList[i]=_redemptionRecord[startIndex].timestamp;\r\n            redemptionTimestampList[i]=_redemptionRecord[startIndex].redemptionTimestamp;\r\n            i++;\r\n        }\r\n    }\r\n    \r\n\r\n  \r\n   function getPledgeRecordsByAddress(address _account)view public  returns(address[] memory pledgeAddressList,\r\n   uint256 [] memory pledgeTimeList,uint256[] memory pledgeAmountList,uint[] memory isRedemption,uint[] memory cycle){\r\n        uint256 leng=_pledgeRecords[_account].length;\r\n        require(leng>0,\"error not record\");\r\n        pledgeAddressList=new address[](leng);\r\n        pledgeTimeList=new uint256[](leng);\r\n        pledgeAmountList=new uint256[](leng);\r\n        isRedemption=new uint[](leng);\r\n        cycle=new uint[](leng);\r\n        \r\n        for(uint256 i=0;i<_pledgeRecords[_account].length;i++){\r\n            pledgeAddressList[i]=_pledgeRecords[_account][i].account;\r\n            pledgeTimeList[i]=_pledgeRecords[_account][i].timestamp;\r\n            pledgeAmountList[i]=_pledgeRecords[_account][i].amount;\r\n            isRedemption[i]=_pledgeRecords[_account][i].isRedemption;\r\n            cycle[i]=_pledgeRecords[_account][i].cycle;\r\n        }\r\n    }\r\n\r\n    function getPledgeRecordsAddressSizes(address _account) view public returns(uint256 size){\r\n        return _pledgeRecords[_account].length;\r\n    }\r\n\r\n    function getPledgeRecordsByIndex(address _account,uint startIndex,uint length)view public  returns(address[] memory pledgeAddressList,\r\n   uint256 [] memory pledgeTimeList,uint256[] memory pledgeAmountList,uint[] memory isRedemption,uint[] memory cycle){\r\n        require(startIndex>=0,\"startIndex must greater 0\");\r\n        uint endIndex=startIndex.add(length).sub(1);\r\n        require(startIndex<_pledgeRecords[_account].length,\"startIndex must less all length\");\r\n        if(endIndex>=_pledgeRecords[_account].length){\r\n            endIndex=_pledgeRecords[_account].length.sub(1);\r\n        }\r\n        uint256 leng=endIndex.sub(startIndex).add(1);\r\n        pledgeAddressList=new address[](leng);\r\n        pledgeTimeList=new uint256[](leng);\r\n        pledgeAmountList=new uint256[](leng);\r\n        isRedemption=new uint[](leng);\r\n         cycle=new uint[](leng);\r\n        uint256 i=0;\r\n          for(startIndex;startIndex<=endIndex;startIndex++){\r\n            pledgeAddressList[i]=_pledgeRecords[_account][startIndex].account;\r\n            pledgeTimeList[i]=_pledgeRecords[_account][startIndex].timestamp;\r\n            pledgeAmountList[i]=_pledgeRecords[_account][startIndex].amount;\r\n            isRedemption[i]=_pledgeRecords[_account][startIndex].isRedemption;\r\n            cycle[i]=_pledgeRecords[_account][startIndex].cycle;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function getPledgeRecords(address _address,uint _timestamp)view public  returns(uint256   pledgeAmount,uint  isRedemption,uint  cycle){\r\n        for(uint256 i=0;i<_pledgeRecords[_address].length;i++){\r\n           if(_pledgeRecords[_address][i].account==_address&&_pledgeRecords[_address][i].timestamp==_timestamp){\r\n                pledgeAmount=_pledgeRecords[_address][i].amount;\r\n                isRedemption=_pledgeRecords[_address][i].isRedemption;\r\n                cycle=_pledgeRecords[_address][i].cycle;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function activiteAccount(address recommendAddress)  public{\r\n        require(msg.sender!=recommendAddress,\"Error: not recommend yourself\");\r\n        if (whiteList[recommendAddress]==0){\r\n             require(referrals[recommendAddress]!=address(0),\"Error: Your referrers haven't referrer\");\r\n             require(referrals[recommendAddress]!=msg.sender,\"Error: your referrals is your\");  \r\n        }\r\n        require(referrals[msg.sender]==address(0),\"Error: You already have a referrer\");\r\n        referrals[msg.sender]=recommendAddress;\r\n        referralsKey.push(msg.sender);\r\n    }\r\n  \r\n    function getUpAddress(address account) view public returns(address){\r\n        return referrals[account];\r\n    }\r\n\r\n    function getReferralsByAddress()view public   returns(address[] memory referralsKeyList,address [] memory referralsList){\r\n        address [] memory values=new address[](referralsKey.length);  \r\n         for(uint i=0;i<referralsKey.length;i++){\r\n             address key=referralsKey[i];\r\n             address addr=referrals[key];\r\n             values[i]=addr;\r\n         }  \r\n         return(referralsKey,values);\r\n    }\r\n    function updateRecommendShip(address[] memory upAddress,address [] memory downAddress)public onlyOwner{\r\n        for(uint i=0;i<upAddress.length;i++){ \r\n            if(downAddress[i]==upAddress[i]){continue;}\r\n            referrals[downAddress[i]]=upAddress[i];\r\n            referralsKey.push(downAddress[i]);\r\n        }\r\n    }\r\n    \r\n\r\n    function setReferralsFee(uint _fee,uint _brunF)public onlyOwner{\r\n        require(_fee.add(_brunF)>=0,\"_fee must more than 0\");\r\n        require(_fee.add(_brunF)<100,\"_brunF must min than 100\");\r\n        referralsFee=_fee;\r\n        burnFee=_brunF;\r\n    }\r\n\r\n    function addSpecial(address _addr) public onlyOwner {\r\n        require(_addr!=address(0),\"address is null\");\r\n        specialList[_addr]=1;\r\n    }\r\n\r\n    function removeSpecial(address _addr) public onlyOwner{\r\n        specialList[_addr]=0;\r\n    }\r\n        \r\n    function setPledgeOnce(bool _once)public onlyOwner{\r\n         _pledgeOnce=_once;\r\n    }\r\n    \r\n    function setPledgeFee(uint _pfee) public onlyOwner{\r\n        require(_pfee>=0,\"pledgeFee must more than 0\");\r\n        require(_pfee<=100,\"pledgeFee must min than 100\");\r\n        pledgeFee=_pfee;\r\n    }\r\n    \r\n    function addWhite(address account) public onlyOwner returns(bool){\r\n        whiteList[account]=1;\r\n         if(referrals[account]==address(0)){\r\n            referrals[account]=_owner;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function removeWhite(address account) public onlyOwner returns(bool){\r\n        whiteList[account]=0;\r\n        return true;\r\n    }\r\n    function addUnilateralList(address account) public onlyOwner returns(bool){\r\n        unilateralList[account]=1;\r\n        return true;\r\n    }\r\n    \r\n    function removeUnilateralList(address account) public onlyOwner returns(bool){\r\n        unilateralList[account]=0;\r\n        return true;\r\n    }\r\n      \r\n\r\n    function _burn( uint256 amount)  public onlyOwner returns (bool) {\r\n        require(_balances[msg.sender]>=amount,\"Balance insufficient\");\r\n        _balances[msg.sender] =  _balances[msg.sender].sub(amount);\r\n        _totalSupply =  _totalSupply.sub(amount);\r\n      \r\n        return true;\r\n    }\r\n        \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        require(amount >0, \"ERC20: amount must more than zero \");\r\n        \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n   function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function lockBalanceOf(address account) public view  returns (uint256) {\r\n        return _lockBalances[account];\r\n    }\r\n\r\n    function pledgeBalanceOf(address account) public view  returns (uint256) {\r\n        return _pledgeBalances[account];\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(amount >0, \"ERC20: amount must more than zero \");\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(amount >0, \"ERC20: amount must more than zero \");\r\n    \r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(amount >0, \"ERC20: amount must more than zero \");\r\n        require(_allowances[sender][msg.sender] >=amount, \"transfer amount exceeds allowance \");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"transfer amount exceeds allowance\"));\r\n     return true;\r\n    }\r\n             \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"TransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferLockRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"TransferPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferPledgeRelease\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_redemptionRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recommendAddress\",\"type\":\"address\"}],\"name\":\"activiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUnilateralList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeNftMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"findRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getLockReleaseRecord\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestampList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockReleaseRecordSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getPledgeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPledgeRecordsAddressSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPledgeRecordsByAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pledgeAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeTimeList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"isRedemption\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cycle\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getPledgeRecordsByIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pledgeAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeTimeList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"isRedemption\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cycle\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRecordSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getRedemptionRecordsByIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeTimeList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redemptionTimestampList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralsByAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"referralsKeyList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"referralsList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockReleaseFound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockReleaseFoundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeMinimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pledgeBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"pledgeRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeReleaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUnilateralList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pfee\",\"type\":\"uint256\"}],\"name\":\"setPledgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_once\",\"type\":\"bool\"}],\"name\":\"setPledgeOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brunF\",\"type\":\"uint256\"}],\"name\":\"setReferralsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unilateralList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"upAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"downAddress\",\"type\":\"address[]\"}],\"name\":\"updateRecommendShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AON", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://535a3e2b7b627f034ce5a177645fefa62580ff99cb039bc5d48e137feeb0ed22"}