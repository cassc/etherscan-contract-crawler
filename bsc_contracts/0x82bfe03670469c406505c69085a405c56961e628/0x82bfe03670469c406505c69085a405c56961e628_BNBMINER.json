{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\nlibrary Objects {\r\n    struct Investment {\r\n        uint256 planId;\r\n        uint256 investmentDate;\r\n        uint256 investment;\r\n        uint256 lastWithdrawalDate;\r\n        uint256 currentDividends;\r\n        bool isExpired;\r\n    }\r\n\r\n    struct Plan {\r\n        uint256 dailyInterest;\r\n        uint256 term; //0 means unlimited\r\n    }\r\n\r\n    struct Investor {\r\n        address addr;\r\n        uint256 referrerEarnings;\r\n        uint256 availableReferrerEarnings;\r\n        uint256 referrer;\r\n        uint256 planCount;\r\n        mapping(uint256 => Investment) plans;\r\n        uint256 level1RefCount;\r\n        uint256 level2RefCount;\r\n        uint256 level3RefCount;\r\n        uint256 checkpoint;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract BNBMINER is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public constant DEVELOPER_RATE = 50; //per thousand\r\n    uint256 public constant MARKETING_RATE = 50; //per thousand\t\r\n    uint256 public constant FUND_RATE = 20;\r\n    uint256 public constant REFERENCE_RATE = 81;\r\n    uint256 public constant REFERENCE_LEVEL1_RATE = 50;\r\n    uint256 public constant REFERENCE_LEVEL2_RATE = 20;\r\n    uint256 public constant REFERENCE_LEVEL3_RATE = 20;\r\n    uint256 public constant REFERENCE_SELF_RATE = 1;\r\n    uint256 public constant MINIMUM = 0.05 ether; //0.05 BNB minimum investment needed\r\n    uint256 public constant REFERRER_CODE = 6666; //default\r\n    uint256 public constant TIME_STEP = 86400;\r\n    uint256 public constant DAY = 1 days;\r\n    uint256 public constant LAUNCH_TIME = 1619878136; // \r\n\r\n    uint256 public latestReferrerCode;\r\n    uint256 private totalInvestments_;\r\n\r\n    address payable public fundAds;\r\n    address payable public mktAds;\r\n    address payable public prjAds;\r\n\r\n    mapping(address => uint256) public address2UID;\r\n    mapping(uint256 => Objects.Investor) public uid2Investor;\r\n    Objects.Plan[] private investmentPlans_;\r\n\r\n    event onInvest(address investor, uint256 amount);\r\n    event onGrant(address grantor, address beneficiary, uint256 amount);\r\n    event onWithdraw(address investor, uint256 amount);\r\n\r\n    constructor(address payable fundAddr,address payable mktAddr, address payable prjAddr) public {\r\n        fundAds = fundAddr;\r\n        mktAds = mktAddr;\r\n        prjAds = prjAddr;\r\n        _init();\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value == 0) {\r\n            withdraw();\r\n        } else {\r\n\t\t\tinvest(0, 0); //default to buy plan 0, no referrer\r\n        }\r\n    }\r\n\r\n    function checkIn() public {\r\n    }\r\n\r\n    function setMarketingAccount(address payable _newMarketingAccount) public onlyOwner {\r\n        require(_newMarketingAccount != address(0));\r\n        mktAds = _newMarketingAccount;\r\n    }\r\n\r\n    function getMarketingAccount() public view onlyOwner returns (address) {\r\n        return mktAds;\r\n    }\r\n\r\n    function setDeveloperAccount(address payable _newDeveloperAccount) public onlyOwner {\r\n        require(_newDeveloperAccount != address(0));\r\n        prjAds = _newDeveloperAccount;\r\n    }\r\n\r\n    function getDeveloperAccount() public view onlyOwner returns (address) {\r\n        return prjAds;\r\n    }\r\n\r\n    function setReferenceAccount(address payable _newReferenceAccount) public onlyOwner {\r\n        require(_newReferenceAccount != address(0));\r\n        prjAds = _newReferenceAccount;\r\n    }\r\n\r\n    function getReferenceAccount() public view onlyOwner returns (address) {\r\n        return prjAds;\r\n    }\r\n\r\n    function _init() private {\r\n        latestReferrerCode = REFERRER_CODE;\r\n        address2UID[msg.sender] = latestReferrerCode;\r\n        uid2Investor[latestReferrerCode].addr = msg.sender;\r\n        uid2Investor[latestReferrerCode].referrer = 0;\r\n        uid2Investor[latestReferrerCode].planCount = 0;\r\n        investmentPlans_.push(Objects.Plan(40, 0)); //unlimited\r\n        investmentPlans_.push(Objects.Plan(140, TIME_STEP.mul(10))); //10 days\r\n        investmentPlans_.push(Objects.Plan(130, TIME_STEP.mul(13))); //13 days\r\n        investmentPlans_.push(Objects.Plan(180, TIME_STEP.mul(7))); //7 days\r\n        investmentPlans_.push(Objects.Plan(380, TIME_STEP.mul(3))); //3 days\r\n        investmentPlans_.push(Objects.Plan(540, TIME_STEP.mul(2))); //2 days\r\n    }\r\n\r\n    function getCurrentPlans() public view returns (uint256[] memory, uint256[] memory, uint256[] memory) {\r\n        uint256[] memory ids = new uint256[](investmentPlans_.length);\r\n        uint256[] memory interests = new uint256[](investmentPlans_.length);\r\n        uint256[] memory terms = new uint256[](investmentPlans_.length);\r\n        for (uint256 i = 0; i < investmentPlans_.length; i++) {\r\n            Objects.Plan storage plan = investmentPlans_[i];\r\n            ids[i] = i;\r\n            interests[i] = plan.dailyInterest;\r\n            terms[i] = plan.term;\r\n        }\r\n        return\r\n        (\r\n        ids,\r\n        interests,\r\n        terms\r\n        );\r\n    }\r\n\r\n    function getTotalInvestments() public onlyOwner view returns (uint256){\r\n        return totalInvestments_;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getUIDByAddress(address _addr) public view returns (uint256) {\r\n        return address2UID[_addr];\r\n    }\r\n\r\n    function getInvestorInfoByUID(uint256 _uid) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256[] memory, uint256[] memory) {\r\n        if (msg.sender != owner) {\r\n            require(address2UID[msg.sender] == _uid, \"only owner or self can check the investor info.\");\r\n        }\r\n        Objects.Investor storage investor = uid2Investor[_uid];\r\n        uint256[] memory newDividends = new uint256[](investor.planCount);\r\n        uint256[] memory currentDividends = new  uint256[](investor.planCount);\r\n        for (uint256 i = 0; i < investor.planCount; i++) {\r\n            require(investor.plans[i].investmentDate != 0, \"wrong investment date\");\r\n            currentDividends[i] = investor.plans[i].currentDividends;\r\n            if (investor.plans[i].isExpired) {\r\n                newDividends[i] = 0;\r\n            } else {\r\n                if (investmentPlans_[investor.plans[i].planId].term > 0) {\r\n                    if (block.timestamp >= investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term)) {\r\n                        newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term), investor.plans[i].lastWithdrawalDate);\r\n                    } else {\r\n                        newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, block.timestamp, investor.plans[i].lastWithdrawalDate);\r\n                    }\r\n                } else {\r\n                    newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, block.timestamp, investor.plans[i].lastWithdrawalDate);\r\n                }\r\n            }\r\n        }\r\n        return\r\n        (\r\n        investor.referrerEarnings,\r\n        investor.availableReferrerEarnings,\r\n        investor.referrer,\r\n        investor.level1RefCount,\r\n        investor.level2RefCount,\r\n        investor.level3RefCount,\r\n        investor.planCount,\r\n        currentDividends,\r\n        newDividends\r\n        );\r\n    }\r\n\r\n    function getInvestmentPlanByUID(uint256 _uid) public view returns (uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory) {\r\n        if (msg.sender != owner) {\r\n            require(address2UID[msg.sender] == _uid, \"only owner or self can check the investment plan info.\");\r\n        }\r\n        Objects.Investor storage investor = uid2Investor[_uid];\r\n        uint256[] memory planIds = new  uint256[](investor.planCount);\r\n        uint256[] memory investmentDates = new  uint256[](investor.planCount);\r\n        uint256[] memory investments = new  uint256[](investor.planCount);\r\n        uint256[] memory currentDividends = new  uint256[](investor.planCount);\r\n        bool[] memory isExpireds = new  bool[](investor.planCount);\r\n\r\n        for (uint256 i = 0; i < investor.planCount; i++) {\r\n            require(investor.plans[i].investmentDate!=0,\"wrong investment date\");\r\n            planIds[i] = investor.plans[i].planId;\r\n            currentDividends[i] = investor.plans[i].currentDividends;\r\n            investmentDates[i] = investor.plans[i].investmentDate;\r\n            investments[i] = investor.plans[i].investment;\r\n            if (investor.plans[i].isExpired) {\r\n                isExpireds[i] = true;\r\n            } else {\r\n                isExpireds[i] = false;\r\n                if (investmentPlans_[investor.plans[i].planId].term > 0) {\r\n                    if (block.timestamp >= investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term)) {\r\n                        isExpireds[i] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return\r\n        (\r\n        planIds,\r\n        investmentDates,\r\n        investments,\r\n        currentDividends,\r\n        isExpireds\r\n        );\r\n    }\r\n\r\n    function _addInvestor(address _addr, uint256 _referrerCode) private returns (uint256) {\r\n        if (_referrerCode >= REFERRER_CODE) {\r\n            //require(uid2Investor[_referrerCode].addr != address(0), \"Wrong referrer code\");\r\n            if (uid2Investor[_referrerCode].addr == address(0)) {\r\n                _referrerCode = 0;\r\n            }\r\n        } else {\r\n            _referrerCode = 0;\r\n        }\r\n        address addr = _addr;\r\n        latestReferrerCode = latestReferrerCode.add(1);\r\n        address2UID[addr] = latestReferrerCode;\r\n        uid2Investor[latestReferrerCode].addr = addr;\r\n        uid2Investor[latestReferrerCode].referrer = _referrerCode;\r\n        uid2Investor[latestReferrerCode].planCount = 0;\r\n        if (_referrerCode >= REFERRER_CODE) {\r\n            uint256 _ref1 = _referrerCode;\r\n            uint256 _ref2 = uid2Investor[_ref1].referrer;\r\n            uint256 _ref3 = uid2Investor[_ref2].referrer;\r\n            uid2Investor[_ref1].level1RefCount = uid2Investor[_ref1].level1RefCount.add(1);\r\n            if (_ref2 >= REFERRER_CODE) {\r\n                uid2Investor[_ref2].level2RefCount = uid2Investor[_ref2].level2RefCount.add(1);\r\n            }\r\n            if (_ref3 >= REFERRER_CODE) {\r\n                uid2Investor[_ref3].level3RefCount = uid2Investor[_ref3].level3RefCount.add(1);\r\n            }\r\n        }\r\n        return (latestReferrerCode);\r\n    }\r\n\r\n    function _invest(address _addr, uint256 _planId, uint256 _referrerCode, uint256 _amount) private returns (bool) {\r\n        require(block.timestamp >= LAUNCH_TIME ,\"Not Launch\");\r\n        require(_planId >= 0 && _planId < investmentPlans_.length, \"Wrong investment plan id\");\r\n        require(_amount >= MINIMUM, \"Less than the minimum amount of deposit requirement\");\r\n        uint256 uid = address2UID[_addr];\r\n        if (uid == 0) {\r\n            uid = _addInvestor(_addr, _referrerCode);\r\n            //new user\r\n        } else {//old user\r\n            //do nothing, referrer is permenant\r\n        }\r\n        uint256 planCount = uid2Investor[uid].planCount;\r\n        Objects.Investor storage investor = uid2Investor[uid];\r\n        investor.plans[planCount].planId = _planId;\r\n        investor.plans[planCount].investmentDate = block.timestamp;\r\n        investor.plans[planCount].lastWithdrawalDate = block.timestamp;\r\n        investor.plans[planCount].investment = _amount;\r\n        investor.plans[planCount].currentDividends = 0;\r\n        investor.plans[planCount].isExpired = false;\r\n\r\n        investor.planCount = investor.planCount.add(1);\r\n\r\n        _calculateReferrerReward(uid, _amount, investor.referrer);\r\n\r\n        totalInvestments_ = totalInvestments_.add(_amount);\r\n\r\n        uint256 developerPercentage = (_amount.mul(DEVELOPER_RATE)).div(1000);\r\n        prjAds.transfer(developerPercentage);\r\n        uint256 marketingPercentage = (_amount.mul(MARKETING_RATE)).div(1000);\r\n        mktAds.transfer(marketingPercentage);\r\n        uint256 fundingPercentage = (_amount.mul(FUND_RATE)).div(1000);\r\n        fundAds.transfer(fundingPercentage);\r\n        return true;\r\n    }\r\n\r\n    function grant(address addr, uint256 _planId) public payable {\r\n        uint256 grantorUid = address2UID[msg.sender];\r\n        bool isAutoAddReferrer = true;\r\n        uint256 referrerCode = 0;\r\n\r\n        if (grantorUid != 0 && isAutoAddReferrer) {\r\n            referrerCode = grantorUid;\r\n        }\r\n\r\n        if (_invest(addr,_planId,referrerCode,msg.value)) {\r\n            emit onGrant(msg.sender, addr, msg.value);\r\n        }\r\n    }\r\n\r\n    function invest(uint256 _referrerCode, uint256 _planId) public payable {\r\n        if (_invest(msg.sender, _planId, _referrerCode, msg.value)) {\r\n            emit onInvest(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function withdraw() public payable {\r\n        require(msg.value == 0, \"withdrawal doesn't allow to transfer hr simultaneously\");\r\n        uint256 uid = address2UID[msg.sender];\r\n        require (block.timestamp >= uid2Investor[uid].checkpoint.add(DAY.mul(3).div(2)), \"Withdraw every 36 hours\");\r\n        require(uid != 0, \"Can not withdraw because no any investments\");\r\n        uint256 withdrawalAmount = 0;\r\n        for (uint256 i = 0; i < uid2Investor[uid].planCount; i++) {\r\n            if (uid2Investor[uid].plans[i].isExpired) {\r\n                continue;\r\n            }\r\n\r\n            Objects.Plan storage plan = investmentPlans_[uid2Investor[uid].plans[i].planId];\r\n\r\n            bool isExpired = false;\r\n            uint256 withdrawalDate = block.timestamp;\r\n            if (plan.term > 0) {\r\n                uint256 endTime = uid2Investor[uid].plans[i].investmentDate.add(plan.term);\r\n                if (withdrawalDate >= endTime) {\r\n                    withdrawalDate = endTime;\r\n                    isExpired = true;\r\n                }\r\n            }\r\n\r\n            uint256 amount = _calculateDividends(uid2Investor[uid].plans[i].investment , plan.dailyInterest , withdrawalDate , uid2Investor[uid].plans[i].lastWithdrawalDate);\r\n\r\n            withdrawalAmount += amount;\r\n\r\n            uid2Investor[uid].plans[i].lastWithdrawalDate = withdrawalDate;\r\n            uid2Investor[uid].plans[i].isExpired = isExpired;\r\n            uid2Investor[uid].plans[i].currentDividends += amount;\r\n        }\r\n\t\t\r\n\t\tif (withdrawalAmount>0) {\r\n\t\t\tmsg.sender.transfer(withdrawalAmount);\r\n\t\t}\r\n\t\t\r\n\r\n        if (uid2Investor[uid].availableReferrerEarnings>0) {\r\n            msg.sender.transfer(uid2Investor[uid].availableReferrerEarnings);\r\n            uid2Investor[uid].referrerEarnings = uid2Investor[uid].availableReferrerEarnings.add(uid2Investor[uid].referrerEarnings);\r\n            uid2Investor[uid].availableReferrerEarnings = 0;\r\n        }\r\n        \r\n        uid2Investor[uid].checkpoint = block.timestamp;\r\n        \r\n\r\n        emit onWithdraw(msg.sender, withdrawalAmount);\r\n    }\r\n\r\n    function _calculateDividends(uint256 _amount, uint256 _dailyInterestRate, uint256 _now, uint256 _start) private pure returns (uint256) {\r\n        return (_amount * _dailyInterestRate / 1000 * (_now - _start)) / TIME_STEP;\r\n    }\r\n\r\n    function _calculateReferrerReward(uint256 _uid, uint256 _investment, uint256 _referrerCode) private {\r\n\r\n        uint256 _allReferrerAmount = (_investment.mul(REFERENCE_RATE)).div(1000);\r\n        if (_referrerCode != 0) {\r\n            uint256 _ref1 = _referrerCode;\r\n            uint256 _ref2 = uid2Investor[_ref1].referrer;\r\n            uint256 _ref3 = uid2Investor[_ref2].referrer;\r\n            uint256 _refAmount = 0;\r\n\r\n            if (_ref1 != 0) {\r\n                _refAmount = (_investment.mul(REFERENCE_LEVEL1_RATE)).div(1000);\r\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\r\n                uid2Investor[_ref1].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref1].availableReferrerEarnings);\r\n                _refAmount = (_investment.mul(REFERENCE_SELF_RATE)).div(1000);\r\n                uid2Investor[_uid].availableReferrerEarnings =  _refAmount.add(uid2Investor[_uid].availableReferrerEarnings);\r\n            }\r\n\r\n            if (_ref2 != 0) {\r\n                _refAmount = (_investment.mul(REFERENCE_LEVEL2_RATE)).div(1000);\r\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\r\n                uid2Investor[_ref2].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref2].availableReferrerEarnings);\r\n            }\r\n\r\n            if (_ref3 != 0) {\r\n                _refAmount = (_investment.mul(REFERENCE_LEVEL3_RATE)).div(1000);\r\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\r\n                uid2Investor[_ref3].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref3].availableReferrerEarnings);\r\n            }\r\n        }\r\n\r\n        if (_allReferrerAmount > 0) {\r\n            prjAds.transfer(_allReferrerAmount.div(3));\r\n            mktAds.transfer(_allReferrerAmount.div(3));\r\n            fundAds.transfer(_allReferrerAmount.div(3));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"fundAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mktAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"prjAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grantor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL1_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL2_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL3_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_SELF_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"address2UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAds\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPlans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getInvestmentPlanByUID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getInvestorInfoByUID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketingAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferenceAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUIDByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestReferrerCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktAds\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prjAds\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newDeveloperAccount\",\"type\":\"address\"}],\"name\":\"setDeveloperAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newMarketingAccount\",\"type\":\"address\"}],\"name\":\"setMarketingAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newReferenceAccount\",\"type\":\"address\"}],\"name\":\"setReferenceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uid2Investor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableReferrerEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level1RefCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2RefCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3RefCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BNBMINER", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000050492711c39cda016774ed0ebb3125633e4125e2000000000000000000000000ef7438cd4b44d95c53726b2b4c6c9d9031d80e5400000000000000000000000050492711c39cda016774ed0ebb3125633e4125e2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a128fdf3f670b2b4ae91bfcfe7ee5c05eb933b3452f9d850c6bbde8f9ffc4ea1"}