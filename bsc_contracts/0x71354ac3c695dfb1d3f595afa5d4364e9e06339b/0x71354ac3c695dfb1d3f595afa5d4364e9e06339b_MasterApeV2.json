{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MasterApeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@ape.swap/contracts/contracts/v0.8/access/ContractWhitelist.sol\\\";\\nimport \\\"./interfaces/IRewarderV2.sol\\\";\\nimport \\\"./interfaces/IMasterApeV2.sol\\\";\\nimport \\\"./interfaces/IMasterApe.sol\\\";\\n\\n/// @notice The (older) MasterApe contract gives out a constant number of BANANA tokens per block.\\n/// It is the only address with minting rights for BANANA.\\n/// The idea for this MasterApeV2 (MAV2) contract is therefore to be the owner of a dummy token\\n/// that is deposited into the MasterApeV1 (MAV1) contract.\\n/// The allocation point for this pool on MAV1 is the total allocation point for all pools that receive incentives.\\ncontract MasterApeV2 is IMasterApeV2, Initializable, Ownable, ContractWhitelist, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Info of each user's pool deposit\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided\\n        uint256 rewardDebt; // Reward debt. See explanation below\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BANANAs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accBananaPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n        //   1. The pool's `accBananaPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    /// @notice Info of each pool.\\n    struct PoolInfo {\\n        IERC20 stakeToken; // Address of stake token contract.\\n        IRewarderV2 rewarder; // Address of rewarder contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. BANANAs to distribute per block.\\n        uint256 totalStaked; // Amount of tokens staked in given pool\\n        uint256 lastRewardTime; // Last timestamp BANANAs distribution occurs.\\n        uint256 accBananaPerShare; // Accumulated BANANAs per share, times SCALING_FACTOR. Check code.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n    }\\n\\n    /// @notice Address which is eligible to accept ownership of the MasterApeV1. Set by the current owner.\\n    address public pendingMasterApeV1Owner;\\n    /// @notice Address of MAV1 contract.\\n    IMasterApe public immutable masterApe;\\n    /// @notice The pool id of the MAV2 mock token pool in MAV1.\\n    uint256 public immutable masterPid;\\n    /// @notice The BANANA TOKEN!\\n    IERC20 public immutable banana;\\n    ///  @notice 10 BANANAs per block in MAV1\\n    uint256 public constant MASTER_APE_BANANA_PER_BLOCK = 10 ether;\\n    /// @notice BNB Chain has 3 second block times at the time of deployment\\n    uint256 public constant MASTER_APE_BANANA_PER_SECOND_ESTIMATE = MASTER_APE_BANANA_PER_BLOCK / 3;\\n    uint256 public bananaPerSecond;\\n    uint256 public hardCap = 420000000 ether;\\n    /// @notice keeps track of unallocated BANANA in the contract\\n    uint256 public unallocatedBanana;\\n    /// @notice keeps track of the reward BANANA balance in the contract\\n    uint256 public availableBananaRewards;\\n\\n    /// @notice Deposit Fee address\\n    address public feeAddress;\\n    /// @dev Max deposit fee is 10% or 1000 BP\\n    uint256 public constant MAX_DEPOSIT_FEE_BP = 1000;\\n    uint256 private constant DEPOSIT_FEE_BP = 10000;\\n    /// @dev Scaling this up increases support for high supply tokens\\n    uint256 private constant SCALING_FACTOR = 1e18; \\n\\n    /// @notice Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    /// @notice Info of each user that stakes tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    /// @dev tracks existing pools to avoid duplicates\\n    mapping(IERC20 => bool) public poolExistence;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetFeeAddress(address indexed user, address indexed newAddress);\\n    event DepositBananaRewards(address indexed user, uint256 amount);\\n    event UpdateEmissionRate(address indexed user, uint256 bananaPerSecond);\\n    event UpdateHardCap(address indexed user, uint256 hardCap);\\n\\n    event LogPoolAddition(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed stakeToken,\\n        uint16 depositFee,\\n        IRewarderV2 indexed rewarder\\n    );\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, uint16 depositFee, IRewarderV2 indexed rewarder);\\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 stakeSupply, uint256 accBananaPerShare);\\n    event SetPendingMasterApeV1Owner(address pendingMasterApeOwner);\\n\\n    /// @dev modifier to avoid adding duplicate pools\\n    modifier nonDuplicated(IERC20 _stakeToken) {\\n        require(poolExistence[_stakeToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    /// @param banana_ the address of the BANANA token\\n    /// @param masterApe_ the address of MasterApe\\n    /// @param masterPid_ the pool id that will control all allocations\\n    /// @param bananaPerSecond_ the emission rates by second\\n    constructor(\\n        IERC20 banana_,\\n        IMasterApe masterApe_,\\n        uint256 masterPid_,\\n        uint256 bananaPerSecond_\\n    ) {\\n        banana = banana_;\\n        masterApe = masterApe_;\\n        masterPid = masterPid_;\\n        _updateEmissionRate(bananaPerSecond_);\\n        /// @dev init banana pool with an allocation of 0\\n        add(0, banana_, false, 0, IRewarderV2(address(0)));\\n    }\\n\\n    /// @notice Deposits a dummy token to `masterApe` MAV1.\\n    /// This is required because MAV1 holds the minting permission of BANANA.\\n    /// It will transfer all the `dummyToken` in the tx sender address.\\n    /// The allocation point for the dummy pool on MAV1 should be equal to the total amount of allocPoint.\\n    function initialize() external initializer onlyOwner {\\n        (address lpToken, , , ) = masterApe.getPoolInfo(masterPid);\\n        IERC20 dummyToken = IERC20(lpToken);\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"MasterApeV2: bad balance\\\");\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n        dummyToken.approve(address(masterApe), balance);\\n        masterApe.deposit(masterPid, balance);\\n    }\\n\\n    /// @notice deposit tokens on behalf of sender\\n    /// @dev depositTo is nonReentrant\\n    /// @param _pid pool id in which to make deposit\\n    /// @param _amount amount of tokens to deposit\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        depositTo(_pid, _amount, msg.sender);\\n    }\\n\\n    /// @notice withdraw tokens on behalf of sender\\n    /// @dev withdrawTo is nonReentrant\\n    /// @param _pid pool id in which to make withdraw\\n    /// @param _amount amount of tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\n        withdrawTo(_pid, _amount, msg.sender);\\n    }\\n\\n    /// @notice Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    /// @notice Harvests BANANA from `masterApe` MAV1 and pool `masterPid` to MAV2.\\n    function harvestFromMasterApe() external nonReentrant {\\n        _harvestFromMasterApe();\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        uint256 lastPoolStake = pool.totalStaked;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.totalStaked -= amount;\\n        // Handle onReward\\n        if (address(pool.rewarder) != address(0)) {\\n            pool.rewarder.onReward(_pid, msg.sender, msg.sender, 0, 0, lastPoolStake);\\n        }\\n        pool.stakeToken.safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /// @notice updates the deposit fee receiver\\n    /// @param _feeAddress address that receives the fee\\n    function setFeeAddress(address _feeAddress) external {\\n        require(msg.sender == feeAddress || msg.sender == owner(), \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: address(0)\\\");\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(msg.sender, _feeAddress);\\n    }\\n\\n    /// @notice updates the emission rate\\n    /// @dev reverts if above 3.33 per second\\n    /// @param _bananaPerSecond how many BANANA per second\\n    /// @param _withUpdate flag to call massUpdatePool before update\\n    function updateEmissionRate(uint256 _bananaPerSecond, bool _withUpdate) external onlyOwner {\\n        if(_withUpdate) {\\n            massUpdatePools();\\n        }\\n        _updateEmissionRate(_bananaPerSecond);\\n    }\\n\\n    /// @notice Set an address as the pending admin of the MasterApe. The address must accept to take ownership.\\n    /// @param _pendingMasterApeV1Owner Address to set as the pending owner of the MasterApe.\\n    function setPendingMasterApeV1Owner(address _pendingMasterApeV1Owner) external onlyOwner {\\n        pendingMasterApeV1Owner = _pendingMasterApeV1Owner;\\n        emit SetPendingMasterApeV1Owner(pendingMasterApeV1Owner);\\n    }\\n\\n    /// @notice The pendingMasterApeOwner takes ownership through this call\\n    /// @dev Transferring MasterApe ownership away from this contract can brick this contract.\\n    function acceptMasterApeV1Ownership() external {\\n        require(msg.sender == pendingMasterApeV1Owner, \\\"not pending owner\\\");\\n        masterApe.transferOwnership(pendingMasterApeV1Owner);\\n        pendingMasterApeV1Owner = address(0);\\n    }\\n\\n    /// @notice updates the hard cap\\n    /// @dev reverts if less than current\\n    /// @param _hardCap the new hard cap\\n    function updateHardCap(uint256 _hardCap) external onlyOwner {\\n        _updateHardCap(_hardCap);\\n    }\\n\\n    /// @notice returns the amount of pools created\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /// @notice View function to see pending BANANAs on frontend.\\n    /// @param _pid PID on which to check pending BANANA\\n    /// @param _user address of which balance is being checked on\\n    function pendingBanana(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accBananaPerShare = pool.accBananaPerShare;\\n        uint256 stakeSupply = pool.totalStaked;\\n        if (block.timestamp > pool.lastRewardTime && stakeSupply != 0 && totalAllocPoint != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n            uint256 bananaReward = (multiplier * bananaPerSecond * pool.allocPoint) / totalAllocPoint;\\n            accBananaPerShare += (bananaReward * SCALING_FACTOR) / stakeSupply;\\n        }\\n        return ((user.amount * accBananaPerShare) / SCALING_FACTOR) - user.rewardDebt;\\n    }\\n\\n    /// @notice Adds a new pool into the Master Ape\\n    /// @param _allocPoint allocation points of new pool\\n    /// @param _stakeToken stake token of new pool. It cannot be duplicated\\n    /// @param _withUpdate if we should mass update all existing pools\\n    /// @param _depositFeeBP the basis points of the deposit fee\\n    /// @param _rewarder A rewarder compliant smart contract\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _stakeToken,\\n        bool _withUpdate,\\n        uint16 _depositFeeBP,\\n        IRewarderV2 _rewarder\\n    ) public onlyOwner nonDuplicated(_stakeToken) {\\n        require(_depositFeeBP <= MAX_DEPOSIT_FEE_BP, \\\"add: invalid deposit fee\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTime = block.timestamp;\\n        totalAllocPoint += _allocPoint;\\n        poolExistence[_stakeToken] = true;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                stakeToken: _stakeToken,\\n                rewarder: _rewarder,\\n                allocPoint: _allocPoint,\\n                lastRewardTime: lastRewardTime,\\n                accBananaPerShare: 0,\\n                totalStaked: 0,\\n                depositFeeBP: _depositFeeBP\\n            })\\n        );\\n\\n        emit LogPoolAddition(poolInfo.length - 1, _allocPoint, _stakeToken, _depositFeeBP, _rewarder);\\n    }\\n\\n    /// @notice  Update the given pool's BANANA allocation point and deposit fee. Can only be called by the owner.\\n    /// @param _pid id of pool to update\\n    /// @param _allocPoint allocation points of new pool\\n    /// @param _withUpdate if we should mass update all existing pools\\n    /// @param _depositFeeBP the basis points of the deposit fee\\n    /// @param _rewarder A rewarder compliant smart contract\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        uint16 _depositFeeBP,\\n        IRewarderV2 _rewarder\\n    ) external onlyOwner {\\n        require(_depositFeeBP <= MAX_DEPOSIT_FEE_BP, \\\"set: invalid deposit fee\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        } else {\\n            _updatePool(_pid);\\n        }\\n\\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].rewarder = _rewarder;\\n\\n        emit LogSetPool(_pid, _allocPoint, _depositFeeBP, _rewarder);\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Deposit tokens to MasterApe for BANANA allocation.\\n    /// @param _pid pool id in which to make deposit\\n    /// @param _amount amount of tokens to deposit\\n    /// @param _to who receives the staked amount\\n    function depositTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public nonReentrant checkEOAorWhitelist {\\n        _updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_to];\\n        uint256 finalDepositAmount;\\n        uint256 pendingRewards;\\n        if (user.amount > 0) {\\n            pendingRewards = ((user.amount * pool.accBananaPerShare) / SCALING_FACTOR) - user.rewardDebt;\\n            if (pendingRewards > 0) {\\n                _safeBananaTransfer(_to, pendingRewards);\\n            }\\n        }\\n        if (_amount > 0) {\\n            // Prefetch balance to account for transfer fees\\n            IERC20 stakeToken = pool.stakeToken;\\n            uint256 preStakeBalance = stakeToken.balanceOf(address(this));\\n            stakeToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            finalDepositAmount = stakeToken.balanceOf(address(this)) - preStakeBalance;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (finalDepositAmount * pool.depositFeeBP) / DEPOSIT_FEE_BP;\\n                stakeToken.safeTransfer(feeAddress, depositFee);\\n                finalDepositAmount -= depositFee;\\n            }\\n\\n            user.amount += finalDepositAmount;\\n        }\\n        // Handle onReward\\n        if (address(pool.rewarder) != address(0)) {\\n            pool.rewarder.onReward(_pid, _to, _to, pendingRewards, user.amount, pool.totalStaked);\\n        }\\n        /// @dev pool.totalStaked must be updated after rewarder.onReward()\\n        pool.totalStaked += finalDepositAmount;\\n        user.rewardDebt = (user.amount * pool.accBananaPerShare) / SCALING_FACTOR;\\n        emit Deposit(_to, _pid, finalDepositAmount);\\n    }\\n\\n    /// @notice Withdraw tokens from MasterApe.\\n    /// @param _pid pool id in which to make withdraw\\n    /// @param _amount amount of tokens to withdraw\\n    /// @param _to address who receives the withdrawn amount\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public nonReentrant {\\n        _updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: insufficient\\\");\\n        uint256 pendingRewards = ((user.amount * pool.accBananaPerShare) / SCALING_FACTOR) - user.rewardDebt;\\n        if (pendingRewards > 0) {\\n            _safeBananaTransfer(_to, pendingRewards);\\n        }\\n        user.amount -= _amount;\\n        // Handle onReward\\n        if (address(pool.rewarder) != address(0)) {\\n            pool.rewarder.onReward(_pid, msg.sender, _to, pendingRewards, user.amount, pool.totalStaked);\\n        }\\n        if (_amount > 0) {\\n            /// @dev pool.totalStaked must be updated after rewarder.onReward()\\n            pool.totalStaked -= _amount;\\n            pool.stakeToken.safeTransfer(_to, _amount);\\n        }\\n        user.rewardDebt = (user.amount * pool.accBananaPerShare) / SCALING_FACTOR;\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Deposits BANANA from `masterApe` MAV1 and pool `masterPid` to MAV2.\\n    /// @param _amount Amount of BANANA to add to BANANA rewards\\n    function depositBananaRewards(uint256 _amount) external nonReentrant checkEOAorWhitelist {\\n        require(_amount > 0, 'amount is 0');\\n        banana.safeTransferFrom(msg.sender, address(this), _amount);\\n        unallocatedBanana += _amount;\\n        availableBananaRewards += _amount;\\n        emit DepositBananaRewards(msg.sender, _amount);\\n    }\\n\\n    /// @notice returns all pool info\\n    function getPoolInfo(uint256 _pid)\\n        public\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            IRewarderV2 rewarder,\\n            uint256 lastRewardTime,\\n            uint256 accBananaPerShare,\\n            uint256 totalStaked,\\n            uint16 depositFeeBP\\n        )\\n    {\\n        return (\\n            address(poolInfo[_pid].stakeToken),\\n            poolInfo[_pid].allocPoint,\\n            poolInfo[_pid].rewarder,\\n            poolInfo[_pid].lastRewardTime,\\n            poolInfo[_pid].accBananaPerShare,\\n            poolInfo[_pid].totalStaked,\\n            poolInfo[_pid].depositFeeBP\\n        );\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to block.\\n    /// @param _from from what timestamp\\n    /// @param _to to what timestamp\\n    /// @return uint256\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to - _from;\\n    }\\n\\n    /// @dev Safe banana transfer function, just in case if rounding error causes pool to not have enough BANANAs.\\n    function _safeBananaTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > availableBananaRewards) {\\n            _harvestFromMasterApe();\\n        }\\n        /// @dev availableBananaRewards is updated inside harvestFromMasterApe()\\n        if (_amount > availableBananaRewards) {\\n            _amount = availableBananaRewards;\\n            availableBananaRewards = 0;\\n            banana.safeTransfer(_to, _amount);\\n        } else {\\n            availableBananaRewards -= _amount;\\n            banana.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function _updateEmissionRate(uint256 _bananaPerSecond) private {\\n        require(_bananaPerSecond <= MASTER_APE_BANANA_PER_SECOND_ESTIMATE, \\\"More than maximum rate\\\");\\n        bananaPerSecond = _bananaPerSecond;\\n        emit UpdateEmissionRate(msg.sender, _bananaPerSecond);\\n    }\\n\\n    function _updateHardCap(uint256 _hardCap) private {\\n        require(_hardCap > banana.totalSupply(), \\\"Updated cap is less than total supply\\\");\\n        hardCap = _hardCap;\\n        emit UpdateHardCap(msg.sender, _hardCap);\\n    }\\n\\n    /// @notice Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 stakeSupply = pool.totalStaked;\\n        if (stakeSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n        pool.lastRewardTime = block.timestamp;\\n        uint256 poolBanana = (multiplier * bananaPerSecond * pool.allocPoint) / totalAllocPoint;\\n        if (poolBanana == 0) return;\\n        if (poolBanana > unallocatedBanana) _harvestFromMasterApe();\\n        /// @dev BANANA hard cap and emissions will be hit at separate times. This handles the emission rate.\\n        if (banana.totalSupply() + poolBanana - unallocatedBanana > hardCap) {\\n            // This is true when assigning more rewards than possible within the bounds of the hardcap\\n            _harvestFromMasterApe();\\n            // Make sure we have the latest number for unallocatedBanana before doing any crazy stuff\\n            if (poolBanana >= unallocatedBanana) {\\n                // This can only be true if emissions stopped\\n                // (or if we are allocating more than 3.333 per second which should not be possible)\\n                // See _updateEmissionRate\\n                poolBanana = unallocatedBanana;\\n                if (bananaPerSecond != 0) {\\n                    // If we get here MasterApeV1 Emissions already stopped\\n                    // we allocate the remainder unallocatedBanana and stop emissions on MAv2\\n                    _updateEmissionRate(0);\\n                }\\n            }\\n        }\\n        /// @dev This ensures that enough rewards were harvested from MasterApeV1. This can happen when:\\n        ///  1. `MasterApeV2.bananaPerSecond()` is set too HIGH compared to `MasterApeV1.bananaPerBlock() * MasterApeV1.BONUS_MULTIPLIER()`\\n        ///  2. More BANANA rewards need to be deposited through `MasterApeV2.depositBananaRewards()`\\n        require(unallocatedBanana >= poolBanana, 'updatePool: Rewards misallocation');\\n        unallocatedBanana -= poolBanana;\\n        pool.accBananaPerShare += (poolBanana * SCALING_FACTOR) / stakeSupply;\\n        emit LogUpdatePool(_pid, pool.lastRewardTime, stakeSupply, pool.accBananaPerShare);\\n    }\\n\\n    /// @notice Harvests BANANA from `masterApe` MAV1 and pool `masterPid` to MAV2.\\n    function _harvestFromMasterApe() internal returns (uint256 newBanana) {\\n        // TEST that this works with ghost farm for this set to zero\\n        uint256 beforeBananaBal = banana.balanceOf(address(this));\\n        masterApe.deposit(masterPid, 0);\\n        newBanana = banana.balanceOf(address(this)) - beforeBananaBal;\\n        unallocatedBanana += newBanana;\\n        availableBananaRewards += newBanana;\\n\\n        uint256 bananaTotalSupply = banana.totalSupply();\\n        if (bananaTotalSupply >= hardCap && masterApe.BONUS_MULTIPLIER() > 0) {\\n            /// @dev BANANA hard cap and emissions will be hit at separate times. This handles the hard cap.\\n            masterApe.updateMultiplier(0);\\n            uint256 surplus = bananaTotalSupply - hardCap;\\n            if (availableBananaRewards >= surplus) {\\n                unallocatedBanana = unallocatedBanana > surplus ? unallocatedBanana - surplus : 0;\\n                _safeBananaTransfer(0x000000000000000000000000000000000000dEaD, surplus);\\n            } else {\\n                /// @dev These are safeguards to avoid bricking the contract\\n                /// nevertheless off-chain checks and interactions should make this case impossible\\n                /// This happens when the hard-cap block is missed by so much\\n                /// that the surplus in the dev wallet exceeds what this contract can burn by itself\\n                unallocatedBanana = 0;\\n                _safeBananaTransfer(0x000000000000000000000000000000000000dEaD, availableBananaRewards);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewarderV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarderV2 {\\n    /// @dev even if not all parameters are currently used in this implementation they help future proofing it\\n    function onReward(\\n        uint256 _pid,\\n        address _user,\\n        address _to,\\n        uint256 _pending,\\n        uint256 _stakedAmount,\\n        uint256 _lpSupply\\n    ) external;\\n\\n    /// @dev passing stakedAmount here helps future proofing the interface\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 amount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IMasterApeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@ape.swap/contracts/contracts/v0.8/interfaces/IContractWhitelist.sol\\\";\\nimport \\\"./IRewarderV2.sol\\\";\\n\\n\\ninterface IMasterApeV2 is IContractWhitelist {\\n    function updateEmissionRate(uint256 _bananaPerSecond, bool _withUpdate) external; // onlyOwner\\n\\n    function updateHardCap(uint256 _hardCap) external; // onlyOwner\\n\\n    function setFeeAddress(address _feeAddress) external; // onlyOwner\\n\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _stakeToken,\\n        bool _withUpdate,\\n        uint16 _depositFeeBP,\\n        IRewarderV2 _rewarder\\n    ) external; // onlyOwner\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        uint16 _depositFeeBP,\\n        IRewarderV2 _rewarder\\n    ) external; // onlyOwner\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external; // validatePool(_pid);\\n\\n    function depositTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external; // validatePool(_pid);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external; // validatePool(_pid);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external; // validatePool(_pid);\\n\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external; // validatePool(_pid);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function setPendingMasterApeV1Owner(address _pendingMasterApeV1Owner) external;\\n\\n    function acceptMasterApeV1Ownership() external;\\n\\n    function bananaPerSecond() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    function pendingBanana(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function getPoolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            IRewarderV2 rewarder,\\n            uint256 lastRewardBlock,\\n            uint256 accBananaPerShare,\\n            uint256 totalStaked,\\n            uint16 depositFeeBP\\n        );\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IMasterApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\ninterface IMasterApe {\\n    function transferOwnership(address newOwner) external; // from Ownable.sol\\n\\n    function updateMultiplier(uint256 multiplierNumber) external; // onlyOwner\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external; // onlyOwner\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external; // onlyOwner\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external; // validatePool(_pid);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external; // validatePool(_pid);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external; // validatePool(_pid);\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function dev(address _devaddr) external;\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function cakePerBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function checkPoolDuplicate(address _lpToken) external view;\\n\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function syrup() external view returns (address);\\n\\n    function getPoolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accCakePerShare\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@ape.swap/contracts/contracts/v0.8/interfaces/IContractWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Discord:         https://discord.com/ApeSwap\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\ninterface IContractWhitelist {\\n    function getWhitelistLength() external returns (uint256);\\n\\n    function getWhitelistAtIndex(uint256 _index) external returns (address);\\n\\n    function isWhitelisted(address _address) external returns (bool);\\n\\n    function setWhitelistEnabled(bool _enabled) external;\\n\\n    function setContractWhitelist(address _address, bool _enabled) external;\\n\\n    function setBatchContractWhitelist(address[] memory _addresses, bool[] memory _enabled) external;\\n}\\n\"\r\n    },\r\n    \"@ape.swap/contracts/contracts/v0.8/access/ContractWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n * App:             https://ApeSwap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * Discord:         https://discord.com/ApeSwap\\n * Reddit:          https://reddit.com/r/ApeSwap\\n * Instagram:       https://instagram.com/ApeSwap.finance\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IContractWhitelist.sol\\\";\\n\\nabstract contract ContractWhitelist is IContractWhitelist, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private contractWhitelistSet;\\n    /// @notice marks if a contract whitelist is enabled.\\n    bool public whitelistEnabled;\\n\\n    event UpdateWhitelistStatus(bool whitelistEnabled);\\n    event UpdateContractWhitelist(address indexed whitelistAddress, bool whitelistEnabled);\\n\\n    /// @dev checks if whitelist is enabled and if contract is whitelisted\\n    modifier checkEOAorWhitelist() {\\n        // If whitelist is enabled and sender is not EOA\\n        if (whitelistEnabled && msg.sender != tx.origin) {\\n            require(isWhitelisted(msg.sender), \\\"checkWhitelist: not in whitelist\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @notice Get the number of addresses on the whitelist\\n    function getWhitelistLength() external view virtual override returns (uint256) {\\n        return contractWhitelistSet.length();\\n    }\\n\\n    /// @notice Find the address on the whitelist of the provided index\\n    /// @param _index Index to query\\n    function getWhitelistAtIndex(uint256 _index) external view virtual override returns (address) {\\n        return contractWhitelistSet.at(_index);\\n    }\\n\\n    /// @notice Check if an address is whitelisted\\n    /// @param _address Address to query\\n    function isWhitelisted(address _address) public view virtual override returns (bool) {\\n        return contractWhitelistSet.contains(_address);\\n    }\\n\\n    /// @notice enables smart contract whitelist\\n    function setWhitelistEnabled(bool _enabled) external virtual override onlyOwner {\\n        whitelistEnabled = _enabled;\\n        emit UpdateWhitelistStatus(whitelistEnabled);\\n    }\\n\\n    /// @notice Enable or disable a contract address on the whitelist\\n    /// @param _address Address to update on whitelist\\n    /// @param _enabled Set if the whitelist is enabled or disabled\\n    function setContractWhitelist(address _address, bool _enabled) external override onlyOwner {\\n        _setContractWhitelist(_address, _enabled);\\n    }\\n\\n    /// @notice Enable or disable contract addresses on the whitelist\\n    /// @param _addresses Addressed to update on whitelist\\n    /// @param _enabled Set if the whitelist is enabled or disabled for each address passed\\n    function setBatchContractWhitelist(address[] calldata _addresses, bool[] calldata _enabled) external override onlyOwner {\\n        require(_addresses.length == _enabled.length, \\\"array mismatch\\\");\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            _setContractWhitelist(_addresses[i], _enabled[i]);\\n        }\\n    }\\n\\n    /// @notice Enable or disable a contract address on the whitelist\\n    /// @param _address Address to update on whitelist\\n    /// @param _enabled Set if the whitelist is enabled or disabled\\n    function _setContractWhitelist(address _address, bool _enabled) internal virtual {\\n        if(_enabled) {\\n            require(contractWhitelistSet.add(_address), \\\"address already enabled\\\");\\n        } else {\\n            require(contractWhitelistSet.remove(_address), \\\"address already disabled\\\");\\n        }\\n        emit UpdateContractWhitelist(_address, _enabled);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"banana_\",\"type\":\"address\"},{\"internalType\":\"contract IMasterApe\",\"name\":\"masterApe_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterPid_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bananaPerSecond_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBananaRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFee\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IRewarderV2\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFee\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IRewarderV2\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accBananaPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingMasterApeOwner\",\"type\":\"address\"}],\"name\":\"SetPendingMasterApeV1Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"UpdateContractWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bananaPerSecond\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"}],\"name\":\"UpdateHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_APE_BANANA_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_APE_BANANA_PER_SECOND_ESTIMATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMasterApeV1Ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"contract IRewarderV2\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBananaRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banana\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bananaPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBananaRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarderV2\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBananaPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFromMasterApe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterApe\",\"outputs\":[{\"internalType\":\"contract IMasterApe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBanana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMasterApeV1Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarderV2\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBananaPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"contract IRewarderV2\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_enabled\",\"type\":\"bool[]\"}],\"name\":\"setBatchContractWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setContractWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingMasterApeV1Owner\",\"type\":\"address\"}],\"name\":\"setPendingMasterApeV1Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unallocatedBanana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bananaPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"updateHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterApeV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000603c7f932ed1fc6575303d8fb018fdcbb0f39a950000000000000000000000005c8d727b265dbafaba67e050f2f739caeeb4a6f900000000000000000000000000000000000000000000000000000000000000db0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}