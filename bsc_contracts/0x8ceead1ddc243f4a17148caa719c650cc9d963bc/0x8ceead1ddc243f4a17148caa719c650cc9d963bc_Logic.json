{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Logic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\ninterface IStorage {\\n    function takeToken(uint256 amount, address token) external;\\n\\n    function returnToken(uint256 amount, address token) external;\\n\\n    function addEarn(uint256 amount) external;\\n}\\n\\ninterface IDistribution {\\n    function enterMarkets(address[] calldata vTokens) external returns (uint256[] memory);\\n\\n    function markets(address vTokenAddress)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            bool\\n        );\\n\\n    function claimVenus(address holder) external;\\n\\n    function claimVenus(address holder, address[] memory vTokens) external;\\n}\\n\\ninterface IMasterChef {\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accCakePerShare\\n        );\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function userInfo(uint256 _pid, address account) external view returns (uint256, uint256);\\n}\\n\\ninterface IVToken {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface IPancakePair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\ninterface IPancakeRouter01 {\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ncontract Logic is Ownable, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    struct ReserveLiquidity {\\n        address tokenA;\\n        address tokenB;\\n        address vTokenA;\\n        address vTokenB;\\n        address swap;\\n        address swapMaster;\\n        address lpToken;\\n        uint256 poolID;\\n        address[][] path;\\n    }\\n\\n    address private _storage;\\n    address private blid;\\n    address private admin;\\n    address private venusController;\\n    address private pancake;\\n    address private apeswap;\\n    address private biswap;\\n    address private pancakeMaster;\\n    address private apeswapMaster;\\n    address private biswapMaster;\\n    address private expenseAddress;\\n    address private vBNB;\\n    mapping(address => bool) private usedVTokens;\\n    mapping(address => address) private VTokens;\\n\\n    ReserveLiquidity[] reserves;\\n\\n    event SetAdmin(address admin);\\n    event SetBLID(address _blid);\\n    event SetStorage(address _storage);\\n\\n    constructor(\\n        address _expenseAddress,\\n        address _venusController,\\n        address _pancakeRouter,\\n        address _apeswapRouter,\\n        address _biswapRouter,\\n        address _pancakeMaster,\\n        address _apeswapMaster,\\n        address _biswapMaster\\n    ) {\\n        expenseAddress = _expenseAddress;\\n        venusController = _venusController;\\n\\n        apeswap = _apeswapRouter;\\n        pancake = _pancakeRouter;\\n        biswap = _biswapRouter;\\n        pancakeMaster = _pancakeMaster;\\n        apeswapMaster = _apeswapMaster;\\n        biswapMaster = _biswapMaster;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    modifier onlyOwnerAndAdmin() {\\n        require(msg.sender == owner() || msg.sender == admin, \\\"E1\\\");\\n        _;\\n    }\\n\\n    modifier onlyStorage() {\\n        require(msg.sender == _storage, \\\"E1\\\");\\n        _;\\n    }\\n\\n    modifier isUsedVToken(address vToken) {\\n        require(usedVTokens[vToken], \\\"E2\\\");\\n        _;\\n    }\\n\\n    modifier isUsedSwap(address swap) {\\n        require(swap == apeswap || swap == pancake || swap == biswap, \\\"E3\\\");\\n        _;\\n    }\\n\\n    modifier isUsedMaster(address swap) {\\n        require(swap == pancakeMaster || apeswapMaster == swap || biswapMaster == swap, \\\"E4\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add VToken in Contract and approve token  for storage, venus,\\n     * pancakeswap/apeswap router, and pancakeswap/apeswap master(Main Staking contract)\\n     * @param token Address of Token for deposited\\n     * @param vToken Address of VToken\\n     */\\n    function addVTokens(address token, address vToken) external onlyOwner {\\n        bool _isUsedVToken;\\n        (_isUsedVToken, , ) = IDistribution(venusController).markets(vToken);\\n        require(_isUsedVToken, \\\"E5\\\");\\n        if ((token) != address(0)) {\\n            IERC20(token).approve(vToken, type(uint256).max);\\n            IERC20(token).approve(apeswap, type(uint256).max);\\n            IERC20(token).approve(pancake, type(uint256).max);\\n            IERC20(token).approve(biswap, type(uint256).max);\\n            IERC20(token).approve(_storage, type(uint256).max);\\n            IERC20(token).approve(pancakeMaster, type(uint256).max);\\n            IERC20(token).approve(apeswapMaster, type(uint256).max);\\n            IERC20(token).approve(biswapMaster, type(uint256).max);\\n            VTokens[token] = vToken;\\n        } else {\\n            vBNB = vToken;\\n        }\\n        usedVTokens[vToken] = true;\\n    }\\n\\n    /**\\n     * @notice Set blid in contract and approve blid for storage, venus, pancakeswap/apeswap\\n     * router, and pancakeswap/apeswap master(Main Staking contract), you can call the\\n     * function once\\n     * @param blid_ Adrees of BLID\\n     */\\n    function setBLID(address blid_) external onlyOwner {\\n        require(blid == address(0), \\\"E6\\\");\\n        blid = blid_;\\n        IERC20(blid).safeApprove(apeswap, type(uint256).max);\\n        IERC20(blid).safeApprove(pancake, type(uint256).max);\\n        IERC20(blid).safeApprove(biswap, type(uint256).max);\\n        IERC20(blid).safeApprove(pancakeMaster, type(uint256).max);\\n        IERC20(blid).safeApprove(apeswapMaster, type(uint256).max);\\n        IERC20(blid).safeApprove(biswapMaster, type(uint256).max);\\n        IERC20(blid).safeApprove(_storage, type(uint256).max);\\n        emit SetBLID(blid_);\\n    }\\n\\n    /**\\n     * @notice Set storage, you can call the function once\\n     * @param storage_ Addres of Storage Contract\\n     */\\n    function setStorage(address storage_) external onlyOwner {\\n        require(_storage == address(0), \\\"E7\\\");\\n        _storage = storage_;\\n        emit SetStorage(storage_);\\n    }\\n\\n    /**\\n     * @notice Approve token for storage, venus, pancakeswap/apeswap router,\\n     * and pancakeswap/apeswap master(Main Staking contract)\\n     * @param token  Address of Token that is approved\\n     */\\n    function approveTokenForSwap(address token) external onlyOwner {\\n        (IERC20(token).approve(apeswap, type(uint256).max));\\n        (IERC20(token).approve(pancake, type(uint256).max));\\n        (IERC20(token).approve(biswap, type(uint256).max));\\n        (IERC20(token).approve(pancakeMaster, type(uint256).max));\\n        (IERC20(token).approve(apeswapMaster, type(uint256).max));\\n        (IERC20(token).approve(biswapMaster, type(uint256).max));\\n    }\\n\\n    /**\\n     * @notice Frees up tokens for the user, but Storage doesn't transfer token for the user,\\n     * only Storage can this function, after calling this function Storage transfer\\n     * from Logic to user token.\\n     * @param amount Amount of token\\n     * @param token Address of token\\n     */\\n    function returnToken(uint256 amount, address token) external payable onlyStorage {\\n        uint256 takeFromVenus = 0;\\n        uint256 length = reserves.length;\\n        //check logic balance\\n        if (IERC20(token).balanceOf(address(this)) >= amount) {\\n            return;\\n        }\\n        //loop by reserves lp token\\n        for (uint256 i = 0; i < length; i++) {\\n            address[] memory path = findPath(i, token); // get path for router\\n            ReserveLiquidity memory reserve = reserves[i];\\n            uint256 lpAmount = getPriceFromTokenToLp(\\n                reserve.lpToken,\\n                amount - takeFromVenus,\\n                token,\\n                reserve.swap,\\n                path\\n            ); //get amount of lp token that need for reedem liqudity\\n\\n            //get how many deposited to farming\\n            (uint256 depositedLp, ) = IMasterChef(reserve.swapMaster).userInfo(reserve.poolID, address(this));\\n            if (depositedLp == 0) continue;\\n            // if deposited LP tokens don't enough  for repay borrow and for reedem token then only repay\\n            // borow and continue loop, else repay borow, reedem token and break loop\\n            if (lpAmount >= depositedLp) {\\n                takeFromVenus += getPriceFromLpToToken(\\n                    reserve.lpToken,\\n                    depositedLp,\\n                    token,\\n                    reserve.swap,\\n                    path\\n                );\\n                withdrawAndRepay(reserve, depositedLp);\\n            } else {\\n                withdrawAndRepay(reserve, lpAmount);\\n\\n                // get supplied token and break loop\\n                IVToken(VTokens[token]).redeemUnderlying(amount);\\n                return;\\n            }\\n        }\\n        //try get supplied token\\n        IVToken(VTokens[token]).redeemUnderlying(amount);\\n        //if get money\\n        if (IERC20(token).balanceOf(address(this)) >= amount) {\\n            return;\\n        }\\n        revert(\\\"no money\\\");\\n    }\\n\\n    /**\\n     * @notice Set admin\\n     * @param newAdmin Addres of new admin\\n     */\\n    function setAdmin(address newAdmin) external onlyOwner {\\n        admin = newAdmin;\\n        emit SetAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @notice Transfer amount of token from Storage to Logic contract token - address of the token\\n     * @param amount Amount of token\\n     * @param token Address of token\\n     */\\n    function takeTokenFromStorage(uint256 amount, address token) external onlyOwnerAndAdmin {\\n        IStorage(_storage).takeToken(amount, token);\\n    }\\n\\n    /**\\n     * @notice Transfer amount of token from Logic to Storage contract token - address of token\\n     * @param amount Amount of token\\n     * @param token Address of token\\n     */\\n    function returnTokenToStorage(uint256 amount, address token) external onlyOwnerAndAdmin {\\n        IStorage(_storage).returnToken(amount, token);\\n    }\\n\\n    /**\\n     * @notice Distribution amount of blid to depositors.\\n     * @param amount Amount of BLID\\n     */\\n    function addEarnToStorage(uint256 amount) external onlyOwnerAndAdmin {\\n        IERC20(blid).safeTransfer(expenseAddress, (amount * 3) / 100);\\n        IStorage(_storage).addEarn((amount * 97) / 100);\\n    }\\n\\n    /**\\n     * @notice Enter into a list of markets(address of VTokens) - it is not an\\n     * error to enter the same market more than once.\\n     * @param vTokens The addresses of the vToken markets to enter.\\n     * @return For each market, returns an error code indicating whether or not it was entered.\\n     * Each is 0 on success, otherwise an Error code\\n     */\\n    function enterMarkets(address[] calldata vTokens) external onlyOwnerAndAdmin returns (uint256[] memory) {\\n        return IDistribution(venusController).enterMarkets(vTokens);\\n    }\\n\\n    /**\\n     * @notice Every Venus user accrues XVS for each block\\n     * they are supplying to or borrowing from the protocol.\\n     * @param vTokens The addresses of the vToken markets to enter.\\n     */\\n    function claimVenus(address[] calldata vTokens) external onlyOwnerAndAdmin {\\n        IDistribution(venusController).claimVenus(address(this), vTokens);\\n    }\\n\\n    /**\\n     * @notice Stake token and mint VToken\\n     * @param vToken: that mint Vtokens to this contract\\n     * @param mintAmount: The amount of the asset to be supplied, in units of the underlying asset.\\n     * @return 0 on success, otherwise an Error code\\n     */\\n    function mint(address vToken, uint256 mintAmount)\\n        external\\n        isUsedVToken(vToken)\\n        onlyOwnerAndAdmin\\n        returns (uint256)\\n    {\\n        if (vToken == vBNB) {\\n            IVToken(vToken).mint{ value: mintAmount }();\\n        }\\n        return IVToken(vToken).mint(mintAmount);\\n    }\\n\\n    /**\\n     * @notice The borrow function transfers an asset from the protocol to the user and creates a\\n     * borrow balance which begins accumulating interest based on the Borrow Rate for the asset.\\n     * The amount borrowed must be less than the user's Account Liquidity and the market's\\n     * available liquidity.\\n     * @param vToken: that mint Vtokens to this contract\\n     * @param borrowAmount: The amount of underlying to be borrow.\\n     * @return 0 on success, otherwise an Error code\\n     */\\n    function borrow(address vToken, uint256 borrowAmount)\\n        external\\n        payable\\n        isUsedVToken(vToken)\\n        onlyOwnerAndAdmin\\n        returns (uint256)\\n    {\\n        return IVToken(vToken).borrow(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice The repay function transfers an asset into the protocol, reducing the user's borrow balance.\\n     * @param vToken: that mint Vtokens to this contract\\n     * @param repayAmount: The amount of the underlying borrowed asset to be repaid.\\n     * A value of -1 (i.e. 2256 - 1) can be used to repay the full amount.\\n     * @return 0 on success, otherwise an Error code\\n     */\\n    function repayBorrow(address vToken, uint256 repayAmount)\\n        external\\n        isUsedVToken(vToken)\\n        onlyOwnerAndAdmin\\n        returns (uint256)\\n    {\\n        if (vToken == vBNB) {\\n            IVToken(vToken).repayBorrow{ value: repayAmount }();\\n            return 0;\\n        }\\n        return IVToken(vToken).repayBorrow(repayAmount);\\n    }\\n\\n    /**\\n     * @notice The redeem underlying function converts vTokens into a specified quantity of the\\n     * underlying asset, and returns them to the user.\\n     * The amount of vTokens redeemed is equal to the quantity of underlying tokens received,\\n     * divided by the current Exchange Rate.\\n     * The amount redeemed must be less than the user's Account Liquidity and the market's\\n     * available liquidity.\\n     * @param vToken: that mint Vtokens to this contract\\n     * @param redeemAmount: The amount of underlying to be redeemed.\\n     * @return 0 on success, otherwise an Error code\\n     */\\n    function redeemUnderlying(address vToken, uint256 redeemAmount)\\n        external\\n        isUsedVToken(vToken)\\n        onlyOwnerAndAdmin\\n        returns (uint256)\\n    {\\n        return IVToken(vToken).redeemUnderlying(redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to a BEP20\u21c4BEP20 pool.\\n     * @param swap Address of swap router\\n     * @param tokenA The contract address of one token from your liquidity pair.\\n     * @param tokenB The contract address of the other token from your liquidity pair.\\n     * @param amountADesired The amount of tokenA you'd like to provide as liquidity.\\n     * @param amountBDesired The amount of tokenA you'd like to provide as liquidity.\\n     * @param amountAMin The minimum amount of tokenA to provide (slippage impact).\\n     * @param amountBMin The minimum amount of tokenB to provide (slippage impact).\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function addLiquidity(\\n        address swap,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline\\n    )\\n        external\\n        isUsedSwap(swap)\\n        onlyOwnerAndAdmin\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountADesired, amountBDesired, amountAMin) = IPancakeRouter01(swap).addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        return (amountADesired, amountBDesired, amountAMin);\\n    }\\n\\n    /**\\n     * @notice Removes liquidity from a BEP20\u21c4BEP20 pool.\\n     * @param swap Address of swap router\\n     * @param tokenA The contract address of one token from your liquidity pair.\\n     * @param tokenB The contract address of the other token from your liquidity pair.\\n     * @param liquidity The amount of LP Tokens to remove.\\n     * @param amountAMin he minimum amount of tokenA to provide (slippage impact).\\n     * @param amountBMin The minimum amount of tokenB to provide (slippage impact).\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function removeLiquidity(\\n        address swap,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256 deadline\\n    ) external onlyOwnerAndAdmin isUsedSwap(swap) returns (uint256 amountA, uint256 amountB) {\\n        (amountAMin, amountBMin) = IPancakeRouter01(swap).removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        return (amountAMin, amountBMin);\\n    }\\n\\n    /**\\n     * @notice Receive an as many output tokens as possible for an exact amount of input tokens.\\n     * @param swap Address of swap router\\n     * @param amountIn TPayable amount of input tokens.\\n     * @param amountOutMin The minimum amount tokens to receive.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapExactTokensForTokens(\\n        address swap,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible.\\n     * @param swap Address of swap router\\n     * @param amountOut Payable amount of input tokens.\\n     * @param amountInMax The minimum amount tokens to input.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapTokensForExactTokens(\\n        address swap,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external onlyOwnerAndAdmin isUsedSwap(swap) returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapTokensForExactTokens(\\n                amountOut,\\n                amountInMax,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to a BEP20\u21c4WBNB pool.\\n     * @param swap Address of swap router\\n     * @param token The contract address of one token from your liquidity pair.\\n     * @param amountTokenDesired The amount of the token you'd like to provide as liquidity.\\n     * @param amountETHDesired The minimum amount of the token to provide (slippage impact).\\n     * @param amountTokenMin The minimum amount of token to provide (slippage impact).\\n     * @param amountETHMin The minimum amount of BNB to provide (slippage impact).\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function addLiquidityETH(\\n        address swap,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountETHDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n    )\\n        external\\n        isUsedSwap(swap)\\n        onlyOwnerAndAdmin\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountETHDesired, amountTokenMin, amountETHMin) = IPancakeRouter01(swap).addLiquidityETH{\\n            value: amountETHDesired\\n        }(token, amountTokenDesired, amountTokenMin, amountETHMin, address(this), deadline);\\n\\n        return (amountETHDesired, amountTokenMin, amountETHMin);\\n    }\\n\\n    /**\\n     * @notice Removes liquidity from a BEP20\u21c4WBNB pool.\\n     * @param swap Address of swap router\\n     * @param token The contract address of one token from your liquidity pair.\\n     * @param liquidity The amount of LP Tokens to remove.\\n     * @param amountTokenMin The minimum amount of the token to remove (slippage impact).\\n     * @param amountETHMin The minimum amount of BNB to remove (slippage impact).\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function removeLiquidityETH(\\n        address swap,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline\\n    ) external payable isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256 amountToken, uint256 amountETH) {\\n        (deadline, amountETHMin) = IPancakeRouter01(swap).removeLiquidityETH(\\n            token,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        return (deadline, amountETHMin);\\n    }\\n\\n    /**\\n     * @notice Receive as many output tokens as possible for an exact amount of BNB.\\n     * @param swap Address of swap router\\n     * @param amountETH Payable BNB amount.\\n     * @param amountOutMin \\tThe minimum amount tokens to input.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapExactETHForTokens(\\n        address swap,\\n        uint256 amountETH,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapExactETHForTokens{ value: amountETH }(\\n                amountOutMin,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible.\\n     * @param swap Address of swap router\\n     * @param amountOut Payable BNB amount.\\n     * @param amountInMax The minimum amount tokens to input.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapTokensForExactETH(\\n        address swap,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapTokensForExactETH(\\n                amountOut,\\n                amountInMax,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Receive as much BNB as possible for an exact amount of input tokens.\\n     * @param swap Address of swap router\\n     * @param amountIn Payable amount of input tokens.\\n     * @param amountOutMin The maximum amount tokens to input.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapExactTokensForETH(\\n        address swap,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapExactTokensForETH(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Receive an exact amount of output tokens for as little BNB as possible.\\n     * @param swap Address of swap router\\n     * @param amountOut The amount tokens to receive.\\n     * @param amountETH Payable BNB amount.\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\n     */\\n    function swapETHForExactTokens(\\n        address swap,\\n        uint256 amountETH,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external isUsedSwap(swap) onlyOwnerAndAdmin returns (uint256[] memory amounts) {\\n        return\\n            IPancakeRouter01(swap).swapETHForExactTokens{ value: amountETH }(\\n                amountOut,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @notice Deposit LP tokens to Master\\n     * @param swapMaster Address of swap master(Main staking contract)\\n     * @param _pid pool id\\n     * @param _amount amount of lp token\\n     */\\n    function deposit(\\n        address swapMaster,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external isUsedMaster(swapMaster) onlyOwnerAndAdmin {\\n        IMasterChef(swapMaster).deposit(_pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens from Master\\n     * @param swapMaster Address of swap master(Main staking contract)\\n     * @param _pid pool id\\n     * @param _amount amount of lp token\\n     */\\n    function withdraw(\\n        address swapMaster,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external isUsedMaster(swapMaster) onlyOwnerAndAdmin {\\n        IMasterChef(swapMaster).withdraw(_pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake BANANA/Cake tokens to STAKING.\\n     * @param swapMaster Address of swap master(Main staking contract)\\n     * @param _amount amount of lp token\\n     */\\n    function enterStaking(address swapMaster, uint256 _amount)\\n        external\\n        isUsedMaster(swapMaster)\\n        onlyOwnerAndAdmin\\n    {\\n        IMasterChef(swapMaster).enterStaking(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw BANANA/Cake tokens from STAKING.\\n     * @param swapMaster Address of swap master(Main staking contract)\\n     * @param _amount amount of lp token\\n     */\\n    function leaveStaking(address swapMaster, uint256 _amount)\\n        external\\n        isUsedMaster(swapMaster)\\n        onlyOwnerAndAdmin\\n    {\\n        IMasterChef(swapMaster).leaveStaking(_amount);\\n    }\\n\\n    /**\\n     * @notice Add reserve staked lp token to end list\\n     * @param reserveLiquidity Data is about staked lp in farm\\n     */\\n    function addReserveLiquidity(ReserveLiquidity memory reserveLiquidity) external onlyOwnerAndAdmin {\\n        reserves.push(reserveLiquidity);\\n    }\\n\\n    /**\\n     * @notice Delete last ReserveLiquidity from list of ReserveLiquidity\\n     */\\n    function deleteLastReserveLiquidity() external onlyOwnerAndAdmin {\\n        reserves.pop();\\n    }\\n\\n    /**\\n     * @notice Return count reserves staked lp tokens for return users their tokens.\\n     */\\n    function getReservesCount() external view returns (uint256) {\\n        return reserves.length;\\n    }\\n\\n    /**\\n     * @notice Return reserves staked lp tokens for return user their tokens. return ReserveLiquidity\\n     */\\n    function getReserve(uint256 id) external view returns (ReserveLiquidity memory) {\\n        return reserves[id];\\n    }\\n\\n    /*** Prive Function ***/\\n\\n    /**\\n     * @notice Repay borrow when in farms  erc20 and BNB\\n     */\\n    function repayBorrowBNBandToken(\\n        address swap,\\n        address tokenB,\\n        address VTokenA,\\n        address VTokenB,\\n        uint256 lpAmount\\n    ) private {\\n        (uint256 amountToken, uint256 amountETH) = IPancakeRouter01(swap).removeLiquidityETH(\\n            tokenB,\\n            lpAmount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 1 days\\n        );\\n        {\\n            uint256 totalBorrow = IVToken(VTokenA).borrowBalanceCurrent(address(this));\\n            if (totalBorrow >= amountETH) {\\n                IVToken(VTokenA).repayBorrow{ value: amountETH }();\\n            } else {\\n                IVToken(VTokenA).repayBorrow{ value: totalBorrow }();\\n            }\\n\\n            totalBorrow = IVToken(VTokenB).borrowBalanceCurrent(address(this));\\n            if (totalBorrow >= amountToken) {\\n                IVToken(VTokenB).repayBorrow(amountToken);\\n            } else {\\n                IVToken(VTokenB).repayBorrow(totalBorrow);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay borrow when in farms only erc20\\n     */\\n    function repayBorrowOnlyTokens(\\n        address swap,\\n        address tokenA,\\n        address tokenB,\\n        address VTokenA,\\n        address VTokenB,\\n        uint256 lpAmount\\n    ) private {\\n        (uint256 amountA, uint256 amountB) = IPancakeRouter01(swap).removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            lpAmount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 1 days\\n        );\\n        {\\n            uint256 totalBorrow = IVToken(VTokenA).borrowBalanceCurrent(address(this));\\n            if (totalBorrow >= amountA) {\\n                IVToken(VTokenA).repayBorrow(amountA);\\n            } else {\\n                IVToken(VTokenA).repayBorrow(totalBorrow);\\n            }\\n\\n            totalBorrow = IVToken(VTokenB).borrowBalanceCurrent(address(this));\\n            if (totalBorrow >= amountB) {\\n                IVToken(VTokenB).repayBorrow(amountB);\\n            } else {\\n                IVToken(VTokenB).repayBorrow(totalBorrow);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw lp token from farms and repay borrow\\n     */\\n    function withdrawAndRepay(ReserveLiquidity memory reserve, uint256 lpAmount) private {\\n        IMasterChef(reserve.swapMaster).withdraw(reserve.poolID, lpAmount);\\n        if (reserve.tokenA == address(0) || reserve.tokenB == address(0)) {\\n            //if tokenA is BNB\\n            if (reserve.tokenA == address(0)) {\\n                repayBorrowBNBandToken(\\n                    reserve.swap,\\n                    reserve.tokenB,\\n                    reserve.vTokenA,\\n                    reserve.vTokenB,\\n                    lpAmount\\n                );\\n            }\\n            //if tokenB is BNB\\n            else {\\n                repayBorrowBNBandToken(\\n                    reserve.swap,\\n                    reserve.tokenA,\\n                    reserve.vTokenB,\\n                    reserve.vTokenA,\\n                    lpAmount\\n                );\\n            }\\n        }\\n        //if token A and B is not BNB\\n        else {\\n            repayBorrowOnlyTokens(\\n                reserve.swap,\\n                reserve.tokenA,\\n                reserve.tokenB,\\n                reserve.vTokenA,\\n                reserve.vTokenB,\\n                lpAmount\\n            );\\n        }\\n    }\\n\\n    /*** Prive View Function ***/\\n    /**\\n     * @notice Convert Lp Token To Token\\n     */\\n    function getPriceFromLpToToken(\\n        address lpToken,\\n        uint256 value,\\n        address token,\\n        address swap,\\n        address[] memory path\\n    ) private view returns (uint256) {\\n        //make price returned not affected by slippage rate\\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\\n        address token0 = IPancakePair(lpToken).token0();\\n        uint256 totalTokenAmount = IERC20(token0).balanceOf(lpToken) * (2);\\n        uint256 amountIn = (value * totalTokenAmount) / (totalSupply);\\n\\n        if (amountIn == 0 || token0 == token) {\\n            return amountIn;\\n        }\\n\\n        uint256[] memory price = IPancakeRouter01(swap).getAmountsOut(amountIn, path);\\n        return price[price.length - 1];\\n    }\\n\\n    /**\\n     * @notice Convert Token To Lp Token\\n     */\\n    function getPriceFromTokenToLp(\\n        address lpToken,\\n        uint256 value,\\n        address token,\\n        address swap,\\n        address[] memory path\\n    ) private view returns (uint256) {\\n        //make price returned not affected by slippage rate\\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\\n        address token0 = IPancakePair(lpToken).token0();\\n        uint256 totalTokenAmount = IERC20(token0).balanceOf(lpToken);\\n\\n        if (token0 == token) {\\n            return (value * (totalSupply)) / (totalTokenAmount) / 2;\\n        }\\n\\n        uint256[] memory price = IPancakeRouter01(swap).getAmountsOut((1 gwei), path);\\n        return (value * (totalSupply)) / ((price[price.length - 1] * 2 * totalTokenAmount) / (1 gwei));\\n    }\\n\\n    /**\\n     * @notice FindPath for swap router\\n     */\\n    function findPath(uint256 id, address token) private view returns (address[] memory path) {\\n        ReserveLiquidity memory reserve = reserves[id];\\n        uint256 length = reserve.path.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (reserve.path[i][reserve.path[i].length - 1] == token) {\\n                return reserve.path[i];\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expenseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_venusController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeswapMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biswapMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blid\",\"type\":\"address\"}],\"name\":\"SetBLID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"SetStorage\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addEarnToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address[][]\",\"name\":\"path\",\"type\":\"address[][]\"}],\"internalType\":\"struct Logic.ReserveLiquidity\",\"name\":\"reserveLiquidity\",\"type\":\"tuple\"}],\"name\":\"addReserveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"addVTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveTokenForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"claimVenus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteLastReserveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReserve\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address[][]\",\"name\":\"path\",\"type\":\"address[][]\"}],\"internalType\":\"struct Logic.ReserveLiquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnTokenToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blid_\",\"type\":\"address\"}],\"name\":\"setBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"takeTokenFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Logic", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc70f9e663f4b79de2dafed45eb524fe1356ac3e000000000000000000000000fd36e2c2a6789db23113685031d7f1632915838400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b70000000000000000000000003a6d8ca21d1cf76f653a67577fa0d27453350dd8000000000000000000000000a5f8c5dbd5f286960b9d90548680ae5ebff076520000000000000000000000005c8d727b265dbafaba67e050f2f739caeeb4a6f9000000000000000000000000dbc1a13490deef9c3c12b44fe77b503c1b061739", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x8ceead1ddc243f4a17148caa719c650cc9d963bc", "SwarmSource": ""}