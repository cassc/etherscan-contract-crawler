{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract AdvanceStorage{\r\n    address public admin;\r\n    address public implementation;\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract AdvanceStorageV1 is AdvanceStorage{\r\n\r\n    struct Record{\r\n        address beInvited;\r\n        uint256 time;\r\n    }\r\n\r\n    struct User{\r\n        bool    whetherStaking;\r\n        uint256 stakingTime;\r\n        uint256 inviterNum;\r\n        address inviter;\r\n        uint256 income;\r\n    }\r\n\r\n    mapping(address => Record[]) public recordInfos;\r\n    mapping(address => User) public userInfo;\r\n    address public stakingToken;\r\n    address public earningToken;\r\n    address public dead;\r\n    uint256 public baseRate;\r\n    uint256 public stakingBase;\r\n\r\n}\r\n\r\ncontract AdvancePledage is AdvanceStorageV1{\r\n    constructor(){\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(admin == msg.sender,\"Caller is not admin\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _staking) external onlyAdmin(){\r\n        dead = 0xC67FBfc1Ad9580ed0ab8232c71b2E075BB709155;\r\n        stakingToken = _staking;\r\n        baseRate = 10e18;\r\n        stakingBase = 1e17;\r\n    }\r\n\r\n    function setAddress(address _staking,address _earning) external onlyAdmin(){\r\n        stakingToken = _staking;\r\n        earningToken = _earning;\r\n    }\r\n\r\n    function setBase(uint256 _baseRate,uint256 _stakingBase) external onlyAdmin(){\r\n        baseRate = _baseRate;\r\n        stakingBase = _stakingBase;\r\n    }\r\n\r\n    function emergency(address token,address to) external  onlyAdmin(){\r\n         (bool success,bytes memory data) = token.staticcall(abi.encodeWithSelector(0x70a08231,address(this)));\r\n        require(success,\"Recharge: failed to get balance.\");\r\n        uint256 amount = abi.decode(data, (uint256));\r\n        if(amount > 0) TransferHelper.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    function getUserInviteRecords(address _user) external view returns (Record[] memory){\r\n        return recordInfos[_user];\r\n    }\r\n\r\n    function bind(address _inviter) external{\r\n        User storage user = userInfo[msg.sender];\r\n        require(user.inviter == address(0),\"Duplicate binding is not allowed\");\r\n        user.inviter = _inviter;\r\n    }\r\n\r\n    function provide() external {\r\n        User storage user = userInfo[msg.sender];\r\n        require(user.inviter != address(0),\"Invalid inviter address\");\r\n        require(user.whetherStaking != true,\"Duplicate staking is not allowed\");\r\n        TransferHelper.safeTransferFrom(stakingToken, msg.sender, dead, stakingBase);\r\n        user.whetherStaking = true;\r\n        user.stakingTime = block.timestamp;\r\n        updateSuperior(msg.sender);\r\n    }\r\n\r\n    function updateSuperior(address _beInvited) internal{\r\n        User memory user = userInfo[_beInvited];\r\n        recordInfos[user.inviter].push(Record(_beInvited,block.timestamp));\r\n        updateIncome(user.inviter);\r\n        userInfo[user.inviter].inviterNum++;\r\n    }\r\n\r\n    function updateIncome(address _upper) internal {\r\n        uint256 _income = getUserIncome(_upper);\r\n        userInfo[_upper].income = _income;\r\n        userInfo[_upper].stakingTime = block.timestamp;\r\n    }\r\n\r\n    function getUserIncome(address _user) public view returns(uint256 _income){\r\n        User memory user = userInfo[_user];\r\n        if(user.whetherStaking != false){\r\n            uint256 addBaseRate = baseRate + user.inviterNum * 1e18;\r\n            _income = (block.timestamp - user.stakingTime) * (addBaseRate / 86400) + user.income;\r\n        }\r\n    }\r\n\r\n    function withdraw(address _user,uint256 _amount) external{\r\n        uint256 _income = getUserIncome(_user);\r\n        require(_income >= _amount, \"Invalid withdraw amount\");\r\n        updateIncome(_user);\r\n        userInfo[_user].income -= _amount;\r\n        TransferHelper.safeTransfer(earningToken, _user, _amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_income\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInviteRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beInvited\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct AdvanceStorageV1.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recordInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beInvited\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earning\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingBase\",\"type\":\"uint256\"}],\"name\":\"setBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whetherStaking\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdvancePledage", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80bc4af0d0e47c62e9dfceae31aa16a0c0ab9e1e8eae7cc51837ab85fc5f0ea3"}