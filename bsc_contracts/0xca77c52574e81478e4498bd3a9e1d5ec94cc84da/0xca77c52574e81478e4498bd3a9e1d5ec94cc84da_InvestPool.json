{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IRoleContract {\r\n    \r\n    function getRoleNumber(address _user) external view returns (uint256);\r\n\r\n    function getAmounts(address _user) external view returns (uint256, uint256);\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary TransferHelper {\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\r\n        );\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\r\n        );\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n\r\n    function safeGetDecimals(\r\n        address token\r\n    ) internal returns (uint8) {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        require(success && data.length != 0, 'TF');\r\n        return abi.decode(data, (uint8));\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract InvestPool is Ownable {\r\n    uint256 public constant MAX_FEE = 1000;\r\n    IRoleContract public immutable rolesContract;\r\n    address public immutable lpToken;\r\n    address public immutable paymentToken;\r\n    address public immutable fundrisingWallet;\r\n\r\n    uint256 public baseFee;\r\n    uint256 public price;\r\n    uint256 public maxAmountToSell;\r\n    uint256 public alreadySold;\r\n    uint256 public totalPaymentTokenSpended;\r\n    uint256 public totalPaymentTokenSpendedWithoutFee;\r\n    uint256 public totalLPDeposited;\r\n\r\n    mapping(address => uint256) public alreadyBought;\r\n\r\n    struct RoleSettings {\r\n        uint256 startTime;\r\n        uint256 deadline;\r\n        uint256 roleFee;\r\n        uint256 maxAmountToSellForRole;\r\n        uint256 soldAmountForThisRole;\r\n        uint256 totalAmountOfPaymentTokenSpended;\r\n    }\r\n\r\n    mapping(uint256 => RoleSettings) public roleSettings;\r\n\r\n    struct RoleSettingsSetter {\r\n        uint256 roleNumber;\r\n        uint256 startTime;\r\n        uint256 deadline;\r\n        uint256 roleFee;\r\n        uint256 maxAmountToSellForRole;\r\n    }\r\n\r\n    address public manager;\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager || msg.sender == owner(), \"OM\");\r\n        _;\r\n    }\r\n\r\n    event RoleSettingsChanged(uint256 roleNumber, uint256 startTime, uint256 deadline, uint256 roleFee, uint256 maxAmountToSellForRole);\r\n    event Purchased(address user, uint256 lpAmount, uint256 costInPaymentToken, uint256 costInPaymentTokenWithFee);\r\n\r\n    constructor(\r\n        address _LPtoken,\r\n        address _rolesContract,\r\n        address _paymentToken,\r\n        address _fundrisingWallet,\r\n        uint256 _baseFee,\r\n        uint256 _price,\r\n        uint256 _maxAmountToSell,\r\n        address _manager,\r\n        RoleSettingsSetter[] memory _roleSettings\r\n    ) {\r\n        require(_baseFee <= MAX_FEE, \"FTH\");\r\n        require(IERC20Metadata(_paymentToken).decimals() == 6, \"NSC\");\r\n\r\n        lpToken = _LPtoken;\r\n        rolesContract = IRoleContract(_rolesContract);\r\n        \r\n        paymentToken = _paymentToken;\r\n        fundrisingWallet = _fundrisingWallet;\r\n\r\n        baseFee = _baseFee;\r\n        price = _price;\r\n        maxAmountToSell = _maxAmountToSell;\r\n        manager = _manager;\r\n\r\n        setRoleSettings(_roleSettings);\r\n    }\r\n\r\n    function buyLP(uint256 lpTokenAmount) external {\r\n        uint256 userRoleNum = rolesContract.getRoleNumber(msg.sender);\r\n        (uint256 minAmountForRole, uint256 maxAmountForRole) = rolesContract.getAmounts(msg.sender);\r\n        RoleSettings storage userRole = roleSettings[userRoleNum];\r\n        uint8 lpTokenDecimals = IERC20Metadata(lpToken).decimals();\r\n        uint256 paymentTokenAmountWithoutFee = lpTokenAmount * price * 10000 / 10**lpTokenDecimals;\r\n        uint256 paymentTokenAmount = paymentTokenAmountWithoutFee * (1000 + (userRole.roleFee == 0 ? baseFee : userRole.roleFee)) / 1000;\r\n        \r\n        require(paymentTokenAmountWithoutFee > 0 && paymentTokenAmountWithoutFee + alreadyBought[msg.sender] >= minAmountForRole, \"IA\");\r\n        require(paymentTokenAmountWithoutFee + alreadyBought[msg.sender] <= maxAmountForRole, \"KP\");\r\n        require(block.timestamp >= userRole.startTime && block.timestamp <= userRole.deadline, \"TE\");\r\n        require(userRole.soldAmountForThisRole + lpTokenAmount <= userRole.maxAmountToSellForRole, \"RR\");\r\n        require(alreadySold + lpTokenAmount <= maxAmountToSell, \"LT\");\r\n\r\n        TransferHelper.safeTransferFrom(paymentToken, msg.sender, fundrisingWallet, paymentTokenAmount);\r\n\r\n        alreadyBought[msg.sender] += paymentTokenAmountWithoutFee;\r\n        userRole.soldAmountForThisRole += lpTokenAmount;\r\n        alreadySold += lpTokenAmount;\r\n        totalPaymentTokenSpended += paymentTokenAmount;\r\n        totalPaymentTokenSpendedWithoutFee += paymentTokenAmountWithoutFee;\r\n        userRole.totalAmountOfPaymentTokenSpended += paymentTokenAmount;\r\n\r\n        TransferHelper.safeTransfer(lpToken, msg.sender, lpTokenAmount);\r\n\r\n        emit Purchased(msg.sender, lpTokenAmount, paymentTokenAmountWithoutFee, paymentTokenAmount);\r\n    }\r\n\r\n    function setMaxAmountToSell(uint256 _maxAmountToSell) external onlyManager {\r\n        maxAmountToSell = _maxAmountToSell;\r\n    }\r\n\r\n    function setRoleSettings(\r\n        RoleSettingsSetter[] memory _roleSettings\r\n    ) public onlyManager {\r\n        for (uint256 i = 0; i < _roleSettings.length; i++) {\r\n            require(_roleSettings[i].roleFee <= MAX_FEE, \"FTH\");\r\n            roleSettings[_roleSettings[i].roleNumber].startTime = _roleSettings[i].startTime;\r\n            roleSettings[_roleSettings[i].roleNumber].deadline = _roleSettings[i].deadline;\r\n            roleSettings[_roleSettings[i].roleNumber].roleFee = _roleSettings[i].roleFee;\r\n            roleSettings[_roleSettings[i].roleNumber].maxAmountToSellForRole = _roleSettings[i].maxAmountToSellForRole;\r\n            emit RoleSettingsChanged(\r\n                _roleSettings[i].roleNumber,\r\n                _roleSettings[i].startTime,\r\n                _roleSettings[i].deadline,\r\n                _roleSettings[i].roleFee,\r\n                _roleSettings[i].maxAmountToSellForRole\r\n            );\r\n        }\r\n    }\r\n\r\n    function setPrice(uint256 _price) external onlyManager {\r\n        price = _price;\r\n    }\r\n\r\n    function setBaseFee(uint256 _baseFee) public onlyManager {\r\n        require(_baseFee <= MAX_FEE, \"FTH\");\r\n        baseFee = _baseFee;\r\n    }\r\n\r\n    function updateSettings(\r\n        RoleSettingsSetter[] memory _roleSettings,\r\n        uint256 _price,\r\n        uint256 _baseFee,\r\n        uint256 _maxAmountToSell\r\n    ) external onlyManager {\r\n        setRoleSettings(_roleSettings);\r\n        price = _price;\r\n        setBaseFee(_baseFee);\r\n        maxAmountToSell = _maxAmountToSell;\r\n    }\r\n\r\n    function depositLPtoken(uint256 _amount) external onlyManager {\r\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\r\n        totalLPDeposited += _amount;\r\n    }\r\n\r\n    function withdrawLPtoken(address _to, uint256 _amount) external onlyManager {\r\n        TransferHelper.safeTransfer(lpToken, _to, _amount);\r\n        if (totalLPDeposited >= _amount) {\r\n            totalLPDeposited -= _amount;\r\n        } else {\r\n            totalLPDeposited = 0;\r\n        }\r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner {\r\n        manager = _manager;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rolesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundrisingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToSellForRole\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestPool.RoleSettingsSetter[]\",\"name\":\"_roleSettings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costInPaymentToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costInPaymentTokenWithFee\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roleFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountToSellForRole\",\"type\":\"uint256\"}],\"name\":\"RoleSettingsChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alreadySold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositLPtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundrisingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToSellForRole\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldAmountForThisRole\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfPaymentTokenSpended\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesContract\",\"outputs\":[{\"internalType\":\"contract IRoleContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountToSell\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToSellForRole\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestPool.RoleSettingsSetter[]\",\"name\":\"_roleSettings\",\"type\":\"tuple[]\"}],\"name\":\"setRoleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaymentTokenSpended\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaymentTokenSpendedWithoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToSellForRole\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestPool.RoleSettingsSetter[]\",\"name\":\"_roleSettings\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToSell\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InvestPool", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002c024cb8df572b4deecf095b0e7fbb94504286b6000000000000000000000000ede302063f8a330bddbec131d0cf433de3878029000000000000000000000000b9dd167f2f072f6b0143cdac3e11915deca4f46500000000000000000000000037be2ace5c698605f0635951077ee077eb8afc6900000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000002a5a058fc295ed00000000000000000000000000000037be2ace5c698605f0635951077ee077eb8afc690000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064d5dc700000000000000000000000000000000000000000000000000000000064eaf470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054b40b1f852bda0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000064d5dc700000000000000000000000000000000000000000000000000000000064f42ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052b7d2cee7561f3c9c0000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://167f4002195a2a1049ed93b4fe6983bff2778afac2c974f23b8f528c2173f1fc"}