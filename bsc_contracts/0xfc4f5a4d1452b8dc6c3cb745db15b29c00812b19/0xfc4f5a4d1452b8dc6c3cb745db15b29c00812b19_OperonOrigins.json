{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.0;\r\n\r\n//-----------------------------------------------------------------------------//\r\n//                             Name : Operon Origins                           //\r\n//                           Symbol : ORO                                      //\r\n//                     Total Supply : 100,000,000                              //\r\n//                        Liquidity : 10,000,000                               //\r\n//                        Marketing : 23,500,000                               //\r\n//                          Reserve : 17,000,000                               //\r\n//                             Team : 15,000,000                               //\r\n//                         Partners : 5,000,000                                //\r\n//                        SeedRound : 7,500,000                                //\r\n//                             Priv : 16,000,000                               //\r\n//                           Public : 4,000,000                                //\r\n//\t\t\t                    KOL : 2,000,000                                //\r\n//-----------------------------------------------------------------------------//\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n \r\nabstract contract IBUSD{\r\n    function transferFrom(address, address, uint256) public virtual returns(bool);\r\n    function transfer(address, uint256) public pure virtual returns(bool);\r\n }\r\n \r\n \r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ncontract LGEWhitelisted is Context {\r\n    struct WhitelistRound {\r\n        uint256 duration;\r\n        uint256 amountMax;\r\n        mapping(address => bool) addresses;\r\n        mapping(address => uint256) purchased;\r\n    }\r\n\r\n    WhitelistRound[] public _lgeWhitelistRounds;\r\n\r\n    uint256 public _lgeTimestamp;\r\n    address public _lgePairAddress;\r\n\r\n    address public _whitelister;\r\n\r\n    event WhitelisterTransferred(address indexed previousWhitelister, address indexed newWhitelister);\r\n\r\n    constructor() public {\r\n        _whitelister = _msgSender();\r\n    }\r\n\r\n    modifier onlyWhitelister() {\r\n        require(_whitelister == _msgSender(), \"Caller is not the whitelister\");\r\n        _;\r\n    }\r\n\r\n    function renounceWhitelister() external onlyWhitelister {\r\n        emit WhitelisterTransferred(_whitelister, address(0));\r\n        _whitelister = address(0);\r\n    }\r\n\r\n    function transferWhitelister(address newWhitelister) external onlyWhitelister {\r\n        _transferWhitelister(newWhitelister);\r\n    }\r\n\r\n    function _transferWhitelister(address newWhitelister) internal {\r\n        require(newWhitelister != address(0), \"New whitelister is the zero address\");\r\n        emit WhitelisterTransferred(_whitelister, newWhitelister);\r\n        _whitelister = newWhitelister;\r\n    }\r\n\r\n    /*\r\n     * createLGEWhitelist - Call this after initial Token Generation Event (TGE)\r\n     *\r\n     * pairAddress - address generated from createPair() event on DEX\r\n     * durations - array of durations (seconds) for each whitelist rounds\r\n     * amountsMax - array of max amounts (TOKEN decimals) for each whitelist round\r\n     *\r\n     */\r\n\r\n    function createLGEWhitelist(\r\n        address pairAddress,\r\n        uint256[] calldata durations,\r\n        uint256[] calldata amountsMax\r\n    ) external onlyWhitelister() {\r\n        require(durations.length == amountsMax.length, \"Invalid whitelist(s)\");\r\n\r\n        _lgePairAddress = pairAddress;\r\n\r\n        if (durations.length > 0) {\r\n            delete _lgeWhitelistRounds;\r\n\r\n            for (uint256 i = 0; i < durations.length; i++) {\r\n                WhitelistRound storage whitelistRound = _lgeWhitelistRounds.push();\r\n                whitelistRound.duration = durations[i];\r\n                whitelistRound.amountMax = amountsMax[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * modifyLGEWhitelistAddresses - Define what addresses are included/excluded from a whitelist round\r\n     *\r\n     * index - 0-based index of round to modify whitelist\r\n     * duration - period in seconds from LGE event or previous whitelist round\r\n     * amountMax - max amount (TOKEN decimals) for each whitelist round\r\n     *\r\n     */\r\n\r\n    function modifyLGEWhitelist(\r\n        uint256 index,\r\n        uint256 duration,\r\n        uint256 amountMax,\r\n        address[] calldata addresses,\r\n        bool enabled\r\n    ) external onlyWhitelister() {\r\n        require(index < _lgeWhitelistRounds.length, \"Invalid index\");\r\n        require(amountMax > 0, \"Invalid amountMax\");\r\n\r\n        if (duration != _lgeWhitelistRounds[index].duration) _lgeWhitelistRounds[index].duration = duration;\r\n\r\n        if (amountMax != _lgeWhitelistRounds[index].amountMax) _lgeWhitelistRounds[index].amountMax = amountMax;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _lgeWhitelistRounds[index].addresses[addresses[i]] = enabled;\r\n        }\r\n    }\r\n\r\n    /*\r\n     *  getLGEWhitelistRound\r\n     *\r\n     *  returns:\r\n     *\r\n     *  1. whitelist round number ( 0 = no active round now )\r\n     *  2. duration, in seconds, current whitelist round is active for\r\n     *  3. timestamp current whitelist round closes at\r\n     *  4. maximum amount a whitelister can purchase in this round\r\n     *  5. is caller whitelisted\r\n     *  6. how much caller has purchased in current whitelist round\r\n     *\r\n     */\r\n\r\n    function getLGEWhitelistRound()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256\r\n        )\r\n    {\r\n        if (_lgeTimestamp > 0) {\r\n            uint256 wlCloseTimestampLast = _lgeTimestamp;\r\n\r\n            for (uint256 i = 0; i < _lgeWhitelistRounds.length; i++) {\r\n                WhitelistRound storage wlRound = _lgeWhitelistRounds[i];\r\n\r\n                wlCloseTimestampLast = wlCloseTimestampLast + wlRound.duration;\r\n                if (block.timestamp <= wlCloseTimestampLast)\r\n                    return (\r\n                        i + 1,\r\n                        wlRound.duration,\r\n                        wlCloseTimestampLast,\r\n                        wlRound.amountMax,\r\n                        wlRound.addresses[_msgSender()],\r\n                        wlRound.purchased[_msgSender()]\r\n                    );\r\n            }\r\n        }\r\n\r\n        return (0, 0, 0, 0, false, 0);\r\n    }\r\n\r\n    /*\r\n     * _applyLGEWhitelist - internal function to be called initially before any transfers\r\n     *\r\n     */\r\n\r\n    function _applyLGEWhitelist(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (_lgePairAddress == address(0) || _lgeWhitelistRounds.length == 0) return;\r\n\r\n        if (_lgeTimestamp == 0 && sender != _lgePairAddress && recipient == _lgePairAddress && amount > 0)\r\n            _lgeTimestamp = block.timestamp;\r\n\r\n        if (sender == _lgePairAddress && recipient != _lgePairAddress) {\r\n            //buying\r\n\r\n            (uint256 wlRoundNumber, , , , , ) = getLGEWhitelistRound();\r\n\r\n            if (wlRoundNumber > 0) {\r\n                WhitelistRound storage wlRound = _lgeWhitelistRounds[wlRoundNumber - 1];\r\n\r\n                require(wlRound.addresses[recipient], \"LGE - Buyer is not whitelisted\");\r\n\r\n                uint256 amountRemaining = 0;\r\n\r\n                if (wlRound.purchased[recipient] < wlRound.amountMax)\r\n                    amountRemaining = wlRound.amountMax - wlRound.purchased[recipient];\r\n\r\n                require(amount <= amountRemaining, \"LGE - Amount exceeds whitelist maximum\");\r\n                wlRound.purchased[recipient] = wlRound.purchased[recipient] + amount;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract OperonOrigins is IBEP20, LGEWhitelisted  {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    //variable declaration\r\n    address private _owner;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    // Special business use case variables\r\n    mapping (address => bool) _whitelistedAddress;\r\n    mapping (address => uint256) _lockingTimeForSale;\r\n    mapping (address => uint256) _recordSale;\r\n    mapping (address => bool) _addressLocked;\r\n    mapping (address => uint256) _finalSoldAmount;\r\n    mapping (address => mapping(uint256 => bool)) reEntrance;\r\n    mapping (address => uint256) specialAddBal;\r\n    mapping (address => uint256) _contributionBUSD;\r\n    mapping (address => mapping(uint256 => uint256)) _claimedByUser;\r\n    mapping (address =>mapping(uint256 => uint256))_thisSaleContribution;\r\n    mapping (address => uint) _multiplier;\r\n    \r\n    address[] private _whitelistedUserAddresses;\r\n    uint256 private saleStartTime;\r\n    uint256 private saleEndTime;\r\n    uint256 private saleMinimumAmount;\r\n    uint256 private saleMaximumAmount;\r\n    uint256 private saleId = 0;\r\n    uint256 private tokenPrice;\r\n    uint256 private deploymentTime; \r\n    uint256 private pricePerToken;\r\n    uint256 private hardCap;\r\n    uint256 private decimalBalancer = 1000000000;\r\n    uint256 private IDOAvailable;\r\n    address public _BUSDAddress;\r\n    uint256 public BUSDPrice;\r\n    bool whitelistFlag = true;\r\n    address private Reserve = 0xc6BBb38478861ff1eA4A729e79DAffa20ad5A18E;\r\n    address private Marketing = 0x7cF44E816070f4E3471F770dF5E4Bde8efB9a0B4;\r\n    address private Team = 0xa67A04b3a6fBF6771c301CcE85b52BbA9e4F504B;\r\n    address private Liquidity = 0x5ecc23447d6669B0139DAbE6E515B9830e0A058B;\r\n    address private Partners = 0x675f640a5c00C875059AF359004F2EA11bA60fC2;\r\n    address private SeedRound = 0x9826DDE3c8529930B92D1068C5d2991f6D648908;\r\n    address private Priv = 0x0AfbBA0CF312Bdee57689ffFfF177cd041B8dB93;\r\n    address private Public = 0x218f8E5f83964e24b1a139482fb080dE820b05F7;\r\n    address private KOL = 0x20c4A785B387bf01456e326dEb11721950fE5a56;\r\n    \r\n    constructor () public {\r\n        _name = \"Operon Origins\";\r\n        _symbol = \"ORO\";\r\n        _owner = msg.sender;\r\n        _totalSupply = 100000000*(10**uint256(_decimals));\r\n        _balances[_owner] = _totalSupply;\r\n        _addressLocked[Reserve] = true;\r\n        _addressLocked[Marketing] = true;\r\n        _addressLocked[Team] = true;\r\n        _addressLocked[Liquidity] = true;\r\n         deploymentTime =  block.timestamp;\r\n         initiateValues();\r\n    }\r\n    \r\n    function initiateValues() internal {\r\n        specialAddBal[Reserve] = 17000000*(10**uint256(_decimals));\r\n        specialAddBal[Marketing] = 23500000*(10**uint256(_decimals));\r\n        specialAddBal[Team] = 15000000*(10**uint256(_decimals));\r\n        specialAddBal[Liquidity] = 10000000*(10**uint256(_decimals));\r\n        specialAddBal[Partners] = 5000000*(10**uint256(_decimals));\r\n        specialAddBal[SeedRound] = 7500000*(10**uint256(_decimals));\r\n        specialAddBal[Priv] = 16000000 *(10**uint256(_decimals));\r\n        specialAddBal[Public] = 4000000 *(10**uint256(_decimals));\r\n        specialAddBal[KOL] = 2000000 *(10**uint256(_decimals));\r\n\r\n        _transfer(_owner,Reserve,specialAddBal[Reserve]);\r\n        _transfer(_owner,Marketing,specialAddBal[Marketing]);\r\n        _transfer(_owner,Team,specialAddBal[Team]); \r\n        _transfer(_owner,Liquidity,specialAddBal[Liquidity]);  \r\n        _transfer(_owner,Partners,specialAddBal[Partners]);  \r\n        _transfer(_owner,SeedRound,specialAddBal[SeedRound]);  \r\n        _transfer(_owner,Priv,specialAddBal[Priv]);\r\n        _transfer(_owner,Public,specialAddBal[Public]);\r\n        _transfer(_owner,KOL,specialAddBal[KOL]);\r\n        \r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * View only functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public  override view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * Transfer, allow and burn functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    //check if special address or not\r\n    modifier checkLockedAddresses(address _lockedAddresses){\r\n           require(_addressLocked[_lockedAddresses] != true, \"Locking Address\");\r\n       _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public  override checkLockedAddresses(msg.sender) returns (bool) {\r\n            _transfer(msg.sender, to, value);\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public override checkLockedAddresses(from) returns (bool) {\r\n             _transfer(from, to, value);\r\n             _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n             return true;\r\n    }\r\n\r\n     /**\r\n      * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n      * @param _addresses array of address in serial order\r\n      * @param _amount amount in serial order with respect to address array\r\n      */\r\n      function airdropByOwner(address[]  calldata _addresses, uint256[]  calldata _amount) external onlyOwner returns (bool){\r\n          require(_addresses.length == _amount.length,\"Invalid Array\");\r\n          uint256 count = _addresses.length;\r\n          uint256 airdropcount = 0;\r\n          for (uint256 i = 0; i < count; i++){\r\n               _transfer(msg.sender, _addresses[i], _amount[i]);\r\n               airdropcount = airdropcount.add(1);\r\n          }\r\n          return true;\r\n      }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0),\"Invalid to address\");\r\n        _applyLGEWhitelist(from, to, value);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external  override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0),\"Invalid address\");\r\n        require(owner != address(0),\"Invalid address\");\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0),\"Invalid account\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) external onlyOwner{\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) external onlyOwner returns (bool){\r\n        require(newOwner != address(0), \"Owner address cant be zero\");\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     *  Functions for Additional Business Logic For Owner Functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    //Set TGE Time\r\n    function setTGE(uint256 _deploymentTime) external onlyOwner returns(bool){\r\n        deploymentTime = _deploymentTime;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev withdraw special locked tokens for internal team \r\n     */\r\n    function withdrawSpecialLocked(address _toAddress, uint256 _amount) checkLockingRoles(msg.sender, _amount) external returns(bool){\r\n       _transfer(msg.sender, _toAddress, _amount);\r\n        specialAddBal[msg.sender] = specialAddBal[msg.sender].sub(_amount);\r\n    }\r\n    \r\n    /*\r\n     * @dev Admin can withdraw the bnb  \r\n     */\r\n    function withdrawCurrency(uint256 _amount) external onlyOwner returns(bool){\r\n        msg.sender.transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    //check contract block.timestamp time \r\n    function checkContractTime() external view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    // to check locked tokens for marketing address, Reserve, Liquidity and Team  \r\n    modifier checkLockingRoles(address _add, uint256 _amountRequested){\r\n        require(_add == Reserve || _add == Marketing || _add == Team || _add == Liquidity , \"Only for Special Addresses\");\r\n        require(_amountRequested != 0, \"amount should be greater than 0\");\r\n       if(_add == Reserve){\r\n           require(block.timestamp > deploymentTime+47335374, \"Tokens are locked for 18 months from TGE\");\r\n         }\r\n       if(_add == Marketing){\r\n           if(block.timestamp > deploymentTime + 3600 && block.timestamp < deploymentTime + 2629743){                                            // First month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 22325000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 2629743 && block.timestamp < deploymentTime + 5259486){                                         // Second month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 21150000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 5259486 && block.timestamp < deploymentTime + 7889229){                                         // Third month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 19975000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 7889229 && block.timestamp < deploymentTime + 10518972){                                        // Fourth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 18800000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 10518972 && block.timestamp < deploymentTime + 13148715){                                       // Fifth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 17625000000000000000000000, \"Amount exceded lock 5\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 13148715 && block.timestamp < deploymentTime + 15778458){                                       // Sixth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 16450000000000000000000000, \"Amount exceded lock 6\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 15778458 && block.timestamp < deploymentTime + 18408201){                                       // Seventh month from the deployment & 5% \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 15275000000000000000000000, \"Amount exceded lock 7\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 18408201 && block.timestamp < deploymentTime + 21037944){                                       // Eighth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 14100000000000000000000000, \"Amount exceded lock 8\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 21037944 && block.timestamp < deploymentTime + 23667687){                                       // Ninth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 12925000000000000000000000, \"Amount exceded lock 9\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 23667687 && block.timestamp < deploymentTime + 26297430){                                       // Tenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 11750000000000000000000000, \"Amount exceded lock 10\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 26297430 && block.timestamp < deploymentTime + 28927173){                                        // Evenenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 10575000000000000000000000, \"Amount exceded lock 11\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 28927173 && block.timestamp < deploymentTime + 31556916){                                        // Twelveth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 9400000000000000000000000, \"Amount exceded lock 12\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 31556916 && block.timestamp < deploymentTime + 34186659){                                        // Thirteen month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 8225000000000000000000000, \"Amount exceded lock 13\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 34186659 && block.timestamp < deploymentTime + 36816402){                                       // Fourteen month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 7050000000000000000000000, \"Amount exceded lock 14\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 36816402 && block.timestamp < deploymentTime + 39446145){                                       // Fifteenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 5875000000000000000000000, \"Amount exceded lock 15\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 39446145 && block.timestamp < deploymentTime + 42075888){                                       // Sixteenth month from the deployment & 5% \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 4700000000000000000000000, \"Amount exceded lock 16\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 42075888 && block.timestamp < deploymentTime + 44705631){                                       // Seventeenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 3525000000000000000000000, \"Amount exceded lock 17\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 44705631 && block.timestamp < deploymentTime + 47335374){                                       // Eighteenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 2350000000000000000000000, \"Amount exceded lock 18\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 47335374 && block.timestamp < deploymentTime + 49965117){                                       // Nineteenth month from the deployment & 5%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1175000000000000000000000, \"Amount exceded lock 19\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 49965117){                      \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 0, \"Amount exceded lock 20\");\r\n           }\r\n           else{\r\n               require(block.timestamp > deploymentTime + 3600,\"Unlock time not reached\");\r\n           }\r\n         }\r\n       if(_add == Team){\r\n           if(block.timestamp > deploymentTime + 31556916 && block.timestamp < deploymentTime + 34186659){                                      \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 12000000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 34186659 && block.timestamp < deploymentTime + 36816402){                                     \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 9000000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 36816402 && block.timestamp < deploymentTime + 39446145){                                    \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 6000000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 39446145 && block.timestamp < deploymentTime + 42075888){                                       \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 3000000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 42075888){                                       \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 0, \"Amount exceded lock 4\");\r\n           }\r\n           else{\r\n               require(block.timestamp > deploymentTime + 31556916,\"Unlock time not reached\");\r\n           }\r\n         }\r\n\r\n         if(_add == Liquidity){\r\n             if(block.timestamp > deploymentTime && block.timestamp < deploymentTime + 2629743){                                                    \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 9000000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 2629743 && block.timestamp < deploymentTime + 5259486){                                        \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 8000000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 5259486 && block.timestamp < deploymentTime + 7889229){                                         \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 7000000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 7889229 && block.timestamp < deploymentTime + 10518972){                                          \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 6000000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 10518972 && block.timestamp < deploymentTime + 13148715){                                           \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 5000000000000000000000000, \"Amount exceded lock 5\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 13148715 && block.timestamp < deploymentTime + 15778458){                                            \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 4000000000000000000000000, \"Amount exceded lock 6\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 15778458 && block.timestamp < deploymentTime + 18408201){                                            \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 3000000000000000000000000, \"Amount exceded lock 7\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 18408201 && block.timestamp < deploymentTime + 21037944){                                            \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 2000000000000000000000000, \"Amount exceded lock 8\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 21037944 && block.timestamp < deploymentTime + 23667687){                                            \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1000000000000000000000000, \"Amount exceded lock 9\");\r\n           }\r\n         }\r\n        _;\r\n     }\r\n     \r\n    function withdrawPeningTokens(uint256 _amount, uint256 _contractAdd) external onlyOwner returns(bool){\r\n       IBUSD iBUSD;\r\n       iBUSD = IBUSD(_contractAdd);\r\n       iBUSD.transfer(msg.sender, _amount);\r\n       return true;\r\n         \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"WhitelisterTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BUSDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lgePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lgeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lgeWhitelistRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whitelister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkContractTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsMax\",\"type\":\"uint256[]\"}],\"name\":\"createLGEWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLGEWhitelistRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"modifyLGEWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentTime\",\"type\":\"uint256\"}],\"name\":\"setTGE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"transferWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractAdd\",\"type\":\"uint256\"}],\"name\":\"withdrawPeningTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSpecialLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperonOrigins", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38423c496af90bbeedf9f78f372f8431e611bd6a3da91f017da1b312ae179043"}