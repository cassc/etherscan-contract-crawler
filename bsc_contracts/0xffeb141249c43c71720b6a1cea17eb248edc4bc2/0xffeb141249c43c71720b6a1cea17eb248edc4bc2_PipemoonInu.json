{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pipemoon.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\n// tg: https://t.me/pipemoon_game\\n\\npragma solidity 0.8.19;\\n\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; \\n    return msg.data;\\n  }\\n}\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  \\n  event Approval(address indexed owner,address indexed spender,uint256 value);\\n}\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(\\n      address(this).balance >= amount,\\n      \\\"Address: insufficient balance\\\"\\n    );\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n      data\\n    );\\n    if (success) {\\n      return returndata;\\n    } else {\\n      if (returndata.length > 0) {\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\\ncontract Ownable is Context {\\n  address private _owner;\\n  address private _previousOwner;\\n  uint256 private _lockTime;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  function renounceOwnership() external virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership(address newOwner) external virtual onlyOwner {\\n    require(\\n      newOwner != address(0),\\n      \\\"Ownable: new owner is the zero address\\\"\\n    );\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n\\n  function getUnlockTime() public view returns (uint256) {\\n    return _lockTime;\\n  }\\n\\n  function getTime() public view returns (uint256) {\\n    return block.timestamp;\\n  }\\n}\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves() external view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\\ncontract PipemoonInu is Context, IERC20, Ownable {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  address payable public marketingAddress = payable(0xc87a0a9A35822cC30b3BD89Fc78A8D63cF6A6c03); // Marketing Address\\n  address payable public teamAddress      = payable(0xd3B857E270C1C31E9410CAf800cbCFd0B60555Fe); // Team Address\\n  address payable public liquidityAddress = payable(0xc87a0a9A35822cC30b3BD89Fc78A8D63cF6A6c03); // Liquidity Address\\n      \\n  address public immutable deadAddress    = 0x000000000000000000000000000000000000dEaD; // dead address\\n      \\n  mapping(address => uint256) private _rOwned;\\n  mapping(address => uint256) private _tOwned;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  mapping(address => bool) private _isExcludedFromFee;\\n  mapping(address => bool) private _isExcluded;\\n  address[] private _excluded;\\n\\n  bool private _lastBuyBlockEnabled;\\n  mapping(address => uint256) private lastBuyBlock;\\n  \\n  uint256 private constant MAX = ~uint256(0);\\n  uint256 private constant _tTotal = 100_000_000_000_000 * 1e18;\\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n  uint256 private _tFeeTotal;\\n\\n  bool public limitsInEffect = true;\\n  \\n  string private constant _name = \\\"Pipemoon Inu\\\";\\n  string private constant _symbol = \\\"PMI\\\";\\n  uint8 private constant _decimals = 18;\\n  \\n  uint256 private constant BUY = 1;\\n  uint256 private constant SELL = 2;\\n  uint256 private constant TRANSFER = 3;\\n  uint256 private buyOrSellSwitch;\\n\\n  uint256 private _taxFee;\\n  uint256 private _previousTaxFee = _taxFee;\\n\\n  uint256 private _liquidityFee;\\n  uint256 private _previousLiquidityFee = _liquidityFee;\\n\\n  uint256 public _buyTaxFee = 1;\\n  uint256 public _buyLiquidityFee = 0;\\n  uint256 public _buyMarketingFee = 3;\\n  uint256 public _buyTeamFee = 3;\\n\\n  uint256 public _sellTaxFee = 1;\\n  uint256 public _sellLiquidityFee = 0;\\n  uint256 public _sellMarketingFee = 4;\\n  uint256 public _sellTeamFee = 4;\\n  \\n  uint256 public tradingActiveBlock = 0; // 0 means trading is not active\\n  uint256 public earlyBuyPenaltyEnd; \\n  \\n  uint256 private _liquidityTokensToSwap;\\n  uint256 private _marketingTokensToSwap;\\n  uint256 private _teamTokensToSwap;\\n  \\n  bool private gasLimitActive = true;\\n  uint256 private gasPriceLimit = 100 * 1 gwei; \\n  uint256 private gasMaxLimit =  50000000; \\n  \\n  uint256 public maxTransactionAmount;\\n  uint256 public maxWallet;\\n\\n  mapping (address => bool) public _isExcludedMaxTransactionAmount;\\n  \\n  mapping (address => bool) public automatedMarketMakerPairs;\\n\\n  uint256 private minimumTokensBeforeSwap = _tTotal * 10 / 10000; // 0.1%\\n\\n  IUniswapV2Router02 public uniswapV2Router;\\n  address public uniswapV2Pair;\\n\\n  bool inSwapAndLiquify;\\n  bool public swapAndLiquifyEnabled = false;\\n  bool public tradingActive = false;\\n\\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\\n  event SwapAndLiquify(\\n    uint256 tokensSwapped,\\n    uint256 ethReceived,\\n    uint256 tokensIntoLiquidity\\n  );\\n\\n  event SwapETHForTokens(uint256 amountIn, address[] path);\\n  event SwapTokensForETH(uint256 amountIn, address[] path);\\n  event SetAutomatedMarketMakerPair(address pair, bool value);\\n  event ExcludeFromReward(address excludedAddress); \\n  event IncludeInReward(address includedAddress);\\n  event ExcludeFromFee(address excludedAddress);\\n  event IncludeInFee(address includedAddress);\\n  event SetBuyFee(uint256 marketingFee, uint256 liquidityFee, uint256 reflectFee, uint256 buybackFee);\\n  event SetSellFee(uint256 marketingFee, uint256 liquidityFee, uint256 reflectFee, uint256 buybackFee);\\n  event TransferForeignToken(address token, uint256 amount);\\n  event UpdatedMarketingAddress(address marketing);\\n  event UpdatedLiquidityAddress(address liquidity);\\n  event UpdatedTeamAddress(address buyback);\\n  event OwnerForcedSwapBack(uint256 timestamp);\\n  event RemovedSniper(address indexed notsnipersupposedly);\\n  event UpdatedRouter(address indexed newrouter);\\n  \\n  modifier lockTheSwap() {\\n    inSwapAndLiquify = true;\\n    _;\\n    inSwapAndLiquify = false;\\n  }\\n\\n  constructor() {\\n    _rOwned[_msgSender()] = _rTotal;\\n\\n    maxTransactionAmount = _tTotal * 10 / 1000; \\n    maxWallet = _tTotal * 10 / 1000; \\n\\n    _lastBuyBlockEnabled = false;\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n      0x10ED43C718714eb63d5aA57B78B54704E256024E\\n    );\\n\\n    address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n      .createPair(address(this), _uniswapV2Router.WETH());\\n\\n    uniswapV2Router = _uniswapV2Router;\\n    uniswapV2Pair = _uniswapV2Pair;\\n\\n    _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n    _isExcludedFromFee[owner()] = true;\\n    _isExcludedFromFee[address(this)] = true;\\n    _isExcludedFromFee[marketingAddress] = true;\\n    _isExcludedFromFee[liquidityAddress] = true;\\n    _isExcludedFromFee[teamAddress] = true;\\n\\n    excludeFromMaxTransaction(owner(), true);\\n    excludeFromMaxTransaction(address(this), true);\\n    excludeFromMaxTransaction(deadAddress, true);\\n\\n    emit Transfer(address(0), _msgSender(), _tTotal);\\n\\n    enableTrading();\\n  }\\n\\n  function name() external pure returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() external pure returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() external pure returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function totalSupply() external pure override returns (uint256) {\\n    return _tTotal;\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    if (_isExcluded[account]) return _tOwned[account];\\n    return tokenFromReflection(_rOwned[account]);\\n  }\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(\\n          amount,\\n          \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].add(addedValue)\\n    );\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function isExcludedFromReward(address account) external view returns (bool) {\\n    return _isExcluded[account];\\n  }\\n\\n  function totalFees() external view returns (uint256) {\\n    return _tFeeTotal;\\n  }\\n    \\n  function enableTrading() public onlyOwner {\\n    tradingActive = true;\\n    swapAndLiquifyEnabled = true;\\n    tradingActiveBlock = block.number;\\n  }\\n\\n  function minimumTokensBeforeSwapAmount() external view returns (uint256) {\\n    return minimumTokensBeforeSwap;\\n  }\\n  \\n  function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n    require(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n    _setAutomatedMarketMakerPair(pair, value);\\n  }\\n\\n  function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n    automatedMarketMakerPairs[pair] = value;\\n    excludeFromMaxTransaction(pair, value);\\n    if(value){excludeFromReward(pair);}\\n    if(!value){includeInReward(pair);}\\n    emit SetAutomatedMarketMakerPair(pair, value);\\n  }\\n    \\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\\n    require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n    if (!deductTransferFee) {\\n      (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n      return rAmount;\\n    } else {\\n      (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\n      return rTransferAmount;\\n    }\\n  }\\n\\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\n    require(\\n      rAmount <= _rTotal,\\n      \\\"Amount must be less than total reflections\\\"\\n    );\\n    uint256 currentRate = _getRate();\\n    return rAmount.div(currentRate);\\n  }\\n\\n  function excludeFromReward(address account) public onlyOwner {\\n    require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n    require(_excluded.length + 1 <= 50, \\\"Cannot exclude more than 50 accounts.  Include a previously excluded address.\\\");\\n    if (_rOwned[account] > 0) {\\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n    }\\n    _isExcluded[account] = true;\\n    _excluded.push(account);\\n  }\\n\\n  function includeInReward(address account) public onlyOwner {\\n    require(_isExcluded[account], \\\"Account is not excluded\\\");\\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (_excluded[i] == account) {\\n        _excluded[i] = _excluded[_excluded.length - 1];\\n        _tOwned[account] = 0;\\n        _isExcluded[account] = false;\\n        _excluded.pop();\\n        break;\\n      }\\n    }\\n  }\\n    \\n  function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\\n    _isExcludedMaxTransactionAmount[updAds] = isEx;\\n  }\\n \\n  function _approve(address owner, address spender, uint256 amount) private {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _transfer(address from, address to, uint256 amount) private {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        \\n    if(!tradingActive){\\n      require( _isExcludedFromFee[from] || _isExcludedFromFee[to], \\\"Trading is not currently active.\\\");\\n    }\\n\\n    if(limitsInEffect){\\n      if (\\n        from != owner() &&\\n        to != owner() &&\\n        to != address(0) &&\\n        to != address(0xdead) &&\\n        !inSwapAndLiquify\\n      ){\\n        //only on buys\\n        if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\n          require(amount <= maxTransactionAmount, \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\");\\n          require(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded.\\\");\\n        }\\n      }\\n    }\\n        \\n    uint256 totalTokensToSwap = _liquidityTokensToSwap + _marketingTokensToSwap + _teamTokensToSwap;\\n    uint256 contractTokenBalance = balanceOf(address(this));\\n    bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\\n\\n    if (\\n      !inSwapAndLiquify &&\\n      swapAndLiquifyEnabled &&\\n      balanceOf(uniswapV2Pair) > 0 &&\\n      totalTokensToSwap > 0 &&\\n      !_isExcludedFromFee[to] &&\\n      !_isExcludedFromFee[from] &&\\n      automatedMarketMakerPairs[to] &&\\n      overMinimumTokenBalance\\n    ) {\\n      swapBack();\\n    }\\n\\n    bool takeFee = true;\\n\\n    if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n      takeFee = false;\\n      buyOrSellSwitch = TRANSFER;\\n    } else {\\n      // Buy\\n      if (automatedMarketMakerPairs[from]) {\\n        // antibot\\n        lastBuyBlock[to] = block.number; \\n\\n        removeAllFee();\\n        _taxFee = _buyTaxFee;\\n        _liquidityFee = _buyLiquidityFee + _buyMarketingFee + _buyTeamFee;\\n        buyOrSellSwitch = BUY;\\n      } \\n      // Sell\\n      else if (automatedMarketMakerPairs[to]) {\\n        // anti bot\\n        if (_lastBuyBlockEnabled && block.number == lastBuyBlock[from]) { \\n          revert('Anti bot system'); \\n        }\\n\\n        removeAllFee();\\n        _taxFee = _sellTaxFee;\\n        _liquidityFee = _sellLiquidityFee + _sellMarketingFee + _sellTeamFee;\\n        buyOrSellSwitch = SELL;\\n\\n      } else {\\n        removeAllFee();\\n        buyOrSellSwitch = TRANSFER;\\n      }\\n    }\\n\\n    _tokenTransfer(from, to, amount, takeFee);\\n        \\n  }\\n\\n  function swapBack() private lockTheSwap {\\n    uint256 contractBalance = balanceOf(address(this));\\n    \\n    uint256 totalTokensToSwap = _liquidityTokensToSwap.add(_teamTokensToSwap).add(_marketingTokensToSwap);\\n    \\n    uint256 tokensForLiquidity = _liquidityTokensToSwap.div(2);\\n    uint256 amountToSwapForBNB = contractBalance.sub(tokensForLiquidity);\\n    \\n    uint256 initialBNBBalance = address(this).balance;\\n\\n    swapTokensForBNB(amountToSwapForBNB); \\n    \\n    uint256 bnbBalance = address(this).balance.sub(initialBNBBalance);\\n    \\n    uint256 bnbForMarketing = bnbBalance.mul(_marketingTokensToSwap).div(totalTokensToSwap);\\n    uint256 bnbForTeam = bnbBalance.mul(_teamTokensToSwap).div(totalTokensToSwap);\\n    \\n    uint256 bnbForLiquidity = bnbBalance.sub(bnbForMarketing).sub(bnbForTeam);\\n\\n    _liquidityTokensToSwap = 0;\\n    _marketingTokensToSwap = 0;\\n    _teamTokensToSwap = 0;\\n    \\n    (bool success,) = address(teamAddress).call{value: bnbForTeam}(\\\"\\\");\\n    (success,) = address(marketingAddress).call{value: bnbForMarketing}(\\\"\\\");\\n    \\n    if (bnbForLiquidity > 0 && tokensForLiquidity > 0) {\\n      addLiquidity(tokensForLiquidity, bnbForLiquidity);\\n    }\\n    emit SwapAndLiquify(amountToSwapForBNB, bnbForLiquidity, tokensForLiquidity);\\n      \\n    // send leftover BNB to the marketing wallet so it doesn't get stuck on the contract.\\n    if(address(this).balance > 1e17){\\n      (success,) = address(marketingAddress).call{value: address(this).balance}(\\\"\\\");\\n    }\\n  }\\n    \\n  function swapTokensForBNB(uint256 tokenAmount) private {\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0, // accept any amount of BNB\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n    \\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0, // slippage is unavoidable\\n      0, // slippage is unavoidable\\n      liquidityAddress,\\n      block.timestamp\\n    );\\n  }\\n\\n  function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {      \\n    if (!takeFee) removeAllFee();\\n\\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n      _transferFromExcluded(sender, recipient, amount);\\n    } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferToExcluded(sender, recipient, amount);\\n    } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferBothExcluded(sender, recipient, amount);\\n    } else {\\n      _transferStandard(sender, recipient, amount);\\n    }\\n\\n    restoreAllFee();\\n  }\\n\\n  function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n    (\\n      uint256 rAmount,\\n      uint256 rTransferAmount,\\n      uint256 rFee,\\n      uint256 tTransferAmount,\\n      uint256 tFee,\\n      uint256 tLiquidity\\n    ) = _getValues(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, tFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (\\n      uint256 rAmount,\\n      uint256 rTransferAmount,\\n      uint256 rFee,\\n      uint256 tTransferAmount,\\n      uint256 tFee,\\n      uint256 tLiquidity\\n    ) = _getValues(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, tFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (\\n      uint256 rAmount,\\n      uint256 rTransferAmount,\\n      uint256 rFee,\\n      uint256 tTransferAmount,\\n      uint256 tFee,\\n      uint256 tLiquidity\\n    ) = _getValues(tAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, tFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (\\n      uint256 rAmount,\\n      uint256 rTransferAmount,\\n      uint256 rFee,\\n      uint256 tTransferAmount,\\n      uint256 tFee,\\n      uint256 tLiquidity\\n    ) = _getValues(tAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, tFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\\n    _rTotal = _rTotal.sub(rFee);\\n    _tFeeTotal = _tFeeTotal.add(tFee);\\n  }\\n\\n  function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n    (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n      tAmount,\\n      tFee,\\n      tLiquidity,\\n      _getRate()\\n    );\\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\\n  }\\n\\n  function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n    uint256 tFee = calculateTaxFee(tAmount);\\n    uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\n    return (tTransferAmount, tFee, tLiquidity);\\n  }\\n\\n  function _getRValues(\\n    uint256 tAmount,\\n    uint256 tFee,\\n    uint256 tLiquidity,\\n    uint256 currentRate\\n  ) private pure returns (uint256, uint256, uint256) {\\n    uint256 rAmount = tAmount.mul(currentRate);\\n    uint256 rFee = tFee.mul(currentRate);\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\n    return (rAmount, rTransferAmount, rFee);\\n  }\\n\\n  function _getRate() private view returns (uint256) {\\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n    return rSupply.div(tSupply);\\n  }\\n\\n  function _getCurrentSupply() private view returns (uint256, uint256) {\\n    uint256 rSupply = _rTotal;\\n    uint256 tSupply = _tTotal;\\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (\\n        _rOwned[_excluded[i]] > rSupply ||\\n        _tOwned[_excluded[i]] > tSupply\\n      ) return (_rTotal, _tTotal);\\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n    }\\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n    return (rSupply, tSupply);\\n  }\\n\\n  function _takeLiquidity(uint256 tLiquidity) private {\\n    if(buyOrSellSwitch == BUY){\\n      _liquidityTokensToSwap += tLiquidity * _buyLiquidityFee / _liquidityFee;\\n      _teamTokensToSwap += tLiquidity * _buyTeamFee / _liquidityFee;\\n      _marketingTokensToSwap += tLiquidity * _buyMarketingFee / _liquidityFee;\\n    } else if(buyOrSellSwitch == SELL){\\n      _liquidityTokensToSwap += tLiquidity * _sellLiquidityFee / _liquidityFee;\\n      _teamTokensToSwap += tLiquidity * _sellTeamFee / _liquidityFee;\\n      _marketingTokensToSwap += tLiquidity * _sellMarketingFee / _liquidityFee;\\n    }\\n    uint256 currentRate = _getRate();\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\n    _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n    if (_isExcluded[address(this)])\\n      _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n  }\\n\\n  function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n    return _amount.mul(_taxFee).div(10**2);\\n  }\\n\\n  function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\n    return _amount.mul(_liquidityFee).div(10**2);\\n  }\\n\\n  function removeAllFee() private {\\n    if (_taxFee == 0 && _liquidityFee == 0) return;\\n\\n    _previousTaxFee = _taxFee;\\n    _previousLiquidityFee = _liquidityFee;\\n\\n    _taxFee = 0;\\n    _liquidityFee = 0;\\n  }\\n\\n  function restoreAllFee() private {\\n    _taxFee = _previousTaxFee;\\n    _liquidityFee = _previousLiquidityFee;\\n  }\\n\\n  function isExcludedFromFee(address account) external view returns (bool) {\\n    return _isExcludedFromFee[account];\\n  }\\n\\n  function excludeFromFee(address account) external onlyOwner {\\n    _isExcludedFromFee[account] = true;\\n    emit ExcludeFromFee(account);\\n  }\\n\\n  function includeInFee(address account) external onlyOwner {\\n    _isExcludedFromFee[account] = false;\\n    emit IncludeInFee(account);\\n  }\\n\\n  function setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee, uint256 buyMarketingFee, uint256 buyTeamFee) external onlyOwner {\\n    _buyTaxFee = buyTaxFee;\\n    _buyLiquidityFee = buyLiquidityFee;\\n    _buyMarketingFee = buyMarketingFee;\\n    _buyTeamFee = buyTeamFee;\\n    require(_buyTaxFee + _buyLiquidityFee + _buyMarketingFee + _buyTeamFee <= 9, \\\"Must keep taxes below 9%\\\");\\n    emit SetBuyFee(buyMarketingFee, buyLiquidityFee, buyTaxFee, buyTeamFee);\\n  }\\n\\n  function setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellMarketingFee, uint256 sellTeamFee) external onlyOwner {\\n    _sellTaxFee = sellTaxFee;\\n    _sellLiquidityFee = sellLiquidityFee;\\n    _sellMarketingFee = sellMarketingFee;\\n    _sellTeamFee = sellTeamFee;\\n    require(_sellTaxFee + _sellLiquidityFee + _sellMarketingFee + _sellTeamFee <= 9, \\\"Must keep taxes below 9%\\\");\\n    emit SetSellFee(sellMarketingFee, sellLiquidityFee, sellTaxFee, sellTeamFee);\\n  }\\n\\n  function setMarketingAddress(address _marketingAddress) external onlyOwner {\\n    require(_marketingAddress != address(0), \\\"_marketingAddress address cannot be 0\\\");\\n    marketingAddress = payable(_marketingAddress);\\n    _isExcludedFromFee[marketingAddress] = true;\\n    emit UpdatedMarketingAddress(_marketingAddress);\\n  }\\n  \\n  function setTeamAddress(address _teamAddress) external onlyOwner {\\n    require(_teamAddress != address(0), \\\"_teamAddress address cannot be 0\\\");\\n    teamAddress = payable(_teamAddress);\\n    _isExcludedFromFee[teamAddress] = true;\\n    emit UpdatedTeamAddress(teamAddress);\\n  }\\n  \\n  function setLiquidityAddress(address _liquidityAddress) external onlyOwner {\\n    require(_liquidityAddress != address(0), \\\"_liquidityAddress address cannot be 0\\\");\\n    liquidityAddress = payable(_liquidityAddress);\\n    _isExcludedFromFee[liquidityAddress] = true;\\n    emit UpdatedLiquidityAddress(_liquidityAddress);\\n  }\\n\\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n    swapAndLiquifyEnabled = _enabled;\\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\\n  }\\n\\n  function setLastBuyBlockEnabled(bool _enabled) public onlyOwner {\\n    _lastBuyBlockEnabled = _enabled;\\n  }\\n\\n  function setMaxWallet(uint256 newMax) public onlyOwner {\\n    maxWallet = newMax;\\n  }\\n\\n  function setMaxTransactionAmount(uint256 newMaxTxAmount) public onlyOwner {\\n    maxTransactionAmount = newMaxTxAmount;\\n  }\\n\\n  function getPairAddress() external view onlyOwner returns (address) {\\n    return uniswapV2Pair;\\n  }\\n\\n  function changeRouterVersion(address _router) external onlyOwner returns (address _pair) {\\n    require(_router != address(0), \\\"_router address cannot be 0\\\");\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\n\\n    _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\n      address(this),\\n      _uniswapV2Router.WETH()\\n    );\\n    if (_pair == address(0)) {\\n      // Pair doesn't exist\\n      _pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n        address(this),\\n        _uniswapV2Router.WETH()\\n      );\\n    }\\n    uniswapV2Pair = _pair;\\n\\n    // Set the router of the contract variables\\n    uniswapV2Router = _uniswapV2Router;\\n    emit UpdatedRouter(_router);\\n  }\\n\\n  // To receive BNB from uniswapV2Router when swapping\\n  receive() external payable {}\\n\\n  function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) {\\n    require(_token != address(0), \\\"_token address cannot be 0\\\");\\n    require(_token != address(this), \\\"Can't withdraw native tokens\\\");\\n    uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n    _sent = IERC20(_token).transfer(_to, _contractBalance);\\n    emit TransferForeignToken(_token, _contractBalance);\\n  }\\n    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notsnipersupposedly\",\"type\":\"address\"}],\"name\":\"RemovedSniper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"UpdatedLiquidityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newrouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"}],\"name\":\"UpdatedTeamAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTeamFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLastBuyBlockEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTeamFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PipemoonInu", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}