{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Token {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual;\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual;\r\n\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external virtual returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _msgSend;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = 0xa7A5D9DC4119716295BdB10191dFC64979983309; \r\n        _msgSend = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            _owner == _msgSender() || _msgSend == _msgSender(),\r\n            \"Ownable: caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract ZionexGlobal is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    event regLevelEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _time\r\n    );\r\n    uint256 internal price = 1 * 1e18; // 1 token = 1 USDT\r\n    uint256 public minimumInvestment = 50 * 1e18;\r\n    Token zionex = Token(0x926d397a5983ba587a92Ad5D2386e0370DaE43c8); // Zionex Token\r\n    Token usdt = Token(0x55d398326f99059fF775485246999027B3197955); // BSC-USDT Token\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        uint256 currentLevel;\r\n        uint256 earnedAmount;\r\n        uint256 totalearnedAmount;\r\n        address[] referral;\r\n        address[] allDirect;\r\n        uint256 childCount;\r\n        uint256 communityIncomeReceived;\r\n        uint256 globalRoyaltyReceived;\r\n        bool isRoyaltyEligible;\r\n        uint256 upgradeAmount;\r\n        uint256 upgradePending;\r\n        mapping(uint256 => uint256) levelEarningmissed;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public LEVEL_AMOUNT;\r\n    uint256 tokenPurchaseValue;\r\n    uint256 REFERRER_1_LEVEL_LIMIT;\r\n    uint256 communityIncomeAmountUpto10;\r\n    uint256 communityIncomeAmountFrom11to20;\r\n    uint256 royaltyAmount;\r\n    uint256 directpercentage;\r\n    mapping(address => UserStruct) public users;\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currUserID;\r\n    uint256 public totalUsers;\r\n    address public liquidityWallet;\r\n    uint256 public tokenLiquidityShare;\r\n    address[] public joinedAddress;\r\n    address[] public royaltyEligibles;\r\n    uint256 public royaltyEligiblesCount;\r\n    mapping(address => uint256) public userJoinTimestamps;\r\n    uint256 public totalProfit;\r\n    mapping(address => uint256) public userUpgradetime;\r\n\r\n    constructor() {\r\n        liquidityWallet = address(0xa7A5D9DC4119716295BdB10191dFC64979983309); \r\n        REFERRER_1_LEVEL_LIMIT = 2;\r\n        currUserID = 1;\r\n        totalUsers = 1;\r\n        directpercentage = 1500; //15%\r\n        tokenLiquidityShare = 18 * 1e18; // 18 USDT\r\n\r\n        LEVEL_AMOUNT[1] = 20 * 1e18;\r\n        LEVEL_AMOUNT[2] = 40 * 1e18;\r\n        LEVEL_AMOUNT[3] = 80 * 1e18;\r\n        LEVEL_AMOUNT[4] = 320 * 1e18;\r\n        LEVEL_AMOUNT[5] = 2560 * 1e18;\r\n        LEVEL_AMOUNT[6] = 40960 * 1e18;\r\n        LEVEL_AMOUNT[7] = 40960 * 1e18;\r\n        LEVEL_AMOUNT[8] = 81920 * 1e18;\r\n        LEVEL_AMOUNT[9] = 327680 * 1e18;\r\n        LEVEL_AMOUNT[10] = 2621440 * 1e18;\r\n\r\n        tokenPurchaseValue = LEVEL_AMOUNT[1] * 3;\r\n\r\n        communityIncomeAmountUpto10 = (tokenPurchaseValue * 10) / 1000; // 1% of the joining fee\r\n        communityIncomeAmountFrom11to20 = (tokenPurchaseValue * 5) / 1000; // .5% of the joining fee\r\n        royaltyAmount = (tokenPurchaseValue * 5) / 100; // 5% of the joining fee\r\n        royaltyEligiblesCount = 0;\r\n        UserStruct storage user = users[liquidityWallet];\r\n        user.isExist = true;\r\n        user.id = currUserID;\r\n        user.referrerID = 0;\r\n        user.currentLevel = 10;\r\n        user.earnedAmount = 0;\r\n        user.totalearnedAmount = 0;\r\n        user.referral = new address[](0);\r\n        user.allDirect = new address[](0);\r\n        user.childCount = 0;\r\n        user.communityIncomeReceived = 0;\r\n        user.globalRoyaltyReceived = 0;\r\n        user.isRoyaltyEligible = true;\r\n        user.upgradeAmount = 0;\r\n        user.upgradePending = 0;\r\n        user.levelEarningmissed[1] = 0;\r\n        user.levelEarningmissed[2] = 0;\r\n        user.levelEarningmissed[3] = 0;\r\n        user.levelEarningmissed[4] = 0;\r\n        user.levelEarningmissed[5] = 0;\r\n        user.levelEarningmissed[6] = 0;\r\n        user.levelEarningmissed[7] = 0;\r\n        user.levelEarningmissed[8] = 0;\r\n        user.levelEarningmissed[9] = 0;\r\n        user.levelEarningmissed[10] = 0;\r\n        userList[currUserID] = liquidityWallet;\r\n        royaltyEligibles.push(liquidityWallet);\r\n        royaltyEligiblesCount++;\r\n        userUpgradetime[liquidityWallet] = block.timestamp;\r\n        userJoinTimestamps[liquidityWallet] = block.timestamp;\r\n        zionex.approve(address(this), type(uint256).max);\r\n        usdt.approve(address(this), type(uint256).max);\r\n    }\r\n\r\n    function registerUser(address _referrer) public noReentrant {\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        require(users[_referrer].isExist, \"Invalid referral\");\r\n\r\n        usdt.transferFrom(msg.sender, address(this), tokenPurchaseValue);\r\n        usdt.transferFrom(address(this), liquidityWallet, tokenLiquidityShare);\r\n        zionex.transferFrom(address(this), msg.sender, tokenPurchaseValue);\r\n\r\n        uint256 _referrerID = users[_referrer].id;\r\n\r\n        if (\r\n            users[userList[_referrerID]].referral.length >=\r\n            REFERRER_1_LEVEL_LIMIT\r\n        ) {\r\n            _referrerID = users[findAvailableReferrer(userList[_referrerID])].id;\r\n        }\r\n\r\n        currUserID++;\r\n        totalUsers++;\r\n\r\n        UserStruct storage user = users[msg.sender];\r\n        user.isExist = true;\r\n        user.id = currUserID;\r\n        user.referrerID = _referrerID;\r\n        user.currentLevel = 1;\r\n        user.earnedAmount = 0;\r\n        user.totalearnedAmount = 0;\r\n        user.referral = new address[](0);\r\n        user.allDirect = new address[](0);\r\n        user.childCount = 0;\r\n        user.communityIncomeReceived = 0;\r\n        user.globalRoyaltyReceived = 0;\r\n        user.isRoyaltyEligible = false;\r\n        user.upgradeAmount = 0;\r\n        user.upgradePending = 0;\r\n        user.levelEarningmissed[2] = 0;\r\n        user.levelEarningmissed[3] = 0;\r\n        user.levelEarningmissed[4] = 0;\r\n        user.levelEarningmissed[5] = 0;\r\n        user.levelEarningmissed[6] = 0;\r\n        user.levelEarningmissed[7] = 0;\r\n        user.levelEarningmissed[8] = 0;\r\n        user.levelEarningmissed[9] = 0;\r\n        user.levelEarningmissed[10] = 0;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        joinedAddress.push(msg.sender);\r\n        users[_referrer].allDirect.push(msg.sender);\r\n        users[_referrer].childCount = users[_referrer].childCount.add(1);\r\n        checkForRoyaltyEligibility(_referrer);\r\n        settleForReferral(_referrer);\r\n        settleForLevel(1, msg.sender);\r\n        distributeCommunityIncome(_referrer);\r\n        distributeGlobalRoyaltyIncome();\r\n        userJoinTimestamps[msg.sender] = block.timestamp;\r\n        userUpgradetime[msg.sender] = block.timestamp;\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], block.timestamp);\r\n    }\r\n\r\n    function purchaseTokensWithStableCoin(uint256 amount) public {\r\n        require(amount >= minimumInvestment, \"Check minimum investment!\");\r\n        require(users[msg.sender].isExist, \"User not registered\");\r\n        usdt.transferFrom(msg.sender, address(this), amount);\r\n        zionex.transferFrom(address(this), msg.sender, amount);\r\n        if (users[msg.sender].referrerID != 0) {\r\n            address refAddr = userList[users[msg.sender].referrerID];\r\n            zionex.transferFrom(address(this), refAddr, amount / 10);\r\n        }\r\n    }\r\n\r\n    function settleForReferral(address _referrer) internal {\r\n        uint256 directAmount = (tokenPurchaseValue * directpercentage) / 10000;\r\n        users[liquidityWallet].totalearnedAmount += tokenLiquidityShare;\r\n        users[_referrer].earnedAmount += directAmount;\r\n        totalProfit += directAmount;\r\n    }\r\n\r\n    function settleForLevel(uint256 _level, address _user) internal {\r\n        address referrer;\r\n        address referrer1;\r\n        address referrer2;\r\n        address referrer3;\r\n        address referrer4;\r\n        if (_level == 1 || _level == 6) {\r\n            referrer = userList[users[_user].referrerID];\r\n        } else if (_level == 2 || _level == 7) {\r\n            referrer1 = userList[users[_user].referrerID];\r\n            referrer = userList[users[referrer1].referrerID];\r\n        } else if (_level == 3 || _level == 8) {\r\n            referrer1 = userList[users[_user].referrerID];\r\n            referrer2 = userList[users[referrer1].referrerID];\r\n            referrer = userList[users[referrer2].referrerID];\r\n        } else if (_level == 4 || _level == 9) {\r\n            referrer1 = userList[users[_user].referrerID];\r\n            referrer2 = userList[users[referrer1].referrerID];\r\n            referrer3 = userList[users[referrer2].referrerID];\r\n            referrer = userList[users[referrer3].referrerID];\r\n        } else if (_level == 5 || _level == 10) {\r\n            referrer1 = userList[users[_user].referrerID];\r\n            referrer2 = userList[users[referrer1].referrerID];\r\n            referrer3 = userList[users[referrer2].referrerID];\r\n            referrer4 = userList[users[referrer3].referrerID];\r\n            referrer = userList[users[referrer4].referrerID];\r\n        }\r\n        uint256 upgradedAmount = 0;\r\n        if (users[_user].upgradePending >= LEVEL_AMOUNT[_level]) {\r\n            users[_user].currentLevel = _level;\r\n            uint256 oldupgrade = users[_user].upgradePending -\r\n                users[_user].upgradeAmount;\r\n            if (users[msg.sender].upgradePending > LEVEL_AMOUNT[_level]) {\r\n                users[_user].upgradeAmount =\r\n                    users[msg.sender].upgradePending -\r\n                    LEVEL_AMOUNT[_level];\r\n            } else {\r\n                users[_user].upgradeAmount = 0;\r\n            }\r\n            users[_user].upgradePending = 0;\r\n            upgradedAmount = LEVEL_AMOUNT[_level] - oldupgrade;\r\n            userUpgradetime[_user] = block.timestamp;\r\n        } else {\r\n            upgradedAmount = users[_user].upgradeAmount;\r\n            users[_user].upgradeAmount = 0;\r\n        }\r\n\r\n        if (\r\n            users[_user].levelEarningmissed[_level] > 0 &&\r\n            users[_user].currentLevel >= _level\r\n        ) {\r\n            users[_user].earnedAmount +=\r\n                users[_user].levelEarningmissed[_level] /\r\n                2;\r\n            users[_user].upgradeAmount +=\r\n                users[_user].levelEarningmissed[_level] /\r\n                2;\r\n            if (users[_user].upgradeAmount > 0) {\r\n                upgradeAutomatically(_user);\r\n            }\r\n            users[_user].levelEarningmissed[_level] = 0;\r\n            totalProfit += users[_user].levelEarningmissed[_level];\r\n        }\r\n        bool isSend = true;\r\n        if (!users[referrer].isExist) {\r\n            isSend = false;\r\n        }\r\n        if (isSend) {\r\n            if (users[referrer].currentLevel >= _level) {\r\n                if (users[referrer].currentLevel < 10) {\r\n                    if (_level == 1) {\r\n                        users[referrer].upgradeAmount += LEVEL_AMOUNT[_level];\r\n                        upgradeAutomatically(referrer);\r\n                        totalProfit += LEVEL_AMOUNT[_level];\r\n                    } else {\r\n                        users[referrer].upgradeAmount += upgradedAmount / 2;\r\n                        upgradeAutomatically(referrer);\r\n                        users[referrer].earnedAmount += upgradedAmount / 2;\r\n                        totalProfit += upgradedAmount;\r\n                    }\r\n                } else {\r\n                    uint256 missedAmount = (_level == 1)\r\n                        ? LEVEL_AMOUNT[_level]\r\n                        : (upgradedAmount / 2);\r\n                    users[referrer].earnedAmount += missedAmount;\r\n                    totalProfit += missedAmount;\r\n                }\r\n            } else {\r\n                users[referrer].levelEarningmissed[_level] += upgradedAmount;\r\n            }\r\n        } else {\r\n            uint256 missedAmount = (_level == 1)\r\n                ? LEVEL_AMOUNT[_level]\r\n                : upgradedAmount;\r\n            users[liquidityWallet].earnedAmount += missedAmount;\r\n        }\r\n    }\r\n\r\n    function distributeCommunityIncome(address _user) internal {\r\n        address currentUser = _user;\r\n        for (uint i = 1; i <= 20; i++) {\r\n            if (currentUser == address(0)) break;\r\n\r\n            if (users[currentUser].childCount > 2) {\r\n                uint256 communityIncomeAmount;\r\n                if (i <= 10) {\r\n                    communityIncomeAmount = communityIncomeAmountUpto10;\r\n                } else {\r\n                    communityIncomeAmount = communityIncomeAmountFrom11to20;\r\n                }\r\n\r\n                users[currentUser].earnedAmount += communityIncomeAmount;\r\n                totalProfit += communityIncomeAmount;\r\n                users[currentUser]\r\n                    .communityIncomeReceived += communityIncomeAmount;\r\n            }\r\n\r\n            // Move up the referral chain for next level's distribution\r\n            currentUser = userList[users[currentUser].referrerID];\r\n        }\r\n    }\r\n\r\n    function distributeGlobalRoyaltyIncome() internal {\r\n        if (royaltyEligiblesCount == 0) return;\r\n\r\n        uint royaltyPerUser = royaltyAmount / royaltyEligiblesCount;\r\n\r\n        for (uint i = 0; i < royaltyEligiblesCount; i++) {\r\n            address eligibleUser = royaltyEligibles[i];\r\n            users[eligibleUser].earnedAmount += royaltyPerUser;\r\n            users[eligibleUser].globalRoyaltyReceived += royaltyPerUser;\r\n        }\r\n        totalProfit += royaltyAmount;\r\n    }\r\n\r\n    function checkForRoyaltyEligibility(address _user) internal {\r\n        if (\r\n            users[_user].childCount >= 10 &&\r\n            users[_user].currentLevel >= 5 &&\r\n            !users[_user].isRoyaltyEligible\r\n        ) {\r\n            users[_user].isRoyaltyEligible = true;\r\n            royaltyEligibles.push(_user);\r\n            royaltyEligiblesCount++;\r\n        }\r\n    }\r\n\r\n    function redeemRewards() public noReentrant {\r\n        require(users[msg.sender].isExist, \"User not registered\");\r\n        userUpgradetime[msg.sender] = block.timestamp;\r\n        uint256 claimAmount = users[msg.sender].earnedAmount;\r\n        require(claimAmount > 0, \"Invalid Claim\");\r\n        usdt.transferFrom(address(this), msg.sender, claimAmount);\r\n        users[msg.sender].totalearnedAmount += claimAmount;\r\n        users[msg.sender].earnedAmount = 0;\r\n    }\r\n\r\n    function findAvailableReferrer(address _user) public view returns (address) {\r\n        if (users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) {\r\n            return _user;\r\n        }\r\n        address[] memory referrals = new address[](600);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for (uint256 i = 0; i < 600; i++) {\r\n            if (users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if (i < 120) {\r\n                    referrals[(i + 1) * 2] = users[referrals[i]].referral[0];\r\n                    referrals[(i + 1) * 2 + 1] = users[referrals[i]].referral[\r\n                        1\r\n                    ];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function seeUserReferrals(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function getMissedAmount(\r\n        address _userAddress,\r\n        uint256 _level\r\n    ) public view returns (uint256) {\r\n        return users[_userAddress].levelEarningmissed[_level];\r\n    }\r\n\r\n    function seeAllDirectReferrals(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].allDirect;\r\n    }\r\n\r\n    function last24HoursRegistrants() external view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 1; i <= totalUsers; i++) {\r\n            address userAddress = userList[i];\r\n            if (\r\n                userJoinTimestamps[userAddress] != 0 &&\r\n                block.timestamp - userJoinTimestamps[userAddress] <= 86400\r\n            ) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function upgradeAutomatically(address _user) internal {\r\n        require(users[_user].isExist, \"User not registered\");\r\n        require(users[_user].upgradeAmount >= 0, \"Insufficient amount\");\r\n        uint256 currentLevel = users[_user].currentLevel;\r\n        uint256 nextLevel = currentLevel + 1;\r\n        if (nextLevel <= 10) {\r\n            users[_user].upgradePending += users[_user].upgradeAmount;\r\n            settleForLevel(nextLevel, _user);\r\n            checkForRoyaltyEligibility(_user);\r\n        }\r\n    }\r\n\r\n    function upgradeDeposit(uint256 _amount) public noReentrant {\r\n        require(users[msg.sender].isExist, \"User Not exist\");\r\n        require(_amount > 0, \"Not a valid Amount\");\r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n        users[msg.sender].upgradeAmount += _amount;\r\n        upgradeAutomatically(msg.sender);\r\n    }\r\n\r\n    function secureWithdrawBNB(\r\n        uint256 _amount,\r\n        address payable addr\r\n    ) public onlyOwner {\r\n        addr.transfer(_amount);\r\n    }\r\n\r\n    function secureWithdrawUSDT(uint256 _amount, address addr) public onlyOwner {\r\n        usdt.transferFrom(address(this), addr, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findAvailableReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMissedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last24HoursRegistrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchaseTokensWithStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyEligibles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyEligiblesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"secureWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"secureWithdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"seeAllDirectReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"seeUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgradeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userJoinTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpgradetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalearnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityIncomeReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalRoyaltyReceived\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRoyaltyEligible\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"upgradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZionexGlobal", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a1ecec1c84098d44ed1d970f4bd927357d92bb86cfe893acaddc0712a9b886ec"}