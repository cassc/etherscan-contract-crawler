{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/multivault/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetTokens {\\n    enum TokenType { Native, Alien }\\n\\n    struct TokenPrefix {\\n        uint activation;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TokenMeta {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct Token {\\n        uint activation;\\n        bool blacklisted;\\n        uint depositFee;\\n        uint withdrawFee;\\n        bool isNative;\\n        address custom;\\n    }\\n\\n    function prefixes(address _token) external view returns (TokenPrefix memory);\\n    function tokens(address _token) external view returns (Token memory);\\n    function natives(address _token) external view returns (IEverscale.EverscaleAddress memory);\\n\\n    function setPrefix(\\n        address token,\\n        string memory name_prefix,\\n        string memory symbol_prefix\\n    ) external;\\n\\n    function setTokenBlacklist(\\n        address token,\\n        bool blacklisted\\n    ) external;\\n\\n    function getNativeToken(\\n        IEverscale.EverscaleAddress memory native\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetWithdraw {\\n    struct Callback {\\n        address recipient;\\n        bytes payload;\\n        bool strict;\\n    }\\n\\n    struct NativeWithdrawalParams {\\n        IEverscale.EverscaleAddress native;\\n        IMultiVaultFacetTokens.TokenMeta meta;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    struct AlienWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    function withdrawalIds(bytes32) external view returns (bool);\\n\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BatchSaver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../multivault/interfaces/multivault/IMultiVaultFacetWithdraw.sol\\\";\\n\\n\\ncontract BatchSaver {\\n    address immutable public multivault;\\n\\n    constructor(\\n        address _multivault\\n    ) {\\n        multivault = _multivault;\\n    }\\n\\n    event WithdrawalAlreadyUsed(bytes32 indexed withdrawalId);\\n    event WithdrawalSaved(bytes32 indexed withdrawalId);\\n\\n    struct Withdraw {\\n        bool isNative;\\n        bytes payload;\\n        bytes[] signatures;\\n    }\\n\\n    function checkWithdrawalAlreadySeen(bytes32 withdrawalId) public view returns (bool) {\\n        return IMultiVaultFacetWithdraw(multivault).withdrawalIds(withdrawalId);\\n    }\\n\\n    function saveWithdrawals(\\n        Withdraw[] memory withdrawals\\n    ) external {\\n        for (uint i = 0; i < withdrawals.length; i++) {\\n            Withdraw memory withdraw = withdrawals[i];\\n\\n            bytes32 withdrawalId = keccak256(withdraw.payload);\\n\\n            if (checkWithdrawalAlreadySeen(withdrawalId)) {\\n                emit WithdrawalAlreadyUsed(withdrawalId);\\n\\n                continue;\\n            }\\n\\n            if (withdraw.isNative) {\\n                IMultiVaultFacetWithdraw(multivault).saveWithdrawNative(\\n                    withdraw.payload,\\n                    withdraw.signatures\\n                );\\n            } else {\\n                IMultiVaultFacetWithdraw(multivault).saveWithdrawAlien(\\n                    withdraw.payload,\\n                    withdraw.signatures\\n                );\\n            }\\n\\n            emit WithdrawalSaved(withdrawalId);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multivault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalId\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalAlreadyUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalId\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalSaved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalId\",\"type\":\"bytes32\"}],\"name\":\"checkWithdrawalAlreadySeen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multivault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct BatchSaver.Withdraw[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"}],\"name\":\"saveWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchSaver", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007dbfdc0a2d18f690d35f38e66dfab795c0175dac", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}