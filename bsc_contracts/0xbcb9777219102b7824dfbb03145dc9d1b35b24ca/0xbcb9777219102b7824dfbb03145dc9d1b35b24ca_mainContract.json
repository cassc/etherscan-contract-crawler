{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\ncontract owned {\r\n    address  public owner;\r\n    address  public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address  _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface goldInterface {\r\n    function regUser(uint _referrerID, address _user) external returns(bool);\r\n\r\n}\r\ninterface AIinterface {\r\n\r\n    function regUser(uint uinRefID, address _user) external returns(bool);\r\n}\r\n\r\ninterface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function balanceOf(address _user) external view returns(uint);\r\n }\r\n\r\n\r\ncontract mainContract is owned {\r\n\r\n    uint public maxDownLimit_ = 3;\r\n\r\n\r\n    uint public lastIDCount = 0;\r\n\r\n\r\n    struct userInfo {\r\n        bool joined;\r\n        uint id;\r\n        uint referrerID;\r\n        uint directCount;\r\n        uint levelBought;\r\n    }\r\n    address public goldAddress;\r\n    address public usdtAddress;\r\n    address public AIAddress;\r\n    uint public regPrice;\r\n    //uint public directGainOne; //= 0.02 ether;\r\n    uint public directGainTwo; //= 0.04 ether;\r\n\r\n    mapping(uint => uint) public levelPrice;\r\n    //mapping(uint => uint) public distForLevel;\r\n\r\n    mapping (address => userInfo) public userInfos;\r\n    mapping (uint => address payable) public userAddressByID;\r\n    mapping (address => uint[12]) public nextGlobalJoinPending;\r\n    mapping (address => uint[12]) public lastJoinTime;\r\n\r\n    struct gPoolInfo {\r\n        uint id;\r\n        uint parentID;\r\n        uint childCount;\r\n        bool dormant;\r\n    }\r\n\r\n    //user => gPool level => gPool Data.  \r\n    mapping(address => mapping(uint => gPoolInfo)) public gPoolInfos;\r\n    uint[12] public nextGPoolToFill;\r\n    mapping(address => uint[12]) public dormantJoin;\r\n    mapping(address => uint[12]) public lastPendingProcessTime;\r\n\r\n\r\n    event regLevelEv(address indexed _userWallet, uint indexed _userID,uint _time,uint _referrerID, uint _amount);\r\n    event clubBLevelBuyEv(address indexed _user, uint _level, uint _amount, uint _time);\r\n    event paidForLevelEv(address indexed _user, address indexed _childAddress, uint _level, uint _amount, uint _time);\r\n    // type \r\n    // 0 = direct one, \r\n    // 1 = direct two,  \r\n    // 2 = gold contract, \r\n    // 3 = base\r\n    // 4 = Club B\r\n    // 5 = AI Contract\r\n    event paidForEv(uint Type,address paidTo, address paidDueTo, uint amount);\r\n    function initialize() public onlyOwner returns(bool)  {\r\n        require(regPrice == 0 , \"can't call twice\");\r\n        emit OwnershipTransferred(address(0), owner);\r\n        uint power = 10 ** 18; // after test make it '10 ** 18'\r\n\r\n\r\n        regPrice = 15 * power;\r\n\r\n        \r\n        levelPrice[1] = 10 * power ;\r\n        levelPrice[2] = 20 * power;\r\n        levelPrice[3] = 40 * power;\r\n        levelPrice[4]= 80 * power;\r\n        levelPrice[5]= 160 * power;\r\n        levelPrice[6]= 320 * power;\r\n        levelPrice[7]= 640 * power;\r\n        levelPrice[8]= 1280 * power;\r\n        levelPrice[9]= 2560 * power;\r\n        levelPrice[10]= 5120 * power;\r\n        levelPrice[11]= 10240 * power;\r\n\r\n/*\r\n        //distForLevel[1] = 0 * power / 1000;\r\n        distForLevel[2] = 6 * power / 10000;\r\n        distForLevel[3] = 3 * power / 10000;\r\n        distForLevel[4] = 3 * power / 10000;\r\n        distForLevel[5] = 3 * power / 10000;\r\n        distForLevel[6] = 3 * power / 10000;\r\n        distForLevel[7] = 3 * power / 10000;\r\n        distForLevel[8] = 3 * power / 10000;\r\n        distForLevel[9] = 3 * power / 10000;\r\n        distForLevel[10]= 3 * power / 10000; \r\n*/\r\n        //directGainOne = 2 * power / 100;\r\n        directGainTwo = 5 ;        \r\n\r\n        userInfo memory UserInfo;\r\n        lastIDCount++;\r\n\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastIDCount,\r\n            referrerID: 1,\r\n            directCount: 0,\r\n            levelBought:10\r\n        });\r\n        userInfos[owner] = UserInfo;\r\n        userAddressByID[lastIDCount] = payable(owner);\r\n\r\n\r\n        gPoolInfo memory GPoolInfo = gPoolInfo({\r\n            id: 1,\r\n            parentID: 1,\r\n            childCount: 0,\r\n            dormant:false\r\n        });\r\n\r\n        for (uint i=1;i<12;i++)\r\n        {\r\n            gPoolInfos[owner][i] = GPoolInfo;\r\n            nextGPoolToFill[i]++;\r\n        }\r\n        \r\n\r\n        emit regLevelEv(owner, 1, block.timestamp, 1, 0);\r\n        return true;\r\n    }\r\n\r\n/*\r\n    receive ()  external payable {\r\n        payable(owner).transfer(msg.value);\r\n    }\r\n*/\r\n\r\n    function setTokenAddress(address _goldAddress, address _usdtAddress, address _AIAddress) public onlyOwner returns(bool)\r\n    {\r\n        goldAddress = _goldAddress;\r\n        usdtAddress = _usdtAddress;\r\n        AIAddress = _AIAddress;\r\n        return true;\r\n    }\r\n\r\n    function regForUser(address _user, uint _referrerID) public returns(bool) \r\n    {\r\n        require(_user != address(0), \"Invalid user\");\r\n        uint prc = regPrice;\r\n        tokenInterface(usdtAddress).transferFrom(msg.sender,address(this), prc);\r\n        _regUser(_user,_referrerID,prc);\r\n        return true;\r\n    }\r\n\r\n\r\n    function regUser(uint _referrerID) public returns(bool) \r\n    {\r\n        uint prc = regPrice;\r\n        tokenInterface(usdtAddress).transferFrom(msg.sender,address(this), prc);\r\n        _regUser(msg.sender,_referrerID, prc);\r\n        return true;\r\n    }\r\n\r\n    function _regUser(address msgSender, uint _referrerID, uint prc) internal returns(bool) \r\n    {\r\n        //address msgSender = msg.sender; \r\n        require(!userInfos[msgSender].joined, 'User exist');\r\n        address origRef = userAddressByID[_referrerID];\r\n        require(userInfos[origRef].joined, 'referrer not exist');\r\n\r\n        \r\n\r\n        //require(msg.value == prc, \"Invalid amount sent\");     \r\n\r\n        uint lID = lastIDCount; \r\n\r\n        userInfo memory UserInfo;\r\n        lID++;\r\n\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lID,\r\n            referrerID: _referrerID,\r\n            directCount: 0,             \r\n            levelBought:0\r\n        });\r\n\r\n        userInfos[msgSender] = UserInfo;\r\n        userAddressByID[lID] = payable(msgSender);\r\n        \r\n        userInfos[origRef].directCount++;\r\n\r\n        lastIDCount = lID;\r\n        skiptPart(msgSender,lID,_referrerID,prc);\r\n        return true;\r\n    }\r\n\r\n    function skiptPart(address msgSender, uint lID, uint _referrerID, uint prc) internal returns(bool)\r\n    {\r\n        address _ref = userAddressByID[_referrerID];\r\n        uint _directNos = userInfos[_ref].directCount;\r\n\r\n        //level\r\n        //payForLevel(msgSender);\r\n\r\n        //club B\r\n        //payable(goldAddress) .transfer(prc/3);\r\n        tokenInterface(usdtAddress).transfer(goldAddress, prc/3);\r\n        tokenInterface(usdtAddress).transfer(AIAddress, prc/3);\r\n        emit paidForEv(2,goldAddress,msgSender,prc/3);\r\n        emit paidForEv(5,AIAddress,msgSender,prc/3);\r\n\r\n        goldInterface(goldAddress).regUser(_referrerID, msgSender);\r\n        AIinterface(AIAddress).regUser(_referrerID, msgSender);\r\n\r\n        //direct and club A\r\n        if (_directNos == 3)\r\n        {\r\n\r\n            //payable(_ref) .transfer(prc/3);\r\n            tokenInterface(usdtAddress).transfer(_ref, prc/3);\r\n            emit paidForEv(3,_ref,msgSender, prc/3);\r\n            _buyGlobalPool(1,_ref,levelPrice[1],false);\r\n        }\r\n        \r\n        if (_directNos > 3)\r\n        {\r\n            //payable(_ref).transfer(directGainTwo);\r\n            tokenInterface(usdtAddress).transfer(_ref, directGainTwo);\r\n            emit paidForEv(1,_ref,msgSender, directGainTwo);\r\n        }\r\n    /*    \r\n        else\r\n        {\r\n            payable(_ref).transfer(directGainOne);\r\n            emit paidForEv(0,_ref,msgSender,directGainOne);\r\n        }\r\n    */    \r\n\r\n        emit regLevelEv(msgSender, lID, block.timestamp, _referrerID, prc );\r\n        emit clubBLevelBuyEv(msgSender, 1, prc, block.timestamp);      \r\n        return true;\r\n    }\r\n\r\n    // to buy pool 1 multiple times as desired\r\n    function buyGlobalPool() public payable returns(bool){ \r\n        uint _level = 1;      \r\n        address msgSender = msg.sender;\r\n        require(lastJoinTime[msg.sender][_level] + 1 days < block.timestamp, \"please wait\");\r\n        require(userInfos[msgSender].joined, 'pls register first');\r\n        uint prc = levelPrice[_level];\r\n        require(_level < 12, \"invalid price paid\");\r\n        tokenInterface(usdtAddress).transferFrom(msg.sender,address(this), prc);\r\n        lastJoinTime[msg.sender][_level] = block.timestamp;\r\n        _buyGlobalPool(_level,msgSender,prc, false);\r\n        return true;\r\n    }\r\n\r\n    function processDormantEntry(uint _level) public returns(bool){        \r\n        address msgSender = msg.sender;\r\n        require(dormantJoin[msgSender][_level] > 0, 'no peding');\r\n        require(lastPendingProcessTime[msgSender][_level] + 1 days < block.timestamp, \"wait please\");\r\n        uint prc = levelPrice[_level];\r\n        dormantJoin[msgSender][_level]--;\r\n        lastPendingProcessTime[msgSender][_level]= block.timestamp;\r\n        _buyGlobalPool(_level,msgSender,prc, true);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function _buyGlobalPool(uint _level, address msgSender, uint prc,bool _dormant) internal returns(bool){\r\n\r\n        require(userInfos[msgSender].levelBought + 1 >= _level, \"Buy previous level first\");\r\n\r\n        userInfos[msgSender].levelBought = _level;\r\n\r\n        uint pID = nextGPoolToFill[_level];\r\n\r\n        gPoolInfo memory GPoolInfo = gPoolInfo({\r\n            id: userInfos[msgSender].id,\r\n            parentID: pID,\r\n            childCount: 0,\r\n            dormant:_dormant\r\n        });\r\n\r\n        gPoolInfos[msgSender][_level] = GPoolInfo;\r\n\r\n        address parent = userAddressByID[pID];\r\n\r\n        gPoolInfos[parent][_level].childCount++;\r\n        \r\n        uint cc = gPoolInfos[parent][_level].childCount;\r\n\r\n        bool dorm = gPoolInfos[parent][_level].dormant;\r\n\r\n            if (cc== 3 ) \r\n            {\r\n\r\n                nextGPoolToFill[_level]++;\r\n\r\n                if(_level < 11)\r\n                {\r\n\r\n                    if (_level > 1) {\r\n                        dormantJoin[parent][_level - 1] += (2 ** (_level -2) );\r\n                    }\r\n\r\n                    nextGlobalJoinPending[parent][_level+1]++;\r\n                    if(!dorm)\r\n                    {\r\n                        //payable(parent).transfer(prc);\r\n                        tokenInterface(usdtAddress).transfer(parent, prc);\r\n                        emit paidForEv(4,parent,msgSender,prc);\r\n                    }\r\n\r\n                } \r\n                \r\n            }\r\n            else if ( _level == 11)\r\n            {\r\n                dormantJoin[parent][_level - 1] += (2 ** (_level -2) );\r\n                if(!dorm)\r\n                {\r\n                    //payable(parent).transfer(prc);\r\n                    tokenInterface(usdtAddress).transfer(parent, prc);\r\n                    emit paidForEv(4,parent,msgSender,prc);\r\n                }                \r\n            }\r\n\r\n\r\n        emit clubBLevelBuyEv(msgSender, _level, levelPrice[_level] , block.timestamp);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function joinNextPendingGlobal(uint _level) public returns(bool){\r\n        require(nextGlobalJoinPending[msg.sender][_level] > 0, \"no pending join\");\r\n        nextGlobalJoinPending[msg.sender][_level]--;\r\n        uint prc = levelPrice[_level];\r\n        _buyGlobalPool(_level,msg.sender,prc, false);\r\n        return true;\r\n    }\r\n\r\n/*\r\n    function payForLevel(address _user) internal returns (bool){\r\n\r\n        address payable usr = userAddressByID[userInfos[_user].referrerID];\r\n        usr = userAddressByID[userInfos[usr].referrerID];\r\n        for (uint i=2;i<11;i++)\r\n         {\r\n            uint dist = distForLevel[i];\r\n            usr.transfer(dist);\r\n\r\n            emit paidForLevelEv(usr, _user, 1,dist, block.timestamp);\r\n\r\n            usr = userAddressByID[userInfos[usr].referrerID];\r\n         }\r\n\r\n        return true;\r\n\r\n    }\r\n*/\r\n    function getUserInfo(address _user) public view returns(bool,uint,uint,uint,uint)\r\n    {\r\n        userInfo memory temp = userInfos[_user];\r\n        return (temp.joined,temp.id,temp.referrerID,temp.directCount,temp.levelBought);\r\n    }\r\n\r\n    function getgPoolInfo(address _user, uint _level) public view returns(uint,uint,uint,bool)\r\n    {\r\n        gPoolInfo memory temp = gPoolInfos[_user][_level];\r\n        return (temp.id,temp.parentID,temp.childCount,temp.dormant);\r\n    }\r\n\r\n    function upgradeContract() public onlyOwner returns(bool)\r\n    {\r\n        //payable(owner).transfer(address(this).balance);\r\n        uint bal = tokenInterface(usdtAddress).balanceOf(address(this));\r\n        tokenInterface(usdtAddress).transfer(owner, bal);\r\n        return true;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"clubBLevelBuyEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidDueTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"paidForEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"paidForLevelEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"regLevelEv\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyGlobalPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directGainTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dormantJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gPoolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dormant\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getgPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"joinNextPendingGlobal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastJoinTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPendingProcessTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDownLimit_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextGPoolToFill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextGlobalJoinPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"processDormantEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_AIAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddressByID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "mainContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ba6765d9595aca6fe630e06ae52ee8cf781c504354b851f436a0f62575dfa5b9"}