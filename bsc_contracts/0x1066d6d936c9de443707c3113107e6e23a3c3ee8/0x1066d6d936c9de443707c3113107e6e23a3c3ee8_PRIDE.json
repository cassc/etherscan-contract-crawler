{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n        return 0;\r\n\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n function getPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint256 amountTokenDesired,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n\r\n        _transferOwnership(_msgSender());\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n\r\n        _checkOwner();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        _transferOwnership(address(0));\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n\r\n        address oldOwner = _owner;\r\n\r\n        _owner = newOwner;\r\n\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract PRIDE is IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"PRIDE\";\r\n\r\n    string private constant _symbol = \"PRIDE\";\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    \r\n    address payable private _PRIDE;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant _tTotal = 420000000000000 * 10**18;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    bool private inSwap = false;\r\n\r\n    bool private swapEnabled = true;\r\n\r\n    modifier lockTheSwap {\r\n\r\n        inSwap = true;\r\n\r\n        _;\r\n\r\n        inSwap = false;\r\n\r\n    }\r\n\r\n    modifier onlyPRIDE{\r\n\r\n        require(_msgSender() == _PRIDE, \"Only PRIDE \");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    constructor(address _PRIDEAddress) {\r\n\r\n        _PRIDE = payable(_PRIDEAddress);\r\n\r\n        _mint(_PRIDE, _tTotal);\r\n\r\n    }\r\n\r\n    function name()  public pure returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n    function symbol()  public pure returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n    function decimals()  public pure returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n\r\n        return _tTotal;\r\n\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256){\r\n\r\n        return _tOwned[account];\r\n\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public  override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool)\r\n\r\n    {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function withdrawStuckETH() public {\r\n\r\n        bool success;\r\n\r\n        (success,) = address(_PRIDE).call{value: address(this).balance}(\"\");\r\n\r\n    }\r\n\r\n    function _approve( address owner, address spender, uint256 amount ) internal {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount ) internal {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        _tokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n\r\n        _PRIDE.transfer(amount);\r\n\r\n    }\r\n\r\n    function setUniswapV2Pair(address tokenA, address tokenB) external onlyOwner{\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n\r\n            .getPair(tokenA, tokenB);\r\n\r\n    }\r\n\r\n    function manualswap() external {\r\n\r\n        require(_msgSender() == _PRIDE, \"You are not PRIDE\");\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n        swapTokensForEth(contractBalance);\r\n\r\n    }\r\n\r\n    function manualsend() external {\r\n\r\n        require(_msgSender() == _PRIDE);\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        sendETHToFee(contractETHBalance);\r\n\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(amount);\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n\r\n        swapEnabled = _swapEnabled;\r\n\r\n    }\r\n\r\n\r\n    function setUniswapV2Router(address routerAddress) public onlyOwner {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n        uniswapV2Router = _uniswapV2Router;    \r\n\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        unchecked {\r\n\r\n            _tOwned[account] += amount;\r\n\r\n        }\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PRIDEAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PRIDE", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000688062a0a485db4a79e9e77daec41243b7379baf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9e5a2e2a20a9d0dde5535bff451ad91909659c2de0da91d1e9ab3c6fb200a39d"}