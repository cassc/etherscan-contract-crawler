{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\nerror ICO_Already_Started();\r\nerror Input_Wallet_Zero();\r\nerror Cannot_Buy_Lessthan_One_Token();\r\nerror ICO_Not_Active();\r\nerror Already_Released();\r\nerror Softcap_Not_Reached();\r\nerror Softcap_Already_Reached();\r\nerror Hardcap_Reached();\r\nerror No_Token_Available();\r\nerror ICO_Not_Tradable();\r\nerror VestingPeriod_Not_Ended();\r\nerror All_Reserved_Token_Unlocked();\r\nerror End_Date_Not_Passed();\r\nerror No_Token_contract();\r\nerror Amounts_and_Token_Not_macth();\r\nerror Use_Different_Token();\r\nerror Not_Released();\r\nerror Withdraw_Failed();\r\nerror Need_To_Send_More_ETH();\r\n\r\ncontract DistroICO is Ownable, ReentrancyGuard {\r\n    uint256 private constant TOTAL_SUPPLY = 1_000_000_000 ether;\r\n    uint256 private constant VESTING_UNLOCK_AMOUNT = 50_000_000 ether;\r\n    uint256 private reservedSupply = 400_000_000 ether;\r\n    uint256 private availableSupply = 600_000_000 ether;\r\n    uint256 private hardCap = 66_600_000 ether;\r\n    uint256 private softCap = 150_000 ether;\r\n    uint256 private startDate;\r\n    uint256 private endDate;\r\n    uint256 private vesting_period;\r\n    uint256 private tokenSold;\r\n    uint256 private fundRaised;\r\n    uint256 private tradePrice;\r\n\r\n    address payable private reservedWallet;\r\n    AggregatorV3Interface private priceFeed;\r\n    IERC20 private token;\r\n\r\n    bool private isReleased;\r\n    bool private isTradable;\r\n    mapping(address => bool) public acceptableTokens;\r\n    mapping(address => uint256) private addressToDistroBalance;\r\n    address[] public acceptableTokensList;\r\n    address private WBNB;\r\n    struct Investor {\r\n        address investor;\r\n        uint256 paidAmount;\r\n        uint256 distroAmount;\r\n        address paymentToken;\r\n    }\r\n\r\n    Investor[] public investors;\r\n\r\n    constructor(\r\n        address _priceFeed,\r\n        address _WBNB,\r\n        address _distroToken,\r\n        address _reserveWallet\r\n    ) {\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n        WBNB = _WBNB;\r\n        token = IERC20(_distroToken);\r\n        reservedWallet = payable(_reserveWallet);\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function start(\r\n        address _reserveWallet,\r\n        address[] memory _acceptableTokens\r\n    ) public onlyOwner {\r\n        if (startDate != 0) revert ICO_Already_Started();\r\n        if (_reserveWallet == address(0)) revert Input_Wallet_Zero();\r\n        if (getToken() == IERC20(address(0))) revert No_Token_contract();\r\n        startDate = block.timestamp;\r\n        endDate = block.timestamp + 180 days;\r\n        for (uint256 i = 0; i < _acceptableTokens.length; i++) {\r\n            acceptableTokens[_acceptableTokens[i]] = true;\r\n            acceptableTokensList.push(_acceptableTokens[i]);\r\n        }\r\n        token.transferFrom(msg.sender, address(this), TOTAL_SUPPLY);\r\n    }\r\n\r\n    function buy(address _paymentToken, uint256 _tokenAmount) public {\r\n        (uint256 totalTokenOut, uint256 assetAmountInUSD) = getTokenOutput(\r\n            _paymentToken,\r\n            _tokenAmount\r\n        );\r\n        uint256 tokenOutput = totalTokenOut * 10 ** 18;\r\n        if (startDate == 0 || block.timestamp > endDate)\r\n            revert ICO_Not_Active();\r\n\r\n        if (tokenOutput == 0) revert Cannot_Buy_Lessthan_One_Token();\r\n        if (availableSupply < tokenOutput) revert No_Token_Available();\r\n        if (fundRaised >= hardCap) revert Hardcap_Reached();\r\n        if (fundRaised > softCap && isReleased) {\r\n            IERC20(_paymentToken).transferFrom(\r\n                msg.sender,\r\n                reservedWallet,\r\n                _tokenAmount\r\n            );\r\n\r\n            token.transfer(msg.sender, tokenOutput);\r\n        } else {\r\n            IERC20(_paymentToken).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenAmount\r\n            );\r\n        }\r\n        investors.push(\r\n            Investor(msg.sender, _tokenAmount, tokenOutput, _paymentToken)\r\n        );\r\n        addressToDistroBalance[msg.sender] += tokenOutput;\r\n        availableSupply -= tokenOutput;\r\n        tokenSold += tokenOutput;\r\n        fundRaised += assetAmountInUSD;\r\n    }\r\n\r\n    function getTokenOutput(\r\n        address _asset,\r\n        uint256 _amount\r\n    ) public view returns (uint256 totalTokenOut, uint256 assetAmountInUsd) {\r\n        uint256 assetAmountInUSD;\r\n        if (_asset == WBNB) {\r\n            assetAmountInUSD = getConversionRate(_amount);\r\n        } else {\r\n            assetAmountInUSD = _amount;\r\n        }\r\n        uint256 tokenOutput = assetAmountInUSD / getPrice();\r\n        return (tokenOutput, assetAmountInUSD);\r\n    }\r\n\r\n    function release() public onlyOwner {\r\n        if (isReleased) revert Already_Released();\r\n        if (fundRaised < softCap) revert Softcap_Not_Reached();\r\n        for (uint256 i = 0; i < acceptableTokensList.length; i++) {\r\n            IERC20 token_ = IERC20(acceptableTokensList[i]);\r\n            uint256 tAmount = token_.balanceOf(address(this));\r\n            if (tAmount > 0) {\r\n                token_.transfer(msg.sender, tAmount);\r\n            }\r\n        }\r\n        for (uint256 i = 0; i < investors.length; i++) {\r\n            Investor memory investor = investors[i];\r\n            token.transfer(investor.investor, investor.distroAmount);\r\n        }\r\n        isReleased = true;\r\n    }\r\n\r\n    function refund() public onlyOwner {\r\n        if (isReleased) revert Already_Released();\r\n        if (fundRaised > softCap) revert Softcap_Already_Reached();\r\n        if (block.timestamp < endDate) revert End_Date_Not_Passed();\r\n        for (uint256 i = 0; i < investors.length; i++) {\r\n            Investor memory investor = investors[i];\r\n            IERC20(investor.paymentToken).transfer(\r\n                investor.investor,\r\n                investor.paidAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function updateReservedWallet(\r\n        address payable _reserveWallet\r\n    ) public onlyOwner {\r\n        reservedWallet = _reserveWallet;\r\n    }\r\n\r\n    function trade(\r\n        address _paymentToken,\r\n        uint256 _dTokenAmount\r\n    ) public nonReentrant {\r\n        uint256 amountInUSD = (_dTokenAmount * tradePrice) / 10 ** 18;\r\n        uint256 tradeAmount;\r\n        if (_paymentToken == WBNB) {\r\n            uint256 wbnbToUSD = getConversionRate(1 ether);\r\n            tradeAmount = (1 / wbnbToUSD) * amountInUSD;\r\n        } else {\r\n            tradeAmount = amountInUSD;\r\n        }\r\n        if (IERC20(_paymentToken).balanceOf(address(this)) < tradeAmount)\r\n            revert Use_Different_Token();\r\n        token.transferFrom(msg.sender, address(this), _dTokenAmount);\r\n        IERC20(_paymentToken).transfer(msg.sender, tradeAmount);\r\n    }\r\n\r\n    function startTrade(\r\n        address[] memory _tokens,\r\n        uint256[] memory _amounts,\r\n        uint256 _tradePrice\r\n    ) public onlyOwner {\r\n        isTradable = true;\r\n        vesting_period = block.timestamp + 180 days;\r\n        if (_tokens.length != _amounts.length)\r\n            revert Amounts_and_Token_Not_macth();\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IERC20(_tokens[i]).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amounts[i]\r\n            );\r\n        }\r\n        tradePrice = _tradePrice;\r\n    }\r\n\r\n    function unlockReserveToken() public onlyOwner {\r\n        if (!isTradable) revert ICO_Not_Tradable();\r\n        if (vesting_period == 0 || block.timestamp < vesting_period)\r\n            revert VestingPeriod_Not_Ended();\r\n        if (VESTING_UNLOCK_AMOUNT > reservedSupply)\r\n            revert All_Reserved_Token_Unlocked();\r\n        vesting_period = block.timestamp + 30 days;\r\n        reservedSupply -= VESTING_UNLOCK_AMOUNT;\r\n        token.transfer(reservedWallet, VESTING_UNLOCK_AMOUNT);\r\n    }\r\n\r\n    function withdraw(address _token) public onlyOwner {\r\n        if (!isReleased) revert Not_Released();\r\n        IERC20(_token).transfer(\r\n            reservedWallet,\r\n            IERC20(_token).balanceOf(address(this))\r\n        );\r\n        (bool success, ) = reservedWallet.call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n        if (!success) revert Withdraw_Failed();\r\n    }\r\n\r\n    function getTotalRaisedAmount() public view returns (uint256) {\r\n        uint256 raisedAmount = fundRaised / 10 ** 18;\r\n        return raisedAmount;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        if (tokenSold < 40_000_000 ether) {\r\n            return 0.001 ether;\r\n        } else if (tokenSold < 80_000_000 ether) {\r\n            return 0.002 ether;\r\n        } else if (tokenSold < 120_000_000 ether) {\r\n            return 0.003 ether;\r\n        } else if (tokenSold < 160_000_000 ether) {\r\n            return 0.004 ether;\r\n        } else if (tokenSold < 200_000_000 ether) {\r\n            return 0.005 ether;\r\n        } else if (tokenSold < 240_000_000 ether) {\r\n            return 0.01 ether;\r\n        } else if (tokenSold < 280_000_000 ether) {\r\n            return 0.02 ether;\r\n        } else if (tokenSold < 320_000_000 ether) {\r\n            return 0.03 ether;\r\n        } else if (tokenSold < 360_000_000 ether) {\r\n            return 0.04 ether;\r\n        } else if (tokenSold < 400_000_000 ether) {\r\n            return 0.05 ether;\r\n        } else if (tokenSold < 440_000_000 ether) {\r\n            return 0.1 ether;\r\n        } else if (tokenSold < 480_000_000 ether) {\r\n            return 0.2 ether;\r\n        } else if (tokenSold < 520_000_000 ether) {\r\n            return 0.3 ether;\r\n        } else if (tokenSold < 560_000_000 ether) {\r\n            return 0.4 ether;\r\n        } else {\r\n            return 0.5 ether;\r\n        }\r\n    }\r\n\r\n    function getBNBToUSDPrice() public view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 bnbAmount\r\n    ) public view returns (uint256) {\r\n        uint256 bnbPrice = getBNBToUSDPrice();\r\n        uint256 bnbAmountInUsd = (bnbPrice * bnbAmount) / 1000000000000000000;\r\n        return bnbAmountInUsd;\r\n    }\r\n\r\n    function getAvailableSupply() public view returns (uint256) {\r\n        return availableSupply;\r\n    }\r\n\r\n    function getReserveWallet() public view returns (address) {\r\n        return reservedWallet;\r\n    }\r\n\r\n    function getHardCap() public view returns (uint256) {\r\n        return hardCap;\r\n    }\r\n\r\n    function getSoftCap() public view returns (uint256) {\r\n        return softCap;\r\n    }\r\n\r\n    function getStartDate() public view returns (uint256) {\r\n        return startDate;\r\n    }\r\n\r\n    function getEndDate() public view returns (uint256) {\r\n        return endDate;\r\n    }\r\n\r\n    function getTokenSold() public view returns (uint256) {\r\n        return tokenSold;\r\n    }\r\n\r\n    function getFundRaised() public view returns (uint256) {\r\n        return fundRaised;\r\n    }\r\n\r\n    function getToken() public view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    function getReleasedStatus() public view returns (bool) {\r\n        return isReleased;\r\n    }\r\n\r\n    function getDistroBalance(address _user) public view returns (uint256) {\r\n        if (!isReleased) {\r\n            return addressToDistroBalance[_user];\r\n        } else {\r\n            return token.balanceOf(_user);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distroToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"All_Reserved_Token_Unlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Already_Released\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Amounts_and_Token_Not_macth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cannot_Buy_Lessthan_One_Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"End_Date_Not_Passed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Hardcap_Reached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICO_Already_Started\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICO_Not_Active\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICO_Not_Tradable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Input_Wallet_Zero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"No_Token_Available\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"No_Token_contract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Released\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Softcap_Already_Reached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Softcap_Not_Reached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Use_Different_Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingPeriod_Not_Ended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw_Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptableTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBToUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDistroBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoftCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRaisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distroAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_acceptableTokens\",\"type\":\"address[]\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_tradePrice\",\"type\":\"uint256\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dTokenAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReserveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"updateReservedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DistroICO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000900c5d461476fd225b7b26bc795c9c8e7001fbe4000000000000000000000000bcf33c93025aca0c13937bab6ba8d73807fc5387", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31d06365f557d00ac8ac841720f353a287e91c23558a6e6b7c6945beffce3acc"}