{"SourceCode": "pragma solidity ^0.8.17;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\n\r\n\u2588\u2584\u2584\u2003\u2588\u2591\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2580\u2003 \u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003\u2584\u2580\u2588\u2003 \u2003\u2588\u2580\u2580\u2003\u2584\u2580\u2588\u2003\u2580\u2588\u2580\r\n\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2588\u2584\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2588\u2003 \u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2591\u2588\u2591\r\n\r\nHello world. \r\n\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c; \r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface DexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface DexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        authorizations[_owner] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BubbleTeaCat is Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public lpToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\r\n    address private routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    uint8 constant private _decimals = 18;\r\n\r\n    uint256 private _totalSupply = 3000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = _totalSupply * 5 / 1000;\r\n    uint256 public _walletMax = _totalSupply * 5 / 1000;\r\n\r\n    string constant private _name = \"Bubble Tea Cat\";\r\n    string constant private _symbol = \"BUBCAT\";\r\n\r\n    bool public restrictWhales = true;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n\r\n    uint256 public liquidityFee = 3;\r\n    uint256 public marketingFee = 2;\r\n    uint256 public devFee = 2;\r\n    uint256 public tokenFee = 7;\r\n\r\n    uint256 public totalFee = 0;\r\n\r\n    bool public takeBuyFee = true;\r\n    bool public takeSellFee = true;\r\n    bool public takeTransferFee = true;\r\n\r\n    address private lpWallet;\r\n    address private projectAddress;\r\n    address private teamAddress;\r\n    address private nativeWallet;\r\n\r\n    DexRouter public router;\r\n    address public pair;\r\n    mapping(address => bool) public isPair;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    bool public tradingOpen = false;\r\n    \r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public swapAndLiquifyByLimitOnly = false;\r\n    \r\n    mapping (address => bool) public isEcosystem;\r\n\r\n    uint256 public swapThreshold = _totalSupply * 1 / 2000;\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\r\n    constructor() {\r\n        router = DexRouter(routerAddress);\r\n        pair = DexFactory(router.factory()).createPair(lpToken, address(this));\r\n\r\n        isPair[pair] = true;\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[address(this)][address(pair)] = type(uint256).max;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[DEAD] = true;\r\n        isEcosystem[address(this)] = true;\r\n        isEcosystem[msg.sender] = true;\r\n        isEcosystem[address(pair)] = true;\r\n        isEcosystem[address(router)] = true;\r\n\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n\r\n        lpWallet = 0xb261CD57C25BfF0fc3884d7caFbCCAb245695336;\r\n        projectAddress = 0xA5546027D24dA502f67E52366E2daC7257B04B15;\r\n        teamAddress = 0x6a6117321F22104d475cD5E8723562f7124AD9B1;\r\n        nativeWallet = 0xe2f7598dB57fc42B80be88078C1D718a2302469c;\r\n         \r\n        isFeeExempt[projectAddress] = true;\r\n        isFeeExempt[teamAddress] = true;\r\n        isFeeExempt[nativeWallet] = true;\r\n        isFeeExempt[lpWallet] = true;\r\n\r\n        isTxLimitExempt[lpWallet] = true;\r\n        isTxLimitExempt[projectAddress] = true;\r\n        isTxLimitExempt[teamAddress] = true;\r\n        isTxLimitExempt[nativeWallet] = true;\r\n\r\n        totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() external pure override returns (string memory) {return _name;}\r\n\r\n    function symbol() external pure override returns (string memory) {return _symbol;}\r\n\r\n    function decimals() external pure override returns (uint8) {return _decimals;}\r\n\r\n    function totalSupply() external view override returns (uint256) {return _totalSupply;}\r\n\r\n    function getOwner() external view override returns (address) {return owner();}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (inSwapAndLiquify) {return _basicTransfer(sender, recipient, amount);}\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen, \"\");\r\n        }\r\n\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit\");\r\n        if (isPair[recipient] && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold) {marketingAndLiquidity();}\r\n        if (!launched() && isPair[recipient]) {\r\n            require(_balances[sender] > 0, \"\");\r\n            launch();\r\n        }\r\n\r\n        //Exchange tokens\r\n         _balances[sender] = _balances[sender].sub(amount, \"\");\r\n\r\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\r\n            require(_balances[recipient].add(amount) <= _walletMax, \"\");\r\n        }\r\n\r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? extractFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    function extractFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint nativeAmount = 0;\r\n        uint256 feeAmount = 0;\r\n\r\n        if(isPair[sender] && takeBuyFee){\r\n            if(tokenFee > 0){\r\n                nativeAmount = amount.mul(tokenFee).div(100);\r\n                _balances[nativeWallet] = _balances[nativeWallet].add(nativeAmount);\r\n                emit Transfer(sender, nativeWallet, nativeAmount);\r\n            }\r\n        }\r\n        if(isPair[recipient] && takeSellFee){\r\n            feeAmount = amount.mul(totalFee).div(100);\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        if(!isPair[sender] && !isPair[recipient] && takeTransferFee){\r\n            if(tokenFee > 0){\r\n                nativeAmount = amount.mul(tokenFee).div(100);\r\n                _balances[nativeWallet] = _balances[nativeWallet].add(nativeAmount);\r\n                emit Transfer(sender, nativeWallet, nativeAmount);\r\n            }\r\n        }\r\n        return amount.sub(feeAmount).sub(nativeAmount);\r\n    }\r\n\r\n    function marketingAndLiquidity() internal lockTheSwap {\r\n        uint256 tokensToLiquify = _balances[address(this)];\r\n        uint256 amountToLiquify = tokensToLiquify.mul(liquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify);\r\n\r\n        address[] memory path_long = new address[](3);\r\n        address[] memory path = new address[](2);\r\n\r\n        path_long[0] = address(this);\r\n        path_long[1] = lpToken;\r\n        path_long[2] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path_long,\r\n            address(this),\r\n            block.timestamp\r\n        ); \r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\r\n\r\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHDev = amountETH.mul(devFee).div(totalETHFee);\r\n        \r\n        (bool tmpSuccess1,) = payable(projectAddress).call{value : amountETHMarketing, gas : 30000}(\"\");\r\n        tmpSuccess1 = false;\r\n\r\n        (tmpSuccess1,) = payable(teamAddress).call{value : amountETHDev, gas : 30000}(\"\");\r\n        tmpSuccess1 = false;\r\n\r\n        path[0] = router.WETH();\r\n        path[1] = lpToken;\r\n        \r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountETHLiquidity}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountLPIDk = amountToLiquify;\r\n\r\n        if(amountToLiquify > 0){\r\n\r\n            uint256 lpTokenBalance = IERC20(lpToken).balanceOf(address(this));            \r\n            IERC20(lpToken).approve(address(router), lpTokenBalance);        \r\n\r\n            router.addLiquidity(\r\n                lpToken,\r\n                address(this),\r\n                lpTokenBalance,                \r\n                amountLPIDk,\r\n                0,\r\n                0,\r\n                lpWallet,\r\n                block.timestamp\r\n            );\r\n\r\n            emit AutoLiquify(lpTokenBalance, amountLPIDk);\r\n        }\r\n\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner{\r\n        marketingAndLiquidity();\r\n    }\r\n\r\n    function changeisEcosystem(bool _bool, address _address) external onlyOwner {\r\n        isEcosystem[_address] = _bool;\r\n    }\r\n\r\n    function setWalletLimit(uint256 newLimit) external onlyOwner {\r\n        require(newLimit >= 5, \"Wallet Limit needs to be at least 0.5%\");\r\n        _walletMax = _totalSupply * newLimit / 1000;\r\n    }\r\n\r\n    function setTxLimit(uint256 newLimit) external onlyOwner {\r\n        require(newLimit >= 5, \"Wallet Limit needs to be at least 0.5%\");\r\n        _maxTxAmount = _totalSupply * newLimit / 1000;\r\n    }\r\n\r\n    function openTrading() public onlyOwner {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function addWhitelist(address target) public onlyOwner{\r\n        authorizations[target] = true;\r\n        isFeeExempt[target] = true;\r\n        isTxLimitExempt[target] = true;\r\n        isEcosystem[target] = true;\r\n    }\r\n\r\n    function changeFees(uint256 newLiqFee, uint256 newMarketingFee, uint256 newDevFee, uint256 newNativeFee) external onlyOwner {\r\n        liquidityFee = newLiqFee;\r\n        marketingFee = newMarketingFee;\r\n        devFee = newDevFee;\r\n        tokenFee = newNativeFee;\r\n\r\n        totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n        require ( totalFee + tokenFee < 25);\r\n    }\r\n\r\n    function isAuth(address _address, bool status) public onlyOwner{\r\n        authorizations[_address] = status;\r\n    }\r\n\r\n    function changePair(address _address, bool status) public onlyOwner{\r\n        isPair[_address] = status;\r\n    }\r\n\r\n    function changeTakeBuyfee(bool status) public onlyOwner{\r\n        takeBuyFee = status;\r\n    }\r\n\r\n    function changeTakeSellfee(bool status) public onlyOwner{\r\n        takeSellFee = status;\r\n    }\r\n\r\n    function changeTakeTransferfee(bool status) public onlyOwner{\r\n        takeTransferFee = status;\r\n    }\r\n\r\n    function changeSwapbackSettings(bool status, uint256 newAmount) public onlyOwner{\r\n        swapAndLiquifyEnabled = status;\r\n        swapThreshold = newAmount;\r\n    }\r\n\r\n    function changeWallets(address newMktWallet, address newDevWallet, address newLpWallet, address newNativeWallet) public onlyOwner{\r\n        lpWallet = newLpWallet;\r\n        projectAddress = newMktWallet;\r\n        teamAddress = newDevWallet;\r\n        nativeWallet = newNativeWallet;\r\n    }\r\n\r\n    function removeERC20(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(this), \"Cant remove the native token\");\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function removeEther(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(msg.sender).transfer(amountETH * amountPercentage / 100);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNativeFee\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTakeBuyfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTakeSellfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTakeTransferfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMktWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newNativeWallet\",\"type\":\"address\"}],\"name\":\"changeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeisEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"isAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEcosystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"removeERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"removeEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictWhales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract DexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BubbleTeaCat", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://efc12ebccc12f0c9a32f01f1ffe2b623d1f1a03528fa826f2357233e86450163"}