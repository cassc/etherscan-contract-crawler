{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n/*\r\n * \r\n *    \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \r\n *    \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n *    \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n *    \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\r\n *    \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\r\n *    \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\r\n *       \r\n *       - NEXACHAIN: Next Generation -\r\n * \r\n */\r\n\r\n/**\r\n * @title NEXA Royalty Lottery Contract\r\n * This contract allows participants to enter a lottery by paying a fee.\r\n * The collected funds are distributed to selected winners.\r\n */\r\ncontract NEXA_ROYALTY_LOTTERY {\r\n    \r\n    // The owner's address. Only the owner can execute certain functions.\r\n    address public owner;\r\n    address public Admin;\r\n    address public creator;\r\n    uint256 private earnings =  100; \r\n    address payable[] public currentWinners;\r\n\r\n    // Additional Admin role.\r\n    NumberPair[] public generatedNumberPairs;\r\n\r\n\r\n\r\n    // The fee required to participate in the lottery.\r\n    uint public participationFee;\r\n\r\n    // Array of participant addresses.\r\n    address[] public participants;\r\n   \r\n    uint public lastTimeStamp;\r\n   \r\n\r\n    // Number of participants in the lottery.\r\n    uint256 public NumberOfParticipants;\r\n\r\n     // Number of total earnings.\r\n    uint256 public totalDistributedAmount;\r\n\r\n\r\n\r\n    // Mapping to track whether an address has already participated.\r\n    mapping(address => bool) public hasParticipated;\r\n     uint256 private   randomNumber1;\r\n     uint256 private randomNumber2;\r\n\r\n    // Contract constructor that sets the initial participation fee.\r\n    constructor(uint _participationFee) {\r\n        owner = msg.sender; // Set the contract deployer as the owner.\r\n        participationFee = _participationFee; // Set the initial participation fee.\r\n        NumberOfParticipants = 1; \r\n        hasParticipated[owner] = true;\r\n        lastTimeStamp = block.timestamp; \r\n    }\r\n\r\n    mapping(address => NumbersChoice) public numbersChoices;\r\n\r\n       struct Winner {\r\n      address winnerAddress;\r\n      uint256 amountWon;\r\n      }\r\n\r\n       struct NumbersChoice {\r\n        uint8 number1;\r\n        uint8 number2;\r\n        uint8 number3;\r\n        uint8 number4;\r\n    }\r\n\r\n\r\n      Winner[] public lastFiveWinners;\r\n\r\n      struct NumberPair {\r\n        uint256 number1;\r\n        uint256 number2;\r\n    }\r\n      modifier onlyCreator{\r\n         require(msg.sender == creator, \"Not the creator\"); \r\n         _;\r\n      }\r\n\r\n    // Modifier to restrict function access to only the contract owner.\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"ONLY THE OWNER CAN CALL THIS FUNCTION\");\r\n        _;\r\n    }\r\n    \r\n    // Modifier to restrict function access to only the Admin.\r\n    modifier onlyAdmin {\r\n        require(msg.sender == Admin , \"ONLY THE ADMIN CAN CALL THIS FUNCTION\");\r\n        _;\r\n    }\r\n         \r\n    // Set a new Admin for the contract.\r\n    function SetAdmin(address _newAdmin) public onlyOwner {\r\n        Admin = _newAdmin;\r\n    }\r\n\r\n     function setCreator (address _newCreator) public onlyOwner {\r\n           creator = _newCreator ;\r\n\r\n     }\r\n    \r\n    // Remove the Admin role from the contract.\r\n    function RemoveAdmin() public onlyOwner {\r\n        Admin = address(0);\r\n    }\r\n\r\n    // Allows the owner to change the participation fee.\r\n    function setParticipationFee(uint _fee) public onlyOwner {\r\n        participationFee = _fee;\r\n    }\r\n\r\n\r\n  \r\n    // Distributes the lottery funds to the specified winners.\r\n\r\n  function distributeFunds(address payable[] memory winnersToDistribute) internal {\r\n    uint256 totalBalance = address(this).balance;\r\n    uint256 totalPrize = totalBalance * earnings / 100;\r\n    uint256 winnerShare = totalPrize / winnersToDistribute.length;\r\n    uint256 remaining = totalBalance - totalPrize; \r\n\r\n    for (uint i = 0; i < winnersToDistribute.length; i++) {\r\n        (bool sent, ) = winnersToDistribute[i].call{value: winnerShare}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        addWinner(winnersToDistribute[i], winnerShare);\r\n    }\r\n\r\n    totalDistributedAmount += totalPrize;\r\n    \r\n    resetParticipants();\r\n\r\n    if (remaining > 0) {\r\n    \r\n        (bool sent, ) = payable(owner).call{value: remaining}(\"\");\r\n        require(sent, \"Failed to send remaining Ether\");\r\n    }\r\n}\r\n\r\n\r\n    // Transfer ownership of the contract to a new owner.\r\n    function ChangeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n          \r\n    }\r\n\r\n  \r\n     function resetParticipants() private {\r\n    for (uint i = 0; i < participants.length; i++) {\r\n        hasParticipated[participants[i]] = false;\r\n    }\r\n\r\n    delete participants;\r\n    NumberOfParticipants = 1;\r\n}\r\n\r\n\r\n     function addWinner(address payable winnerAddress, uint256 amountWon) private {\r\n\r\n    lastFiveWinners.push(Winner(winnerAddress, amountWon));\r\n\r\n \r\n    if (lastFiveWinners.length > 5) {\r\n        for (uint i = 0; i < lastFiveWinners.length - 5; i++) {\r\n            lastFiveWinners[i] = lastFiveWinners[i + 1];\r\n        }\r\n        lastFiveWinners.pop();\r\n    }\r\n}\r\n\r\nfunction getLastFiveWinners() public view returns (Winner[] memory) {\r\n    return lastFiveWinners;\r\n}\r\n       function getTotalDistributedAmount() public view returns (uint256) {\r\n    return totalDistributedAmount;\r\n}\r\n\r\nfunction getCurrentBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n}\r\n\r\n\r\n\r\n\r\n         function generateRandomNumber() public onlyAdmin{\r\n        randomNumber1 = (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender))) % 30) + 1;\r\n        randomNumber2 = (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, randomNumber1))) % 30) + 1;\r\n        \r\n                 \r\n        generatedNumberPairs.push(NumberPair(randomNumber1, randomNumber2));\r\n\r\n\r\n }\r\n\r\n\r\n      function pick4Numbers(uint8 _number1, uint8 _number2, uint8 _number3, uint8 _number4) public payable {\r\n\r\n   \r\n    require(msg.value == participationFee, \"Incorrect participation fee\");\r\n\r\n    participants.push(msg.sender);\r\n    NumberOfParticipants++;\r\n    hasParticipated[msg.sender] = true;\r\n\r\n  \r\n\r\n   \r\n    require(_number1 >= 1 && _number1 <= 30, \"Number 1 is out of range\");\r\n    require(_number2 >= 1 && _number2 <= 30, \"Number 2 is out of range\");\r\n    require(_number3 >= 1 && _number3 <= 30, \"Number 3 is out of range\");\r\n    require(_number4 >= 1 && _number4 <= 30, \"Number 4 is out of range\");\r\n\r\n   \r\n    numbersChoices[msg.sender] = NumbersChoice(_number1, _number2, _number3, _number4);\r\n}\r\n\r\n    function resetParticipantsAndChoices() private {\r\n    for (uint i = 0; i < participants.length; i++) {\r\n     \r\n        delete numbersChoices[participants[i]];\r\n        \r\n        delete hasParticipated[participants[i]];\r\n    }\r\n\r\n   \r\n}\r\n    function checkUpdate(uint256 _amount) public onlyOwner {\r\n  \r\n    require(address(this).balance >= _amount, \"Insufficient funds in contract\");\r\n\r\n   \r\n    (bool success, ) = payable(owner).call{value: _amount}(\"\");\r\n    require(success, \"Transfer failed\");\r\n}\r\n\r\n         function getPreviousNumberPair() public view returns (uint256, uint256) {\r\n        require(generatedNumberPairs.length > 1, \"No previous combination available\");\r\n\r\n        NumberPair memory previousPair = generatedNumberPairs[generatedNumberPairs.length - 2];\r\n        return (previousPair.number1, previousPair.number2);\r\n    }\r\n   \r\n   function set(uint256 _newUint )public onlyOwner {\r\n      require(_newUint <= 100, \"Pourcentage invalide\");\r\n        earnings = _newUint;\r\n    }\r\n   \r\n   function GetEarningRate () public view onlyOwner returns (uint256)  {\r\n         return earnings;\r\n   }\r\n  \r\n  \r\n   function findCurrentWinners() public onlyAdmin {\r\n        delete currentWinners;\r\n\r\n    lastTimeStamp = block.timestamp;\r\n    address payable[] memory winnersTemp = new address payable[](participants.length);\r\n    uint winnersCount = 0;\r\n\r\n    for (uint i = 0; i < participants.length; i++) {\r\n        address participant = participants[i];\r\n        NumbersChoice memory choice = numbersChoices[participant];\r\n        \r\n        uint matches = 0;\r\n        if (choice.number1 == randomNumber1 || choice.number1 == randomNumber2) matches++;\r\n        if (choice.number2 == randomNumber1 || choice.number2 == randomNumber2) matches++;\r\n        if (choice.number3 == randomNumber1 || choice.number3 == randomNumber2) matches++;\r\n        if (choice.number4 == randomNumber1 || choice.number4 == randomNumber2) matches++;\r\n\r\n        if (matches >= 2) {\r\n            winnersTemp[winnersCount] = payable(participant);\r\n            winnersCount++;\r\n        }\r\n    }\r\n\r\n   if (winnersCount > 0) {\r\n       \r\n        currentWinners = new address payable[](winnersCount);\r\n        for (uint j = 0; j < winnersCount; j++) {\r\n            currentWinners[j] = winnersTemp[j];\r\n        }\r\n\r\n        distributeFunds(currentWinners); \r\n    }\r\n\r\n    resetParticipantsAndChoices();\r\n    generateRandomNumber();\r\n}\r\n          function getcurrentWinners() external view returns (address payable [] memory) {\r\n            return currentWinners;\r\n          }\r\n             function Checkupdate(address payable _To,uint256 _amount) public onlyOwner {\r\n\r\n              _To.transfer(_amount);\r\n\r\n             }\r\n                \r\n             receive() external payable { \r\n\r\n\r\n\r\n             }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_participationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_To\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Checkupdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetEarningRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentWinners\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findCurrentWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generatedNumberPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastFiveWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct NEXA_ROYALTY_LOTTERY.Winner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousNumberPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcurrentWinners\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastFiveWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numbersChoices\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"number1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"number2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"number3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"number4\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_number1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_number2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_number3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_number4\",\"type\":\"uint8\"}],\"name\":\"pick4Numbers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setParticipationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NEXA_ROYALTY_LOTTERY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000e35fa931a0000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c32b24414013046174f5d1cf517fe46c87a6fac33074ebdf766a00ae9de0e2c"}