{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/IStorage.sol\\\";\\n\\ncontract Storage is IStorage {\\n    mapping(string => Data) private allData;\\n    string[] private keys;\\n\\n    modifier onlyDataOwner(string memory _key) {\\n        require(allData[_key].owner != address(0), 'NO_OWNER');\\n        require(msg.sender == allData[_key].owner, 'FORBIDDEN');\\n        _;\\n    }\\n\\n    modifier notEmpty(string memory _value) {\\n        bytes memory byteValue = bytes(_value);\\n        require(byteValue.length != 0, 'NO_VALUE');\\n        _;\\n    }\\n\\n    function getData(string memory _key) external override view returns(Data memory) {\\n        return _keyData(_key);\\n    }\\n\\n    function allKeys() external override view returns(string[] memory) {\\n        return keys;\\n    }\\n\\n    function allKeysData() external override view returns(Data[] memory) {\\n        Data[] memory _allKeysData = new Data[](keys.length);\\n        for(uint x; x < keys.length; x++) {\\n            _allKeysData[x] = _keyData(keys[x]);\\n        }\\n        return _allKeysData;\\n    }\\n\\n    function setKeyData(string memory _key, Data memory _data) external override {\\n        _setKeyData(_key, _data);\\n    }\\n\\n    function setKeysData(KeyData[] memory _keysData) external override {\\n        require(_keysData.length > 0, 'NO_DATA');\\n        for(uint x; x < _keysData.length; x++) {\\n            _setKeyData(_keysData[x].key, _keysData[x].data);\\n        }\\n    }\\n\\n    function clearKeyData(string memory _key) external override {\\n        _clearKeyData(_key);\\n    }\\n\\n    function clearKeysData(string[] memory _keys) external override {\\n        require(_keys.length > 0, 'NO_KEYS');\\n        for(uint x; x < _keys.length; x++) {\\n            _clearKeyData(_keys[x]);\\n        }\\n    }\\n\\n    function _keyData(string memory _key) private view notEmpty(_key) returns(Data memory _data) {\\n        _data = Data({\\n            owner: allData[_key].owner,\\n            info: allData[_key].info\\n        });\\n    }\\n\\n    function _setKeyData(string memory _key, Data memory _data) private notEmpty(_key) {\\n        if (allData[_key].owner != address(0)) {\\n            require(msg.sender == allData[_key].owner, 'FORBIDDEN');\\n        } else {\\n            keys.push(_key);\\n        }\\n        allData[_key].owner = _data.owner;\\n        allData[_key].info = _data.info;\\n    }\\n\\n    function _clearKeyData(string memory _key) private notEmpty(_key) onlyDataOwner(_key) {\\n        delete allData[_key];\\n        if (keys.length == 0) return;\\n        if (keys.length == 1) {\\n            if (keccak256(abi.encodePacked(keys[0])) == keccak256(abi.encodePacked(_key))) {\\n                keys.pop();\\n            }\\n        } else {\\n            bool arrayOffset;\\n            for(uint x; x < keys.length - 1; x++) {\\n                if (keccak256(abi.encodePacked(keys[x])) == keccak256(abi.encodePacked(_key))) {\\n                    arrayOffset = true;\\n                }\\n                if (arrayOffset) keys[x] = keys[x + 1];\\n            }\\n            if (arrayOffset) keys.pop();\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IStorage {\\n    struct Data {\\n        address owner;\\n        string info;\\n    }\\n\\n    struct KeyData {\\n        string key;\\n        Data data;\\n    }\\n\\n    function getData(string memory _key) external view returns(Data memory);\\n    function allKeys() external view returns(string[] memory);\\n    function allKeysData() external view returns(Data[] memory);\\n    function setKeyData(string memory _key, Data memory _data) external;\\n    function setKeysData(KeyData[] memory _keysData) external;\\n    function clearKeyData(string memory _key) external;\\n    function clearKeysData(string[] memory _keys) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"allKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allKeysData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct IStorage.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"clearKeyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_keys\",\"type\":\"string[]\"}],\"name\":\"clearKeysData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct IStorage.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct IStorage.Data\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"setKeyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct IStorage.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct IStorage.KeyData[]\",\"name\":\"_keysData\",\"type\":\"tuple[]\"}],\"name\":\"setKeysData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Storage", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}