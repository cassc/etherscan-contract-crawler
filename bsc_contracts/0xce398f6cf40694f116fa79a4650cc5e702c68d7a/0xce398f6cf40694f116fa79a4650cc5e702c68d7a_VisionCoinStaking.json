{"SourceCode": "// SPDX-License-Identifier: --MIT--\r\npragma solidity ^0.8.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract VisionCoinStaking  {\r\n\r\n    enum StakeType {\r\n        SHORT_TERM,\r\n        MEDIUM_TERM,\r\n        LONG_TERM\r\n    }\r\n\r\n    struct Stake {\r\n        StakeType stakeType;\r\n        uint256 stakeAmount;\r\n        uint256 rewardPerSecond;\r\n        uint256 stakeStartTime;\r\n        uint256 stakeEndTime;\r\n        uint256 lastRewardTime;\r\n        uint256 claimedRewardAmount;\r\n        uint256 unstakeTime;\r\n        bool isActive;\r\n    }\r\n\r\n    IBEP20 public immutable VISION_TOKEN;\r\n    uint256 public totalStakeAmount;\r\n    uint256 public totalRewardClaimed;\r\n\r\n    uint256 public constant ST_REWARD_RATE_PER_YEAR = 12;\r\n    uint256 public constant MT_REWARD_RATE_PER_YEAR = 14;\r\n    uint256 public constant LT_REWARD_RATE_PER_YEAR = 16;\r\n    uint256 public constant ST_STAKING_DURATION_IN_YEAR = 1;\r\n    uint256 public constant MT_STAKING_DURATION_IN_YEAR = 3;\r\n    uint256 public constant LT_STAKING_DURATION_IN_YEAR = 5;\r\n    uint256 public constant SECONDS_IN_YEAR = 12 * 30 * 24 * 3600; // MONTH_IN_YEAR * DAY_IN_MONTH * HOUR_IN_DAY * SECOND_IN_HOUR\r\n\r\n    mapping(StakeType => uint256) public stakeCounts;\r\n    mapping(StakeType => uint256) public durations;\r\n    mapping(StakeType => uint256 ) public rewardRates;\r\n    mapping(address => uint256) public userStakeCount;\r\n    mapping(StakeType => uint256) public totalStakeAmountPerType;\r\n    mapping(address => mapping(uint256 => Stake)) public userStake;\r\n\r\n    //events\r\n    event RewardClaimed(\r\n        uint256 indexed _stakeId,\r\n        address indexed _stakerAddress,\r\n        uint256 _rewardAmount,\r\n        uint256 rewardTime,\r\n        uint256 _claimedRewardAmount\r\n    );\r\n    event Unstaked(\r\n        uint256 indexed _stakeId,\r\n        address indexed _stakerAddress,\r\n        uint256 _stakeAmount,\r\n        StakeType _stakeType,\r\n        uint256 _stakeStartTime,\r\n        uint256 _stakeEndTime,\r\n        uint256 _claimedRewardAmount\r\n    );\r\n    event Staked(\r\n        uint256 indexed _stakeId,\r\n        address indexed _stakerAddress,\r\n        uint256 _stakeAmount,\r\n        StakeType _stakeType,\r\n        uint256 _stakeStartTime,\r\n        uint256 _stakeEndTime\r\n    );\r\n\r\n    constructor(address _tokenAddress){\r\n        require(_tokenAddress != address(0), \"token address invalid.\");\r\n\r\n        VISION_TOKEN = IBEP20(_tokenAddress);\r\n        durations[StakeType.SHORT_TERM] = ST_STAKING_DURATION_IN_YEAR * SECONDS_IN_YEAR;\r\n        rewardRates[(StakeType.SHORT_TERM)] = ST_REWARD_RATE_PER_YEAR;\r\n        durations[(StakeType.MEDIUM_TERM)] = MT_STAKING_DURATION_IN_YEAR * SECONDS_IN_YEAR;\r\n        rewardRates[(StakeType.MEDIUM_TERM)] = MT_STAKING_DURATION_IN_YEAR * MT_REWARD_RATE_PER_YEAR;\r\n        durations[(StakeType.LONG_TERM)] = LT_STAKING_DURATION_IN_YEAR * SECONDS_IN_YEAR;\r\n        rewardRates[(StakeType.LONG_TERM)] = LT_STAKING_DURATION_IN_YEAR * LT_REWARD_RATE_PER_YEAR;\r\n    }\r\n\r\n    function pendingReward(address _userAddress, uint256 _stakeId) public view returns(uint256){\r\n        if(_stakeId ==0 || _stakeId > userStakeCount[_userAddress])\r\n            return 0;\r\n\r\n        Stake storage stakeDetail = userStake[_userAddress][_stakeId];\r\n        if(block.timestamp < stakeDetail.lastRewardTime)\r\n            return 0;\r\n\r\n        uint256 rewardAmount;\r\n        if(block.timestamp >= stakeDetail.stakeEndTime ){\r\n            rewardAmount = stakeDetail.rewardPerSecond * (stakeDetail.stakeEndTime - stakeDetail.lastRewardTime);\r\n        }\r\n        else{\r\n            rewardAmount = stakeDetail.rewardPerSecond * (block.timestamp - stakeDetail.lastRewardTime);\r\n        }\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    function availableRewardAmount() public view returns(uint256){\r\n        return (VISION_TOKEN.balanceOf(address(this)) - totalStakeAmount);\r\n    }\r\n\r\n    function calculateRewardPerSecond(StakeType _stakeType ,uint256 _stakeAmount) internal view returns(uint256){\r\n        uint256 totalReward = rewardRates[_stakeType] * _stakeAmount / 100;\r\n\r\n        return (totalReward / durations[_stakeType]);\r\n    }\r\n\r\n    function claimReward(uint256 _stakeId) public{\r\n        require(_stakeId <= userStakeCount[msg.sender] && _stakeId !=0 , \"Invalid stakeId.\");\r\n\r\n        uint256 reward = pendingReward(msg.sender,_stakeId);\r\n        require(reward > 0 , \"No reward available for withdraw.\");\r\n\r\n        Stake storage stakeDetail = userStake[msg.sender][_stakeId];\r\n        uint256 availableRewardToken = availableRewardAmount();\r\n        require(availableRewardToken >= reward, \"Reward token is insuffient!!\");\r\n\r\n        if(block.timestamp > stakeDetail.stakeEndTime)\r\n            stakeDetail.lastRewardTime = stakeDetail.stakeEndTime;\r\n        else\r\n            stakeDetail.lastRewardTime = block.timestamp;\r\n\r\n        stakeDetail.claimedRewardAmount += reward ;\r\n        totalRewardClaimed += reward;\r\n        VISION_TOKEN.transfer(msg.sender , reward);\r\n\r\n        emit RewardClaimed(\r\n            _stakeId,\r\n            msg.sender,\r\n            reward,\r\n            block.timestamp,\r\n            stakeDetail.claimedRewardAmount\r\n        );\r\n    }\r\n\r\n    function stake(StakeType _stakeType , uint256 _stakeAmount) external {\r\n        require(uint256(_stakeType) <= uint256(StakeType.LONG_TERM),\"Invalid stake type\");\r\n        require(_stakeAmount > 0 , \"Staking amount must be greater than Zero.\");\r\n        require(VISION_TOKEN.balanceOf(msg.sender) >= _stakeAmount , \"You have not sufficient Vision Token.\");\r\n\r\n        VISION_TOKEN.transferFrom(msg.sender,address(this),_stakeAmount);\r\n        Stake memory newStake;\r\n        newStake.stakeType = _stakeType;\r\n        newStake.stakeAmount = _stakeAmount;\r\n        newStake.rewardPerSecond = calculateRewardPerSecond(_stakeType ,_stakeAmount);\r\n        newStake.stakeStartTime = block.timestamp;\r\n        newStake.stakeEndTime = block.timestamp + durations[_stakeType];\r\n        newStake.lastRewardTime = block.timestamp;\r\n        newStake.isActive = true;\r\n        stakeCounts[_stakeType]++;\r\n        userStakeCount[msg.sender]++;\r\n        totalStakeAmountPerType[_stakeType] += _stakeAmount;\r\n        totalStakeAmount += _stakeAmount;\r\n        userStake[msg.sender][userStakeCount[msg.sender]]=newStake;\r\n\r\n        emit Staked(\r\n            userStakeCount[msg.sender],\r\n            msg.sender,\r\n            _stakeAmount,\r\n            _stakeType,\r\n            block.timestamp,\r\n            newStake.stakeEndTime\r\n        );\r\n    }\r\n\r\n    function unstake(uint256 _stakeId) external{\r\n        require(_stakeId <= userStakeCount[msg.sender] && _stakeId !=0 , \"Invalid stakeId.\");\r\n\r\n        Stake storage stakeDetail = userStake[msg.sender][_stakeId];\r\n        require(block.timestamp > stakeDetail.stakeEndTime , \"staking period not completed.\");\r\n        require(stakeDetail.isActive == true , \"You alredy unstake your tokens.\");\r\n\r\n        stakeDetail.isActive = false;\r\n        stakeDetail.unstakeTime = block.timestamp;\r\n        if(pendingReward(msg.sender, _stakeId) > 0){\r\n            claimReward(_stakeId);\r\n        }\r\n\r\n        totalStakeAmount -= stakeDetail.stakeAmount;\r\n        totalStakeAmountPerType[stakeDetail.stakeType] -= stakeDetail.stakeAmount;\r\n        VISION_TOKEN.transfer(msg.sender , stakeDetail.stakeAmount);\r\n\r\n        emit Unstaked(\r\n            _stakeId,\r\n            msg.sender,\r\n            stakeDetail.stakeAmount,\r\n            stakeDetail.stakeType,\r\n            stakeDetail.stakeStartTime,\r\n            stakeDetail.stakeEndTime,\r\n            stakeDetail.claimedRewardAmount\r\n        );\r\n    }\r\n\r\n    function emergencyUnstake(uint256 _stakeId) external {\r\n        require(_stakeId <= userStakeCount[msg.sender] && _stakeId !=0 , \"Invalid stakeId.\");\r\n\r\n        Stake storage stakeDetail = userStake[msg.sender][_stakeId];\r\n        require(block.timestamp > stakeDetail.stakeEndTime , \"staking period not completed.\");\r\n        require(stakeDetail.isActive == true , \"You alredy unstake your tokens.\");\r\n\r\n        stakeDetail.isActive = false;\r\n        stakeDetail.unstakeTime = block.timestamp;\r\n\r\n        totalStakeAmount -= stakeDetail.stakeAmount;\r\n        totalStakeAmountPerType[stakeDetail.stakeType] -= stakeDetail.stakeAmount;\r\n        VISION_TOKEN.transfer(msg.sender , stakeDetail.stakeAmount);\r\n\r\n        emit Unstaked(\r\n            _stakeId,\r\n            msg.sender,\r\n            stakeDetail.stakeAmount,\r\n            stakeDetail.stakeType,\r\n            stakeDetail.stakeStartTime,\r\n            stakeDetail.stakeEndTime,\r\n            stakeDetail.claimedRewardAmount\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimedRewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeEndTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimedRewardAmount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LT_REWARD_RATE_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LT_STAKING_DURATION_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MT_REWARD_RATE_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MT_STAKING_DURATION_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ST_REWARD_RATE_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ST_STAKING_DURATION_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VISION_TOKEN\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"durations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakeCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStakeAmountPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"enum VisionCoinStaking.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VisionCoinStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000698d8701cc9001ea4c5bf1c4e8f98fb7e26c882e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://329267c34d19052522824dee0e2fa7ce5f860f2ea67c2a7708ec7d19cd84802b"}