{"SourceCode": "pragma solidity 0.4.23;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract TokenRecipient {\r\n    event ReceivedEther(address indexed sender, uint amount);\r\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\r\n\r\n    /**\r\n     * @dev Receive tokens and generate a log event\r\n     * @param from Address from which to transfer tokens\r\n     * @param value Amount of tokens to transfer\r\n     * @param token Address of token\r\n     * @param extraData Additional data to log\r\n     */\r\n    function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\r\n        ERC20 t = ERC20(token);\r\n        require(t.transferFrom(from, this, value));\r\n        emit ReceivedTokens(from, value, token, extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive Ether and generate a log event\r\n     */\r\n    function () payable public {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ncontract ProxyRegistry is Ownable {\r\n\r\n    /* DelegateProxy implementation contract. Must be initialized. */\r\n    address public delegateProxyImplementation;\r\n\r\n    /* Authenticated proxies by user. */\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n\r\n    /* Contracts pending access. */\r\n    mapping(address => uint) public pending;\r\n\r\n    /* Contracts allowed to call those proxies. */\r\n    mapping(address => bool) public contracts;\r\n\r\n    /* Delay period for adding an authenticated contract.\r\n       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\r\n       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\r\n       plenty of time to notice and transfer their assets.\r\n    */\r\n    uint public DELAY_PERIOD = 2 weeks;\r\n\r\n    /**\r\n     * Start the process to enable access for specified contract. Subject to delay period.\r\n     *\r\n     * @dev ProxyRegistry owner only\r\n     * @param addr Address to which to grant permissions\r\n     */\r\n    function startGrantAuthentication (address addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!contracts[addr] && pending[addr] == 0);\r\n        pending[addr] = now;\r\n    }\r\n\r\n    /**\r\n     * End the process to nable access for specified contract after delay period has passed.\r\n     *\r\n     * @dev ProxyRegistry owner only\r\n     * @param addr Address to which to grant permissions\r\n     */\r\n    function endGrantAuthentication (address addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < now));\r\n        pending[addr] = 0;\r\n        contracts[addr] = true;\r\n    }\r\n\r\n    /**\r\n     * Revoke access for specified contract. Can be done instantly.\r\n     *\r\n     * @dev ProxyRegistry owner only\r\n     * @param addr Address of which to revoke permissions\r\n     */    \r\n    function revokeAuthentication (address addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        contracts[addr] = false;\r\n    }\r\n\r\n    /**\r\n     * Register a proxy contract with this registry\r\n     *\r\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\r\n     * @return New AuthenticatedProxy contract\r\n     */\r\n    function registerProxy()\r\n        public\r\n        returns (OwnableDelegateProxy proxy)\r\n    {\r\n        require(proxies[msg.sender] == address(0));\r\n        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(\"initialize(address,address)\", msg.sender, address(this)));\r\n        proxies[msg.sender] = proxy;\r\n        return proxy;\r\n    }\r\n\r\n}\r\n\r\ncontract WyvernProxyRegistry is ProxyRegistry {\r\n\r\n    string public constant name = \"Project Wyvern Proxy Registry\";\r\n\r\n    /* Whether the initial auth address has been set. */\r\n    bool public initialAddressSet = false;\r\n\r\n    constructor ()\r\n        public\r\n    {\r\n        delegateProxyImplementation = new AuthenticatedProxy();\r\n    }\r\n\r\n    /** \r\n     * Grant authentication to the initial Exchange protocol contract\r\n     *\r\n     * @dev No delay, can only be called once - after that the standard registry process with a delay must be used\r\n     * @param authAddress Address of the contract to grant authentication\r\n     */\r\n    function grantInitialAuthentication (address authAddress)\r\n        onlyOwner\r\n        public\r\n    {\r\n        require(!initialAddressSet);\r\n        initialAddressSet = true;\r\n        contracts[authAddress] = true;\r\n    }\r\n\r\n}\r\n\r\ncontract OwnedUpgradeabilityStorage {\r\n\r\n  // Current implementation\r\n  address internal _implementation;\r\n\r\n  // Owner of the contract\r\n  address private _upgradeabilityOwner;\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function upgradeabilityOwner() public view returns (address) {\r\n    return _upgradeabilityOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the owner\r\n   */\r\n  function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n    _upgradeabilityOwner = newUpgradeabilityOwner;\r\n  }\r\n\r\n  /**\r\n  * @dev Tells the address of the current implementation\r\n  * @return address of the current implementation\r\n  */\r\n  function implementation() public view returns (address) {\r\n    return _implementation;\r\n  }\r\n\r\n  /**\r\n  * @dev Tells the proxy type (EIP 897)\r\n  * @return Proxy type, 2 for forwarding proxy\r\n  */\r\n  function proxyType() public pure returns (uint256 proxyTypeId) {\r\n    return 2;\r\n  }\r\n}\r\n\r\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\r\n\r\n    /* Whether initialized. */\r\n    bool initialized = false;\r\n\r\n    /* Address which owns this proxy. */\r\n    address public user;\r\n\r\n    /* Associated registry with contract authentication information. */\r\n    ProxyRegistry public registry;\r\n\r\n    /* Whether access has been revoked. */\r\n    bool public revoked;\r\n\r\n    /* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\r\n    enum HowToCall { Call, DelegateCall }\r\n\r\n    /* Event fired when the proxy access is revoked or unrevoked. */\r\n    event Revoked(bool revoked);\r\n\r\n    /**\r\n     * Initialize an AuthenticatedProxy\r\n     *\r\n     * @param addrUser Address of user on whose behalf this proxy will act\r\n     * @param addrRegistry Address of ProxyRegistry contract which will manage this proxy\r\n     */\r\n    function initialize (address addrUser, ProxyRegistry addrRegistry)\r\n        public\r\n    {\r\n        require(!initialized);\r\n        initialized = true;\r\n        user = addrUser;\r\n        registry = addrRegistry;\r\n    }\r\n\r\n    /**\r\n     * Set the revoked flag (allows a user to revoke ProxyRegistry access)\r\n     *\r\n     * @dev Can be called by the user only\r\n     * @param revoke Whether or not to revoke access\r\n     */\r\n    function setRevoke(bool revoke)\r\n        public\r\n    {\r\n        require(msg.sender == user);\r\n        revoked = revoke;\r\n        emit Revoked(revoke);\r\n    }\r\n\r\n    /**\r\n     * Execute a message call from the proxy contract\r\n     *\r\n     * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\r\n     * @param dest Address to which the call will be sent\r\n     * @param howToCall Which kind of call to make\r\n     * @param calldata Calldata to send\r\n     * @return Result of the call (success or failure)\r\n     */\r\n    function proxy(address dest, HowToCall howToCall, bytes calldata)\r\n        public\r\n        returns (bool result)\r\n    {\r\n        require(msg.sender == user || (!revoked && registry.contracts(msg.sender)));\r\n        if (howToCall == HowToCall.Call) {\r\n            result = dest.call(calldata);\r\n        } else if (howToCall == HowToCall.DelegateCall) {\r\n            result = dest.delegatecall(calldata);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Execute a message call and assert success\r\n     * \r\n     * @dev Same functionality as `proxy`, just asserts the return value\r\n     * @param dest Address to which the call will be sent\r\n     * @param howToCall What kind of call to make\r\n     * @param calldata Calldata to send\r\n     */\r\n    function proxyAssert(address dest, HowToCall howToCall, bytes calldata)\r\n        public\r\n    {\r\n        require(proxy(dest, howToCall, calldata));\r\n    }\r\n\r\n}\r\n\r\ncontract Proxy {\r\n\r\n  /**\r\n  * @dev Tells the address of the implementation where every call will be delegated.\r\n  * @return address of the implementation to which it will be delegated\r\n  */\r\n  function implementation() public view returns (address);\r\n\r\n  /**\r\n  * @dev Tells the type of proxy (EIP 897)\r\n  * @return Type of proxy, 2 for upgradeable proxy\r\n  */\r\n  function proxyType() public pure returns (uint256 proxyTypeId);\r\n\r\n  /**\r\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n  * This function will return whatever the implementation call returns\r\n  */\r\n  function () payable public {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      calldatacopy(ptr, 0, calldatasize)\r\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n      let size := returndatasize\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\r\n  /**\r\n  * @dev Event to show ownership has been transferred\r\n  * @param previousOwner representing the address of the previous owner\r\n  * @param newOwner representing the address of the new owner\r\n  */\r\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  /**\r\n  * @dev This event will be emitted every time the implementation gets upgraded\r\n  * @param implementation representing the address of the upgraded implementation\r\n  */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n  * @dev Upgrades the implementation address\r\n  * @param implementation representing the address of the new implementation to be set\r\n  */\r\n  function _upgradeTo(address implementation) internal {\r\n    require(_implementation != implementation);\r\n    _implementation = implementation;\r\n    emit Upgraded(implementation);\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the address of the proxy owner\r\n   * @return the address of the proxy owner\r\n   */\r\n  function proxyOwner() public view returns (address) {\r\n    return upgradeabilityOwner();\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n    require(newOwner != address(0));\r\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n    setUpgradeabilityOwner(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   */\r\n  function upgradeTo(address implementation) public onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\r\n   * and delegatecall the new implementation for initialization.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n   * signature of the implementation to be called with the needed payload\r\n   */\r\n  function upgradeToAndCall(address implementation, bytes data) payable public onlyProxyOwner {\r\n    upgradeTo(implementation);\r\n    require(address(this).delegatecall(data));\r\n  }\r\n}\r\n\r\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\r\n\r\n    constructor(address owner, address initialImplementation, bytes calldata)\r\n        public\r\n    {\r\n        setUpgradeabilityOwner(owner);\r\n        _upgradeTo(initialImplementation);\r\n        require(initialImplementation.delegatecall(calldata));\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialAddressSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"endGrantAuthentication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeAuthentication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateProxyImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"startGrantAuthentication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerProxy\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELAY_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"grantInitialAuthentication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "WyvernProxyRegistry", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3e6b49b7dfbb0b3e3d4dde9fe41788f5b084a5c3f69bc2776128fa7afe064853"}