{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Block Hash Oracle\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\n\r\nevent CommitBlockHash:\r\n    committer: indexed(address)\r\n    number: indexed(uint256)\r\n    hash: bytes32\r\n\r\nevent ApplyBlockHash:\r\n    number: indexed(uint256)\r\n    hash: bytes32\r\n\r\nevent AddCommitter:\r\n    committer: indexed(address)\r\n\r\nevent RemoveCommitter:\r\n    committer: indexed(address)\r\n\r\nevent SetThreshold:\r\n    threshold: uint256\r\n\r\nevent TransferOwnership:\r\n    owner: indexed(address)\r\n\r\n\r\nMAX_COMMITTERS: constant(uint256) = 32\r\n\r\n\r\nblock_hash: HashMap[uint256, bytes32]\r\ncommitments: public(HashMap[address, HashMap[uint256, bytes32]])\r\n\r\ncommitter_idx: HashMap[address, uint256]  # 0 represents not in list\r\nget_committer: public(DynArray[address, MAX_COMMITTERS])\r\n\r\nthreshold: public(uint256)\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_threshold: uint256):\r\n    self.threshold = _threshold\r\n    log SetThreshold(_threshold)\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)\r\n\r\n\r\n@view\r\n@external\r\ndef get_block_hash(_number: uint256) -> bytes32:\r\n    \"\"\"\r\n    @notice Query the block hash of a block.\r\n    @dev Reverts for block numbers which have yet to be set.\r\n    \"\"\"\r\n    block_hash: bytes32 = self.block_hash[_number]\r\n    assert block_hash != empty(bytes32)\r\n\r\n    return block_hash\r\n\r\n\r\n@external\r\ndef commit(_number: uint256, _hash: bytes32):\r\n    \"\"\"\r\n    @notice Commit a block hash.\r\n    \"\"\"\r\n    assert self.committer_idx[msg.sender] != 0\r\n\r\n    self.commitments[msg.sender][_number] = _hash\r\n    log CommitBlockHash(msg.sender, _number, _hash)\r\n\r\n\r\n@external\r\ndef apply(_number: uint256, _hash: bytes32, _committers: DynArray[address, MAX_COMMITTERS]):\r\n    \"\"\"\r\n    @notice Apply a block hash.\r\n    @dev The list of committers must be sorted in ascending hexadecimal order.\r\n    \"\"\"\r\n    assert self.block_hash[_number] == empty(bytes32)\r\n    assert _hash != empty(bytes32)\r\n    assert len(_committers) >= self.threshold\r\n\r\n    previous: uint256 = 0\r\n\r\n    for committer in _committers:\r\n        assert self.commitments[committer][_number] == _hash\r\n\r\n        assert previous < convert(committer, uint256)\r\n        previous = convert(committer, uint256)\r\n\r\n    self.block_hash[_number] = _hash\r\n    log ApplyBlockHash(_number, _hash)\r\n\r\n\r\n@external\r\ndef add_committer(_committer: address):\r\n    \"\"\"\r\n    @notice Add a committer to the set of authorized committers.\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n    assert _committer != empty(address)\r\n    assert self.committer_idx[_committer] == 0\r\n\r\n    self.get_committer.append(_committer)\r\n    self.committer_idx[_committer] = len(self.get_committer)\r\n\r\n    log AddCommitter(_committer)\r\n\r\n\r\n@external\r\ndef remove_committer(_committer: address):\r\n    \"\"\"\r\n    @notice Remove a committer from the set of authorized committers.\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    last_idx: uint256 = len(self.get_committer) - 1  # dev: underflow\r\n    if last_idx != 0:\r\n        committer_idx: uint256 = self.committer_idx[_committer] - 1  # dev: underflow\r\n        replacement: address = self.get_committer[last_idx]\r\n\r\n        self.get_committer[committer_idx] = replacement\r\n        self.committer_idx[replacement] = committer_idx + 1\r\n\r\n    self.get_committer.pop()\r\n    self.committer_idx[_committer] = 0\r\n\r\n    log RemoveCommitter(_committer)\r\n\r\n\r\n@external\r\ndef set_threshold(_threshold: uint256):\r\n    \"\"\"\r\n    @notice Set the threshold.\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.threshold = _threshold\r\n    log SetThreshold(_threshold)\r\n\r\n\r\n@external\r\ndef set_block_hash(_number: uint256, _hash: bytes32):\r\n    assert msg.sender == self.owner\r\n\r\n    self.block_hash[_number] = _hash\r\n    log ApplyBlockHash(_number, _hash)\r\n\r\n\r\n@view\r\n@external\r\ndef is_committer(_committer: address) -> bool:\r\n    \"\"\"\r\n    @notice Query the committer status of an account.\r\n    \"\"\"\r\n    return self.committer_idx[_committer] != 0\r\n\r\n\r\n@view\r\n@external\r\ndef committer_count() -> uint256:\r\n    \"\"\"\r\n    @notice Query the total number of committers.\r\n    \"\"\"\r\n    return len(self.get_committer)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)", "ABI": "[{\"name\":\"CommitBlockHash\",\"inputs\":[{\"name\":\"committer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"number\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"hash\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyBlockHash\",\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"hash\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddCommitter\",\"inputs\":[{\"name\":\"committer\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveCommitter\",\"inputs\":[{\"name\":\"committer\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetThreshold\",\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_block_hash\",\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit\",\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply\",\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_committers\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_committer\",\"inputs\":[{\"name\":\"_committer\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_committer\",\"inputs\":[{\"name\":\"_committer\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_threshold\",\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_block_hash\",\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_committer\",\"inputs\":[{\"name\":\"_committer\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"committer_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"commitments\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_committer\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"threshold\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Block Hash Oracle", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}