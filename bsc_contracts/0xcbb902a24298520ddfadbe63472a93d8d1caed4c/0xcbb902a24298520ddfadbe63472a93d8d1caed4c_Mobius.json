{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Mobius.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./MobiusPledge.sol\\\";\\r\\nimport \\\"./Member.sol\\\";\\r\\nimport \\\"./WithdrawAll.sol\\\";\\r\\n\\r\\ncontract Mobius is ERC721Enumerable, WithdrawAll {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public mintPrice = 100 * 1e18;\\r\\n    uint256 public mintPriceAdd = 10 * 1e18;\\r\\n    uint256 public mintCountBase = 300;\\r\\n    address public mintToken;\\r\\n    address public destroyAddress = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    address public uniswapV2Router;\\r\\n    address public usdtToken;\\r\\n\\r\\n    address  public pledgeContract;\\r\\n    Member public memberContract;\\r\\n\\r\\n    mapping(uint256 => bool) public pledgePermission;\\r\\n\\r\\n    uint256 public stcMintCoolingTime = 48 * 3600;\\r\\n    //    uint256 public stcMintCoolingTime = 0 * 3600;\\r\\n\\r\\n    mapping(uint256 => uint256) public stcMintTime;\\r\\n\\r\\n    address  public stcContract;\\r\\n\\r\\n    bool public transferSwitch;\\r\\n\\r\\n    mapping(uint256 => bool) public transferWhiteList;\\r\\n\\r\\n    mapping(address => bool) public marketContractWhiteList;\\r\\n\\r\\n    constructor() ERC721(\\\"Mobius\\\", \\\"MOBIUS\\\") {\\r\\n\\r\\n    }\\r\\n\\r\\n    function getList(address _addr) public view returns (uint256[]memory idArr){\\r\\n        uint256 startIndex = 0;\\r\\n        uint256 endIndex = balanceOf(_addr);\\r\\n        idArr = new uint256[](endIndex);\\r\\n        uint index;\\r\\n        for (; startIndex < endIndex; startIndex++) {\\r\\n            uint256 nftId = tokenOfOwnerByIndex(_addr, startIndex);\\r\\n            idArr[index] = nftId;\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMintAmount() public view returns (uint256) {\\r\\n        uint256 _mintPrice = pendingMintPrice();\\r\\n        return _mintAmount(_mintPrice);\\r\\n    }\\r\\n\\r\\n    function pendingMintPrice() public view returns (uint256) {\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        uint256 _base = _totalSupply / mintCountBase;\\r\\n\\r\\n        return mintPrice + _base * mintPriceAdd;\\r\\n    }\\r\\n\\r\\n    function _mintAmount(uint256 _mintPrice) internal view returns (uint256) {\\r\\n        require(uniswapV2Router != address(0), \\\"Mobius: uniswapV2Router contract is not configured.\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = usdtToken;\\r\\n        path[1] = mintToken;\\r\\n        return IUniswapV2Router02(uniswapV2Router).getAmountsOut(_mintPrice, path)[1];\\r\\n    }\\r\\n\\r\\n    function mint(address recipient, uint256 stcId) external returns (uint256){\\r\\n\\r\\n        require(ERC721(stcContract).ownerOf(stcId) == msg.sender, \\\"Mobius:stc no permission\\\");\\r\\n        require(memberContract.inviter(msg.sender) != address(0), \\\"Mobius:Please register first\\\");\\r\\n\\r\\n        uint256 _mintTime = stcMintTime[stcId];\\r\\n\\r\\n\\r\\n        require(_mintTime == 0 || _mintTime + stcMintCoolingTime < block.timestamp, \\\"Mobius:The cooldown time is not up\\\");\\r\\n\\r\\n        IERC20(mintToken).transferFrom(msg.sender, destroyAddress, getMintAmount());\\r\\n\\r\\n        stcMintTime[stcId] = block.timestamp;\\r\\n\\r\\n        _tokenIds.increment();\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _mint(recipient, newItemId);\\r\\n\\r\\n        if (_mintTime == 0) {\\r\\n            pledgePermission[newItemId] = true;\\r\\n        }\\r\\n\\r\\n        return newItemId;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n\\r\\n            bool isMarket = marketContractWhiteList[msg.sender];\\r\\n\\r\\n            require(isMarket || transferSwitch || transferWhiteList[tokenId], \\\"Mobius:No permission to transfer\\\");\\r\\n\\r\\n            bool isDeposit = MobiusPledge(pledgeContract).getDeposit(tokenId);\\r\\n            require(!isDeposit, \\\"Mobius:under pledge\\\");\\r\\n\\r\\n            if (isMarket && !pledgePermission[tokenId]) {\\r\\n                pledgePermission[tokenId] = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\\r\\n        baseURI = newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 _mintPrice) external onlyOwner {\\r\\n        mintPrice = _mintPrice;\\r\\n    }\\r\\n\\r\\n    function setMintPriceAdd(uint256 _mintPriceAdd) external onlyOwner {\\r\\n        mintPriceAdd = _mintPriceAdd;\\r\\n    }\\r\\n\\r\\n    function setMintCountBase(uint256 _mintCountBase) external onlyOwner {\\r\\n        mintCountBase = _mintCountBase;\\r\\n    }\\r\\n\\r\\n    function setMintToken(address _mintToken) external onlyOwner {\\r\\n        mintToken = _mintToken;\\r\\n    }\\r\\n\\r\\n    function setDestroyAddress(address _destroyAddress) external onlyOwner {\\r\\n        require(_destroyAddress != address(0), \\\"Cannot be 0 address\\\");\\r\\n        destroyAddress = _destroyAddress;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function setUsdtToken(address _usdtToken) external onlyOwner {\\r\\n        usdtToken = _usdtToken;\\r\\n    }\\r\\n\\r\\n    function setPledgeContract(address _pledgeContract) external onlyOwner {\\r\\n        pledgeContract = _pledgeContract;\\r\\n    }\\r\\n\\r\\n    function setPledgePermission(uint256 _tokenId, bool _status) external onlyOwner {\\r\\n        pledgePermission[_tokenId] = _status;\\r\\n    }\\r\\n\\r\\n    function setStcMintCoolingTime(uint256 _stcMintCoolingTime) external onlyOwner {\\r\\n        stcMintCoolingTime = _stcMintCoolingTime;\\r\\n    }\\r\\n\\r\\n    function setStcContract(address _stcContract) external onlyOwner {\\r\\n        stcContract = _stcContract;\\r\\n    }\\r\\n\\r\\n    function setTransferSwitch(bool _transferSwitch) external onlyOwner {\\r\\n        transferSwitch = _transferSwitch;\\r\\n    }\\r\\n\\r\\n    function setTransferWhiteList(uint256 _tokenId, bool _status) external onlyOwner {\\r\\n        transferWhiteList[_tokenId] = _status;\\r\\n    }\\r\\n\\r\\n    function setMarketContractWhiteList(address _marketContract, bool _status) external onlyOwner {\\r\\n        marketContractWhiteList[_marketContract] = _status;\\r\\n    }\\r\\n\\r\\n    function setMemberContract(Member _memberContract) external onlyOwner {\\r\\n        memberContract = _memberContract;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MobiusPledge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Mobius.sol\\\";\\r\\nimport \\\"./Member.sol\\\";\\r\\nimport \\\"./MobiusMarket.sol\\\";\\r\\n\\r\\ncontract MobiusPledge is Ownable, ReentrancyGuard {\\r\\n\\r\\n    uint256 public totalReward;\\r\\n    uint256 public maxReward = 10_500_000 * 1e18;\\r\\n    uint256 public constant ACC_TOKEN_PRECISION = 1e18;\\r\\n    // The amount of allocation points assigned to the token.\\r\\n    uint256 public allocReward = 347222222222222222;\\r\\n    // Accumulated Tokens per share.\\r\\n    uint256 public tokenPerShare = 0;\\r\\n    // Last block number that token update action is executed.\\r\\n    uint256 public lastRewardBlock = 0;\\r\\n    // The total amount of user shares in each pool. After considering the share boosts.\\r\\n    uint256 public totalBoostedShare = 0;\\r\\n\\r\\n    uint256[] public pendingDec = [700, 600, 500, 400, 0];\\r\\n\\r\\n    struct NftInfo {\\r\\n        address owner;\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 pending;\\r\\n        uint256 pendingCount;\\r\\n        uint256 total;\\r\\n        uint256 invalid; // 0 normal  1 invalid\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 pending;\\r\\n        uint256 total;\\r\\n        uint256 nftAmount;\\r\\n        uint256 nftTotal;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of user.\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    mapping(uint256 => NftInfo) public nftInfo;\\r\\n\\r\\n    address public withdrawToken;\\r\\n    address public destroyAddress = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    address public mobiusContract;\\r\\n    uint256 public maxNftCount = 0;\\r\\n    uint256 public maxDepositCount = 0;\\r\\n    uint256 public depositCount = 0;\\r\\n    uint256 public depositAmount = 1000;\\r\\n\\r\\n    address public memberContract;\\r\\n    uint256[] public memberLevelRewardRate = [200, 100];\\r\\n    address public marketContract;\\r\\n    address public uniswapV2Router;\\r\\n    address public usdtToken;\\r\\n    address public stcToken;\\r\\n\\r\\n    event Update(uint256 lastRewardBlock, uint256 tokenSupply, uint256 tokenPerShare);\\r\\n    event Deposit(address indexed user, uint256 tokenId, uint256 amount, uint256 timestamp);\\r\\n    event Reward(address indexed user, address indexed superior, uint256 amount, uint256 timestamp);\\r\\n    event RewardDec(address indexed user, address indexed superior, uint256 amount, uint256 timestamp);\\r\\n    event WithdrawPending(address indexed user, uint256 pending, uint256 timestamp);\\r\\n    event WithdrawNftPending(address indexed user, uint256 tokenId, uint256 pending, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    constructor() {\\r\\n        //        lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function pendingTotalReward() external view returns (uint256) {\\r\\n\\r\\n        if (lastRewardBlock == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = block.number - lastRewardBlock;\\r\\n\\r\\n        uint256 tokenReward = multiplier * allocReward;\\r\\n\\r\\n        return totalReward + tokenReward;\\r\\n    }\\r\\n\\r\\n    /// @notice View function for checking pending Token rewards.\\r\\n    /// @param _user Address of the user.\\r\\n    function pendingToken(address _user) external view returns (uint256) {\\r\\n        UserInfo memory user = userInfo[_user];\\r\\n        uint256 _tokenPerShare = getTokenPerShare();\\r\\n\\r\\n        uint256 boostedAmount = user.amount * _tokenPerShare / ACC_TOKEN_PRECISION - user.rewardDebt;\\r\\n        return boostedAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice View function for checking pending Token rewards.\\r\\n    /// @param _tokenId Address of the user.\\r\\n    function pendingTokenId(uint256 _tokenId) external view returns (uint256) {\\r\\n        NftInfo memory nft = nftInfo[_tokenId];\\r\\n        uint256 _tokenPerShare = getTokenPerShare();\\r\\n\\r\\n        uint256 boostedAmount = nft.amount * _tokenPerShare;\\r\\n        return boostedAmount / ACC_TOKEN_PRECISION - nft.rewardDebt;\\r\\n    }\\r\\n\\r\\n    /// @notice View function for checking pending Token rewards.\\r\\n    function getTokenPerShare() internal view returns (uint256) {\\r\\n        uint256 _tokenPerShare = tokenPerShare;\\r\\n\\r\\n        if (lastRewardBlock == 0) {\\r\\n            return _tokenPerShare;\\r\\n        }\\r\\n\\r\\n        uint256 tokenSupply = totalBoostedShare;\\r\\n\\r\\n        uint256 multiplier = block.number - lastRewardBlock;\\r\\n\\r\\n        uint256 tokenReward = multiplier * allocReward;\\r\\n\\r\\n        if (tokenReward > 0 && tokenSupply != 0) {\\r\\n            tokenReward = totalReward + tokenReward > maxReward ? maxReward - totalReward : tokenReward;\\r\\n\\r\\n            _tokenPerShare = _tokenPerShare + tokenReward * ACC_TOKEN_PRECISION / tokenSupply;\\r\\n        }\\r\\n\\r\\n        return _tokenPerShare;\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables for the given.\\r\\n    function update() public {\\r\\n        if (depositCount == maxDepositCount && lastRewardBlock == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n        } else if (lastRewardBlock > 0) {\\r\\n            uint256 multiplier = block.number - lastRewardBlock;\\r\\n            if (multiplier > 0) {\\r\\n                uint256 tokenSupply = totalBoostedShare;\\r\\n                if (tokenSupply > 0) {\\r\\n                    uint256 tokenReward = multiplier * allocReward;\\r\\n                    tokenReward = totalReward + tokenReward > maxReward ? maxReward - totalReward : tokenReward;\\r\\n                    totalReward += tokenReward;\\r\\n                    tokenPerShare = tokenPerShare + tokenReward * ACC_TOKEN_PRECISION / tokenSupply;\\r\\n                }\\r\\n                lastRewardBlock = block.number;\\r\\n                emit Update(block.number, tokenSupply, tokenPerShare);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDeposit(uint256 _tokenId) external view returns (bool) {\\r\\n        NftInfo memory nft = nftInfo[_tokenId];\\r\\n        return nft.amount > 0 || nft.invalid == 1;\\r\\n    }\\r\\n\\r\\n    function recastPrice() public view returns (uint256) {\\r\\n        require(marketContract != address(0), \\\"Mobius: marketContract contract is not configured.\\\");\\r\\n\\r\\n        uint256 sellPrice = MobiusMarket(marketContract).pendingSellPrice();\\r\\n\\r\\n        return _priceToAmount(sellPrice);\\r\\n    }\\r\\n\\r\\n    function _priceToAmount(uint256 _usdtPrice) internal view returns (uint256) {\\r\\n        require(uniswapV2Router != address(0), \\\"Mobius: uniswapV2Router contract is not configured.\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = usdtToken;\\r\\n        path[1] = stcToken;\\r\\n        return IUniswapV2Router02(uniswapV2Router).getAmountsOut(_usdtPrice, path)[1];\\r\\n    }\\r\\n\\r\\n    function recast(uint256 _tokenId) external {\\r\\n\\r\\n        uint256 _recastPrice = recastPrice();\\r\\n\\r\\n        IERC20(stcToken).transferFrom(msg.sender, destroyAddress, _recastPrice);\\r\\n\\r\\n        NftInfo storage nft = nftInfo[_tokenId];\\r\\n        require(nft.amount == 0 && nft.invalid == 1, \\\"MobiusPledge: Invalid NFT\\\");\\r\\n\\r\\n        _deposit(_tokenId, nft);\\r\\n    }\\r\\n\\r\\n\\r\\n    function deposit(uint256 _tokenId) public {\\r\\n        NftInfo storage nft = nftInfo[_tokenId];\\r\\n        require(nft.invalid == 0, \\\"MobiusPledge: Invalid NFT\\\");\\r\\n        depositCount += 1;\\r\\n        _deposit(_tokenId, nft);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Deposit tokens.\\r\\n    /// @param _tokenId Amount of LP tokens to deposit.\\r\\n    function _deposit(uint256 _tokenId, NftInfo storage nft) internal nonReentrant {\\r\\n\\r\\n        address _user = msg.sender;\\r\\n\\r\\n        address _mobiusContract = mobiusContract;\\r\\n        require(Member(memberContract).inviter(_user) != address(0), \\\"MobiusPledge:Please register first\\\");\\r\\n        require(Mobius(_mobiusContract).totalSupply() >= maxNftCount, \\\"MobiusPledge:nft count not reached\\\");\\r\\n        require(Mobius(_mobiusContract).pledgePermission(_tokenId), \\\"MobiusPledge:deposit no permission\\\");\\r\\n        require(Mobius(_mobiusContract).ownerOf(_tokenId) == msg.sender, \\\"MobiusPledge:deposit no owner\\\");\\r\\n\\r\\n        //        NftInfo storage nft = nftInfo[_tokenId];\\r\\n\\r\\n        uint256 amount = nft.amount;\\r\\n\\r\\n        require(amount == 0, \\\"MobiusPledge:deposit repeat\\\");\\r\\n\\r\\n        update();\\r\\n\\r\\n        if (amount > 0) {\\r\\n            nft.pending += (amount * tokenPerShare / ACC_TOKEN_PRECISION) - nft.rewardDebt;\\r\\n        }\\r\\n\\r\\n        uint256 _depositAmount = depositAmount;\\r\\n\\r\\n        // nft\\r\\n        nft.owner = _user;\\r\\n        amount += _depositAmount;\\r\\n        nft.amount = amount;\\r\\n        nft.rewardDebt = amount * tokenPerShare / ACC_TOKEN_PRECISION;\\r\\n\\r\\n        // user nft\\r\\n        userInfo[_user].nftAmount += _depositAmount;\\r\\n\\r\\n        // superior\\r\\n        // Update total boosted share.\\r\\n        totalBoostedShare += _superiorReward(_depositAmount, _user);\\r\\n\\r\\n        emit Deposit(_user, _tokenId, _depositAmount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _superiorReward(uint256 _depositAmount, address _user) internal returns (uint256) {\\r\\n\\r\\n        uint256 _totalBoostedShare = _depositAmount;\\r\\n\\r\\n        uint256[] memory _memberLevelRewardRate = memberLevelRewardRate;\\r\\n\\r\\n        uint256 len = _memberLevelRewardRate.length;\\r\\n\\r\\n        address _superior = _user;\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n\\r\\n            _superior = Member(memberContract).inviter(_superior);\\r\\n\\r\\n            if (_superior == address(0) || _superior == address(1)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            uint256 _rate = _memberLevelRewardRate[i];\\r\\n\\r\\n            uint256 levelReward = _depositAmount * _rate / 1000;\\r\\n            UserInfo storage user = userInfo[_superior];\\r\\n            uint256 amount = user.amount;\\r\\n            if (amount > 0) {\\r\\n                user.pending = user.pending + (amount * tokenPerShare / ACC_TOKEN_PRECISION) - user.rewardDebt;\\r\\n            }\\r\\n            amount = amount + levelReward;\\r\\n            user.amount = amount;\\r\\n            user.rewardDebt = amount * tokenPerShare / ACC_TOKEN_PRECISION;\\r\\n            _totalBoostedShare += levelReward;\\r\\n\\r\\n            emit Reward(_user, _superior, levelReward, block.timestamp);\\r\\n        }\\r\\n\\r\\n        return _totalBoostedShare;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice WithdrawPending LP tokens.\\r\\n    function withdrawPending() external {\\r\\n\\r\\n        require(withdrawToken != address(0), \\\"MobiusPledge:withdrawToken address cannot be empty\\\");\\r\\n\\r\\n        address _user = msg.sender;\\r\\n\\r\\n        update();\\r\\n\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n\\r\\n        uint256 pending = user.pending + (user.amount * tokenPerShare / ACC_TOKEN_PRECISION) - user.rewardDebt;\\r\\n        user.pending = 0;\\r\\n        user.rewardDebt = user.amount * tokenPerShare / ACC_TOKEN_PRECISION;\\r\\n        user.total += pending;\\r\\n        if (pending > 0) {\\r\\n            IERC20(withdrawToken).transfer(_user, pending);\\r\\n        }\\r\\n\\r\\n\\r\\n        emit WithdrawPending(_user, pending, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice withdrawNftPending LP tokens.\\r\\n    function withdrawNftPending(uint256[] memory _tokenIds) external {\\r\\n\\r\\n        address _withdrawToken = withdrawToken;\\r\\n\\r\\n        require(_withdrawToken != address(0), \\\"MobiusPledge: withdrawToken address cannot be empty\\\");\\r\\n\\r\\n        update();\\r\\n\\r\\n        uint256 len = _tokenIds.length;\\r\\n\\r\\n        uint256 _tokenPerShare = tokenPerShare;\\r\\n        uint256 _ACC_TOKEN_PRECISION = ACC_TOKEN_PRECISION;\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n\\r\\n            uint256 tokenId = _tokenIds[i];\\r\\n\\r\\n            NftInfo storage nft = nftInfo[tokenId];\\r\\n            UserInfo storage user = userInfo[nft.owner];\\r\\n\\r\\n            address nftOwner = nft.owner;\\r\\n\\r\\n            require(nftOwner == msg.sender, \\\"MobiusPledge: Not the owner\\\");\\r\\n\\r\\n            uint256 _odlDepositAmount = nft.amount;\\r\\n\\r\\n            uint256 pending = nft.pending + (_odlDepositAmount * _tokenPerShare / _ACC_TOKEN_PRECISION) - nft.rewardDebt;\\r\\n            nft.pending = 0;\\r\\n\\r\\n            if (pending == 0) continue;\\r\\n\\r\\n            uint256 _pendingCount = nft.pendingCount;\\r\\n\\r\\n            uint256 _newDepositAmount = _pendingCount < pendingDec.length ? pendingDec[_pendingCount] : 0;\\r\\n\\r\\n            uint256 _depositAmount = _odlDepositAmount - _newDepositAmount;\\r\\n\\r\\n            uint256 _totalBoostedShare = _superiorRewardDec(_depositAmount, nftOwner);\\r\\n            totalBoostedShare -= _totalBoostedShare + _depositAmount;\\r\\n\\r\\n            if (_newDepositAmount == 0) {\\r\\n                nft.amount = 0;\\r\\n                nft.rewardDebt = 0;\\r\\n                nft.pendingCount = 0;\\r\\n                nft.invalid = 1;\\r\\n            } else {\\r\\n                nft.amount -= _depositAmount;\\r\\n                nft.pendingCount += 1;\\r\\n                nft.rewardDebt = nft.amount * _tokenPerShare / _ACC_TOKEN_PRECISION;\\r\\n            }\\r\\n\\r\\n            user.nftAmount -= _depositAmount;\\r\\n\\r\\n            if (pending > 0) {\\r\\n                nft.total += pending;\\r\\n                user.total += pending;\\r\\n                user.nftTotal += pending;\\r\\n                IERC20(_withdrawToken).transfer(nftOwner, pending);\\r\\n            }\\r\\n\\r\\n\\r\\n            emit WithdrawNftPending(nftOwner, tokenId, pending, _newDepositAmount, block.timestamp);\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function _superiorRewardDec(uint256 _depositAmount, address _user) internal returns (uint256) {\\r\\n\\r\\n        uint256[] memory _memberLevelRewardRate = memberLevelRewardRate;\\r\\n\\r\\n        uint256 len = _memberLevelRewardRate.length;\\r\\n\\r\\n        uint256 _totalBoostedShare = 0;\\r\\n\\r\\n        address _superior = _user;\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n\\r\\n            _superior = Member(memberContract).inviter(_superior);\\r\\n\\r\\n            if (_superior == address(0) || _superior == address(1)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            uint256 _rate = _memberLevelRewardRate[i];\\r\\n\\r\\n            uint256 levelReward = _depositAmount * _rate / 1000;\\r\\n\\r\\n            UserInfo storage user = userInfo[_superior];\\r\\n            uint256 amount = user.amount;\\r\\n            if (amount > 0) {\\r\\n                user.pending = user.pending + (amount * tokenPerShare / ACC_TOKEN_PRECISION) - user.rewardDebt;\\r\\n            }\\r\\n            user.amount -= levelReward;\\r\\n            user.rewardDebt = user.amount * tokenPerShare / ACC_TOKEN_PRECISION;\\r\\n            _totalBoostedShare += levelReward;\\r\\n\\r\\n            emit RewardDec(_user, _superior, levelReward, block.timestamp);\\r\\n\\r\\n        }\\r\\n\\r\\n        return _totalBoostedShare;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setMaxReward(uint256 _maxReward) external onlyOwner {\\r\\n        maxReward = _maxReward;\\r\\n    }\\r\\n\\r\\n    function setAllocReward(uint256 _allocReward) external onlyOwner {\\r\\n        allocReward = _allocReward;\\r\\n    }\\r\\n\\r\\n    function setWithdrawToken(address _withdrawToken) external onlyOwner {\\r\\n        withdrawToken = _withdrawToken;\\r\\n    }\\r\\n\\r\\n    function setDestroyAddress(address _destroyAddress) external onlyOwner {\\r\\n        require(_destroyAddress != address(0), \\\"Cannot be 0 address\\\");\\r\\n        destroyAddress = _destroyAddress;\\r\\n    }\\r\\n\\r\\n    function setMobiusContract(address _mobiusContract) external onlyOwner {\\r\\n        mobiusContract = _mobiusContract;\\r\\n    }\\r\\n\\r\\n    function setMaxNftCount(uint256 _maxNftCount) external onlyOwner {\\r\\n        maxNftCount = _maxNftCount;\\r\\n    }\\r\\n\\r\\n    function setMaxDepositCount(uint256 _maxDepositCount) external onlyOwner {\\r\\n        maxDepositCount = _maxDepositCount;\\r\\n    }\\r\\n\\r\\n    function setDepositAmount(uint256 _depositAmount) external onlyOwner {\\r\\n        depositAmount = _depositAmount;\\r\\n    }\\r\\n\\r\\n    function setMemberContract(address _memberContract) external onlyOwner {\\r\\n        memberContract = _memberContract;\\r\\n    }\\r\\n\\r\\n    function setMemberLevelRewardRate(uint256[] memory _rates) external onlyOwner {\\r\\n        memberLevelRewardRate = _rates;\\r\\n    }\\r\\n\\r\\n    function setMarketContract(address _marketContract) external onlyOwner {\\r\\n        marketContract = _marketContract;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function setUsdtToken(address _usdtToken) external onlyOwner {\\r\\n        usdtToken = _usdtToken;\\r\\n    }\\r\\n\\r\\n    function setStcToken(address _stcToken) external onlyOwner {\\r\\n        stcToken = _stcToken;\\r\\n    }\\r\\n\\r\\n    function setPendingDec(uint256[] memory _pendingDec) external onlyOwner {\\r\\n        pendingDec = _pendingDec;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Member.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./MobiusPledge.sol\\\";\\r\\nimport \\\"./WithdrawAll.sol\\\";\\r\\n\\r\\ncontract Member is WithdrawAll {\\r\\n\\r\\n    address  public pledgeContract;\\r\\n\\r\\n    mapping(address => address) public inviter;\\r\\n\\r\\n//    mapping(address => bool) public users;\\r\\n\\r\\n    event Invite(address indexed from, address indexed superior, uint256 timestamp);\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n    }\\r\\n\\r\\n    function inviteOwner(address from, address superior) public onlyOwner returns (bool) {\\r\\n\\r\\n        require(inviter[from] == address(0), \\\"Member: The current user has been bound\\\");\\r\\n\\r\\n        _invite(from, superior);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function invite(address superior) public returns (bool) {\\r\\n        address from = _msgSender();\\r\\n\\r\\n        if (pledgeContract != address(0) && superior != address(1)) {\\r\\n            uint256 nftAmount;\\r\\n            (,,,,nftAmount,) = MobiusPledge(pledgeContract).userInfo(superior);\\r\\n            require(nftAmount > 0, \\\"Member: must have a pledge\\\");\\r\\n        }\\r\\n        if (inviter[from] == address(0)) {\\r\\n            _invite(from, superior);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _invite(address from, address superior) private {\\r\\n\\r\\n        require(from != superior, \\\"Member: The superior cannot be himself\\\");\\r\\n\\r\\n        inviter[from] = superior;\\r\\n//        users[from] = true;\\r\\n        emit Invite(from, superior, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setPledgeContract(address _pledgeContract) external onlyOwner {\\r\\n        pledgeContract = _pledgeContract;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/WithdrawAll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract WithdrawAll is Ownable {\\r\\n\\r\\n    function withdrawEth(address payable receiver, uint amount) public onlyOwner payable {\\r\\n        uint balance = address(this).balance;\\r\\n        if (amount == 0) {\\r\\n            amount = balance;\\r\\n        }\\r\\n        require(amount > 0 && balance >= amount, \\\"no balance\\\");\\r\\n        receiver.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address receiver, address tokenAddress, uint amount) public onlyOwner {\\r\\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        if (amount == 0) {\\r\\n            amount = balance;\\r\\n        }\\r\\n\\r\\n        require(amount > 0 && balance >= amount, \\\"bad amount\\\");\\r\\n        IERC20(tokenAddress).transfer(receiver, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawNft(address receiver, address nftAddress, uint256 tokenId) public onlyOwner {\\r\\n        IERC721(nftAddress).transferFrom(address(this), receiver, tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MobiusMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./Mobius.sol\\\";\\r\\nimport \\\"./WithdrawAll.sol\\\";\\r\\n\\r\\ncontract MobiusMarket is WithdrawAll {\\r\\n\\r\\n    address public marketAddress;\\r\\n    address public daoAddress;\\r\\n    address public liquidityAddress;\\r\\n\\r\\n    address public uniswapV2Router;\\r\\n    address public stcToken;\\r\\n    address public usdtToken;\\r\\n    address public destroyAddress = address(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    address public mobiusContract;\\r\\n\\r\\n    uint256 public sellPrice = 300 * 1e18;\\r\\n    uint256 public sellPriceAdd = 20 * 1e18;\\r\\n    uint256 public sellCountBase = 300;\\r\\n\\r\\n    uint256 public liquidityFee = 300;\\r\\n    uint256 public destroyFee = 120;\\r\\n    uint256 public marketFee = 50;\\r\\n    uint256 public daoFee = 30;\\r\\n\\r\\n    struct Order {\\r\\n        address owner;\\r\\n        uint256 price;\\r\\n        address recipient;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Order) public order;\\r\\n\\r\\n    event Sell(address indexed from, uint256 tokenId, uint256 price, uint256 timestamp);\\r\\n    event Buy(address indexed from, address indexed to, uint256 tokenId, uint256 price, uint256 timestamp);\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n    }\\r\\n\\r\\n    function pendingSellPrice() public view returns (uint256) {\\r\\n\\r\\n        uint256 totalSupply = Mobius(mobiusContract).totalSupply();\\r\\n\\r\\n        uint256 _base = totalSupply / sellCountBase;\\r\\n\\r\\n        return sellPrice + _base * sellPriceAdd;\\r\\n    }\\r\\n\\r\\n    function sell(uint256 tokenId) public returns (bool) {\\r\\n\\r\\n        Order storage _order = order[tokenId];\\r\\n\\r\\n        require(_order.owner == address(0), \\\"MobiusMarket: Can only be sold once\\\");\\r\\n\\r\\n        uint256 _sellPrice = pendingSellPrice();\\r\\n\\r\\n        IERC721(mobiusContract).transferFrom(msg.sender, address(this), tokenId);\\r\\n\\r\\n        _order.owner = msg.sender;\\r\\n        _order.price = _sellPrice;\\r\\n\\r\\n        emit Sell(msg.sender, tokenId, _sellPrice, block.timestamp);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function buy(uint256 tokenId, address recipient) public returns (bool) {\\r\\n\\r\\n        Order memory _order = order[tokenId];\\r\\n\\r\\n        require(_order.recipient == address(0), \\\"MobiusMarket: The order has been completed.\\\");\\r\\n\\r\\n        uint256 price = _order.price;\\r\\n\\r\\n        uint256 _liquidity = price * liquidityFee / 1000;\\r\\n        uint256 _destroy = price * destroyFee / 1000;\\r\\n        uint256 _market = price * marketFee / 1000;\\r\\n        uint256 _dao = price * daoFee / 1000;\\r\\n\\r\\n        address _usdtToken = usdtToken;\\r\\n\\r\\n        address _owner = _order.owner;\\r\\n\\r\\n        IERC20(_usdtToken).transferFrom(msg.sender, address(this), price);\\r\\n\\r\\n        IERC20(_usdtToken).transfer(_owner, price - _liquidity - _destroy - _market - _dao);\\r\\n        IERC20(_usdtToken).transfer(marketAddress, _market);\\r\\n        IERC20(_usdtToken).transfer(daoAddress, _dao);\\r\\n\\r\\n\\r\\n        swapUSDTApprove(_destroy + _liquidity);\\r\\n        swapAndDestroy(_destroy);\\r\\n        swapAndLiquidity(_liquidity);\\r\\n\\r\\n        IERC721(mobiusContract).transferFrom(address(this), recipient, tokenId);\\r\\n\\r\\n        _order.recipient = msg.sender;\\r\\n\\r\\n        emit Buy(_owner, recipient, tokenId, price, block.timestamp);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function swapUSDTApprove(uint256 tokens) private {\\r\\n\\r\\n        IERC20(usdtToken).approve(uniswapV2Router, tokens);\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapAndDestroy(uint256 tokens) private {\\r\\n        address[] memory path = new address[](2);\\r\\n\\r\\n        path[0] = usdtToken;\\r\\n        path[1] = stcToken;\\r\\n\\r\\n        // make the swap\\r\\n        IUniswapV2Router02(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokens,\\r\\n            0,\\r\\n            path,\\r\\n                destroyAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapAndLiquidity(uint256 tokens) private {\\r\\n        uint256 half = tokens / 2;\\r\\n        uint256 otherHalf = tokens - half;\\r\\n\\r\\n        address _uniswapV2Router = uniswapV2Router;\\r\\n        address _stcToken = stcToken;\\r\\n        address _usdtToken = usdtToken;\\r\\n\\r\\n        uint256 initialBalance = IERC20(_stcToken).balanceOf(address(this));\\r\\n\\r\\n        swapTokensForTokens(_uniswapV2Router, _usdtToken, _stcToken, half);\\r\\n\\r\\n        uint256 newBalance = IERC20(_stcToken).balanceOf(address(this)) - initialBalance;\\r\\n\\r\\n        addLiquidity(_uniswapV2Router, _usdtToken, _stcToken, otherHalf, newBalance);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapTokensForTokens(address _uniswapV2Router, address _usdtToken, address _stcToken, uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _usdtToken;\\r\\n        path[1] = _stcToken;\\r\\n\\r\\n        // make the swap\\r\\n        IUniswapV2Router02(_uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address _uniswapV2Router, address _usdtToken, address _stcToken, uint256 token0Amount, uint256 token1Amount) private {\\r\\n        IERC20(_stcToken).approve(_uniswapV2Router, token1Amount);\\r\\n        IUniswapV2Router02(_uniswapV2Router).addLiquidity(\\r\\n            _usdtToken,\\r\\n            _stcToken,\\r\\n            token0Amount,\\r\\n            token1Amount,\\r\\n            0,\\r\\n            0,\\r\\n            liquidityAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function setMarketAddress(address _marketAddress) external onlyOwner {\\r\\n        marketAddress = _marketAddress;\\r\\n    }\\r\\n\\r\\n    function setDaoAddress(address _daoAddress) external onlyOwner {\\r\\n        daoAddress = _daoAddress;\\r\\n    }\\r\\n\\r\\n    function setLiquidityAddress(address _liquidityAddress) external onlyOwner {\\r\\n        liquidityAddress = _liquidityAddress;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function setStcToken(address _stcToken) external onlyOwner {\\r\\n        stcToken = _stcToken;\\r\\n    }\\r\\n\\r\\n    function setUsdtToken(address _usdtToken) external onlyOwner {\\r\\n        usdtToken = _usdtToken;\\r\\n    }\\r\\n\\r\\n    function setDestroyAddress(address _destroyAddress) external onlyOwner {\\r\\n        require(_destroyAddress != address(0), \\\"Cannot be 0 address\\\");\\r\\n        destroyAddress = _destroyAddress;\\r\\n    }\\r\\n\\r\\n    function setMobiusContract(address _mobiusContract) external onlyOwner {\\r\\n        mobiusContract = _mobiusContract;\\r\\n    }\\r\\n\\r\\n    function setSellPrice(uint256 _sellPrice) external onlyOwner {\\r\\n        sellPrice = _sellPrice;\\r\\n    }\\r\\n\\r\\n    function setSellPriceAdd(uint256 _sellPriceAdd) external onlyOwner {\\r\\n        sellPriceAdd = _sellPriceAdd;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setSellCountBase(uint256 _sellCountBase) external onlyOwner {\\r\\n        sellCountBase = _sellCountBase;\\r\\n    }\\r\\n\\r\\n    function setLiquidityFee(uint256 _liquidityFee) external onlyOwner {\\r\\n        liquidityFee = _liquidityFee;\\r\\n    }\\r\\n\\r\\n    function setDestroyFee(uint256 _destroyFee) external onlyOwner {\\r\\n        destroyFee = _destroyFee;\\r\\n    }\\r\\n\\r\\n    function setMarketFee(uint256 _marketFee) external onlyOwner {\\r\\n        marketFee = _marketFee;\\r\\n    }\\r\\n\\r\\n    function setDaoFee(uint256 _daoFee) external onlyOwner {\\r\\n        daoFee = _daoFee;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idArr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketContractWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberContract\",\"outputs\":[{\"internalType\":\"contract Member\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stcId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCountBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgePermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destroyAddress\",\"type\":\"address\"}],\"name\":\"setDestroyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMarketContractWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Member\",\"name\":\"_memberContract\",\"type\":\"address\"}],\"name\":\"setMemberContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintCountBase\",\"type\":\"uint256\"}],\"name\":\"setMintCountBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPriceAdd\",\"type\":\"uint256\"}],\"name\":\"setMintPriceAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintToken\",\"type\":\"address\"}],\"name\":\"setMintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pledgeContract\",\"type\":\"address\"}],\"name\":\"setPledgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPledgePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stcContract\",\"type\":\"address\"}],\"name\":\"setStcContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stcMintCoolingTime\",\"type\":\"uint256\"}],\"name\":\"setStcMintCoolingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferSwitch\",\"type\":\"bool\"}],\"name\":\"setTransferSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTransferWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stcContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stcMintCoolingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stcMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Mobius", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}