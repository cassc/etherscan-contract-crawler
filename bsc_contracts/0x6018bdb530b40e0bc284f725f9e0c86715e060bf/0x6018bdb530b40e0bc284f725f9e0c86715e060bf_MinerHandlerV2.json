{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/binary/IbnbBeatsV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IbnbBeatsV4 {\\n    function buy(address ref, uint256 amount) external payable;\\n    function sell() external;\\n    function reInvest() external;\\n    function buyWhiteList() external payable;\\n    function buySecure() external payable;\\n    function priceSecure() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/binary/IContractsLibraryStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\nabstract contract IContractsLibraryStaking {\\n    function BUSD() external view virtual returns (address);\\n\\n    function WBNB() external view virtual returns (address);\\n\\n    function ROUTER() external view virtual returns (IUniswapV2Router01);\\n\\n    function getBusdToBNBToToken(\\n        address token,\\n        uint _amount\\n    ) external view virtual returns (uint256);\\n\\n    function getTokensToBNBtoBusd(\\n        address token,\\n        uint _amount\\n    ) external view virtual returns (uint256);\\n\\n    function getTokensToBnb(\\n        address token,\\n        uint _amount\\n    ) external view virtual returns (uint256);\\n\\n    function getBnbToTokens(\\n        address token,\\n        uint _amount\\n    ) public view virtual returns (uint256);\\n\\n    function getTokenToBnbToAltToken(\\n        address token,\\n        address altToken,\\n        uint _amount\\n    ) public view virtual returns (uint256);\\n\\n    function getUsdToBnB(uint amount) external view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/binary/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/binary/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MinerV4HandlerV3/IMinerHandlerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\ninterface IMinerHandlerV2 {\\n\\n    struct Contract {\\n        address wallet;\\n        address contractAddress;\\n    }\\n\\n    struct User {\\n        address user;\\n        uint totalInvested;\\n        uint lastInvestDate;\\n        uint currentRewardLevel;\\n        // uint lastRewardLevel;\\n        uint totalRewardWithdrawn;\\n        uint lastWithdrawDate;\\n    }\\n\\n    struct Bonus {\\n        uint amount;\\n        uint totalWithdrawn;\\n        uint totalWithdrawBnb;\\n        uint date;\\n        uint withdrawDate;\\n        uint unlockDate;\\n        uint id;\\n        uint levelReward;\\n    }\\n\\n    function getContractData(uint _index) external view returns(Contract memory);\\n\\n    function contractCount() external view returns (uint256);\\n\\n    function walletToContract(address _wallet) external view returns (address);\\n    function contractToWallet(address _contract) external view returns (address);\\n\\n    function invest(\\n        address ref,\\n        uint256 amount\\n    ) external;\\n\\n    // function getUserRewardData(address _user) external view returns (User memory, uint _toWithdraw, uint trueLevel,uint[3] memory _withdrawDate, uint[3] memory _withdrawInterval);\\n\\n    function getDaTe() external view returns (uint);\\n\\n    function getUser(address _user) external view returns (User memory);\\n    \\n    event CreateWallet(address indexed user, address indexed contractAddress, uint contractId);\\n    // event PairsCreated(bytes32[] indexed salts, uint indexed contractId);\\n}\\n\"\r\n    },\r\n    \"contracts/MinerV4HandlerV3/IVaultFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultFarm {\\n    function safeTransfer(IERC20 from, address to, uint amount) external;\\n\\n    function safeTransfer(address _to, uint _value) external;\\n\\n    function getTokenAddressBalance(address token) external view returns (uint);\\n\\n    function getTokenBalance(IERC20 token) external view returns (uint);\\n\\n    function getBalance() external view returns (uint);\\n\\n    function safeTransferAdmin(address from, address to, uint amount) external;\\n\\n    function safeTransferAdmin(address _to, uint _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MinerV4HandlerV3/MinerHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MinerSlave.sol\\\";\\nimport \\\"./IMinerHandlerV2.sol\\\";\\nimport \\\"./IVaultFarm.sol\\\";\\nimport \\\"../binary/IbnbBeatsV4.sol\\\";\\nimport \\\"../binary/IContractsLibraryStaking.sol\\\";\\n\\ncontract MinerHandlerV2 is\\n    IMinerHandlerV2,\\n    ReentrancyGuard\\n{\\n    IERC20 internal token;\\n    IVaultFarm internal vault;\\n    IContractsLibraryStaking public contractsLibrary;\\n    Contract[] internal allcontracts;\\n    address public minerContract;\\n    // HARDCODED IN MINER CONTRACT\\n    uint public constant priceWhiteList = 30 ether;\\n    uint internal constant PERCENT_DIVIDER = 1000;\\n    uint public constant INVEST_LEVEL_THRESHOLD = 250 ether;\\n    uint[3] public REWARDS_BY_TYPE = [150 ether, 200 ether, 250 ether];\\n    uint[3] public REWARDS_BY_TYPE_INTERVAL = [8 * MONTH, 9 * MONTH, 10 * MONTH];\\n    uint public constant MONTH = 30 days;\\n    mapping(address => address) public override walletToContract;\\n    mapping(address => address) public override contractToWallet;\\n    mapping(address => User) internal users;\\n    mapping(address => Bonus[]) public bonuses;\\n\\n    modifier isDeployed() {\\n        require(\\n            walletToContract[msg.sender] != address(0),\\n            \\\"Contract not deployed\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _tokenAddress,\\n        address _minerContract,\\n        address _contractsLibrary,\\n        address _vault\\n    ) {\\n        token = IERC20(_tokenAddress);\\n        minerContract = _minerContract;\\n        contractsLibrary = IContractsLibraryStaking(_contractsLibrary);\\n        vault = IVaultFarm(_vault);\\n    }\\n\\n    function getUser(address _user) external view override returns (User memory) {\\n        return users[_user];\\n    }\\n\\n    function getUserBonusCount (address _user) external view returns (uint) {\\n        return bonuses[_user].length;\\n    }\\n\\n    function getUserBonus(address _user) external view returns (Bonus[] memory _bonus) {\\n        _bonus = bonuses[_user];\\n        for (uint256 index = 0; index < _bonus.length; index++) {\\n            (uint reward,,uint _level) = getReward(_user, index);\\n            if(_bonus[index].levelReward == 0) {\\n                _bonus[index].levelReward = _level;\\n                _bonus[index].amount = reward;\\n            }\\n        }\\n        return _bonus;\\n    }\\n\\n    function getBonusByIndex(address _user, uint _index) external view returns (Bonus memory) {\\n        return bonuses[_user][_index];\\n    }\\n\\n    function getPublicDataHandler()\\n        external\\n        view\\n        returns (\\n            address _minerContract,\\n            address _tokenAddress,\\n            address _vault,\\n            address _contractsLibrary\\n        )\\n    {\\n        return (\\n            minerContract,\\n            address(token),\\n            address(vault),\\n            address(contractsLibrary)\\n        );\\n    }\\n\\n    function contractCount() external view override returns (uint256) {\\n        return allcontracts.length;\\n    }\\n\\n    function getContractData(\\n        uint index\\n    ) external view override returns (Contract memory) {\\n        return allcontracts[index];\\n    }\\n\\n    function computerSalt(address wallet) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(wallet));\\n    }\\n\\n    function deploy(address _user) internal {\\n        require(\\n            walletToContract[_user] == address(0),\\n            \\\"Contract already deployed\\\"\\n        );\\n        bytes memory bytecode = getBytecode();\\n        bytes32 salt = computerSalt(_user);\\n        address pair = Create2.deploy(0, salt, bytecode);\\n        require(contractToWallet[pair] == address(0), \\\"Contract already exist\\\");\\n        ContractSlave(payable(pair)).initialize(\\n            _user,\\n            address(token),\\n            minerContract\\n        );\\n        allcontracts.push(Contract(_user, pair));\\n        walletToContract[_user] = pair;\\n        // users[_user].constractSlave = pair;\\n        contractToWallet[pair] = _user;\\n        emit CreateWallet(_user, pair, allcontracts.length);\\n    }\\n\\n    function invest(\\n        address ref,\\n        uint256 amount\\n    ) external override {\\n        address _user = msg.sender;\\n        if (walletToContract[_user] == address(0)) {\\n            deploy(_user);\\n        }\\n        User storage user = users[_user];\\n        if(user.user == address(0)) {\\n            user.user = _user;\\n        }\\n        user.totalInvested += amount;\\n        uint newInvestLevel = user.totalInvested / INVEST_LEVEL_THRESHOLD;\\n        if (newInvestLevel > user.currentRewardLevel) {\\n            uint trueLevel = newInvestLevel - user.currentRewardLevel;\\n            user.currentRewardLevel = newInvestLevel;\\n            user.lastInvestDate = block.timestamp;\\n            for(uint i=0; i < trueLevel; i++) {\\n                bonuses[_user].push(Bonus(REWARDS_BY_TYPE[0], 0, 0, block.timestamp, 0, block.timestamp + REWARDS_BY_TYPE_INTERVAL[0], bonuses[_user].length, 0));\\n            }\\n        }\\n        address _contract = walletToContract[_user];\\n        token.transferFrom(msg.sender, _contract, amount);\\n        ContractSlave(payable(_contract)).buy(ref,amount);\\n    }\\n\\n    function sell() external isDeployed {\\n        ContractSlave(payable(walletToContract[msg.sender])).sell();\\n    }\\n\\n    function reInvest() external isDeployed {\\n        ContractSlave(payable(walletToContract[msg.sender])).reInvest();\\n    }\\n\\n    function buyWhiteList() external {\\n        address _contract = walletToContract[msg.sender];\\n        require(_contract != address(0), \\\"Contract not deployed\\\");\\n        uint256 amount = contractsLibrary.getBusdToBNBToToken(\\n            address(token),\\n            priceWhiteList\\n        );\\n        token.transferFrom(msg.sender, _contract, amount);\\n        ContractSlave(payable(_contract)).buyWhiteList();\\n    }\\n\\n    function buySecure() external {\\n        address _contract = walletToContract[msg.sender];\\n        require(_contract != address(0), \\\"Contract not deployed\\\");\\n        uint256 amount = contractsLibrary.getBusdToBNBToToken(\\n            address(token),\\n            IbnbBeatsV4(minerContract).priceSecure()\\n        );\\n        token.transferFrom(msg.sender, _contract, amount);\\n        ContractSlave(payable(_contract)).buySecure();\\n    }\\n\\n    function withdraw() external isDeployed {\\n        ContractSlave(payable(walletToContract[msg.sender])).withdraw();\\n    }\\n\\n    function getUserBalance(address wallet) external view returns (uint256) {\\n        if (walletToContract[wallet] == address(0)) {\\n            return 0;\\n        }\\n        return ContractSlave(payable(walletToContract[wallet])).getBalance();\\n    }\\n\\n    function computeAddressBacth(\\n        bytes32[] calldata salts\\n    ) external view returns (address[] memory) {\\n        address[] memory addresses = new address[](salts.length);\\n        for (uint256 i = 0; i < salts.length; i++) {\\n            addresses[i] = computeAddress(salts[i]);\\n        }\\n        return addresses;\\n    }\\n\\n    function computeAddress(bytes32 salt) public view returns (address) {\\n        return Create2.computeAddress(salt, getBytecodeHash());\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddressV2(\\n        bytes32 salt,\\n        bytes32 bytecodeHash\\n    ) external view returns (address) {\\n        return Create2.computeAddress(salt, bytecodeHash);\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddressV3(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) public pure returns (address) {\\n        return Create2.computeAddress(salt, bytecodeHash, deployer);\\n    }\\n\\n    function computeAddressByAddress(\\n        address wallet\\n    ) external view returns (address) {\\n        return computeAddress(computerSalt(wallet));\\n    }\\n\\n    function getBytecode() public pure returns (bytes memory) {\\n        return type(ContractSlave).creationCode;\\n    }\\n\\n    function getBytecodeHash() public pure returns (bytes32) {\\n        bytes32 bytecodeHash = keccak256(getBytecode());\\n        return bytecodeHash;\\n    }\\n\\n    function contractsArray() external view returns (Contract[] memory) {\\n        return allcontracts;\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function getContractSlaveBalanceBatchByAddress(\\n        address _token,\\n        address[] calldata _address\\n    ) external view returns (uint[] memory) {\\n        uint[] memory balances = new uint[](_address.length);\\n        for (uint i = 0; i < _address.length; i++) {\\n            if (_address[i] != address(0)) {\\n                if (_token == address(0)) {\\n                    balances[i] = address(_address[i]).balance;\\n                } else {\\n                    balances[i] = IERC20(_token).balanceOf(_address[i]);\\n                }\\n            }\\n        }\\n        return balances;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function getHashByCode(string calldata _code) external pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_code));\\n    }\\n\\n    function getDaTe() external view override returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    function getReward(address _user, uint _index) public view returns(uint _toWihdraw, bool _canWithdraw, uint _level) {\\n        // User memory user = users[_user];\\n        Bonus memory bonus = bonuses[_user][_index];\\n        uint reward = 0;\\n        if(bonus.date + REWARDS_BY_TYPE_INTERVAL[2] < block.timestamp) {\\n            reward = REWARDS_BY_TYPE[2];\\n            _level = 3;\\n        } else if(bonus.date + REWARDS_BY_TYPE_INTERVAL[1] < block.timestamp) {\\n            reward = REWARDS_BY_TYPE[1];\\n            _level = 2;\\n        } else if(bonus.date + REWARDS_BY_TYPE_INTERVAL[0] < block.timestamp) {\\n            reward = REWARDS_BY_TYPE[0];\\n            _level = 1;\\n        } else {\\n            return (bonus.amount, false, 0);\\n        }\\n        // if(user.currentRewardLevel > user.lastRewardLevel) {\\n        //     uint trueLevel = user.currentRewardLevel - user.lastRewardLevel;\\n        //     uint multiplier = 0;\\n        //     if(trueLevel > 1) {\\n        //         multiplier = trueLevel - 1;\\n        //     }\\n        //     return reward + (REWARDS_BY_TYPE[0] * trueLevel);\\n        // }\\n        return (reward, true, _level);\\n    }\\n\\n    // function getUserRewardData(address _user) external view override returns (User memory user, uint _toWithdraw, uint _trueLevel, uint[3] memory _withdrawDate, uint[3] memory _withdrawInterval) {\\n    //     user = users[_user];\\n    //     _toWithdraw = getReward(_user);\\n    //     if(user.currentRewardLevel > user.lastRewardLevel) {\\n    //         _trueLevel = user.currentRewardLevel - user.lastRewardLevel;\\n    //     }\\n    //     _withdrawDate[0] = user.lastInvestDate + REWARDS_BY_TYPE_INTERVAL[0];\\n    //     _withdrawDate[1] = user.lastInvestDate + REWARDS_BY_TYPE_INTERVAL[1];\\n    //     _withdrawDate[2] = user.lastInvestDate + REWARDS_BY_TYPE_INTERVAL[2];\\n    //     if(block.timestamp > _withdrawDate[0]) {\\n    //         _withdrawInterval[0] = 0;\\n    //     } else {\\n    //         _withdrawInterval[0] = _withdrawDate[0] - block.timestamp;\\n    //     }\\n    //     if(block.timestamp > _withdrawDate[1]) {\\n    //         _withdrawInterval[1] = 0;\\n    //     } else {\\n    //         _withdrawInterval[1] = _withdrawDate[1] - block.timestamp;\\n    //     }\\n    //     if(block.timestamp > _withdrawDate[2]) {\\n    //         _withdrawInterval[2] = 0;\\n    //     } else {\\n    //         _withdrawInterval[2] = _withdrawDate[2] - block.timestamp;\\n    //     }\\n    // }\\n\\n    function withdrawReward(uint _bonusId) external {\\n        User storage user = users[msg.sender];\\n        Bonus storage bonus = bonuses[msg.sender][_bonusId];\\n        (uint reward, bool _canWithdraw, uint _level) = getReward(msg.sender, _bonusId);\\n        require(reward > 0, \\\"No reward\\\");\\n        require(_canWithdraw, \\\"Can't withdraw yet\\\");\\n        uint rewardInTokens = contractsLibrary.getBusdToBNBToToken(address(token), reward);\\n        require(rewardInTokens <= token.balanceOf(address(vault)), \\\"Not enough vault balance\\\");\\n        vault.safeTransfer(token, address(this), rewardInTokens);\\n        swapTokensToBnb(rewardInTokens);\\n        uint rewardInBnb = address(this).balance;\\n        require(rewardInBnb > 0, \\\"No reward bnb\\\");\\n        // user.lastRewardLevel = user.currentRewardLevel;\\n        require(bonus.totalWithdrawn == 0, \\\"Already withdrawn\\\");\\n        user.totalRewardWithdrawn += reward;\\n        user.lastWithdrawDate = block.timestamp;\\n        bonus.totalWithdrawn += reward;\\n        bonus.totalWithdrawBnb += rewardInBnb;\\n        bonus.withdrawDate = block.timestamp;\\n        bonus.levelReward = _level;\\n        bonus.amount = reward;\\n        payable(msg.sender).transfer(rewardInBnb);\\n    }\\n\\n    function swapTokensToBnb(uint _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = contractsLibrary.WBNB();\\n        token.approve(address(contractsLibrary.ROUTER()), _amount);\\n        IUniswapV2Router02 ROUTER = IUniswapV2Router02(address(contractsLibrary.ROUTER()));\\n        ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MinerV4HandlerV3/MinerSlave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../binary/IbnbBeatsV4.sol\\\";\\n\\ncontract ContractSlave {\\n    address public owner;\\n    address public contractMaster;\\n    address public tokenAddress;\\n    address public minerContract;\\n\\n    modifier isNotInitialized() {\\n        require(\\n            contractMaster == address(0),\\n            \\\"Contract is already initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _tokenAddress,\\n        address _minerContract\\n    ) public isNotInitialized {\\n        contractMaster = msg.sender;\\n        owner = _owner;\\n        tokenAddress = _tokenAddress;\\n        minerContract = _minerContract;\\n        payable(owner).transfer(address(this).balance);\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == contractMaster,\\n            \\\"Only owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function buy(address ref, uint256 amount) external onlyOwner {\\n        IERC20(tokenAddress).approve(minerContract, amount);\\n        IbnbBeatsV4(minerContract).buy(ref, amount);\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function sell() external onlyOwner {\\n        IbnbBeatsV4(minerContract).sell();\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function reInvest() external onlyOwner {\\n        IbnbBeatsV4(minerContract).reInvest();\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function buyWhiteList() external payable onlyOwner {\\n        IERC20(tokenAddress).approve(\\n            minerContract,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n        IbnbBeatsV4(minerContract).buyWhiteList();\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function buySecure() external payable onlyOwner {\\n        IERC20(tokenAddress).approve(\\n            minerContract,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n        IbnbBeatsV4(minerContract).buySecure();\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n        IERC20(tokenAddress).transfer(\\n            owner,\\n            IERC20(tokenAddress).balanceOf(address(this))\\n        );\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractsLibrary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"CreateWallet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"INVEST_LEVEL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARDS_BY_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARDS_BY_TYPE_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySecure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"salts\",\"type\":\"bytes32[]\"}],\"name\":\"computeAddressBacth\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"computeAddressByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"computeAddressV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeAddressV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"computerSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsArray\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IMinerHandlerV2.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsLibrary\",\"outputs\":[{\"internalType\":\"contract IContractsLibraryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBonusByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IMinerHandlerV2.Bonus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContractData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IMinerHandlerV2.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"getContractSlaveBalanceBatchByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaTe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"getHashByCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicDataHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_minerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractsLibrary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_toWihdraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInvestDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IMinerHandlerV2.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBonus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IMinerHandlerV2.Bonus[]\",\"name\":\"_bonus\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBonusCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MinerHandlerV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000083d3c2d1a55687498df6800c5f173ec6a7556089000000000000000000000000fdf5f5674445a53827f591a420a9d6202a5eca4b000000000000000000000000cf2ab8f637b1b3c7aeacea650a944efb71343217000000000000000000000000dbb4343f1c77327efbd36763d10a64c8b9a565f2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}