{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Presale {\\r\\n    address public owner;\\r\\n    uint256 public multiplier;\\r\\n    uint256 public maxDeposit;\\r\\n    uint256 public maxTotalDepositPerUser;\\r\\n    address public dispersalToken;\\r\\n    bool public isActive;\\r\\n    mapping(address => uint256) public deposits;\\r\\n    mapping(address => bool) public allowedAddresses;\\r\\n    mapping(address => uint256) public bnbDeposits;\\r\\n\\r\\n    address[] private depositors;\\r\\n\\r\\n    uint256 public contractBNBBalance;\\r\\n\\r\\n    constructor(\\r\\n        uint256 _multiplier,\\r\\n        uint256 _maxDeposit,\\r\\n        uint256 _maxTotalDepositPerUser,\\r\\n        address _dispersalToken,\\r\\n        bool _isActive,\\r\\n        address[] memory _allowedAddresses\\r\\n    ) {\\r\\n        owner = msg.sender;\\r\\n        multiplier = _multiplier;\\r\\n        maxDeposit = _maxDeposit;\\r\\n        maxTotalDepositPerUser = _maxTotalDepositPerUser;\\r\\n        dispersalToken = _dispersalToken;\\r\\n        isActive = _isActive;\\r\\n\\r\\n        for (uint256 i = 0; i < _allowedAddresses.length; i++) {\\r\\n            allowedAddresses[_allowedAddresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowed() {\\r\\n        require(isActive, \\\"The contract is currently inactive\\\");\\r\\n        require(allowedAddresses[msg.sender], \\\"You are not allowed to participate in the presale\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function deposit() external payable onlyAllowed {\\r\\n        require(msg.value > 0, \\\"No BNB sent\\\");\\r\\n        require(msg.value <= maxDeposit, \\\"Deposit amount exceeds the maximum deposit limit\\\");\\r\\n\\r\\n        uint256 remainingAmount = maxTotalDepositPerUser - deposits[msg.sender];\\r\\n        require(msg.value <= remainingAmount, \\\"Deposit amount exceeds the maximum total deposit per user\\\");\\r\\n\\r\\n        deposits[msg.sender] += msg.value;\\r\\n        bnbDeposits[msg.sender] += msg.value;\\r\\n\\r\\n        if (deposits[msg.sender] == msg.value) {\\r\\n            depositors.push(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function disperseTokens() external onlyOwner {\\r\\n        IERC20 newToken = IERC20(dispersalToken);\\r\\n\\r\\n        for (uint256 i = 0; i < depositors.length; i++) {\\r\\n            address depositor = depositors[i];\\r\\n            uint256 tokensToDisperse = calculateDispersalTokensOwed(depositor);\\r\\n            require(newToken.balanceOf(address(this)) >= tokensToDisperse, \\\"Insufficient new tokens\\\");\\r\\n\\r\\n            newToken.transfer(depositor, tokensToDisperse);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateTotalTokensToDisperse() public view returns (uint256) {\\r\\n        return bnbDeposits[msg.sender] * multiplier;\\r\\n    }\\r\\n\\r\\n    function calculateDispersalTokensOwed(address user) public view returns (uint256) {\\r\\n        return bnbDeposits[user] * multiplier;\\r\\n    }\\r\\n\\r\\n    function getTotalDeposit(address user) public view returns (uint256) {\\r\\n        return deposits[user];\\r\\n    }\\r\\n\\r\\n    function updateAllowedAddresses(address[] memory _allowedAddresses) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _allowedAddresses.length; i++) {\\r\\n            allowedAddresses[_allowedAddresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeAllowedAddress(address _address) external onlyOwner {\\r\\n        allowedAddresses[_address] = false;\\r\\n    }\\r\\n\\r\\n    function setMaxDeposit(uint256 _maxDeposit) external onlyOwner {\\r\\n        maxDeposit = _maxDeposit;\\r\\n    }\\r\\n\\r\\n    function setDispersalToken(address _dispersalToken) external onlyOwner {\\r\\n        dispersalToken = _dispersalToken;\\r\\n    }\\r\\n\\r\\n    function activateContract() external onlyOwner {\\r\\n        isActive = true;\\r\\n    }\\r\\n\\r\\n    function deactivateContract() external onlyOwner {\\r\\n        isActive = false;\\r\\n    }\\r\\n\\r\\n    function isAddressAllowed(address _address) public view returns (bool) {\\r\\n        return allowedAddresses[_address];\\r\\n    }\\r\\n\\r\\n    function totalDepositors() public view returns (uint256) {\\r\\n        return depositors.length;\\r\\n    }\\r\\n\\r\\n    function depositorAtIndex(uint256 index) public view returns (address) {\\r\\n        require(index < depositors.length, \\\"Index out of range\\\");\\r\\n        return depositors[index];\\r\\n    }\\r\\n\\r\\n    function depositBNB() external payable onlyOwner {\\r\\n        require(msg.value > 0, \\\"No BNB sent\\\");\\r\\n        contractBNBBalance += msg.value;\\r\\n    }\\r\\n\\r\\n    function updateMultiplier(uint256 newMultiplier) external onlyOwner {\\r\\n        multiplier = newMultiplier;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Invalid address\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function withdrawBNB(uint256 amount) external onlyOwner {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(amount <= contractBNBBalance, \\\"Insufficient contract BNB balance\\\");\\r\\n\\r\\n        payable(owner).transfer(amount);\\r\\n        contractBNBBalance -= amount;\\r\\n    }\\r\\n\\r\\n    // Withdraw function to allow the owner to withdraw any balance (BNB and tokens)\\r\\n    function withdrawAll() external onlyOwner {\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        contractBNBBalance = 0; // Reset the contract BNB balance\\r\\n        payable(owner).transfer(contractBalance);\\r\\n\\r\\n        IERC20 token = IERC20(dispersalToken);\\r\\n        uint256 tokenBalance = token.balanceOf(address(this));\\r\\n        if (tokenBalance > 0) {\\r\\n            token.transfer(owner, tokenBalance);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalDepositPerUser\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dispersalToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_allowedAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bnbDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateDispersalTokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalTokensToDisperse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"depositorAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispersalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disperseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalDepositPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispersalToken\",\"type\":\"address\"}],\"name\":\"setDispersalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowedAddresses\",\"type\":\"address[]\"}],\"name\":\"updateAllowedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000c3335cb20f7d02e35b1f36341f5583f1b68285cc000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000acf452f636fb7e8efd82e7acc0666540b552bbd40000000000000000000000001fb35731d72d6aadb36cbc7e0c5660a0c1ed532400000000000000000000000046edf58ec4c05b362f503cd3b8947a13e00ce542", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}