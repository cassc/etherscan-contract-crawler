{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n\t *\r\n\t * The default value of {decimals} is 18. To select a different value for\r\n\t * {decimals} you should overload it.\r\n\t *\r\n\t * All two of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\t * overridden;\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\t *\r\n\t * This internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), 'ERC20: transfer from the zero address');\r\n\t\trequire(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), 'ERC20: approve from the zero address');\r\n\t\trequire(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * has been transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), 'Ownable: caller is not the owner');\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/proxy/Clones.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n\t/**\r\n\t * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n\t *\r\n\t * This function uses the create opcode, which should never revert.\r\n\t */\r\n\tfunction clone(address implementation) internal returns (address instance) {\r\n\t\tassembly {\r\n\t\t\tlet ptr := mload(0x40)\r\n\t\t\tmstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n\t\t\tmstore(add(ptr, 0x14), shl(0x60, implementation))\r\n\t\t\tmstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\t\t\tinstance := create(0, ptr, 0x37)\r\n\t\t}\r\n\t\trequire(instance != address(0), 'ERC1167: create failed');\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n\t *\r\n\t * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n\t * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n\t * the clones cannot be deployed twice at the same address.\r\n\t */\r\n\tfunction cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n\t\tassembly {\r\n\t\t\tlet ptr := mload(0x40)\r\n\t\t\tmstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n\t\t\tmstore(add(ptr, 0x14), shl(0x60, implementation))\r\n\t\t\tmstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\t\t\tinstance := create2(0, ptr, 0x37, salt)\r\n\t\t}\r\n\t\trequire(instance != address(0), 'ERC1167: create2 failed');\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n\t */\r\n\tfunction predictDeterministicAddress(\r\n\t\taddress implementation,\r\n\t\tbytes32 salt,\r\n\t\taddress deployer\r\n\t) internal pure returns (address predicted) {\r\n\t\tassembly {\r\n\t\t\tlet ptr := mload(0x40)\r\n\t\t\tmstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n\t\t\tmstore(add(ptr, 0x14), shl(0x60, implementation))\r\n\t\t\tmstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n\t\t\tmstore(add(ptr, 0x38), shl(0x60, deployer))\r\n\t\t\tmstore(add(ptr, 0x4c), salt)\r\n\t\t\tmstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n\t\t\tpredicted := keccak256(add(ptr, 0x37), 0x55)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n\t */\r\n\tfunction predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\r\n\t\treturn predictDeterministicAddress(implementation, salt, address(this));\r\n\t}\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Factory.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256 amountA,\r\n\t\t\tuint256 amountB,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (\r\n\t\t\tuint256 amountToken,\r\n\t\t\tuint256 amountETH,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\t/**\r\n\t * @dev Indicates that the contract has been initialized.\r\n\t */\r\n\tbool private _initialized;\r\n\r\n\t/**\r\n\t * @dev Indicates that the contract is in the process of being initialized.\r\n\t */\r\n\tbool private _initializing;\r\n\r\n\t/**\r\n\t * @dev Modifier to protect an initializer function from being invoked twice.\r\n\t */\r\n\tmodifier initializer() {\r\n\t\trequire(_initializing || !_initialized, 'Initializable: contract is already initialized');\r\n\r\n\t\tbool isTopLevelCall = !_initializing;\r\n\t\tif (isTopLevelCall) {\r\n\t\t\t_initializing = true;\r\n\t\t\t_initialized = true;\r\n\t\t}\r\n\r\n\t\t_;\r\n\r\n\t\tif (isTopLevelCall) {\r\n\t\t\t_initializing = false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n\tfunction __Context_init() internal initializer {\r\n\t\t__Context_init_unchained();\r\n\t}\r\n\r\n\tfunction __Context_init_unchained() internal initializer {}\r\n\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n\r\n\tuint256[50] private __gap;\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n\t *\r\n\t * The default value of {decimals} is 18. To select a different value for\r\n\t * {decimals} you should overload it.\r\n\t *\r\n\t * All two of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tfunction __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n\t\t__Context_init_unchained();\r\n\t\t__ERC20_init_unchained(name_, symbol_);\r\n\t}\r\n\r\n\tfunction __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\t * overridden;\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\t *\r\n\t * This internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), 'ERC20: transfer from the zero address');\r\n\t\trequire(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), 'ERC20: approve from the zero address');\r\n\t\trequire(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * has been transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\tuint256[45] private __gap;\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tfunction __Ownable_init() internal initializer {\r\n\t\t__Context_init_unchained();\r\n\t\t__Ownable_init_unchained();\r\n\t}\r\n\r\n\tfunction __Ownable_init_unchained() internal initializer {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), 'Ownable: caller is not the owner');\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n\r\n\tuint256[49] private __gap;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\r\n\tfunction symbol() external pure returns (string memory);\r\n\r\n\tfunction decimals() external pure returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns (uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n\tfunction factory() external view returns (address);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction mint(address to) external returns (uint256 liquidity);\r\n\r\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\n// Dependency file: contracts/libs/SafeMathInt.sol\r\n\r\n// pragma solidity =0.8.4;\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\t/**\r\n\t * @dev Multiplies two int256 variables and fails on overflow.\r\n\t */\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Division of two int256 variables and fails on overflow.\r\n\t */\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two int256 variables and fails on overflow.\r\n\t */\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two int256 variables and fails on overflow.\r\n\t */\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts to absolute value, and fails on overflow.\r\n\t */\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\n// Dependency file: contracts/libs/SafeMathUint.sol\r\n\r\n// pragma solidity =0.8.4;\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\n// Dependency file: contracts/baby/IterableMapping.sol\r\n\r\n// pragma solidity =0.8.4;\r\n\r\nlibrary IterableMapping {\r\n\t// Iterable mapping from address to uint;\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint256) values;\r\n\t\tmapping(address => uint256) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint256) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int256) {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int256(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint256 index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint256) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(\r\n\t\tMap storage map,\r\n\t\taddress key,\r\n\t\tuint256 val\r\n\t) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint256 index = map.indexOf[key];\r\n\t\tuint256 lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\n// Dependency file: contracts/baby/BabyTokenDividendTracker.sol\r\n\r\n// pragma solidity =0.8.4;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Factory.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Router02.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Pair.sol\";\r\n// import \"contracts/libs/SafeMathInt.sol\";\r\n// import \"contracts/libs/SafeMathUint.sol\";\r\n// import \"contracts/baby/IterableMapping.sol\";\r\n\r\n/// @title Dividend-Paying Token Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev An interface for a dividend-paying token contract.\r\ninterface DividendPayingTokenInterface {\r\n\t/// @notice View the amount of dividend in wei that an address can withdraw.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` can withdraw.\r\n\tfunction dividendOf(address _owner) external view returns (uint256);\r\n\r\n\t/// @notice Withdraws the ether distributed to the sender.\r\n\t/// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n\t///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n\tfunction withdrawDividend() external;\r\n\r\n\t/// @dev This event MUST emit when ether is distributed to token holders.\r\n\t/// @param from The address which sends ether to this contract.\r\n\t/// @param weiAmount The amount of distributed ether in wei.\r\n\tevent DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n\t/// @dev This event MUST emit when an address withdraws their dividend.\r\n\t/// @param to The address which withdraws ether from this contract.\r\n\t/// @param weiAmount The amount of withdrawn ether in wei.\r\n\tevent DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\n/// @title Dividend-Paying Token Optional Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev OPTIONAL functions for a dividend-paying token contract.\r\ninterface DividendPayingTokenOptionalInterface {\r\n\t/// @notice View the amount of dividend in wei that an address can withdraw.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` can withdraw.\r\n\tfunction withdrawableDividendOf(address _owner) external view returns (uint256);\r\n\r\n\t/// @notice View the amount of dividend in wei that an address has withdrawn.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n\tfunction withdrawnDividendOf(address _owner) external view returns (uint256);\r\n\r\n\t/// @notice View the amount of dividend in wei that an address has earned in total.\r\n\t/// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` has earned in total.\r\n\tfunction accumulativeDividendOf(address _owner) external view returns (uint256);\r\n}\r\n\r\n/// @title Dividend-Paying Token\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as dividends and allows token holders to withdraw their dividends.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract DividendPayingToken is ERC20Upgradeable, OwnableUpgradeable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\taddress public rewardToken;\r\n\r\n\t// With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n\t// For more discussion about choosing the value of `magnitude`,\r\n\t//  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n\tuint256 internal constant magnitude = 2**128;\r\n\r\n\tuint256 internal magnifiedDividendPerShare;\r\n\r\n\t// About dividendCorrection:\r\n\t// If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n\t// When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n\t//   `dividendOf(_user)` should not be changed,\r\n\t//   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n\t// To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n\t//   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n\t//   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n\t// So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n\tmapping(address => int256) internal magnifiedDividendCorrections;\r\n\tmapping(address => uint256) internal withdrawnDividends;\r\n\r\n\tuint256 public totalDividendsDistributed;\r\n\r\n\tfunction __DividendPayingToken_init(\r\n\t\taddress _rewardToken,\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol\r\n\t) internal initializer {\r\n\t\t__Ownable_init();\r\n\t\t__ERC20_init(_name, _symbol);\r\n\t\trewardToken = _rewardToken;\r\n\t}\r\n\r\n\tfunction distributeCAKEDividends(uint256 amount) public onlyOwner {\r\n\t\trequire(totalSupply() > 0);\r\n\r\n\t\tif (amount > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare.add((amount).mul(magnitude) / totalSupply());\r\n\t\t\temit DividendsDistributed(msg.sender, amount);\r\n\r\n\t\t\ttotalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Withdraws the ether distributed to the sender.\r\n\t/// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n\tfunction withdrawDividend() public virtual override {\r\n\t\t_withdrawDividendOfUser(payable(msg.sender));\r\n\t}\r\n\r\n\t/// @notice Withdraws the ether distributed to the sender.\r\n\t/// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n\tfunction _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\t\t\temit DividendWithdrawn(user, _withdrawableDividend);\r\n\t\t\tbool success = IERC20(rewardToken).transfer(user, _withdrawableDividend);\r\n\r\n\t\t\tif (!success) {\r\n\t\t\t\twithdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn _withdrawableDividend;\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/// @notice View the amount of dividend in wei that an address can withdraw.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` can withdraw.\r\n\tfunction dividendOf(address _owner) public view override returns (uint256) {\r\n\t\treturn withdrawableDividendOf(_owner);\r\n\t}\r\n\r\n\t/// @notice View the amount of dividend in wei that an address can withdraw.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` can withdraw.\r\n\tfunction withdrawableDividendOf(address _owner) public view override returns (uint256) {\r\n\t\treturn accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\t}\r\n\r\n\t/// @notice View the amount of dividend in wei that an address has withdrawn.\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n\tfunction withdrawnDividendOf(address _owner) public view override returns (uint256) {\r\n\t\treturn withdrawnDividends[_owner];\r\n\t}\r\n\r\n\t/// @notice View the amount of dividend in wei that an address has earned in total.\r\n\t/// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n\t/// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n\t/// @param _owner The address of a token holder.\r\n\t/// @return The amount of dividend in wei that `_owner` has earned in total.\r\n\tfunction accumulativeDividendOf(address _owner) public view override returns (uint256) {\r\n\t\treturn magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe().add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\t}\r\n\r\n\t/// @dev Internal function that transfer tokens from one address to another.\r\n\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n\t/// @param from The address to transfer from.\r\n\t/// @param to The address to transfer to.\r\n\t/// @param value The amount to be transferred.\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal virtual override {\r\n\t\trequire(false);\r\n\r\n\t\tint256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\t\tmagnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\t\tmagnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\t}\r\n\r\n\t/// @dev Internal function that mints tokens to an account.\r\n\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n\t/// @param account The account that will receive the created tokens.\r\n\t/// @param value The amount that will be created.\r\n\tfunction _mint(address account, uint256 value) internal override {\r\n\t\tsuper._mint(account, value);\r\n\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n\t}\r\n\r\n\t/// @dev Internal function that burns an amount of the token of a given account.\r\n\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n\t/// @param account The account whose tokens will be burnt.\r\n\t/// @param value The amount that will be burnt.\r\n\tfunction _burn(address account, uint256 value) internal override {\r\n\t\tsuper._burn(account, value);\r\n\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n\t}\r\n\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = balanceOf(account);\r\n\r\n\t\tif (newBalance > currentBalance) {\r\n\t\t\tuint256 mintAmount = newBalance.sub(currentBalance);\r\n\t\t\t_mint(account, mintAmount);\r\n\t\t} else if (newBalance < currentBalance) {\r\n\t\t\tuint256 burnAmount = currentBalance.sub(newBalance);\r\n\t\t\t_burn(account, burnAmount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract BABYTOKENDividendTracker is OwnableUpgradeable, DividendPayingToken {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathInt for int256;\r\n\tusing IterableMapping for IterableMapping.Map;\r\n\r\n\tIterableMapping.Map private tokenHoldersMap;\r\n\tuint256 public lastProcessedIndex;\r\n\r\n\tmapping(address => bool) public excludedFromDividends;\r\n\r\n\tmapping(address => uint256) public lastClaimTimes;\r\n\r\n\tuint256 public claimWait;\r\n\tuint256 public minimumTokenBalanceForDividends;\r\n\r\n\tevent ExcludeFromDividends(address indexed account);\r\n\tevent ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n\tevent Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n\tfunction initialize(address rewardToken_, uint256 minimumTokenBalanceForDividends_) external initializer {\r\n\t\tDividendPayingToken.__DividendPayingToken_init(rewardToken_, 'DIVIDEND_TRACKER', 'DIVIDEND_TRACKER');\r\n\t\tclaimWait = 3600;\r\n\t\tminimumTokenBalanceForDividends = minimumTokenBalanceForDividends_;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress,\r\n\t\taddress,\r\n\t\tuint256\r\n\t) internal pure override {\r\n\t\trequire(false, 'Dividend_Tracker: No transfers allowed');\r\n\t}\r\n\r\n\tfunction withdrawDividend() public pure override {\r\n\t\trequire(false, \"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main BABYTOKEN contract.\");\r\n\t}\r\n\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\trequire(!excludedFromDividends[account]);\r\n\t\texcludedFromDividends[account] = true;\r\n\r\n\t\t_setBalance(account, 0);\r\n\t\ttokenHoldersMap.remove(account);\r\n\r\n\t\temit ExcludeFromDividends(account);\r\n\t}\r\n\r\n\tfunction isExcludedFromDividends(address account) public view returns (bool) {\r\n\t\treturn excludedFromDividends[account];\r\n\t}\r\n\r\n\tfunction updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n\t\trequire(newClaimWait >= 3600 && newClaimWait <= 86400, 'Dividend_Tracker: claimWait must be updated to between 1 and 24 hours');\r\n\t\trequire(newClaimWait != claimWait, 'Dividend_Tracker: Cannot update claimWait to same value');\r\n\t\temit ClaimWaitUpdated(newClaimWait, claimWait);\r\n\t\tclaimWait = newClaimWait;\r\n\t}\r\n\r\n\tfunction updateMinimumTokenBalanceForDividends(uint256 amount) external onlyOwner {\r\n\t\tminimumTokenBalanceForDividends = amount;\r\n\t}\r\n\r\n\tfunction getLastProcessedIndex() external view returns (uint256) {\r\n\t\treturn lastProcessedIndex;\r\n\t}\r\n\r\n\tfunction getNumberOfTokenHolders() external view returns (uint256) {\r\n\t\treturn tokenHoldersMap.keys.length;\r\n\t}\r\n\r\n\tfunction getAccount(address _account)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress account,\r\n\t\t\tint256 index,\r\n\t\t\tint256 iterationsUntilProcessed,\r\n\t\t\tuint256 withdrawableDividends,\r\n\t\t\tuint256 totalDividends,\r\n\t\t\tuint256 lastClaimTime,\r\n\t\t\tuint256 nextClaimTime,\r\n\t\t\tuint256 secondsUntilAutoClaimAvailable\r\n\t\t)\r\n\t{\r\n\t\taccount = _account;\r\n\r\n\t\tindex = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n\t\titerationsUntilProcessed = -1;\r\n\r\n\t\tif (index >= 0) {\r\n\t\t\tif (uint256(index) > lastProcessedIndex) {\r\n\t\t\t\titerationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n\t\t\t} else {\r\n\t\t\t\tuint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ? tokenHoldersMap.keys.length.sub(lastProcessedIndex) : 0;\r\n\r\n\t\t\t\titerationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twithdrawableDividends = withdrawableDividendOf(account);\r\n\t\ttotalDividends = accumulativeDividendOf(account);\r\n\r\n\t\tlastClaimTime = lastClaimTimes[account];\r\n\r\n\t\tnextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\r\n\t\tsecondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;\r\n\t}\r\n\r\n\tfunction getAccountAtIndex(uint256 index)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tint256,\r\n\t\t\tint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tif (index >= tokenHoldersMap.size()) {\r\n\t\t\treturn (address(0), -1, -1, 0, 0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\taddress account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n\t\treturn getAccount(account);\r\n\t}\r\n\r\n\tfunction canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n\t\tif (lastClaimTime > block.timestamp) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n\t}\r\n\r\n\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\t\tif (excludedFromDividends[account]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (newBalance >= minimumTokenBalanceForDividends) {\r\n\t\t\t_setBalance(account, newBalance);\r\n\t\t\ttokenHoldersMap.set(account, newBalance);\r\n\t\t} else {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t\ttokenHoldersMap.remove(account);\r\n\t\t}\r\n\t\tprocessAccount(account, true);\r\n\t}\r\n\r\n\tfunction process(uint256 gas)\r\n\t\tpublic\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n\t\tif (numberOfTokenHolders == 0) {\r\n\t\t\treturn (0, 0, lastProcessedIndex);\r\n\t\t}\r\n\r\n\t\tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n\t\tuint256 gasUsed = 0;\r\n\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 claims = 0;\r\n\r\n\t\twhile (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n\t\t\t_lastProcessedIndex++;\r\n\r\n\t\t\tif (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n\t\t\t\t_lastProcessedIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n\t\t\tif (canAutoClaim(lastClaimTimes[account])) {\r\n\t\t\t\tif (processAccount(payable(account), true)) {\r\n\t\t\t\t\tclaims++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\titerations++;\r\n\r\n\t\t\tuint256 newGasLeft = gasleft();\r\n\r\n\t\t\tif (gasLeft > newGasLeft) {\r\n\t\t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n\t\t\t}\r\n\r\n\t\t\tgasLeft = newGasLeft;\r\n\t\t}\r\n\r\n\t\tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n\t\treturn (iterations, claims, lastProcessedIndex);\r\n\t}\r\n\r\n\tfunction processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n\t\tuint256 amount = _withdrawDividendOfUser(account);\r\n\r\n\t\tif (amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Claim(account, amount, automatic);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n// Dependency file: contracts/BaseToken.sol\r\n\r\n// pragma solidity =0.8.4;\r\n\r\nenum TokenType {\r\n\tstandard,\r\n\tliquidityGenerator,\r\n\tbaby,\r\n\tbuybackBaby\r\n}\r\n\r\nabstract contract BaseToken {\r\n\tevent TokenCreated(address indexed owner, address indexed token, TokenType tokenType, uint256 version);\r\n}\r\n\r\n// Root file: contracts/baby/BabyToken.sol\r\n\r\npragma solidity =0.8.4;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Factory.sol\";\r\n// import \"contracts/interfaces/IUniswapV2Router02.sol\";\r\n// import \"contracts/baby/BabyTokenDividendTracker.sol\";\r\n// import \"contracts/BaseToken.sol\";\r\n\r\ncontract BABYTOKEN is ERC20, Ownable, BaseToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public constant VERSION = 1;\r\n\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\taddress public uniswapV2Pair;\r\n\r\n\tbool private swapping;\r\n\r\n\tBABYTOKENDividendTracker public dividendTracker;\r\n\r\n\taddress public rewardToken;\r\n\r\n\tuint256 public swapTokensAtAmount;\r\n\r\n\tuint256 public tokenRewardsFee;\r\n\tuint256 public liquidityFee;\r\n\tuint256 public marketingFee;\r\n\tuint256 public totalFees;\r\n\r\n\taddress public _marketingWalletAddress;\r\n\r\n\tuint256 public gasForProcessing;\r\n\r\n\t// exlcude from fees and max transaction amount\r\n\tmapping(address => bool) private _isExcludedFromFees;\r\n\r\n\tmapping(address => bool) public isWalletLimitExempt;\r\n\tmapping(address => bool) public isTxLimitExempt;\r\n\r\n\tuint256 public _maxTxAmount;\r\n\tuint256 public _walletMax;\r\n\r\n\t// store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n\t// could be subject to a maximum transfer amount\r\n\tmapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n\tevent UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n\tevent UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n\tevent ExcludeFromFees(address indexed account, bool isExcluded);\r\n\tevent ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n\tevent LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n\r\n\tevent GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n\tevent SendDividends(uint256 tokensSwapped, uint256 amount);\r\n\r\n\tevent ProcessedDividendTracker(\r\n\t\tuint256 iterations,\r\n\t\tuint256 claims,\r\n\t\tuint256 lastProcessedIndex,\r\n\t\tbool indexed automatic,\r\n\t\tuint256 gas,\r\n\t\taddress indexed processor\r\n\t);\r\n\r\n\tconstructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\r\n\t\tuint256 totalSupply_ = 5000 * 10**18;\r\n\t\tuint256 minimumTokenBalanceForDividends_ = 1 * 10**18;\r\n\t\t// test router:0xB6BA90af76D139AB3170c7df0139636dB6120F7e main:0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\t\taddress router = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\t\trewardToken = address(0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402);\r\n\r\n\t\t_marketingWalletAddress = address(0x4f0197e980D74eFf2D3d591D2Fb92A26510472Ec);\r\n\t\trequire(msg.sender != _marketingWalletAddress, 'Owner and marketing wallet cannot be the same');\r\n\r\n\t\ttokenRewardsFee = 3;\r\n\t\tliquidityFee = 1;\r\n\t\tmarketingFee = 4;\r\n\t\ttotalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n\t\trequire(totalFees <= 25, 'Total fee is over 25%');\r\n\t\tswapTokensAtAmount = totalSupply_.mul(2).div(10**6); // 0.002%\r\n\r\n\t\t// use by default 300,000 gas to process auto-claiming dividends\r\n\t\tgasForProcessing = 300000;\r\n\t\t// test:0x6d78A4A7F840C09FDF5Af422a4FBDFA99E250Bee main 0x8e268141DaF54aA1fcdB5574A72feB0eC2fC3970\r\n\t\tdividendTracker = BABYTOKENDividendTracker(payable(Clones.clone(address(0x8e268141DaF54aA1fcdB5574A72feB0eC2fC3970))));\r\n\t\tdividendTracker.initialize(rewardToken, minimumTokenBalanceForDividends_);\r\n\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n\t\t// Create a uniswap pair for this new token\r\n\t\taddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t// exclude from receiving dividends\r\n\t\tdividendTracker.excludeFromDividends(address(dividendTracker));\r\n\t\tdividendTracker.excludeFromDividends(address(this));\r\n\t\tdividendTracker.excludeFromDividends(owner());\r\n\t\tdividendTracker.excludeFromDividends(address(0xdead));\r\n\t\tdividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\t\t// exclude from paying fees or having max transaction amount\r\n\t\texcludeFromFees(owner(), true);\r\n\t\texcludeFromFees(_marketingWalletAddress, true);\r\n\t\texcludeFromFees(address(this), true);\r\n\r\n\t\t_maxTxAmount = 3 * 10**18; //\r\n\t\t_walletMax = 10 * 10**18; //\r\n\r\n\t\tisWalletLimitExempt[owner()] = true;\r\n\t\tisWalletLimitExempt[address(uniswapV2Pair)] = true;\r\n\t\tisWalletLimitExempt[address(this)] = true;\r\n\t\tisWalletLimitExempt[_marketingWalletAddress] = true;\r\n\t\tisWalletLimitExempt[address(0xdead)] = true;\r\n\t\tisWalletLimitExempt[address(dividendTracker)] = true;\r\n\r\n\t\tisTxLimitExempt[owner()] = true;\r\n\t\tisTxLimitExempt[address(this)] = true;\r\n\t\tisTxLimitExempt[_marketingWalletAddress] = true;\r\n\t\tisTxLimitExempt[address(dividendTracker)] = true;\r\n\t\t/*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n\t\t_mint(owner(), totalSupply_);\r\n\r\n\t\temit TokenCreated(owner(), address(this), TokenType.baby, VERSION);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n\t\tswapTokensAtAmount = amount;\r\n\t}\r\n\r\n\tfunction updateDividendTracker(address newAddress) public onlyOwner {\r\n\t\trequire(newAddress != address(dividendTracker), 'BABYTOKEN: The dividend tracker already has that address');\r\n\r\n\t\tBABYTOKENDividendTracker newDividendTracker = BABYTOKENDividendTracker(payable(newAddress));\r\n\r\n\t\trequire(newDividendTracker.owner() == address(this), 'BABYTOKEN: The new dividend tracker must be owned by the BABYTOKEN token contract');\r\n\r\n\t\tnewDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n\t\tnewDividendTracker.excludeFromDividends(address(this));\r\n\t\tnewDividendTracker.excludeFromDividends(owner());\r\n\t\tnewDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n\t\temit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n\t\tdividendTracker = newDividendTracker;\r\n\t\tisWalletLimitExempt[address(dividendTracker)] = true;\r\n\t\tisTxLimitExempt[address(dividendTracker)] = true;\r\n\t}\r\n\r\n\tfunction setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n\t\tisTxLimitExempt[holder] = exempt;\r\n\t}\r\n\r\n\tfunction setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\r\n\t\t_maxTxAmount = maxTxAmount;\r\n\t}\r\n\r\n\tfunction setWalletLimit(uint256 newLimit) external onlyOwner {\r\n\t\t_walletMax = newLimit;\r\n\t}\r\n\r\n\tfunction setIsWalletLimitExempt(address holder, bool exempt) external onlyOwner {\r\n\t\tisWalletLimitExempt[holder] = exempt;\r\n\t}\r\n\r\n\tfunction updateUniswapV2Router(address newAddress) public onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), 'BABYTOKEN: The router already has that address');\r\n\t\temit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IUniswapV2Router02(newAddress);\r\n\t\taddress _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\tisWalletLimitExempt[address(uniswapV2Pair)] = true;\r\n\t}\r\n\r\n\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromFees[account] != excluded, \"BABYTOKEN: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFees[account] = excluded;\r\n\r\n\t\temit ExcludeFromFees(account, excluded);\r\n\t}\r\n\r\n\tfunction excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n\t\tfor (uint256 i = 0; i < accounts.length; i++) {\r\n\t\t\t_isExcludedFromFees[accounts[i]] = excluded;\r\n\t\t}\r\n\r\n\t\temit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n\t}\r\n\r\n\tfunction setMarketingWallet(address payable wallet) external onlyOwner {\r\n\t\t_marketingWalletAddress = wallet;\r\n\t}\r\n\r\n\tfunction setTokenRewardsFee(uint256 value) external onlyOwner {\r\n\t\ttokenRewardsFee = value;\r\n\t\ttotalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n\t\trequire(totalFees <= 25, 'Total fee is over 25%');\r\n\t}\r\n\r\n\tfunction setLiquiditFee(uint256 value) external onlyOwner {\r\n\t\tliquidityFee = value;\r\n\t\ttotalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n\t\trequire(totalFees <= 25, 'Total fee is over 25%');\r\n\t}\r\n\r\n\tfunction setMarketingFee(uint256 value) external onlyOwner {\r\n\t\tmarketingFee = value;\r\n\t\ttotalFees = tokenRewardsFee.add(liquidityFee).add(marketingFee);\r\n\t\trequire(totalFees <= 25, 'Total fee is over 25%');\r\n\t}\r\n\r\n\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n\t\trequire(pair != uniswapV2Pair, 'BABYTOKEN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs');\r\n\r\n\t\t_setAutomatedMarketMakerPair(pair, value);\r\n\t}\r\n\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, 'BABYTOKEN: Automated market maker pair is already set to that value');\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\r\n\t\tif (value) {\r\n\t\t\tdividendTracker.excludeFromDividends(pair);\r\n\t\t}\r\n\r\n\t\temit SetAutomatedMarketMakerPair(pair, value);\r\n\t}\r\n\r\n\tfunction updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n\t\trequire(newValue >= 200000 && newValue <= 500000, 'BABYTOKEN: gasForProcessing must be between 200,000 and 500,000');\r\n\t\trequire(newValue != gasForProcessing, 'BABYTOKEN: Cannot update gasForProcessing to same value');\r\n\t\temit GasForProcessingUpdated(newValue, gasForProcessing);\r\n\t\tgasForProcessing = newValue;\r\n\t}\r\n\r\n\tfunction updateClaimWait(uint256 claimWait) external onlyOwner {\r\n\t\tdividendTracker.updateClaimWait(claimWait);\r\n\t}\r\n\r\n\tfunction getClaimWait() external view returns (uint256) {\r\n\t\treturn dividendTracker.claimWait();\r\n\t}\r\n\r\n\tfunction updateMinimumTokenBalanceForDividends(uint256 amount) external onlyOwner {\r\n\t\tdividendTracker.updateMinimumTokenBalanceForDividends(amount);\r\n\t}\r\n\r\n\tfunction getMinimumTokenBalanceForDividends() external view returns (uint256) {\r\n\t\treturn dividendTracker.minimumTokenBalanceForDividends();\r\n\t}\r\n\r\n\tfunction getTotalDividendsDistributed() external view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsDistributed();\r\n\t}\r\n\r\n\tfunction isExcludedFromFees(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromFees[account];\r\n\t}\r\n\r\n\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.withdrawableDividendOf(account);\r\n\t}\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.balanceOf(account);\r\n\t}\r\n\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\tdividendTracker.excludeFromDividends(account);\r\n\t}\r\n\r\n\tfunction isExcludedFromDividends(address account) public view returns (bool) {\r\n\t\treturn dividendTracker.isExcludedFromDividends(account);\r\n\t}\r\n\r\n\tfunction getAccountDividendsInfo(address account)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tint256,\r\n\t\t\tint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\treturn dividendTracker.getAccount(account);\r\n\t}\r\n\r\n\tfunction getAccountDividendsInfoAtIndex(uint256 index)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tint256,\r\n\t\t\tint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\treturn dividendTracker.getAccountAtIndex(index);\r\n\t}\r\n\r\n\tfunction processDividendTracker(uint256 gas) external {\r\n\t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n\t}\r\n\r\n\tfunction claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n\t}\r\n\r\n\tfunction getLastProcessedIndex() external view returns (uint256) {\r\n\t\treturn dividendTracker.getLastProcessedIndex();\r\n\t}\r\n\r\n\tfunction getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n\t\treturn dividendTracker.getNumberOfTokenHolders();\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal override {\r\n\t\trequire(from != address(0), 'ERC20: transfer from the zero address');\r\n\t\trequire(to != address(0), 'ERC20: transfer to the zero address');\r\n\r\n\t\tif (amount == 0) {\r\n\t\t\tsuper._transfer(from, to, 0);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!isTxLimitExempt[from] && !isTxLimitExempt[to]) {\r\n\t\t\trequire(amount <= _maxTxAmount, 'Transfer amount exceeds the maxTxAmount.');\r\n\t\t}\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n\t\tbool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n\t\tif (canSwap && !swapping && !automatedMarketMakerPairs[from] && from != owner() && to != owner()) {\r\n\t\t\tswapping = true;\r\n\r\n\t\t\tuint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\r\n\t\t\tswapAndSendToFee(marketingTokens);\r\n\r\n\t\t\tuint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\r\n\t\t\tswapAndLiquify(swapTokens);\r\n\r\n\t\t\tuint256 sellTokens = balanceOf(address(this));\r\n\t\t\tswapAndSendDividends(sellTokens);\r\n\r\n\t\t\tswapping = false;\r\n\t\t}\r\n\r\n\t\tbool takeFee = !swapping;\r\n\r\n\t\t// if any account belongs to _isExcludedFromFee account then remove the fee\r\n\t\tif (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\tif (takeFee) {\r\n\t\t\tuint256 fees = amount.mul(totalFees).div(100);\r\n\t\t\tif (automatedMarketMakerPairs[to]) {\r\n\t\t\t\tfees += amount.mul(1).div(100);\r\n\t\t\t}\r\n\t\t\tamount = amount.sub(fees);\r\n\t\t\tif (!isWalletLimitExempt[to]) require(balanceOf(to).add(amount) <= _walletMax);\r\n\t\t\tsuper._transfer(from, address(this), fees);\r\n\t\t}\r\n\t\tif (!isWalletLimitExempt[to]) require(balanceOf(to).add(amount) <= _walletMax);\r\n\t\tsuper._transfer(from, to, amount);\r\n\r\n\t\ttry dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\t\ttry dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n\t\tif (!swapping) {\r\n\t\t\tuint256 gas = gasForProcessing;\r\n\r\n\t\t\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t\t\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t\t\t} catch {}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction swapAndSendToFee(uint256 tokens) private {\r\n\t\tuint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(address(this));\r\n\r\n\t\tswapTokensForCake(tokens);\r\n\t\tuint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(initialCAKEBalance);\r\n\t\tIERC20(rewardToken).transfer(_marketingWalletAddress, newBalance);\r\n\t}\r\n\r\n\tfunction swapAndLiquify(uint256 tokens) private {\r\n\t\t// split the contract balance into halves\r\n\t\tuint256 half = tokens.div(2);\r\n\t\tuint256 otherHalf = tokens.sub(half);\r\n\r\n\t\t// capture the contract's current ETH balance.\r\n\t\t// this is so that we can capture exactly the amount of ETH that the\r\n\t\t// swap creates, and not make the liquidity event include any ETH that\r\n\t\t// has been manually sent to the contract\r\n\t\tuint256 initialBalance = address(this).balance;\r\n\r\n\t\t// swap tokens for ETH\r\n\t\tswapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n\t\t// how much ETH did we just swap into?\r\n\t\tuint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n\t\t// add liquidity to uniswap\r\n\t\taddLiquidity(otherHalf, newBalance);\r\n\r\n\t\temit SwapAndLiquify(half, newBalance, otherHalf);\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private {\r\n\t\t// generate the uniswap pair path of token -> weth\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// make the swap\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction swapTokensForCake(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](3);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\tpath[2] = rewardToken;\r\n\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// make the swap\r\n\t\tuniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t// approve token transfer to cover all possible scenarios\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// add the liquidity\r\n\t\tuniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\taddress(0),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction swapAndSendDividends(uint256 tokens) private {\r\n\t\tswapTokensForCake(tokens);\r\n\t\tuint256 dividends = IERC20(rewardToken).balanceOf(address(this));\r\n\t\tbool success = IERC20(rewardToken).transfer(address(dividendTracker), dividends);\r\n\r\n\t\tif (success) {\r\n\t\t\tdividendTracker.distributeCAKEDividends(dividends);\r\n\t\t\temit SendDividends(tokens, dividends);\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract BABYTOKENDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLiquiditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BABYTOKEN", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000055853446f7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055853446f74000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0496fe6b0b79b1d5b9e7bf1513b9f6569beb4061620d2233a96128d3b593910d"}