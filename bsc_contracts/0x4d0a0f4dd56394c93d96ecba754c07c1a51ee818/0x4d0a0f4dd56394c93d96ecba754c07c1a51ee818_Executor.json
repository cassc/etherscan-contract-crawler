{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\n// import \\\"../../../utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/errors/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nerror AlreadyInitialized();\\r\\nerror CannotAuthoriseSelf();\\r\\nerror CannotBridgeToSameNetwork();\\r\\nerror ContractCallNotAllowed();\\r\\nerror CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount);\\r\\nerror ExternalCallFailed();\\r\\nerror InformationMismatch();\\r\\nerror InsufficientBalance(uint256 required, uint256 balance);\\r\\nerror InvalidAmount();\\r\\nerror InvalidCallData();\\r\\nerror InvalidConfig();\\r\\nerror InvalidContract();\\r\\nerror InvalidDestinationChain();\\r\\nerror InvalidFallbackAddress();\\r\\nerror InvalidReceivedAmount(uint256 expected, uint256 received);\\r\\nerror InvalidReceiver();\\r\\nerror InvalidSendingToken();\\r\\nerror NativeAssetNotSupported();\\r\\nerror NativeAssetTransferFailed();\\r\\nerror NoSwapDataProvided();\\r\\nerror NoSwapFromZeroBalance();\\r\\nerror NotAContract();\\r\\nerror NotInitialized();\\r\\nerror NoTransferToNullAddress();\\r\\nerror NullAddrIsNotAnERC20Token();\\r\\nerror NullAddrIsNotAValidSpender();\\r\\nerror OnlyContractOwner();\\r\\nerror RecoveryAddressCannotBeZero();\\r\\nerror ReentrancyError();\\r\\nerror TokenNotSupported();\\r\\nerror UnAuthorized();\\r\\nerror UnsupportedChainId(uint256 chainId);\\r\\nerror WithdrawFailed();\\r\\nerror ZeroAmount();\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAdapter {\\r\\n    struct Route {\\r\\n        uint256 index; \\r\\n        address targetExchange;\\r\\n        bytes payload;\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromAmount,\\r\\n        Route calldata route\\r\\n    ) external payable;\\r\\n\\r\\n    function quote(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromAmount,\\r\\n        Route calldata route\\r\\n    ) external returns(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneTwoRouterFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLINCESED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { LibSwap } from '../libraries/LibSwap.sol';\\r\\n\\r\\ninterface IOneTwoRouterFacet {\\r\\n    function oneTwoSwap(\\r\\n        address payable _receiver,\\r\\n        uint256 _fromAmount,\\r\\n        uint256 _minAmout,\\r\\n        address _weth,\\r\\n        address _partner,\\r\\n        LibSwap.SwapData[] calldata _swaps\\r\\n    ) external payable;\\r\\n\\r\\n    function oneTwoQuote(\\r\\n        address,\\r\\n        uint256 _fromAmount,\\r\\n        uint256 _minAmout,\\r\\n        address _weth,\\r\\n        address _partner,\\r\\n        LibSwap.SwapData[] calldata _swaps\\r\\n    ) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\nimport { InsufficientBalance, NullAddrIsNotAnERC20Token, NullAddrIsNotAValidSpender, NoTransferToNullAddress, InvalidAmount, NativeAssetTransferFailed } from \\\"../errors/GenericErrors.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { LibSwap } from \\\"./LibSwap.sol\\\";\\r\\n\\r\\n/// @title LibAsset\\r\\n/// @notice This library contains helpers for dealing with onchain transfers\\r\\n///         of assets, including accounting for the native asset `assetId`\\r\\n///         conventions and any noncompliant ERC20 transfers\\r\\nlibrary LibAsset {\\r\\n    // uint256 private constant MAX_UINT = type(uint256).max;\\r\\n\\r\\n    address internal constant NULL_ADDRESS = address(0);\\r\\n\\r\\n    /// @dev All native assets use the empty address for their asset id\\r\\n    ///      by convention\\r\\n\\r\\n    address internal constant NATIVE_ASSETID = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n\\r\\n    /// @notice Gets the balance of the inheriting contract for the given asset\\r\\n    /// @param assetId The asset identifier to get the balance of\\r\\n    /// @return Balance held by contracts using this library\\r\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\r\\n        return\\r\\n            isNativeAsset(assetId)\\r\\n                ? address(this).balance\\r\\n                : IERC20(assetId).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ether from the inheriting contract to a given\\r\\n    ///         recipient\\r\\n    /// @param recipient Address to send ether to\\r\\n    /// @param amount Amount to send to given recipient\\r\\n    function transferNativeAsset(\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\\r\\n        if (amount > address(this).balance)\\r\\n            revert InsufficientBalance(amount, address(this).balance);\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        if (!success) revert NativeAssetTransferFailed();\\r\\n    }\\r\\n\\r\\n    /// @notice If the current allowance is insufficient, the allowance for a given spender\\r\\n    /// is set to MAX_UINT.\\r\\n    /// @param assetId Token address to transfer\\r\\n    /// @param spender Address to give spend approval to\\r\\n    /// @param amount Amount to approve for spending\\r\\n    function approveERC20(\\r\\n        IERC20 assetId,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (isNativeAsset(address(assetId))) {\\r\\n            return;\\r\\n        }\\r\\n        if (spender == NULL_ADDRESS) {\\r\\n            revert NullAddrIsNotAValidSpender();\\r\\n        }\\r\\n\\r\\n        if (assetId.allowance(address(this), spender) < amount) {\\r\\n            SafeERC20.safeApprove(IERC20(assetId), spender, 0);\\r\\n            SafeERC20.safeApprove(IERC20(assetId), spender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from the inheriting contract to a given\\r\\n    ///         recipient\\r\\n    /// @param assetId Token address to transfer\\r\\n    /// @param recipient Address to send token to\\r\\n    /// @param amount Amount to send to given recipient\\r\\n    function transferERC20(\\r\\n        address assetId,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (isNativeAsset(assetId)) {\\r\\n            revert NullAddrIsNotAnERC20Token();\\r\\n        }\\r\\n        if (recipient == NULL_ADDRESS) {\\r\\n            revert NoTransferToNullAddress();\\r\\n        }\\r\\n\\r\\n        uint256 assetBalance = IERC20(assetId).balanceOf(address(this));\\r\\n        if (amount > assetBalance) {\\r\\n            revert InsufficientBalance(amount, assetBalance);\\r\\n        }\\r\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from a sender to a given recipient\\r\\n    /// @param assetId Token address to transfer\\r\\n    /// @param from Address of sender/owner\\r\\n    /// @param to Address of recipient/spender\\r\\n    /// @param amount Amount to transfer from owner to spender\\r\\n    function transferFromERC20(\\r\\n        address assetId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (isNativeAsset(assetId)) {\\r\\n            revert NullAddrIsNotAnERC20Token();\\r\\n        }\\r\\n        if (to == NULL_ADDRESS) {\\r\\n            revert NoTransferToNullAddress();\\r\\n        }\\r\\n\\r\\n        IERC20 asset = IERC20(assetId);\\r\\n        uint256 prevBalance = asset.balanceOf(to);\\r\\n        SafeERC20.safeTransferFrom(asset, from, to, amount);\\r\\n        if (asset.balanceOf(to) - prevBalance != amount) {\\r\\n            revert InvalidAmount();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositAsset(address assetId, uint256 amount) internal {\\r\\n        if (amount == 0) revert InvalidAmount();\\r\\n        if (isNativeAsset(assetId)) {\\r\\n            if (msg.value < amount) revert InvalidAmount();\\r\\n        } else {\\r\\n            uint256 balance = IERC20(assetId).balanceOf(msg.sender);\\r\\n            if (balance < amount) revert InsufficientBalance(amount, balance);\\r\\n            transferFromERC20(assetId, msg.sender, address(this), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function depositAssets(LibSwap.SwapData[] calldata swaps) internal {\\r\\n    //     for (uint256 i = 0; i < swaps.length; ) {\\r\\n    //         LibSwap.SwapData calldata swap = swaps[i];\\r\\n    //         if (swap.requiresDeposit) {\\r\\n    //             depositAsset(swap.sendingAssetId, swap.fromAmount);\\r\\n    //         }\\r\\n    //         unchecked {\\r\\n    //             i++;\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    /// @notice Determines whether the given assetId is the native asset\\r\\n    /// @param assetId The asset identifier to evaluate\\r\\n    /// @return Boolean indicating if the asset is the native asset\\r\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\r\\n        return assetId == NATIVE_ASSETID;\\r\\n    }\\r\\n\\r\\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\\r\\n    ///         some recipient. Should handle all non-compliant return value\\r\\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\\r\\n    /// @param assetId Asset id for transfer (address(0) for native asset,\\r\\n    ///                token address for erc20s)\\r\\n    /// @param recipient Address to send asset to\\r\\n    /// @param amount Amount to send to given recipient\\r\\n    function transferAsset(\\r\\n        address assetId,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        isNativeAsset(assetId)\\r\\n            ? transferNativeAsset(recipient, amount)\\r\\n            : transferERC20(assetId, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Checks whether the given address is a contract and contains code\\r\\n    function isContract(address _contractAddr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(_contractAddr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nlibrary LibBytes {\\r\\n    // solhint-disable no-inline-assembly\\r\\n\\r\\n    // LibBytes specific errors\\r\\n    error SliceOverflow();\\r\\n    error SliceOutOfBounds();\\r\\n    error AddressOutOfBounds();\\r\\n\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    // -------------------------\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (_length + 31 < _length) revert SliceOverflow();\\r\\n        if (_bytes.length < _start + _length) revert SliceOutOfBounds();\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(\\r\\n                    add(tempBytes, lengthmod),\\r\\n                    mul(0x20, iszero(lengthmod))\\r\\n                )\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(\\r\\n                        add(\\r\\n                            add(_bytes, lengthmod),\\r\\n                            mul(0x20, iszero(lengthmod))\\r\\n                        ),\\r\\n                        _start\\r\\n                    )\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start\\r\\n    ) internal pure returns (address) {\\r\\n        if (_bytes.length < _start + 20) {\\r\\n            revert AddressOutOfBounds();\\r\\n        }\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(\\r\\n                mload(add(add(_bytes, 0x20), _start)),\\r\\n                0x1000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    /// Copied from OpenZeppelin's `Strings.sol` utility library.\\r\\n    /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8335676b0e99944eef6a742e16dcd9ff6e68e609/contracts/utils/Strings.sol\\r\\n    function toHexString(\\r\\n        uint256 value,\\r\\n        uint256 length\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/LibSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\r\\nimport { LibUtil } from \\\"./LibUtil.sol\\\";\\r\\nimport { InvalidContract, NoSwapFromZeroBalance, InsufficientBalance } from \\\"../errors/GenericErrors.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IAdapter } from '../interfaces/IAdapter.sol';\\r\\n\\r\\nlibrary LibSwap {\\r\\n    event AssetSwapped(\\r\\n        address dex,\\r\\n        address fromAssetId,\\r\\n        address toAssetId,\\r\\n        uint256 fromAmount,\\r\\n        uint256 toAmount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    struct SwapData {\\r\\n        address fromToken;\\r\\n        address toToken;\\r\\n        address adapter;\\r\\n        IAdapter.Route route;\\r\\n    }\\r\\n\\r\\n\\r\\n    function swap(uint256 _fromAmount, SwapData calldata _swap, address _weth) internal returns (uint256 receivedAmount) {\\r\\n        if (_fromAmount == 0) revert NoSwapFromZeroBalance();\\r\\n\\r\\n        uint256 initialReceivingAssetBalance = LibAsset.getOwnBalance(\\r\\n            _swap.toToken\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory res) = _swap.adapter.delegatecall(\\r\\n            abi.encodeWithSelector(\\r\\n                IAdapter.swap.selector,\\r\\n                LibAsset.isNativeAsset(_swap.fromToken) ? _weth : _swap.fromToken,\\r\\n                address(0),\\r\\n                _fromAmount,\\r\\n                _swap.route\\r\\n            )\\r\\n        );\\r\\n        if (!success) {\\r\\n            string memory reason = LibUtil.getRevertMsg(res);\\r\\n            revert(reason);\\r\\n        }\\r\\n\\r\\n        uint256 newBalance = LibAsset.getOwnBalance(_swap.toToken);\\r\\n        \\r\\n        receivedAmount = newBalance - initialReceivingAssetBalance;\\r\\n\\r\\n        emit AssetSwapped(\\r\\n            _swap.adapter,\\r\\n            _swap.fromToken,\\r\\n            _swap.toToken,\\r\\n            _fromAmount,\\r\\n            newBalance > initialReceivingAssetBalance\\r\\n                ? newBalance - initialReceivingAssetBalance\\r\\n                : newBalance,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/LibUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./LibBytes.sol\\\";\\r\\n\\r\\nlibrary LibUtil {\\r\\n    using LibBytes for bytes;\\r\\n\\r\\n    function getRevertMsg(\\r\\n        bytes memory _res\\r\\n    ) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\r\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Determines whether the given address is the zero address\\r\\n    /// @param addr The address to verify\\r\\n    /// @return Boolean indicating if the address is the zero address\\r\\n    function isZeroAddress(address addr) internal pure returns (bool) {\\r\\n        return addr == address(0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Executor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.20;\\r\\n\\r\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport { LibBytes } from '../libraries/LibBytes.sol';\\r\\nimport { IOneTwoRouterFacet } from '../interfaces/IOneTwoRouterFacet.sol';\\r\\nimport { LibSwap } from '../libraries/LibSwap.sol';\\r\\n\\r\\ncontract Executor is Ownable {\\r\\n    address private diamond;\\r\\n    address private executor;\\r\\n\\r\\n    modifier onlyExecutor {\\r\\n        if (msg.sender != executor) revert('Only executor');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setDiamond(address _diamond) external onlyOwner {\\r\\n        diamond = _diamond;\\r\\n    }\\r\\n\\r\\n    function setExecutor(address _executor) external onlyOwner {\\r\\n        executor = _executor;\\r\\n    }\\r\\n\\r\\n    function executeReceiverSwap(\\r\\n        bytes memory _payload,\\r\\n        IERC20 _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyExecutor {\\r\\n        if(_token.balanceOf(address(this)) < _amount) revert('asdasd');\\r\\n\\r\\n        uint256 legnth = _payload.length;\\r\\n\\r\\n        if(legnth == 20) {\\r\\n            address receiver = LibBytes.toAddress(_payload, 0);\\r\\n\\r\\n            _token.transfer(receiver, _amount);\\r\\n        } else if (legnth > 20) {\\r\\n            address receiver = LibBytes.toAddress(_payload, 0);\\r\\n            bytes memory payload = LibBytes.slice(_payload, 20, legnth - 20);\\r\\n            (uint256 _minAmountOut, \\r\\n            address _weth, \\r\\n            address _partner, \\r\\n            LibSwap.SwapData[] memory _swaps) = abi.decode(payload, (uint256, address, address, LibSwap.SwapData[]));\\r\\n\\r\\n            _token.approve(diamond, _amount);\\r\\n\\r\\n            IOneTwoRouterFacet(diamond).oneTwoSwap(\\r\\n                payable(receiver),\\r\\n                _amount,\\r\\n                _minAmountOut,\\r\\n                _weth,\\r\\n                _partner,\\r\\n                _swaps\\r\\n            );\\r\\n        } else {\\r\\n            revert('ASDASDA');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AddressOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"executeReceiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"}],\"name\":\"setDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Executor", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}