{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/nft/DsgNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"../governance/InitializableOwner.sol\\\";\\r\\nimport \\\"../interfaces/IDsgNft.sol\\\";\\r\\nimport \\\"../libraries/LibPart.sol\\\";\\r\\nimport \\\"../libraries/Random.sol\\\";\\r\\nimport \\\"./Level.sol\\\";\\r\\nimport '../interfaces/IAir.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value : value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DsgNft is IDsgNft, ERC721, InitializableOwner, ReentrancyGuard, Pausable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    EnumerableSet.AddressSet private _minters;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    event Minted(\\r\\n        uint256 indexed id,\\r\\n        address to,\\r\\n        uint256 level,\\r\\n        uint256 power,\\r\\n        string name,\\r\\n        string res,\\r\\n        address author,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event Upgraded(\\r\\n        uint256 indexed nft1Id,\\r\\n        uint256 nft2Id,\\r\\n        uint256 newNftId,\\r\\n        uint256 newLevel,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event RoyaltiesUpdated(uint256 indexed nftId, uint256 oldRoyalties, uint256 newRoyalties);\\r\\n\\r\\n    mapping(uint256 => LibPart.NftInfo) private _nfts;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\r\\n     *     bytes4(keccak256('sumRoyalties(uint256)')) == 0x09b94e2a\\r\\n     *\\r\\n     *     => 0xbb3bafd6 ^ 0x09b94e2a == 0xb282e1fc\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_GET_ROYALTIES = 0xbb3bafd6;\\r\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES = 0xb282e1fc;\\r\\n\\r\\n    uint256 private _tokenId;\\r\\n    uint256 private _tokenRewardId;\\r\\n\\r\\n\\r\\n    uint256 public  maxLevel;\\r\\n\\r\\n    string private _baseURIVar;\\r\\n\\r\\n    IERC20 private _token;\\r\\n    address public _feeWallet;\\r\\n\\r\\n    uint256[] private _levelBasePower;\\r\\n    uint256[] private _levelUpFee;\\r\\n\\r\\n    mapping(uint256 => LibPart.Part[])  private _royalties; //tokenId : LibPart.Part[]\\r\\n    IAir public invitePool;\\r\\n    //    struct RewardInfo{\\r\\n    //        uint256 total;\\r\\n    //        uint256 claimed;\\r\\n    //    }\\r\\n    mapping(uint256 => uint256) private levels;\\r\\n    mapping(address => uint256) public nftReward;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    bool public canUpgrade;\\r\\n    uint256 public price;\\r\\n    Levels randomLevel;\\r\\n    address public _teamWallet;\\r\\n    constructor() public ERC721(\\\"\\\", \\\"\\\")\\r\\n    {\\r\\n        super._initialize();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address teamAddress,\\r\\n    //address _level,\\r\\n        bool _canUpgrade,\\r\\n        string memory baseURI_\\r\\n    ) public onlyOwner {\\r\\n        _tokenId = 1000;\\r\\n        _tokenRewardId = 50000;\\r\\n        //1000  1500   2500   3500   5000  7000\\r\\n        _levelBasePower = [1000, 1500, 2500, 3500, 5000, 7000];\\r\\n        //_levelBasePower = [1000, 2500, 6500, 14500, 35000, 90000];\\r\\n        _levelUpFee = [0, 500e18, 1200e18, 2400e18, 4800e18, 9600e18];\\r\\n        maxLevel = 6;\\r\\n\\r\\n\\r\\n        _registerInterface(_INTERFACE_ID_GET_ROYALTIES);\\r\\n        _registerInterface(_INTERFACE_ID_ROYALTIES);\\r\\n\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        //        _token = IERC20(feeToken);\\r\\n        //        _feeWallet = feeWallet_;\\r\\n        _baseURIVar = baseURI_;\\r\\n        canUpgrade = false;\\r\\n        price = 0.3e18;\\r\\n        //  address _level = createContract(\\\"NFT\\\");\\r\\n        //   randomLevel = Levels(_level);\\r\\n        _teamWallet = teamAddress;\\r\\n    }\\r\\n\\r\\n    function createContract(string memory _name) internal returns (address _contract){\\r\\n        bytes memory bytecode = type(Levels).creationCode;\\r\\n        bytes32 salt = keccak256(bytes(_name));\\r\\n        assembly {\\r\\n            _contract := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setAirDrop(address _air) public onlyOwner {\\r\\n        invitePool = IAir(_air);\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory uri) public onlyOwner {\\r\\n        _baseURIVar = uri;\\r\\n    }\\r\\n\\r\\n    function baseURI() public view override returns (string memory) {\\r\\n        return _baseURIVar;\\r\\n    }\\r\\n    function setPrice(uint256 price_) public onlyOwner {\\r\\n        price = price_;\\r\\n    }\\r\\n    function setFeeWallet(address feeWallet_) public onlyOwner {\\r\\n        _feeWallet = feeWallet_;\\r\\n    }\\r\\n\\r\\n    function setFeeToken(address token) public onlyOwner {\\r\\n        _token = IERC20(token);\\r\\n    }\\r\\n\\r\\n    function getFeeToken() public view override returns (address) {\\r\\n        return address(_token);\\r\\n    }\\r\\n\\r\\n    function setCanUpgrade(bool newVal) public onlyOwner {\\r\\n        canUpgrade = newVal;\\r\\n    }\\r\\n\\r\\n    function getNft(uint256 id) public view override returns (LibPart.NftInfo memory) {\\r\\n        return _nfts[id];\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(address payable account, uint96 value) public onlyOwner {\\r\\n        uint256 old = sumRoyalties(0);\\r\\n\\r\\n        if (_royalties[0].length > 0) {\\r\\n            _royalties[0][0] = LibPart.Part(account, value);\\r\\n        } else {\\r\\n            _royalties[0].push(LibPart.Part(account, value));\\r\\n        }\\r\\n\\r\\n        emit RoyaltiesUpdated(0, old, sumRoyalties(0));\\r\\n    }\\r\\n\\r\\n    function getDefultRoyalty() public view returns (LibPart.Part memory part) {\\r\\n        if (_royalties[0].length > 0) {\\r\\n            part = _royalties[0][0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRoyalties(uint256 tokenId) public view override returns (LibPart.Part[] memory) {\\r\\n        LibPart.Part[] memory ret = _royalties[tokenId];\\r\\n        if (ret.length == 0) {\\r\\n            return _royalties[0];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function sumRoyalties(uint256 tokenId) public view override returns (uint256) {\\r\\n        uint256 val;\\r\\n        LibPart.Part[] memory parts = getRoyalties(tokenId);\\r\\n        for (uint i = 0; i < parts.length; i++) {\\r\\n            val += parts[i].value;\\r\\n        }\\r\\n        return val;\\r\\n    }\\r\\n    //nftReward\\r\\n    function getPendingNft(address _user) public view returns (uint256, uint256) {\\r\\n        address[] memory invitors = invitePool.getOneLevelLists(_user);\\r\\n        uint256 count = invitors.length;\\r\\n        return (count.div(5), count);\\r\\n    }\\r\\n\\r\\n    function getRemainNft(address _user) public view returns (uint256, uint256, uint256) {\\r\\n        uint256 p;\\r\\n        uint256 count;\\r\\n        (p, count) = getPendingNft(_user);\\r\\n        uint256 balance = p.sub(nftReward[_user]);\\r\\n        return (balance, p, count);\\r\\n    }\\r\\n\\r\\n    function claimNftReward(uint256 n) public {\\r\\n        uint256 remain;\\r\\n        uint256 p;\\r\\n        (remain, p,) = getRemainNft(msg.sender);\\r\\n        require(remain > 0, \\\"no\\\");\\r\\n        if (n > remain) {\\r\\n            n = remain;\\r\\n        }\\r\\n        //_doGiftMint(\\r\\n        //        address to, string memory nftName, uint256 level, uint256 power, string memory res, address author\\r\\n        //    )\\r\\n        uint256 start = p.sub(remain);\\r\\n        for (uint i = start + 1; i <= start.add(n); i++) {\\r\\n            _doGiftMint(msg.sender, \\\"\\\", i, _getPower(i), \\\"\\\", msg.sender);\\r\\n        }\\r\\n        nftReward[msg.sender] = nftReward[msg.sender].add(n);\\r\\n\\r\\n    }\\r\\n    //    function updateRoyalties(uint256 tokenId, LibPart.Part[] memory parts) public {\\r\\n    //        require(_nfts[tokenId].author == msg.sender, \\\"not the author\\\");\\r\\n    //\\r\\n    //        uint256 old = sumRoyalties(tokenId);\\r\\n    //\\r\\n    //        LibPart.Part[] storage np;\\r\\n    //        for (uint i = 0; i < parts.length; i++) {\\r\\n    //            np.push(parts[i]);\\r\\n    //        }\\r\\n    //        _royalties[tokenId] = np;\\r\\n    //\\r\\n    //        emit RoyaltiesUpdated(tokenId, old, sumRoyalties(tokenId));\\r\\n    //    }\\r\\n    //\\r\\n    //    function updateRoyalty(uint256 tokenId, uint index, LibPart.Part memory newPart) public {\\r\\n    //        require(_nfts[tokenId].author == msg.sender, \\\"not the author\\\");\\r\\n    //        require(index < _royalties[tokenId].length, \\\"bad index\\\");\\r\\n    //\\r\\n    //        uint256 old = sumRoyalties(tokenId);\\r\\n    //\\r\\n    //        _royalties[tokenId][index] = newPart;\\r\\n    //\\r\\n    //        emit RoyaltiesUpdated(tokenId, old, sumRoyalties(tokenId));\\r\\n    //    }\\r\\n    //\\r\\n    //    function addRoyalty(uint256 tokenId, LibPart.Part memory newPart) public {\\r\\n    //        require(_nfts[tokenId].author == msg.sender, \\\"not the author\\\");\\r\\n    //\\r\\n    //        uint256 old = sumRoyalties(tokenId);\\r\\n    //\\r\\n    //        _royalties[tokenId].push(newPart);\\r\\n    //\\r\\n    //        emit RoyaltiesUpdated(tokenId, old, sumRoyalties(tokenId));\\r\\n    //    }\\r\\n\\r\\n    function _doMint(\\r\\n        address to, string memory nftName, uint256 level, uint256 power, string memory res, address author\\r\\n    ) internal returns (uint256) {\\r\\n        _tokenId++;\\r\\n        if (bytes(nftName).length == 0) {\\r\\n            nftName = name();\\r\\n        }\\r\\n\\r\\n        _mint(to, _tokenId);\\r\\n\\r\\n        LibPart.NftInfo memory nft;\\r\\n        nft.name = nftName;\\r\\n        nft.level = level;\\r\\n        nft.power = power;\\r\\n        nft.res = res;\\r\\n        nft.author = author;\\r\\n\\r\\n        _nfts[_tokenId] = nft;\\r\\n\\r\\n        emit Minted(_tokenId, to, level, power, nftName, res, author, block.timestamp);\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function _doGiftMint(\\r\\n        address to, string memory nftName, uint256 level, uint256 power, string memory res, address author\\r\\n    ) internal returns (uint256) {\\r\\n        _tokenRewardId++;\\r\\n        if (bytes(nftName).length == 0) {\\r\\n            nftName = name();\\r\\n        }\\r\\n\\r\\n        _mint(to, _tokenRewardId);\\r\\n\\r\\n        LibPart.NftInfo memory nft;\\r\\n        nft.name = nftName;\\r\\n        nft.level = level;\\r\\n        nft.power = power;\\r\\n        nft.res = res;\\r\\n        nft.author = author;\\r\\n\\r\\n        _nfts[_tokenRewardId] = nft;\\r\\n\\r\\n        emit Minted(_tokenId, to, level, power, nftName, res, author, block.timestamp);\\r\\n        return _tokenRewardId;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getPower(uint level) internal returns (uint256) {\\r\\n        if (level == 1) {\\r\\n            return _levelBasePower[0];\\r\\n        } else if (level == 2) {\\r\\n            return _levelBasePower[1];\\r\\n        } else if (level == 3) {\\r\\n            return _levelBasePower[2];\\r\\n        } else if (level == 4) {\\r\\n            return _levelBasePower[3];\\r\\n        } else if (level == 5) {\\r\\n            return _levelBasePower[4];\\r\\n        } else if (level == 6) {\\r\\n            return _levelBasePower[5];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    //    330\u4e2a\\r\\n    //    Lv2\u9b54\u6cd5\u5fbd\u7ae0  220\u4e2a\\r\\n    //    Lv3\u7cbe\u795e\u5fbd\u7ae0 180\u4e2a\\r\\n    //    Lv4\u65f6\u95f4\u5fbd\u7ae0  130\u4e2a\\r\\n    //    Lv5\u5fc3\u7075\u5fbd\u7ae0  90\u4e2a\\r\\n    //    Lv6\u7075\u9b42\u5fbd\u7ae0  50\u4e2a\\r\\n    function mint(\\r\\n        address to, string memory nftName, uint256 level, uint256 power, string memory res, address author\\r\\n    ) public override payable nonReentrant returns (uint256 tokenId){\\r\\n        require(msg.value >= price, \\\"low price\\\");\\r\\n        require(_tokenId < 2001, \\\"nft over\\\");\\r\\n        // require(6 >= level && level >= 1, \\\"low price\\\");\\r\\n        TransferHelper.safeTransferETH(_teamWallet, msg.value);\\r\\n        // uint256 seed = Random.computerSeed() / 23 % 6;\\r\\n        level = getLevel();\\r\\n        tokenId = _doMint(to, nftName, level, _getPower(level), res, author);\\r\\n    }\\r\\n\\r\\n    function getLevel() internal returns (uint256){\\r\\n        uint256 seed = Random.computerSeed() / 23 % 1000;\\r\\n        if (seed > 949) {\\r\\n            return 6;\\r\\n        } else if (seed > 859) {\\r\\n            return 5;\\r\\n        } else if (seed > 729) {\\r\\n            return 4;\\r\\n        } else if (seed > 549) {\\r\\n            return 3;\\r\\n        } else if (seed > 329) {\\r\\n            return 2;\\r\\n        } else {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getCurId() public view returns (uint256){\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(_msgSender() == owner, \\\"caller is not the token owner\\\");\\r\\n\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function randomPower(uint256 level, uint256 seed) internal view returns (uint256) {\\r\\n        if (level == 1) {\\r\\n            return _levelBasePower[0] + seed % 200;\\r\\n        } else if (level == 2) {\\r\\n            return _levelBasePower[1] + seed % 500;\\r\\n        } else if (level == 3) {\\r\\n            return _levelBasePower[2] + seed % 500;\\r\\n        } else if (level == 4) {\\r\\n            return _levelBasePower[3] + seed % 500;\\r\\n        } else if (level == 5) {\\r\\n            return _levelBasePower[4] + seed % 5000;\\r\\n        }\\r\\n\\r\\n        return _levelBasePower[5] + seed % 10000;\\r\\n    }\\r\\n\\r\\n    function getUpgradeFee(uint256 newLevel) public view returns (uint256) {\\r\\n        return _levelUpFee[newLevel - 1];\\r\\n    }\\r\\n\\r\\n    function upgradeNft(uint256 nftId, uint256 materialNftId) public override nonReentrant whenNotPaused\\r\\n    {\\r\\n        require(canUpgrade, \\\"CANT UPGRADE\\\");\\r\\n        LibPart.NftInfo memory nft = getNft(nftId);\\r\\n        LibPart.NftInfo memory materialNft = getNft(materialNftId);\\r\\n\\r\\n        require(nft.level == materialNft.level, \\\"The level must be the same\\\");\\r\\n        require(nft.level < maxLevel, \\\"Has reached the max level\\\");\\r\\n\\r\\n        burn(nftId);\\r\\n        burn(materialNftId);\\r\\n\\r\\n        uint256 newLevel = nft.level + 1;\\r\\n        uint256 fee = getUpgradeFee(newLevel);\\r\\n        if (fee > 0) {\\r\\n            _token.safeTransferFrom(_msgSender(), _feeWallet, fee);\\r\\n        }\\r\\n\\r\\n        uint256 seed = Random.computerSeed() / 23;\\r\\n\\r\\n        uint256 newId = _doMint(_msgSender(), nft.name, newLevel, randomPower(newLevel, seed), nft.res, nft.author);\\r\\n\\r\\n        emit Upgraded(nftId, materialNftId, newId, newLevel, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getPower(uint256 tokenId) public view override returns (uint256) {\\r\\n        return _nfts[tokenId].power;\\r\\n    }\\r\\n\\r\\n    function getLevel(uint256 tokenId) public view override returns (uint256) {\\r\\n        return _nfts[tokenId].level;\\r\\n    }\\r\\n\\r\\n    function addMinter(address _addMinter) public onlyOwner returns (bool) {\\r\\n        require(_addMinter != address(0), \\\"Token: _addMinter is the zero address\\\");\\r\\n        return EnumerableSet.add(_minters, _addMinter);\\r\\n    }\\r\\n\\r\\n    function delMinter(address _delMinter) public onlyOwner returns (bool) {\\r\\n        require(_delMinter != address(0), \\\"Token: _delMinter is the zero address\\\");\\r\\n        return EnumerableSet.remove(_minters, _delMinter);\\r\\n    }\\r\\n\\r\\n    function getMinterLength() public view returns (uint256) {\\r\\n        return EnumerableSet.length(_minters);\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return EnumerableSet.contains(_minters, account);\\r\\n    }\\r\\n\\r\\n    function getMinter(uint256 _index) public view onlyOwner returns (address) {\\r\\n        require(_index <= getMinterLength() - 1, \\\"Token: index out of bounds\\\");\\r\\n        return EnumerableSet.at(_minters, _index);\\r\\n    }\\r\\n\\r\\n    // modifier for mint function\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(msg.sender), \\\"caller is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/InitializableOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\ncontract InitializableOwner is Initializable {\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    function _initialize() initializer internal {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDsgNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../libraries/LibPart.sol\\\";\\r\\n\\r\\ninterface IDsgNft is IERC721 {\\r\\n\\r\\n    function mint(\\r\\n        address to, string memory nftName, uint quality, uint256 power, string memory res, address author\\r\\n    ) external payable returns(uint256 tokenId);\\r\\n\\r\\n    function burn(uint256 tokenId) external;\\r\\n\\r\\n    function getFeeToken() external view returns (address);\\r\\n\\r\\n    function getNft(uint256 id) external view returns (LibPart.NftInfo memory);\\r\\n\\r\\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory);\\r\\n\\r\\n    function sumRoyalties(uint256 tokenId) external view returns(uint256);\\r\\n\\r\\n    function upgradeNft(uint256 nftId, uint256 materialNftId) external;\\r\\n\\r\\n    function getPower(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function getLevel(uint256 tokenId) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/LibPart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nlibrary LibPart {\\r\\n    bytes32 public constant TYPE_HASH = keccak256('Part(address account,uint96 value)');\\r\\n\\r\\n    struct Part {\\r\\n        address payable account;\\r\\n        uint96 value;\\r\\n    }\\r\\n\\r\\n    struct NftInfo {\\r\\n        uint256 level;\\r\\n        uint256 power;\\r\\n        string name;\\r\\n        string res;\\r\\n        address author;\\r\\n    }\\r\\n\\r\\n    function hash(Part memory part) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary Random {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function computerSeed() internal view returns (uint256) {\\r\\n        uint256 seed =\\r\\n        uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    (block.timestamp)\\r\\n                    .add(block.difficulty)\\r\\n                    .add(\\r\\n                        (\\r\\n                        uint256(\\r\\n                            keccak256(abi.encodePacked(block.coinbase))\\r\\n                        )\\r\\n                        ) / (block.timestamp)\\r\\n                    )\\r\\n                    .add(block.gaslimit)\\r\\n                    .add(\\r\\n                        (uint256(keccak256(abi.encodePacked(msg.sender)))) /\\r\\n                        (block.timestamp)\\r\\n                    )\\r\\n                    .add(block.number)\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return seed;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/nft/Level.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Levels is Ownable {\\r\\n    //   uint[] private   levels = [uint(1), 3, 4, 2, 3, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 5, 1, 2, 3, 2, 4, 2, 1, 1, 3, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 4, 1, 2, 1, 3, 2, 2, 3, 2, 2, 2, 6, 4, 1, 2, 5, 3, 3, 2, 1, 2, 3, 3, 5, 5, 4, 1, 1, 1, 5, 2, 1, 2, 1, 3, 1, 1, 1, 1, 5, 2, 1, 6, 3, 3, 1, 1, 1, 1, 1, 2, 1, 4, 1, 3, 3, 1, 1, 3, 3, 1, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2, 4, 3, 4, 1, 2, 4, 2, 1, 2, 1, 4, 4, 1, 3, 1, 1, 1, 1, 2, 2, 2, 3, 4, 1, 1, 6, 2, 4, 2, 3, 3, 1, 1, 1, 1, 4, 1, 2, 4, 1, 3, 2, 1, 3, 1, 3, 1, 4, 3, 3, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 3, 2, 3, 2, 3, 2, 2, 1, 3, 1, 4, 1, 1, 4, 1, 3, 2, 3, 3, 2, 6, 1, 3, 1, 3, 5, 3, 3, 6, 1, 2, 1, 2, 2, 1, 1, 1, 5, 3, 2, 5, 1, 3, 3, 5, 1, 3, 2, 1, 1, 3, 1, 1, 2, 3, 1, 4, 1, 2, 4, 2, 2, 2, 3, 2, 3, 1, 3, 1, 1, 2, 2, 4, 1, 1, 1, 4, 3, 1, 2, 2, 3, 1, 3, 3, 1, 1, 4, 1, 1, 3, 1, 2, 3, 5, 4, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 5, 2, 1, 2, 1, 3, 1, 2, 1, 4, 3, 1, 1, 1, 1, 1, 4, 1, 1, 2, 4, 2, 2, 1, 1, 4, 1, 3, 4, 3, 1, 4, 4, 1, 1, 2, 3, 3, 2, 1, 2, 1, 4, 3, 1, 2, 3, 1, 5, 2, 3, 3, 3, 3, 3, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 4, 4, 2, 3, 2, 1, 1, 3, 1, 2, 3, 3, 5, 2, 3, 3, 1, 2, 1, 2, 2, 5, 4, 2, 5, 3, 2, 3, 2, 1, 2, 2, 3, 2, 2, 1, 1, 6, 1, 3, 2, 2, 4, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 3, 4, 2, 2, 4, 1, 2, 3, 1, 4, 2, 1, 3, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 3, 2, 4, 2, 3, 4, 1, 2, 1, 1, 5, 2, 2, 1, 2, 3, 1, 4, 3, 3, 1, 2, 2, 2, 1, 1, 2, 4, 2, 4, 1, 4, 1, 1, 2, 3, 1, 3, 3, 1, 1, 4, 4, 3, 2, 2, 3, 1, 1, 3, 2, 3, 4, 2, 3, 3, 1, 2, 1, 2, 2, 3, 2, 1, 1, 3, 1, 4, 1, 4, 2, 2, 2, 4, 2, 1, 2, 4, 2, 2, 2, 1, 1, 3, 5, 3, 1, 3, 2, 4, 5, 2, 4, 4, 2, 4, 1, 1, 1, 3, 1, 2, 3, 2, 2, 1, 2, 3, 2, 3, 4, 3, 1, 2, 4, 1, 3, 2, 2, 1, 2, 4, 2, 2, 1, 4, 2, 3, 1, 3, 5, 4, 1, 1, 2, 1, 1, 1, 1, 5, 2, 1, 3, 1, 3, 1, 2, 4, 5, 4, 2, 1, 4, 4, 2, 1, 2, 2, 1, 1, 4, 2, 3, 2, 1, 1, 2, 1, 2, 3, 3, 2, 1, 4, 2, 3, 1, 2, 1, 3, 2, 1, 4, 2, 1, 2, 3, 4, 1, 4, 1, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3, 3, 1, 4, 2, 1, 2, 1, 3, 2, 1, 1, 4, 1, 1, 2, 1, 3, 2, 1, 1, 3, 1, 2, 3, 1, 2, 3, 2, 5, 3, 1, 1, 1, 2, 4, 3, 3, 1, 2, 6, 1, 1, 1, 2, 5, 1, 3, 2, 2, 2, 3, 1, 2, 1, 3, 3, 1, 2, 3, 2, 3, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 4, 4, 1, 4, 2, 1, 2, 4, 1, 5, 3, 2, 1, 3, 2, 1, 2, 3, 4, 1, 2, 4, 1, 4, 1, 1, 1, 2, 3, 2, 3, 1, 2, 4, 2, 1, 2, 2, 2, 1, 2, 1, 1, 4, 1, 1, 3, 1, 1, 1, 1, 2, 4, 3, 2, 2, 1, 4, 1, 1, 1, 2, 1, 2, 1, 4, 5, 3, 1, 3, 6, 1, 3, 2, 1, 4, 4, 3, 6, 3, 5, 2, 2, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 4, 3, 5, 1, 1, 5, 2, 5, 2, 2, 3, 1, 1, 2, 2, 2, 4, 3, 3, 3, 1, 3, 4, 2, 1, 2, 5, 1, 2, 4, 3, 3, 1, 3, 1, 2, 2, 4, 2, 3, 4, 1, 1, 3, 6, 1, 5, 3, 2, 1, 1, 3, 3, 3, 2, 3, 3, 1, 3, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 3, 1, 2, 6, 1, 3, 4, 2, 1, 3, 4, 4, 3, 3, 1, 2, 2, 3, 4, 5, 1, 3, 1, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 3, 6, 5, 1, 2, 1, 2, 1, 1, 1, 1, 2, 4, 3, 1, 2, 1, 4, 3, 4, 1, 1, 4, 1, 3, 3, 3, 2, 3, 2, 2, 2, 2, 4, 1, 1, 1, 1, 1, 4, 4, 3, 1, 1, 1, 2, 3, 2, 3, 1, 2, 2, 5, 4, 2, 2, 2, 1, 2, 2, 1, 4, 1, 5, 2, 2, 4, 1, 2, 1, 2, 1, 2, 2, 4, 2, 4, 1, 3, 2, 1, 3, 1, 1, 1, 1, 4, 3, 2, 5, 5, 2, 1, 3, 1, 3, 6, 4, 1, 3, 2, 2, 3, 1, 1, 1, 4, 4, 1, 1, 5, 2, 2, 1, 1, 3, 1, 2, 5, 1, 4, 2, 1, 3, 1, 2, 4, 1, 6, 4, 2, 1, 1, 3, 3, 1, 2, 1, 2, 1, 3, 3, 2, 1, 2, 5, 4, 2, 5, 1, 1, 1, 4, 2, 3, 5, 1, 3, 6, 1, 2, 2, 4, 1, 4, 1, 1, 3, 2, 4, 4, 1, 1, 2, 1, 2, 1, 3, 1, 4, 1, 2, 1, 2, 1, 3, 2, 3, 1, 3, 1, 2, 2, 2, 5, 3, 2, 2, 1, 2, 4, 3, 2, 1, 3, 2, 3, 2, 4, 1, 4, 3, 1, 1, 2, 1, 2, 3, 4, 1, 1, 1, 1, 1, 3, 3, 3, 1, 3, 1, 1, 1, 4, 1, 1, 3, 3, 6, 3, 2, 4, 3, 1, 1, 1, 1, 3, 4, 1, 2, 2, 2, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 3, 3, 3, 2, 6, 1, 2, 3, 1, 3, 1, 3, 2, 4, 4, 3, 1, 2, 1, 3, 3, 2, 2, 2, 1, 2, 2, 1, 2, 1, 3, 4, 1, 2, 4, 2, 1, 3, 3, 1, 1, 3, 3, 2, 2, 1, 1, 2, 3, 3, 1, 3, 2, 6, 1, 2, 1, 3, 6, 5, 2, 2, 2, 1, 1, 2, 2, 1, 2, 3, 2, 3, 1, 1, 5, 2, 1, 4, 4, 1, 2, 3, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2, 4, 1, 1, 1, 2, 4, 1, 2, 1, 4, 1, 3, 2, 2, 1, 5, 2, 2, 1, 1, 3, 1, 2, 2, 1, 3, 2, 4, 1, 1, 4, 4, 1, 2, 4, 2, 2, 1, 1, 3, 1, 1, 4, 2, 5, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 1, 1, 1, 3, 3, 5, 3, 1, 4, 3, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 1, 3, 3, 2, 3, 3, 2, 1, 1, 1, 3, 3, 2, 3, 1, 2, 2, 3, 1, 1, 1, 4, 1, 1, 3, 1, 3, 3, 6, 3, 2, 3, 4, 4, 1, 3, 1, 2, 3, 1, 1, 1, 4, 2, 2, 2, 4, 1, 5, 2, 6, 2, 1, 1, 1, 1, 3, 1, 2, 1, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 3, 1, 1, 3, 2, 1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 3, 1, 6, 5, 1, 1, 2, 5, 6, 2, 1, 5, 1, 3, 2, 2, 4, 2, 4, 4, 1, 3, 2, 2, 1, 4, 3, 1, 2, 2, 3, 2, 4, 1, 3, 5, 1, 3, 4, 1, 2, 3, 1, 1, 2, 2, 1, 1, 3, 3, 3, 2, 1, 2, 1, 1, 3, 2, 3, 1, 2, 2, 1, 2, 4, 1, 6, 1, 1, 4, 1, 2, 1, 2, 1, 3, 4, 3, 1, 2, 2, 2, 4, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 2, 2, 4, 5, 2, 3, 3, 1, 2, 3, 1, 6, 1, 2, 2, 1, 1, 3, 5, 4, 1, 3, 2, 3, 1, 2, 1, 3, 1, 2, 3, 4, 1, 1, 1, 5, 2, 5, 4, 1, 3, 5, 1, 2, 1, 1, 2, 4, 3, 4, 1, 4, 2, 1, 2, 2, 2, 2, 1, 5, 1, 2, 3, 2, 2, 1, 2, 1, 1, 3, 4, 1, 2, 1, 1, 1, 4, 1, 2, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 2, 1, 3, 4, 2, 1, 3, 3, 4, 2, 3, 3, 1, 2, 3, 3, 3, 1, 1, 2, 1, 2, 4, 2, 3, 3, 4, 1, 1, 1, 2, 3, 1, 2, 1, 3, 1, 4, 2, 1, 2, 1, 2, 2, 3, 3, 5, 1, 2, 3, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 3, 4, 2, 2, 5, 2, 1, 3, 1, 1, 6, 1, 4, 3, 2, 4, 1, 4, 1, 2, 4, 1, 5, 1, 3, 2, 2, 2, 2, 1, 2, 2, 2, 2, 3, 1, 4, 2, 3, 2, 2, 3, 3, 2, 1, 1, 3, 1, 2, 3, 3, 2, 2, 2, 1, 1, 5, 4, 2, 2, 2, 1, 1, 5, 1, 2, 2, 2, 2, 1, 2, 1, 1, 3, 2, 3, 1, 3, 2, 4, 1, 1, 1, 1, 2, 4, 1, 3, 2, 2, 5, 1, 2, 3, 1, 1, 2, 2, 2, 6, 4, 1, 3, 3, 2, 4, 1, 1, 2, 5, 3, 3, 2, 4, 1, 5, 1, 1, 5, 2, 1, 3, 1, 2, 1, 1, 3, 6, 1, 6, 2, 1, 2, 1, 2, 3, 6, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 1, 1, 2, 3, 3, 1, 1, 3, 6, 4, 2, 3, 3, 1, 3, 1, 1, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 2, 1, 2, 3, 1, 4, 1, 3, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 3, 3, 1, 2, 5, 1, 4, 3, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 4, 2, 1, 4, 1, 1, 4, 3, 1, 1, 4, 2, 2, 2, 6, 1, 1, 2, 2, 5, 3, 1, 1, 2, 1, 1, 4, 1, 5, 3, 1, 2, 2, 2, 1, 1, 2, 1, 3, 1, 2, 1, 1, 2, 2, 3, 1, 2, 6, 1, 3, 3, 1, 4, 2, 1, 4, 3, 3, 1, 3, 2, 1, 6, 2, 1, 1, 3, 2, 1, 1, 1, 1, 3, 3, 2, 5, 4, 4, 3, 1, 1, 2, 2, 2, 1, 2, 3, 1, 1, 2, 1, 3, 1, 1, 6, 1, 4, 2, 1, 1, 2, 1, 5, 1, 1, 1, 1, 2, 3, 6, 1, 3, 3, 4, 2, 1, 5, 1, 4, 1, 1, 3, 1, 2, 1, 3, 1, 2, 1, 4, 2, 5, 2, 2, 4, 2, 2, 3, 3, 2, 3, 1, 1, 1, 2, 4, 3, 3, 5, 4, 3, 1, 1, 1, 1, 1, 3, 5, 1, 2, 2, 3, 4, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 2, 1, 3, 1, 2, 4, 1, 2, 1, 1, 1, 3, 2, 3, 1, 1, 2, 2, 2, 1, 3, 1, 3, 2, 1, 4, 4, 1, 2, 3, 1, 4, 1, 2, 3, 1, 2, 1, 6, 3, 1, 2, 3, 3, 1, 2, 1, 3, 5, 6, 2, 5, 1, 2, 1, 2, 2, 1, 1, 3, 2, 3, 2, 1, 2, 1, 1, 3, 1, 3, 5, 3, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 4, 2, 4, 3, 1, 2, 4, 1, 2, 3, 2, 3, 2, 2, 2, 3, 2, 1, 2, 1, 3, 3, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 3, 6, 3, 1, 3, 2, 1, 2, 1, 1, 1, 4, 3, 1, 2, 2, 1, 2, 2, 3, 1, 3, 1, 1, 1, 2, 3, 2, 1, 1, 3, 3, 2, 1, 1, 2, 2, 3, 1, 1, 1, 2, 4, 3, 2, 1, 1, 2, 1, 4, 1, 5, 2, 2, 2, 2, 2, 3, 3, 1, 2, 3, 3, 1, 1, 1, 4, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 3, 3, 4, 2, 1, 3, 1, 1, 1, 1, 3, 2, 1, 3, 1, 3, 2, 2, 1, 1, 2, 4, 1, 2, 2, 1, 1, 4, 4, 2, 4, 2, 5, 1, 1, 1, 3, 1, 1, 1, 1, 5, 1, 4, 1, 2, 3, 1, 1, 1, 2, 2, 2, 4, 2, 1, 1, 3, 1, 1, 2, 3, 3, 4, 1, 2, 1, 1, 2, 2, 2, 3, 2, 1, 4, 3, 3, 2, 1, 2, 2, 1, 3, 2, 1, 2, 1, 1, 3, 2, 2, 1, 1, 5, 2, 2, 2, 2, 1, 3, 2, 3, 6, 2, 3, 1, 1, 3, 2, 1, 1, 3, 2, 6, 1, 3, 1, 1, 4, 1, 3, 5, 1, 2, 3, 1, 2, 2, 1, 3, 1, 3, 1, 1, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 2, 3, 2, 3, 3, 4, 4, 2, 1, 1, 1, 4, 5, 3, 2, 1, 1, 2, 3, 1, 2, 3, 3, 3, 2, 1, 4, 4, 4, 1, 1, 2, 1, 2, 5, 3, 2, 3, 1, 3, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 1, 4, 5, 1, 1, 6, 1, 4, 5, 2, 1, 2, 1, 1, 3, 4, 1, 1, 1, 3, 3, 1, 3, 1, 2, 1, 2, 4, 1, 3, 1, 4, 5, 1, 1, 2, 1, 3, 6, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 5, 3, 3, 2, 1, 1, 2, 1, 1, 2, 1, 3, 4, 1, 3, 2, 3, 4, 2, 6, 6, 4, 2, 3, 5, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 5, 1, 2, 2, 4, 2, 2, 1, 4, 4, 1, 1, 4, 3, 1, 1, 2, 2, 3, 1, 3, 5, 5, 5, 1, 1, 1, 2, 2, 1, 2, 1, 4, 1, 1, 1, 1, 4, 2, 4, 2, 5, 1, 3, 4, 2, 2, 2, 1, 3, 1, 1, 1, 5, 1, 2, 3, 4, 2, 3, 1, 1, 2, 4, 1, 2, 1, 3, 2, 2, 1, 1, 3, 3, 5, 1, 5, 3, 4, 1, 3, 2, 3, 1, 2, 1, 4, 3, 1, 3, 2, 1, 3, 1, 2, 1, 2, 2, 1, 3, 2, 3, 3, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 3, 2, 3, 1, 3, 1, 2, 3, 3, 3, 1, 1, 1, 1, 2, 1, 1, 2, 3, 1, 1, 2, 3, 4, 4, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 3, 4, 4, 1, 1, 6, 1, 2, 2, 4, 1, 2, 1, 1, 3, 1, 2, 3, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 2, 2, 2, 1, 1, 2, 5, 2, 3, 1, 2, 3, 1, 6, 2, 5, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 3, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 4, 2, 2, 1, 2, 4, 5, 2, 1, 5, 2, 2, 1, 2, 3, 4, 1, 2, 1, 2, 1, 2, 6, 1, 2, 1, 6, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 3, 2, 1, 5, 1, 3, 1, 2, 3, 1, 4, 1, 1, 3, 3, 2, 2, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 4, 3, 4, 2, 4, 3, 2, 2, 2, 3, 5, 1, 2, 1, 3, 2, 3, 2, 3, 1, 1, 1, 1, 3, 1, 2, 2, 4, 1, 6, 1, 2, 1, 1, 1, 2, 4, 3, 3, 3, 1, 1, 2, 3, 1, 1, 1, 5, 2, 1, 3, 2, 2, 3, 4, 2, 1, 1, 4, 2, 2, 2, 1, 3, 2, 1, 1, 5, 1, 4, 5, 3, 2, 1, 2, 1, 3, 2, 6, 3, 2, 6, 2, 4, 1, 1, 2, 1, 3, 4, 3, 1, 3, 1, 2, 1, 1, 4, 1, 3, 2, 3, 1, 1, 3, 2, 1, 2, 3, 5, 1, 2, 4, 1, 3, 3, 1, 6, 4, 4, 1, 1, 4, 1, 3, 2, 2, 1, 4, 1, 1, 2, 3, 2, 6, 6, 1, 1, 4, 3, 3, 2, 1, 1, 2, 4, 1, 3, 2, 1, 2, 3, 1, 3, 1, 3, 2, 1, 2, 2, 3, 3, 4, 1, 1, 3, 4, 1, 3, 4, 1, 3, 2, 2, 1, 3, 2, 2, 2, 1, 3, 2, 2, 5, 2, 4, 3, 2, 5, 4, 1, 5, 1, 2, 2, 4, 1, 2, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 2, 3, 2, 2, 5, 1, 1, 2, 3, 2, 5, 1, 4, 2, 1, 2, 1, 5, 3, 2, 2, 4, 2, 2, 5, 1, 1, 2, 1, 2, 6, 1, 1, 2, 1, 2, 4, 1, 1, 5, 2, 2, 1, 5, 1, 1, 1, 1, 3, 2, 2, 1, 1, 4, 1, 3, 1, 4, 1, 3, 1, 2, 2, 1, 1, 4, 2, 2, 1, 2, 3, 1, 5, 3, 1, 1, 1, 1, 1, 2, 1, 5, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 3, 2, 1, 2, 2, 3, 2, 5, 3, 2, 3, 1, 2, 3, 5, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1, 3, 3, 1, 6, 2, 5, 3, 1, 1, 4, 4, 1, 3, 3, 1, 1, 5, 4, 1, 3, 1, 2, 1, 1, 4, 2, 2, 1, 4, 2, 3, 2, 3, 1, 1, 1, 2, 3, 2, 3, 4, 2, 2, 2, 2, 4, 2, 1, 2, 2, 1, 1, 2, 3, 2, 1, 1, 5, 4, 1, 2, 1, 2, 2, 3, 1, 1, 3, 1, 4, 2, 2, 2, 3, 4, 3, 1, 1, 3, 2, 1, 2, 1, 1, 1, 5, 1, 2, 1, 3, 4, 2, 2, 1, 2, 1, 3, 3, 3, 1, 2, 4, 5, 2, 1, 1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 3, 1, 1, 2, 4, 1, 1, 1, 1, 3, 3, 2, 2, 2, 5, 6, 6, 1, 5, 2, 5, 4, 4, 3, 1, 3, 1, 2, 2, 3, 3, 1, 1, 3, 1, 3, 1, 4, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 4, 1, 5, 4, 5, 3, 5, 1, 4, 2, 2, 2, 1, 2, 1, 3, 1, 4, 2, 1, 3, 1, 1, 2, 1, 2, 3, 1, 4, 4, 1, 2, 6, 1, 2, 3, 1, 2, 3, 2, 2, 2, 1, 2, 1, 4, 1, 3, 3, 3, 3, 4, 1, 4, 3, 4, 3, 2, 1, 1, 2, 3, 1, 2, 1, 3, 3, 1, 6, 2, 1, 4, 4, 2, 2, 3, 2, 1, 3, 1, 2, 1, 1, 4, 1, 5, 3, 1, 1, 1, 3, 1, 1, 5, 2, 1, 2, 1, 2, 1, 2, 5, 1, 3, 3, 2, 3, 5, 2, 1, 1, 3, 3, 1, 4, 2, 3, 3, 3, 3, 4, 4, 3, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 2, 3, 2, 2, 4, 4, 1, 2, 1, 1, 2, 2, 1, 1, 1, 3, 1, 4, 1, 1, 3, 2, 1, 2, 1, 1, 4, 2, 6, 1, 3, 3, 2, 3, 2, 2, 2, 6, 1, 2, 1, 1, 2, 3, 1, 1, 2, 2, 6, 3, 4, 5, 4, 3, 1, 1, 1, 3, 5, 1, 3, 4, 1, 3, 1, 1, 1, 1, 2, 4, 1, 2, 4, 2, 3, 3, 1, 5, 4, 2, 3, 1, 2, 1, 2, 2, 3, 3, 1, 2, 6, 1, 1, 2, 2, 2, 4, 1, 2, 2, 3, 3, 2, 1, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 4, 1, 3, 3, 1, 2, 1, 1, 3, 3, 2, 4, 2, 2, 1, 1, 6, 2, 2, 1, 1, 1, 3, 1, 5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 2, 4, 2, 4, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 3, 1, 2, 5, 1, 1, 2, 1, 5, 1, 2, 1, 2, 1, 3, 3, 5, 1, 2, 1, 3, 1, 3, 4, 1, 4, 2, 3, 3, 1, 1, 2, 1, 2, 2, 2, 3, 1, 4, 5, 1, 6, 2, 1, 3, 2, 1, 1, 1, 1, 1, 4, 3, 2, 1, 1, 5, 2, 1, 3, 2, 1, 1, 4, 1, 3, 3, 2, 5, 3, 5, 3, 2, 3, 3, 2, 1, 1, 2, 1, 5, 3, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 3, 2, 1, 6, 2, 2, 1, 1, 1, 3, 3, 3, 1, 1, 3, 2, 3, 3, 1, 3, 1, 3, 3, 2, 1, 2, 2, 1, 2, 2, 4, 2, 1, 1, 2, 1, 3, 3, 2, 2, 3, 2, 1, 2, 3, 1, 1, 4, 2, 2, 1, 1, 1, 3, 2, 2, 1, 4, 1, 2, 1, 1, 6, 1, 1, 4, 4, 2, 3, 1, 2, 3, 2, 4, 1, 1, 3, 1, 1, 3, 1, 1, 1, 5, 1, 1, 1, 5, 1, 1, 4, 1, 2, 3, 1, 1, 2, 5, 4, 2, 2, 2, 1, 5, 2, 5, 1, 1, 1, 5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 3, 4, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 3, 4, 2, 2, 2, 1, 3, 1, 1, 3, 6, 1, 1, 2, 3, 1, 1, 2, 3, 2, 1, 5, 1, 4, 5, 2, 3, 2, 2, 3, 3, 1, 3, 2, 2, 4, 4, 1, 2, 2, 4, 3, 3, 1, 1, 4, 3, 4, 1, 5, 1, 1, 4, 4, 1, 3, 1, 1, 2, 6, 1, 2, 4, 2, 1, 1, 1, 1, 2, 4, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 3, 2, 3, 1, 1, 1, 2, 4, 1, 1, 2, 2, 2, 1, 3, 1, 1, 1, 5, 4, 1, 3, 1, 3, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 1, 3, 2, 2, 3, 3, 1, 4, 2, 3, 1, 2, 2, 1, 1, 4, 1, 4, 3, 4, 1, 1, 2, 2, 5, 2, 4, 2, 2, 1, 3, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 3, 3, 3, 4, 1, 1, 2, 1, 1, 1, 4, 1, 5, 1, 1, 3, 3, 3, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 5, 4, 1, 1, 5, 4, 3, 3, 1, 1, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 2, 4, 2, 1, 3, 2, 1, 1, 3, 1, 3, 2, 1, 3, 1, 3, 3, 1, 1, 1, 2, 2, 5, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 4, 1, 2, 2, 2, 2, 3, 3, 1, 3, 3, 2, 3, 3, 1, 4, 2, 2, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3, 4, 1, 2, 1, 1, 1, 3, 5, 2, 2, 6, 1, 1, 1, 3, 3, 1, 1, 3, 4, 2, 4, 1, 1, 4, 2, 1, 1, 4, 4, 5, 3, 3, 2, 2, 2, 4, 4, 4, 6, 2, 1, 2, 2, 3, 2, 1, 2, 1, 3, 3, 2, 1, 2, 3, 3, 4, 2, 1, 2, 3, 3, 5, 4, 2, 3, 3, 3, 2, 1, 4, 3, 1, 1, 1, 1, 3, 2, 4, 2, 1, 1, 2, 2, 2, 4, 1, 4, 1, 2, 4, 2, 4, 1, 1, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 1, 3, 3, 2, 1, 1, 3, 3, 6, 3, 1, 2, 2, 2, 4, 1, 2, 3, 3, 1, 1, 1, 2, 2, 2, 2, 2, 4, 2, 2, 2, 3, 2, 1, 1, 2, 4, 4, 1, 5, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 3, 3, 2, 5, 2, 2, 3, 1, 1, 4, 1, 1, 1, 2, 2, 2, 1, 1, 3, 1, 3, 1, 4, 2, 3, 4, 3, 2, 1, 2, 1, 1, 1, 4, 2, 2, 3, 3, 1, 5, 1, 3, 5, 5, 1, 3, 1, 1, 3, 4, 5, 2, 2, 3, 5, 1, 3, 1, 1, 2, 2, 1, 1, 2, 3, 2, 4, 1, 1, 1, 4, 3, 3, 2, 2, 1, 4, 1, 1, 3, 3, 2, 1, 3, 2, 1, 6, 1, 1, 3, 1, 1, 1, 5, 1, 2, 1, 2, 3, 2, 4, 2, 2, 1, 5, 2, 3, 4, 2, 2, 1, 2, 3, 2, 3, 3, 4, 2, 5, 1, 3, 4, 2, 3, 2, 1, 1, 3, 1, 5, 2, 1, 1, 2, 3, 2, 2, 1, 6, 2, 2, 1, 4, 3, 2, 2, 2, 5, 3, 1, 3, 1, 2, 1, 4, 1, 1, 4, 1, 3, 3, 2, 1, 2, 2, 4, 3, 1, 2, 2, 1, 3, 1, 2, 5, 1, 1, 2, 2, 3, 1, 1, 6, 1, 2, 1, 1, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 1, 2, 4, 2, 1, 2, 1, 3, 3, 3, 3, 1, 3, 1, 4, 2, 1, 1, 1, 1, 1, 3, 3, 1, 2, 5, 2, 5, 2, 4, 1, 3, 1, 2, 2, 3, 2, 1, 4, 3, 2, 1, 4, 1, 2, 2, 1, 4, 1, 1, 1, 3, 2, 5, 2, 1, 3, 1, 1, 2, 1, 1, 3, 3, 1, 2, 1, 3, 1, 3, 1, 1, 1, 5, 5, 2, 1, 3, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 2, 3, 3, 4, 5, 1, 4, 4, 2, 4, 4, 3, 2, 1, 1, 1, 2, 2, 2, 5, 2, 4, 1, 4, 2, 3, 4, 2, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 5, 1, 4, 1, 1, 2, 4, 1, 1, 2, 1, 1, 1, 1, 3, 1, 2, 4, 3, 5, 1, 3, 1, 1, 1, 1, 4, 3, 1, 1, 3, 3, 2, 4, 3, 2, 3, 3, 3, 3, 4, 3, 2, 1, 2, 1, 3, 3, 4, 1, 2, 3, 3, 1, 3, 2, 1, 2, 1, 1, 1, 3, 1, 3, 1, 1, 4, 5, 1, 5, 1, 1, 1, 3, 1, 1, 2, 1, 3, 4, 3, 1, 3, 2, 2, 4, 3, 1, 3, 4, 2, 3, 1, 2, 1, 2, 3, 1, 3, 1, 1, 4, 1, 1, 1, 4, 2, 1, 3, 3, 2, 3, 2, 1, 3, 2, 5, 1, 6, 2, 2, 2, 3, 3, 4, 4, 3, 2, 4, 2, 1, 3, 3, 2, 6, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 4, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 4, 2, 4, 3, 4, 1, 5, 1, 3, 1, 1, 3, 1, 1, 4, 1, 1, 2, 2, 2, 1, 1, 4, 2, 1, 2, 2, 3, 1, 2, 2, 1, 5, 2, 1, 1, 3, 2, 3, 2, 2, 1, 2, 1, 4, 3, 2, 2, 1, 3, 2, 4, 3, 2, 2, 5, 1, 1, 1, 2, 2, 2, 4, 5, 1, 1, 3, 1, 3, 3, 4, 5, 2, 1, 2, 2, 3, 2, 1, 2, 4, 2, 3, 1, 3, 1, 1, 1, 3, 3, 2, 3, 2, 4, 2, 3, 3, 2, 3, 3, 5, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 5, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3];\\r\\n    uint[] private   levels;//= [4, 2, 3, 4, 1, 1, 5, 2, 1, 2, 4, 3, 3, 2, 1, 6, 1, 2, 4, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 3, 1, 3, 3, 2, 1, 2, 2, 3, 2, 4, 1, 1, 1, 1, 3, 1, 1, 5, 2, 2, 4, 2, 2, 2, 2, 3, 1, 1, 1, 4, 1, 1, 3, 1, 4, 3, 1, 1, 3, 1, 1, 3, 4, 1, 2, 1, 2, 2, 1, 3, 2, 1, 1, 3, 4, 1, 1, 1, 5, 1, 2, 4, 2, 3, 2, 1, 1, 3, 3, 6, 1, 1, 2, 3, 2, 1, 5, 2, 3, 2, 1, 1, 1, 2, 2, 3, 4, 2, 1, 1, 3, 1, 3, 2, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 1, 1, 4, 1, 4, 2, 3, 2, 2, 2, 1, 2, 1, 2, 2, 2, 3, 3, 1, 2, 1, 2, 3, 3, 1, 3, 1, 2, 1, 3, 4, 1, 2, 2, 1, 1, 5, 2, 2, 3, 1, 3, 6, 1, 2, 2, 1, 1, 1, 5, 4, 1, 2, 3, 1, 1, 4, 2, 2, 5, 1, 1, 3, 1, 3, 1, 2, 1, 3, 5, 1, 2, 2, 4, 1, 1, 2, 1, 1, 3, 2, 4, 2, 1, 2, 1, 3, 2, 5, 2, 4, 1, 1, 1, 1, 4, 3, 2, 4, 1, 2, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 6, 1, 4, 4, 3, 2, 3, 4, 1, 2, 1, 1, 3, 2, 3, 1, 2, 1, 1, 1, 2, 3, 5, 3, 4, 1, 2, 1, 1, 2, 2, 3, 3, 5, 4, 3, 1, 2, 2, 5, 1, 1, 2, 1, 1, 1, 2, 1, 1, 4, 4, 4, 2, 1, 2, 4, 1, 2, 1, 3, 2, 3, 1, 3, 4, 3, 2, 3, 2, 1, 1, 2, 5, 6, 1, 2, 1, 1, 3, 2, 3, 1, 6, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 4, 3, 4, 5, 3, 2, 2, 2, 1, 1, 5, 2, 1, 3, 1, 1, 2, 4, 2, 3, 1, 4, 1, 2, 2, 2, 3, 3, 5, 3, 1, 4, 3, 6, 2, 2, 2, 1, 2, 4, 3, 2, 2, 2, 1, 3, 2, 5, 1, 1, 3, 1, 3, 3, 2, 1, 1, 3, 1, 2, 2, 2, 1, 1, 1, 4, 1, 2, 1, 3, 1, 4, 2, 1, 4, 1, 6, 3, 2, 3, 2, 4, 5, 2, 2, 3, 1, 3, 4, 3, 1, 3, 2, 4, 6, 1, 3, 3, 4, 3, 4, 2, 1, 2, 5, 2, 1, 1, 1, 4, 2, 1, 2, 1, 2, 1, 1, 4, 4, 1, 3, 1, 2, 3, 1, 1, 1, 2, 2, 2, 2, 4, 3, 4, 1, 3, 3, 5, 3, 2, 1, 3, 1, 2, 3, 1, 2, 6, 4, 4, 2, 3, 2, 1, 2, 1, 1, 1, 3, 2, 2, 3, 2, 3, 2, 1, 2, 2, 6, 4, 3, 2, 4, 1, 2, 2, 1, 1, 2, 1, 1, 2, 3, 2, 2, 3, 1, 1, 1, 2, 1, 5, 5, 5, 1, 2, 4, 1, 2, 1, 2, 6, 4, 1, 1, 3, 1, 3, 3, 5, 3, 1, 4, 2, 2, 6, 1, 2, 4, 3, 1, 3, 1, 2, 1, 2, 4, 2, 2, 2, 2, 4, 2, 1, 3, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 3, 1, 1, 2, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 2, 1, 1, 4, 1, 2, 4, 2, 1, 1, 1, 2, 6, 1, 1, 2, 1, 2, 4, 4, 4, 2, 1, 5, 2, 1, 1, 2, 1, 3, 2, 1, 1, 3, 2, 1, 1, 5, 1, 1, 1, 2, 3, 1, 2, 5, 1, 1, 5, 1, 2, 1, 3, 5, 1, 2, 1, 2, 4, 4, 1, 1, 2, 3, 1, 1, 2, 4, 3, 2, 3, 2, 2, 5, 4, 2, 2, 1, 2, 3, 2, 3, 5, 2, 1, 2, 1, 2, 5, 2, 1, 3, 4, 1, 3, 1, 2, 5, 3, 2, 3, 1, 4, 3, 1, 1, 4, 1, 3, 3, 3, 2, 5, 1, 1, 1, 2, 2, 1, 5, 4, 1, 1, 1, 1, 1, 3, 2, 6, 1, 1, 1, 3, 4, 1, 3, 1, 1, 3, 2, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 4, 2, 1, 1, 1, 1, 4, 1, 2, 3, 1, 2, 2, 4, 2, 5, 1, 2, 1, 5, 4, 6, 3, 1, 2, 4, 6, 1, 2, 1, 1, 1, 2, 4, 3, 1, 5, 3, 3, 5, 3, 1, 5, 1, 1, 1, 6, 1, 2, 2, 2, 3, 1, 5, 1, 3, 1, 2, 1, 1, 4, 1, 2, 1, 3, 4, 4, 2, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 4, 2, 3, 1, 2, 1, 2, 1, 3, 2, 3, 1, 1, 1, 1, 1, 2, 1, 3, 2, 1, 3, 5, 2, 4, 1, 1, 3, 2, 2, 2, 1, 4, 2, 1, 2, 3, 3, 1, 2, 5, 1, 3, 2, 3, 1, 3, 3, 1, 2, 4, 3, 1, 1, 2, 3, 4, 2, 3, 3, 3, 2, 1, 5, 1, 3, 1, 1, 1, 6, 2, 4, 3, 6, 1, 3, 1, 1, 4, 4, 1, 1, 1, 3, 3, 1, 1, 3, 2, 3, 1, 6, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 4, 1, 4, 1, 2, 3, 2, 2, 1, 4, 2, 1, 1, 1, 3, 3, 1, 3, 3, 1, 1, 3, 1, 4, 1, 1, 2, 2, 2, 1, 1, 3, 1, 5, 2, 3, 1, 5, 3, 3, 3, 3, 1, 2, 2, 1, 3, 5];\\r\\n    //    uint[] private   level2;// = [2, 3, 1, 5, 1, 1, 1, 5, 1, 4, 3, 2, 3, 5, 1, 3, 1, 5, 2, 1, 4, 4, 1, 2, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 1, 5, 1, 2, 1, 2, 1, 4, 1, 2, 2, 1, 1, 1, 2, 5, 1, 1, 4, 3, 1, 2, 1, 1, 2, 2, 6, 2, 5, 2, 4, 2, 2, 2, 1, 2, 1, 1, 3, 2, 1, 1, 3, 3, 3, 4, 1, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 3, 2, 2, 5, 4, 1, 2, 6, 2, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 1, 3, 2, 1, 4, 1, 1, 2, 1, 1, 3, 1, 4, 4, 3, 4, 2, 1, 2, 3, 2, 1, 2, 2, 1, 1, 2, 4, 3, 2, 1, 1, 6, 2, 1, 2, 2, 1, 2, 2, 4, 6, 4, 1, 3, 4, 1, 2, 2, 4, 2, 3, 2, 4, 1, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 6, 1, 2, 5, 1, 3, 1, 1, 2, 4, 1, 3, 1, 1, 6, 4, 4, 1, 2, 2, 2, 3, 3, 1, 2, 1, 1, 1, 2, 2, 5, 1, 5, 2, 1, 1, 3, 2, 4, 3, 2, 1, 4, 5, 1, 3, 2, 3, 4, 1, 2, 2, 2, 3, 1, 5, 1, 3, 5, 1, 1, 2, 2, 1, 1, 4, 2, 4, 1, 2, 2, 1, 3, 1, 4, 2, 2, 2, 3, 1, 2, 2, 3, 1, 4, 5, 1, 2, 3, 1, 1, 1, 2, 2, 4, 2, 2, 5, 1, 4, 1, 4, 1, 4, 2, 1, 3, 2, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 1, 2, 3, 3, 3, 1, 3, 5, 2, 2, 1, 1, 1, 2, 5, 1, 1, 2, 1, 1, 1, 1, 5, 3, 2, 2, 1, 1, 1, 3, 2, 3, 2, 6, 1, 4, 3, 1, 3, 1, 1, 6, 4, 2, 2, 2, 2, 1, 4, 4, 3, 6, 1, 4, 5, 2, 1, 5, 2, 1, 4, 1, 3, 1, 2, 2, 1, 2, 3, 4, 4, 3, 3, 1, 3, 1, 5, 2, 2, 2, 2, 3, 2, 2, 3, 1, 4, 2, 4, 1, 1, 1, 2, 2, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 1, 2, 3, 3, 2, 1, 1, 3, 4, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 2, 1, 3, 3, 3, 1, 1, 5, 2, 2, 2, 1, 3, 4, 1, 2, 2, 4, 4, 2, 3, 2, 2, 2, 3, 2, 4, 5, 2, 2, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 4, 2, 1, 4, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1, 4, 3, 2, 2, 1, 2, 1, 2, 3, 3, 1, 5, 3, 3, 4, 1, 3, 2, 2, 1, 3, 2, 3, 2, 2, 2, 6, 3, 1, 3, 3, 2, 3, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 4, 2, 3, 4, 4, 5, 4, 4, 1, 1, 1, 2, 3, 1, 1, 5, 2, 1, 2, 1, 4, 1, 1, 5, 2, 1, 1, 3, 2, 2, 3, 1, 2, 2, 1, 1, 3, 6, 3, 3, 1, 2, 1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 3, 5, 3, 1, 2, 1, 1, 1, 1, 5, 3, 1, 1, 3, 2, 4, 1, 1, 5, 1, 2, 5, 4, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 3, 2, 1, 4, 2, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 1, 3, 1, 1, 4, 1, 5, 3, 1, 5, 2, 2, 1, 2, 1, 3, 4, 3, 1, 5, 6, 1, 2, 1, 1, 1, 4, 1, 1, 3, 4, 3, 1, 1, 1, 1, 1, 2, 2, 4, 2, 3, 2, 1, 5, 6, 1, 1, 2, 4, 6, 1, 2, 3, 1, 2, 3, 1, 1, 2, 1, 1, 1, 2, 1, 3, 2, 3, 2, 2, 1, 2, 2, 2, 1, 3, 2, 1, 1, 4, 2, 2, 2, 1, 1, 4, 1, 2, 2, 1, 5, 2, 2, 4, 5, 2, 3, 1, 1, 1, 3, 2, 6, 1, 1, 3, 2, 4, 3, 2, 3, 1, 1, 2, 1, 2, 1, 2, 2, 6, 1, 2, 5, 4, 3, 1, 2, 1, 1, 1, 4, 2, 3, 2, 2, 1, 3, 2, 2, 3, 1, 3, 2, 5, 1, 5, 2, 1, 1, 2, 3, 1, 3, 2, 4, 5, 1, 3, 3, 1, 5, 1, 1, 1, 6, 4, 1, 2, 2, 2, 3, 1, 1, 1, 1, 1, 3, 5, 1, 1, 1, 2, 1, 6, 5, 1, 4, 2, 1, 1, 3, 2, 1, 2, 2, 2, 3, 3, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 4, 2, 2, 1, 3, 3, 2, 2, 3, 3, 2, 2, 1, 4, 1, 3, 1, 3, 1, 1, 2, 4, 2, 1, 1, 4, 2, 2, 2, 3, 3, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 1, 4, 1, 4, 4, 1, 1, 3, 2, 5, 3, 3, 5, 2, 1, 1, 3, 1, 2, 2, 5, 1, 1, 1, 3, 3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 4, 2, 4, 2, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 3, 1, 1, 1, 3, 2, 4, 2, 1, 3, 3, 2, 4, 2, 2, 2, 2, 1, 4, 1, 1];\\r\\n    //    uint[] private   level3;// = [1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 1, 4, 1, 4, 1, 1, 3, 3, 1, 6, 2, 1, 1, 4, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 2, 4, 2, 2, 1, 3, 2, 2, 3, 1, 2, 2, 1, 2, 2, 3, 2, 4, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 2, 1, 1, 1, 3, 1, 2, 3, 3, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 2, 2, 3, 1, 4, 2, 1, 5, 1, 2, 5, 2, 1, 3, 4, 3, 1, 2, 2, 4, 5, 2, 1, 1, 3, 5, 1, 2, 3, 1, 1, 3, 2, 3, 1, 2, 4, 4, 3, 2, 1, 3, 2, 1, 1, 2, 4, 1, 3, 2, 1, 3, 2, 2, 2, 1, 4, 4, 1, 2, 2, 1, 2, 2, 2, 3, 1, 1, 1, 5, 2, 1, 6, 2, 1, 5, 1, 3, 4, 3, 2, 2, 1, 2, 5, 2, 2, 1, 2, 3, 1, 1, 1, 3, 1, 4, 3, 5, 1, 1, 1, 1, 3, 2, 3, 1, 2, 3, 3, 2, 4, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 4, 4, 2, 4, 1, 4, 1, 1, 2, 1, 2, 5, 4, 4, 3, 3, 4, 1, 4, 2, 2, 2, 1, 2, 2, 1, 2, 2, 6, 2, 4, 2, 1, 3, 1, 2, 2, 1, 1, 4, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 3, 2, 2, 1, 3, 3, 3, 1, 3, 1, 3, 2, 5, 3, 6, 4, 2, 5, 2, 1, 2, 2, 4, 3, 1, 3, 1, 5, 1, 1, 3, 1, 1, 1, 2, 1, 4, 3, 2, 2, 2, 6, 4, 1, 1, 4, 4, 1, 1, 1, 3, 1, 1, 2, 1, 1, 5, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 5, 3, 4, 3, 1, 4, 2, 3, 3, 2, 1, 2, 2, 1, 1, 3, 2, 3, 1, 3, 2, 1, 1, 1, 2, 2, 4, 3, 2, 1, 1, 2, 3, 5, 2, 2, 3, 1, 2, 1, 4, 2, 1, 1, 2, 1, 3, 3, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 3, 1, 3, 2, 1, 1, 3, 2, 2, 1, 1, 1, 3, 2, 1, 3, 3, 5, 1, 2, 2, 2, 1, 5, 2, 3, 2, 4, 6, 4, 3, 2, 1, 2, 3, 1, 1, 1, 2, 3, 2, 1, 1, 2, 5, 5, 1, 1, 2, 1, 1, 1, 1, 4, 1, 2, 3, 3, 2, 6, 1, 4, 4, 2, 1, 1, 1, 1, 3, 5, 1, 6, 2, 2, 5, 3, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 1, 2, 3, 3, 2, 2, 2, 1, 2, 3, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 2, 1, 1, 2, 3, 1, 2, 2, 5, 2, 1, 1, 3, 3, 2, 2, 2, 1, 1, 5, 1, 1, 4, 1, 2, 1, 4, 3, 1, 1, 2, 2, 2, 4, 1, 4, 1, 6, 4, 1, 1, 4, 5, 4, 1, 3, 6, 1, 1, 2, 4, 3, 2, 1, 1, 1, 5, 1, 5, 2, 1, 3, 3, 4, 2, 4, 5, 2, 3, 2, 3, 1, 3, 1, 2, 1, 3, 2, 2, 5, 3, 6, 2, 4, 1, 1, 5, 3, 4, 3, 1, 3, 1, 5, 2, 3, 1, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 5, 1, 3, 2, 3, 2, 3, 2, 3, 4, 1, 2, 2, 1, 1, 5, 2, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 3, 2, 6, 2, 3, 2, 4, 3, 1, 5, 1, 1, 1, 1, 3, 1, 4, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 1, 3, 1, 1, 1, 3, 2, 4, 2, 1, 1, 3, 3, 5, 4, 1, 1, 4, 3, 2, 3, 3, 4, 2, 1, 1, 3, 1, 2, 3, 1, 2, 1, 1, 3, 2, 1, 3, 5, 1, 1, 3, 2, 4, 1, 1, 5, 3, 1, 1, 2, 3, 4, 1, 2, 1, 1, 1, 1, 2, 4, 3, 5, 1, 4, 3, 1, 3, 1, 2, 1, 2, 1, 4, 2, 2, 1, 3, 4, 4, 1, 4, 1, 1, 4, 1, 2, 2, 2, 4, 2, 2, 5, 1, 1, 1, 2, 1, 3, 1, 1, 1, 3, 3, 2, 5, 1, 1, 2, 2, 2, 3, 4, 4, 1, 2, 1, 3, 2, 3, 3, 2, 1, 2, 2, 1, 4, 4, 1, 1, 1, 2, 1, 4, 2, 1, 1, 2, 4, 1, 2, 2, 3, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 4, 3, 1, 2, 1, 1, 1, 3, 4, 4, 1, 4, 3, 6, 3, 4, 1, 5, 3, 2, 2, 3, 1, 1, 4, 1, 1, 2, 4, 3, 2, 4, 3, 1, 6, 1, 2, 1, 1, 3, 1, 2, 5, 1, 2, 1, 1, 1, 3, 1, 3, 1, 1, 5, 4, 1, 2, 2, 2, 3, 3, 2, 1, 1, 2, 5, 3, 4, 5, 2, 1, 1, 1, 6, 3, 2, 1, 1, 1, 2, 5, 5, 2, 1, 3, 4, 1, 2, 3, 1, 3, 1, 2, 3, 1, 2, 1, 2, 2, 4, 1, 2, 3, 1, 3, 3, 1, 3, 3, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3, 1, 2, 1, 4, 2, 1, 2, 4, 4, 2, 1, 3, 6, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 3, 1, 6, 2, 5, 2, 2, 2, 5, 1, 2, 2, 2, 1, 3, 1, 1, 1, 2, 4, 3, 1, 3, 3, 1, 2, 5, 1, 2, 1, 2, 1, 1, 3];\\r\\n    //    uint[] private   level4;// = [1, 3, 4, 2, 2, 3, 2, 3, 2, 3, 2, 4, 3, 1, 1, 1, 4, 1, 3, 5, 1, 2, 1, 1, 1, 2, 3, 2, 1, 5, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3, 2, 4, 2, 4, 1, 2, 2, 5, 1, 1, 1, 3, 4, 1, 1, 1, 2, 1, 6, 1, 1, 3, 3, 3, 3, 2, 3, 3, 4, 1, 2, 1, 4, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 5, 1, 2, 3, 2, 4, 1, 3, 2, 4, 3, 4, 1, 1, 1, 2, 3, 2, 1, 2, 2, 1, 3, 2, 2, 2, 4, 2, 2, 2, 1, 1, 2, 1, 2, 2, 3, 1, 6, 2, 1, 1, 1, 3, 2, 3, 3, 2, 2, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 4, 1, 3, 2, 1, 1, 2, 1, 1, 1, 3, 3, 4, 2, 2, 2, 4, 1, 5, 3, 2, 1, 4, 2, 2, 5, 1, 2, 4, 4, 2, 3, 2, 1, 1, 4, 2, 2, 1, 3, 3, 3, 2, 1, 3, 2, 2, 1, 6, 3, 3, 4, 3, 1, 2, 2, 5, 4, 2, 3, 3, 2, 1, 4, 2, 5, 1, 1, 3, 2, 3, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 3, 1, 2, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 2, 1, 4, 2, 2, 3, 2, 1, 1, 1, 2, 1, 1, 2, 4, 1, 2, 2, 1, 1, 2, 1, 3, 4, 4, 1, 2, 2, 5, 1, 4, 3, 1, 2, 1, 2, 3, 5, 2, 3, 2, 3, 6, 3, 2, 4, 1, 3, 3, 2, 5, 1, 2, 2, 3, 1, 2, 1, 1, 1, 4, 4, 3, 4, 2, 1, 4, 2, 3, 5, 2, 2, 1, 1, 2, 2, 1, 4, 2, 1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 1, 1, 2, 1, 3, 2, 2, 1, 4, 1, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 4, 1, 4, 2, 1, 2, 1, 3, 1, 1, 5, 3, 3, 2, 1, 2, 2, 2, 1, 2, 2, 3, 1, 2, 1, 1, 3, 2, 4, 2, 1, 1, 1, 3, 4, 2, 2, 1, 4, 3, 3, 2, 1, 2, 1, 1, 4, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 2, 5, 3, 1, 3, 1, 1, 1, 3, 2, 2, 1, 1, 3, 5, 1, 5, 1, 4, 1, 1, 1, 2, 3, 2, 1, 1, 5, 3, 4, 3, 6, 1, 3, 2, 2, 2, 4, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 3, 3, 4, 1, 2, 1, 2, 3, 2, 5, 1, 2, 4, 4, 1, 4, 2, 4, 1, 1, 2, 1, 3, 1, 5, 5, 5, 2, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 3, 1, 4, 3, 3, 1, 3, 2, 1, 2, 1, 3, 3, 2, 2, 3, 1, 1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 3, 1, 3, 4, 3, 1, 2, 2, 3, 2, 5, 2, 2, 2, 3, 5, 2, 2, 3, 3, 1, 2, 2, 2, 4, 1, 4, 1, 2, 2, 2, 1, 1, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 3, 5, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 5, 1, 4, 1, 1, 2, 2, 1, 4, 4, 1, 1, 2, 1, 2, 2, 3, 2, 1, 2, 3, 1, 4, 4, 1, 3, 3, 5, 1, 2, 3, 3, 4, 4, 5, 1, 4, 1, 1, 4, 1, 2, 1, 1, 3, 1, 2, 2, 1, 3, 2, 2, 3, 2, 2, 1, 2, 3, 3, 2, 2, 2, 1, 1, 1, 1, 4, 2, 4, 3, 1, 3, 2, 3, 2, 1, 1, 1, 2, 3, 1, 1, 2, 2, 1, 1, 3, 2, 1, 1, 3, 2, 4, 3, 1, 1, 2, 1, 1, 4, 3, 5, 1, 1, 2, 3, 1, 2, 1, 5, 5, 5, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 5, 1, 1, 1, 4, 3, 3, 1, 4, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 1, 4, 1, 1, 1, 2, 3, 1, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 2, 4, 4, 1, 2, 1, 1, 5, 1, 6, 2, 2, 2, 6, 2, 2, 2, 1, 2, 1, 2, 3, 4, 2, 1, 1, 5, 2, 3, 2, 1, 3, 3, 1, 3, 1, 2, 3, 2, 1, 4, 2, 1, 2, 2, 3, 1, 5, 2, 1, 2, 3, 1, 2, 3, 1, 3, 1, 4, 1, 1, 2, 5, 2, 1, 3, 2, 1, 5, 2, 2, 1, 5, 3, 1, 4, 1, 1, 1, 3, 3, 2, 1, 3, 3, 2, 1, 3, 1, 1, 3, 1, 4, 4, 3, 3, 1, 4, 1, 3, 2, 3, 2, 1, 1, 2, 4, 1, 1, 2, 2, 2, 4, 1, 3, 3, 3, 3, 2, 1, 1, 2, 3, 1, 2, 6, 1, 2, 2, 3, 4, 1, 1, 5, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4, 4, 1, 5, 2, 2, 1, 4, 3, 1, 3, 3, 1, 2, 3, 1, 1, 2, 5, 2, 4, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 5, 2, 1, 3, 1, 6, 2, 3, 1, 1, 2, 2, 5, 2, 4, 2, 5, 1, 2, 3, 1, 4, 2, 2, 1, 2, 4, 1, 4, 1, 4, 1, 2, 5, 2, 1, 6, 1, 2, 3, 1, 1, 3];\\r\\n    //    uint[] private   level5;// = [3, 1, 2, 2, 6, 1, 1, 2, 5, 1, 2, 2, 1, 3, 2, 3, 3, 1, 1, 1, 2, 2, 4, 6, 2, 3, 4, 2, 2, 2, 1, 3, 2, 1, 1, 1, 3, 4, 1, 1, 1, 2, 1, 1, 1, 6, 3, 1, 3, 2, 4, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 4, 1, 3, 3, 1, 2, 1, 3, 4, 1, 1, 2, 3, 5, 3, 1, 1, 3, 1, 4, 1, 2, 4, 1, 4, 1, 3, 5, 4, 1, 1, 1, 4, 2, 1, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1, 2, 2, 4, 3, 1, 1, 4, 3, 3, 5, 1, 1, 2, 3, 1, 1, 1, 1, 4, 3, 1, 2, 1, 2, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 1, 1, 2, 2, 1, 3, 3, 4, 1, 2, 1, 5, 1, 2, 1, 1, 1, 2, 3, 1, 4, 1, 2, 3, 1, 4, 1, 1, 2, 4, 1, 1, 3, 1, 4, 3, 1, 1, 4, 1, 3, 4, 2, 4, 1, 1, 1, 5, 3, 2, 2, 3, 1, 2, 2, 1, 1, 3, 3, 2, 1, 1, 1, 1, 5, 1, 1, 4, 3, 2, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 1, 5, 1, 1, 4, 3, 3, 2, 2, 1, 3, 3, 2, 3, 1, 1, 2, 1, 1, 6, 1, 1, 4, 4, 4, 2, 4, 1, 2, 1, 1, 2, 1, 5, 3, 4, 1, 4, 1, 2, 1, 2, 4, 4, 1, 3, 2, 1, 2, 3, 5, 3, 3, 5, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 4, 1, 1, 3, 2, 1, 3, 5, 1, 5, 3, 1, 3, 1, 1, 2, 4, 6, 1, 2, 2, 2, 2, 1, 4, 1, 1, 2, 2, 4, 1, 1, 1, 1, 1, 2, 1, 4, 3, 1, 1, 1, 2, 3, 2, 1, 3, 4, 1, 4, 2, 5, 1, 2, 1, 2, 2, 2, 1, 5, 3, 4, 3, 1, 1, 2, 1, 3, 1, 1, 5, 3, 1, 2, 5, 3, 4, 2, 2, 3, 4, 1, 5, 1, 1, 3, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 3, 4, 2, 3, 1, 3, 1, 2, 1, 1, 4, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 1, 3, 6, 2, 5, 4, 1, 3, 2, 1, 3, 3, 1, 2, 4, 3, 3, 4, 1, 4, 1, 3, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 4, 1, 4, 1, 2, 2, 3, 1, 2, 5, 1, 5, 1, 1, 5, 6, 3, 3, 3, 3, 1, 3, 2, 2, 4, 3, 1, 3, 3, 3, 6, 4, 1, 4, 1, 2, 1, 2, 1, 3, 1, 4, 2, 1, 1, 1, 3, 1, 2, 1, 3, 2, 4, 2, 1, 1, 2, 1, 4, 4, 2, 6, 2, 3, 2, 1, 4, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 3, 2, 3, 2, 1, 1, 1, 4, 1, 3, 4, 2, 4, 1, 1, 3, 2, 1, 2, 1, 2, 2, 4, 2, 2, 3, 2, 1, 2, 1, 4, 2, 3, 1, 4, 1, 4, 6, 1, 3, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 4, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 3, 6, 3, 2, 2, 1, 1, 1, 4, 2, 1, 2, 3, 1, 2, 1, 1, 2, 2, 1, 3, 6, 3, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 3, 2, 2, 1, 1, 4, 1, 3, 3, 3, 2, 3, 1, 3, 4, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 4, 1, 1, 1, 3, 4, 2, 1, 6, 1, 1, 4, 2, 1, 2, 2, 2, 1, 3, 4, 4, 3, 1, 2, 2, 3, 1, 2, 1, 3, 4, 2, 1, 1, 4, 4, 1, 1, 2, 1, 1, 4, 1, 4, 2, 3, 4, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2, 1, 3, 3, 4, 2, 3, 3, 4, 3, 2, 1, 3, 3, 4, 1, 2, 2, 4, 3, 1, 2, 2, 1, 2, 4, 2, 1, 1, 2, 2, 1, 1, 3, 4, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 1, 1, 2, 1, 3, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 1, 3, 2, 2, 1, 1, 1, 1, 1, 2, 3, 2, 3, 1, 2, 1, 2, 1, 1, 2, 2, 2, 3, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 3, 2, 3, 3, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 1, 3, 3, 2, 3, 2, 1, 2, 1, 2, 2, 1, 3, 1, 1, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2];\\r\\n\\r\\n    constructor() public {\\r\\n        levels = [4, 2, 3, 4, 1, 1, 5, 2, 1, 2, 4, 3, 3, 2, 1, 6, 1, 2, 4, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 3, 1, 3, 3, 2, 1, 2, 2, 3, 2, 4, 1, 1, 1, 1, 3, 1, 1, 5, 2, 2, 4, 2, 2, 2, 2, 3, 1, 1, 1, 4, 1, 1, 3, 1, 4, 3, 1, 1, 3, 1, 1, 3, 4, 1, 2, 1, 2, 2, 1, 3, 2, 1, 1, 3, 4, 1, 1, 1, 5, 1, 2, 4, 2, 3, 2, 1, 1, 3, 3, 6, 1, 1, 2, 3, 2, 1, 5, 2, 3, 2, 1, 1, 1, 2, 2, 3, 4, 2, 1, 1, 3, 1, 3, 2, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 1, 1, 4, 1, 4, 2, 3, 2, 2, 2, 1, 2, 1, 2, 2, 2, 3, 3, 1, 2, 1, 2, 3, 3, 1, 3, 1, 2, 1, 3, 4, 1, 2, 2, 1, 1, 5, 2, 2, 3, 1, 3, 6, 1, 2, 2, 1, 1, 1, 5, 4, 1, 2, 3, 1, 1, 4, 2, 2, 5, 1, 1, 3, 1, 3, 1, 2, 1, 3, 5, 1, 2, 2, 4, 1, 1, 2, 1, 1, 3, 2, 4, 2, 1, 2, 1, 3, 2, 5, 2, 4, 1, 1, 1, 1, 4, 3, 2, 4, 1, 2, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 6, 1, 4, 4, 3, 2, 3, 4, 1, 2, 1, 1, 3, 2, 3, 1, 2, 1, 1, 1, 2, 3, 5, 3, 4, 1, 2, 1, 1, 2, 2, 3, 3, 5, 4, 3, 1, 2, 2, 5, 1, 1, 2, 1, 1, 1, 2, 1, 1, 4, 4, 4, 2, 1, 2, 4, 1, 2, 1, 3, 2, 3, 1, 3, 4, 3, 2, 3, 2, 1, 1, 2, 5, 6, 1, 2, 1, 1, 3, 2, 3, 1, 6, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 4, 3, 4, 5, 3, 2, 2, 2, 1, 1, 5, 2, 1, 3, 1, 1, 2, 4, 2, 3, 1, 4, 1, 2, 2, 2, 3, 3, 5, 3, 1, 4, 3, 6, 2, 2, 2, 1, 2, 4, 3, 2, 2, 2, 1, 3, 2, 5, 1, 1, 3, 1, 3, 3, 2, 1, 1, 3, 1, 2, 2, 2, 1, 1, 1, 4, 1, 2, 1, 3, 1, 4, 2, 1, 4, 1, 6, 3, 2, 3, 2, 4, 5, 2, 2, 3, 1, 3, 4, 3, 1, 3, 2, 4, 6, 1, 3, 3, 4, 3, 4, 2, 1, 2, 5, 2, 1, 1, 1, 4, 2, 1, 2, 1, 2, 1, 1, 4, 4, 1, 3, 1, 2, 3, 1, 1, 1, 2, 2, 2, 2, 4, 3, 4, 1, 3, 3, 5, 3, 2, 1, 3, 1, 2, 3, 1, 2, 6, 4, 4, 2, 3, 2, 1, 2, 1, 1, 1, 3, 2, 2, 3, 2, 3, 2, 1, 2, 2, 6, 4, 3, 2, 4, 1, 2, 2, 1, 1, 2, 1, 1, 2, 3, 2, 2, 3, 1, 1, 1, 2, 1, 5, 5, 5, 1, 2, 4, 1, 2, 1, 2, 6, 4, 1, 1, 3, 1, 3, 3, 5, 3, 1, 4, 2, 2, 6, 1, 2, 4, 3, 1, 3, 1, 2, 1, 2, 4, 2, 2, 2, 2, 4, 2, 1, 3, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 3, 1, 1, 2, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 2, 1, 1, 4, 1, 2, 4, 2, 1, 1, 1, 2, 6, 1, 1, 2, 1, 2, 4, 4, 4, 2, 1, 5, 2, 1, 1, 2, 1, 3, 2, 1, 1, 3, 2, 1, 1, 5, 1, 1, 1, 2, 3, 1, 2, 5, 1, 1, 5, 1, 2, 1, 3, 5, 1, 2, 1, 2, 4, 4, 1, 1, 2, 3, 1, 1, 2, 4, 3, 2, 3, 2, 2, 5, 4, 2, 2, 1, 2, 3, 2, 3, 5, 2, 1, 2, 1, 2, 5, 2, 1, 3, 4, 1, 3, 1, 2, 5, 3, 2, 3, 1, 4, 3, 1, 1, 4, 1, 3, 3, 3, 2, 5, 1, 1, 1, 2, 2, 1, 5, 4, 1, 1, 1, 1, 1, 3, 2, 6, 1, 1, 1, 3, 4, 1, 3, 1, 1, 3, 2, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 4, 2, 1, 1, 1, 1, 4, 1, 2, 3, 1, 2, 2, 4, 2, 5, 1, 2, 1, 5, 4, 6, 3, 1, 2, 4, 6, 1, 2, 1, 1, 1, 2, 4, 3, 1, 5, 3, 3, 5, 3, 1, 5, 1, 1, 1, 6, 1, 2, 2, 2, 3, 1, 5, 1, 3, 1, 2, 1, 1, 4, 1, 2, 1, 3, 4, 4, 2, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 4, 2, 3, 1, 2, 1, 2, 1, 3, 2, 3, 1, 1, 1, 1, 1, 2, 1, 3, 2, 1, 3, 5, 2, 4, 1, 1, 3, 2, 2, 2, 1, 4, 2, 1, 2, 3, 3, 1, 2, 5, 1, 3, 2, 3, 1, 3, 3, 1, 2, 4, 3, 1, 1, 2, 3, 4, 2, 3, 3, 3, 2, 1, 5, 1, 3, 1, 1, 1, 6, 2, 4, 3, 6, 1, 3, 1, 1, 4, 4, 1, 1, 1, 3, 3, 1, 1, 3, 2, 3, 1, 6, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 4, 1, 4, 1, 2, 3, 2, 2, 1, 4, 2, 1, 1, 1, 3, 3, 1, 3, 3, 1, 1, 3, 1, 4, 1, 1, 2, 2, 2, 1, 1, 3, 1, 5, 2, 3, 1, 5, 3, 3, 3, 3, 1, 2, 2, 1, 3, 5];\\r\\n        //        level2 = [2, 3, 1, 5, 1, 1, 1, 5, 1, 4, 3, 2, 3, 5, 1, 3, 1, 5, 2, 1, 4, 4, 1, 2, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 1, 5, 1, 2, 1, 2, 1, 4, 1, 2, 2, 1, 1, 1, 2, 5, 1, 1, 4, 3, 1, 2, 1, 1, 2, 2, 6, 2, 5, 2, 4, 2, 2, 2, 1, 2, 1, 1, 3, 2, 1, 1, 3, 3, 3, 4, 1, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 3, 2, 2, 5, 4, 1, 2, 6, 2, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 2, 2, 1, 3, 2, 1, 4, 1, 1, 2, 1, 1, 3, 1, 4, 4, 3, 4, 2, 1, 2, 3, 2, 1, 2, 2, 1, 1, 2, 4, 3, 2, 1, 1, 6, 2, 1, 2, 2, 1, 2, 2, 4, 6, 4, 1, 3, 4, 1, 2, 2, 4, 2, 3, 2, 4, 1, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 6, 1, 2, 5, 1, 3, 1, 1, 2, 4, 1, 3, 1, 1, 6, 4, 4, 1, 2, 2, 2, 3, 3, 1, 2, 1, 1, 1, 2, 2, 5, 1, 5, 2, 1, 1, 3, 2, 4, 3, 2, 1, 4, 5, 1, 3, 2, 3, 4, 1, 2, 2, 2, 3, 1, 5, 1, 3, 5, 1, 1, 2, 2, 1, 1, 4, 2, 4, 1, 2, 2, 1, 3, 1, 4, 2, 2, 2, 3, 1, 2, 2, 3, 1, 4, 5, 1, 2, 3, 1, 1, 1, 2, 2, 4, 2, 2, 5, 1, 4, 1, 4, 1, 4, 2, 1, 3, 2, 2, 1, 1, 3, 2, 3, 1, 2, 3, 1, 1, 2, 3, 3, 3, 1, 3, 5, 2, 2, 1, 1, 1, 2, 5, 1, 1, 2, 1, 1, 1, 1, 5, 3, 2, 2, 1, 1, 1, 3, 2, 3, 2, 6, 1, 4, 3, 1, 3, 1, 1, 6, 4, 2, 2, 2, 2, 1, 4, 4, 3, 6, 1, 4, 5, 2, 1, 5, 2, 1, 4, 1, 3, 1, 2, 2, 1, 2, 3, 4, 4, 3, 3, 1, 3, 1, 5, 2, 2, 2, 2, 3, 2, 2, 3, 1, 4, 2, 4, 1, 1, 1, 2, 2, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 1, 2, 3, 3, 2, 1, 1, 3, 4, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 2, 1, 3, 3, 3, 1, 1, 5, 2, 2, 2, 1, 3, 4, 1, 2, 2, 4, 4, 2, 3, 2, 2, 2, 3, 2, 4, 5, 2, 2, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 4, 2, 1, 4, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1, 4, 3, 2, 2, 1, 2, 1, 2, 3, 3, 1, 5, 3, 3, 4, 1, 3, 2, 2, 1, 3, 2, 3, 2, 2, 2, 6, 3, 1, 3, 3, 2, 3, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 4, 2, 3, 4, 4, 5, 4, 4, 1, 1, 1, 2, 3, 1, 1, 5, 2, 1, 2, 1, 4, 1, 1, 5, 2, 1, 1, 3, 2, 2, 3, 1, 2, 2, 1, 1, 3, 6, 3, 3, 1, 2, 1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 3, 5, 3, 1, 2, 1, 1, 1, 1, 5, 3, 1, 1, 3, 2, 4, 1, 1, 5, 1, 2, 5, 4, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 3, 2, 1, 4, 2, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 1, 3, 1, 1, 4, 1, 5, 3, 1, 5, 2, 2, 1, 2, 1, 3, 4, 3, 1, 5, 6, 1, 2, 1, 1, 1, 4, 1, 1, 3, 4, 3, 1, 1, 1, 1, 1, 2, 2, 4, 2, 3, 2, 1, 5, 6, 1, 1, 2, 4, 6, 1, 2, 3, 1, 2, 3, 1, 1, 2, 1, 1, 1, 2, 1, 3, 2, 3, 2, 2, 1, 2, 2, 2, 1, 3, 2, 1, 1, 4, 2, 2, 2, 1, 1, 4, 1, 2, 2, 1, 5, 2, 2, 4, 5, 2, 3, 1, 1, 1, 3, 2, 6, 1, 1, 3, 2, 4, 3, 2, 3, 1, 1, 2, 1, 2, 1, 2, 2, 6, 1, 2, 5, 4, 3, 1, 2, 1, 1, 1, 4, 2, 3, 2, 2, 1, 3, 2, 2, 3, 1, 3, 2, 5, 1, 5, 2, 1, 1, 2, 3, 1, 3, 2, 4, 5, 1, 3, 3, 1, 5, 1, 1, 1, 6, 4, 1, 2, 2, 2, 3, 1, 1, 1, 1, 1, 3, 5, 1, 1, 1, 2, 1, 6, 5, 1, 4, 2, 1, 1, 3, 2, 1, 2, 2, 2, 3, 3, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 4, 2, 2, 1, 3, 3, 2, 2, 3, 3, 2, 2, 1, 4, 1, 3, 1, 3, 1, 1, 2, 4, 2, 1, 1, 4, 2, 2, 2, 3, 3, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 1, 4, 1, 4, 4, 1, 1, 3, 2, 5, 3, 3, 5, 2, 1, 1, 3, 1, 2, 2, 5, 1, 1, 1, 3, 3, 3, 2, 3, 1, 2, 3, 1, 2, 2, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 4, 2, 4, 2, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 3, 1, 1, 1, 3, 2, 4, 2, 1, 3, 3, 2, 4, 2, 2, 2, 2, 1, 4, 1, 1];\\r\\n        //        level3 = [1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 1, 4, 1, 4, 1, 1, 3, 3, 1, 6, 2, 1, 1, 4, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 2, 4, 2, 2, 1, 3, 2, 2, 3, 1, 2, 2, 1, 2, 2, 3, 2, 4, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 2, 1, 1, 1, 3, 1, 2, 3, 3, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 2, 2, 3, 1, 4, 2, 1, 5, 1, 2, 5, 2, 1, 3, 4, 3, 1, 2, 2, 4, 5, 2, 1, 1, 3, 5, 1, 2, 3, 1, 1, 3, 2, 3, 1, 2, 4, 4, 3, 2, 1, 3, 2, 1, 1, 2, 4, 1, 3, 2, 1, 3, 2, 2, 2, 1, 4, 4, 1, 2, 2, 1, 2, 2, 2, 3, 1, 1, 1, 5, 2, 1, 6, 2, 1, 5, 1, 3, 4, 3, 2, 2, 1, 2, 5, 2, 2, 1, 2, 3, 1, 1, 1, 3, 1, 4, 3, 5, 1, 1, 1, 1, 3, 2, 3, 1, 2, 3, 3, 2, 4, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 4, 4, 2, 4, 1, 4, 1, 1, 2, 1, 2, 5, 4, 4, 3, 3, 4, 1, 4, 2, 2, 2, 1, 2, 2, 1, 2, 2, 6, 2, 4, 2, 1, 3, 1, 2, 2, 1, 1, 4, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 3, 2, 2, 1, 3, 3, 3, 1, 3, 1, 3, 2, 5, 3, 6, 4, 2, 5, 2, 1, 2, 2, 4, 3, 1, 3, 1, 5, 1, 1, 3, 1, 1, 1, 2, 1, 4, 3, 2, 2, 2, 6, 4, 1, 1, 4, 4, 1, 1, 1, 3, 1, 1, 2, 1, 1, 5, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 5, 3, 4, 3, 1, 4, 2, 3, 3, 2, 1, 2, 2, 1, 1, 3, 2, 3, 1, 3, 2, 1, 1, 1, 2, 2, 4, 3, 2, 1, 1, 2, 3, 5, 2, 2, 3, 1, 2, 1, 4, 2, 1, 1, 2, 1, 3, 3, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 3, 1, 3, 2, 1, 1, 3, 2, 2, 1, 1, 1, 3, 2, 1, 3, 3, 5, 1, 2, 2, 2, 1, 5, 2, 3, 2, 4, 6, 4, 3, 2, 1, 2, 3, 1, 1, 1, 2, 3, 2, 1, 1, 2, 5, 5, 1, 1, 2, 1, 1, 1, 1, 4, 1, 2, 3, 3, 2, 6, 1, 4, 4, 2, 1, 1, 1, 1, 3, 5, 1, 6, 2, 2, 5, 3, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 1, 2, 3, 3, 2, 2, 2, 1, 2, 3, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 3, 2, 1, 3, 1, 1, 2, 1, 1, 2, 3, 1, 2, 2, 5, 2, 1, 1, 3, 3, 2, 2, 2, 1, 1, 5, 1, 1, 4, 1, 2, 1, 4, 3, 1, 1, 2, 2, 2, 4, 1, 4, 1, 6, 4, 1, 1, 4, 5, 4, 1, 3, 6, 1, 1, 2, 4, 3, 2, 1, 1, 1, 5, 1, 5, 2, 1, 3, 3, 4, 2, 4, 5, 2, 3, 2, 3, 1, 3, 1, 2, 1, 3, 2, 2, 5, 3, 6, 2, 4, 1, 1, 5, 3, 4, 3, 1, 3, 1, 5, 2, 3, 1, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 5, 1, 3, 2, 3, 2, 3, 2, 3, 4, 1, 2, 2, 1, 1, 5, 2, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 3, 2, 6, 2, 3, 2, 4, 3, 1, 5, 1, 1, 1, 1, 3, 1, 4, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 1, 3, 1, 1, 1, 3, 2, 4, 2, 1, 1, 3, 3, 5, 4, 1, 1, 4, 3, 2, 3, 3, 4, 2, 1, 1, 3, 1, 2, 3, 1, 2, 1, 1, 3, 2, 1, 3, 5, 1, 1, 3, 2, 4, 1, 1, 5, 3, 1, 1, 2, 3, 4, 1, 2, 1, 1, 1, 1, 2, 4, 3, 5, 1, 4, 3, 1, 3, 1, 2, 1, 2, 1, 4, 2, 2, 1, 3, 4, 4, 1, 4, 1, 1, 4, 1, 2, 2, 2, 4, 2, 2, 5, 1, 1, 1, 2, 1, 3, 1, 1, 1, 3, 3, 2, 5, 1, 1, 2, 2, 2, 3, 4, 4, 1, 2, 1, 3, 2, 3, 3, 2, 1, 2, 2, 1, 4, 4, 1, 1, 1, 2, 1, 4, 2, 1, 1, 2, 4, 1, 2, 2, 3, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 4, 3, 1, 2, 1, 1, 1, 3, 4, 4, 1, 4, 3, 6, 3, 4, 1, 5, 3, 2, 2, 3, 1, 1, 4, 1, 1, 2, 4, 3, 2, 4, 3, 1, 6, 1, 2, 1, 1, 3, 1, 2, 5, 1, 2, 1, 1, 1, 3, 1, 3, 1, 1, 5, 4, 1, 2, 2, 2, 3, 3, 2, 1, 1, 2, 5, 3, 4, 5, 2, 1, 1, 1, 6, 3, 2, 1, 1, 1, 2, 5, 5, 2, 1, 3, 4, 1, 2, 3, 1, 3, 1, 2, 3, 1, 2, 1, 2, 2, 4, 1, 2, 3, 1, 3, 3, 1, 3, 3, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3, 1, 2, 1, 4, 2, 1, 2, 4, 4, 2, 1, 3, 6, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 3, 1, 6, 2, 5, 2, 2, 2, 5, 1, 2, 2, 2, 1, 3, 1, 1, 1, 2, 4, 3, 1, 3, 3, 1, 2, 5, 1, 2, 1, 2, 1, 1, 3];\\r\\n        //        level4 = [1, 3, 4, 2, 2, 3, 2, 3, 2, 3, 2, 4, 3, 1, 1, 1, 4, 1, 3, 5, 1, 2, 1, 1, 1, 2, 3, 2, 1, 5, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3, 2, 4, 2, 4, 1, 2, 2, 5, 1, 1, 1, 3, 4, 1, 1, 1, 2, 1, 6, 1, 1, 3, 3, 3, 3, 2, 3, 3, 4, 1, 2, 1, 4, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 5, 1, 2, 3, 2, 4, 1, 3, 2, 4, 3, 4, 1, 1, 1, 2, 3, 2, 1, 2, 2, 1, 3, 2, 2, 2, 4, 2, 2, 2, 1, 1, 2, 1, 2, 2, 3, 1, 6, 2, 1, 1, 1, 3, 2, 3, 3, 2, 2, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 4, 1, 3, 2, 1, 1, 2, 1, 1, 1, 3, 3, 4, 2, 2, 2, 4, 1, 5, 3, 2, 1, 4, 2, 2, 5, 1, 2, 4, 4, 2, 3, 2, 1, 1, 4, 2, 2, 1, 3, 3, 3, 2, 1, 3, 2, 2, 1, 6, 3, 3, 4, 3, 1, 2, 2, 5, 4, 2, 3, 3, 2, 1, 4, 2, 5, 1, 1, 3, 2, 3, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 3, 1, 2, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 2, 1, 4, 2, 2, 3, 2, 1, 1, 1, 2, 1, 1, 2, 4, 1, 2, 2, 1, 1, 2, 1, 3, 4, 4, 1, 2, 2, 5, 1, 4, 3, 1, 2, 1, 2, 3, 5, 2, 3, 2, 3, 6, 3, 2, 4, 1, 3, 3, 2, 5, 1, 2, 2, 3, 1, 2, 1, 1, 1, 4, 4, 3, 4, 2, 1, 4, 2, 3, 5, 2, 2, 1, 1, 2, 2, 1, 4, 2, 1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 1, 1, 2, 1, 3, 2, 2, 1, 4, 1, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 4, 1, 4, 2, 1, 2, 1, 3, 1, 1, 5, 3, 3, 2, 1, 2, 2, 2, 1, 2, 2, 3, 1, 2, 1, 1, 3, 2, 4, 2, 1, 1, 1, 3, 4, 2, 2, 1, 4, 3, 3, 2, 1, 2, 1, 1, 4, 1, 1, 1, 3, 2, 2, 2, 1, 2, 3, 2, 5, 3, 1, 3, 1, 1, 1, 3, 2, 2, 1, 1, 3, 5, 1, 5, 1, 4, 1, 1, 1, 2, 3, 2, 1, 1, 5, 3, 4, 3, 6, 1, 3, 2, 2, 2, 4, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 3, 3, 4, 1, 2, 1, 2, 3, 2, 5, 1, 2, 4, 4, 1, 4, 2, 4, 1, 1, 2, 1, 3, 1, 5, 5, 5, 2, 1, 4, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 3, 1, 4, 3, 3, 1, 3, 2, 1, 2, 1, 3, 3, 2, 2, 3, 1, 1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 3, 1, 3, 4, 3, 1, 2, 2, 3, 2, 5, 2, 2, 2, 3, 5, 2, 2, 3, 3, 1, 2, 2, 2, 4, 1, 4, 1, 2, 2, 2, 1, 1, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 3, 5, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 5, 1, 4, 1, 1, 2, 2, 1, 4, 4, 1, 1, 2, 1, 2, 2, 3, 2, 1, 2, 3, 1, 4, 4, 1, 3, 3, 5, 1, 2, 3, 3, 4, 4, 5, 1, 4, 1, 1, 4, 1, 2, 1, 1, 3, 1, 2, 2, 1, 3, 2, 2, 3, 2, 2, 1, 2, 3, 3, 2, 2, 2, 1, 1, 1, 1, 4, 2, 4, 3, 1, 3, 2, 3, 2, 1, 1, 1, 2, 3, 1, 1, 2, 2, 1, 1, 3, 2, 1, 1, 3, 2, 4, 3, 1, 1, 2, 1, 1, 4, 3, 5, 1, 1, 2, 3, 1, 2, 1, 5, 5, 5, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 5, 1, 1, 1, 4, 3, 3, 1, 4, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 1, 4, 1, 1, 1, 2, 3, 1, 2, 3, 3, 2, 1, 1, 1, 1, 3, 2, 2, 4, 4, 1, 2, 1, 1, 5, 1, 6, 2, 2, 2, 6, 2, 2, 2, 1, 2, 1, 2, 3, 4, 2, 1, 1, 5, 2, 3, 2, 1, 3, 3, 1, 3, 1, 2, 3, 2, 1, 4, 2, 1, 2, 2, 3, 1, 5, 2, 1, 2, 3, 1, 2, 3, 1, 3, 1, 4, 1, 1, 2, 5, 2, 1, 3, 2, 1, 5, 2, 2, 1, 5, 3, 1, 4, 1, 1, 1, 3, 3, 2, 1, 3, 3, 2, 1, 3, 1, 1, 3, 1, 4, 4, 3, 3, 1, 4, 1, 3, 2, 3, 2, 1, 1, 2, 4, 1, 1, 2, 2, 2, 4, 1, 3, 3, 3, 3, 2, 1, 1, 2, 3, 1, 2, 6, 1, 2, 2, 3, 4, 1, 1, 5, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4, 4, 1, 5, 2, 2, 1, 4, 3, 1, 3, 3, 1, 2, 3, 1, 1, 2, 5, 2, 4, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 5, 2, 1, 3, 1, 6, 2, 3, 1, 1, 2, 2, 5, 2, 4, 2, 5, 1, 2, 3, 1, 4, 2, 2, 1, 2, 4, 1, 4, 1, 4, 1, 2, 5, 2, 1, 6, 1, 2, 3, 1, 1, 3];\\r\\n        //        level5 = [3, 1, 2, 2, 6, 1, 1, 2, 5, 1, 2, 2, 1, 3, 2, 3, 3, 1, 1, 1, 2, 2, 4, 6, 2, 3, 4, 2, 2, 2, 1, 3, 2, 1, 1, 1, 3, 4, 1, 1, 1, 2, 1, 1, 1, 6, 3, 1, 3, 2, 4, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 3, 1, 4, 1, 3, 3, 1, 2, 1, 3, 4, 1, 1, 2, 3, 5, 3, 1, 1, 3, 1, 4, 1, 2, 4, 1, 4, 1, 3, 5, 4, 1, 1, 1, 4, 2, 1, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1, 2, 2, 4, 3, 1, 1, 4, 3, 3, 5, 1, 1, 2, 3, 1, 1, 1, 1, 4, 3, 1, 2, 1, 2, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 1, 1, 2, 2, 1, 3, 3, 4, 1, 2, 1, 5, 1, 2, 1, 1, 1, 2, 3, 1, 4, 1, 2, 3, 1, 4, 1, 1, 2, 4, 1, 1, 3, 1, 4, 3, 1, 1, 4, 1, 3, 4, 2, 4, 1, 1, 1, 5, 3, 2, 2, 3, 1, 2, 2, 1, 1, 3, 3, 2, 1, 1, 1, 1, 5, 1, 1, 4, 3, 2, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 1, 5, 1, 1, 4, 3, 3, 2, 2, 1, 3, 3, 2, 3, 1, 1, 2, 1, 1, 6, 1, 1, 4, 4, 4, 2, 4, 1, 2, 1, 1, 2, 1, 5, 3, 4, 1, 4, 1, 2, 1, 2, 4, 4, 1, 3, 2, 1, 2, 3, 5, 3, 3, 5, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 4, 1, 1, 3, 2, 1, 3, 5, 1, 5, 3, 1, 3, 1, 1, 2, 4, 6, 1, 2, 2, 2, 2, 1, 4, 1, 1, 2, 2, 4, 1, 1, 1, 1, 1, 2, 1, 4, 3, 1, 1, 1, 2, 3, 2, 1, 3, 4, 1, 4, 2, 5, 1, 2, 1, 2, 2, 2, 1, 5, 3, 4, 3, 1, 1, 2, 1, 3, 1, 1, 5, 3, 1, 2, 5, 3, 4, 2, 2, 3, 4, 1, 5, 1, 1, 3, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 3, 4, 2, 3, 1, 3, 1, 2, 1, 1, 4, 2, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 2, 1, 3, 6, 2, 5, 4, 1, 3, 2, 1, 3, 3, 1, 2, 4, 3, 3, 4, 1, 4, 1, 3, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 4, 1, 4, 1, 2, 2, 3, 1, 2, 5, 1, 5, 1, 1, 5, 6, 3, 3, 3, 3, 1, 3, 2, 2, 4, 3, 1, 3, 3, 3, 6, 4, 1, 4, 1, 2, 1, 2, 1, 3, 1, 4, 2, 1, 1, 1, 3, 1, 2, 1, 3, 2, 4, 2, 1, 1, 2, 1, 4, 4, 2, 6, 2, 3, 2, 1, 4, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 3, 2, 3, 2, 1, 1, 1, 4, 1, 3, 4, 2, 4, 1, 1, 3, 2, 1, 2, 1, 2, 2, 4, 2, 2, 3, 2, 1, 2, 1, 4, 2, 3, 1, 4, 1, 4, 6, 1, 3, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 4, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 3, 6, 3, 2, 2, 1, 1, 1, 4, 2, 1, 2, 3, 1, 2, 1, 1, 2, 2, 1, 3, 6, 3, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 1, 1, 3, 2, 2, 1, 1, 4, 1, 3, 3, 3, 2, 3, 1, 3, 4, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 4, 1, 1, 1, 3, 4, 2, 1, 6, 1, 1, 4, 2, 1, 2, 2, 2, 1, 3, 4, 4, 3, 1, 2, 2, 3, 1, 2, 1, 3, 4, 2, 1, 1, 4, 4, 1, 1, 2, 1, 1, 4, 1, 4, 2, 3, 4, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 2, 1, 4, 1, 1, 1, 2, 1, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2, 1, 3, 3, 4, 2, 3, 3, 4, 3, 2, 1, 3, 3, 4, 1, 2, 2, 4, 3, 1, 2, 2, 1, 2, 4, 2, 1, 1, 2, 2, 1, 1, 3, 4, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 1, 1, 2, 1, 3, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 1, 3, 2, 2, 1, 1, 1, 1, 1, 2, 3, 2, 3, 1, 2, 1, 2, 1, 1, 2, 2, 2, 3, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 3, 2, 3, 3, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 1, 3, 3, 2, 3, 2, 1, 2, 1, 2, 2, 1, 3, 1, 1, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2];\\r\\n\\r\\n    }\\r\\n    function addData(uint[] memory data) external onlyOwner {\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            levels.push(data[i]);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n//    function pop() public {\\r\\n//        console.log(\\\"l:\\\",levels[levels.length-1]);\\r\\n//        levels.pop();\\r\\n//        console.log(\\\"l:\\\",levels[levels.length-1]);\\r\\n//        console.log(levels.length);\\r\\n//    }\\r\\n\\r\\n    function getRandomLevel(uint256 tokenId) external view onlyOwner returns (uint) {\\r\\n        return levels[tokenId];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAir.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n    This interface is used primarily with contracts that hold assets, such as farm, vault, staking, cross-chain, etc.\\r\\n    While participating in activities, users can separate property rights and use rights through freezing. For example, mortgage lending after freezing.\\r\\n */\\r\\ninterface IAir {\\r\\n    function getUppers(address user) external view returns (address, address, address, address, address);\\r\\n\\r\\n    function addRecommend(address _self, address _recommend) external returns (bool);\\r\\n\\r\\n    function getOneLevelLists(address addr) external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRoyalties\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyalties\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft1Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft2Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"claimNftReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delMinter\",\"type\":\"address\"}],\"name\":\"delMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefultRoyalty\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part\",\"name\":\"part\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinterLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNft\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"internalType\":\"struct LibPart.NftInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRemainNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"getUpgradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canUpgrade\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invitePool\",\"outputs\":[{\"internalType\":\"contract IAir\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_air\",\"type\":\"address\"}],\"name\":\"setAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"setCanUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet_\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sumRoyalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialNftId\",\"type\":\"uint256\"}],\"name\":\"upgradeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DsgNft", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}