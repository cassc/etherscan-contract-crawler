{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/fund/Share.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IFund.sol\\\";\\n\\ncontract Share is IERC20 {\\n    uint8 public constant decimals = 18;\\n\\n    string public name;\\n    string public symbol;\\n    uint256 private immutable _tranche;\\n\\n    IFund public fund;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * _tranche is immutable: it can only be set once during construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address fund_,\\n        uint256 tranche_\\n    ) public {\\n        name = name_;\\n        symbol = symbol_;\\n        fund = IFund(fund_);\\n        _tranche = tranche_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return fund.shareTotalSupply(_tranche);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return fund.shareBalanceOf(_tranche, account);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        fund.transfer(_tranche, msg.sender, recipient, amount);\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return fund.shareAllowance(_tranche, owner, spender);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        fund.approve(_tranche, msg.sender, spender, amount);\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 newAllowance = fund.transferFrom(_tranche, msg.sender, sender, recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n        emit Approval(sender, msg.sender, newAllowance);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        uint256 newAllowance = fund.increaseAllowance(_tranche, msg.sender, spender, addedValue);\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 newAllowance =\\n            fund.decreaseAllowance(_tranche, msg.sender, spender, subtractedValue);\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITwapOracle.sol\\\";\\n\\ninterface IFund {\\n    /// @notice A linear transformation matrix that represents a rebalance.\\n    ///\\n    ///         ```\\n    ///             [ ratioM          0        0 ]\\n    ///         R = [ ratioA2M  ratioAB        0 ]\\n    ///             [ ratioB2M        0  ratioAB ]\\n    ///         ```\\n    ///\\n    ///         Amounts of the three tranches `m`, `a` and `b` can be rebalanced by multiplying the matrix:\\n    ///\\n    ///         ```\\n    ///         [ m', a', b' ] = [ m, a, b ] * R\\n    ///         ```\\n    struct Rebalance {\\n        uint256 ratioM;\\n        uint256 ratioA2M;\\n        uint256 ratioB2M;\\n        uint256 ratioAB;\\n        uint256 timestamp;\\n    }\\n\\n    function trancheWeights() external pure returns (uint256 weightA, uint256 weightB);\\n\\n    function tokenUnderlying() external view returns (address);\\n\\n    function tokenM() external view returns (address);\\n\\n    function tokenA() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function underlyingDecimalMultiplier() external view returns (uint256);\\n\\n    function twapOracle() external view returns (ITwapOracle);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\\n\\n    function shareTotalSupply(uint256 tranche) external view returns (uint256);\\n\\n    function shareBalanceOf(uint256 tranche, address account) external view returns (uint256);\\n\\n    function allShareBalanceOf(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function shareBalanceVersion(address account) external view returns (uint256);\\n\\n    function shareAllowance(\\n        uint256 tranche,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function shareAllowanceVersion(address owner, address spender) external view returns (uint256);\\n\\n    function getRebalanceSize() external view returns (uint256);\\n\\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\\n\\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\\n\\n    function currentDay() external view returns (uint256);\\n\\n    function fundActivityStartTime() external view returns (uint256);\\n\\n    function exchangeActivityStartTime() external view returns (uint256);\\n\\n    function isFundActive(uint256 timestamp) external view returns (bool);\\n\\n    function isPrimaryMarketActive(address primaryMarket, uint256 timestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isExchangeActive(uint256 timestamp) external view returns (bool);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function extrapolateNav(uint256 timestamp, uint256 price)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateNavB(uint256 navM, uint256 navA) external pure returns (uint256);\\n\\n    function doRebalance(\\n        uint256 amountM,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountM,\\n            uint256 newAmountA,\\n            uint256 newAmountB\\n        );\\n\\n    function batchRebalance(\\n        uint256 amountM,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountM,\\n            uint256 newAmountA,\\n            uint256 newAmountB\\n        );\\n\\n    function refreshBalance(address account, uint256 targetVersion) external;\\n\\n    function refreshAllowance(\\n        address owner,\\n        address spender,\\n        uint256 targetVersion\\n    ) external;\\n\\n    function mint(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function transfer(\\n        uint256 tranche,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function transferFrom(\\n        uint256 tranche,\\n        address spender,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256 newAllowance);\\n\\n    function increaseAllowance(\\n        uint256 tranche,\\n        address sender,\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function decreaseAllowance(\\n        uint256 tranche,\\n        address sender,\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function approve(\\n        uint256 tranche,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    event RebalanceTriggered(\\n        uint256 indexed index,\\n        uint256 indexed day,\\n        uint256 ratioM,\\n        uint256 ratioA2M,\\n        uint256 ratioB2M,\\n        uint256 ratioAB\\n    );\\n    event Settled(uint256 indexed day, uint256 navM, uint256 navA, uint256 navB);\\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITwapOracle {\\n    function getTwap(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"fund_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Share", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000d6b3b86209ebb3c608f3f42bf52818169944e402000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000145472616e6368657373204254434220515545454e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b74425443422e515545454e000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}