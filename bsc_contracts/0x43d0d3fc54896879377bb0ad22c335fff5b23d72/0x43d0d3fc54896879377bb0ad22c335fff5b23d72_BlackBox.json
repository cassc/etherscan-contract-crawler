{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n    ___       ___       ___       ___       ___       ___       ___       ___\r\n   /\\  \\     /\\__\\     /\\  \\     /\\  \\     /\\__\\     /\\  \\     /\\  \\     /\\__\\\r\n  /::\\  \\   /:/  /    /::\\  \\   /::\\  \\   /:/ _/_   /::\\  \\   /::\\  \\   |::L__L\r\n /::\\:\\__\\ /:/__/    /::\\:\\__\\ /:/\\:\\__\\ /::-\"\\__\\ /::\\:\\__\\ /:/\\:\\__\\ /::::\\__\\\r\n \\:\\::/  / \\:\\  \\    \\/\\::/  / \\:\\ \\/__/ \\;:;-\",-\" \\:\\::/  / \\:\\/:/  / \\;::;/__/\r\n  \\::/  /   \\:\\__\\     /:/  /   \\:\\__\\    |:|  |    \\::/  /   \\::/  /   |::|__|\r\n   \\/__/     \\/__/     \\/__/     \\/__/     \\|__|     \\/__/     \\/__/     \\/__/\r\n\r\nBlackBox - Perpetual Reflect Lottery\r\n\r\n*/\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\n//import \"https://github.com/pancakeswap/pancake-swap-lib/blob/master/contracts/GSN/Context.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-lib/blob/master/contracts/token/BEP20/IBEP20.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-lib/blob/master/contracts/math/SafeMath.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-lib/blob/master/contracts/utils/Address.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-lib/blob/master/contracts/access/Ownable.sol\";\r\n\r\ncontract BlackBox is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant NAME = \"BlackBox\";\r\n    string private constant SYMBOL = \"BBOX\";\r\n    uint8 private constant DECIMALS = 9;\r\n\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => uint256) private actual;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    mapping(address => bool) private excludedFromFees;\r\n    mapping(address => bool) private excludedFromRewards;\r\n    mapping(address => bool) private excludedFromBBOX;\r\n    address[] private rewardExcluded;\r\n    address[] private jacksInBBOX;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant ACTUAL_TOTAL = 621_000 * 1e9;\r\n    uint256 private rewardsTotal = (MAX - (MAX % ACTUAL_TOTAL));\r\n    uint256 private holderFeeTotal;\r\n    uint256 private BBOXFeeTotal;\r\n    uint256 private lpFeeTotal;\r\n\r\n    uint256 public taxPercentage = 5;\r\n    uint256 public holderTaxAlloc = 2;\r\n    uint256 public BBOXTaxAlloc = 8;\r\n    uint256 public lpTaxAlloc;\r\n    uint256 public totalTaxAlloc = BBOXTaxAlloc.add(holderTaxAlloc).add(lpTaxAlloc);\r\n    uint256 public BBOXcapacity = 5000;\r\n    uint256 public buyThresh = 100;\r\n\r\n    address public BBOXAddress;\r\n    address public lpStakingAddress;\r\n\r\n    constructor() public {\r\n        rewards[_msgSender()] = rewardsTotal;\r\n        emit Transfer(address(0), _msgSender(), ACTUAL_TOTAL);\r\n\r\n        BBOXAddress = _msgSender();\r\n\r\n        excludeFromRewards(_msgSender());\r\n        excludeFromFees(_msgSender());\r\n\r\n        //if (_BBOXAddress != _msgSender()) {\r\n            //excludeFromRewards(_msgSender());\r\n            //excludeFromFees(_msgSender());\r\n        //}\r\n\r\n        excludeFromFees(address(0x000000000000000000000000000000000000dEaD));\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return ACTUAL_TOTAL;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        if (excludedFromRewards[_account]) {\r\n            return actual[_account];\r\n        }\r\n        return tokenWithRewards(rewards[_account]);\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromRewards(address _account) external view returns (bool) {\r\n        return excludedFromRewards[_account];\r\n    }\r\n\r\n    function isExcludedFromFees(address _account) external view returns (bool) {\r\n        return excludedFromFees[_account];\r\n    }\r\n\r\n    function isExcludedFromBBOX(address _account) external view returns (bool) {\r\n        return excludedFromBBOX[_account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return holderFeeTotal.add(BBOXFeeTotal).add(lpFeeTotal);\r\n    }\r\n\r\n    function totalHolderFees() external view returns (uint256) {\r\n        return holderFeeTotal;\r\n    }\r\n\r\n    function totalBBOXFees() external view returns (uint256) {\r\n        return BBOXFeeTotal;\r\n    }\r\n\r\n    function totalLpFees() external view returns (uint256) {\r\n        return lpFeeTotal;\r\n    }\r\n\r\n    function distribute(uint256 _actualAmount) public {\r\n        address sender = _msgSender();\r\n        require(!excludedFromRewards[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n        rewards[sender] = rewards[sender].sub(rewardAmount);\r\n        rewardsTotal = rewardsTotal.sub(rewardAmount);\r\n        holderFeeTotal = holderFeeTotal.add(_actualAmount);\r\n    }\r\n\r\n    function excludeFromFees(address _account) public onlyOwner() {\r\n        require(!excludedFromFees[_account], \"Account is already excluded from fee\");\r\n        excludedFromFees[_account] = true;\r\n        excludedFromBBOX[_account] = false;\r\n    }\r\n\r\n    function includeInFees(address _account) public onlyOwner() {\r\n        require(excludedFromFees[_account], \"Account is already included in fee\");\r\n        excludedFromFees[_account] = false;\r\n        excludedFromBBOX[_account] = true;\r\n    }\r\n\r\n    function excludeFromRewards(address _account) public onlyOwner() {\r\n        require(!excludedFromRewards[_account], \"Account is already excluded from reward\");\r\n\r\n        if (rewards[_account] > 0) {\r\n            actual[_account] = tokenWithRewards(rewards[_account]);\r\n        }\r\n\r\n        excludedFromRewards[_account] = true;\r\n        excludedFromBBOX[_account] = true;\r\n        rewardExcluded.push(_account);\r\n    }\r\n\r\n    function includeInRewards(address _account) public onlyOwner() {\r\n        require(excludedFromRewards[_account], \"Account is already included in rewards\");\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewardExcluded[i] == _account) {\r\n                rewardExcluded[i] = rewardExcluded[rewardExcluded.length - 1];\r\n                actual[_account] = 0;\r\n                excludedFromRewards[_account] = false;\r\n                excludedFromBBOX[_account] = false;\r\n                rewardExcluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function rand(uint256 maxNum) private view returns(uint256) {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            block.timestamp + block.difficulty +\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\r\n            block.gaslimit +\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\r\n            block.number\r\n        )));\r\n\r\n        return (seed - ((seed / maxNum) * maxNum));\r\n    }\r\n\r\n    function pushJacksInBBOX(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"Cannot add zero address\");\r\n        require(_recipient != address(0), \"Cannot add zero address\");\r\n\r\n        if (excludedFromBBOX[_sender] && !excludedFromBBOX[_recipient] && _amount >= buyThresh * 1e9) {\r\n            jacksInBBOX.push(_recipient);\r\n        }\r\n        if (balanceOf(BBOXAddress) >= BBOXcapacity * 1e9) {\r\n            _transfer(BBOXAddress, jacksInBBOX[rand(jacksInBBOX.length)], balanceOf(BBOXAddress));\r\n            while (jacksInBBOX.length > 0) {\r\n                jacksInBBOX.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 currentTaxPercentage = taxPercentage;\r\n        if (excludedFromFees[_sender] || excludedFromFees[_recipient]) {\r\n            taxPercentage = 0;\r\n        } else {\r\n            uint256 fee = _getFee(_amount);\r\n            uint256 BBOXFee = _getBBOXFee(fee);\r\n            uint256 lpFee = _getLpFee(fee);\r\n\r\n            _updateBBOXFee(BBOXFee);\r\n            _updateLpFee(lpFee);\r\n        }\r\n\r\n        if (excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithoutSenderRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithRecipientRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        } else if (excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithoutRewards(_sender, _recipient, _amount);\r\n        } else {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        }\r\n\r\n        if (currentTaxPercentage != taxPercentage) {\r\n            taxPercentage = currentTaxPercentage;\r\n        }\r\n        pushJacksInBBOX(_sender, _recipient, _amount);\r\n    }\r\n\r\n    function _transferWithRewards(address _sender, address _recipient, uint256 _actualAmount) private {\r\n        (uint256 rewardAmount, uint256 rewardTransferAmount, uint256 rewardFee, uint256 actualTransferAmount, uint256 actualFee) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithRecipientRewards(address _sender, address _recipient, uint256 _actualAmount) private {\r\n        (uint256 rewardAmount, uint256 rewardTransferAmount, uint256 rewardFee, uint256 actualTransferAmount, uint256 actualFee) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutSenderRewards(address _sender, address _recipient, uint256 _actualAmount) private {\r\n        (uint256 rewardAmount, uint256 rewardTransferAmount, uint256 rewardFee, uint256 actualTransferAmount, uint256 actualFee) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutRewards(address _sender, address _recipient, uint256 _actualAmount) private {\r\n        (uint256 rewardAmount, uint256 rewardTransferAmount, uint256 rewardFee, uint256 actualTransferAmount, uint256 actualFee) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _updateHolderFee(uint256 _rewardFee, uint256 _actualFee) private {\r\n        rewardsTotal = rewardsTotal.sub(_rewardFee);\r\n        holderFeeTotal = holderFeeTotal.add(_actualFee);\r\n    }\r\n\r\n    function _updateBBOXFee(uint256 _BBOXFee) private {\r\n        if (BBOXAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardBBOXFee = _BBOXFee.mul(rewardsRate);\r\n        BBOXFeeTotal = BBOXFeeTotal.add(_BBOXFee);\r\n\r\n        rewards[BBOXAddress] = rewards[BBOXAddress].add(rewardBBOXFee);\r\n        if (excludedFromRewards[BBOXAddress]) {\r\n            actual[BBOXAddress] = actual[BBOXAddress].add(_BBOXFee);\r\n        }\r\n    }\r\n\r\n    function _updateLpFee(uint256 _lpFee) private {\r\n        if (lpStakingAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardLpFee = _lpFee.mul(rewardsRate);\r\n        lpFeeTotal = lpFeeTotal.add(_lpFee);\r\n\r\n        rewards[lpStakingAddress] = rewards[lpStakingAddress].add(rewardLpFee);\r\n        if (excludedFromRewards[lpStakingAddress]) {\r\n            actual[lpStakingAddress] = actual[lpStakingAddress].add(_lpFee);\r\n        }\r\n    }\r\n\r\n    function rewardsFromToken(uint256 _actualAmount, bool _deductTransferFee) public view returns (uint256) {\r\n        require(_actualAmount <= ACTUAL_TOTAL, \"Amount must be less than supply\");\r\n        if (!_deductTransferFee) {\r\n            (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n            return rewardAmount;\r\n        } else {\r\n            (, uint256 rewardTransferAmount, , , ) = _getValues(_actualAmount);\r\n            return rewardTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenWithRewards(uint256 _rewardAmount) public view returns (uint256) {\r\n        require(_rewardAmount <= rewardsTotal, \"Amount must be less than total rewards\");\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        return _rewardAmount.div(rewardsRate);\r\n    }\r\n\r\n    function _getValues(uint256 _actualAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 actualTransferAmount, uint256 actualFee) = _getActualValues(_actualAmount);\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        (uint256 rewardAmount, uint256 rewardTransferAmount, uint256 rewardFee) = _getRewardValues(_actualAmount, actualFee, rewardsRate);\r\n\r\n        return (rewardAmount, rewardTransferAmount, rewardFee, actualTransferAmount, actualFee);\r\n    }\r\n\r\n    function _getActualValues(uint256 _actualAmount) private view returns (uint256, uint256) {\r\n        uint256 actualFee = _getFee(_actualAmount);\r\n        uint256 actualHolderFee = _getHolderFee(actualFee);\r\n        uint256 actualTransferAmount = _actualAmount.sub(actualFee);\r\n        return (actualTransferAmount, actualHolderFee);\r\n    }\r\n\r\n    function _getRewardValues(uint256 _actualAmount, uint256 _actualHolderFee, uint256 _rewardsRate) private view returns (uint256, uint256, uint256) {\r\n        uint256 actualFee = _getFee(_actualAmount).mul(_rewardsRate);\r\n        uint256 rewardAmount = _actualAmount.mul(_rewardsRate);\r\n        uint256 rewardTransferAmount = rewardAmount.sub(actualFee);\r\n        uint256 rewardFee = _actualHolderFee.mul(_rewardsRate);\r\n        return (rewardAmount, rewardTransferAmount, rewardFee);\r\n    }\r\n\r\n    function _getRewardsRate() private view returns (uint256) {\r\n        (uint256 rewardsSupply, uint256 actualSupply) = _getCurrentSupply();\r\n        return rewardsSupply.div(actualSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rewardsSupply = rewardsTotal;\r\n        uint256 actualSupply = ACTUAL_TOTAL;\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewards[rewardExcluded[i]] > rewardsSupply || actual[rewardExcluded[i]] > actualSupply) {\r\n                return (rewardsTotal, ACTUAL_TOTAL);\r\n            }\r\n\r\n            rewardsSupply = rewardsSupply.sub(rewards[rewardExcluded[i]]);\r\n            actualSupply = actualSupply.sub(actual[rewardExcluded[i]]);\r\n        }\r\n\r\n        if (rewardsSupply < rewardsTotal.div(ACTUAL_TOTAL)) {\r\n            return (rewardsTotal, ACTUAL_TOTAL);\r\n        }\r\n\r\n        return (rewardsSupply, actualSupply);\r\n    }\r\n\r\n    function _getFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(taxPercentage).div(100);\r\n    }\r\n\r\n    function _getHolderFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(holderTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getBBOXFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(BBOXTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getLpFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(lpTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function getBBOXPoolAdds() public view returns (address[] memory) {\r\n        return jacksInBBOX;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\r\n        require(_taxPercentage >= 1 && _taxPercentage <= 10, \"Value is outside of range 1-10\");\r\n        taxPercentage = _taxPercentage;\r\n    }\r\n\r\n    function setTaxAllocations(uint256 _holderTaxAlloc, uint256 _BBOXTaxAlloc, uint256 _lpTaxAlloc) external onlyOwner {\r\n        totalTaxAlloc = _holderTaxAlloc.add(_BBOXTaxAlloc).add(_lpTaxAlloc);\r\n\r\n        require(_holderTaxAlloc <= 10 && _holderTaxAlloc > 0, \"_holderTaxAlloc is outside of range 1-10\");\r\n        require(_lpTaxAlloc <= 10, \"_lpTaxAlloc is outside of range 5-10\");\r\n        require(_BBOXTaxAlloc <= 10, \"_BBOXTaxAlloc is greater than 10\");\r\n\r\n        holderTaxAlloc = _holderTaxAlloc;\r\n        BBOXTaxAlloc = _BBOXTaxAlloc;\r\n        lpTaxAlloc = _lpTaxAlloc;\r\n    }\r\n\r\n    function setBBOXAddress(address _BBOXAddress) external onlyOwner {\r\n        BBOXAddress = _BBOXAddress;\r\n        excludeFromRewards(_BBOXAddress);\r\n        excludeFromFees(_BBOXAddress);\r\n    }\r\n\r\n    function setBBOXcapacity(uint256 capacity) external onlyOwner {\r\n        BBOXcapacity = capacity;\r\n    }\r\n    \r\n    function setBBOXthresh(uint256 threshold) external onlyOwner {\r\n        buyThresh = threshold;\r\n    }\r\n\r\n    function setLpStakingAddress(address _lpStakingAddress) external onlyOwner {\r\n        lpStakingAddress = _lpStakingAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BBOXAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBOXTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBOXcapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyThresh\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBBOXPoolAdds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromBBOX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deductTransferFee\",\"type\":\"bool\"}],\"name\":\"rewardsFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BBOXAddress\",\"type\":\"address\"}],\"name\":\"setBBOXAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"setBBOXcapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setBBOXthresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStakingAddress\",\"type\":\"address\"}],\"name\":\"setLpStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holderTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BBOXTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTaxAlloc\",\"type\":\"uint256\"}],\"name\":\"setTaxAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"tokenWithRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBBOXFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlackBox", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5de2c41eb76a1df3a7c64761e2ca8d4919cefe8bec3c5dcca4afc312d719bad"}