{"SourceCode": "pragma solidity >=0.6.0 <0.9.0;\r\n//\u6ce8\u610f\u6b64\u5904\r\npragma experimental ABIEncoderV2;  \r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IPancakeRouter {\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\nstruct userLp {\r\n     uint   date;\r\n     uint   valueStay;\r\n     uint   valueHas;\r\n     uint   price;\r\n     string name;\r\n}\r\n\r\nstruct communityLp {\r\n     string   name;\r\n     string   code;\r\n     uint   value;\r\n     uint  state;\r\n     uint  date;\r\n}\r\n\r\n\r\ncontract  worRg { \r\n       \r\n       event BindingAddressCommunity(address indexed addr, string indexed code, string indexed name);\r\n       event ReceiveAward(address indexed addr,  string indexed name ,uint num);\r\n       event RgWor(address indexed addr,  string indexed name ,uint num);\r\n       bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n       uint public price =  1*10**18;\r\n       uint constant internal SECONDS_PER_DAY = 24 * 60 * 60;\r\n       uint constant internal OFFSET19700101 = 2440588;\r\n       address private admin;//\u7ba1\u7406\u5458 \r\n       using SafeMath for uint;\r\n       uint rg = 80000*10**18 ; // \u9ed8\u8ba4\u8ba4\u8d2d\u6570\u91cf\r\n       address public USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n       address public WOR = address(0xd6edbB510af7901b2C049ce778b65a740c4aeB7f);\r\n       address public JS_USDT = address(0x70a6266f8bD6FE48f18F0127F396Edf1bdC9df15);\r\n       address public USDT_WOR_PAIR_ADDRESS = address(0xF366696df61171B9832d4746309D38e20c9A09be);\r\n       mapping(uint => string) monthString; \r\n       mapping(uint => string) yearString; \r\n       uint public day30 = 30;\r\n       uint public daycount = 0;\r\n        constructor() public {\r\n                admin = msg.sender;\r\n                monthString[1] = \"01\";\r\n                monthString[2] = \"02\";\r\n                monthString[3] = \"03\";\r\n                monthString[4] = \"04\";\r\n                monthString[5] = \"05\";\r\n                monthString[6] = \"06\";\r\n                monthString[7] = \"07\";\r\n                monthString[8] = \"08\";\r\n                monthString[9] = \"09\";\r\n                monthString[10] = \"10\";\r\n                monthString[11] = \"11\";\r\n                monthString[12] = \"12\";\r\n                yearString[2023] = \"2023\";\r\n                yearString[2024] = \"2024\";\r\n                yearString[2025] = \"2025\";\r\n                yearString[2026] = \"2026\";\r\n                yearString[2027] = \"2027\";\r\n                yearString[2028] = \"2028\";\r\n                yearString[2029] = \"2029\";\r\n                yearString[2030] = \"2030\";\r\n                yearString[2031] = \"2031\";\r\n                yearString[2032] = \"2032\";\r\n                yearString[2033] = \"2033\";\r\n                yearString[2034] = \"2034\";\r\n                yearString[2035] = \"2035\";\r\n        }\r\n\r\n       // \u7ed1\u5b9a\u7684\u793e\u533a\u5173\u7cfb\r\n       mapping(address => communityLp) userCommunity;\r\n       //\u793e\u533a\r\n       mapping(string => communityLp) communityList;\r\n       //\u7528\u6237\u8ba4\u8d2d\u8bb0\u5f55\r\n       mapping(address => userLp[]) userRecord;\r\n        //\u8ba4\u8d2d\u8bb0\u5f55\r\n       mapping(string => mapping(string => uint)) communityLpRecordList;\r\n\r\n        function _safeTransfer(address token, address to, uint value) private {\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'Pancake: TRANSFER_FAILED');\r\n        }\r\n\r\n       modifier isAdmin() {\r\n        require(msg.sender == admin, 'FORBIDDEN');\r\n        _;\r\n       }\r\n\r\n\r\n       function getCommunityAdmin (string memory _code) public view returns(communityLp memory){\r\n           return communityList[_code];\r\n       }\r\n\r\n        function extractWor(uint _value) external isAdmin{\r\n            uint b = IPancakePair(WOR).balanceOf(address(this));\r\n            require(b >= _value,\"Extraction failure\");\r\n             _safeTransfer(WOR,msg.sender,_value);\r\n       }\r\n\r\n        function extractUsdt(uint _value) external isAdmin{\r\n                uint b = IPancakePair(USDT).balanceOf(address(this));\r\n                require(b >= _value,\"Extraction failure\");\r\n                _safeTransfer(USDT,msg.sender,_value);\r\n        }\r\n\r\n        function updateDay(uint _day) public isAdmin {\r\n            day30 = _day;\r\n        }\r\n\r\n        function updatePrice(uint _price) public isAdmin {\r\n            price = _price;\r\n        }\r\n\r\n        function updateDaycount(uint _daycount) public isAdmin {\r\n            daycount = _daycount;\r\n        }\r\n\r\n        //\u83b7\u5f97\u8bb0\u5f55\r\n        function addressCommList() public view returns(userLp[] memory){\r\n            return  userRecord[msg.sender];\r\n        }\r\n\r\n        // \u6dfb\u52a0\u793e\u533a\r\n        function addCommunityAdmin(string memory _name,string memory _code,uint _value)  public isAdmin {\r\n                require(_utilCompareInternal(communityList[_code].name,\"\"),\"Community already exist\");\r\n                communityLp  memory com = communityLp(_name,_code,_value,0,block.timestamp);\r\n                communityList[_code] = com;\r\n        }\r\n\r\n        // \u9886\u53d6\r\n        function receiveAward() public {\r\n                userLp[] storage  u =   userRecord[msg.sender];\r\n                uint k;\r\n                for (uint i = 0; i < u.length; i ++) {\r\n                    uint day = block.timestamp.sub(u[i].date).div(86400);\r\n                    uint c =  day.div(day30) + daycount;\r\n                    uint z = u[i].valueStay.div(10).mul(c) - u[i].valueHas;\r\n                    u[i].valueHas = u[i].valueHas + z ;\r\n                    k += z;\r\n                } \r\n                require(k > 0,\"invalid\");\r\n                _safeTransfer(WOR,msg.sender,k);\r\n                emit ReceiveAward(msg.sender, userCommunity[msg.sender].name,k);\r\n        }\r\n\r\n        // \u8ba4\u8d2d\r\n        function rgWor(uint _value) public  {\r\n          communityLp memory com =  userCommunity[msg.sender];\r\n          require(!_utilCompareInternal(com.name,\"\"),\"address invalid\");\r\n          require(com.state == 0,\"community close\");\r\n          uint usdtNum =  _value.mul(price).div(10**18);\r\n          require(IPancakePair(USDT).balanceOf(msg.sender) >= usdtNum,\"USDT balance deficiency\");\r\n          (uint year, uint month, ) = _daysToDate(block.timestamp);\r\n          string memory codeBs =  strConcat(yearString[year],monthString[month]);\r\n          uint valueCom =  communityLpRecordList[com.code][codeBs];\r\n          require(com.value >= valueCom + _value ,\"lazy weight\");\r\n          communityLpRecordList[com.code][codeBs]  = valueCom + _value;\r\n          userLp memory _userLp =  userLp(block.timestamp,_value,0,price,com.name);\r\n          userRecord[msg.sender].push(_userLp);\r\n          IBEP20(USDT).transferFrom(msg.sender, JS_USDT, usdtNum);\r\n          emit RgWor(msg.sender,com.name,_value);\r\n        }\r\n\r\n\r\n       \r\n        function strConcat(string memory _a, string memory _b) internal pure returns (string memory){\r\n                bytes memory _ba = bytes(_a);\r\n                bytes memory _bb = bytes(_b);\r\n                string memory ret = new string(_ba.length + _bb.length);\r\n                bytes memory bret = bytes(ret);\r\n                uint k = 0;\r\n                for (uint i = 0; i < _ba.length; i++)\r\n                bret[k++] = _ba[i];\r\n                for (uint i = 0; i < _bb.length; i++) \r\n                bret[k++] = _bb[i];\r\n                return string(ret);\r\n        }  \r\n\r\n\r\n\r\n        function _dateCompare(uint _dateStart, uint _dateEnd) internal pure returns(uint){\r\n             (uint year, uint month, ) = _daysToDate(_dateStart);\r\n             (uint dyear, uint dmonth, ) = _daysToDate(_dateEnd);\r\n             uint c ;\r\n             if(month > dmonth){\r\n                c = month.sub(dmonth);\r\n             }else{\r\n                c = dmonth.sub(month);\r\n             }\r\n             c +=  dyear.sub(year).mul(12);\r\n            return c;\r\n        }\r\n\r\n        //\u7ed1\u5b9a\u793e\u533a\r\n        function bindingAddressCommunity(string memory _code) public  {\r\n              communityLp memory _addr = userCommunity[msg.sender];\r\n              require(_utilCompareInternal(_addr.name,\"\"),\"address bound\");\r\n              communityLp storage _communityLp = communityList[_code];\r\n              require(!_utilCompareInternal(_communityLp.name,\"\"),\"code invalid\");\r\n              userCommunity[msg.sender] = _communityLp;\r\n              emit BindingAddressCommunity(msg.sender, _code,_communityLp.name);\r\n        }\r\n\r\n        //\u68c0\u6d4b\u662f\u5426\u7ed1\u5b9a false \u548c true\r\n        function examineAddressCommunity() public view returns(bool) {\r\n              return !_utilCompareInternal(userCommunity[msg.sender].name,\"\");\r\n        }\r\n\r\n        // \u83b7\u5f97\u793e\u533a\u6570\u636e\r\n        function getCommunity() public view returns(uint,uint,string memory) {\r\n             communityLp memory  com =  userCommunity[msg.sender];\r\n             (uint year, uint month, ) = _daysToDate(block.timestamp);\r\n             string memory codeBs =  strConcat(yearString[year],monthString[month]);\r\n             uint valueCom =  communityLpRecordList[com.code][codeBs];\r\n             return (price,com.value.sub(valueCom),com.name) ;\r\n        }\r\n\r\n\r\n\r\n        //\u83b7\u5f97address \u8ba4\u8d2d\u6570\u636e\r\n        function getAddressCommunity() public view returns(uint,uint){\r\n                userLp[]  memory u =   userRecord[msg.sender];\r\n                uint k; // \u5df2\u91ca\u653e\r\n                uint s; //  \u5269\u4f59\u91ca\u653e\r\n                for (uint i = 0; i < u.length; i ++) {\r\n                    uint day = block.timestamp.sub(u[i].date).div(86400);\r\n                    uint c =  day.div(day30) + daycount;\r\n                    k += u[i].valueStay.div(10).mul(c) - u[i].valueHas;\r\n                    s += u[i].valueStay - u[i].valueStay.div(10).mul(c);\r\n                } \r\n                return (k,s);\r\n        }\r\n\r\n\r\n        function _utilCompareInternal(string memory a, string memory b)  private pure returns (bool) {\r\n            if (bytes(a).length != bytes(b).length) {\r\n                return false;\r\n            }\r\n            for (uint i = 0; i < bytes(a).length; i ++) {\r\n                if(bytes(a)[i] != bytes(b)[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    \r\n            //\u65f6\u95f4\u6233\u8f6c\u65e5\u671f\uff0cUTC\u65f6\u533a\r\n        function _daysToDate(uint timestamp) private pure returns (uint year, uint month, uint day) {\r\n            uint _days = uint(timestamp) / SECONDS_PER_DAY;\r\n    \r\n            uint L = _days + 68569 + OFFSET19700101;\r\n            uint N = 4 * L / 146097;\r\n            L = L - (146097 * N + 3) / 4;\r\n            year = 4000 * (L + 1) / 1461001;\r\n            L = L - 1461 * year / 4 + 31;\r\n            month = 80 * L / 2447;\r\n            day = L - 2447 * month / 80;\r\n            L = month / 11;\r\n            month = month + 2 - 12 * L;\r\n            year = 100 * (N - 49) + year + L;\r\n        }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"BindingAddressCommunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"ReceiveAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"RgWor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JS_USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_WOR_PAIR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressCommList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueStay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueHas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct userLp[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"bindingAddressCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"day30\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daycount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"examineAddressCommunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extractUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extractWor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressCommunity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"getCommunityAdmin\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct communityLp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rgWor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"updateDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daycount\",\"type\":\"uint256\"}],\"name\":\"updateDaycount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "worRg", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d443044b028622426adda3d54ad8a348904be6874db6df41ef978c064977fcfd"}