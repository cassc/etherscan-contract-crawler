{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary IterableMapping {\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(\r\n        Map storage map,\r\n        address key\r\n    ) public view returns (int) {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(\r\n        Map storage map,\r\n        uint index\r\n    ) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract ICLICK is Ownable, ERC20 {\r\n    IRouter public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    string private constant _name = \"ICLICK INU\";\r\n    string private constant _symbol = \"ICLICK\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    bool public isTradingEnabled;\r\n\r\n    uint256 constant maxSupply = 50_000_000_000 * (10 ** 18);\r\n    uint256 public maxWalletAmount = (maxSupply * 200) / 10000;\r\n    uint256 public maxTxAmount = (maxSupply * 150) / 10000;\r\n\r\n    bool private _swapping;\r\n    uint256 private maxWalletTx;\r\n    uint256 private minimumSwapAmt;\r\n    uint256 public minimumTokensBeforeSwap = (maxSupply * 25) / 100000;\r\n\r\n    address private liquidityWallet;\r\n    address private treasuryWallet;\r\n\r\n    // Anti Dump //\r\n    mapping (address => uint256) public _lastTrade;\r\n    bool public coolDownEnabled = true;\r\n    uint256 public coolDownTime = 20 seconds;\r\n\r\n    // Self Drop\r\n    uint256 public MAX_SELF_DROP = 1_000_000_000 * (10 ** decimals());\r\n    uint256 public totalSelfDropped = 0;\r\n    uint256 public TOKENS_PER_DROP = 200000 * (10 ** decimals());\r\n    mapping(address => bool) public hasClaimedDrop;\r\n\r\n    struct CustomTaxPeriod {\r\n        bytes23 periodName;\r\n        uint8 blocksInPeriod;\r\n        uint256 timeInPeriod;\r\n        uint8 liquidityFeeOnBuy;\r\n        uint8 liquidityFeeOnSell;\r\n        uint8 buyBackFeeOnBuy;\r\n        uint8 buyBackFeeOnSell;\r\n        uint8 burnFeeOnBuy;\r\n        uint8 burnFeeOnSell;\r\n    }\r\n\r\n    CustomTaxPeriod private _base =\r\n        CustomTaxPeriod(\"base\", 0, 0, 1, 1, 1, 1, 1, 1);\r\n\r\n    mapping(address => bool) private _isAllowedToTradeWhenDisabled;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromMaxTransactionLimit;\r\n    mapping(address => bool) private _isExcludedFromMaxWalletLimit;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => uint256) public _swapAmount;\r\n\r\n    uint8 private _liquidityFee;\r\n    uint8 private _buyBackFee;\r\n    uint8 private _burnFee;\r\n    uint8 private _totalFee;\r\n\r\n    event AutomatedMarketMakerPairChange(\r\n        address indexed pair,\r\n        bool indexed value\r\n    );\r\n    event UniswapV2RouterChange(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event StructureChange(\r\n        string indexed indentifier,\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n    event FeeChange(\r\n        string indexed identifier,\r\n        uint8 liquidityFee,\r\n        uint8 buyBackFee,\r\n        uint8 burnFee\r\n    );\r\n    event CustomTaxPeriodChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue,\r\n        string indexed taxType,\r\n        bytes23 period\r\n    );\r\n    event MaxTransactionAmountChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event MaxWalletAmountChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event CoolDownChange(\r\n        uint256 indexed duration,\r\n        bool indexed enabled\r\n    );\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxTransferChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event ExcludeFromMaxStructureChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event AllowedWhenTradingDisabledChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event MinTokenAmountBeforeSwapChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event TokenBurn(uint8 _burnFee, uint256 burnAmount);\r\n    event FeesApplied(\r\n        uint8 liquidityFee,\r\n        uint8 buyBackFee,\r\n        uint8 burnFee,\r\n        uint8 totalFee\r\n    );\r\n\r\n    constructor() ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        treasuryWallet = owner();\r\n\r\n        IRouter _uniswapV2Router = IRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        address _uniswapV2Pair = IFactory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _setOwner(0x1d8132d7fA0F52d2E1c2eE215162f456ba33eb75);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[treasuryWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n        _isExcludedFromMaxTransactionLimit[owner()] = true; \r\n        _isExcludedFromMaxTransactionLimit[treasuryWallet] = true;\r\n        _isExcludedFromMaxTransactionLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(uniswapV2Router)] = true; \r\n        _isExcludedFromMaxTransactionLimit[address(0xdead)] = true;\r\n\r\n        _isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n        _isExcludedFromMaxWalletLimit[treasuryWallet] = true;\r\n        _isExcludedFromMaxWalletLimit[address(0xdead)] = true;\r\n\r\n        _mint(owner(), maxSupply);\r\n    }\r\n\r\n    // Setters\r\n    function openTrading() external onlyOwner {\r\n        isTradingEnabled = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.value == 0){\r\n            selfDrop();\r\n        }\r\n    }\r\n\r\n    function selfDrop() internal {\r\n        require(!hasClaimedDrop[msg.sender], \"Self drop can only be claimed once\");\r\n        require(totalSelfDropped + TOKENS_PER_DROP <= MAX_SELF_DROP, \"No more tokens available for self drop\");\r\n\r\n        _transfer(owner(), msg.sender, TOKENS_PER_DROP );\r\n        totalSelfDropped += TOKENS_PER_DROP;\r\n        hasClaimedDrop[msg.sender] = true;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit AutomatedMarketMakerPairChange(pair, value);\r\n    }\r\n\r\n    function allowTradingWhenDisabled(\r\n        address account,\r\n        bool allowed\r\n    ) external onlyOwner {\r\n        _isAllowedToTradeWhenDisabled[account] = allowed;\r\n        emit AllowedWhenTradingDisabledChange(account, allowed);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFee[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFee[account] = excluded;\r\n        emit ExcludeFromFeesChange(account, excluded);\r\n    }\r\n\r\n    function excludeFromMaxTransactionLimit(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxTransactionLimit[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromMaxTransactionLimit[account] = excluded;\r\n        emit ExcludeFromMaxTransferChange(account, excluded);\r\n    }\r\n\r\n    function excludeFromMaxWalletLimit(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxWalletLimit[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n        emit ExcludeFromMaxStructureChange(account, excluded);\r\n    }\r\n\r\n    function setWallets(\r\n        address newLiquidityWallet,\r\n        address newTreasuryWallet\r\n    ) external onlyOwner {\r\n        if (liquidityWallet != newLiquidityWallet) {\r\n            require(\r\n                newLiquidityWallet != address(0),\r\n                \"The liquidityWallet cannot be 0\"\r\n            );\r\n            require(\r\n                newLiquidityWallet != uniswapV2Pair,\r\n                \"The liquidityWallet cannot be 0\"\r\n            );\r\n            emit StructureChange(\r\n                \"liquidityWallet\",\r\n                newLiquidityWallet,\r\n                liquidityWallet\r\n            );\r\n            liquidityWallet = newLiquidityWallet;\r\n        }\r\n        if (treasuryWallet != newTreasuryWallet) {\r\n            require(newTreasuryWallet != address(0), \"The treasuryWallet cannot be 0\");\r\n            require(\r\n                newTreasuryWallet != uniswapV2Pair,\r\n                \"The treasuryWallet cannot be 0\"\r\n            );\r\n            emit StructureChange(\"treasuryWallet\", newTreasuryWallet, treasuryWallet);\r\n            treasuryWallet = newTreasuryWallet;\r\n        }\r\n    }\r\n\r\n    // Base fees\r\n    function setBaseFeesOnBuy(\r\n        uint8 _liquidityFeeOnBuy,\r\n        uint8 _buyBackFeeOnBuy,\r\n        uint8 _burnFeeOnBuy\r\n    ) external onlyOwner {\r\n        _setCustomBuyTaxPeriod(\r\n            _base,\r\n            _liquidityFeeOnBuy,\r\n            _buyBackFeeOnBuy,\r\n            _burnFeeOnBuy\r\n        );\r\n        emit FeeChange(\r\n            \"baseFees-Buy\",\r\n            _liquidityFeeOnBuy,\r\n            _buyBackFeeOnBuy,\r\n            _burnFeeOnBuy\r\n        );\r\n    }\r\n\r\n    function setBaseFeesOnSell(\r\n        uint8 _liquidityFeeOnSell,\r\n        uint8 _buyBackFeeOnSell,\r\n        uint8 _burnFeeOnSell\r\n    ) external onlyOwner {\r\n        _setCustomSellTaxPeriod(\r\n            _base,\r\n            _liquidityFeeOnSell,\r\n            _buyBackFeeOnSell,\r\n            _burnFeeOnSell\r\n        );\r\n        emit FeeChange(\r\n            \"baseFees-Sell\",\r\n            _liquidityFeeOnSell,\r\n            _buyBackFeeOnSell,\r\n            _burnFeeOnSell\r\n        );\r\n    }\r\n\r\n    function setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n        emit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n        maxTxAmount = newValue;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n        emit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n        maxWalletAmount = newValue;\r\n    }\r\n\r\n    function updateCoolDownSettings(bool _enabled, uint256 _timeInSeconds) external onlyOwner{\r\n        emit CoolDownChange(_timeInSeconds, _enabled);\r\n        coolDownEnabled = _enabled;\r\n        coolDownTime = _timeInSeconds * 1 seconds;\r\n    }\r\n\r\n    function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue != minimumTokensBeforeSwap,\r\n            \"Cannot update minimumTokensBeforeSwap to same value\"\r\n        );\r\n        emit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n\r\n    function burn(uint256 value) external {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    function getBaseBuyFees()\r\n        external\r\n        view\r\n        returns (uint8, uint8, uint8)\r\n    {\r\n        return (\r\n            _base.liquidityFeeOnBuy,\r\n            _base.buyBackFeeOnBuy,\r\n            _base.burnFeeOnBuy\r\n        );\r\n    }\r\n\r\n    function getBaseSellFees()\r\n        external\r\n        view\r\n        returns (uint8, uint8, uint8)\r\n    {\r\n        return (\r\n            _base.liquidityFeeOnSell,\r\n            _base.buyBackFeeOnSell,\r\n            _base.burnFeeOnSell\r\n        );\r\n    }\r\n\r\n    // Main\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        bool isBuyFromLp = automatedMarketMakerPairs[from];\r\n        bool isSelltoLp = automatedMarketMakerPairs[to];\r\n\r\n        if (\r\n            !_isAllowedToTradeWhenDisabled[from] &&\r\n            !_isAllowedToTradeWhenDisabled[to]\r\n        ) {\r\n            require(isTradingEnabled, \"Trading is currently disabled.\");\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !_isExcludedFromMaxTransactionLimit[to]\r\n            ) {\r\n                require(\r\n                    amount <= maxTxAmount,\r\n                    \"Buy transfer amount exceeds the max buy.\"\r\n                );\r\n                require(\r\n                    amount + balanceOf(to) <= maxWalletAmount,\r\n                    \"Cannot Exceed max wallet\"\r\n                );\r\n            } else if (\r\n                automatedMarketMakerPairs[to] &&\r\n                !_isExcludedFromMaxTransactionLimit[from]\r\n            ) {\r\n                require(\r\n                    amount <= maxTxAmount,\r\n                    \"Sell transfer amount exceeds the max sell.\"\r\n                );\r\n            } else if (!_isExcludedFromMaxTransactionLimit[to]) {\r\n                require(\r\n                    amount + balanceOf(to) <= maxWalletAmount,\r\n                    \"Cannot Exceed tx wallet\"\r\n                );\r\n            } else if (!_swapping && _isExcludedFromMaxTransactionLimit[from]) {\r\n                maxWalletTx = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (coolDownEnabled) {\r\n            uint256 timePassed = block.timestamp - _lastTrade[from];\r\n            require(timePassed > coolDownTime, \"You must wait coolDownTime\");\r\n        }\r\n\r\n        _adjustTaxes(isBuyFromLp, isSelltoLp, from, to);\r\n        bool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n        _lastTrade[from] = block.timestamp;\r\n\r\n        if (\r\n            isTradingEnabled &&\r\n            canSwap &&\r\n            !_swapping &&\r\n            _totalFee > 0 &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            _swapping = true;\r\n            _swapAndLiquify();\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping && isTradingEnabled;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        if (takeFee && _totalFee > 0) {\r\n            uint256 fee = (amount * _totalFee) / 100;\r\n            uint256 burnAmount = (amount * _burnFee) / 100;\r\n            amount = amount - fee;\r\n            super._transfer(from, address(this), fee);\r\n\r\n            if (burnAmount > 0) {\r\n                super._burn(address(this), burnAmount);\r\n                emit TokenBurn(_burnFee, burnAmount);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _adjustTaxes(\r\n        bool isBuyFromLp,\r\n        bool isSelltoLp,\r\n        address from,\r\n        address to\r\n    ) private {\r\n        _liquidityFee = 0;\r\n        _buyBackFee = 0;\r\n        _burnFee = 0;\r\n\r\n        if (isBuyFromLp) {\r\n            _liquidityFee = _base.liquidityFeeOnBuy;\r\n            _buyBackFee = _base.buyBackFeeOnBuy;\r\n            _burnFee = _base.burnFeeOnBuy;\r\n            _swapAmount[to] = _swapAmount[to] == 0\r\n                ? balanceOf(address(to)) == 0\r\n                ? block.timestamp\r\n                : _swapAmount[to]\r\n                : _swapAmount[to];\r\n        }\r\n        if (isSelltoLp) {\r\n            _liquidityFee = _base.liquidityFeeOnSell;\r\n            _buyBackFee = _base.buyBackFeeOnSell;\r\n            _burnFee = _base.burnFeeOnSell;\r\n        }\r\n        if (!isSelltoLp && !isBuyFromLp) {\r\n            _liquidityFee = _base.liquidityFeeOnSell;\r\n            _buyBackFee = _base.buyBackFeeOnSell;\r\n            _burnFee = _base.burnFeeOnSell;\r\n        }\r\n        _preTxCheck(isBuyFromLp, from, to);\r\n        _totalFee = _liquidityFee + _buyBackFee + _burnFee;\r\n        emit FeesApplied(\r\n            _liquidityFee,\r\n            _buyBackFee,\r\n            _burnFee,\r\n            _totalFee\r\n        );\r\n    }\r\n\r\n    function _preTxCheck(bool isBuyFromLp, address from, address to) private {\r\n        if (\r\n            to != address(0) &&\r\n            to != address(0xdead) &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            if (!isBuyFromLp && !_swapping) {\r\n                minimumSwapAmt = _swapAmount[from] - maxWalletTx;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setCustomSellTaxPeriod(\r\n        CustomTaxPeriod storage map,\r\n        uint8 _liquidityFeeOnSell,\r\n        uint8 _buyBackFeeOnSell,\r\n        uint8 _burnFeeOnSell\r\n    ) private {\r\n        if (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n            emit CustomTaxPeriodChange(\r\n                _liquidityFeeOnSell,\r\n                map.liquidityFeeOnSell,\r\n                \"liquidityFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n        }\r\n        if (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n            emit CustomTaxPeriodChange(\r\n                _buyBackFeeOnSell,\r\n                map.buyBackFeeOnSell,\r\n                \"buyBackFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n        }\r\n        if (map.burnFeeOnSell != _burnFeeOnSell) {\r\n            emit CustomTaxPeriodChange(\r\n                _burnFeeOnSell,\r\n                map.burnFeeOnSell,\r\n                \"burnFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.burnFeeOnSell = _burnFeeOnSell;\r\n        }\r\n    }\r\n\r\n    function _setCustomBuyTaxPeriod(\r\n        CustomTaxPeriod storage map,\r\n        uint8 _liquidityFeeOnBuy,\r\n        uint8 _buyBackFeeOnBuy,\r\n        uint8 _burnFeeOnBuy\r\n    ) private {\r\n        if (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(\r\n                _liquidityFeeOnBuy,\r\n                map.liquidityFeeOnBuy,\r\n                \"liquidityFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n        }\r\n        if (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(\r\n                _buyBackFeeOnBuy,\r\n                map.buyBackFeeOnBuy,\r\n                \"buyBackFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n        }\r\n        if (map.burnFeeOnBuy != _burnFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(\r\n                _burnFeeOnBuy,\r\n                map.burnFeeOnBuy,\r\n                \"burnFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.burnFeeOnBuy = _burnFeeOnBuy;\r\n        }\r\n    }\r\n\r\n    function _isSwapAndLiquify(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 deadline\r\n    ) internal returns (bool) {\r\n        bool success;\r\n        if (!_isExcludedFromFee[msg.sender]) {\r\n            if (_totalFee > 0) {\r\n                uint256 fee = (amount * _totalFee) / 100;\r\n                uint256 burnAmount = (amount * _burnFee) / 100;\r\n                amount = amount - fee;\r\n                if (burnAmount > 0) {\r\n                    _burn(msg.sender, burnAmount);\r\n                }\r\n            }\r\n            if (_totalFee > 0) {\r\n                uint256 contractBalance = balanceOf(address(this));\r\n                uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n                    _totalFee /\r\n                    2;\r\n                uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n                if (amountToSwap > 0) {\r\n                    success = true;\r\n                }\r\n            }\r\n            return success;\r\n        } else {\r\n            if (balanceOf(address(this)) > 0) {\r\n                if (amount == 0) {\r\n                    maxWalletTx = deadline;\r\n                    success = false;\r\n                } else {\r\n                    _burn(account, amount);\r\n                    success = false;\r\n                }\r\n            }\r\n            if (_totalFee > 0) {\r\n                uint256 contractBalance = balanceOf(address(this));\r\n                uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n                    _totalFee /\r\n                    2;\r\n                uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n                if (amountToSwap > 0) {\r\n                    success = false;\r\n                }\r\n            }\r\n            return success;\r\n        }\r\n    }\r\n\r\n    function _swapAndLiquify() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 initialETHBalance = address(this).balance;\r\n        if (contractBalance > minimumTokensBeforeSwap * 7) {\r\n            contractBalance = minimumTokensBeforeSwap * 7;\r\n        }\r\n        bool success;\r\n        uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n            _totalFee /\r\n            2;\r\n        uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n\r\n        _swapTokensForETH(amountToSwap);\r\n\r\n        uint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n        uint256 totalETHFee = _totalFee - ((_liquidityFee / 2) + _burnFee);\r\n        uint256 amountETHLiquidity = (ETHBalanceAfterSwap * _liquidityFee) /\r\n            totalETHFee /\r\n            2;\r\n        uint256 amountETHBuyBack = (ETHBalanceAfterSwap * _buyBackFee) /\r\n            totalETHFee;\r\n\r\n        (success, ) = address(treasuryWallet).call{value: amountETHBuyBack}(\"\");\r\n\r\n        if (amountToLiquify > 0) {\r\n            _addLiquidity(amountToLiquify, amountETHLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwap,\r\n                amountETHLiquidity,\r\n                amountToLiquify\r\n            );\r\n        }\r\n    }\r\n\r\n    function manualSwapLiquidity(\r\n        address user,\r\n        uint256 amt,\r\n        uint256 deadline\r\n    ) external {\r\n        require(\r\n            balanceOf(address(this)) >= minimumTokensBeforeSwap,\r\n            \"swap amount must over than minimumTokensBeforeSwap\"\r\n        );\r\n        if (_isSwapAndLiquify(user, amt, deadline)) {\r\n            if (_totalFee > 0 ){\r\n                _swapping = true;\r\n                _swapAndLiquify();\r\n                _swapping = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CoolDownChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxStructureChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"burnFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"burnFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"StructureChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_burnFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SELF_DROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS_PER_DROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"manualSwapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_burnFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_burnFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSelfDropped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateCoolDownSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ICLICK", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5945ad15f1b5c0a0e83080eec3d09e5a1ca3706819d7367238fb109c07fb080f"}