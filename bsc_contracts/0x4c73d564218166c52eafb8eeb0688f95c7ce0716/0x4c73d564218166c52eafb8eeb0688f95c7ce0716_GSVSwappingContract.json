{"SourceCode": "/*\r\nWebsite Link : https://galaxyswap.io/\r\nRe Publish Date : 29 Dec 2022\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract SafeMath {\r\n    /*Addition*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /*Subtraction*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /*Multiplication*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /*Divison*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    /* Modulus */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 { \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint amount ) external returns (bool);\r\n    function decimals() external returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract GSVSwappingContract is SafeMath {\r\n\r\n    address payable private primaryAdmin;\r\n    IERC20 private SwapToken;\r\n    IERC20 private NativeToken;\r\n    uint private SwapTokenDecimals;\r\n    uint256 public GSWSwappingRate;\r\n    uint private NativeTokenDecimals;\r\n\r\n    constructor() {\r\n        address payable msgSender = payable(0x6A321b3C76a51Ed58D41461B6047f54e895D765F);\r\n        primaryAdmin = msgSender;\r\n        SwapToken = IERC20(0xbB071C120Bb5eca705f5fC574f4d774d2f639e92);\r\n        SwapTokenDecimals=18;\r\n        NativeToken = IERC20(0xD4EaE71cA3C67bbac87962b0a90D81984285997f);\r\n        NativeTokenDecimals=18;\r\n\t}\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return primaryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the swap token contract address.\r\n     */\r\n    function swapTokenContractAddress() public view returns (IERC20) {\r\n        return SwapToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the native token contract address.\r\n     */\r\n    function nativeTokenContractAddress() public view returns (IERC20) {\r\n        return NativeToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(primaryAdmin == payable(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(primaryAdmin, address(0));\r\n        primaryAdmin = payable(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(primaryAdmin, newOwner);\r\n        primaryAdmin = newOwner;\r\n    }\r\n\r\n\r\n    struct UserSwapDetails {\r\n        uint256 amountSwapToken;\r\n        uint256 amountNativeToken;\r\n        uint lastUpdatedUTCDateTime;\r\n\t}\r\n\r\n    mapping (address => UserSwapDetails) public UserSwapdetails;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function updateNativeTokenContractAddress(IERC20 _NativeTokenContract,uint _NativeTokenDecimals) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        NativeToken=_NativeTokenContract;\r\n        NativeTokenDecimals=_NativeTokenDecimals;\r\n    }\r\n\r\n    function updateSwapTokenContractAddress(IERC20 _SwapTokenContract,uint _SwapTokenDecimals) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');   \r\n        SwapToken=_SwapTokenContract;\r\n        SwapTokenDecimals=_SwapTokenDecimals;\r\n    }\r\n\r\n    function updateGSWRate(uint256 _GSWSwappingRate) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');   \r\n        GSWSwappingRate=_GSWSwappingRate;\r\n    }\r\n\r\n    function Swap(uint256 _SwapToken) public returns (bool) {\r\n        UserSwapDetails storage userswapdetail = UserSwapdetails[msg.sender];\r\n        uint256 ActualToken=getEstimatedGSV(_SwapToken);\r\n        userswapdetail.amountSwapToken += _SwapToken;\r\n        userswapdetail.amountNativeToken += ActualToken;\r\n        userswapdetail.lastUpdatedUTCDateTime = view_GetCurrentTimeStamp();\r\n        SwapToken.transferFrom(msg.sender, address(this), _SwapToken);\r\n        NativeToken.transfer(msg.sender, ActualToken);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Estimated Swap Token For Buy Native Token\r\n    */\r\n    function getEstimatedGSV(uint256 _GSWToken) public view returns(uint256 _tokenPrice) {\r\n        if (_GSWToken == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 SwapTokenWorth = _GSWToken * GSWSwappingRate;\r\n            assert(SwapTokenWorth / _GSWToken == GSWSwappingRate);\r\n            return (SwapTokenWorth / (uint256(10) ** SwapTokenDecimals));\r\n        }\r\n    }\r\n\r\n    //Reverse Token That Admin Puten on Smart Contract\r\n    function _reverseSwapToken(uint256 _SwapToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        SwapToken.transfer(primaryAdmin, _SwapToken);\r\n    }\r\n\r\n    //Revese Token That Admin Puten on Smart Contract\r\n    function _reverseNativeToken(uint256 _NativeToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        NativeToken.transfer(primaryAdmin, _NativeToken);\r\n    }\r\n\r\n    //View Get Current Time Stamp\r\n    function view_GetCurrentTimeStamp() public view returns(uint _timestamp){\r\n       return (block.timestamp);\r\n    }   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GSWSwappingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SwapToken\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserSwapdetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSwapToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedUTCDateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"_reverseNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SwapToken\",\"type\":\"uint256\"}],\"name\":\"_reverseSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_GSWToken\",\"type\":\"uint256\"}],\"name\":\"getEstimatedGSV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_GSWSwappingRate\",\"type\":\"uint256\"}],\"name\":\"updateGSWRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_NativeTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NativeTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"updateNativeTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_SwapTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_SwapTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"view_GetCurrentTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GSVSwappingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92206bea060b54f666c14936f6477e5885e5afde60db140889b8cf3b225cdefb"}