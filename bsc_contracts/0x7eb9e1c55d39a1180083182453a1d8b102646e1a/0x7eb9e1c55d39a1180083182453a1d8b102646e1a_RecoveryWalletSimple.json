{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\r\\n\\r\\ninterface IForwarder is IERC165 {\\r\\n  /**\\r\\n   * Sets the autoflush721 parameter.\\r\\n   *\\r\\n   * @param autoFlush whether to autoflush erc721 tokens\\r\\n   */\\r\\n  function setAutoFlush721(bool autoFlush) external;\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush1155 parameter.\\r\\n   *\\r\\n   * @param autoFlush whether to autoflush erc1155 tokens\\r\\n   */\\r\\n  function setAutoFlush1155(bool autoFlush) external;\\r\\n\\r\\n  /**\\r\\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushTokens(address tokenContractAddress) external;\\r\\n\\r\\n  /**\\r\\n   * Execute a nft transfer from the forwarder to the parent address\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC721 NFT contract\\r\\n   * @param tokenId The token id of the nft\\r\\n   */\\r\\n  function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\r\\n    external;\\r\\n\\r\\n  /**\\r\\n   * Execute a nft transfer from the forwarder to the parent address.\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\r\\n   * @param tokenId The token id of the nft\\r\\n   */\\r\\n  function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\r\\n    external;\\r\\n\\r\\n  /**\\r\\n   * Execute a batch nft transfer from the forwarder to the parent address.\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\r\\n   * @param tokenIds The token ids of the nfts\\r\\n   */\\r\\n  function batchFlushERC1155Tokens(\\r\\n    address tokenContractAddress,\\r\\n    uint256[] calldata tokenIds\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/recoveryContracts/RecoveryWalletSimple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity 0.8.20;\\r\\nimport '../IForwarder.sol';\\r\\n\\r\\n/** ERC721, ERC1155 imports */\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol';\\r\\n\\r\\n/**\\r\\n *\\r\\n * RecoveryWallet\\r\\n * ============\\r\\n *\\r\\n * Basic singleSig wallet designed to recover funds.\\r\\n *\\r\\n */\\r\\ncontract RecoveryWalletSimple is IERC721Receiver, ERC1155Receiver {\\r\\n  // Public fields\\r\\n  address public signer;\\r\\n  bool public initialized = false; // True if the contract has been initialized\\r\\n\\r\\n  function init(address _signer) external onlyUninitialized {\\r\\n    signer = _signer;\\r\\n    initialized = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Modifier that will execute internal code block only if the sender is an authorized signer on this wallet\\r\\n   */\\r\\n  modifier onlySigner() {\\r\\n    require(signer == msg.sender, 'Non-signer in onlySigner method');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Modifier that will execute internal code block only if the contract has not been initialized yet\\r\\n   */\\r\\n  modifier onlyUninitialized() {\\r\\n    require(!initialized, 'Contract already initialized');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets called when a transaction is received with data that does not match any other method\\r\\n   */\\r\\n  fallback() external payable {}\\r\\n\\r\\n  /**\\r\\n   * Gets called when a transaction is received with ether and no data\\r\\n   */\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n   * Execute a transaction from this wallet using the signer.\\r\\n   *\\r\\n   * @param toAddress the destination address to send an outgoing transaction\\r\\n   * @param value the amount in Wei to be sent\\r\\n   * @param data the data to send to the toAddress when invoking the transaction\\r\\n   */\\r\\n  function sendFunds(\\r\\n    address toAddress,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external onlySigner {\\r\\n    // Success, send the transaction\\r\\n    (bool success, ) = toAddress.call{ value: value }(data);\\r\\n    require(success, 'Call execution failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a token flush from one of the forwarder addresses. This transfer can be done by any external address\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress\\r\\n  ) external {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushTokens(tokenContractAddress);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC721 token flush from one of the forwarder addresses. This transfer can be done by any external address\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushERC721ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256 tokenId\\r\\n  ) external {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushERC721Token(tokenContractAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC1155 batch token flush from one of the forwarder addresses.\\r\\n   * This transfer can be done by any external address.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc1155 token contract\\r\\n   */\\r\\n  function batchFlushERC1155ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256[] calldata tokenIds\\r\\n  ) external {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.batchFlushERC1155Tokens(tokenContractAddress, tokenIds);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC1155 token flush from one of the forwarder addresses.\\r\\n   * This transfer can be done by any external address.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc1155 token contract\\r\\n   * @param tokenId the token id associated with the ERC1155\\r\\n   */\\r\\n  function flushERC1155ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256 tokenId\\r\\n  ) external {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushERC1155Tokens(tokenContractAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush 721 parameter on the forwarder.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder to toggle.\\r\\n   * @param autoFlush whether to autoflush erc721 tokens\\r\\n   */\\r\\n  function setAutoFlush721(address forwarderAddress, bool autoFlush)\\r\\n    external\\r\\n    onlySigner\\r\\n  {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.setAutoFlush721(autoFlush);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush 721 parameter on the forwarder.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder to toggle.\\r\\n   * @param autoFlush whether to autoflush erc1155 tokens\\r\\n   */\\r\\n  function setAutoFlush1155(address forwarderAddress, bool autoFlush)\\r\\n    external\\r\\n    onlySigner\\r\\n  {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.setAutoFlush1155(autoFlush);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * ERC721 standard callback function for when a ERC721 is transfered.\\r\\n   *\\r\\n   * @param _operator The address of the nft contract\\r\\n   * @param _from The address of the sender\\r\\n   * @param _tokenId The token id of the nft\\r\\n   * @param _data Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function onERC721Received(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256 _tokenId,\\r\\n    bytes memory _data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC721Received.selector;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc IERC1155Receiver\\r\\n   */\\r\\n  function onERC1155Received(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256 id,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC1155Received.selector;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc IERC1155Receiver\\r\\n   */\\r\\n  function onERC1155BatchReceived(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256[] calldata ids,\\r\\n    uint256[] calldata values,\\r\\n    bytes calldata data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC1155BatchReceived.selector;\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFlushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC721ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RecoveryWalletSimple", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}