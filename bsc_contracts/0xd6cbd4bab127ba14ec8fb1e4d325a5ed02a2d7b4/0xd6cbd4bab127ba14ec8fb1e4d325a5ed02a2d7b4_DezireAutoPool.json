{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeBEP20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface Dezirereferal {\r\n    function users(address _user) external pure returns (bool isExist);\r\n}\r\n\r\ncontract DezireAutoPool is Initializable, OwnableUpgradeable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    event joinPoolEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _amount\r\n    );\r\n    event reJoinPoolEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _amount\r\n    );\r\n    event claimEvent(address indexed _user, uint256 _reward);\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        address parentAddress;\r\n        uint256 advanceTopup;\r\n        uint256 retopUpReceived;\r\n        uint256 topupCount;\r\n        uint256 claimable;\r\n        uint256 rewardCount;\r\n        uint256 totalClaimed;\r\n        bool isComplete;\r\n        uint256 totalTopup;\r\n        uint256 usedTopup;\r\n    }\r\n\r\n    mapping(address => UserStruct) public users;\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currUserID;\r\n    uint256 public totalUsers;\r\n    address public ownerWallet;\r\n    uint256 public joinAmount;\r\n    uint256 public distribution;\r\n    address[] public AutoPoolAddress;\r\n    uint256 public reJoinAmount;\r\n\r\n    IBEP20 public USDTAddress;\r\n    Dezirereferal public Dezireref;\r\n    mapping(address => uint256) public lastClaimed;\r\n    IBEP20 public QBTAddress;\r\n\r\n    mapping(address => bool) public autoPoolReached;\r\n    bool public isPause;\r\n    uint256 public tokenPrice;\r\n    uint256 public claimFee;\r\n    uint256 public minimumwithdraw;\r\n\r\n    uint256 public withdrawtime;\r\n\r\n    function initialize(\r\n        address _owner,\r\n        IBEP20 _usdttoken,\r\n        IBEP20 _qbttoken,\r\n        Dezirereferal dezirereferal\r\n    ) public initializer {\r\n        __Ownable_init();\r\n        Dezireref = Dezirereferal(dezirereferal);\r\n        ownerWallet = _owner;\r\n        USDTAddress = _usdttoken;\r\n        QBTAddress = _qbttoken;\r\n        currUserID = 1;\r\n        totalUsers = 1;\r\n        joinAmount = 15 * 1e18;\r\n        distribution = 2500000000000000000;\r\n        reJoinAmount = 15 * 1e18;\r\n        tokenPrice = 550; //0.00055*1e6\r\n        claimFee = 500000000000000000; //0.5$\r\n        minimumwithdraw = 25 * 1e18;\r\n        UserStruct memory userStruct;\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            parentAddress: address(0),\r\n            advanceTopup: 0,\r\n            topupCount: 0,\r\n            retopUpReceived: 0,\r\n            claimable: 0,\r\n            rewardCount: 0,\r\n            totalClaimed: 0,\r\n            isComplete: false,\r\n            totalTopup: 0,\r\n            usedTopup: 0\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n        isPause = true;\r\n    }\r\n\r\n    function joinPool(uint256 _amount) public {\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        require(isPause, \"Paused, Please wait\");\r\n        require(viewUserExits(msg.sender) == true, \"Invalid user\");\r\n        require(_amount == joinAmount, \"Incorrect Value\");\r\n        address _parentAddress = userList[currUserID];\r\n        currUserID++;\r\n        UserStruct memory userStruct;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            parentAddress: _parentAddress,\r\n            advanceTopup: 0,\r\n            retopUpReceived: 0,\r\n            topupCount: 0,\r\n            claimable: 0,\r\n            rewardCount: 0,\r\n            totalClaimed: 0,\r\n            isComplete: false,\r\n            totalTopup: 0,\r\n            usedTopup: 0\r\n        });\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        USDTAddress.safeTransferFrom(msg.sender, address(this), _amount);\r\n        payForAutoPool(msg.sender, 1);\r\n        totalUsers++;\r\n    }\r\n\r\n    function payForAutoPool(address _parentaddress, uint256 loopcnt) internal {\r\n        address currAddress = _parentaddress;\r\n        uint256 currCount = loopcnt;\r\n        if (currCount <= 10) {\r\n            address _nextParent = users[currAddress].parentAddress;\r\n            if (_nextParent != address(0)) {\r\n                users[_nextParent].claimable += distribution;\r\n                if (currCount == 10) {\r\n                    if (users[_nextParent].advanceTopup >= joinAmount) {\r\n                        retopupUser(_nextParent);\r\n                    } else {\r\n                        users[_nextParent].isComplete = true;\r\n                    }\r\n                } else {\r\n                    currCount++;\r\n                    payForAutoPool(_nextParent, currCount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function retopupUser(address _user) internal {\r\n        users[_user].advanceTopup -= joinAmount;\r\n        users[_user].usedTopup += joinAmount;\r\n        users[_user].topupCount++;\r\n        payForPoolreTop(_user, 1);\r\n    }\r\n\r\n    function advanceTopup(uint256 _amount) public {\r\n        require(users[msg.sender].isExist, \"User not exist\");\r\n        require(isMultipleOf15(_amount), \"Not multiplication of 15\");\r\n        require(isPause, \"Paused, Please wait\");\r\n        users[msg.sender].advanceTopup += _amount;\r\n        users[msg.sender].totalTopup += _amount;\r\n        USDTAddress.safeTransferFrom(msg.sender, address(this), _amount);\r\n        if (users[msg.sender].isComplete) {\r\n            users[msg.sender].isComplete = false;\r\n            users[msg.sender].retopUpReceived = 0;\r\n            retopupUser(msg.sender);\r\n        }\r\n    }\r\n\r\n    function nextAvailableParent(address _addr) public view returns (address) {\r\n        address currentUser = users[_addr].parentAddress;\r\n        while (currentUser != address(0)) {\r\n            if (!users[currentUser].isComplete) {\r\n                return currentUser; // Condition is met for this user\r\n            }\r\n            currentUser = users[currentUser].parentAddress; // Move to the parent\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function payForPoolreTop(address _parentaddress, uint256 loopcnt) internal {\r\n        address currAddress = _parentaddress;\r\n        uint256 currCount = loopcnt;\r\n        if (currCount <= 10) {\r\n            address _nextAvailableParent = nextAvailableParent(currAddress);\r\n            if (_nextAvailableParent != address(0)) {\r\n                users[_nextAvailableParent].claimable += distribution;\r\n                users[_nextAvailableParent].retopUpReceived += distribution;\r\n                if (\r\n                    users[_nextAvailableParent].retopUpReceived >=\r\n                    distribution * 10\r\n                ) {\r\n                    users[_nextAvailableParent].isComplete = true;\r\n                }\r\n                currCount++;\r\n                payForPoolreTop(_nextAvailableParent, currCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimRewards() public {\r\n        require(isPause, \"Paused, Please wait\");\r\n        require(users[msg.sender].isExist, \"User exist\");\r\n        require(users[msg.sender].claimable > 0, \"Invalid claim\");\r\n        uint256 timeDiff = block.timestamp - lastClaimed[msg.sender];\r\n        require(timeDiff >= withdrawtime, \"WithDraw allow only once per hour\");\r\n        uint256 claimable = users[msg.sender].claimable;\r\n        require(claimable >= minimumwithdraw, \"Min withdraw is to low\");\r\n        USDTAddress.safeTransfer(msg.sender, claimable);\r\n        uint256 fee = getTokenFee();\r\n        QBTAddress.safeTransferFrom(msg.sender, address(this), fee);\r\n        if (users[msg.sender].retopUpReceived >= distribution * 10) {\r\n            if (users[msg.sender].advanceTopup >= joinAmount) {\r\n                users[msg.sender].retopUpReceived = 0;\r\n                users[msg.sender].isComplete = false;\r\n                retopupUser(msg.sender);\r\n            }\r\n        }\r\n        users[msg.sender].totalClaimed += claimable;\r\n        users[msg.sender].claimable = 0;\r\n        lastClaimed[msg.sender] = block.timestamp;\r\n        emit claimEvent(msg.sender, claimable);\r\n    }\r\n\r\n    function viewUserExits(address _user) public view returns (bool) {\r\n        bool status = Dezireref.users(_user);\r\n        return status;\r\n    }\r\n\r\n    function isClaimAllow(address _user) public view returns (bool) {\r\n        bool isAllow = false;\r\n        uint256 timeDiff = block.timestamp - lastClaimed[_user];\r\n        if (timeDiff >= withdrawtime) {\r\n            isAllow = true;\r\n        }\r\n        return isAllow;\r\n    }\r\n\r\n    function isMultipleOf15(uint256 number) public pure returns (bool) {\r\n        return (number % 15 == 0);\r\n    }\r\n\r\n    function viewJoinedUsers() public view returns (address[] memory) {\r\n        return AutoPoolAddress;\r\n    }\r\n\r\n    function updateJoinAmount(uint256 _amount) public onlyOwner {\r\n        joinAmount = _amount;\r\n    }\r\n\r\n    function updateDistribution(uint256 _amount) public onlyOwner {\r\n        distribution = _amount;\r\n    }\r\n\r\n    function updateTokenPrice(uint256 _price) public onlyOwner {\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    function updateClaimFee(uint256 _fee) public onlyOwner {\r\n        claimFee = _fee;\r\n    }\r\n\r\n    function updateMinimumWithdraw(uint256 _minimumwithdraw) public onlyOwner {\r\n        minimumwithdraw = _minimumwithdraw;\r\n    }\r\n\r\n    function updateIspause(bool _status) public onlyOwner {\r\n        isPause = _status;\r\n    }\r\n\r\n    function updateWithdrawtime(uint256 _withdrawtime) public onlyOwner {\r\n        withdrawtime = _withdrawtime;\r\n    }\r\n\r\n    function getTokenFee() public view returns (uint256) {\r\n        uint256 perToken = (claimFee / tokenPrice);\r\n        return perToken * 1e6;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reJoinPoolEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AutoPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dezireref\",\"outputs\":[{\"internalType\":\"contract Dezirereferal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QBTAddress\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"advanceTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoPoolReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_usdttoken\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_qbttoken\",\"type\":\"address\"},{\"internalType\":\"contract Dezirereferal\",\"name\":\"dezirereferal\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isClaimAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"isMultipleOf15\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumwithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"nextAvailableParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reJoinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateIspause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateJoinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumwithdraw\",\"type\":\"uint256\"}],\"name\":\"updateMinimumWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawtime\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"advanceTopup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retopUpReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalTopup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedTopup\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewJoinedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DezireAutoPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cabba0d5b5617a1741b8ccad9d6170924a54ac731ef6e5b6c13d3d7b3f594ccf"}