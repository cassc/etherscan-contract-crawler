{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IUnderlying {\\n    function approve(address spender, uint value) external returns (bool);\\n    function mint(address, uint) external;\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n    function transfer(address, uint) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IVoter {\\n\\n    function attachTokenToGauge(uint tokenId, address account) external;\\n    function detachTokenFromGauge(uint tokenId, address account) external;\\n    function emitDeposit(uint tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint tokenId, address account, uint amount) external;\\n    function notifyRewardAmount(uint amount) external;\\n    function _ve() external view returns (address);\\n    function createGauge(address _pair) external returns (address);\\n    function factory() external view returns (address);\\n    function whitelistingFee() external view returns (uint256);\\n    function setWhitelistingFee(uint256 _fee) external;\\n    function whitelist(address _token) external;\\n    function isWhitelisted(address _token) external view returns (bool);\\n    function delist(address _token) external;\\n    function bribeFactory() external view returns (address);\\n    function bribes(address gauge) external view returns (address);\\n    function gauges(address pair) external view returns (address);\\n    function isGauge(address gauge) external view returns (bool);\\n    function allGauges(uint index) external view returns (address);\\n    function vote(uint tokenId, address[] calldata gaugeVote, uint[] calldata weights) external;\\n    function gaugeVote(uint tokenId) external view returns (address[] memory);\\n    function votes(uint tokenId, address gauge) external view returns (uint);\\n    function weights(address gauge) external view returns (uint);\\n    function usedWeights(uint tokenId) external view returns (uint);\\n    function claimable(address gauge) external view returns (uint);\\n    function totalWeight() external view returns (uint);\\n    function reset(uint _tokenId) external;\\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint _tokenId) external;\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n    function distributeFees(address[] memory _gauges) external;\\n    function updateGauge(address _gauge) external;\\n    function poke(uint _tokenId) external;\\n    function initialize(address[] memory _tokens, address _minter) external;\\n    function minter() external view returns (address);\\n    function admin() external view returns (address);\\n    function feeManagers(address feeManager) external view returns (bool);\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens) external;\\n    function isReward(address gauge, address token) external view returns (bool);\\n    function isBribe(address bribe, address token) external view returns (bool);\\n    function isLive(address gauge) external view returns (bool);\\n    function setBribe(address _bribe, address _token, bool _status) external;\\n    function setReward(address _gauge, address _token, bool _status) external;\\n    function killGauge(address _gauge) external;\\n    function reviveGauge(address _gauge) external;\\n    function distroFees() external;\\n    function distro() external;\\n    function distribute(address _gauge) external;\\n    function distributeRange(uint start, uint finish) external;\\n    function distributeGauges(address[] memory _gauges) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n    function epoch() external view returns (uint);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function token() external view returns (address);\\n    function user_point_history__ts(uint tokenId, uint idx) external view returns (uint);\\n    function locked__end(uint _tokenId) external view returns (uint);\\n    function locked__amount(uint _tokenId) external view returns (uint);\\n    function approve(address spender, uint tokenId) external;\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n    function lockVote(uint tokenId) external;\\n    function isVoteExpired(uint tokenId) external view returns (bool);\\n    function voteExpiry(uint _tokenId) external view returns (uint);\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function voted(uint tokenId) external view returns (bool);\\n    function withdraw(uint tokenId) external;\\n    function create_lock(uint value, uint duration) external returns (uint);\\n    function setVoter(address voter) external;\\n    function balanceOf(address owner) external view returns (uint);\\n    function safeTransferFrom(address from, address to, uint tokenId) external;\\n    function burn(uint _tokenId) external;\\n    function setAdmin(address _admin) external;\\n    function setArtProxy(address _proxy) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrowDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IVotingEscrowDistributor {\\n    function checkpoint_token() external;\\n    function checkpoint_total_supply() external;\\n}\"\r\n    },\r\n    \"contracts/Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.22;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IUnderlying} from \\\"./interfaces/IUnderlying.sol\\\";\\nimport {IVoter} from \\\"./interfaces/IVoter.sol\\\";\\nimport {IVotingEscrowDistributor} from \\\"./interfaces/IVotingEscrowDistributor.sol\\\";\\n\\n// codifies the minting rules as per ve(3,3), abstracted from the token to support any token that allows minting\\n\\ncontract Minter {\\n\\n    uint internal constant week = 86400 * 7; // allows minting once per week (reset every Thursday 00:00 UTC)\\n    uint public emission = 9900;\\n    uint public tail_emission = 100;\\n    uint internal constant target_base = 10000; // 1% per week target emission\\n    uint internal constant tail_base = 10000; // 1% per week target emission\\n    IUnderlying public immutable _token;\\n    IVoter public immutable _voter;\\n    IVotingEscrow public immutable _ve;\\n    IVotingEscrowDistributor public immutable _ve_dist;\\n    uint public weekly = 50000e18;\\n    uint public active_period;\\n    uint internal constant lock = 86400 * 7 * 52 * 4;\\n\\n    address internal initializer;\\n    address public team;\\n    address public pendingTeam;\\n    uint public teamRate;\\n    uint public rebaseRate;\\n    uint public constant MAX_TEAM_RATE = 100; // 100 bps = 10%\\n    uint public constant MAX_REBASE_RATE = 1000; // 1000 bps = 100%\\n    \\n    address[] internal excludedAddresses;\\n\\n    event Mint(address indexed sender, uint weekly, uint circulating_supply, uint circulating_emission);\\n\\n    constructor(\\n        address __voter, // the voting & distribution system\\n        address  __ve, // the ve(3,3) system that will be locked into\\n        address __ve_dist // the distribution system that ensures users aren't diluted\\n    ) {\\n        initializer = msg.sender;\\n        team = 0x0c5D52630c982aE81b78AB2954Ddc9EC2797bB9c;\\n        teamRate = 50; // 50 bps = 5%\\n        rebaseRate = 1000; // 1000 bps = 100%\\n        _token = IUnderlying(IVotingEscrow(__ve).token());\\n        _voter = IVoter(__voter);\\n        _ve = IVotingEscrow(__ve);\\n        _ve_dist = IVotingEscrowDistributor(__ve_dist);\\n        active_period = ((block.timestamp + (2 * week)) / week) * week;\\n    }\\n\\n    function initialize(\\n        address[] memory claimants,\\n        uint[] memory amounts,\\n        uint max // sum amounts / max = % ownership of top protocols, so if initial 20m is distributed, and target is 25% protocol ownership, then max - 4 x 20m = 80m\\n    ) external {\\n        require(initializer == msg.sender);\\n        _token.mint(address(this), max);\\n        _token.approve(address(_ve), type(uint).max);\\n        for (uint i = 0; i < claimants.length; i++) {\\n            _ve.create_lock_for(amounts[i], lock, claimants[i]);\\n        }\\n        initializer = address(0);\\n        active_period = (block.timestamp / week) * week;\\n    }\\n    \\n    function getExcludedAddresses() public view returns (address[] memory) {\\n        return excludedAddresses;\\n    }\\n    \\n    function setExcludedAddresses(address[] memory _excludedAddresses) public {\\n        require(msg.sender == _voter.admin(), \\\"not voter admin\\\");\\n        excludedAddresses = _excludedAddresses;\\n    }\\n\\n    function setTeam(address _team) external {\\n        require(msg.sender == team, \\\"not team\\\");\\n        pendingTeam = _team;\\n    }\\n\\n    function acceptTeam() external {\\n        require(msg.sender == pendingTeam, \\\"not pending team\\\");\\n        team = pendingTeam;\\n    }\\n\\n    function setTeamRate(uint _teamRate) external {\\n        require(msg.sender == team, \\\"not team\\\");\\n        require(_teamRate <= MAX_TEAM_RATE, \\\"rate too high\\\");\\n        teamRate = _teamRate;\\n    }\\n    \\n    function setRebaseRate(uint _rebaseRate) external {\\n        require(msg.sender == _voter.admin(), \\\"not voter admin\\\");\\n        require(_rebaseRate <= MAX_REBASE_RATE, \\\"rate too high\\\");\\n        rebaseRate = _rebaseRate;\\n    }\\n    \\n    function setTailEmission(uint _tailEmission) external {\\n        require(msg.sender == _voter.admin(), \\\"not voter admin\\\");\\n        require(_tailEmission <= tail_base, \\\"tail emission is too high\\\");\\n        tail_emission = _tailEmission;\\n    }\\n\\n    function setEmission(uint _emission) external {\\n        require(msg.sender == _voter.admin(), \\\"not voter admin\\\");\\n        require(_emission <= target_base, \\\"emission is too high\\\");\\n        emission = _emission;\\n    }\\n    \\n    // calculates sum of all balances for excluded addresses\\n    function excluded_circulating_supply() internal view returns (uint excludedCirculatingSupply) {\\n        for (uint i = 0; i < excludedAddresses.length; i++) {\\n            excludedCirculatingSupply += _token.balanceOf(excludedAddresses[i]);\\n        }\\n        \\n        return excludedCirculatingSupply;\\n    }\\n\\n    // calculate circulating supply as total token supply - locked supply\\n    function circulating_supply() public view returns (uint) {\\n        return (_token.totalSupply() - excluded_circulating_supply()) - _ve.totalSupply();\\n    }\\n\\n    // emission calculation is 2% of available supply to mint adjusted by circulating / total supply\\n    function calculate_emission() public view returns (uint) {\\n        return weekly * emission * circulating_supply() / target_base / (_token.totalSupply() - excluded_circulating_supply());\\n    }\\n\\n    // weekly emission takes the max of calculated (aka target) emission versus circulating tail end emission\\n    function weekly_emission() public view returns (uint) {\\n        return Math.max(calculate_emission(), circulating_emission());\\n    }\\n\\n    // calculates tail end (infinity) emissions as 0.2% of total supply\\n    function circulating_emission() public view returns (uint) {\\n        return circulating_supply() * tail_emission / tail_base;\\n    }\\n\\n    // calculate inflation and adjust ve balances accordingly\\n    function calculate_growth(uint _minted) public view returns (uint) {\\n        return rebaseRate * (_ve.totalSupply() * _minted / (_token.totalSupply() - excluded_circulating_supply())) / MAX_REBASE_RATE;\\n    }\\n\\n    // update period can only be called once per cycle (1 week)\\n    function update_period() external returns (uint) {\\n        uint _period = active_period;\\n        if (block.timestamp >= _period + week && initializer == address(0)) { // only trigger if new week\\n            _period = block.timestamp / week * week;\\n            active_period = _period;\\n            weekly = weekly_emission();\\n\\n            uint _growth = calculate_growth(weekly);\\n            uint _teamEmissions = (teamRate * (_growth + weekly)) / 1000;\\n            uint _required = _growth + weekly + _teamEmissions;\\n            uint _balanceOf = _token.balanceOf(address(this));\\n            if (_balanceOf < _required) {\\n                _token.mint(address(this), _required - _balanceOf);\\n            }\\n\\n            if(_teamEmissions > 0) {\\n                require(_token.transfer(team, _teamEmissions));\\n            }\\n            \\n            if(_growth > 0) {\\n                require(_token.transfer(address(_ve_dist), _growth));\\n                _ve_dist.checkpoint_token(); // checkpoint token balance that was just minted in ve_dist\\n                _ve_dist.checkpoint_total_supply(); // checkpoint supply\\n            }\\n            \\n            _token.approve(address(_voter), weekly);\\n            _voter.notifyRewardAmount(weekly);\\n\\n            emit Mint(msg.sender, weekly, circulating_supply(), circulating_emission());\\n        }\\n        return _period;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__ve_dist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weekly\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circulating_supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circulating_emission\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REBASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TEAM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IUnderlying\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ve_dist\",\"outputs\":[{\"internalType\":\"contract IVotingEscrowDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minted\",\"type\":\"uint256\"}],\"name\":\"calculate_growth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulating_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulating_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emission\",\"type\":\"uint256\"}],\"name\":\"setEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_excludedAddresses\",\"type\":\"address[]\"}],\"name\":\"setExcludedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseRate\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tailEmission\",\"type\":\"uint256\"}],\"name\":\"setTailEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamRate\",\"type\":\"uint256\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tail_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekly_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Minter", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000000b1481fe6fd74a6449064163604d712dff9bc6dd0000000000000000000000006aca098fa93dad7a872f6dcb989f8b4a3afc33420000000000000000000000000361a173dc338c32e57079b2c51cef36f8a982f1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}