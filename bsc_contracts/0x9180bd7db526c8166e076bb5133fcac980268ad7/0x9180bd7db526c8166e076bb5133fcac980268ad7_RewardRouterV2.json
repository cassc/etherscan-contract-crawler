{"SourceCode": "// Sources flattened with hardhat v2.12.0 https://hardhat.org\r\n\r\n// File contracts/access/Governable.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Governable {\r\n    address public gov;\r\n\r\n    constructor() public {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"Governable: forbidden\");\r\n        _;\r\n    }\r\n\r\n    function setGov(address _gov) external onlyGov {\r\n        gov = _gov;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/Address.sol\r\n\r\n \r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/IERC20.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/token/SafeERC20.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IRewardTracker.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardTracker {\r\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\r\n    function stakedAmounts(address _account) external view returns (uint256);\r\n    function updateRewards() external;\r\n    function stake(address _depositToken, uint256 _amount) external;\r\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\r\n    function unstake(address _depositToken, uint256 _amount) external;\r\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\r\n    function tokensPerInterval() external view returns (uint256);\r\n    function claim(address _receiver) external returns (uint256);\r\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\r\n    function claimable(address _account) external view returns (uint256);\r\n    function averageStakedAmounts(address _account) external view returns (uint256);\r\n    function cumulativeRewards(address _account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IRewardRouterV2.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardRouterV2 {\r\n    function feeGlpTracker() external view returns (address);\r\n    function stakedGlpTracker() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/ReentrancyGuard.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IVester.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVester {\r\n    function rewardTracker() external view returns (address);\r\n\r\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\r\n\r\n    function claimable(address _account) external view returns (uint256);\r\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\r\n    function claimedAmounts(address _account) external view returns (uint256);\r\n    function pairAmounts(address _account) external view returns (uint256);\r\n    function getVestedAmount(address _account) external view returns (uint256);\r\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\r\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\r\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\r\n    function bonusRewards(address _account) external view returns (uint256);\r\n\r\n    function transferStakeValues(address _sender, address _receiver) external;\r\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\r\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\r\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\r\n    function setBonusRewards(address _account, uint256 _amount) external;\r\n\r\n    function getMaxVestableAmount(address _account) external view returns (uint256);\r\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IWETH.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVaultUtils.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVaultUtils {\r\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\r\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\r\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\r\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\r\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\r\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVault.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\ninterface IVault {\r\n    function isInitialized() external view returns (bool);\r\n    function isSwapEnabled() external view returns (bool);\r\n    function isLeverageEnabled() external view returns (bool);\r\n\r\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\r\n    function setError(uint256 _errorCode, string calldata _error) external;\r\n\r\n    function router() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function gov() external view returns (address);\r\n\r\n    function whitelistedTokenCount() external view returns (uint256);\r\n    function maxLeverage() external view returns (uint256);\r\n\r\n    function minProfitTime() external view returns (uint256);\r\n    function hasDynamicFees() external view returns (bool);\r\n    function fundingInterval() external view returns (uint256);\r\n    function totalTokenWeights() external view returns (uint256);\r\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\r\n\r\n    function inManagerMode() external view returns (bool);\r\n    function inPrivateLiquidationMode() external view returns (bool);\r\n\r\n    function maxGasPrice() external view returns (uint256);\r\n\r\n    function approvedRouters(address _account, address _router) external view returns (bool);\r\n    function isLiquidator(address _account) external view returns (bool);\r\n    function isManager(address _account) external view returns (bool);\r\n\r\n    function minProfitBasisPoints(address _token) external view returns (uint256);\r\n    function tokenBalances(address _token) external view returns (uint256);\r\n    function lastFundingTimes(address _token) external view returns (uint256);\r\n\r\n    function setMaxLeverage(uint256 _maxLeverage) external;\r\n    function setInManagerMode(bool _inManagerMode) external;\r\n    function setManager(address _manager, bool _isManager) external;\r\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\r\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\r\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\r\n    function setUsdgAmount(address _token, uint256 _amount) external;\r\n    function setBufferAmount(address _token, uint256 _amount) external;\r\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\r\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\r\n    function setLiquidator(address _liquidator, bool _isActive) external;\r\n\r\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\r\n\r\n    function setFees(\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _liquidationFeeUsd,\r\n        uint256 _minProfitTime,\r\n        bool _hasDynamicFees\r\n    ) external;\r\n\r\n    function setTokenConfig(\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _redemptionBps,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external;\r\n\r\n    function setPriceFeed(address _priceFeed) external;\r\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\r\n\r\n    function directPoolDeposit(address _token) external;\r\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\r\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\r\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\r\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\r\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\r\n\r\n    function priceFeed() external view returns (address);\r\n    function fundingRateFactor() external view returns (uint256);\r\n    function stableFundingRateFactor() external view returns (uint256);\r\n    function cumulativeFundingRates(address _token) external view returns (uint256);\r\n    function getNextFundingRate(address _token) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n\r\n    function liquidationFeeUsd() external view returns (uint256);\r\n    function taxBasisPoints() external view returns (uint256);\r\n    function stableTaxBasisPoints() external view returns (uint256);\r\n    function mintBurnFeeBasisPoints() external view returns (uint256);\r\n    function swapFeeBasisPoints() external view returns (uint256);\r\n    function stableSwapFeeBasisPoints() external view returns (uint256);\r\n    function marginFeeBasisPoints() external view returns (uint256);\r\n\r\n    function allWhitelistedTokensLength() external view returns (uint256);\r\n    function allWhitelistedTokens(uint256) external view returns (address);\r\n    function whitelistedTokens(address _token) external view returns (bool);\r\n    function stableTokens(address _token) external view returns (bool);\r\n    function shortableTokens(address _token) external view returns (bool);\r\n    function feeReserves(address _token) external view returns (uint256);\r\n    function globalShortSizes(address _token) external view returns (uint256);\r\n    function globalShortAveragePrices(address _token) external view returns (uint256);\r\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\r\n    function tokenDecimals(address _token) external view returns (uint256);\r\n    function tokenWeights(address _token) external view returns (uint256);\r\n    function guaranteedUsd(address _token) external view returns (uint256);\r\n    function poolAmounts(address _token) external view returns (uint256);\r\n    function bufferAmounts(address _token) external view returns (uint256);\r\n    function reservedAmounts(address _token) external view returns (uint256);\r\n    function usdgAmounts(address _token) external view returns (uint256);\r\n    function maxUsdgAmounts(address _token) external view returns (uint256);\r\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getMaxPrice(address _token) external view returns (uint256);\r\n    function getMinPrice(address _token) external view returns (uint256);\r\n\r\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\r\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IGlpManager.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\ninterface IGlpManager {\r\n    function glp() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function vault() external view returns (IVault);\r\n    function cooldownDuration() external returns (uint256);\r\n    function getAumInUsdg(bool maximise) external view returns (uint256);\r\n    function lastAddedAt(address _account) external returns (uint256);\r\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\r\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\r\n    function removeLiquidity(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\r\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\r\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external;\r\n    function setCooldownDuration(uint256 _cooldownDuration) external;\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IMintable.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMintable {\r\n    function isMinter(address _account) external returns (bool);\r\n    function setMinter(address _minter, bool _isActive) external;\r\n    function mint(address _account, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/staking/RewardRouterV2.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\ncontract RewardRouterV2 is IRewardRouterV2, ReentrancyGuard, Governable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    bool public isInitialized;\r\n\r\n    address public weth;\r\n\r\n    address public gmx;\r\n    address public esGmx;\r\n    address public bnGmx;\r\n\r\n    address public glp; // LIF3 Liquidity Provider token\r\n\r\n    address public stakedGmxTracker;\r\n    address public bonusGmxTracker;\r\n    address public feeGmxTracker;\r\n\r\n    address public override stakedGlpTracker;\r\n    address public override feeGlpTracker;\r\n\r\n    address public glpManager;\r\n\r\n    address public gmxVester;\r\n    address public glpVester;\r\n\r\n    mapping (address => address) public pendingReceivers;\r\n\r\n    event StakeGmx(address account, address token, uint256 amount);\r\n    event UnstakeGmx(address account, address token, uint256 amount);\r\n\r\n    event StakeGlp(address account, uint256 amount);\r\n    event UnstakeGlp(address account, uint256 amount);\r\n\r\n    receive() external payable {\r\n        require(msg.sender == weth, \"Router: invalid sender\");\r\n    }\r\n\r\n    function initialize(\r\n        address _weth,\r\n        address _gmx,\r\n        address _esGmx,\r\n        address _bnGmx,\r\n        address _glp,\r\n        address _stakedGmxTracker,\r\n        address _bonusGmxTracker,\r\n        address _feeGmxTracker,\r\n        address _feeGlpTracker,\r\n        address _stakedGlpTracker,\r\n        address _glpManager,\r\n        address _gmxVester,\r\n        address _glpVester\r\n    ) external onlyGov {\r\n        require(!isInitialized, \"RewardRouter: already initialized\");\r\n        isInitialized = true;\r\n\r\n        weth = _weth;\r\n\r\n        gmx = _gmx;\r\n        esGmx = _esGmx;\r\n        bnGmx = _bnGmx;\r\n\r\n        glp = _glp;\r\n\r\n        stakedGmxTracker = _stakedGmxTracker;\r\n        bonusGmxTracker = _bonusGmxTracker;\r\n        feeGmxTracker = _feeGmxTracker;\r\n\r\n        feeGlpTracker = _feeGlpTracker;\r\n        stakedGlpTracker = _stakedGlpTracker;\r\n\r\n        glpManager = _glpManager;\r\n\r\n        gmxVester = _gmxVester;\r\n        glpVester = _glpVester;\r\n    }\r\n\r\n    // to help users who accidentally send their tokens to this contract\r\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\r\n        IERC20(_token).safeTransfer(_account, _amount);\r\n    }\r\n\r\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\r\n        address _gmx = gmx;\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            _stakeGmx(msg.sender, _accounts[i], _gmx, _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function stakeGmxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\r\n        _stakeGmx(msg.sender, _account, gmx, _amount);\r\n    }\r\n\r\n    function stakeGmx(uint256 _amount) external nonReentrant {\r\n        _stakeGmx(msg.sender, msg.sender, gmx, _amount);\r\n    }\r\n\r\n    function stakeEsGmx(uint256 _amount) external nonReentrant {\r\n        _stakeGmx(msg.sender, msg.sender, esGmx, _amount);\r\n    }\r\n\r\n    function unstakeGmx(uint256 _amount) external nonReentrant {\r\n        _unstakeGmx(msg.sender, gmx, _amount, true);\r\n    }\r\n\r\n    function unstakeEsGmx(uint256 _amount) external nonReentrant {\r\n        _unstakeGmx(msg.sender, esGmx, _amount, true);\r\n    }\r\n\r\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external nonReentrant returns (uint256) {\r\n        require(_amount > 0, \"RewardRouter: invalid _amount\");\r\n\r\n        address account = msg.sender;\r\n        uint256 glpAmount = IGlpManager(glpManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdg, _minGlp);\r\n        IRewardTracker(feeGlpTracker).stakeForAccount(account, account, glp, glpAmount);\r\n        IRewardTracker(stakedGlpTracker).stakeForAccount(account, account, feeGlpTracker, glpAmount);\r\n\r\n        emit StakeGlp(account, glpAmount);\r\n\r\n        return glpAmount;\r\n    }\r\n\r\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable nonReentrant returns (uint256) {\r\n        require(msg.value > 0, \"RewardRouter: invalid msg.value\");\r\n\r\n        IWETH(weth).deposit{value: msg.value}();\r\n        IERC20(weth).approve(glpManager, msg.value);\r\n\r\n        address account = msg.sender;\r\n        uint256 glpAmount = IGlpManager(glpManager).addLiquidityForAccount(address(this), account, weth, msg.value, _minUsdg, _minGlp);\r\n\r\n        IRewardTracker(feeGlpTracker).stakeForAccount(account, account, glp, glpAmount);\r\n        IRewardTracker(stakedGlpTracker).stakeForAccount(account, account, feeGlpTracker, glpAmount);\r\n\r\n        emit StakeGlp(account, glpAmount);\r\n\r\n        return glpAmount;\r\n    }\r\n\r\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external nonReentrant returns (uint256) {\r\n        require(_glpAmount > 0, \"RewardRouter: invalid _glpAmount\");\r\n\r\n        address account = msg.sender;\r\n        IRewardTracker(stakedGlpTracker).unstakeForAccount(account, feeGlpTracker, _glpAmount, account);\r\n        IRewardTracker(feeGlpTracker).unstakeForAccount(account, glp, _glpAmount, account);\r\n        uint256 amountOut = IGlpManager(glpManager).removeLiquidityForAccount(account, _tokenOut, _glpAmount, _minOut, _receiver);\r\n\r\n        emit UnstakeGlp(account, _glpAmount);\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    function unstakeAndRedeemGlpETH(uint256 _glpAmount, uint256 _minOut, address payable _receiver) external nonReentrant returns (uint256) {\r\n        require(_glpAmount > 0, \"RewardRouter: invalid _glpAmount\");\r\n\r\n        address account = msg.sender;\r\n        IRewardTracker(stakedGlpTracker).unstakeForAccount(account, feeGlpTracker, _glpAmount, account);\r\n        IRewardTracker(feeGlpTracker).unstakeForAccount(account, glp, _glpAmount, account);\r\n        uint256 amountOut = IGlpManager(glpManager).removeLiquidityForAccount(account, weth, _glpAmount, _minOut, address(this));\r\n\r\n        IWETH(weth).withdraw(amountOut);\r\n\r\n        _receiver.sendValue(amountOut);\r\n\r\n        emit UnstakeGlp(account, _glpAmount);\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    function claim() external nonReentrant {\r\n        address account = msg.sender;\r\n\r\n        IRewardTracker(feeGmxTracker).claimForAccount(account, account);\r\n        IRewardTracker(feeGlpTracker).claimForAccount(account, account);\r\n\r\n        IRewardTracker(stakedGmxTracker).claimForAccount(account, account);\r\n        IRewardTracker(stakedGlpTracker).claimForAccount(account, account);\r\n    }\r\n\r\n    function claimEsGmx() external nonReentrant {\r\n        address account = msg.sender;\r\n\r\n        IRewardTracker(stakedGmxTracker).claimForAccount(account, account);\r\n        IRewardTracker(stakedGlpTracker).claimForAccount(account, account);\r\n    }\r\n\r\n    function claimFees() external nonReentrant {\r\n        address account = msg.sender;\r\n\r\n        IRewardTracker(feeGmxTracker).claimForAccount(account, account);\r\n        IRewardTracker(feeGlpTracker).claimForAccount(account, account);\r\n    }\r\n\r\n    function compound() external nonReentrant {\r\n        _compound(msg.sender);\r\n    }\r\n\r\n    function compoundForAccount(address _account) external nonReentrant onlyGov {\r\n        _compound(_account);\r\n    }\r\n\r\n    function handleRewards(\r\n        bool _shouldClaimGmx,\r\n        bool _shouldStakeGmx,\r\n        bool _shouldClaimEsGmx,\r\n        bool _shouldStakeEsGmx,\r\n        bool _shouldStakeMultiplierPoints,\r\n        bool _shouldClaimWeth,\r\n        bool _shouldConvertWethToEth\r\n    ) external nonReentrant {\r\n        address account = msg.sender;\r\n\r\n        uint256 gmxAmount = 0;\r\n        if (_shouldClaimGmx) {\r\n            uint256 gmxAmount0 = IVester(gmxVester).claimForAccount(account, account);\r\n            uint256 gmxAmount1 = IVester(glpVester).claimForAccount(account, account);\r\n            gmxAmount = gmxAmount0.add(gmxAmount1);\r\n        }\r\n\r\n        if (_shouldStakeGmx && gmxAmount > 0) {\r\n            _stakeGmx(account, account, gmx, gmxAmount);\r\n        }\r\n\r\n        uint256 esGmxAmount = 0;\r\n        if (_shouldClaimEsGmx) {\r\n            uint256 esGmxAmount0 = IRewardTracker(stakedGmxTracker).claimForAccount(account, account);\r\n            uint256 esGmxAmount1 = IRewardTracker(stakedGlpTracker).claimForAccount(account, account);\r\n            esGmxAmount = esGmxAmount0.add(esGmxAmount1);\r\n        }\r\n\r\n        if (_shouldStakeEsGmx && esGmxAmount > 0) {\r\n            _stakeGmx(account, account, esGmx, esGmxAmount);\r\n        }\r\n\r\n        if (_shouldStakeMultiplierPoints) {\r\n            uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(account, account);\r\n            if (bnGmxAmount > 0) {\r\n                IRewardTracker(feeGmxTracker).stakeForAccount(account, account, bnGmx, bnGmxAmount);\r\n            }\r\n        }\r\n\r\n        if (_shouldClaimWeth) {\r\n            if (_shouldConvertWethToEth) {\r\n                uint256 weth0 = IRewardTracker(feeGmxTracker).claimForAccount(account, address(this));\r\n                uint256 weth1 = IRewardTracker(feeGlpTracker).claimForAccount(account, address(this));\r\n\r\n                uint256 wethAmount = weth0.add(weth1);\r\n                IWETH(weth).withdraw(wethAmount);\r\n\r\n                payable(account).sendValue(wethAmount);\r\n            } else {\r\n                IRewardTracker(feeGmxTracker).claimForAccount(account, account);\r\n                IRewardTracker(feeGlpTracker).claimForAccount(account, account);\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            _compound(_accounts[i]);\r\n        }\r\n    }\r\n\r\n    function signalTransfer(address _receiver) external nonReentrant {\r\n        require(IERC20(gmxVester).balanceOf(msg.sender) == 0, \"RewardRouter: sender has vested tokens\");\r\n        require(IERC20(glpVester).balanceOf(msg.sender) == 0, \"RewardRouter: sender has vested tokens\");\r\n\r\n        _validateReceiver(_receiver);\r\n        pendingReceivers[msg.sender] = _receiver;\r\n    }\r\n\r\n    function acceptTransfer(address _sender) external nonReentrant {\r\n        require(IERC20(gmxVester).balanceOf(_sender) == 0, \"RewardRouter: sender has vested tokens\");\r\n        require(IERC20(glpVester).balanceOf(_sender) == 0, \"RewardRouter: sender has vested tokens\");\r\n\r\n        address receiver = msg.sender;\r\n        require(pendingReceivers[_sender] == receiver, \"RewardRouter: transfer not signalled\");\r\n        delete pendingReceivers[_sender];\r\n\r\n        _validateReceiver(receiver);\r\n        _compound(_sender);\r\n\r\n        uint256 stakedGmx = IRewardTracker(stakedGmxTracker).depositBalances(_sender, gmx);\r\n        if (stakedGmx > 0) {\r\n            _unstakeGmx(_sender, gmx, stakedGmx, false);\r\n            _stakeGmx(_sender, receiver, gmx, stakedGmx);\r\n        }\r\n\r\n        uint256 stakedEsGmx = IRewardTracker(stakedGmxTracker).depositBalances(_sender, esGmx);\r\n        if (stakedEsGmx > 0) {\r\n            _unstakeGmx(_sender, esGmx, stakedEsGmx, false);\r\n            _stakeGmx(_sender, receiver, esGmx, stakedEsGmx);\r\n        }\r\n\r\n        uint256 stakedBnGmx = IRewardTracker(feeGmxTracker).depositBalances(_sender, bnGmx);\r\n        if (stakedBnGmx > 0) {\r\n            IRewardTracker(feeGmxTracker).unstakeForAccount(_sender, bnGmx, stakedBnGmx, _sender);\r\n            IRewardTracker(feeGmxTracker).stakeForAccount(_sender, receiver, bnGmx, stakedBnGmx);\r\n        }\r\n\r\n        uint256 esGmxBalance = IERC20(esGmx).balanceOf(_sender);\r\n        if (esGmxBalance > 0) {\r\n            IERC20(esGmx).transferFrom(_sender, receiver, esGmxBalance);\r\n        }\r\n\r\n        uint256 glpAmount = IRewardTracker(feeGlpTracker).depositBalances(_sender, glp);\r\n        if (glpAmount > 0) {\r\n            IRewardTracker(stakedGlpTracker).unstakeForAccount(_sender, feeGlpTracker, glpAmount, _sender);\r\n            IRewardTracker(feeGlpTracker).unstakeForAccount(_sender, glp, glpAmount, _sender);\r\n\r\n            IRewardTracker(feeGlpTracker).stakeForAccount(_sender, receiver, glp, glpAmount);\r\n            IRewardTracker(stakedGlpTracker).stakeForAccount(receiver, receiver, feeGlpTracker, glpAmount);\r\n        }\r\n\r\n        IVester(gmxVester).transferStakeValues(_sender, receiver);\r\n        IVester(glpVester).transferStakeValues(_sender, receiver);\r\n    }\r\n\r\n    function _validateReceiver(address _receiver) private view {\r\n        require(IRewardTracker(stakedGmxTracker).averageStakedAmounts(_receiver) == 0, \"RewardRouter: stakedGmxTracker.averageStakedAmounts > 0\");\r\n        require(IRewardTracker(stakedGmxTracker).cumulativeRewards(_receiver) == 0, \"RewardRouter: stakedGmxTracker.cumulativeRewards > 0\");\r\n\r\n        require(IRewardTracker(bonusGmxTracker).averageStakedAmounts(_receiver) == 0, \"RewardRouter: bonusGmxTracker.averageStakedAmounts > 0\");\r\n        require(IRewardTracker(bonusGmxTracker).cumulativeRewards(_receiver) == 0, \"RewardRouter: bonusGmxTracker.cumulativeRewards > 0\");\r\n\r\n        require(IRewardTracker(feeGmxTracker).averageStakedAmounts(_receiver) == 0, \"RewardRouter: feeGmxTracker.averageStakedAmounts > 0\");\r\n        require(IRewardTracker(feeGmxTracker).cumulativeRewards(_receiver) == 0, \"RewardRouter: feeGmxTracker.cumulativeRewards > 0\");\r\n\r\n        require(IVester(gmxVester).transferredAverageStakedAmounts(_receiver) == 0, \"RewardRouter: gmxVester.transferredAverageStakedAmounts > 0\");\r\n        require(IVester(gmxVester).transferredCumulativeRewards(_receiver) == 0, \"RewardRouter: gmxVester.transferredCumulativeRewards > 0\");\r\n\r\n        require(IRewardTracker(stakedGlpTracker).averageStakedAmounts(_receiver) == 0, \"RewardRouter: stakedGlpTracker.averageStakedAmounts > 0\");\r\n        require(IRewardTracker(stakedGlpTracker).cumulativeRewards(_receiver) == 0, \"RewardRouter: stakedGlpTracker.cumulativeRewards > 0\");\r\n\r\n        require(IRewardTracker(feeGlpTracker).averageStakedAmounts(_receiver) == 0, \"RewardRouter: feeGlpTracker.averageStakedAmounts > 0\");\r\n        require(IRewardTracker(feeGlpTracker).cumulativeRewards(_receiver) == 0, \"RewardRouter: feeGlpTracker.cumulativeRewards > 0\");\r\n\r\n        require(IVester(glpVester).transferredAverageStakedAmounts(_receiver) == 0, \"RewardRouter: gmxVester.transferredAverageStakedAmounts > 0\");\r\n        require(IVester(glpVester).transferredCumulativeRewards(_receiver) == 0, \"RewardRouter: gmxVester.transferredCumulativeRewards > 0\");\r\n\r\n        require(IERC20(gmxVester).balanceOf(_receiver) == 0, \"RewardRouter: gmxVester.balance > 0\");\r\n        require(IERC20(glpVester).balanceOf(_receiver) == 0, \"RewardRouter: glpVester.balance > 0\");\r\n    }\r\n\r\n    function _compound(address _account) private {\r\n        _compoundGmx(_account);\r\n        _compoundGlp(_account);\r\n    }\r\n\r\n    function _compoundGmx(address _account) private {\r\n        uint256 esGmxAmount = IRewardTracker(stakedGmxTracker).claimForAccount(_account, _account);\r\n        if (esGmxAmount > 0) {\r\n            _stakeGmx(_account, _account, esGmx, esGmxAmount);\r\n        }\r\n\r\n        uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(_account, _account);\r\n        if (bnGmxAmount > 0) {\r\n            IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bnGmx, bnGmxAmount);\r\n        }\r\n    }\r\n\r\n    function _compoundGlp(address _account) private {\r\n        uint256 esGmxAmount = IRewardTracker(stakedGlpTracker).claimForAccount(_account, _account);\r\n        if (esGmxAmount > 0) {\r\n            _stakeGmx(_account, _account, esGmx, esGmxAmount);\r\n        }\r\n    }\r\n\r\n    function _stakeGmx(address _fundingAccount, address _account, address _token, uint256 _amount) private {\r\n        require(_amount > 0, \"RewardRouter: invalid _amount\");\r\n\r\n        IRewardTracker(stakedGmxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\r\n        IRewardTracker(bonusGmxTracker).stakeForAccount(_account, _account, stakedGmxTracker, _amount);\r\n        IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bonusGmxTracker, _amount);\r\n\r\n        emit StakeGmx(_account, _token, _amount);\r\n    }\r\n\r\n    function _unstakeGmx(address _account, address _token, uint256 _amount, bool _shouldReduceBnGmx) private {\r\n        require(_amount > 0, \"RewardRouter: invalid _amount\");\r\n\r\n        uint256 balance = IRewardTracker(stakedGmxTracker).stakedAmounts(_account);\r\n\r\n        IRewardTracker(feeGmxTracker).unstakeForAccount(_account, bonusGmxTracker, _amount, _account);\r\n        IRewardTracker(bonusGmxTracker).unstakeForAccount(_account, stakedGmxTracker, _amount, _account);\r\n        IRewardTracker(stakedGmxTracker).unstakeForAccount(_account, _token, _amount, _account);\r\n\r\n        if (_shouldReduceBnGmx) {\r\n            uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(_account, _account);\r\n            if (bnGmxAmount > 0) {\r\n                IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bnGmx, bnGmxAmount);\r\n            }\r\n\r\n            uint256 stakedBnGmx = IRewardTracker(feeGmxTracker).depositBalances(_account, bnGmx);\r\n            if (stakedBnGmx > 0) {\r\n                uint256 reductionAmount = stakedBnGmx.mul(_amount).div(balance);\r\n                IRewardTracker(feeGmxTracker).unstakeForAccount(_account, bnGmx, reductionAmount, _account);\r\n                IMintable(bnGmx).burn(_account, reductionAmount);\r\n            }\r\n        }\r\n\r\n        emit UnstakeGmx(_account, _token, _amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeGlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeGmx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeGlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeGmx\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchCompoundForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeGmxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnGmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusGmxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEsGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"compoundForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esGmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGmxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldClaimGmx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeGmx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimEsGmx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeEsGmx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMultiplierPoints\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimWeth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertWethToEth\",\"type\":\"bool\"}],\"name\":\"handleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esGmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnGmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedGmxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusGmxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeGmxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeGlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedGlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxVester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glpVester\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeGlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"signalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeEsGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGmxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedGlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedGmxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_glpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_glpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemGlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEsGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardRouterV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34a8d1ec752d1d3e89c7a6d30f3a0943dd293cc607dd6ae778402e9282c3dd9b"}