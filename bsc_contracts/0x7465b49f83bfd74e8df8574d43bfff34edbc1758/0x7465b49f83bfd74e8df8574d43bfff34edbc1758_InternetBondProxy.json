{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.6;\r\n\r\ninterface ICrossChainBridge {\r\n\r\n    event ContractAllowed(address contractAddress, uint256 toChain);\r\n    event ContractDisallowed(address contractAddress, uint256 toChain);\r\n    event ConsensusChanged(address consensusAddress);\r\n    event TokenImplementationChanged(address consensusAddress);\r\n    event BondImplementationChanged(address consensusAddress);\r\n\r\n    struct Metadata {\r\n        bytes32 symbol;\r\n        bytes32 name;\r\n        uint256 originChain;\r\n        address originAddress;\r\n        bytes32 bondMetadata; // encoded metadata version, bond type\r\n    }\r\n\r\n    event DepositLocked(\r\n        uint256 chainId,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 totalAmount,\r\n        Metadata metadata\r\n    );\r\n    event DepositBurned(\r\n        uint256 chainId,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 totalAmount,\r\n        Metadata metadata,\r\n        address originToken\r\n    );\r\n\r\n    event WithdrawMinted(\r\n        bytes32 receiptHash,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 totalAmount\r\n    );\r\n    event WithdrawUnlocked(\r\n        bytes32 receiptHash,\r\n        address indexed fromAddress,\r\n        address indexed toAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 totalAmount\r\n    );\r\n\r\n    enum InternetBondType {\r\n        NOT_BOND,\r\n        REBASING_BOND,\r\n        NONREBASING_BOND\r\n    }\r\n\r\n    function isPeggedToken(address toToken) external returns (bool);\r\n\r\n    function deposit(uint256 toChain, address toAddress) payable external;\r\n\r\n    function deposit(address fromToken, uint256 toChain, address toAddress, uint256 amount) external;\r\n\r\n    function withdraw(bytes calldata encodedProof, bytes calldata rawReceipt, bytes calldata receiptRootSignature) external;\r\n\r\n    function factoryPeggedToken(uint256 fromChain, Metadata calldata metaData) external;\r\n\r\n    function factoryPeggedBond(uint256 fromChain, Metadata calldata metaData) external;\r\n\r\n    function getTokenImplementation() external returns (address);\r\n\r\n    function getBondImplementation() external returns (address);\r\n\r\n    }\r\n\r\n\r\ncontract InternetBondProxy {\r\n\r\n    bytes32 private constant BEACON_SLOT = bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1);\r\n\r\n    fallback() external {\r\n        address bridge;\r\n        bytes32 slot = BEACON_SLOT;\r\n        assembly {\r\n            bridge := sload(slot)\r\n        }\r\n        address impl = ICrossChainBridge(bridge).getBondImplementation();\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {revert(0, returndatasize())}\r\n            default {return (0, returndatasize())}\r\n        }\r\n    }\r\n\r\n    function setBeacon(address newBeacon) external {\r\n        address beacon;\r\n        bytes32 slot = BEACON_SLOT;\r\n        assembly {\r\n            beacon := sload(slot)\r\n        }\r\n        require(beacon == address(0x00));\r\n        assembly {\r\n            sstore(slot, newBeacon)\r\n        }\r\n    }\r\n}", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeacon\",\"type\":\"address\"}],\"name\":\"setBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InternetBondProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "1", "Implementation": "0xc437df90b37c1db6657339e31bfe54627f0e7181", "SwarmSource": "ipfs://d283edebb1e56b63c1cf809c7a7219bbf056c367c289dabb51fdba5f71cdf44c"}