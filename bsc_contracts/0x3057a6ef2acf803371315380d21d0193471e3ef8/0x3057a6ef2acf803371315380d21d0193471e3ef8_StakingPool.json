{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPool.sol\\\";\\r\\nimport \\\"../interfaces/IRewardDistributor.sol\\\";\\r\\nimport \\\"../interfaces/IMoonKnight.sol\\\";\\r\\nimport \\\"../utils/PermissionGroup.sol\\\";\\r\\n\\r\\ncontract StakingPool is IStakingPool, PermissionGroup {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    uint public constant BASE_APY = 5;\\r\\n    uint private constant ONE_YEAR_IN_SECONDS = 31536000;\\r\\n\\r\\n    IERC20 public immutable acceptedToken;\\r\\n    IRewardDistributor public immutable rewardDistributorContract;\\r\\n    IMoonKnight public knightContract;\\r\\n    uint public baseExp = 1000;\\r\\n    uint public maxApy = 30;\\r\\n    uint public endTime;\\r\\n    mapping(uint => uint) public knightExp;\\r\\n    mapping(address => mapping(uint => StakingData)) public stakingData;\\r\\n\\r\\n    // All staking Knights of an address\\r\\n    mapping(address => EnumerableSet.UintSet) private _stakingKnights;\\r\\n\\r\\n    constructor(\\r\\n        IERC20 tokenAddr,\\r\\n        IMoonKnight knightAddr,\\r\\n        IRewardDistributor distributorAddr\\r\\n    ) {\\r\\n        acceptedToken = tokenAddr;\\r\\n        knightContract = knightAddr;\\r\\n        rewardDistributorContract = distributorAddr;\\r\\n    }\\r\\n\\r\\n    function setMoonKnightContract(IMoonKnight knightAddr) external onlyOwner {\\r\\n        require(address(knightAddr) != address(0));\\r\\n        knightContract = knightAddr;\\r\\n    }\\r\\n\\r\\n    function setMaxApy(uint value) external onlyOwner {\\r\\n        require(value > BASE_APY);\\r\\n        maxApy = value;\\r\\n    }\\r\\n\\r\\n    function setBaseExp(uint value) external onlyOwner {\\r\\n        require(value > 0);\\r\\n        baseExp = value;\\r\\n    }\\r\\n\\r\\n    function endReward() external onlyOwner {\\r\\n        endTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function stake(uint knightId, uint amount, uint lockedMonths) external override {\\r\\n        address account = msg.sender;\\r\\n\\r\\n        StakingData storage stakingKnight = stakingData[account][knightId];\\r\\n\\r\\n        if (block.timestamp < stakingKnight.lockedTime) {\\r\\n            require(lockedMonths >= stakingKnight.lockedMonths, \\\"StakingPool: lockMonths must be equal or higher\\\");\\r\\n        }\\r\\n\\r\\n        _harvest(knightId, account);\\r\\n\\r\\n        uint apy = lockedMonths * BASE_APY;\\r\\n        stakingKnight.APY = apy == 0 ? BASE_APY : apy > maxApy ? maxApy : apy;\\r\\n        stakingKnight.balance += amount;\\r\\n        stakingKnight.lockedTime = block.timestamp + lockedMonths * 30 days;\\r\\n        stakingKnight.lockedMonths = lockedMonths;\\r\\n\\r\\n        _stakingKnights[account].add(knightId);\\r\\n\\r\\n        acceptedToken.safeTransferFrom(account, address(this), amount);\\r\\n\\r\\n        emit Staked(knightId, account, amount, lockedMonths);\\r\\n    }\\r\\n\\r\\n    function unstake(uint knightId, uint amount) external override {\\r\\n        address account = msg.sender;\\r\\n        StakingData storage stakingKnight = stakingData[account][knightId];\\r\\n\\r\\n        require(block.timestamp >= stakingKnight.lockedTime, \\\"StakingPool: still locked\\\");\\r\\n        require(stakingKnight.balance >= amount, \\\"StakingPool: insufficient balance\\\");\\r\\n\\r\\n        _harvest(knightId, account);\\r\\n\\r\\n        uint newBalance = stakingKnight.balance - amount;\\r\\n        stakingKnight.balance = newBalance;\\r\\n\\r\\n        if (newBalance == 0) {\\r\\n            _stakingKnights[account].remove(knightId);\\r\\n            stakingKnight.APY = 0;\\r\\n            stakingKnight.lockedTime = 0;\\r\\n            stakingKnight.lockedMonths = 0;\\r\\n        }\\r\\n\\r\\n        acceptedToken.safeTransfer(account, amount);\\r\\n\\r\\n        emit Unstaked(knightId, account, amount);\\r\\n    }\\r\\n\\r\\n    function claim(uint knightId) external override {\\r\\n        address account = msg.sender;\\r\\n        StakingData storage stakingKnight = stakingData[account][knightId];\\r\\n\\r\\n        _harvest(knightId, account);\\r\\n\\r\\n        uint reward = stakingKnight.reward;\\r\\n        stakingKnight.reward = 0;\\r\\n        rewardDistributorContract.distributeReward(account, reward);\\r\\n\\r\\n        emit Claimed(knightId, account, reward);\\r\\n    }\\r\\n\\r\\n    function convertExpToLevels(uint knightId, uint levelUpAmount) external override {\\r\\n        _harvest(knightId, msg.sender);\\r\\n\\r\\n        uint currentLevel = knightContract.getKnightLevel(knightId);\\r\\n        uint currentExp = knightExp[knightId];\\r\\n        uint requiredExp = (levelUpAmount * (2 * currentLevel + levelUpAmount - 1) / 2) * baseExp * 1e18;\\r\\n\\r\\n        require(currentExp >= requiredExp, \\\"StakingPool: not enough exp\\\");\\r\\n\\r\\n        knightExp[knightId] -= requiredExp;\\r\\n        knightContract.levelUp(knightId, levelUpAmount);\\r\\n    }\\r\\n\\r\\n    function earned(uint knightId, address account) public view override returns (uint expEarned, uint tokenEarned) {\\r\\n        StakingData memory stakingKnight = stakingData[account][knightId];\\r\\n        uint lastUpdatedTime = stakingKnight.lastUpdatedTime;\\r\\n        uint currentTime = endTime != 0 ? endTime : block.timestamp;\\r\\n        uint stakedTime = lastUpdatedTime > currentTime ? 0 : currentTime - lastUpdatedTime;\\r\\n        uint stakedTimeInSeconds = lastUpdatedTime == 0 ? 0 : stakedTime;\\r\\n        uint stakingDuration = stakingKnight.balance * stakedTimeInSeconds;\\r\\n\\r\\n        expEarned = stakingDuration / 1e5;\\r\\n        tokenEarned = stakingDuration / ONE_YEAR_IN_SECONDS * stakingKnight.APY / 100;\\r\\n    }\\r\\n\\r\\n    function balanceOf(uint knightId, address account) external view override returns (uint) {\\r\\n        return stakingData[account][knightId].balance;\\r\\n    }\\r\\n\\r\\n    function _harvest(uint knightId, address account) private {\\r\\n        (uint expEarned, uint tokenEarned) = earned(knightId, account);\\r\\n\\r\\n        knightExp[knightId] += expEarned;\\r\\n\\r\\n        StakingData storage stakingKnight = stakingData[account][knightId];\\r\\n        stakingKnight.lastUpdatedTime = block.timestamp;\\r\\n        stakingKnight.reward += tokenEarned;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStakingPool {\\r\\n    event Staked(uint indexed knightId, address indexed account, uint amount, uint lockedMonths);\\r\\n    event Unstaked(uint indexed knightId, address indexed account, uint amount);\\r\\n    event Exited(address indexed account, uint totalBalance);\\r\\n    event Claimed(uint indexed knightId, address indexed account, uint reward);\\r\\n\\r\\n    struct StakingData {\\r\\n        uint balance;\\r\\n        uint APY;\\r\\n        uint lastUpdatedTime;\\r\\n        uint lockedTime;\\r\\n        uint lockedMonths;\\r\\n        uint reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake FARA crystals for farming knight EXP & FARA token.\\r\\n     */\\r\\n    function stake(uint knightId, uint amount, uint lockedMonths) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake FARA crystals from a knight.\\r\\n     */\\r\\n    function unstake(uint knightId, uint amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest all EXP and reward earned from a Knight.\\r\\n     */\\r\\n    function claim(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Convert all accumulated exp from staking to knight's levels.\\r\\n     */\\r\\n    function convertExpToLevels(uint knightId, uint levelUpAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets EXP and FARA earned by a knight so far.\\r\\n     */\\r\\n    function earned(uint knightId, address account) external view returns (uint expEarned, uint tokenEarned);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets total FARA staked of a Knight.\\r\\n     */\\r\\n    function balanceOf(uint knightId, address account) external view returns (uint);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRewardDistributor {\\r\\n    /**\\r\\n     * @notice Distribute reward earned from Staking Pool\\r\\n     */\\r\\n    function distributeReward(address account, uint amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMoonKnight.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMoonKnight {\\r\\n    struct Knight {\\r\\n        string name;\\r\\n        uint level;\\r\\n        uint floorPrice;\\r\\n        uint mainWeapon;\\r\\n        uint subWeapon;\\r\\n        uint headgear;\\r\\n        uint armor;\\r\\n        uint footwear;\\r\\n        uint pants;\\r\\n        uint gloves;\\r\\n        uint mount;\\r\\n        uint troop;\\r\\n    }\\r\\n\\r\\n    struct Version {\\r\\n        uint startingIndex;\\r\\n        uint currentSupply;\\r\\n        uint maxSupply;\\r\\n        uint salePrice;\\r\\n        uint startTime;\\r\\n        uint revealTime;\\r\\n        string provenance; // This is the provenance record of all MoonKnight artworks in existence.\\r\\n    }\\r\\n\\r\\n    event KnightCreated(uint indexed knightId, uint floorPrice);\\r\\n    event KnightListed(uint indexed knightId, uint price);\\r\\n    event KnightDelisted(uint indexed knightId);\\r\\n    event KnightBought(uint indexed knightId, address buyer, address seller, uint price);\\r\\n    event KnightOffered(uint indexed knightId, address buyer, uint price);\\r\\n    event KnightOfferCanceled(uint indexed knightId, address buyer);\\r\\n    event KnightPriceIncreased(uint indexed knightId, uint floorPrice, uint increasedAmount);\\r\\n    event NameChanged(uint indexed knightId, string newName);\\r\\n    event PetAdopted(uint indexed knightId, uint indexed petId);\\r\\n    event PetReleased(uint indexed knightId, uint indexed petId);\\r\\n    event SkillLearned(uint indexed knightId, uint indexed skillId);\\r\\n    event ItemsEquipped(uint indexed knightId, uint[] itemIds);\\r\\n    event ItemsUnequipped(uint indexed knightId, uint[] itemIds);\\r\\n    event KnightLeveledUp(uint indexed knightId, uint level, uint amount);\\r\\n    event DuelConcluded(uint indexed winningKnightId, uint indexed losingKnightId, uint penaltyAmount);\\r\\n    event StartingIndexFinalized(uint versionId, uint startingIndex);\\r\\n    event NewVersionAdded(uint versionId);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims moon knights when it's on presale phase.\\r\\n     */\\r\\n    function claimMoonKnight(uint versionId, uint amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Changes a knight's name.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `newName` must be a valid string.\\r\\n     * - `newName` is not duplicated to other.\\r\\n     * - Token required: `serviceFeeInToken`.\\r\\n     */\\r\\n    function changeKnightName(uint knightId, string memory newName) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Anyone can call this function to manually add `floorPrice` to a knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `msg.value` must not be zero.\\r\\n     * - knight's `floorPrice` must be under `floorPriceCap`.\\r\\n     * - Token required: `serviceFeeInToken` * value\\r\\n     */\\r\\n    function addFloorPriceToKnight(uint knightId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner equips items to their knight by burning ERC1155 Equipment NFTs.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be owner of the knight.\\r\\n     */\\r\\n    function equipItems(uint knightId, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner removes items from their knight. ERC1155 Equipment NFTs are minted back to the owner.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be owner of the knight.\\r\\n     */\\r\\n    function removeItems(uint knightId, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a knight to claim its `floorPrice`.\\r\\n     *\\r\\n     * - Not financial advice: DONT DO THAT.\\r\\n     * - Remember to remove all items before calling this function.\\r\\n     */\\r\\n    function sacrificeKnight(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Lists a knight on sale.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `price` cannot be under knight's `floorPrice`.\\r\\n     * - Caller must be the owner of the knight.\\r\\n     */\\r\\n    function list(uint knightId, uint price) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Delist a knight on sale.\\r\\n     */\\r\\n    function delist(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Instant buy a specific knight on sale.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Target knight must be currently on sale.\\r\\n     * - Sent value must be exact the same as current listing price.\\r\\n     */\\r\\n    function buy(uint knightId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Gives offer for a knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Owner cannot offer.\\r\\n     */\\r\\n    function offer(uint knightId, uint offerValue) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner take an offer to sell their knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Cannot take offer under knight's `floorPrice`.\\r\\n     * - Offer value must be at least equal to `minPrice`.\\r\\n     */\\r\\n    function takeOffer(uint knightId, address offerAddr, uint minPrice) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels an offer for a specific knight.\\r\\n     */\\r\\n    function cancelOffer(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Learns a skill for given Knight.\\r\\n     */\\r\\n    function learnSkill(uint knightId, uint skillId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Adopts a Pet.\\r\\n     */\\r\\n    function adoptPet(uint knightId, uint petId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Abandons a Pet attached to a Knight.\\r\\n     */\\r\\n    function abandonPet(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Operators can level up a Knight\\r\\n     */\\r\\n    function levelUp(uint knightId, uint amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Finalizes the battle aftermath of 2 knights.\\r\\n     */\\r\\n    function finalizeDuelResult(uint winningKnightId, uint losingKnightId, uint penaltyInBps) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets knight information.\\r\\n     */\\r\\n    function getKnight(uint knightId) external view returns (\\r\\n        string memory name,\\r\\n        uint level,\\r\\n        uint floorPrice,\\r\\n        uint pet,\\r\\n        uint[] memory skills,\\r\\n        uint[9] memory equipment\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Gets current level of given knight.\\r\\n     */\\r\\n    function getKnightLevel(uint knightId) external view returns (uint);\\r\\n}\"\r\n    },\r\n    \"contracts/utils/PermissionGroup.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\ncontract PermissionGroup is Ownable {\\r\\n    // List of authorized address to perform some restricted actions\\r\\n    mapping(address => bool) public operators;\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operators[msg.sender], \\\"PermissionGroup: not operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an address as operator.\\r\\n     */\\r\\n    function addOperator(address operator) external onlyOwner {\\r\\n        operators[operator] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Removes an address as operator.\\r\\n    */\\r\\n    function removeOperator(address operator) external onlyOwner {\\r\\n        operators[operator] = false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 322\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"contract IMoonKnight\",\"name\":\"knightAddr\",\"type\":\"address\"},{\"internalType\":\"contract IRewardDistributor\",\"name\":\"distributorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelUpAmount\",\"type\":\"uint256\"}],\"name\":\"convertExpToLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knightContract\",\"outputs\":[{\"internalType\":\"contract IMoonKnight\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"knightExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributorContract\",\"outputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBaseExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMoonKnight\",\"name\":\"knightAddr\",\"type\":\"address\"}],\"name\":\"setMoonKnightContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "322", "ConstructorArguments": "000000000000000000000000f4ed363144981d3a65f42e7d0dc54ff9eef559a1000000000000000000000000a7a9a8156c24c4b0ca910c3ba842d1f1ac7200ef0000000000000000000000000771cdedc2ada575c98b3cf5ac3b42f5a99b9c4b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}