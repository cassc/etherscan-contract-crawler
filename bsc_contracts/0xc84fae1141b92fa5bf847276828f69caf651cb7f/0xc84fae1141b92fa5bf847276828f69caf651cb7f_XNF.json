{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IAuction Interface\\r\\n *\\r\\n * @notice This interface defines the essential functions for an auction contract,\\r\\n * facilitating token burning, reward distribution, and cycle management. It provides\\r\\n * a standardized way to interact with different auction implementations.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IAuction {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Enables users to recycle their native rewards and claim other rewards.\\r\\n     */\\r\\n    function recycle() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim all their pending rewards.\\r\\n     */\\r\\n    function claimAll() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim their pending XNF rewards.\\r\\n     */\\r\\n    function claimXNF() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim XNF rewards and locks them in the veXNF contract for a year.\\r\\n     */\\r\\n    function claimVeXNF() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim their native rewards.\\r\\n     */\\r\\n    function claimNative() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the statistics related to the provided user address.\\r\\n     */\\r\\n    function updateStats(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to recycle native rewards and claim all other rewards.\\r\\n     */\\r\\n    function claimAllAndRecycle() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Claims all pending rewards for a specific user.\\r\\n     * @dev This function aggregates all rewards and claims them in a single transaction.\\r\\n     * It should be invoked by the veXNF contract before any burn action.\\r\\n     */\\r\\n    function claimAllForUser(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Claims the accumulated veXNF rewards for a specific user.\\r\\n     * @dev This function mints and transfers the veXNF tokens to the user.\\r\\n     * It should be invoked by the veXNF contract.\\r\\n     */\\r\\n    function claimVeXNFForUser(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns specified batches of vXEN or YSL tokens to earn rewards.\\r\\n     */\\r\\n    function burn(bool, uint256) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current cycle number of the auction.\\r\\n     * @dev A cycle represents a specific duration or round in the auction process.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function currentCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Updates and retrieves the current cycle number of the auction.\\r\\n     * @dev A cycle represents a specific duration or round in the auction process.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function calculateCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the number of the last active cycle.\\r\\n     * @dev Useful for determining the most recent cycle with recorded activity.\\r\\n     * @return The number of the last active cycle.\\r\\n     */\\r\\n    function lastActiveCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the caller as a burner by paying in native tokens.\\r\\n     */\\r\\n    function participateWithNative(uint256) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current cycle number based on the time elapsed since the contract's initialization.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function getCurrentCycle() external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the pending native token rewards for a user based on their NFT ownership and recycling activities.\\r\\n     * @return The amount of pending native token rewards.\\r\\n     */\\r\\n    function pendingNative(address) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines the burn and native fee for a given number of batches, adjusting for the time within the current cycle.\\r\\n     * @return The calculated burn and native fee.\\r\\n     */\\r\\n    function coefficientWrapper(uint256) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the reward amount for a given cycle, adjusting for halving events.\\r\\n     * @return The calculated reward amount.\\r\\n     */\\r\\n    function calculateRewardPerCycle(uint256) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the pending native token rewards for a user for the current cycle based on their NFT ownership and recycling activities.\\r\\n     * @return The amount of pending native token rewards.\\r\\n     */\\r\\n    function pendingNativeForCurrentCycle(address) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the pending XNF rewards for a user across various activities.\\r\\n     * @return pendingXNFRewards An array containing the pending XNF rewards amounts for different activities.\\r\\n     */\\r\\n    function pendingXNF(address _user) external view returns (uint256, uint256, uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the caller as a swap user and earns rewards.\\r\\n     */\\r\\n    function registerSwapUser(bytes calldata, address, uint256, address) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the pending XNF rewards for a user for the current cycle across various activities.\\r\\n     * @return pendingXNFRewards An array containing the pending XNF rewards amounts for different activities.\\r\\n     */\\r\\n    function pendingXNFForCurrentCycle(address _user) external view returns (uint256, uint256, uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBurnRedeemable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IBurnRedeemable Interface\\r\\n *\\r\\n * @notice This interface defines the methods related to redeemable tokens that can be burned.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IBurnRedeemable {\\r\\n\\r\\n    /// -------------------------------------- EVENTS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user redeems tokens.\\r\\n     * @dev This event emits the details about the redemption process.\\r\\n     * @param user The address of the user who performed the redemption.\\r\\n     * @param xenContract The address of the XEN contract involved in the redemption.\\r\\n     * @param tokenContract The address of the token contract involved in the redemption.\\r\\n     * @param xenAmount The amount of XEN redeemed by the user.\\r\\n     * @param tokenAmount The amount of tokens redeemed by the user.\\r\\n     */\\r\\n    event Redeemed(\\r\\n        address indexed user,\\r\\n        address indexed xenContract,\\r\\n        address indexed tokenContract,\\r\\n        uint256 xenAmount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Called when a token is burned by a user.\\r\\n     * @dev Handles any logic related to token burning for redeemable tokens.\\r\\n     * Implementations should be cautious of reentrancy attacks.\\r\\n     * @param user The address of the user who burned the token.\\r\\n     * @param amount The amount of the token burned.\\r\\n     */\\r\\n    function onTokenBurned(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWormholeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IWormholeReceiver Interface\\r\\n *\\r\\n * @notice Interface for a contract which can receive Wormhole messages.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IWormholeReceiver {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the WormholeRelayer contract to deliver a Wormhole message to this contract.\\r\\n     *\\r\\n     * @dev This function should be implemented to include access controls to ensure that only\\r\\n     *      the Wormhole Relayer contract can invoke it.\\r\\n     *\\r\\n     *      Implementations should:\\r\\n     *      - Maintain a mapping of received `deliveryHash`s to prevent duplicate message delivery.\\r\\n     *      - Verify the authenticity of `sourceChain` and `sourceAddress` to prevent unauthorized or malicious calls.\\r\\n     *\\r\\n     * @param payload The arbitrary data included in the message by the sender.\\r\\n     * @param additionalVaas Additional VAAs that were requested to be included in this delivery.\\r\\n     *                       Guaranteed to be in the same order as specified by the sender.\\r\\n     * @param sourceAddress The Wormhole-formatted address of the message sender on the originating chain.\\r\\n     * @param sourceChain The Wormhole Chain ID of the originating blockchain.\\r\\n     * @param deliveryHash The VAA hash of the deliveryVAA, used to prevent duplicate delivery.\\r\\n     *\\r\\n     * Warning: The provided VAAs are NOT verified by the Wormhole core contract prior to this call.\\r\\n     *          Always invoke `parseAndVerify()` on the Wormhole core contract to validate the VAAs before trusting them.\\r\\n     */\\r\\n    function receiveWormholeMessages(\\r\\n        bytes memory payload,\\r\\n        bytes[] memory additionalVaas,\\r\\n        bytes32 sourceAddress,\\r\\n        uint16 sourceChain,\\r\\n        bytes32 deliveryHash\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IXNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {ILayerZeroReceiver} from \\\"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport {IWormholeReceiver} from \\\"./IWormholeReceiver.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title XNF interface\\r\\n *\\r\\n * @notice This is an interface outlining functiosn for XNF token with enhanced features such as token locking and specialized minting\\r\\n * and burning mechanisms. It's primarily used within a broader protocol to reward users who burn YSL or vXEN.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IXNF\\r\\n{\\r\\n    /// -------------------------------------- ERRORS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when minting XNF to zero address.\\r\\n     */\\r\\n    error ZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when trying to claim airdroped XNF before 2 hours passed.\\r\\n     */\\r\\n    error TooEarlyToClaim();\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when minting would exceed the maximum allowed supply.\\r\\n     */\\r\\n    error ExceedsMaxSupply();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when an invalid claim proof is provided.\\r\\n     */\\r\\n    error InvalidClaimProof();\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when a function is called by an account other than the Auction contract.\\r\\n     */\\r\\n    error OnlyAuctionAllowed();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when user tries to purchase XNF from protocol owned liquidity.\\r\\n     */\\r\\n    error CantPurchaseFromPOL();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when user tries to sell XNF directly.\\r\\n     */\\r\\n    error CanSellOnlyViaRecycle();\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when the calling contract does not support the required interface.\\r\\n     */\\r\\n    error UnsupportedInterface();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when an airdrop has already been claimed.\\r\\n     */\\r\\n    error AirdropAlreadyClaimed();\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when a user tries to transfer more unlocked tokens than they have.\\r\\n     */\\r\\n    error InsufficientUnlockedTokens();\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when the contract is already initialised.\\r\\n     */\\r\\n    error ContractInitialised(address auction);\\r\\n\\r\\n    /// ------------------------------------- STRUCTURES ------------------------------------ \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Represents token lock details for a user.\\r\\n     * @param amount Total tokens locked.\\r\\n     * @param timestamp When the tokens were locked.\\r\\n     * @param dailyUnlockAmount Tokens unlocked daily.\\r\\n     * @param usedAmount Tokens transferred from the locked amount.\\r\\n     */\\r\\n    struct Lock {\\r\\n        uint256 amount;\\r\\n        uint256 timestamp;\\r\\n        uint256 dailyUnlockAmount;\\r\\n        uint256 usedAmount;\\r\\n    }\\r\\n\\r\\n    /// -------------------------------------- EVENTS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user successfully claims their airdrop.\\r\\n     * @param user Address of the user claiming the airdrop.\\r\\n     * @param amount Amount of Airdrop claimed.\\r\\n     */\\r\\n    event Airdropped(\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to claim their airdropped tokens using a Merkle proof.\\r\\n     * @dev Verifies the Merkle proof against the stored Merkle root and mints the claimed amount to the user.\\r\\n     * @param proof Array of bytes32 values representing the Merkle proof.\\r\\n     * @param account Address of the user claiming the airdrop.\\r\\n     * @param amount Amount of tokens being claimed.\\r\\n     */\\r\\n    function claim(\\r\\n        bytes32[] calldata proof,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Mints XNF tokens to a specified account.\\r\\n     * @dev Only the Auction contract can mint tokens, and the total supply cap is checked before minting.\\r\\n     * @param account Address receiving the minted tokens.\\r\\n     * @param amount Number of tokens to mint.\\r\\n     */\\r\\n    function mint(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidity pool (LP) address.\\r\\n     * @dev Only the Auction contract is allowed to call this function.\\r\\n     * @param _lp The address of the liquidity pool to be set.\\r\\n     */\\r\\n    function setLPAddress(address _lp) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a specified amount of tokens from a user's account.\\r\\n     * @dev The calling contract must support the IBurnRedeemable interface.\\r\\n     * @param user Address from which tokens will be burned.\\r\\n     * @param amount Number of tokens to burn.\\r\\n     */\\r\\n    function burn(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines the number of days since a user's tokens were locked.\\r\\n     * @dev If the elapsed days exceed the lock period, it returns the lock period.\\r\\n     * @param _user Address of the user to check.\\r\\n     * @return passedDays Number of days since the user's tokens were locked, capped at the lock period.\\r\\n     */\\r\\n    function daysPassed(address _user) external view returns (uint256 passedDays);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the amount of unlocked tokens for a user based on the elapsed time since locking.\\r\\n     * @dev If the user's tokens have been locked for the full lock period, all tokens are considered unlocked.\\r\\n     * @param _user Address of the user to check.\\r\\n     * @return unlockedTokens Number of tokens that are currently unlocked for the user.\\r\\n     */\\r\\n    function getUnlockedTokensAmount(address _user) external view returns (uint256 unlockedTokens);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/XNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {IBurnRedeemable} from \\\"./interfaces/IBurnRedeemable.sol\\\";\\r\\nimport {IAuction} from \\\"./interfaces/IAuction.sol\\\";\\r\\nimport {IXNF} from \\\"./interfaces/IXNF.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title XNF Contract\\r\\n *\\r\\n * @notice XNF is an ERC20 token with enhanced features such as token locking and specialized minting\\r\\n * and burning mechanisms. It's primarily used within a broader protocol to reward users who burn YSL or vXEN.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ncontract XNF is\\r\\n    IXNF,\\r\\n    ERC20\\r\\n{\\r\\n\\r\\n    /// ------------------------------------ VARIABLES ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the Auction contract, set during deployment and cannot be changed.\\r\\n     */\\r\\n    address public Auction;\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the Recycle contract, set during deployment and cannot be changed.\\r\\n     */\\r\\n    address public Recycle;\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the protocol owned liquidity pool contract, set after initialising the pool and cannot be changed.\\r\\n     */\\r\\n    address public lpAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Root of the Merkle tree used for airdrop claims.\\r\\n     */\\r\\n    bytes32 public merkleRoot;\\r\\n\\r\\n    /**\\r\\n     * @notice Duration (in days) for which tokens are locked. Set to 730 days (2 years).\\r\\n     */\\r\\n    uint256 public lockPeriod;\\r\\n\\r\\n    /**\\r\\n     * @notice Timestamp when the contract was initialised, set during deployment and cannot be changed.\\r\\n     */\\r\\n    uint256 public i_timestamp;\\r\\n\\r\\n    /// ------------------------------------ MAPPINGS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps track of token lock details for each user.\\r\\n     */\\r\\n    mapping (address => Lock) public userLocks;\\r\\n\\r\\n    /**\\r\\n     * @notice Records the total number of tokens burned by each user.\\r\\n     */\\r\\n    mapping (address => uint256) public userBurns;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping to track if a user has claimed their airdrop.\\r\\n     */\\r\\n    mapping (bytes32 => bool) public airdropClaimed;\\r\\n\\r\\n    /// ------------------------------------ CONSTRUCTOR ------------------------------------ \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Initialises the XNF token with a specified storage contract address, sets the token's name and symbol.\\r\\n     */\\r\\n    constructor()\\r\\n        payable\\r\\n        ERC20(\\\"bXNF\\\", \\\"bXNF\\\")\\r\\n    {}\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Initialises the contract with Auction contract's address and merkleRoot.\\r\\n     * @dev Fails if the contract has already been initialised i.e., address of Auction is zero.\\r\\n     * @param _auction Address of the Auction contract.\\r\\n     * @param _merkleRoot Hashed Root of Merkle Tree for Airdrop.\\r\\n     */\\r\\n    function initialise(\\r\\n        address _auction,\\r\\n        address _recycle,\\r\\n        bytes32 _merkleRoot\\r\\n    ) external {\\r\\n        if (Auction != address(0))\\r\\n            revert ContractInitialised(Auction);\\r\\n        lockPeriod = 730;\\r\\n        Auction = _auction;\\r\\n        Recycle = _recycle;\\r\\n        merkleRoot = _merkleRoot;\\r\\n        i_timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidity pool (LP) address.\\r\\n     * @dev Only the Auction contract is allowed to call this function.\\r\\n     * @param _lp The address of the liquidity pool to be set.\\r\\n     */\\r\\n    function setLPAddress(address _lp)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (msg.sender != Auction) {\\r\\n            revert OnlyAuctionAllowed();\\r\\n        }\\r\\n        lpAddress = _lp;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to claim their airdropped tokens using a Merkle proof.\\r\\n     * @dev Verifies the Merkle proof against the stored Merkle root and mints the claimed amount to the user.\\r\\n     * @param proof Array of bytes32 values representing the Merkle proof.\\r\\n     * @param account Address of the user claiming the airdrop.\\r\\n     * @param amount Amount of tokens being claimed.\\r\\n     */\\r\\n    function claim(\\r\\n        bytes32[] calldata proof,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(account, amount))));\\r\\n        if (!MerkleProof.verify(proof, merkleRoot, leaf)) {\\r\\n            revert InvalidClaimProof();\\r\\n        }\\r\\n        if (airdropClaimed[leaf]) {\\r\\n            revert AirdropAlreadyClaimed();\\r\\n        }\\r\\n        if (i_timestamp + 2 hours > block.timestamp ) {\\r\\n            revert TooEarlyToClaim();\\r\\n        }\\r\\n        airdropClaimed[leaf] = true;\\r\\n        _mint(account, amount);\\r\\n        unchecked {\\r\\n            userLocks[account] = Lock(\\r\\n                amount,\\r\\n                block.timestamp,\\r\\n                (amount * 1e18) / lockPeriod,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        emit Airdropped(account, amount);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Mints XNF tokens to a specified account.\\r\\n     * @dev Only the Auction contract can mint tokens, and the total supply cap is checked before minting.\\r\\n     * @param account Address receiving the minted tokens.\\r\\n     * @param amount Number of tokens to mint.\\r\\n     */\\r\\n    function mint(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (account == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (msg.sender != Auction) {\\r\\n            revert OnlyAuctionAllowed();\\r\\n        }\\r\\n        if (totalSupply() + amount >= 22_600_000 ether) {\\r\\n            revert ExceedsMaxSupply();\\r\\n        }\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a specified amount of tokens from a user's account.\\r\\n     * @dev The calling contract must support the IBurnRedeemable interface.\\r\\n     * @param user Address from which tokens will be burned.\\r\\n     * @param amount Number of tokens to burn.\\r\\n     */\\r\\n    function burn(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (!IERC165(msg.sender).supportsInterface(type(IBurnRedeemable).interfaceId)) {\\r\\n            revert UnsupportedInterface();\\r\\n        }\\r\\n        if (msg.sender != user) {\\r\\n            _spendAllowance(user, msg.sender, amount);\\r\\n        }\\r\\n        _burn(user, amount);\\r\\n        unchecked{\\r\\n            userBurns[user] += amount;\\r\\n        }\\r\\n        IBurnRedeemable(msg.sender).onTokenBurned(user, amount);\\r\\n    }\\r\\n\\r\\n    /// --------------------------------- PUBLIC FUNCTIONS ---------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines the number of days since a user's tokens were locked.\\r\\n     * @dev If the elapsed days exceed the lock period, it returns the lock period.\\r\\n     * @param _user Address of the user to check.\\r\\n     * @return passedDays Number of days since the user's tokens were locked, capped at the lock period.\\r\\n     */\\r\\n    function daysPassed(address _user)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 passedDays)\\r\\n    {\\r\\n        passedDays = (block.timestamp - userLocks[_user].timestamp) / 1 days;\\r\\n        if (passedDays > lockPeriod) {\\r\\n            passedDays = lockPeriod;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the amount of unlocked tokens for a user based on the elapsed time since locking.\\r\\n     * @dev If the user's tokens have been locked for the full lock period, all tokens are considered unlocked.\\r\\n     * @param _user Address of the user to check.\\r\\n     * @return unlockedTokens Number of tokens that are currently unlocked for the user.\\r\\n     */\\r\\n    function getUnlockedTokensAmount(address _user)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 unlockedTokens)\\r\\n    {\\r\\n        uint256 passedDays = daysPassed(_user);\\r\\n        Lock storage lock = userLocks[_user];\\r\\n        if (userLocks[_user].timestamp != 0) {\\r\\n            if (passedDays >= lockPeriod) {\\r\\n                unlockedTokens = lock.amount;\\r\\n            } else {\\r\\n                unchecked {\\r\\n                    unlockedTokens = (passedDays * lock.dailyUnlockAmount) / 1e18;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -------------------------------- INTERNAL FUNCTIONS --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Manages token transfers, ensuring that locked tokens are not transferred.\\r\\n     * @dev This hook is invoked before any token transfer. It checks the locking conditions and updates lock details.\\r\\n     * @param from Address sending the tokens.\\r\\n     * @param amount Number of tokens being transferred.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        if (userLocks[from].timestamp != 0) {\\r\\n            Lock storage lock = userLocks[from];\\r\\n            uint256 passedDays = daysPassed(from);\\r\\n            uint256 unlockedTokens = getUnlockedTokensAmount(from);\\r\\n            uint256 userBalance = balanceOf(from);\\r\\n            if (passedDays >= lockPeriod) {\\r\\n                lock.timestamp = 0;\\r\\n            }\\r\\n            if (amount > userBalance - (lock.amount - unlockedTokens)) {\\r\\n                revert InsufficientUnlockedTokens();\\r\\n            }\\r\\n            uint256 userUsedAmount = userLocks[from].usedAmount;\\r\\n            unchecked {\\r\\n                uint256 notLockedTokens = userBalance + userUsedAmount - userLocks[from].amount;\\r\\n                if (amount > notLockedTokens) {\\r\\n                    userLocks[from].usedAmount = userUsedAmount + amount - notLockedTokens;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (lpAddress != address(0) && from == lpAddress && to != Recycle) {\\r\\n            revert CantPurchaseFromPOL();\\r\\n        }\\r\\n        if (lpAddress != address(0) && to == lpAddress && from != Recycle && from != Auction) {\\r\\n            revert CanSellOnlyViaRecycle();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AirdropAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanSellOnlyViaRecycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantPurchaseFromPOL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"}],\"name\":\"ContractInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientUnlockedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaimProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAuctionAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recycle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"airdropClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"daysPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"passedDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnlockedTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recycle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyUnlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XNF", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}