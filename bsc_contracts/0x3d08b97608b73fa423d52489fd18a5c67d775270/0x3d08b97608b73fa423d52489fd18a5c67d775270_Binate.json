{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastValue;\r\n                set._indexes[lastValue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function adds(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalBurnt;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalBurnt() public view returns (uint256) {\r\n        return _totalBurnt;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n     function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), 'account cannot be address(0)');\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), 'account cannot be address(0)');\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n\r\n        _totalBurnt = _totalBurnt.add(value);\r\n\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amount)\r\n        internal\r\n        virtual\r\n    {\r\n        require(account != address(0), \"ERC20: to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDexPair {\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract ConvertInterface {\r\n    function totalSupply() public view virtual returns (uint256);\r\n\r\n    function balanceOf(address who) external view virtual returns (uint256);\r\n\r\n    function sownFromBnt(address to, uint256 value) public virtual returns (bool);\r\n\r\n    function bntFromSown(address tokensOwner, uint256 value) external virtual returns (bool);\r\n\r\n    function transferClaimedToken(address to, uint256 tokenAmount) public virtual returns (bool);\r\n\r\n    function isDividendExempt(address who) public view virtual returns (bool);\r\n}\r\n\r\nabstract contract DistributorInterface {\r\n    function bntSetShare(address shareholder, uint256 amount) external virtual;\r\n    function bntProcess(uint256 gas) external virtual;\r\n}\r\n\r\ncontract Binate is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event RecordPrice(uint256 indexed epoch, uint256 currentPrice);\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means normal transfer is not yet active\r\n    uint256 public buyAndSellBlock = 0; // 0 means buying and selling is not yet active\r\n    uint256 public blockForStarting;\r\n    uint256 public blockForBuySell;\r\n\r\n    bool public tradingActive = false; // normal transfer is not yet active\r\n\r\n    bool public haveTokenToClaim = false; \r\n\r\n    bool public buyAndSell = false; // buying and selling is not yet active\r\n\r\n    uint256 private constant INITIALPRICE = 100000;\r\n\r\n    uint256 public constant PRICE_DECIMALS = 10**5;\r\n\r\n    uint256 public tokenAmount = 1 * 2 * 1e18;\r\n\r\n    uint256 public minClaimAmount = 1 * 50 * 1e18;\r\n\r\n    uint256 public claimFreq = 3600; //1 hours\r\n\r\n    uint256 timeOfLastClaim;\r\n\r\n    uint256 private constant MAX_PRICE = 10000000;\r\n\r\n    bool public _priceGrowth;\r\n    uint256 public _initGrowthStartTime;\r\n    uint256 public _lastGrowthTime;\r\n    uint256 public _currentPrice;\r\n\r\n    address public sownContract;\r\n    address public distributorContract;\r\n    uint256 public quarantineBalance;\r\n    uint256 public lastBalancedHour;\r\n    uint256 distributorGas = 500000;\r\n\r\n    /******************/\r\n\r\n    // exlcude lp, presale and admin address from limits\r\n    mapping(address => bool) public _isExcludedFromLimits; //Allow to transfer token before transfer is active, 4 presale distributor\r\n\r\n    // store addresses for automatic market maker pairs.\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event EnabledTrading();\r\n    event EnabledBuyandSell();\r\n    event EnabledMustHaveTokenToClaim();\r\n\r\n    event ExcludeFromLimits(address indexed account, bool isExcluded);\r\n\r\n    event TransferForeignToken(address token, uint256 amount);\r\n\r\n    event BalanceNetwork(uint256 indexed currentHour, uint256 bntAmountBurnt);\r\n\r\n    event ConvertToSown(\r\n        address indexed converter,\r\n        uint256 bntAmountSent,\r\n        uint256 sownAmountReceived\r\n    );\r\n\r\n    event ConvertToBnt(\r\n        address indexed converter,\r\n        uint256 sownAmountSent,\r\n        uint256 bntAmountReceived\r\n    );\r\n\r\n    event GetSown(address receiver, uint256 amount);\r\n\r\n    event BurnSown(uint256 amountBurnt);\r\n\r\n    event TransferClaimedToken(address receiver, uint256 amount);\r\n\r\n    event QuarantineBalanceBurnt(uint256 amount);\r\n\r\n    event LostTokensBurnt(uint256 amount);\r\n\r\n    constructor(address _dexRouter, address _sownContract) payable ERC20(\"Binate Core\", \"BNT\") {\r\n        address newOwner = msg.sender;\r\n\r\n        // PCS Main\r\n        dexRouter = IDexRouter(_dexRouter);    \r\n\r\n        // create pair\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(\r\n            address(this),\r\n            dexRouter.WETH()\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(address(lpPair), true);\r\n\r\n        uint256 totalSupply = 1 * 10e7 * 1e18;\r\n        _initGrowthStartTime = block.timestamp;\r\n        _priceGrowth = false;\r\n        sownContract = _sownContract;\r\n        _currentPrice = INITIALPRICE;\r\n\r\n\r\n        excludeFromLimits(newOwner, true);\r\n        excludeFromLimits(msg.sender, true);\r\n        excludeFromLimits(address(this), true);\r\n        excludeFromLimits(address(0xdead), true);\r\n        excludeFromLimits(address(dexRouter), true);\r\n\r\n        _createInitialSupply(newOwner, totalSupply); \r\n\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlySown() {\r\n        require(msg.sender == sownContract, 'CALLER_MUST_BE_Sown_CONTRACT_ONLY');\r\n        _;\r\n    }\r\n   \r\n    \r\n    // Trading cannot be stopped once started\r\n    function enableTrading(uint256 blocksStarted) external onlyOwner {\r\n        require(blockForStarting == 0);\r\n        _priceGrowth = true;\r\n        _lastGrowthTime = block.timestamp;\r\n        tradingActive = true;\r\n        tradingActiveBlock = block.number;\r\n        blockForStarting = tradingActiveBlock + blocksStarted;\r\n        emit EnabledTrading();\r\n    }\r\n\r\n    // Buying and Selling cannot be stopped once started\r\n    function enableBuyandSell(uint256 blocksStarted) external onlyOwner {\r\n        require(blockForBuySell == 0);\r\n        buyAndSell = true;\r\n        buyAndSellBlock = block.number;\r\n        blockForBuySell = buyAndSellBlock + blocksStarted;\r\n        emit EnabledBuyandSell();\r\n    }\r\n\r\n\r\n     // Enabling Only those that have BNT token to claim free token\r\n    function enableMustHaveTokenToClaim(uint256 minHoldAmount, uint256 claimamount, bool enable) external onlyOwner {\r\n        minClaimAmount = minHoldAmount;\r\n        tokenAmount = claimamount;\r\n        haveTokenToClaim = enable;\r\n        emit EnabledMustHaveTokenToClaim();\r\n    }\r\n\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != lpPair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n   \r\n\r\n    function excludeFromLimits(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromLimits[account] = excluded;\r\n        emit ExcludeFromLimits(account, excluded);\r\n    }\r\n\r\n\r\n    function grow() internal {\r\n    \r\n        uint256 growRate;\r\n        uint256 deltaTimeFromInit = block.timestamp - _initGrowthStartTime;\r\n        uint256 deltaTime = block.timestamp - _lastGrowthTime;\r\n        uint256 times = deltaTime.div(1 hours);\r\n        uint256 epoch = times.mul(60);\r\n\r\n        if (deltaTimeFromInit < (365 days)) {\r\n            growRate = 11;\r\n        } else if (deltaTimeFromInit >= (365 days) && deltaTimeFromInit < (730 days)) {\r\n            growRate = 5;\r\n        } else if (deltaTimeFromInit >= (730 days) && deltaTimeFromInit < (1095 days) ) {\r\n            growRate = 2;\r\n        } else if (deltaTimeFromInit >= (1095 days)) {\r\n            growRate = 1;\r\n        }\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            _currentPrice = _currentPrice\r\n                .mul((PRICE_DECIMALS).add(growRate))\r\n                .div(PRICE_DECIMALS);\r\n        }\r\n\r\n        _lastGrowthTime = _lastGrowthTime.add(times.mul(1 hours));\r\n\r\n        emit RecordPrice(epoch, _currentPrice);\r\n    }\r\n\r\n\r\n      /**\r\n     * Public function that burns BNT from quarantine\r\n     * according to the burnQuarantine() formula.\r\n     * Needed for economic logic of BNT token.\r\n     */\r\n    function balanceNetwork() external returns (bool _success) {\r\n        require(lastBalancedHour < getCurrentHour(), 'Network already balanced in this hour');\r\n\r\n        lastBalancedHour = getCurrentHour();\r\n\r\n        timeOfLastClaim = block.timestamp;\r\n\r\n        uint256 _bntBurnt = _burnQuarantined();\r\n\r\n        emit BalanceNetwork(getCurrentHour(), _bntBurnt);\r\n        return true;\r\n    }\r\n\r\n\r\n     /**\r\n     * Internal function that burns BNT from quarantine\r\n     * according to the burnQuarantine() formula.\r\n     * Needed for economic logic of BNT token.\r\n     */\r\n    function reBalance() internal returns (bool _success) {\r\n        require(lastBalancedHour < getCurrentHour(), 'Network already balanced in this hour');\r\n\r\n        lastBalancedHour = getCurrentHour();\r\n\r\n        timeOfLastClaim = block.timestamp;\r\n\r\n        uint256 _bntBurnt = _burnQuarantined();\r\n\r\n        emit BalanceNetwork(getCurrentHour(), _bntBurnt);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Public function that allows users to convert Sown to BNT.\r\n     * Amount of BNT received depends on the current price of BNT.\r\n     */\r\n    function convertToBnt(uint256 _sownAmount) external returns (bool _success) {\r\n        require(_currentPrice != 0, 'Something is wrong with the price');\r\n\r\n        require(\r\n            ConvertInterface(sownContract).balanceOf(msg.sender) >= _sownAmount,\r\n            'INSUFFICIENT_BALANCE'\r\n        );\r\n\r\n        require(\r\n            ConvertInterface(sownContract).bntFromSown(msg.sender, _sownAmount),\r\n            'BURNING_FAILED'\r\n        );\r\n\r\n        if (shouldGrow()) {\r\n           grow();\r\n        }\r\n\r\n        emit BurnSown(_sownAmount);\r\n\r\n        uint256 _bntToDequarantine =\r\n        (_sownAmount.mul(PRICE_DECIMALS)).div(_currentPrice);\r\n\r\n        quarantineBalance = quarantineBalance.sub(_bntToDequarantine);\r\n        require(this.transfer(msg.sender, _bntToDequarantine), 'CONVERT_TO_BNT_FAILED');\r\n\r\n        uint256 _balancesfrom = ConvertInterface(sownContract).balanceOf(msg.sender);\r\n        bool isDividendExempt = ConvertInterface(sownContract).isDividendExempt(msg.sender);\r\n\r\n        if(!isDividendExempt){ try DistributorInterface(distributorContract).bntSetShare(msg.sender, _balancesfrom) {} catch {} }\r\n\r\n        try DistributorInterface(distributorContract).bntProcess(distributorGas) {} catch {}\r\n\r\n        emit ConvertToBnt(msg.sender, _sownAmount, _bntToDequarantine);\r\n        return true;\r\n    }\r\n\r\n\r\n     /**\r\n     * Public function that allows users to convert BNT to Sown.\r\n     * Amount of Sown received depends on the current price of BNT.\r\n     */\r\n    function convertToSown(uint256 _bntAmount) external returns (uint256) {\r\n        require(_currentPrice != 0, 'Something is wrong with the price');\r\n\r\n        require(balanceOf(msg.sender) >= _bntAmount, 'INSUFFICIENT_BALANCE');\r\n\r\n        quarantineBalance = quarantineBalance.add(_bntAmount);\r\n        require(transfer(address(this), _bntAmount), 'TRANSFER_FAILED');\r\n\r\n        if (shouldGrow()) {\r\n           grow();\r\n        }\r\n\r\n        uint256 _sownToIssue =\r\n            (_bntAmount.mul(_currentPrice)).div(PRICE_DECIMALS);\r\n\r\n        require(\r\n            ConvertInterface(sownContract).sownFromBnt(msg.sender, _sownToIssue),\r\n            'CONVERT_TO_SOWN_FAILED'\r\n        );\r\n\r\n        uint256 _balancesfrom = ConvertInterface(sownContract).balanceOf(msg.sender);\r\n        bool isDividendExempt = ConvertInterface(sownContract).isDividendExempt(msg.sender);\r\n\r\n        if(!isDividendExempt){ try DistributorInterface(distributorContract).bntSetShare(msg.sender, _balancesfrom) {} catch {} }\r\n\r\n        try DistributorInterface(distributorContract).bntProcess(distributorGas) {} catch {}\r\n\r\n        emit GetSown(msg.sender, _sownToIssue);\r\n\r\n        emit ConvertToSown(msg.sender, _bntAmount, _sownToIssue);\r\n        return _sownToIssue;\r\n    }\r\n\r\n\r\n     /**\r\n     * Function is needed to burn lost tokens that probably were sent\r\n     * to the contract address by mistake.\r\n     */\r\n    function burnLostTokens() external onlyOwner() returns (bool _success) {\r\n        uint256 _amount = balanceOf(address(this)).sub(quarantineBalance);\r\n\r\n        _burn(address(this), _amount);\r\n\r\n        emit LostTokensBurnt(_amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    // External function that updates BNT price, can only be called by Sown Contract.\r\n    function updateFromSown(uint256 gas) external onlySown {\r\n         if (shouldGrow()) {\r\n           grow();\r\n         }\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal function that implements logic to burn a part of BNT tokens on quarantine.\r\n     * Formula is based on network capitalization rules -\r\n     * Network capitalization of quarantined BNT must be equal to\r\n     * network capitalization of SOWN\r\n     * calculated as (q * pBNT - c * pSOWN) / pBNT\r\n     * where:\r\n     * q - quarantined BNT,\r\n     * pBNT - current bntPrice\r\n     * c - current sown supply\r\n     * pSOWN - SOWN pegged price ($1 USD fixed conversion price)\r\n     */\r\n    function _burnQuarantined() internal returns (uint256) {\r\n        uint256 _quarantined = quarantineBalance;\r\n                _currentPrice = _currentPrice;\r\n        uint256 _sownSupply = ConvertInterface(sownContract).totalSupply();\r\n\r\n        uint256 _bntToBurn =\r\n            ((((_quarantined.mul(_currentPrice)).div(PRICE_DECIMALS)).sub(_sownSupply)).mul(PRICE_DECIMALS))\r\n                .div(_currentPrice);\r\n\r\n        quarantineBalance = quarantineBalance.sub(_bntToBurn);\r\n\r\n        uint256 forclaiming = _bntToBurn.mul(2).div(100);\r\n\r\n        _bntToBurn = _bntToBurn - forclaiming;\r\n\r\n        _burn(address(this), _bntToBurn);\r\n\r\n        _transfer(address(this), sownContract, forclaiming);\r\n\r\n        emit QuarantineBalanceBurnt(_bntToBurn);\r\n        return _bntToBurn;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Public function that allows anyone to Claim part of the about to be burnt tokens.\r\n     * Thereby helping in updating the price.\r\n     */\r\n    function claimToken() external returns (bool _success) {\r\n\r\n        if(haveTokenToClaim && (balanceOf(msg.sender) < minClaimAmount)){\r\n            return false;\r\n        }\r\n\r\n        require(lastBalancedHour < getCurrentHour(), 'Token_Is_Already_Claimed_In_This_Hour');\r\n\r\n        if (shouldGrow()) {\r\n           grow();\r\n         }\r\n\r\n        reBalance();\r\n\r\n        require(\r\n            ConvertInterface(sownContract).transferClaimedToken(msg.sender, tokenAmount),\r\n            'Claim_Faild'\r\n        );\r\n\r\n        emit TransferClaimedToken(msg.sender, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: transfer must be greater than 0\");\r\n\r\n        if (shouldGrow()) {\r\n           grow();\r\n        }\r\n\r\n        if (!tradingActive) {\r\n            require(\r\n                _isExcludedFromLimits[from] || _isExcludedFromLimits[to],\r\n                \"Trading has not started.\"\r\n            );\r\n        }\r\n\r\n        if (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]) { // buy or sell\r\n            // not yet active\r\n            if (!buyAndSell) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n\r\n     function shouldGrow() internal view returns (bool) {\r\n        return\r\n            _priceGrowth &&\r\n            (_currentPrice < MAX_PRICE) &&\r\n            msg.sender != lpPair  &&\r\n            block.timestamp >= (_lastGrowthTime + 1 hours);\r\n    }\r\n\r\n\r\n    function setPriceGrowth(bool _flag) external onlyOwner {\r\n        if (_flag) {\r\n            _priceGrowth = _flag;\r\n            _lastGrowthTime = block.timestamp;\r\n        } else {\r\n            _priceGrowth = _flag;\r\n        }\r\n    }\r\n\r\n\r\n    // Utility function that returns the timer for claiming rewards\r\n    function claimRewardsTimer()\r\n        public\r\n        view\r\n        returns (uint256 _timer)\r\n    {\r\n        if (timeOfLastClaim + claimFreq <= block.timestamp) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                (timeOfLastClaim + claimFreq) -\r\n                block.timestamp;\r\n        }\r\n    }\r\n\r\n    // Utility function that returns the timer for next price increase\r\n    function nextPriceIncrease()\r\n        public\r\n        view\r\n        returns (uint256 _timer)\r\n    {\r\n        if (_lastGrowthTime + claimFreq <= block.timestamp) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                (_lastGrowthTime + claimFreq) -\r\n                block.timestamp;\r\n        }\r\n    }\r\n\r\n\r\n    function currentPrice() external view returns (uint256) {\r\n        return _currentPrice;\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getCurrentHour() public view returns (uint256) {\r\n        return getCurrentTime().div(1 hours);\r\n    }\r\n\r\n\r\n    function setSownContract(address _sownContractAddress) external onlyOwner() {\r\n        require(_sownContractAddress != address(0), 'SOWN_CONTRACT_CANNOTBE_NULL_ADDRESS');\r\n        sownContract = _sownContractAddress;\r\n    }\r\n\r\n    function setdistributorContract(address _distributorContractAddress) external onlyOwner() {\r\n        require(_distributorContractAddress != address(0), 'distributorContract_CANNOTBE_NULL_ADDRESS');\r\n        distributorContract = _distributorContractAddress;\r\n    }\r\n\r\n\r\n    function transferForeignToken(address _token, address _to)\r\n        external\r\n        onlyOwner\r\n        returns (bool _sent)\r\n    {\r\n        require(_token != address(0));\r\n        require(_token != address(this));\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n\r\n    // withdraw ETH\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = address(owner()).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sownContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentHour\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmountBurnt\",\"type\":\"uint256\"}],\"name\":\"BalanceNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurnt\",\"type\":\"uint256\"}],\"name\":\"BurnSown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sownAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmountReceived\",\"type\":\"uint256\"}],\"name\":\"ConvertToBnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sownAmountReceived\",\"type\":\"uint256\"}],\"name\":\"ConvertToSown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledBuyandSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledMustHaveTokenToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetSown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LostTokensBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"QuarantineBalanceBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"RecordPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferClaimedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initGrowthStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastGrowthTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceGrowth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceNetwork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForBuySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForStarting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLostTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAndSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAndSellBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sownAmount\",\"type\":\"uint256\"}],\"name\":\"convertToBnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bntAmount\",\"type\":\"uint256\"}],\"name\":\"convertToSown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksStarted\",\"type\":\"uint256\"}],\"name\":\"enableBuyandSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minHoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimamount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableMustHaveTokenToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksStarted\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveTokenToClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBalancedHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPriceIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quarantineBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setPriceGrowth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sownContractAddress\",\"type\":\"address\"}],\"name\":\"setSownContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributorContractAddress\",\"type\":\"address\"}],\"name\":\"setdistributorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sownContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"updateFromSown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Binate", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000001d6bb803fdfa55fd25e43c3bdbfbf43694bcec32", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0899e12633b0f11f64d7d77aca5f7a931702268a13b3978b0d53982fea78c9f"}