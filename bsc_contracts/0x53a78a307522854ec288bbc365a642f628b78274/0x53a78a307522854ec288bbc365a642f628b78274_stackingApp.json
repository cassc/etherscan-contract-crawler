{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract stackingApp is Ownable{\r\n    IERC20 token;\r\n    \r\n    uint256[] public packegeIds;\r\n    \r\n      struct stack {\r\n         uint amount;\r\n        uint releaseDate;\r\n        bool isSet;\r\n        bool claimed;\r\n        uint percentageReturn;\r\n        uint256 packegeId;\r\n    }\r\n    struct stacker {\r\n        bool active;\r\n        \r\n        address payable stacker;\r\n        uint totalvaluelocked;\r\n        uint256[] stackIds;\r\n        \r\n    }\r\n    mapping(address => mapping (uint256 => stack) ) public stacks;\r\n    mapping(address => stacker) public stackers;\r\n    \r\n    struct package {\r\n        string name;\r\n        uint256 minAmount;\r\n        uint256 time;\r\n        uint256 rewardPercentage;\r\n    }\r\n    mapping(uint256 => bool) public isValidPackage;\r\n    mapping(uint256 => package) public packages;\r\n   \r\n    uint256 penaltyFee;\r\n    uint256 rewardBalance;\r\n    uint256 availableReward;\r\n    event packageCreated(uint256 packageId, string name ,uint256 minAmount, uint256 time, uint256 rewardPercentage );\r\n     event packageUpdated(uint256 packageId, string name,uint256 minAmount, uint256 time, uint256 rewardPercentage );\r\n    event stackAdded(uint256 amount , uint256 packageId, address indexed stacker);\r\n    constructor(address _token){\r\n        token = IERC20(_token);\r\n    }\r\n    function depositToken(uint256 amount) public onlyOwner{\r\n        token.transferFrom(msg.sender , address(this) , amount);\r\n        rewardBalance += amount;\r\n        availableReward += amount;\r\n    }\r\n    function addPackage(uint256 time , string calldata name , uint256 minAmount, uint256 rewardPercentage) public onlyOwner returns(uint256){\r\n        uint256 packageId =  packegeIds.length+1;\r\n        isValidPackage[packageId] = true;\r\n        packages[packageId] = package(name , minAmount , time * 1 minutes, rewardPercentage);\r\n        packegeIds.push(packageId);\r\n        emit packageCreated(packageId , name , minAmount ,packages[packageId].time ,rewardPercentage);  \r\n        return packageId;\r\n    }\r\n    function updatePackage(uint256 packageId, uint256 time , string calldata name , uint256 minAmount, uint256 rewardPercentage) public onlyOwner {\r\n       require(isValidPackage[packageId]  , \"not a valid package ID\");\r\n        packages[packageId] = package(name , minAmount , time * 1 minutes, rewardPercentage);\r\n        emit packageUpdated(packageId , name , minAmount ,packages[packageId].time ,rewardPercentage);  \r\n    }\r\n     function stacktoken(uint256 amount , uint256 packageId) public returns(uint256){\r\n        require(isValidPackage[packageId]  , \"not a valid package ID\");\r\n        require(amount > 0 && amount >=packages[packageId].minAmount , \"amount below minimum stack value\");\r\n        require(rewardProcessesable(packageId , amount) , \"available reward balance insufient\");\r\n        token.transferFrom(msg.sender , address(this) , amount);\r\n        uint256 stackID = stackers[msg.sender].stackIds.length+1;\r\n        stacks[msg.sender][stackID] =   stack(amount , block.timestamp + packages[packageId].time , true , false,packages[packageId].rewardPercentage ,packageId ); \r\n        stackers[msg.sender].stackIds.push(stackID);\r\n        stackers[msg.sender].totalvaluelocked += amount;\r\n        stackers[msg.sender].active = true;\r\n       uint256 expectedReward  = amount * packages[packageId].rewardPercentage / 100;\r\n       availableReward -= expectedReward;\r\n       emit stackAdded(amount , packageId  , msg.sender);  \r\n        return stackID;\r\n    }\r\n    function expectedStackReward(address account,uint256 stackId) public view returns(uint256){\r\n        require(stacks[account][stackId].isSet && !stacks[account][stackId].claimed , \"not active stack\");\r\n        return (stacks[account][stackId].amount * stacks[account][stackId].percentageReturn / 100);\r\n        \r\n    }\r\n    function stackAmount(address account ,uint256 stackId) public view returns(uint256){\r\n        return stacks[account][stackId].amount;\r\n    }\r\n    function totalvaluelocked(address account) public view returns(uint256){\r\n      return stackers[account].totalvaluelocked ;\r\n    } \r\n    function stackIDs(address account) public view returns(uint256[] memory){\r\n        return stackers[account].stackIds;\r\n    }\r\n    function stackStatus(address account, uint256 stackId) public view returns(bool , bool , bool){\r\n        \r\n        return(stacks[account][stackId].isSet,stacks[account][stackId].claimed , block.timestamp > stacks[account][stackId].releaseDate);\r\n    }\r\n   \r\n    function rewardProcessesable(uint256 packageId , uint256 amount) private view returns(bool){\r\n        uint256 expectedReward = amount * packages[packageId].rewardPercentage / 100;\r\n        if(availableReward >= expectedReward) return true;\r\n        return false;\r\n    }\r\n    function unstack(uint256 stackId) public{\r\n         require(stacks[msg.sender][stackId].isSet && !stacks[msg.sender][stackId].claimed , \"not active stack\");\r\n         require(block.timestamp > stacks[msg.sender][stackId].releaseDate , \"not yet time\");\r\n         uint256 reward = stacks[msg.sender][stackId].amount * stacks[msg.sender][stackId].percentageReturn / 100;\r\n         rewardBalance -= reward;\r\n         stacks[msg.sender][stackId].claimed = true;\r\n         token.transfer(msg.sender ,stacks[msg.sender][stackId].amount + reward );\r\n         stackers[msg.sender].totalvaluelocked -= stacks[msg.sender][stackId].amount;\r\n    }\r\n     function earlyClaim(uint256 stackId) public{\r\n         require(stacks[msg.sender][stackId].isSet && !stacks[msg.sender][stackId].claimed , \"not active stack\");\r\n         uint256 penalty = stacks[msg.sender][stackId].amount * penaltyFee / 100;\r\n         rewardBalance += penalty;\r\n         uint256 expectedReward  = stacks[msg.sender][stackId].amount * stacks[msg.sender][stackId].percentageReturn / 100;\r\n         availableReward += expectedReward;\r\n         stacks[msg.sender][stackId].claimed = true;\r\n         token.transfer(msg.sender ,stacks[msg.sender][stackId].amount - penalty );\r\n         stackers[msg.sender].totalvaluelocked -= stacks[msg.sender][stackId].amount;\r\n    } \r\n    function setPenalty(uint256 _penalty) public onlyOwner {\r\n        require(_penalty < 100 , \"invalid percentage\");\r\n        penaltyFee = _penalty;\r\n    }\r\n    function getPackageIds() public view returns(uint256[] memory){\r\n        return packegeIds;\r\n    }\r\n    function withdrawReward(uint256 amount) public onlyOwner {\r\n        require(amount <= token.balanceOf(address(this)) , \"insufient funds\");\r\n        token.transfer(owner() ,amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"packageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"packageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stacker\",\"type\":\"address\"}],\"name\":\"stackAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"addPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stackId\",\"type\":\"uint256\"}],\"name\":\"earlyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stackId\",\"type\":\"uint256\"}],\"name\":\"expectedStackReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPackageIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isValidPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packegeIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"setPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stackId\",\"type\":\"uint256\"}],\"name\":\"stackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stackIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stackId\",\"type\":\"uint256\"}],\"name\":\"stackStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stackers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"stacker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalvaluelocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentageReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packegeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"}],\"name\":\"stacktoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalvaluelocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stackId\",\"type\":\"uint256\"}],\"name\":\"unstack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "stackingApp", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d993ec7b44276615bb2f6f20361ab34fbf0ec49", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29bb67acd6d7babf09de080745c3e1115ba8bc6428ee5186ad6ea89bf2c2b64a"}