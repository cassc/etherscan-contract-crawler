{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \r\n * | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n * | |  ____  ____  | || |  _________   | || |   _____      | || |     _____    | || |  ____  ____  | |\r\n * | | |_   ||   _| | || | |_   ___  |  | || |  |_   _|     | || |    |_   _|   | || | |_  _||_  _| | |\r\n * | |   | |__| |   | || |   | |_  \\_|  | || |    | |       | || |      | |     | || |   \\ \\  / /   | |\r\n * | |   |  __  |   | || |   |  _|  _   | || |    | |   _   | || |      | |     | || |    > `' <    | |\r\n * | |  _| |  | |_  | || |  _| |___/ |  | || |   _| |__/ |  | || |     _| |_    | || |  _/ /'`\\ \\_  | |\r\n * | | |____||____| | || | |_________|  | || |  |________|  | || |    |_____|   | || | |____||____| | |\r\n * | |              | || |              | || |              | || |              | || |              | |\r\n * | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\r\n *  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' '\r\n * \r\n *\r\n * 10/18/2023\r\n **/\r\n\r\npragma solidity ^0.8.17;\r\n\r\n// File contracts/ln/interface/ILowLevelMessager.sol\r\n// License-Identifier: MIT\r\n\r\ninterface ILowLevelMessageSender {\r\n    function registerRemoteReceiver(uint256 remoteChainId, address remoteBridge) external;\r\n    function sendMessage(uint256 remoteChainId, bytes memory message, bytes memory params) external payable;\r\n}\r\n\r\ninterface ILowLevelMessageReceiver {\r\n    function registerRemoteSender(uint256 remoteChainId, address remoteBridge) external;\r\n    function recvMessage(address remoteSender, address localReceiver, bytes memory payload) external;\r\n}\r\n\r\n// File contracts/ln/base/LnAccessController.sol\r\n// License-Identifier: MIT\r\n\r\n/// @title LnAccessController\r\n/// @notice LnAccessController is a contract to control the access permission \r\n/// @dev See https://github.com/helix-bridge/contracts/tree/master/helix-contract\r\ncontract LnAccessController {\r\n    address public dao;\r\n    address public operator;\r\n\r\n    mapping(address=>bool) public callerWhiteList;\r\n\r\n    modifier onlyDao() {\r\n        require(msg.sender == dao, \"!dao\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"!operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhiteListCaller() {\r\n        require(callerWhiteList[msg.sender], \"caller not in white list\");\r\n        _;\r\n    }\r\n\r\n    function _initialize(address _dao) internal {\r\n        dao = _dao;\r\n        operator = _dao;\r\n    }\r\n\r\n    function setOperator(address _operator) onlyDao external {\r\n        operator = _operator;\r\n    }\r\n\r\n    function authoriseAppCaller(address appAddress, bool enable) onlyDao external {\r\n        callerWhiteList[appAddress] = enable;\r\n    }\r\n\r\n    function transferOwnership(address _dao) onlyDao external {\r\n        dao = _dao;\r\n    }\r\n}\r\n\r\n// File contracts/ln/messager/interface/ILayerZeroEndpoint.sol\r\n// License-Identifier: MIT\r\n\r\ninterface ILayerZeroEndpoint {\r\n    function send(\r\n        uint16 _dstChainId,\r\n        bytes calldata _destination,\r\n        bytes calldata _payload,\r\n        address payable _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes calldata _adapterParams\r\n    ) external payable;\r\n\r\n    function estimateFees(\r\n        uint16 _dstChainId,\r\n        address _userApplication,\r\n        bytes calldata _payload,\r\n        bool _payInZRO,\r\n        bytes calldata _adapterParam\r\n    ) external view returns (uint nativeFee, uint zroFee);\r\n}\r\n\r\n// File contracts/ln/messager/LayerZeroMessager.sol\r\n// License-Identifier: MIT\r\n\r\n\r\n\r\ncontract LayerZeroMessager is LnAccessController {\r\n    ILayerZeroEndpoint public endpoint;\r\n\r\n    struct RemoteMessager {\r\n        uint16 lzRemoteChainId;\r\n        address messager;\r\n    }\r\n\r\n    // app remoteChainId => layerzero remote messager\r\n    mapping(uint256=>RemoteMessager) public remoteMessagers;\r\n    // lz remoteChainId => trustedRemotes\r\n    mapping(uint16=>bytes32) public trustedRemotes;\r\n\r\n    // token bridge pair\r\n    // hash(lzRemoteChainId, localAppAddress) => remoteAppAddress\r\n    mapping(bytes32=>address) public remoteAppReceivers;\r\n    mapping(bytes32=>address) public remoteAppSenders;\r\n\r\n    event CallResult(uint16 lzRemoteChainId, bytes srcAddress, bool successed);\r\n    event CallerUnMatched(uint16 lzRemoteChainId, bytes srcAddress, address remoteAppAddress);\r\n\r\n    constructor(address _dao, address _endpoint) {\r\n        _initialize(_dao);\r\n        endpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    modifier onlyRemoteBridge(uint16 lzRemoteChainId, bytes calldata srcAddress) {\r\n        require(msg.sender == address(endpoint), \"invalid caller\");\r\n        require(trustedRemotes[lzRemoteChainId] == keccak256(srcAddress), \"invalid remote caller\");\r\n        _;\r\n    }\r\n\r\n    function setRemoteMessager(uint256 _appRemoteChainId, uint16 _lzRemoteChainId, address _remoteMessager) onlyDao external {\r\n        remoteMessagers[_appRemoteChainId] = RemoteMessager(_lzRemoteChainId, _remoteMessager);\r\n        trustedRemotes[_lzRemoteChainId] = keccak256(abi.encodePacked(_remoteMessager, address(this)));\r\n    }\r\n\r\n    function registerRemoteReceiver(uint256 _remoteChainId, address _remoteBridge) onlyWhiteListCaller external {\r\n        RemoteMessager memory remoteMessager = remoteMessagers[_remoteChainId];\r\n        require(remoteMessager.messager != address(0), \"remote not configured\");\r\n        bytes32 key = keccak256(abi.encodePacked(remoteMessager.lzRemoteChainId, msg.sender));\r\n        remoteAppReceivers[key] = _remoteBridge;\r\n    }\r\n\r\n    function registerRemoteSender(uint256 _remoteChainId, address _remoteBridge) onlyWhiteListCaller external {\r\n        RemoteMessager memory remoteMessager = remoteMessagers[_remoteChainId];\r\n        require(remoteMessager.messager != address(0), \"remote not configured\");\r\n        bytes32 key = keccak256(abi.encodePacked(remoteMessager.lzRemoteChainId, msg.sender));\r\n        remoteAppSenders[key] = _remoteBridge;\r\n    }\r\n\r\n    function sendMessage(uint256 _remoteChainId, bytes memory _message, bytes memory _params) onlyWhiteListCaller external  payable {\r\n        address refunder = address(bytes20(_params));\r\n        RemoteMessager memory remoteMessager = remoteMessagers[_remoteChainId];\r\n        require(remoteMessager.messager != address(0), \"remote not configured\");\r\n        bytes memory destination = abi.encodePacked(\r\n            remoteMessager.messager,\r\n            address(this)\r\n        );\r\n        bytes32 key = keccak256(abi.encodePacked(remoteMessager.lzRemoteChainId, msg.sender));\r\n        address remoteAppAddress = remoteAppReceivers[key];\r\n        require(remoteAppAddress != address(0), \"app pair not registered\");\r\n        bytes memory lzPayload = abi.encode(msg.sender, remoteAppAddress, _message);\r\n        endpoint.send{ value: msg.value }(\r\n            remoteMessager.lzRemoteChainId,\r\n            destination,\r\n            lzPayload,\r\n            payable(refunder),\r\n            // zro payment, future parameter\r\n            address(0x0),\r\n            bytes(\"\")\r\n        );\r\n    }\r\n\r\n    function lzReceive(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64, //nonce unused\r\n        bytes calldata _payload) onlyRemoteBridge(_srcChainId, _srcAddress) external {\r\n        // call\r\n        (address remoteAppAddress, address localAppAddress, bytes memory message) = abi.decode(_payload, (address, address, bytes));\r\n        bytes32 key = keccak256(abi.encodePacked(_srcChainId, localAppAddress));\r\n        if (remoteAppAddress != remoteAppSenders[key]) {\r\n            emit CallerUnMatched(_srcChainId, _srcAddress, remoteAppAddress);\r\n            return;\r\n        }\r\n        (bool success,) = localAppAddress.call(message);\r\n        // don't revert to prevent message block\r\n        emit CallResult(_srcChainId, _srcAddress, success);\r\n    }\r\n\r\n    function fee(\r\n        uint256 _remoteChainId,\r\n        bytes memory _message\r\n    ) external view returns(uint256 nativeFee, uint256 zroFee) {\r\n        RemoteMessager memory remoteMessager = remoteMessagers[_remoteChainId];\r\n        require(remoteMessager.messager != address(0), \"messager not configured\");\r\n        return endpoint.estimateFees(\r\n            remoteMessager.lzRemoteChainId,\r\n            remoteMessager.messager,\r\n            _message,\r\n            false,\r\n            bytes(\"\")\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lzRemoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"successed\",\"type\":\"bool\"}],\"name\":\"CallResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lzRemoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteAppAddress\",\"type\":\"address\"}],\"name\":\"CallerUnMatched\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"authoriseAppCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_remoteBridge\",\"type\":\"address\"}],\"name\":\"registerRemoteReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_remoteBridge\",\"type\":\"address\"}],\"name\":\"registerRemoteSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteAppReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteAppSenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remoteMessagers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"lzRemoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"messager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_appRemoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_lzRemoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_remoteMessager\",\"type\":\"address\"}],\"name\":\"setRemoteMessager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemotes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LayerZeroMessager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000088a39b052d477cfde47600a7c9950a441ce61cb40000000000000000000000003c2269811836af69497e5f486a85d7316753cf62", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db028a26584109a9b9f45c01ff6274669d37f2c38b80a0d14143b1ad35a1ea78"}