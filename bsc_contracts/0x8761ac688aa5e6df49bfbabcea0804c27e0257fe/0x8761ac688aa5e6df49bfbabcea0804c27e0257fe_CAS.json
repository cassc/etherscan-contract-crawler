{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastValue;\r\n                set._indexes[lastValue] = valueIndex;\r\n            }\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"e003\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"e004\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"e005\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"e006\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface swapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface swapRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n}\r\n\r\ncontract middleContract is Ownable {\r\n    address public caller;\r\n    constructor (address _account)  {\r\n        caller = _account;\r\n\r\n    }\r\n    function claimToken(IERC20 _token) external {\r\n        require(msg.sender == caller);\r\n        _token.transfer(msg.sender, _token.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\ninterface IPair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract CAS is Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct buyFeeStruct {\r\n        uint256 buyFeeForMarket;\r\n        uint256 buyFeeForBurn;\r\n        uint256 buyFeeForAddPool;\r\n        uint256 buyFeeForTeam;\r\n    }\r\n\r\n    struct sellFeeStruct {\r\n        uint256 sellFeeForMarket;\r\n        uint256 sellFeeForBurn;\r\n        uint256 sellFeeForAddPool;\r\n        uint256 sellFeeForTeam;\r\n    }\r\n\r\n    struct txFeeStruct {\r\n        uint256 txFeeForMarket;\r\n        uint256 txFeeForBurn;\r\n        uint256 txFeeForAddPool;\r\n        uint256 txFeeForTeam;\r\n    }\r\n\r\n    struct feeAddressListStruct {\r\n        address[] feeListForBuy;\r\n        address[] feeListForSell;\r\n        address[] feeListForTransfer;\r\n    }\r\n\r\n    struct swapInfoStruct {\r\n        bool canAddLiquify;\r\n        address marketAddress;\r\n        address routerAddress;\r\n        address swapAndLiquifyToken;\r\n        address shareToken;\r\n        address WETH;\r\n        uint256 minAddPoolAmount;\r\n    }\r\n\r\n    struct tokenStruct {\r\n        uint256 decimals;\r\n        buyFeeStruct buyFee;\r\n        sellFeeStruct sellFee;\r\n        txFeeStruct txFee;\r\n        AddressRateItem teamConfig;\r\n        AddressRateItem nodeConfig;\r\n        swapInfoStruct swapInfo;\r\n    }\r\n\r\n    struct feeStruct {\r\n        uint256 marketFee;\r\n        uint256 burnFee;\r\n        uint256 liquidityFee;\r\n        uint256 teamFee;\r\n        uint256 txAmount;\r\n        uint256 feeListNum;\r\n        uint256 teamPerFee;\r\n    }\r\n\r\n\r\n    struct AddressRateItem {\r\n        address[] AddressList;\r\n        uint256[] RateList;\r\n        uint256 TotalRate;\r\n    }\r\n\r\n    AddressRateItem public teamConfig;\r\n    AddressRateItem public nodeConfig;\r\n    address public marketAddress;\r\n    address public liquifyAddress;\r\n    address public deadAddress = address(0);\r\n    address public WETH;\r\n    address public swapAndLiquifyToken;\r\n    address public shareToken;\r\n    swapRouter public routerAddress;\r\n    EnumerableSet.AddressSet private pairAddressList;\r\n    uint256 private _totalSupply;\r\n    middleContract public middleContractAddress;\r\n    uint256[] public nodeFee_lpFee_autoPool = [0, 500, 0];\r\n    uint256 public allRate = 10000;\r\n    uint256 public buyFeeForMarket = 0;\r\n    uint256 public buyFeeForBurn = 0;\r\n    uint256 public buyFeeForAddPool = 500;\r\n    uint256 public buyFeeForTeam = 0;\r\n    uint256 public sellFeeForMarket = 0;\r\n    uint256 public sellFeeForBurn = 0;\r\n    uint256 public sellFeeForAddPool = 500;\r\n    uint256 public sellFeeForTeam = 0;\r\n    uint256 public txFeeForMarket = 0;\r\n    uint256 public txFeeForBurn = 0;\r\n    uint256 public txFeeForAddPool = 500;\r\n    uint256 public txFeeForTeam = 0;\r\n    uint256 public minAddPoolAmount = 25 * (10 ** 17);\r\n    uint256 public minHolderAmount = 0 * (10 ** 14);\r\n    uint256 public adjustLpAmount = 0;\r\n    uint256 public splitLpAccountNumPerTime = 20;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    bool public canAddLiquify = false;\r\n    bool public liquifySlippage = true;\r\n    bool inSwapAndLiquify;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public vipList;\r\n    mapping(address => bool) public contractList;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    address[] public ldxUser;\r\n    uint256 public ldxindex;\r\n    mapping(address => bool) public havepush;\r\n\r\n    event isAddOrMoveLiquidity(bool _isAdd, string _type);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event swapAndLiquifyEvent(uint256 amount);\r\n    event addPairEvent(address _pair, uint256 _time);\r\n    event transferType(string _type, address sender, address recipient, uint256 amount);\r\n    event checkIsAddLiquidityEvent(address token0, address token1, uint256 r0, uint256 r1, uint256 bal0, uint256 bal1, bool r0_e, bool r1_e);\r\n    event addUser(address _user, uint256 _time);\r\n    event swapAndLiquifyEvent(string _type, uint256 _UsdtAmount, uint256 _thisAmount);\r\n    event takeFeeEvent(string _type, address _user, uint256 amount);\r\n    event splitLpDividendEvent(address _user, uint256 _amount, uint256 _allDividendAmount, uint256 _userLpAmount, uint256 _allLpAmount, uint256 _time);\r\n    event nodeDividendEvent(address _user, uint256 _amount, uint256 _allDividendAmount, uint256 _time);\r\n\r\n    constructor (address newOwner_, string memory name_, string memory symbol_, uint256 decimals_, uint256 totalSupply_, address _marketAddress, address _liquifyAddress)  {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_.mul(10 ** _decimals);\r\n        _balances[newOwner_] = _totalSupply;\r\n        middleContractAddress = new middleContract(address(this));\r\n        vipList[msg.sender] = true;\r\n        vipList[newOwner_] = true;\r\n        vipList[address(this)] = true;\r\n        vipList[deadAddress] = true;\r\n        vipList[address(middleContractAddress)] = true;\r\n        vipList[_marketAddress] = true;\r\n        vipList[_liquifyAddress] = true;\r\n        marketAddress = _marketAddress;\r\n        liquifyAddress = _liquifyAddress;\r\n        contractList[address(this)] = true;\r\n        contractList[address(middleContractAddress)] = true;\r\n        emit Transfer(address(0), newOwner_, _totalSupply);\r\n    }\r\n\r\n    function setHSwapInfo(bool _canAddLiquify, swapRouter _routerAddress, address _WETH, address _swapAndLiquifyToken, address _shareToken, uint256 _amount, uint256 _minAddPoolAmount) external onlyOwner {\r\n        require(address(_routerAddress) != address(0));\r\n        require(_WETH != address(0));\r\n        require(_swapAndLiquifyToken != address(0));\r\n        require(_shareToken != address(0));\r\n        canAddLiquify = _canAddLiquify;\r\n        routerAddress = _routerAddress;\r\n        WETH = _WETH;\r\n        swapAndLiquifyToken = _swapAndLiquifyToken;\r\n        shareToken = _shareToken;\r\n        minAddPoolAmount = _minAddPoolAmount;\r\n        IERC20(address(this)).approve(address(_routerAddress), _amount);\r\n        if (_swapAndLiquifyToken != WETH) {\r\n            IERC20(_swapAndLiquifyToken).approve(address(_routerAddress), _amount);\r\n        }\r\n    }\r\n\r\n    function setHSplitLpAccountNumPerTime(uint256 _splitLpAccountNumPerTime) external onlyOwner {\r\n        splitLpAccountNumPerTime = _splitLpAccountNumPerTime;\r\n    }\r\n\r\n    function setHShareToken(address _shareToken) external onlyOwner {\r\n        shareToken = _shareToken;\r\n    }\r\n\r\n    function setHNodeFee_lpFee_autoPool(uint256[] calldata _NodeFee_lpFee_autoPool) external onlyOwner {\r\n        nodeFee_lpFee_autoPool = _NodeFee_lpFee_autoPool;\r\n    }\r\n\r\n    function setAddLiquifyMode(bool _canAddLiquify) external onlyOwner {\r\n        canAddLiquify = _canAddLiquify;\r\n    }\r\n\r\n    function setContractList(address[] memory _contractAddressList, bool _status) external onlyOwner {\r\n        for (uint256 j = 0; j < _contractAddressList.length; j++) {\r\n            contractList[_contractAddressList[j]] = _status;\r\n        }\r\n    }\r\n\r\n    function setHLiquifySlippage(bool _liquifySlippage) external onlyOwner {\r\n        liquifySlippage = _liquifySlippage;\r\n    }\r\n\r\n    function setHVipList(address[] calldata _userList, bool _status) external onlyOwner {\r\n        for (uint256 i = 0; i < _userList.length; i++) {\r\n            address _user = _userList[i];\r\n            vipList[_user] = _status;\r\n        }\r\n    }\r\n\r\n    function setBuyFees(uint256 _buyFeeForMarket, uint256 _buyFeeForBurn, uint256 _buyFeeForAddPool, uint256 _buyFeeForTeam) external onlyOwner {\r\n        buyFeeForMarket = _buyFeeForMarket;\r\n        buyFeeForBurn = _buyFeeForBurn;\r\n        buyFeeForAddPool = _buyFeeForAddPool;\r\n        buyFeeForTeam = _buyFeeForTeam;\r\n    }\r\n\r\n    function setSellFees(uint256 _sellFeeForMarket, uint256 _sellFeeForBurn, uint256 _sellFeeForAddPool, uint256 _sellFeeForTeam) external onlyOwner {\r\n        sellFeeForMarket = _sellFeeForMarket;\r\n        sellFeeForBurn = _sellFeeForBurn;\r\n        sellFeeForAddPool = _sellFeeForAddPool;\r\n        sellFeeForTeam = _sellFeeForTeam;\r\n    }\r\n\r\n    function setTxFees(uint256 _txFeeForMarket, uint256 _txFeeForBurn, uint256 _txFeeForAddPool, uint256 _txFeeForTeam) external onlyOwner {\r\n        txFeeForMarket = _txFeeForMarket;\r\n        txFeeForBurn = _txFeeForBurn;\r\n        txFeeForAddPool = _txFeeForAddPool;\r\n        txFeeForTeam = _txFeeForTeam;\r\n    }\r\n\r\n    function setHTeamConfig(address[] memory _teamAddressList, uint256[] memory _teamRateList) public onlyOwner {\r\n        require(_teamAddressList.length == _teamRateList.length, \"e001\");\r\n        uint256 TotalRate = 0;\r\n        for (uint256 i = 0; i < _teamRateList.length; i++) {\r\n            TotalRate = TotalRate.add(_teamRateList[i]);\r\n        }\r\n        teamConfig.AddressList = _teamAddressList;\r\n        teamConfig.RateList = _teamRateList;\r\n        teamConfig.TotalRate = TotalRate;\r\n    }\r\n\r\n    function setHNodeConfig(address[] memory _nodeAddressList, uint256[] memory _nodeRateList) external onlyOwner {\r\n        require(_nodeAddressList.length == _nodeRateList.length, \"e001\");\r\n        uint256 TotalRate = 0;\r\n        for (uint256 i = 0; i < _nodeRateList.length; i++) {\r\n            TotalRate = TotalRate.add(_nodeRateList[i]);\r\n        }\r\n        nodeConfig.AddressList = _nodeAddressList;\r\n        nodeConfig.RateList = _nodeRateList;\r\n        nodeConfig.TotalRate = TotalRate;\r\n    }\r\n\r\n\r\n    function setHMinAddPoolAmount(uint256 _minAddPoolAmount) external onlyOwner {\r\n        minAddPoolAmount = _minAddPoolAmount;\r\n    }\r\n\r\n    function setHMarketAddress(address _marketAddress) external onlyOwner {\r\n        marketAddress = _marketAddress;\r\n        vipList[_marketAddress] = true;\r\n    }\r\n\r\n    function setHLiquifyAddress(address _liquifyAddress) external onlyOwner {\r\n        liquifyAddress = _liquifyAddress;\r\n        vipList[_liquifyAddress] = true;\r\n    }\r\n\r\n    function setHAdjustLpAmount(uint256 _adjustLpAmount) external onlyOwner {\r\n        adjustLpAmount = _adjustLpAmount;\r\n    }\r\n\r\n    function addPairAddressList(address[] calldata _pairAddressList) external onlyOwner {\r\n        for (uint256 i = 0; i < _pairAddressList.length; i++) {\r\n            pairAddressList.add(_pairAddressList[i]);\r\n        }\r\n    }\r\n\r\n    function removePairAddressList(address[] calldata _pairAddressList) external onlyOwner {\r\n        for (uint256 i = 0; i < _pairAddressList.length; i++) {\r\n            if (pairAddressList.contains(_pairAddressList[i])) {\r\n                pairAddressList.remove(_pairAddressList[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPairAddressList() external view returns (address[] memory) {\r\n        return pairAddressList.values();\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function getErc20TokenApproved(IERC20 _token, uint256 _amount) external onlyOwner {\r\n        _token.approve(address(routerAddress), _amount);\r\n    }\r\n\r\n    function getApproved(uint256 _amount) external onlyOwner {\r\n        IERC20(address(this)).approve(address(routerAddress), _amount);\r\n        if (swapAndLiquifyToken != address(0) && swapAndLiquifyToken != WETH) {\r\n            IERC20(swapAndLiquifyToken).approve(address(routerAddress), _amount);\r\n        }\r\n    }\r\n\r\n    function _splitNodeDividend(uint256 _sendAmount) private returns (bool) {\r\n        if (_sendAmount == 0) {\r\n            return true;\r\n        }\r\n        for (uint256 i = 0; i < nodeConfig.AddressList.length; i++) {\r\n            uint256 splitAmount = _sendAmount.mul(nodeConfig.RateList[i]).div(nodeConfig.TotalRate);\r\n            address to = nodeConfig.AddressList[i];\r\n            if (shareToken == WETH) {\r\n                payable(to).transfer(splitAmount);\r\n            } else {\r\n                IERC20(shareToken).transfer(to, splitAmount);\r\n            }\r\n            emit nodeDividendEvent(to, splitAmount, _sendAmount, block.timestamp);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _swapAndSplitDividend(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 nodeFee = nodeFee_lpFee_autoPool[0];\r\n        uint256 lpFee = nodeFee_lpFee_autoPool[1];\r\n        uint256 autoPool = nodeFee_lpFee_autoPool[2];\r\n        uint256 totalRate = nodeFee.add(lpFee).add(autoPool);\r\n        if (totalRate == 0) {\r\n            return;\r\n        }\r\n        uint256 addPoolAmount = contractTokenBalance.mul(autoPool).div(2).div(totalRate);\r\n        uint256 swapAmount = contractTokenBalance.sub(addPoolAmount);\r\n        uint256 initialBalance1 = swapAndLiquifyToken == WETH ? address(this).balance : IERC20(swapAndLiquifyToken).balanceOf(address(this));\r\n        require(_swapTokensForEth(swapAmount), \"t001\");\r\n        uint256 initialBalance2 = swapAndLiquifyToken == WETH ? address(this).balance : IERC20(swapAndLiquifyToken).balanceOf(address(this));\r\n        uint256 allToShare = initialBalance2.sub(initialBalance1);\r\n        uint256 addPoolAmount2 = allToShare.mul(autoPool.div(2)).div(nodeFee.add(lpFee).add(autoPool.div(2)));\r\n        if (addPoolAmount > 0 && addPoolAmount2 > 0) {\r\n            require(_addLiquidity(addPoolAmount, addPoolAmount2), \"t002\");\r\n        }\r\n        if (nodeFee == 0 && lpFee == 0) {\r\n            return;\r\n        }\r\n        if (swapAndLiquifyToken == shareToken) {\r\n            uint256 nodeFeeAmount = (allToShare.sub(addPoolAmount2)).mul(nodeFee).div(nodeFee.add(lpFee));\r\n            uint256 lpFeeAmount = (allToShare.sub(addPoolAmount2)).sub(nodeFeeAmount);\r\n            if (nodeFeeAmount > 0) {\r\n                require(_splitNodeDividend(nodeFeeAmount), \"t003\");\r\n            }\r\n            if (lpFeeAmount > 0) {\r\n                require(_splitLpDividend(lpFeeAmount), \"t004\");\r\n            }\r\n        } else {\r\n            initialBalance1 = shareToken == WETH ? address(this).balance : IERC20(shareToken).balanceOf(address(this));\r\n            _swapTokensForShareToken(allToShare.sub(addPoolAmount2));\r\n            initialBalance2 = shareToken == WETH ? address(this).balance : IERC20(shareToken).balanceOf(address(this));\r\n            uint256 nodeFeeAmount = (initialBalance2.sub(initialBalance1)).mul(nodeFee).div(nodeFee.add(lpFee));\r\n            uint256 lpFeeAmount = (initialBalance2.sub(initialBalance1)).sub(nodeFeeAmount);\r\n            if (nodeFeeAmount > 0) {\r\n                require(_splitNodeDividend(nodeFeeAmount), \"t003\");\r\n            }\r\n            if (lpFeeAmount > 0) {\r\n                require(_splitLpDividend(lpFeeAmount), \"t004\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndSplitDividendByOwner() external lockTheSwap onlyOwner {\r\n        require(balanceOf(address(this)) >= minAddPoolAmount);\r\n        uint256 contractTokenBalance = minAddPoolAmount;\r\n        _swapAndSplitDividend(contractTokenBalance);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private returns (bool){\r\n        if (tokenAmount == 0) {\r\n            return true;\r\n        }\r\n        require(swapAndLiquifyToken != address(0), \"e001\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapAndLiquifyToken;\r\n\r\n        if (swapAndLiquifyToken != WETH) {\r\n            routerAddress.swapExactTokensForTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(middleContractAddress),\r\n                block.timestamp\r\n            );\r\n            middleContractAddress.claimToken(IERC20(swapAndLiquifyToken));\r\n        } else {\r\n            routerAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _swapTokensForShareToken(uint256 tokenAmount) private returns (bool){\r\n        if (tokenAmount == 0) {\r\n            return true;\r\n        }\r\n        require(swapAndLiquifyToken != address(0), \"e001\");\r\n        require(shareToken != address(0), \"e002\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = swapAndLiquifyToken;\r\n        path[1] = shareToken;\r\n        if (swapAndLiquifyToken != WETH) {\r\n            routerAddress.swapExactTokensForTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(middleContractAddress),\r\n                block.timestamp\r\n            );\r\n            middleContractAddress.claimToken(IERC20(shareToken));\r\n        } else {\r\n            routerAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    event addLiquidityEvent(address tokenA, address TokenB, uint256 amountA, uint256 AmountB, uint256 _time);\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private returns (bool) {\r\n        if (tokenAmount == 0 || ethAmount == 0) {\r\n            return true;\r\n        }\r\n        require(swapAndLiquifyToken != address(0), \"e001\");\r\n        if (swapAndLiquifyToken != WETH) {\r\n            routerAddress.addLiquidity(\r\n                address(swapAndLiquifyToken),\r\n                address(this),\r\n                ethAmount,\r\n                tokenAmount,\r\n                0,\r\n                0,\r\n                liquifyAddress,\r\n                block.timestamp\r\n            );\r\n        } else {\r\n            routerAddress.addLiquidityETH{value : ethAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0,\r\n                0,\r\n                liquifyAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n        emit addLiquidityEvent(address(this), swapAndLiquifyToken, tokenAmount, ethAmount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function getPairAddress() public view returns (address) {\r\n        try swapFactory(swapRouter(routerAddress).factory()).getPair(address(this), swapAndLiquifyToken) returns (address pairaddress){\r\n            return pairaddress;\r\n        } catch {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function getPairInfo(address _pair) public {\r\n        uint256 i = 0;\r\n        try IPair(_pair).token0() returns (address tokenA){\r\n            if (tokenA == address(this)) {\r\n                i = i.add(1);\r\n            }\r\n        } catch {}\r\n        try IPair(_pair).token1() returns (address tokenB){\r\n            if (tokenB == address(this)) {\r\n                i = i.add(1);\r\n            }\r\n        } catch {}\r\n        if (i == 1) {\r\n            pairAddressList.add(_pair);\r\n            emit addPairEvent(_pair, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function takeSellFee(address sender, address recipient, uint256 amount, uint256 marketRate, uint256 burnRate, uint256 liquidityRate, uint256 teamRate) private {\r\n        feeStruct memory x = feeStruct(0, 0, 0, 0, 0, 0, 0);\r\n        x.marketFee = marketRate > 0 ? amount.mul(marketRate).div(allRate) : 0;\r\n        x.burnFee = burnRate > 0 ? amount.mul(burnRate).div(allRate) : 0;\r\n        x.liquidityFee = liquidityRate > 0 ? amount.mul(liquidityRate).div(allRate) : 0;\r\n        x.teamFee = teamRate > 0 ? amount.mul(teamRate).div(allRate) : 0;\r\n        if (x.marketFee > 0) {\r\n            _balances[marketAddress] = _balances[marketAddress].add(x.marketFee);\r\n            emit takeFeeEvent(\"marketFee\", marketAddress, x.marketFee);\r\n            emit Transfer(sender, marketAddress, x.marketFee);\r\n        }\r\n        if (x.burnFee > 0) {\r\n            _balances[deadAddress] = _balances[deadAddress].add(x.burnFee);\r\n            emit takeFeeEvent(\"burnFee\", deadAddress, x.burnFee);\r\n            emit Transfer(sender, deadAddress, x.burnFee);\r\n        }\r\n        if (x.liquidityFee > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(x.liquidityFee);\r\n            emit takeFeeEvent(\"liquidityFee\", address(this), x.liquidityFee);\r\n            emit Transfer(sender, address(this), x.liquidityFee);\r\n        }\r\n        if (x.teamFee > 0) {\r\n            x.feeListNum = teamConfig.AddressList.length;\r\n            if (x.feeListNum > 0) {\r\n                for (uint256 i = 0; i < x.feeListNum; i++) {\r\n                    uint256 teamFeeAmount = x.teamFee.mul(teamConfig.RateList[i]).div(teamConfig.TotalRate);\r\n                    address to = teamConfig.AddressList[i];\r\n                    _balances[to] = _balances[to].add(teamFeeAmount);\r\n                    emit takeFeeEvent(\"teamFee\", to, teamFeeAmount);\r\n                    emit Transfer(sender, to, teamFeeAmount);\r\n                }\r\n            } else {\r\n                x.teamFee = 0;\r\n            }\r\n        }\r\n        x.txAmount = amount.sub(x.marketFee).sub(x.burnFee).sub(x.liquidityFee).sub(x.teamFee);\r\n        _balances[recipient] = _balances[recipient].add(x.txAmount);\r\n        emit Transfer(sender, recipient, x.txAmount);\r\n    }\r\n\r\n    function addPair(address _address) private {\r\n        if (isContract(_address) && !pairAddressList.contains(_address) && !contractList[_address]) {\r\n            getPairInfo(_address);\r\n        }\r\n    }\r\n\r\n    function checkIsAddLiquidity(address recipient) internal returns (bool ldxAdd, bool ldxRemove){\r\n        address token0 = IPair(recipient).token0();\r\n        address token1 = IPair(recipient).token1();\r\n        (uint256 r0,uint256 r1,) = IPair(recipient).getReserves();\r\n        uint256 bal1 = IERC20(token1).balanceOf(recipient);\r\n        uint256 bal0 = IERC20(token0).balanceOf(recipient);\r\n        emit checkIsAddLiquidityEvent(token0, token1, r0, r1, bal0, bal1, bal0 > r0, bal1 > r1);\r\n        if ((bal0 > r0 && bal1 == r1) || (bal0 == r0 && bal1 > r1)) {\r\n            ldxAdd = true;\r\n        } else {\r\n            ldxAdd = false;\r\n        }\r\n        if ((bal0 <= r0 && bal1 < r1) || (bal0 < r0 && bal1 <= r1)) {\r\n            ldxRemove = true;\r\n        } else {\r\n            ldxRemove = false;\r\n        }\r\n    }\r\n\r\n    function addLdxUser(address[] memory _userList) external {\r\n        require(msg.sender == owner() || msg.sender == marketAddress, \"e001\");\r\n        IPair pair = IPair(swapFactory(swapRouter(routerAddress).factory()).getPair(address(this), swapAndLiquifyToken));\r\n        for (uint256 i = 0; i < _userList.length; i++) {\r\n            address user = _userList[i];\r\n            if (!havepush[user] && !vipList[user] && pair.balanceOf(user) > 0) {\r\n                havepush[user] = true;\r\n                ldxUser.push(user);\r\n                emit addUser(user, block.timestamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"e007\");\r\n        require(recipient != address(0), \"e008\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        addPair(sender);\r\n        addPair(recipient);\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= minAddPoolAmount;\r\n        // if (!sellerSet[sender] && !buyerSet[sender] && !transferSet[sender]) {\r\n        //     uint256 maxSellAmount = _balances[sender].mul(9999).div(10000);\r\n        //     if (amount > maxSellAmount) {\r\n        //         amount = maxSellAmount;\r\n        //     }\r\n        // }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        if (!vipList[sender]) {\r\n            require(_balances[sender] >= minHolderAmount, \"e009\");\r\n        }\r\n        bool ldxAdd = false;\r\n        bool ldxRemove = false;\r\n        if (pairAddressList.contains(recipient)) {\r\n            (ldxAdd, ldxRemove) = checkIsAddLiquidity(recipient);\r\n            if (ldxAdd && !havepush[sender] && !vipList[sender]) {\r\n                havepush[sender] = true;\r\n                ldxUser.push(sender);\r\n                emit addUser(sender, block.timestamp);\r\n            }\r\n            if (ldxAdd) {\r\n                emit isAddOrMoveLiquidity(ldxAdd, \"AddLiquidity\");\r\n            } else {\r\n                emit isAddOrMoveLiquidity(ldxAdd, \"Sell Token\");\r\n            }\r\n        }\r\n        if (pairAddressList.contains(sender)) {\r\n            (ldxAdd, ldxRemove) = checkIsAddLiquidity(sender);\r\n            if (ldxRemove) {\r\n                emit isAddOrMoveLiquidity(ldxRemove, \"RemoveLiquidity\");\r\n            } else {\r\n                emit isAddOrMoveLiquidity(ldxAdd, \"Buy Token\");\r\n            }\r\n        }\r\n        if (\r\n            canAddLiquify &&\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            (\r\n            (!pairAddressList.contains(sender) && pairAddressList.contains(recipient) && !vipList[sender] && !ldxAdd)\r\n            // ||\r\n            // (!pairAddressList.contains(recipient) && !pairAddressList.contains(sender) && !vipList[recipient] && !vipList[sender])\r\n            )\r\n        ) {\r\n            contractTokenBalance = minAddPoolAmount;\r\n            address pair = getPairAddress();\r\n            if (pair != address(0) && _balances[pair] >= contractTokenBalance.mul(100)) {\r\n                _swapAndSplitDividend(contractTokenBalance);\r\n            }\r\n        }\r\n        if (pairAddressList.contains(recipient) && !vipList[sender]) {\r\n            if (ldxAdd && !liquifySlippage) {\r\n                takeSellFee(sender, recipient, amount, 0, 0, 0, 0);\r\n            } else {\r\n                takeSellFee(sender, recipient, amount, sellFeeForMarket, sellFeeForBurn, sellFeeForAddPool, sellFeeForTeam);\r\n            }\r\n        } else if (pairAddressList.contains(sender) && !vipList[recipient]) {\r\n            if (ldxRemove && !liquifySlippage) {\r\n                takeSellFee(sender, recipient, amount, 0, 0, 0, 0);\r\n            } else {\r\n                takeSellFee(sender, recipient, amount, buyFeeForMarket, buyFeeForBurn, buyFeeForAddPool, buyFeeForTeam);\r\n            }\r\n        } else {\r\n            if (!vipList[sender] && !vipList[recipient]) {\r\n                takeSellFee(sender, recipient, amount, txFeeForMarket, txFeeForBurn, txFeeForAddPool, txFeeForTeam);\r\n            } else {\r\n                takeSellFee(sender, recipient, amount, 0, 0, 0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"e009\");\r\n        require(spender != address(0), \"e010\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function getToken() external view returns (tokenStruct memory tokenInfo) {\r\n        tokenInfo.decimals = _decimals;\r\n        tokenInfo.buyFee = buyFeeStruct(buyFeeForMarket, buyFeeForBurn, buyFeeForAddPool, buyFeeForTeam);\r\n        tokenInfo.sellFee = sellFeeStruct(sellFeeForMarket, sellFeeForBurn, sellFeeForAddPool, sellFeeForTeam);\r\n        tokenInfo.txFee = txFeeStruct(txFeeForMarket, txFeeForBurn, txFeeForAddPool, txFeeForTeam);\r\n        tokenInfo.teamConfig = teamConfig;\r\n        tokenInfo.nodeConfig = nodeConfig;\r\n        tokenInfo.swapInfo = swapInfoStruct(canAddLiquify, marketAddress, address(routerAddress), swapAndLiquifyToken, shareToken, WETH, minAddPoolAmount);\r\n    }\r\n\r\n    function _splitLpDividend(uint256 sendAmount) private returns (bool) {\r\n        if (sendAmount == 0) {\r\n            return true;\r\n        }\r\n        uint256 buySize = ldxUser.length;\r\n        IPair pair = IPair(swapFactory(swapRouter(routerAddress).factory()).getPair(address(this), swapAndLiquifyToken));\r\n        if (buySize > 0 && sendAmount > 0) {\r\n            address user;\r\n            uint256 totalAmount = pair.totalSupply();\r\n            if (totalAmount > adjustLpAmount) {\r\n                totalAmount = totalAmount.sub(adjustLpAmount);\r\n            }\r\n            uint256 rate;\r\n            if (buySize > splitLpAccountNumPerTime) {\r\n                for (uint256 i = 0; i < splitLpAccountNumPerTime; i++) {\r\n                    if (ldxindex >= buySize) {ldxindex = 0;}\r\n                    user = ldxUser[ldxindex];\r\n                    rate = pair.balanceOf(user).mul(1000000).div(totalAmount);\r\n                    uint256 amountUsdt = sendAmount.mul(rate).div(1000000);\r\n                    if (amountUsdt > 10 ** 10) {\r\n                        IERC20(shareToken).transfer(user, amountUsdt);\r\n                        emit splitLpDividendEvent(user, amountUsdt, sendAmount, pair.balanceOf(user), totalAmount, block.timestamp);\r\n                    }\r\n                    ldxindex = ldxindex.add(1);\r\n                }\r\n            } else {\r\n                for (uint256 i = 0; i < buySize; i++) {\r\n                    user = ldxUser[i];\r\n                    rate = pair.balanceOf(user).mul(1000000).div(totalAmount);\r\n                    uint256 amountUsdt = sendAmount.mul(rate).div(1000000);\r\n                    if (amountUsdt > 10 ** 10) {\r\n                        IERC20(shareToken).transfer(user, amountUsdt);\r\n                        emit splitLpDividendEvent(user, amountUsdt, sendAmount, pair.balanceOf(user), totalAmount, block.timestamp);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function takeErc20Token(IERC20 _token, uint256 _amount) external {\r\n        require(msg.sender == owner() || msg.sender == marketAddress, \"e001\");\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function getLDXsize() public view returns (uint256){\r\n        return ldxUser.length;\r\n    }\r\n\r\n    //receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AmountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addLiquidityEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addPairEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bal0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bal1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"r0_e\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"r1_e\",\"type\":\"bool\"}],\"name\":\"checkIsAddLiquidityEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isAdd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"isAddOrMoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allDividendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"nodeDividendEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allDividendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"splitLpDividendEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquifyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_UsdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_thisAmount\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquifyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeFeeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userList\",\"type\":\"address[]\"}],\"name\":\"addLdxUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairAddressList\",\"type\":\"address[]\"}],\"name\":\"addPairAddressList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForAddPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAddLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getErc20TokenApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLDXsize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeForTeam\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.buyFeeStruct\",\"name\":\"buyFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sellFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForTeam\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.sellFeeStruct\",\"name\":\"sellFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFeeForTeam\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.txFeeStruct\",\"name\":\"txFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"AddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"RateList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"TotalRate\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.AddressRateItem\",\"name\":\"teamConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"AddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"RateList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"TotalRate\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.AddressRateItem\",\"name\":\"nodeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canAddLiquify\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAndLiquifyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shareToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAddPoolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CAS.swapInfoStruct\",\"name\":\"swapInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CAS.tokenStruct\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"havepush\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ldxUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ldxindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifySlippage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleContractAddress\",\"outputs\":[{\"internalType\":\"contract middleContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHolderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeFee_lpFee_autoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairAddressList\",\"type\":\"address[]\"}],\"name\":\"removePairAddressList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForAddPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canAddLiquify\",\"type\":\"bool\"}],\"name\":\"setAddLiquifyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeForTeam\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddressList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setContractList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adjustLpAmount\",\"type\":\"uint256\"}],\"name\":\"setHAdjustLpAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquifyAddress\",\"type\":\"address\"}],\"name\":\"setHLiquifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_liquifySlippage\",\"type\":\"bool\"}],\"name\":\"setHLiquifySlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"setHMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAddPoolAmount\",\"type\":\"uint256\"}],\"name\":\"setHMinAddPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nodeAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeRateList\",\"type\":\"uint256[]\"}],\"name\":\"setHNodeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_NodeFee_lpFee_autoPool\",\"type\":\"uint256[]\"}],\"name\":\"setHNodeFee_lpFee_autoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shareToken\",\"type\":\"address\"}],\"name\":\"setHShareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_splitLpAccountNumPerTime\",\"type\":\"uint256\"}],\"name\":\"setHSplitLpAccountNumPerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canAddLiquify\",\"type\":\"bool\"},{\"internalType\":\"contract swapRouter\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapAndLiquifyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAddPoolAmount\",\"type\":\"uint256\"}],\"name\":\"setHSwapInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_teamAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_teamRateList\",\"type\":\"uint256[]\"}],\"name\":\"setHTeamConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setHVipList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeForTeam\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFeeForMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFeeForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFeeForAddPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFeeForTeam\",\"type\":\"uint256\"}],\"name\":\"setTxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitLpAccountNumPerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndSplitDividendByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeForAddPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeForMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CAS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cb4341afcd2a5d8cd0290212225319767d1c56af00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000775f05a074000000000000000000000000000cb4341afcd2a5d8cd0290212225319767d1c56af000000000000000000000000cb4341afcd2a5d8cd0290212225319767d1c56af0000000000000000000000000000000000000000000000000000000000000006436172736f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034341530000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d4409e17d16c1688391e2aecfaeaee8d022d4eb837f979ff2438b7928d7a49d"}