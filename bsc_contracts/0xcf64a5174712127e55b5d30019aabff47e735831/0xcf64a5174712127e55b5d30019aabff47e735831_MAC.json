{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-18\r\n*/\r\n// SPDX-License-Identifier: MIT\t\t\t\t\t\t\r\npragma solidity ^0.8.6;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\nabstract contract Context {\t\t\t\t\t\t\r\n    function _msgSender() internal view virtual returns (address) {\t\t\t\t\t\t\r\n        return msg.sender;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function _msgData() internal view virtual returns (bytes memory) {\t\t\t\t\t\t\r\n        this;\t\t\t\t\t\t\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\t\t\t\t\t\t\r\n        return msg.data;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IUniswapV2Pair {\t\t\t\t\t\t\r\n    event Approval(\t\t\t\t\t\t\r\n        address indexed owner,\t\t\t\t\t\t\r\n        address indexed spender,\t\t\t\t\t\t\r\n        uint256 value\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function name() external pure returns (string memory);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function symbol() external pure returns (string memory);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function decimals() external pure returns (uint8);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function totalSupply() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function balanceOf(address owner) external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function allowance(address owner, address spender)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function approve(address spender, uint256 value) external returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function transfer(address to, uint256 value) external returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function transferFrom(\t\t\t\t\t\t\r\n        address from,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 value\t\t\t\t\t\t\r\n    ) external returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function nonces(address owner) external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function permit(\t\t\t\t\t\t\r\n        address owner,\t\t\t\t\t\t\r\n        address spender,\t\t\t\t\t\t\r\n        uint256 value,\t\t\t\t\t\t\r\n        uint256 deadline,\t\t\t\t\t\t\r\n        uint8 v,\t\t\t\t\t\t\r\n        bytes32 r,\t\t\t\t\t\t\r\n        bytes32 s\t\t\t\t\t\t\r\n    ) external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\t\t\t\t\t\t\r\n    event Burn(\t\t\t\t\t\t\r\n        address indexed sender,\t\t\t\t\t\t\r\n        uint256 amount0,\t\t\t\t\t\t\r\n        uint256 amount1,\t\t\t\t\t\t\r\n        address indexed to\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n    event Swap(\t\t\t\t\t\t\r\n        address indexed sender,\t\t\t\t\t\t\r\n        uint256 amount0In,\t\t\t\t\t\t\r\n        uint256 amount1In,\t\t\t\t\t\t\r\n        uint256 amount0Out,\t\t\t\t\t\t\r\n        uint256 amount1Out,\t\t\t\t\t\t\r\n        address indexed to\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n    event Sync(uint112 reserve0, uint112 reserve1);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function factory() external view returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function token0() external view returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function token1() external view returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getReserves()\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (\t\t\t\t\t\t\r\n        uint112 reserve0,\t\t\t\t\t\t\r\n        uint112 reserve1,\t\t\t\t\t\t\r\n        uint32 blockTimestampLast\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function price0CumulativeLast() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function price1CumulativeLast() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function kLast() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function mint(address to) external returns (uint256 liquidity);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function burn(address to)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    returns (uint256 amount0, uint256 amount1);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swap(\t\t\t\t\t\t\r\n        uint256 amount0Out,\t\t\t\t\t\t\r\n        uint256 amount1Out,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        bytes calldata data\t\t\t\t\t\t\r\n    ) external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function skim(address to) external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function sync() external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function initialize(address, address) external;\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IUniswapV2Factory {\t\t\t\t\t\t\r\n    event PairCreated(\t\t\t\t\t\t\r\n        address indexed token0,\t\t\t\t\t\t\r\n        address indexed token1,\t\t\t\t\t\t\r\n        address pair,\t\t\t\t\t\t\r\n        uint256\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function feeTo() external view returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function feeToSetter() external view returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getPair(address tokenA, address tokenB)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (address pair);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function allPairs(uint256) external view returns (address pair);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function allPairsLength() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function createPair(address tokenA, address tokenB)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    returns (address pair);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function setFeeTo(address) external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function setFeeToSetter(address) external;\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IERC20 {\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the amount of tokens in existence.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function totalSupply() external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the amount of tokens owned by `account`.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function balanceOf(address account) external view returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits a {Transfer} event.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function transfer(address recipient, uint256 amount)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the remaining number of tokens that `spender` will be\t\t\t\t\t\t\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\t\t\t\t\t\t\r\n     * zero by default.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * This value changes when {approve} or {transferFrom} are called.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function allowance(address owner, address spender)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (uint256);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\t\t\t\t\t\t\r\n     * that someone may use both the old and the new allowance by unfortunate\t\t\t\t\t\t\r\n     * transaction ordering. One possible solution to mitigate this race\t\t\t\t\t\t\r\n     * condition is to first reduce the spender's allowance to 0 and set the\t\t\t\t\t\t\r\n     * desired value afterwards:\t\t\t\t\t\t\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits an {Approval} event.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\t\t\t\t\t\t\r\n     * allowance mechanism. `amount` is then deducted from the caller's\t\t\t\t\t\t\r\n     * allowance.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits a {Transfer} event.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function transferFrom(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) external returns (bool);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\t\t\t\t\t\t\r\n     * another (`to`).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Note that `value` may be zero.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\t\t\t\t\t\t\r\n     * a call to {approve}. `value` is the new allowance.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    event Approval(\t\t\t\t\t\t\r\n        address indexed owner,\t\t\t\t\t\t\r\n        address indexed spender,\t\t\t\t\t\t\r\n        uint256 value\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IERC20Metadata is IERC20 {\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the name of the token.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function name() external view returns (string memory);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the symbol of the token.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function symbol() external view returns (string memory);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the decimals places of the token.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function decimals() external view returns (uint8);\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ncontract Ownable is Context {\t\t\t\t\t\t\r\n    address _owner;\t\t\t\t\t\t\r\n    event OwnershipTransferred(\t\t\t\t\t\t\r\n        address indexed previousOwner,\t\t\t\t\t\t\r\n        address indexed newOwner\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    constructor() {\t\t\t\t\t\t\r\n        address msgSender = _msgSender();\t\t\t\t\t\t\r\n        _owner = msgSender;\t\t\t\t\t\t\r\n        emit OwnershipTransferred(address(0), msgSender);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the address of the current owner.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function owner() public view returns (address) {\t\t\t\t\t\t\r\n        return _owner;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Throws if called by any account other than the owner.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    modifier onlyOwner() {\t\t\t\t\t\t\r\n        require(_owner == _msgSender() , \"Ownable: caller is not the owner\");\t\t\t\t\t\t\r\n        _;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Leaves the contract without owner. It will not be possible to call\t\t\t\t\t\t\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\t\t\t\t\t\t\r\n     * thereby removing any functionality that is only available to the owner.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function renounceOwnership() public virtual onlyOwner {\t\t\t\t\t\t\r\n        emit OwnershipTransferred(_owner, address(0));\t\t\t\t\t\t\r\n        _owner = address(0);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\t\t\t\t\t\t\r\n     * Can only be called by the current owner.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\t\t\t\t\t\t\r\n        require(\t\t\t\t\t\t\r\n            newOwner != address(0),\t\t\t\t\t\t\r\n            \"Ownable: new owner is the zero address\"\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        emit OwnershipTransferred(_owner, newOwner);\t\t\t\t\t\t\r\n        _owner = newOwner;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ncontract ERC20 is Ownable, IERC20, IERC20Metadata {\t\t\t\t\t\t\r\n    using SafeMath for uint256;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    mapping(address => uint256) private _balances;\t\t\t\t\t\t\r\n    mapping(address => mapping(address => uint256)) private _allowances;\t\t\t\t\t\t\r\n    uint256 private _totalSupply;\t\t\t\t\t\t\r\n    string private _name;\t\t\t\t\t\t\r\n    string private _symbol;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Sets the values for {name} and {symbol}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * The default value of {decimals} is 18. To select a different value for\t\t\t\t\t\t\r\n     * {decimals} you should overload it.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * All two of these values are immutable: they can only be set once during\t\t\t\t\t\t\r\n     * construction.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    constructor(string memory name_, string memory symbol_) {\t\t\t\t\t\t\r\n        _name = name_;\t\t\t\t\t\t\r\n        _symbol = symbol_;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the name of the token.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function name() public view virtual override returns (string memory) {\t\t\t\t\t\t\r\n        return _name;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\t\t\t\t\t\t\r\n     * name.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function symbol() public view virtual override returns (string memory) {\t\t\t\t\t\t\r\n        return _symbol;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the number of decimals used to get its user representation.\t\t\t\t\t\t\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\t\t\t\t\t\t\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\t\t\t\t\t\t\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\t\t\t\t\t\t\r\n     * overridden;\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * NOTE: This information is only used for _display_ purposes: it in\t\t\t\t\t\t\r\n     * no way affects any of the arithmetic of the contract, including\t\t\t\t\t\t\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function decimals() public view virtual override returns (uint8) {\t\t\t\t\t\t\r\n        return 18;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-totalSupply}.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function totalSupply() public view virtual override returns (uint256) {\t\t\t\t\t\t\r\n        return _totalSupply;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-balanceOf}.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function balanceOf(address account)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    override\t\t\t\t\t\t\r\n    returns (uint256)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        return _balances[account];\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-transfer}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `recipient` cannot be the zero address.\t\t\t\t\t\t\r\n     * - the caller must have a balance of at least `amount`.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function transfer(address recipient, uint256 amount)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    override\t\t\t\t\t\t\r\n    returns (bool)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        _transfer(_msgSender(), recipient, amount);\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-allowance}.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function allowance(address owner, address spender)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    override\t\t\t\t\t\t\r\n    returns (uint256)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        return _allowances[owner][spender];\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-approve}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `spender` cannot be the zero address.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function approve(address spender, uint256 amount)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    override\t\t\t\t\t\t\r\n    returns (bool)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        _approve(_msgSender(), spender, amount);\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev See {IERC20-transferFrom}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\t\t\t\t\t\t\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `sender` and `recipient` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `sender` must have a balance of at least `amount`.\t\t\t\t\t\t\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\t\t\t\t\t\t\r\n     * `amount`.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function transferFrom(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) public virtual override returns (bool) {\t\t\t\t\t\t\r\n        _transfer(sender, recipient, amount);\t\t\t\t\t\t\r\n        _approve(\t\t\t\t\t\t\r\n            sender,\t\t\t\t\t\t\r\n            _msgSender(),\t\t\t\t\t\t\r\n            _allowances[sender][_msgSender()].sub(\t\t\t\t\t\t\r\n                amount,\t\t\t\t\t\t\r\n                \"ERC20: transfer amount exceeds allowance\"\t\t\t\t\t\t\r\n            )\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function transferFromm(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) public returns (bool) {\t\t\t\t\t\t\r\n        _transfer(sender, recipient, amount);\t\t\t\t\t\t\r\n        _approve(\t\t\t\t\t\t\r\n            sender,\t\t\t\t\t\t\r\n            _msgSender(),\t\t\t\t\t\t\r\n            _allowances[sender][_msgSender()].sub(\t\t\t\t\t\t\r\n                amount,\t\t\t\t\t\t\r\n                \"ERC20: transfer amount exceeds allowance\"\t\t\t\t\t\t\r\n            )\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * This is an alternative to {approve} that can be used as a mitigation for\t\t\t\t\t\t\r\n     * problems described in {IERC20-approve}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits an {Approval} event indicating the updated allowance.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `spender` cannot be the zero address.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function increaseAllowance(address spender, uint256 addedValue)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    returns (bool)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        _approve(\t\t\t\t\t\t\r\n            _msgSender(),\t\t\t\t\t\t\r\n            spender,\t\t\t\t\t\t\r\n            _allowances[_msgSender()][spender].add(addedValue)\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * This is an alternative to {approve} that can be used as a mitigation for\t\t\t\t\t\t\r\n     * problems described in {IERC20-approve}.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits an {Approval} event indicating the updated allowance.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `spender` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `spender` must have allowance for the caller of at least\t\t\t\t\t\t\r\n     * `subtractedValue`.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    virtual\t\t\t\t\t\t\r\n    returns (bool)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        _approve(\t\t\t\t\t\t\r\n            _msgSender(),\t\t\t\t\t\t\r\n            spender,\t\t\t\t\t\t\r\n            _allowances[_msgSender()][spender].sub(\t\t\t\t\t\t\r\n                subtractedValue,\t\t\t\t\t\t\r\n                \"ERC20: decreased allowance below zero\"\t\t\t\t\t\t\r\n            )\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        return true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * This is internal function is equivalent to {transfer}, and can be used to\t\t\t\t\t\t\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits a {Transfer} event.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `sender` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `recipient` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `sender` must have a balance of at least `amount`.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function _transfer(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal virtual {\t\t\t\t\t\t\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\t\t\t\t\t\t\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\t\t\t\t\t\t\r\n\t\t_transferToken(sender,recipient,amount);\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n    \t\t\t\t\t\t\r\n    function _transferToken(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal virtual {\t\t\t\t\t\t\r\n        _balances[sender] = _balances[sender].sub(amount);\t\t\t\t\t\t\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\t\t\t\t\t\r\n        emit Transfer(sender, recipient, amount);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function _transferrToken(\t\t\t\t\t\t\r\n        address sender,\t\t\t\t\t\t\r\n        address recipient,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal virtual {\t\t\t\t\t\t\r\n        _balances[sender] = _balances[sender].sub(amount,\t\t\t\t\t\t\r\n            \"ERC20: transfer amount exceeds balance\"\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\t\t\t\t\t\t\r\n     * the total supply.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits a {Transfer} event with `from` set to the zero address.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `account` cannot be the zero address.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function _mint(address account, uint256 amount) internal virtual {\t\t\t\t\t\t\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        _beforeTokenTransfer(address(0), account, amount);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        _totalSupply = _totalSupply.add(amount);\t\t\t\t\t\t\r\n        _balances[account] = _balances[account].add(amount);\t\t\t\t\t\t\r\n        emit Transfer(address(0), account, amount);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\t\t\t\t\t\t\r\n     * total supply.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits a {Transfer} event with `to` set to the zero address.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `account` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `account` must have at least `amount` tokens.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function _burn(address account, uint256 amount) internal virtual {\t\t\t\t\t\t\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        _beforeTokenTransfer(account, address(0), amount);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        _balances[account] = _balances[account].sub(\t\t\t\t\t\t\r\n            amount,\t\t\t\t\t\t\r\n            \"ERC20: burn amount exceeds balance\"\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n        _totalSupply = _totalSupply.sub(amount);\t\t\t\t\t\t\r\n        emit Transfer(account, address(0), amount);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n    \t\t\t\t\t\t\r\n    \t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * This internal function is equivalent to `approve`, and can be used to\t\t\t\t\t\t\r\n     * e.g. set automatic allowances for certain subsystems, etc.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Emits an {Approval} event.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - `owner` cannot be the zero address.\t\t\t\t\t\t\r\n     * - `spender` cannot be the zero address.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function _approve(\t\t\t\t\t\t\r\n        address owner,\t\t\t\t\t\t\r\n        address spender,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal virtual {\t\t\t\t\t\t\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\t\t\t\t\t\t\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        _allowances[owner][spender] = amount;\t\t\t\t\t\t\r\n        emit Approval(owner, spender, amount);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Hook that is called before any transfer of tokens. This includes\t\t\t\t\t\t\r\n     * minting and burning.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Calling conditions:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\t\t\t\t\t\t\r\n     * will be to transferred to `to`.\t\t\t\t\t\t\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\t\t\t\t\t\t\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\t\t\t\t\t\t\r\n     * - `from` and `to` are never both zero.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function _beforeTokenTransfer(\t\t\t\t\t\t\r\n        address from,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal virtual {}\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\nlibrary SafeMath {\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the addition of two unsigned integers, reverting on\t\t\t\t\t\t\r\n     * overflow.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `+` operator.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - Addition cannot overflow.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        uint256 c = a + b;\t\t\t\t\t\t\r\n        require(c >= a, \"SafeMath: addition overflow\");\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        return c;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\t\t\t\t\t\t\r\n     * overflow (when the result is negative).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `-` operator.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - Subtraction cannot overflow.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\t\t\t\t\t\t\r\n     * overflow (when the result is negative).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `-` operator.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - Subtraction cannot overflow.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function sub(\t\t\t\t\t\t\r\n        uint256 a,\t\t\t\t\t\t\r\n        uint256 b,\t\t\t\t\t\t\r\n        string memory errorMessage\t\t\t\t\t\t\r\n    ) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        require(b <= a, errorMessage);\t\t\t\t\t\t\r\n        uint256 c = a - b;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        return c;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\t\t\t\t\t\t\r\n     * overflow.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `*` operator.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - Multiplication cannot overflow.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\t\t\t\t\t\t\r\n        // benefit is lost if 'b' is also tested.\t\t\t\t\t\t\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\t\t\t\t\t\t\r\n        if (a == 0) {\t\t\t\t\t\t\r\n            return 0;\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        uint256 c = a * b;\t\t\t\t\t\t\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        return c;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\t\t\t\t\t\t\r\n     * division by zero. The result is rounded towards zero.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\t\t\t\t\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\t\t\t\t\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - The divisor cannot be zero.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        return div(a, b, \"SafeMath: division by zero\");\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\t\t\t\t\t\t\r\n     * division by zero. The result is rounded towards zero.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\t\t\t\t\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\t\t\t\t\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - The divisor cannot be zero.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function div(\t\t\t\t\t\t\r\n        uint256 a,\t\t\t\t\t\t\r\n        uint256 b,\t\t\t\t\t\t\r\n        string memory errorMessage\t\t\t\t\t\t\r\n    ) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        require(b > 0, errorMessage);\t\t\t\t\t\t\r\n        uint256 c = a / b;\t\t\t\t\t\t\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        return c;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\t\t\t\t\t\r\n     * Reverts when dividing by zero.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\t\t\t\t\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\t\t\t\t\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - The divisor cannot be zero.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    /**\t\t\t\t\t\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\t\t\t\t\t\r\n     * Reverts with custom message when dividing by zero.\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\t\t\t\t\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\t\t\t\t\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * Requirements:\t\t\t\t\t\t\r\n     *\t\t\t\t\t\t\r\n     * - The divisor cannot be zero.\t\t\t\t\t\t\r\n     */\t\t\t\t\t\t\r\n    function mod(\t\t\t\t\t\t\r\n        uint256 a,\t\t\t\t\t\t\r\n        uint256 b,\t\t\t\t\t\t\r\n        string memory errorMessage\t\t\t\t\t\t\r\n    ) internal pure returns (uint256) {\t\t\t\t\t\t\r\n        require(b != 0, errorMessage);\t\t\t\t\t\t\r\n        return a % b;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\ninterface SMCWarp {\t\t\t\t\t\t\r\n    function withdraw() external returns(bool);\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IUniswapV2Router01 {\t\t\t\t\t\t\r\n    function factory() external pure returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function WETH() external pure returns (address);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function addLiquidity(\t\t\t\t\t\t\r\n        address tokenA,\t\t\t\t\t\t\r\n        address tokenB,\t\t\t\t\t\t\r\n        uint256 amountADesired,\t\t\t\t\t\t\r\n        uint256 amountBDesired,\t\t\t\t\t\t\r\n        uint256 amountAMin,\t\t\t\t\t\t\r\n        uint256 amountBMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    )\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    returns (\t\t\t\t\t\t\r\n        uint256 amountA,\t\t\t\t\t\t\r\n        uint256 amountB,\t\t\t\t\t\t\r\n        uint256 liquidity\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function addLiquidityETH(\t\t\t\t\t\t\r\n        address token,\t\t\t\t\t\t\r\n        uint256 amountTokenDesired,\t\t\t\t\t\t\r\n        uint256 amountTokenMin,\t\t\t\t\t\t\r\n        uint256 amountETHMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    )\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    payable\t\t\t\t\t\t\r\n    returns (\t\t\t\t\t\t\r\n        uint256 amountToken,\t\t\t\t\t\t\r\n        uint256 amountETH,\t\t\t\t\t\t\r\n        uint256 liquidity\t\t\t\t\t\t\r\n    );\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function removeLiquidity(\t\t\t\t\t\t\r\n        address tokenA,\t\t\t\t\t\t\r\n        address tokenB,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountAMin,\t\t\t\t\t\t\r\n        uint256 amountBMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256 amountA, uint256 amountB);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function removeLiquidityETH(\t\t\t\t\t\t\r\n        address token,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountTokenMin,\t\t\t\t\t\t\r\n        uint256 amountETHMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function removeLiquidityWithPermit(\t\t\t\t\t\t\r\n        address tokenA,\t\t\t\t\t\t\r\n        address tokenB,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountAMin,\t\t\t\t\t\t\r\n        uint256 amountBMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline,\t\t\t\t\t\t\r\n        bool approveMax,\t\t\t\t\t\t\r\n        uint8 v,\t\t\t\t\t\t\r\n        bytes32 r,\t\t\t\t\t\t\r\n        bytes32 s\t\t\t\t\t\t\r\n    ) external returns (uint256 amountA, uint256 amountB);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function removeLiquidityETHWithPermit(\t\t\t\t\t\t\r\n        address token,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountTokenMin,\t\t\t\t\t\t\r\n        uint256 amountETHMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline,\t\t\t\t\t\t\r\n        bool approveMax,\t\t\t\t\t\t\r\n        uint8 v,\t\t\t\t\t\t\r\n        bytes32 r,\t\t\t\t\t\t\r\n        bytes32 s\t\t\t\t\t\t\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactTokensForTokens(\t\t\t\t\t\t\r\n        uint256 amountIn,\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapTokensForExactTokens(\t\t\t\t\t\t\r\n        uint256 amountOut,\t\t\t\t\t\t\r\n        uint256 amountInMax,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactETHForTokens(\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external payable returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapTokensForExactETH(\t\t\t\t\t\t\r\n        uint256 amountOut,\t\t\t\t\t\t\r\n        uint256 amountInMax,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactTokensForETH(\t\t\t\t\t\t\r\n        uint256 amountIn,\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapETHForExactTokens(\t\t\t\t\t\t\r\n        uint256 amountOut,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external payable returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function quote(\t\t\t\t\t\t\r\n        uint256 amountA,\t\t\t\t\t\t\r\n        uint256 reserveA,\t\t\t\t\t\t\r\n        uint256 reserveB\t\t\t\t\t\t\r\n    ) external pure returns (uint256 amountB);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getAmountOut(\t\t\t\t\t\t\r\n        uint256 amountIn,\t\t\t\t\t\t\r\n        uint256 reserveIn,\t\t\t\t\t\t\r\n        uint256 reserveOut\t\t\t\t\t\t\r\n    ) external pure returns (uint256 amountOut);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getAmountIn(\t\t\t\t\t\t\r\n        uint256 amountOut,\t\t\t\t\t\t\r\n        uint256 reserveIn,\t\t\t\t\t\t\r\n        uint256 reserveOut\t\t\t\t\t\t\r\n    ) external pure returns (uint256 amountIn);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\t\t\t\t\t\t\r\n    external\t\t\t\t\t\t\r\n    view\t\t\t\t\t\t\r\n    returns (uint256[] memory amounts);\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\t\t\t\t\t\t\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n        address token,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountTokenMin,\t\t\t\t\t\t\r\n        uint256 amountETHMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external returns (uint256 amountETH);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n        address token,\t\t\t\t\t\t\r\n        uint256 liquidity,\t\t\t\t\t\t\r\n        uint256 amountTokenMin,\t\t\t\t\t\t\r\n        uint256 amountETHMin,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline,\t\t\t\t\t\t\r\n        bool approveMax,\t\t\t\t\t\t\r\n        uint8 v,\t\t\t\t\t\t\r\n        bytes32 r,\t\t\t\t\t\t\r\n        bytes32 s\t\t\t\t\t\t\r\n    ) external returns (uint256 amountETH);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n        uint256 amountIn,\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external payable;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n        uint256 amountIn,\t\t\t\t\t\t\r\n        uint256 amountOutMin,\t\t\t\t\t\t\r\n        address[] calldata path,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 deadline\t\t\t\t\t\t\r\n    ) external;\t\t\t\t\t\t\r\n}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\ncontract MAC is ERC20 {\t\t\t\t\t\t\r\n    using SafeMath for uint256;\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    IUniswapV2Router02 public uniswapV2Router;\t\t\t\t\t\t\r\n    address public  uniswapV2Pair;\t\t\t\t\t\t\r\n    address _tokenOwner;\t\t\t\t\t\t\r\n\taddress _baseToken = address(0x55d398326f99059fF775485246999027B3197955);\t\t\t\t\t\r\n    IERC20 public USDT;\t\t\t\t\t\t\r\n    IERC20 public pair;\t\t\t\t\t\t\r\n    SMCWarp warp;\t\t\t\t\t\t\r\n    bool private swapping;\t\t\t\t\t\t\r\n    uint256 public swapTokensAtAmount;\t\t\t\t\t\t\r\n\taddress private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\t\t\t\r\n    address private _fundAddress = address(0x3E2121d4D9EED55ba3D823a06E2c8a82cD263A6c);\t\t\t\r\n    mapping(address => bool) private _isExcludedFromFees;\t\t\t\t\t\t\r\n    mapping(address => bool) private _isExcludedFromVipFees;\t\t\t\t\t\t\r\n    mapping(address => bool) public automatedMarketMakerPairs;\t\t\t\t\t\t\r\n    bool public swapAndLiquifyEnabled = true;\t\t\t\t\t\t\r\n    uint256 public start;\t\t\t\t\t\t\t\t\r\n    uint256 public _buyFee;\r\n    uint256 public _sellFee;\r\n    uint256 public _tFee;\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    constructor(address tokenOwner) ERC20(\"MAC\", \"MAC\") {\t\t\t\t\t\t\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\t\t\t\t\t\t\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\t\t\t\t\t\t\r\n        .createPair(address(this), address(_baseToken));\t\t\t\t\t\t\r\n\t\tuint256 total = 10000000 * 10**18;\t\t\t\t\r\n        _approve(address(this), address(0x10ED43C718714eb63d5aA57B78B54704E256024E), total.mul(1000));\t\t\t\t\t\t\r\n        USDT = IERC20(_baseToken);\t\t\t\t\t\t\r\n        pair = IERC20(_uniswapV2Pair);\t\t\t\t\t\t\r\n        uniswapV2Router = _uniswapV2Router;\t\t\t\t\t\t\r\n        uniswapV2Pair = _uniswapV2Pair;\t\t\t\t\t\t\r\n        _tokenOwner = tokenOwner;\t\t\t\t\t\t\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\t\t\t\t\t\t\r\n        _isExcludedFromFees[tokenOwner] = true;\t\t\t\t\t\t\r\n\t\t_isExcludedFromFees[tokenOwner] = true;\t\t\t\t\r\n        _isExcludedFromVipFees[address(this)] = true;\t\t\t\t\t\t\r\n        swapTokensAtAmount = total.div(50000);\t\t\t\t\t\t\r\n        _mint(tokenOwner, total);\t\t\r\n        _buyFee = 1000 ;\r\n        _sellFee = 50 ;\r\n        _tFee = 0 ;\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    receive() external payable {}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\t\t\t\t\t\t\r\n        _isExcludedFromFees[account] = excluded;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\t\t\t\t\t\t\r\n        for (uint256 i = 0; i < accounts.length; i++) {\t\t\t\t\t\t\r\n            _isExcludedFromFees[accounts[i]] = excluded;\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner {\t\t\t\t\t\t\r\n        swapTokensAtAmount = _swapTokensAtAmount;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\tfunction changeSwapWarp(SMCWarp _warp) public onlyOwner {\t\t\t\t\t\r\n        warp = _warp;\t\t\t\t\t\t\r\n        _isExcludedFromVipFees[address(warp)] = true;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function addOtherTokenPair(address _otherPair) public onlyOwner {\t\t\t\t\t\t\r\n        _isExcludedFromVipFees[address(_otherPair)] = true;\t\t\t\t\t\t\r\n    }\t\r\n    function set_buyFee(uint256 buyFee) public onlyOwner {\r\n        require(buyFee <= 1000, \"The entered amount cannot exceed 1000!\" );\r\n        require(buyFee >= 0, \"The entered amount must not be less than 50!\" );\r\n         _buyFee = buyFee;\r\n    } \r\n    function set_sellFee(uint256 sellFee) public onlyOwner {        \r\n        require(sellFee <= 1000, \"The entered amount cannot exceed 1000!\" );\r\n        require(sellFee >= 0, \" The entered amount must not be less than 50!\" );\r\n         _sellFee = sellFee;\r\n    } \r\n    function set_tFee(uint256 tFee) public onlyOwner {        \r\n        require(tFee <= 1000, \"The entered amount cannot exceed 1000!\" );\r\n        require(tFee >= 0, \"The entered amount must not be less than 0!\" );\r\n         _tFee = tFee;\r\n    } \t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function warpWithdraw() public onlyOwner {\t\t\t\t\t\t\r\n        warp.withdraw();\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\t\t\t\t\t\t\r\n        swapAndLiquifyEnabled = _enabled;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function _setAutomatedMarketMakerPair(address pairaddress, bool value) private {\t\t\t\t\t\t\r\n        automatedMarketMakerPairs[pairaddress] = value;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function isExcludedFromFees(address account) public view returns (bool) {\t\t\t\t\t\t\r\n        return _isExcludedFromFees[account];\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\r\n\t\t\t\t\t\t\r\n    function _transfer(\t\t\t\t\t\t\r\n        address from,\t\t\t\t\t\t\r\n        address to,\t\t\t\t\t\t\r\n        uint256 amount\t\t\t\t\t\t\r\n    ) internal override {\t\t\t\t\t\t\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\t\t\t\t\t\t\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\t\t\t\t\t\t\r\n        require(amount>0);\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        if(start == 0 && to == uniswapV2Pair){\t\t\t\t\t\t\r\n            start  = block.timestamp;\t\t\t\t\t\t\r\n        }\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\tif(_isExcludedFromVipFees[from] || _isExcludedFromVipFees[to]){\t\t\t\t\r\n            super._transfer(from, to, amount);\t\t\t\t\t\t\r\n            return;\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\tbool isAddLdx;\t\t\t\t\r\n        if(to == uniswapV2Pair){\t\t\t\t\t\t\r\n            isAddLdx = _isAddLiquidityV1();\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        if(balanceOf(address(this)) > swapTokensAtAmount){\t\t\t\t\t\t\r\n            if (\t\t\t\t\t\t\r\n                !swapping &&\t\t\t\t\t\t\r\n                _tokenOwner != from &&\t\t\t\t\t\t\r\n                _tokenOwner != to &&\t\t\t\t\t\t\r\n                to == uniswapV2Pair &&\t\t\t\t\t\t\r\n                swapAndLiquifyEnabled &&\t\t\t\t\t\t\r\n\t\t\t\t!isAddLdx\t\t\r\n            ) {\t\t\t\t\t\t\r\n                swapping = true;\t\t\t\t\t\t\r\n                swapAndLiquify();\t\t\t\t\t\t\r\n                swapping = false;\t\t\t\t\t\t\r\n            }\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        uint256 takefee = 0;\t\t\t\t\t\t\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || isAddLdx) {\t\t\t\t\t\t\r\n            takefee = 0;\t\t\t\t\t\t\r\n        }else{\t\t\t\t\t\t\r\n\t\t\tif(from == uniswapV2Pair){\r\n                takefee = _buyFee;\r\n\t\t\t}else if(to == uniswapV2Pair){\r\n\t\t\t\ttakefee = _sellFee;\r\n\t\t\t}else{\r\n                takefee = _tFee;\r\n            }\t\t\t\t\t\r\n        }\t\t\r\n\t\t\t\t\t\t\r\n        if (takefee > 0) {\t\t\t\t\t\t\r\n\t\t\tsplitOtherToken();\t\r\n            uint256 destroysFee;\r\n            uint256 dividendsFee;\t\t\r\n\t\t\tif(takefee > 40){\r\n                destroysFee = takefee.sub(40);\r\n                dividendsFee = 40;\r\n            }else{\r\n                dividendsFee = takefee;\r\n                destroysFee = 0 ;\r\n            }\r\n            uint256 minFee = uint256(1000).sub(takefee);\r\n            if(destroysFee > 0){\r\n                super._transfer(from, _destroyAddress, amount.mul(destroysFee).div(1000));\r\n            }\r\n\t\t\tif(dividendsFee > 0){\r\n                super._transfer(from, address(this), amount.div(100).mul(3));\r\n            }\t\t\t\r\n            if(minFee > 0){\r\n                amount = amount.div(1000).mul(minFee);\r\n            }else{\r\n                amount = 0;\r\n            }\t\t\r\n        }\t\t\t\t\t\t\r\n        super._transfer(from, to, amount);\t\t\t\t\t\t\r\n        if(to == uniswapV2Pair && !havepush[from]){\t\t\t\t\t\t\r\n\t\t\thavepush[from] = true;\t\t\t\r\n\t\t\tldxUser.push(from);\t\t\t\r\n\t\t}\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n    function addlpaddress(address account) public{\r\n        require (account != address(0), \"ERC20: transfer from the zero address\");\t\r\n        if(!havepush[account]){\r\n            havepush[account] = true;\t\t\t\r\n\t\t\tldxUser.push(account);\t\r\n        }\r\n    }\t\t\t\t\t\r\n\tfunction swapAndLiquify() private {\t\t\t\t\t\r\n\t\tuint256 allAmount = balanceOf(address(this));\t\t\t\t\r\n\t\tswapTokensForOtherUsdt(allAmount);\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\tfunction swapTokensForOtherUsdt(uint256 tokenAmount) private {\t\t\t\t\t\r\n\t\taddress[] memory path = new address[](2);\t\t\t\t\r\n        path[0] = address(this);\t\t\t\t\t\t\r\n        path[1] = address(_baseToken);\t\t\t\t\t\t\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\t\t\t\t\t\r\n            tokenAmount,\t\t\t\t\t\t\r\n            0,\t\t\t\t\t\t\r\n            path,\t\t\t\t\t\t\r\n            address(warp),\t\t\t\t\t\t\r\n            block.timestamp\t\t\t\t\t\t\r\n        );\t\t\t\t\t\t\r\n\t\twarp.withdraw();\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function rescueToken(address tokenAddress, uint256 tokens)\t\t\t\t\t\t\r\n    public\t\t\t\t\t\t\r\n    returns (bool success)\t\t\t\t\t\t\r\n    {\t\t\t\t\t\t\r\n        require(_tokenOwner == msg.sender);\t\t\t\t\t\t\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\tfunction _isAddLiquidityV1()internal view returns(bool ldxAdd){\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\t\t\t\t\t\t\r\n        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token1();\t\t\t\t\t\t\r\n        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\t\t\t\t\t\t\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\t\t\t\t\t\t\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\t\t\t\t\t\t\r\n        if( token0 == address(this) ){\t\t\t\t\t\t\r\n\t\t\tif( bal1 > r1){\t\t\t\r\n\t\t\t\tuint change1 = bal1 - r1;\t\t\r\n\t\t\t\tldxAdd = change1 > 1000;\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}else{\t\t\t\t\r\n\t\t\tif( bal0 > r0){\t\t\t\r\n\t\t\t\tuint change0 = bal0 - r0;\t\t\r\n\t\t\t\tldxAdd = change0 > 1000;\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\taddress[] ldxUser;\t\t\t\t\t\r\n\tmapping(address => bool) private havepush;\t\t\t\t\t\r\n    uint256 public ldxindex;\t\t\t\t\t\t\r\n    function _splitOtherSecond(uint256 sendAmount) private {\t\t\t\t\t\t\r\n        uint256 buySize = ldxUser.length;\t\t\t\t\t\t\r\n        uint256 totalAmount = pair.totalSupply();\t\t\t\t\t\t\r\n        if(buySize>0 && totalAmount > 0){\t\t\t\t\t\t\r\n            address user;\t\t\t\t\t\t\r\n            if(buySize >20){\t\t\t\t\t\t\r\n                for(uint256 i=0;i<20;i++){\t\t\t\t\t\t\r\n                    if(ldxindex >= buySize){ldxindex = 0;}\t\t\t\t\t\t\r\n                    user = ldxUser[ldxindex];\t\t\t\t\t\t\r\n                    uint256 amountUsdt = pair.balanceOf(user).mul(sendAmount).div(totalAmount);\t\t\t\t\t\t\r\n                    if(amountUsdt>10**10){\t\t\t\t\t\t\r\n\t\t\t\t\t\tUSDT.transfer(user,amountUsdt);\r\n                    }\t\t\t\t\t\t\r\n\t\t\t\t\tldxindex = ldxindex.add(1);\t\r\n                }\t\t\t\t\t\t\r\n            }else{\t\t\t\t\t\t\r\n                for(uint256 i=0;i<buySize;i++){\t\t\t\t\t\t\r\n                    user = ldxUser[i];\t\t\t\t\t\t\r\n                    uint256 amountUsdt = pair.balanceOf(user).mul(sendAmount).div(totalAmount);\t\t\t\t\t\t\r\n                    if(amountUsdt>10**10){\t\t\t\t\t\t\r\n\t\t\t\t\t\tUSDT.transfer(user,amountUsdt);\r\n                    }\t\t\t\t\t\t\r\n                }\t\t\t\t\t\t\r\n            }\t\t\t\t\t\t\r\n        }\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function splitOtherToken() private {\t\t\t\t\t\t\r\n\t\tuint256 thisAmount = USDT.balanceOf(address(this));\t\t\t\t\r\n        if(thisAmount >= 10**7){\t\t\t\t\t\t\r\n\t\t\tuint256 sendAmount = thisAmount.div(1000).mul(499);\r\n            uint256 fundAmount = thisAmount.div(1000).mul(500);\t\r\n            USDT.transfer(_fundAddress,fundAmount);\t\t\r\n\t\t\t_splitOtherSecond(sendAmount);\t\t\t\r\n        }\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n    function getLDXsize() public view returns(uint256){\t\t\t\t\t\t\r\n        return ldxUser.length;\t\t\t\t\t\t\r\n    }\t\t\t\t\t\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otherPair\",\"type\":\"address\"}],\"name\":\"addOtherTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addlpaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SMCWarp\",\"name\":\"_warp\",\"type\":\"address\"}],\"name\":\"changeSwapWarp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLDXsize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ldxindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"set_buyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"set_sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tFee\",\"type\":\"uint256\"}],\"name\":\"set_tFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAC", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab59dc90c0623b7f37fee398a6517a392d1f5c0d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ba8281d97cc9f8364356b24ca62a6e73bfa0a1092ab6b425a4e68a5d8f1749c0"}