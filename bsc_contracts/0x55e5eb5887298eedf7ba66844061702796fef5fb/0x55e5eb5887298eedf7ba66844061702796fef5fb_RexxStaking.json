{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/rexxStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor(address newOwner) {\\n        _setOwner(newOwner);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nabstract contract Pausable is Context {\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\ncontract RexxStaking is Ownable, Pausable {\\n    IERC20 public token;\\n    IERC20 public usdt;\\n\\n    address public paymentWallet;\\n    uint256 public tokenPrice;\\n\\n    uint256[] public referralPercentage = [3, 2, 1];\\n\\n    event NewDeposit(address indexed user, uint256 amount, uint256 timestamp);\\n    event WithdrawReferralRewards(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawCapitals(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    constructor() Ownable(_msgSender()) {\\n        initialize();\\n    }\\n\\n    struct activity {\\n        address user;\\n        string _event;\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    struct Users {\\n        address referrer;\\n        uint256 refferReward;\\n        uint256 directBonus;\\n        uint256 indirectBonus;\\n        address[] referrals;\\n        uint256[] timestamp;\\n    }\\n\\n    struct plans {\\n        string name;\\n        uint256 amount;\\n        uint256 apy;\\n        uint256 addPlanTimestamp;\\n        bool paused;\\n    }\\n\\n    struct user {\\n        uint256 step;\\n        uint256 price;\\n        uint256 depositTime;\\n        uint256 timestamp;\\n    }\\n    mapping(address => user[]) public investment;\\n    mapping(address => Users) public userRewards;\\n    plans[] public plansData;\\n    activity[] public activities;\\n\\n    mapping(address => bool) public isExits;\\n    mapping(address => bool) public is1stBonusClaim;\\n    mapping(address => bool) public is2ndBonusClaim;\\n\\n    function removeId(uint256 indexnum) internal {\\n        for (\\n            uint256 i = indexnum;\\n            i < investment[_msgSender()].length - 1;\\n            i++\\n        ) {\\n            investment[_msgSender()][i] = investment[_msgSender()][i + 1];\\n        }\\n        investment[_msgSender()].pop();\\n    }\\n\\n    function initialize() private {\\n        token = IERC20(0x1C07B56d1765D15Aa9d28C5e6cfe2cC2A765b27b);\\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\\n        paymentWallet = owner();\\n        tokenPrice = 1;\\n        plansData.push(\\n            plans({\\n                name: \\\"Starter\\\",\\n                amount: 100 ether,\\n                apy: 800,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        plansData.push(\\n            plans({\\n                name: \\\"Standard\\\",\\n                amount: 500 ether,\\n                apy: 800,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        plansData.push(\\n            plans({\\n                name: \\\"Premium\\\",\\n                amount: 1000 ether,\\n                apy: 1000,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        plansData.push(\\n            plans({\\n                name: \\\"Master\\\",\\n                amount: 2000 ether,\\n                apy: 1000,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        plansData.push(\\n            plans({\\n                name: \\\"Master Pro\\\",\\n                amount: 3000 ether,\\n                apy: 1100,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        plansData.push(\\n            plans({\\n                name: \\\"Executive\\\",\\n                amount: 5000 ether,\\n                apy: 1200,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n    }\\n\\n    function changePaymentWallet(address _newPaymentWallet) external onlyOwner {\\n        require(_newPaymentWallet != address(0), \\\"address cannot be zero\\\");\\n        require(\\n            _newPaymentWallet != paymentWallet,\\n            \\\"This address is already fixed\\\"\\n        );\\n        paymentWallet = _newPaymentWallet;\\n    }\\n\\n    function addNewPlan(\\n        string calldata name,\\n        uint256 amount,\\n        uint256 apy\\n    ) external onlyOwner returns (bool) {\\n        require(amount > 0 && apy > 0, \\\"Invalid arguments\\\");\\n        plansData.push(\\n            plans({\\n                name: name,\\n                amount: amount,\\n                apy: apy,\\n                paused: false,\\n                addPlanTimestamp: block.timestamp\\n            })\\n        );\\n        return true;\\n    }\\n\\n    function changeTokenPrice(uint256 _newPrice) external onlyOwner {\\n        require(_newPrice > 0, \\\"invalid price\\\");\\n        tokenPrice = _newPrice;\\n    }\\n\\n    function pausedPlan(uint256 _step) external onlyOwner {\\n        require(!plansData[_step].paused, \\\"Plan is already inactive\\\");\\n        plansData[_step].paused = true;\\n    }\\n\\n    function unpausedPlan(uint256 _step) external onlyOwner {\\n        require(plansData[_step].paused, \\\"Plan is already active\\\");\\n        plansData[_step].paused = false;\\n    }\\n\\n    function pause() external onlyOwner returns (bool success) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpause() external onlyOwner returns (bool success) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function getTokenBalance(address _token) public view returns (uint256) {\\n        IERC20 newToken = IERC20(_token);\\n        return newToken.balanceOf(address(this));\\n    }\\n\\n    function getContractBalanceUsdt() public view returns (uint256) {\\n        return usdt.balanceOf(address(this));\\n    }\\n\\n    function withdrawTokens(\\n        address _token,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(_token != address(0), \\\"token address is null\\\");\\n        IERC20 newToken = IERC20(_token);\\n        require(\\n            _amount > 0 && newToken.balanceOf(address(this)) >= _amount,\\n            \\\"Amount should not be zero or more than contract\\\"\\n        );\\n        newToken.transfer(_msgSender(), _amount);\\n    }\\n\\n    modifier checkPlans(uint256 step) {\\n        require(step < plansData.length, \\\"Invalid step\\\");\\n        require(!plansData[step].paused, \\\"This plan is currently inactive\\\");\\n        _;\\n    }\\n\\n    modifier withdrawCheck(uint256 id) {\\n        user memory users = investment[_msgSender()][id];\\n        require(id < investment[_msgSender()].length, \\\"Invalid enter Id\\\");\\n        _;\\n    }\\n\\n    function invest(\\n        uint8 step,\\n        address _referral\\n    ) external checkPlans(step) whenNotPaused {\\n        uint256 amount = plansData[step].amount;\\n        uint256 ourAllowance = usdt.allowance(_msgSender(), address(this));\\n        require(\\n            amount <= ourAllowance,\\n            \\\"Make sure to add enough allowance of usdt\\\"\\n        );\\n        usdt.transferFrom(_msgSender(), address(this), amount);\\n\\n        investment[_msgSender()].push(\\n            user({\\n                step: step,\\n                price: tokenPrice,\\n                depositTime: block.timestamp,\\n                timestamp: block.timestamp\\n            })\\n        );\\n        if (\\n            !isExits[_msgSender()] &&\\n            _referral != address(0) &&\\n            _referral != _msgSender() &&\\n            isExits[_referral]\\n        ) {\\n            userRewards[_msgSender()].referrer = _referral;\\n            userRewards[_referral].referrals.push(_msgSender());\\n            userRewards[_referral].timestamp.push(block.timestamp);\\n        }\\n        saveActivity(\\\"Invest\\\", amount);\\n        distributeReferralsReward(_msgSender(), amount);\\n        isExits[_msgSender()] = true;\\n        emit NewDeposit(_msgSender(), amount, block.timestamp);\\n    }\\n\\n    function distributeReferralsReward(address _user, uint256 amount) private {\\n        address directAddress = userRewards[_user].referrer;\\n        if (directAddress != address(0)) {\\n            referralsDistribute(directAddress, amount / 10);\\n            userRewards[directAddress].refferReward += amount / 10;\\n            address referral = userRewards[directAddress].referrer;\\n            for (uint256 i = 0; i < 5; i++) {\\n                if (referral != address(0)) {\\n                    if (i < 2) {\\n                        uint256 amount1 = (amount * referralPercentage[i]) /\\n                            100;\\n                        userRewards[referral].refferReward +=\\n                            (amount * referralPercentage[i]) /\\n                            100;\\n                        referralsDistribute(referral, amount1);\\n                    } else {\\n                        userRewards[referral].refferReward +=\\n                            (amount * referralPercentage[2]) /\\n                            100;\\n                        referralsDistribute(\\n                            referral,\\n                            (amount * referralPercentage[2]) / 100\\n                        );\\n                    }\\n                    referral = userRewards[referral].referrer;\\n                } else break;\\n            }\\n        }\\n    }\\n\\n    function referralsDistribute(address referrer, uint256 amount) private {\\n        if (referrer != address(0)) {\\n            uint256 usdtRewards = (amount * 7) / 10;\\n            uint256 rexRewards = usdTToTokens(amount * 3, tokenPrice) / 10;\\n            usdt.transfer(referrer, usdtRewards);\\n            token.transfer(referrer, rexRewards);\\n            userRewards[referrer].directBonus += usdtRewards;\\n            userRewards[referrer].indirectBonus += rexRewards;\\n        }\\n    }\\n\\n    function withdrawTeamBonus() external returns (bool) {\\n        require(isExits[_msgSender()], \\\"You are not registered on this site.\\\");\\n        uint256 teamVolume = totalBusinessUsdt(_msgSender());\\n        uint256 amount;\\n        if (\\n            !is1stBonusClaim[_msgSender()] &&\\n            teamVolume > 5000 ether &&\\n            teamVolume <= 10000 ether\\n        ) {\\n            amount = 100 ether;\\n            is1stBonusClaim[_msgSender()] = true;\\n        } else if (!is2ndBonusClaim[_msgSender()] && teamVolume > 10000 ether) {\\n            amount = 200 ether;\\n            is2ndBonusClaim[_msgSender()] = true;\\n        } else revert(\\\"You con't withdraw\\\");\\n        bool success = usdt.transfer(_msgSender(), amount);\\n        saveActivity(\\\"Withdraw Team Bonus\\\", amount);\\n        return success;\\n    }\\n\\n    function withdrawRewards(uint256 id) external returns (bool) {\\n        user storage users = investment[_msgSender()][id];\\n        uint256 rewards = usdTToTokens(\\n            calculateReward(_msgSender(), id),\\n            users.price\\n        );\\n        require(rewards > 0, \\\"No rewards found|\\\");\\n        bool success = token.transfer(_msgSender(), rewards);\\n        users.timestamp = block.timestamp;\\n        saveActivity(\\\"Withdraw rewards\\\", rewards);\\n        return success;\\n    }\\n\\n    function withdrawCapital(\\n        uint256 id\\n    ) external whenNotPaused withdrawCheck(id) returns (bool success) {\\n        user memory users = investment[_msgSender()][id];\\n        uint256 withdrawalAmount = usdTToTokens(\\n            (plansData[users.step].amount + calculateReward(_msgSender(), id)),\\n            users.price\\n        );\\n        token.transfer(_msgSender(), withdrawalAmount);\\n        saveActivity(\\\"UnStake\\\", withdrawalAmount);\\n        emit WithdrawCapitals(_msgSender(), withdrawalAmount, block.timestamp);\\n        removeId(id);\\n        return true;\\n    }\\n\\n    function calculateRewards(address _user) public view returns (uint256) {\\n        uint256 rewards;\\n        uint256 DIVIDER = 10000;\\n        for (uint256 i = 0; i < investment[_user].length; i++) {\\n            user memory users = investment[_user][i];\\n            uint256 time = block.timestamp - users.timestamp;\\n            rewards +=\\n                (plansData[users.step].amount *\\n                    plansData[users.step].apy *\\n                    time) /\\n                DIVIDER /\\n                30.44 days;\\n        }\\n        return rewards;\\n    }\\n\\n    function calculateReward(\\n        address _user,\\n        uint256 id\\n    ) public view returns (uint256 usdtRewards) {\\n        require(id < investment[_user].length, \\\"Invalid Id\\\");\\n        user memory users = investment[_user][id];\\n        uint256 time = block.timestamp - users.timestamp;\\n        uint256 DIVIDER = 10000;\\n        usdtRewards =\\n            (plansData[users.step].amount * plansData[users.step].apy * time) /\\n            DIVIDER /\\n            30.44 days;\\n\\n        return (usdtRewards);\\n    }\\n\\n    function usdTToTokens(\\n        uint256 _usdtAmount,\\n        uint256 _price\\n    ) public pure returns (uint256) {\\n        uint256 numOfTokens = _usdtAmount * 100;\\n        return (numOfTokens / _price);\\n    }\\n\\n    function totalBusinessUsdt(address _user) public view returns (uint256) {\\n        uint256 amount;\\n        for (uint256 i = 0; i < getTeamLength(_user); i++) {\\n            address referralAddress = userRewards[_user].referrals[i];\\n            amount += depositAddAmount(referralAddress);\\n            for (uint256 i1 = 0; i1 < getTeamLength(referralAddress); i1++) {\\n                address firstUser = userRewards[referralAddress].referrals[i1];\\n                amount += depositAddAmount(firstUser);\\n                for (uint8 j = 0; j < getTeamLength(firstUser); j++) {\\n                    address secondUser = userRewards[firstUser].referrals[j];\\n                    amount += depositAddAmount(secondUser);\\n                    for (uint8 k = 0; k < getTeamLength(secondUser); k++) {\\n                        address thirdUser = userRewards[secondUser].referrals[\\n                            k\\n                        ];\\n                        amount += depositAddAmount(thirdUser);\\n                        for (uint8 n = 0; n < getTeamLength(thirdUser); n++) {\\n                            address fourthUser = userRewards[thirdUser]\\n                                .referrals[n];\\n                            amount += depositAddAmount(fourthUser);\\n                            for (\\n                                uint8 p = 0;\\n                                p < getTeamLength(fourthUser);\\n                                p++\\n                            ) {\\n                                address fifthUser = userRewards[fourthUser]\\n                                    .referrals[p];\\n                                amount += depositAddAmount(fifthUser);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return (amount);\\n    }\\n\\n    function saveActivity(string memory _event, uint256 _amount) private {\\n        activities.push(\\n            activity(_msgSender(), _event, _amount, block.timestamp)\\n        );\\n        if (activities.length > 20) {\\n            for (uint256 i = 0; i < activities.length - 1; i++) {\\n                activities[i] = activities[i + 1];\\n            }\\n            activities.pop();\\n        }\\n    }\\n\\n    function getTeamLength(address _user) private view returns (uint256) {\\n        return userRewards[_user].referrals.length;\\n    }\\n\\n    function getmyDirectReferrals(\\n        address _user\\n    )\\n        public\\n        view\\n        returns (address[] memory addresses, uint256[] memory timestamp)\\n    {\\n        addresses = userRewards[_user].referrals;\\n        timestamp = userRewards[_user].timestamp;\\n        return (addresses, timestamp);\\n    }\\n\\n    function getReferralsReward(address _user) public view returns (uint256) {\\n        return userRewards[_user].refferReward;\\n    }\\n\\n    function userIndex(address _user) public view returns (uint256) {\\n        return investment[_user].length;\\n    }\\n\\n    function depositAddAmount(\\n        address _user\\n    ) public view returns (uint256 amount) {\\n        uint256 index = investment[_user].length;\\n        for (uint256 i = 0; i < index; i++) {\\n            user memory users = investment[_user][i];\\n            amount += plansData[users.step].amount;\\n        }\\n        return amount;\\n    }\\n\\n    function numberOfPlans() public view returns (uint256) {\\n        return plansData.length;\\n    }\\n\\n    function latestActivitiesLength() public view returns (uint256) {\\n        return activities.length;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawCapitals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawReferralRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_event\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"addNewPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPaymentWallet\",\"type\":\"address\"}],\"name\":\"changePaymentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositAddAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getmyDirectReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamp\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is1stBonusClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is2ndBonusClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestActivitiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"pausedPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plansData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addPlanTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalBusinessUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"unpausedPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"usdTToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refferReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indirectBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawCapital\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTeamBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RexxStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}