{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n\r\n///$$$$       /$$$$$$$$                               /$$   /$$           /$$             /$$$$\r\n//| $$_/      | $$_____/                              | $$  | $$          | $$            |_  $$\r\n//| $$        | $$        /$$$$$$   /$$$$$$  /$$$$$$$ | $$  | $$ /$$   /$$| $$$$$$$         | $$\r\n//| $$        | $$$$$    |____  $$ /$$__  $$| $$__  $$| $$$$$$$$| $$  | $$| $$__  $$        | $$\r\n//| $$        | $$__/     /$$$$$$$| $$  \\__/| $$  \\ $$| $$__  $$| $$  | $$| $$  \\ $$        | $$\r\n//| $$        | $$       /$$__  $$| $$      | $$  | $$| $$  | $$| $$  | $$| $$  | $$        | $$\r\n//| $$$$      | $$$$$$$$|  $$$$$$$| $$      | $$  | $$| $$  | $$|  $$$$$$/| $$$$$$$/       /$$$$\r\n//|____/      |________/ \\_______/|__/      |__/  |__/|__/  |__/ \\______/ |_______/       |____/\r\n//\r\n//\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC\r\n//\r\n//\r\n///$$      /$$ /$$                                           /$$\r\n//| $$  /$ | $$| $$                                          |__/\r\n//| $$ /$$$| $$| $$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$        /$$ /$$$$$$$   /$$$$$$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$\r\n//| $$/$$ $$ $$| $$__  $$ /$$__  $$ /$$__  $$ /$$__  $$      | $$| $$__  $$ /$$_____/ /$$__  $$| $$_  $$_  $$ /$$__  $$\r\n//| $$$$_  $$$$| $$  \\ $$| $$$$$$$$| $$  \\__/| $$$$$$$$      | $$| $$  \\ $$| $$      | $$  \\ $$| $$ \\ $$ \\ $$| $$$$$$$$\r\n//| $$$/ \\  $$$| $$  | $$| $$_____/| $$      | $$_____/      | $$| $$  | $$| $$      | $$  | $$| $$ | $$ | $$| $$_____/\r\n//| $$/   \\  $$| $$  | $$|  $$$$$$$| $$      |  $$$$$$$      | $$| $$  | $$|  $$$$$$$|  $$$$$$/| $$ | $$ | $$|  $$$$$$$\r\n//|__/     \\__/|__/  |__/ \\_______/|__/       \\_______/      |__/|__/  |__/ \\_______/ \\______/ |__/ |__/ |__/ \\_______/\r\n//\r\n//\r\n//\r\n///$$                   /$$     /$$                                             /$$\r\n//|__/                  | $$    | $$                                            | $$\r\n///$$  /$$$$$$$       /$$$$$$  | $$$$$$$   /$$$$$$         /$$$$$$  /$$   /$$ /$$$$$$    /$$$$$$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$\r\n//| $$ /$$_____/      |_  $$_/  | $$__  $$ /$$__  $$       /$$__  $$| $$  | $$|_  $$_/   /$$_____/ /$$__  $$| $$_  $$_  $$ /$$__  $$\r\n//| $$|  $$$$$$         | $$    | $$  \\ $$| $$$$$$$$      | $$  \\ $$| $$  | $$  | $$    | $$      | $$  \\ $$| $$ \\ $$ \\ $$| $$$$$$$$\r\n//| $$ \\____  $$        | $$ /$$| $$  | $$| $$_____/      | $$  | $$| $$  | $$  | $$ /$$| $$      | $$  | $$| $$ | $$ | $$| $$_____/\r\n//| $$ /$$$$$$$/        |  $$$$/| $$  | $$|  $$$$$$$      |  $$$$$$/|  $$$$$$/  |  $$$$/|  $$$$$$$|  $$$$$$/| $$ | $$ | $$|  $$$$$$$\r\n//|__/|_______/          \\___/  |__/  |__/ \\_______/       \\______/  \\______/    \\___/   \\_______/ \\______/ |__/ |__/ |__/ \\_______/\r\n\r\n\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only. Calls internal _authorize method\r\n     */\r\n    function authorize(address adr) external onlyOwner {\r\n        _authorize(adr);\r\n    }\r\n    \r\n    function _authorize (address adr) internal {\r\n        authorizations[adr] = true;\r\n    }\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n\r\nlibrary EarnHubLib {\r\n    struct User {\r\n        address _address;\r\n        uint256 lastPurchase;\r\n        bool isReferral;\r\n        uint256 referralBuyDiscount;\r\n        uint256 referralSellDiscount;\r\n        uint256 referralCount;\r\n    }\r\n\r\n    enum TransferType {\r\n        Sale,\r\n        Purchase,\r\n        Transfer\r\n    }\r\n\r\n    struct Transfer {\r\n        User user;\r\n        uint256 amt;\r\n        TransferType transferType;\r\n        address from;\r\n        address to;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ITransferGateway {\r\n    function removeHookedContract(uint256 _hookedContractId) external;\r\n    function updateHookedContractShares(uint256 _hookedContractId, uint256 _newShares) external;\r\n    function updateHookedContractHandicap(uint256 _hookedContractId, uint256 _newHandicap) external;\r\n    function onTransfer(EarnHubLib.Transfer memory _transfer) external;\r\n    function setBpScale(uint256 _newBpScale) external;\r\n    function setMinGasThreshold(uint256 _newMinGas) external;\r\n    function setMaxGas(uint256 _newMaxGas) external;\r\n    function depositBNB() external payable;\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\ninterface IAnyflect {\r\n    function subscribeToReflection(IDEXRouter router, IBEP20 token) external;\r\n    function excludeFromProcess(bool _val) external;\r\n    function setShares(address from, address to, uint256 toBalance, uint256 fromBalance) external;\r\n    function setExcludedFrom(address from, bool val) external;\r\n    function setExcludedTo(address from, bool val) external;\r\n}\r\n\r\ninterface ILoyaltyTracker {\r\n    function getReferralData(address _addr) external returns(bool, uint256, uint256, uint256); // * gets all of the data below in a single DELEGATECALL\r\n    function getReferralStatus(address _addr) external returns (bool);\r\n    function getBuyDiscount(address _addr) external returns (uint256);\r\n    function getSellDiscount(address _addr) external returns (uint256);\r\n    function getReferralCount(address _addr) external returns (uint256);\r\n}\r\n\r\ncontract EarnHub is IBEP20, Auth {\r\n    // * Custom Event declarations\r\n    event GenericErrorEvent(string reason);\r\n\r\n    address deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Fees\r\n    uint256 public baseSellFee = 1700; //! default floor sale Fee, always taxes higher and decays to this value after N days (see getVariableFee())\r\n    uint256 public currentSellFee = baseSellFee;\r\n    uint256 public maxSellFee = 0;\r\n    uint256 public transferFee = 0;\r\n    uint256 public baseBuyFee = 1200;\r\n\r\n    // Variable Fee timestamps\r\n    uint256 public variableFeeStartingTimestamp;\r\n    uint256 public variableFeeEndingTimestamp;\r\n\r\n    // Convenience data\r\n    address public pair;\r\n    mapping(address => bool) liquidityPairs;\r\n\r\n    mapping(address => bool) isPresale;\r\n\r\n    // Token data\r\n    string constant _name = \"EarnHub Token\";\r\n    string constant _symbol = \"EHB\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 public _totalSupply = 7e13 * 1e9;\r\n    uint256 public _maxTxAmount = _totalSupply;\r\n    uint256 public _swapThreshold = 1000 * 1e9;\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping (address => bool ) isBasicTransfer;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n\r\n    // User data\r\n    mapping(address => EarnHubLib.User) public users;\r\n\r\n    IAnyflect public anyflect;\r\n    mapping(address => bool) public isAnyflectExempt;\r\n\r\n    IDEXRouter public router;\r\n    ITransferGateway public transferGateway;\r\n    ILoyaltyTracker public loyaltyTracker;\r\n\r\n    // Modifier used to know if our own contract executed a swap and this transfer corresponds to a swap executed by this contract. This is used to prevent circular liquidity issues.\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (address _dexRouter, ITransferGateway _transferGateway, string memory _name, string memory _symbol) Auth(msg.sender) {\r\n        // Token Variables\r\n        _name = _name;\r\n        _symbol = _symbol;\r\n\r\n        transferGateway = _transferGateway;\r\n        _authorize(address(transferGateway));\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[_dexRouter] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        // Enabling Dex trading\r\n        router = IDEXRouter(_dexRouter);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        liquidityPairs[pair] = true;\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        approve(_dexRouter, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (inSwap || sender == address(anyflect) || isBasicTransfer[sender]) {return _basicTransfer(sender, recipient, amount);}\r\n\r\n\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n\r\n        if (_shouldSwapBack()) { _swapBack(); }\r\n        EarnHubLib.TransferType transferType = _createTransferType(sender, recipient);\r\n\r\n        // * Getting referral data for transferType\r\n        bool isReferral;\r\n        uint256 referralBuyDiscount;\r\n        uint256 referralSellDiscount;\r\n        uint256 referralCount;\r\n        if (address(loyaltyTracker) != address(0)) {\r\n            (isReferral, referralBuyDiscount, referralSellDiscount, referralCount) = getReferralData(sender);\r\n            if (referralSellDiscount > baseSellFee) {\r\n                emit GenericErrorEvent(\"_transferFrom(): referralSellDiscount > baseSellFee\");\r\n            }\r\n            if (referralBuyDiscount > baseBuyFee) {\r\n                emit GenericErrorEvent(\"_transferFrom(): referralBuyDiscount > baseBuyFee\");\r\n            }\r\n        }\r\n\r\n        uint amountAfterFee = !isFeeExempt[sender] ? _takeFee(sender, recipient, amount, transferType, referralBuyDiscount, referralSellDiscount) : amount;\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amountAfterFee;\r\n\r\n        EarnHubLib.User memory user = _createOrUpdateUser(address(sender), block.timestamp, isReferral, referralBuyDiscount, referralSellDiscount, referralCount);\r\n\r\n        EarnHubLib.Transfer memory transf = _createTransfer(user, amount, transferType, sender, recipient);\r\n\r\n\r\n        if (address(anyflect) != address(0)) {\r\n            uint256 balancesSender = _balances[sender];\r\n            uint256 balancesRecipient = _balances[recipient];\r\n\r\n            try anyflect.setShares(sender, recipient, balancesSender, balancesRecipient) {\r\n\r\n            } catch Error (string memory reason) {\r\n                emit GenericErrorEvent(\"_transferFrom(): anyflect.setShares() Failed\");\r\n                emit GenericErrorEvent(reason);\r\n            }\r\n        }\r\n\r\n\r\n        try transferGateway.onTransfer(transf) {\r\n\r\n        } catch Error (string memory reason) {\r\n            emit GenericErrorEvent('_transferFrom(): transferGateway.onTransfer() Failed');\r\n            emit GenericErrorEvent(reason);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountAfterFee);\r\n        return true;\r\n    }\r\n\r\n    function _createOrUpdateUser(address _addr, uint256 _lastPurchase, bool _isReferral, uint256 _referralBuyDiscount, uint256 _referralSellDiscount, uint256 _referralCount) internal returns (EarnHubLib.User memory) {\r\n        EarnHubLib.User memory user = EarnHubLib.User(_addr, _lastPurchase, _isReferral, _referralBuyDiscount, _referralSellDiscount, _referralCount);\r\n\r\n        users[_addr] = user;\r\n\r\n        return user;\r\n    }\r\n\r\n    function _createTransferType(address _from, address _recipient) internal view returns (EarnHubLib.TransferType) {\r\n        if (liquidityPairs[_recipient]) {\r\n            return EarnHubLib.TransferType.Sale;\r\n        } else if (liquidityPairs[_from] || isPresale[_from]) {\r\n            return EarnHubLib.TransferType.Purchase;\r\n        }\r\n        return EarnHubLib.TransferType.Transfer;\r\n    }\r\n\r\n    function _createTransfer(EarnHubLib.User memory _address, uint256 _amt, EarnHubLib.TransferType _transferType, address _from, address _to) internal pure returns (EarnHubLib.Transfer memory) {\r\n        EarnHubLib.Transfer memory _transfer = EarnHubLib.Transfer(_address, _amt, _transferType, _from, _to);\r\n        return _transfer;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _takeFee(address _sender, address _receiver, uint256 _amount, EarnHubLib.TransferType _transferType, uint256 _referralBuyDiscount, uint256 _referralSellDiscount) internal returns (uint256) {\r\n        // * Takes the fee and keeps remainder in contract\r\n        uint256 feeAmount = _amount * getTotalFee(_transferType, _referralBuyDiscount, _referralSellDiscount) / 10000;\r\n\r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] += feeAmount;\r\n            emit Transfer(_sender, address(this), feeAmount);\r\n        }\r\n\r\n        return (_amount - feeAmount);\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return ((msg.sender != pair) && (!inSwap) && (_balances[address(this)] >= _swapThreshold));\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        uint256 amountToSwap = _swapThreshold;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance - balanceBefore;\r\n\r\n        try transferGateway.depositBNB{value : amountBNB}() {\r\n\r\n        } catch Error(string memory reason) {\r\n            emit GenericErrorEvent(\"_swapBack(): transferGateway.depositBNB() Failed\");\r\n            emit GenericErrorEvent(reason);\r\n        }\r\n    }\r\n\r\n\r\n    // * Getter (view only) Functions\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_totalSupply - balanceOf(deadAddress) - balanceOf(address(0)));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 _accuracy) public view returns (uint256) {\r\n        return (_accuracy * (balanceOf(pair) * 2) / getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 _target, uint256 _accuracy) public view returns (bool) {\r\n        return (getLiquidityBacking(_accuracy) > _target);\r\n    }\r\n\r\n    function getTotalFee(EarnHubLib.TransferType _transferType, uint256 _referralBuyDiscount, uint256 _referralSellDiscount) public returns (uint256) {\r\n\r\n\r\n        if (_transferType == EarnHubLib.TransferType.Sale) {\r\n            uint256 sellFee = maxSellFee > 0 ? getVariableSellFee() : baseSellFee;\r\n            if (_referralSellDiscount > 0) sellFee -= _referralSellDiscount;\r\n            return sellFee;\r\n        }\r\n        if (_transferType == EarnHubLib.TransferType.Transfer) {\r\n            return transferFee;\r\n        }\r\n        else {\r\n            uint256 buyFee = baseBuyFee;\r\n            if (_referralBuyDiscount > 0) buyFee -= _referralBuyDiscount;\r\n            return buyFee;\r\n        }\r\n    }\r\n\r\n    function getVariableSellFee() public returns (uint256) {\r\n        // ! starts at maxSellFee then lineally decays to baseSellFee over variableTaxTimeframe\r\n\r\n        // * variable sell fee timeframe ended or timeframe hasn't started\r\n        if (variableFeeStartingTimestamp > block.timestamp || variableFeeEndingTimestamp < block.timestamp) {\r\n            if (variableFeeEndingTimestamp < block.timestamp) maxSellFee = 0;\r\n\r\n            currentSellFee = baseSellFee;\r\n            return baseSellFee;\r\n        } else if (variableFeeStartingTimestamp <= block.timestamp && block.timestamp <= variableFeeEndingTimestamp) {// * while in variable fee timeframe\r\n            // * how long does variableFee timeframe lasts in seconds\r\n            uint256 variableTaxTimeframe = variableFeeEndingTimestamp - variableFeeStartingTimestamp;\r\n            uint256 sellFee = baseSellFee + ((maxSellFee - baseSellFee) * (variableTaxTimeframe - (block.timestamp - variableFeeStartingTimestamp))) / variableTaxTimeframe;\r\n            currentSellFee = sellFee;\r\n            return sellFee;\r\n        }\r\n        return baseSellFee;\r\n    }\r\n\r\n    function getReferralData(address _addr) public returns (bool isReferral, uint256 referralBuyDiscount, uint256 referralSellDiscount, uint256 referralCount) {\r\n\r\n        try loyaltyTracker.getReferralData(_addr) returns (bool isReferral, uint256 referralBuyDiscount, uint256 referralSellDiscount, uint256 referralCount){\r\n            isReferral = isReferral;\r\n            referralBuyDiscount = referralBuyDiscount;\r\n            referralSellDiscount = referralSellDiscount;\r\n            referralCount = referralCount;\r\n\r\n        } catch Error (string memory reason){\r\n            emit GenericErrorEvent('getReferralData(): loyaltyTracker.getReferralData() Failed');\r\n            emit GenericErrorEvent(reason);\r\n\r\n            isReferral = false;\r\n            referralBuyDiscount = 0;\r\n            referralSellDiscount = 0;\r\n            referralCount = 0;\r\n        }\r\n\r\n        return (isReferral, referralBuyDiscount, referralSellDiscount, referralCount);\r\n\r\n    }\r\n\r\n\r\n    // * Setter (write only) Functions\r\n    function setVariableSellFeeParams(uint256 _maxSellFee, bool _useCurrentTimestampForStart, uint256 _startingTimestamp, uint256 _endingTimestamp) external authorized {\r\n        require(_endingTimestamp >= _startingTimestamp, \"_endingTimestamp should be >= _startingTimestamp\");\r\n        require(_maxSellFee >= baseSellFee, \"_maxFee should be >= baseSellFee\");\r\n\r\n        maxSellFee = _maxSellFee;\r\n        variableFeeStartingTimestamp = _useCurrentTimestampForStart ? block.timestamp : _startingTimestamp;\r\n        variableFeeEndingTimestamp = _endingTimestamp;\r\n    }\r\n\r\n    function setNewBaseFees(uint256 _newBaseSellFee, uint256 _newTransferFee, uint256 _newBaseBuyFee) external authorized {\r\n        require(_newBaseSellFee <= 10000 && _newTransferFee <= 10000 && _newBaseBuyFee <= 10000, \"New fees should be less than 100%\");\r\n        baseSellFee = _newBaseSellFee;\r\n        transferFee = _newTransferFee;\r\n        baseBuyFee = _newBaseBuyFee;\r\n    }\r\n\r\n    function setTransferGateway(ITransferGateway _transferGateway) external authorized {\r\n        transferGateway = _transferGateway;\r\n        _authorize(address(_transferGateway));\r\n    }\r\n\r\n    function setAnyflect(IAnyflect _anyflect) external authorized {\r\n        anyflect = _anyflect;\r\n        anyflect.setExcludedFrom(pair, true);\r\n        anyflect.setExcludedTo(pair, true);\r\n        anyflect.setExcludedFrom(address(this), true);\r\n        anyflect.setExcludedFrom(address(0), true);\r\n        anyflect.setExcludedFrom(0x000000000000000000000000000000000000dEaD, true);\r\n        _authorize(address(anyflect));\r\n    }\r\n\r\n    function setDexRouter(IDEXRouter _router) external authorized {\r\n        router = _router;\r\n    }\r\n\r\n    function setLoyaltyTracker(ILoyaltyTracker _loyaltyTracker) external authorized {\r\n        loyaltyTracker = _loyaltyTracker;\r\n        _authorize(address(_loyaltyTracker));\r\n    }\r\n\r\n    function setTxLimit(uint256 _amount) external authorized {\r\n        _maxTxAmount = _amount;\r\n    }\r\n\r\n    function setIsFeeExempt(address _addr, bool _exempt) external authorized {\r\n        isFeeExempt[_addr] = _exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address _addr, bool _exempt) external authorized {\r\n        isTxLimitExempt[_addr] = _exempt;\r\n    }\r\n\r\n    function setLiquidityPair(address _pair, bool _value) external authorized {\r\n        liquidityPairs[_pair] = _value;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 _amount) external authorized {\r\n        _swapThreshold = _amount;\r\n    }\r\n\r\n    function setAnyflectExempt(address _addr, bool _value) external authorized {\r\n        isAnyflectExempt[_addr] = _value;\r\n    }\r\n\r\n    function setPresaleContract(address _addr, bool _value) external authorized {\r\n        isPresale[_addr] = _value;\r\n    }\r\n\r\n    function setBasicTransfer(address _addr, bool _value) external authorized {\r\n        isBasicTransfer[_addr] = _value;\r\n    }\r\n\r\n    function rescueSquad(address payable _to) external authorized {\r\n        (bool success,) = _to.call{value : address(this).balance}(\"\");\r\n        require(success, \"unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    // Grabs any shitcoin someone sends to our contract, converts it to rewards for our holders \u2665\r\n    function fuckShitcoins(IBEP20 _shitcoin, address[] memory _path, address _to) external authorized {\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _shitcoin.balanceOf(address(this)),\r\n            0,\r\n            _path,\r\n            address(_to),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // * Interface-compliant functions\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {return _totalSupply;}\r\n\r\n    function decimals() external pure override returns (uint8) {return _decimals;}\r\n\r\n    function symbol() external pure override returns (string memory) {return _symbol;}\r\n\r\n    function name() external pure override returns (string memory) {return _name;}\r\n\r\n    function getOwner() external view override returns (address) {return owner;}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"contract ITransferGateway\",\"name\":\"_transferGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"GenericErrorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyflect\",\"outputs\":[{\"internalType\":\"contract IAnyflect\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_shitcoin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"fuckShitcoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferralData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralBuyDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralSellDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EarnHubLib.TransferType\",\"name\":\"_transferType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_referralBuyDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralSellDiscount\",\"type\":\"uint256\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVariableSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAnyflectExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyTracker\",\"outputs\":[{\"internalType\":\"contract ILoyaltyTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAnyflect\",\"name\":\"_anyflect\",\"type\":\"address\"}],\"name\":\"setAnyflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAnyflectExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBasicTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoyaltyTracker\",\"name\":\"_loyaltyTracker\",\"type\":\"address\"}],\"name\":\"setLoyaltyTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBaseBuyFee\",\"type\":\"uint256\"}],\"name\":\"setNewBaseFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPresaleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferGateway\",\"name\":\"_transferGateway\",\"type\":\"address\"}],\"name\":\"setTransferGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useCurrentTimestampForStart\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingTimestamp\",\"type\":\"uint256\"}],\"name\":\"setVariableSellFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGateway\",\"outputs\":[{\"internalType\":\"contract ITransferGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastPurchase\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referralBuyDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralSellDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableFeeEndingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableFeeStartingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EarnHub", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e5b8ff8a46251acedf07ec762f66493c23a073d6000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015400000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28d336b03602aec51b4387f27c3c26d9c41448d8fcd31a2719cc9df55f285205"}