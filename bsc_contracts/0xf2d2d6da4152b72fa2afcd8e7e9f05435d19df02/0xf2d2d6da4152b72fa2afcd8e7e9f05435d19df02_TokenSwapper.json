{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IPancakeRouter02 {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenSwapper {\r\n    address private constant PANCAKE_ROUTER = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;\r\n\r\n    IPancakeRouter02 private pancakeRouter;\r\n    address private tokenAddress; // Set the token address\r\n\r\n    constructor() {\r\n        pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER);\r\n        tokenAddress = 0xdBf830A929133291D43EdC9546CbE7a934fb328d; // Replace with your actual token address\r\n    }\r\n\r\n    // Approve the PancakeSwap Router to spend tokens\r\n    function approvePancakeRouter(uint256 amount) external {\r\n        IERC20(tokenAddress).approve(PANCAKE_ROUTER, amount);\r\n    }\r\n\r\n    // Simplified swap function with default values\r\n    function swapTokensForETH(uint256 amount) external {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress; // Input token address\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        // You can adjust these default values based on your needs\r\n        uint256 amountOutMin = 0;\r\n        address to = address(this); // Swapped ETH will be sent to this contract\r\n        uint256 deadline = block.timestamp + 300; // Use a reasonable deadline\r\n\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            amountOutMin,\r\n            path,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approvePancakeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSwapper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1b34cdac0a5677197a63e0e36a7ada417ca56a340090464a96bfe90684e8584"}