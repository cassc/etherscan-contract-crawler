{"SourceCode": "pragma solidity 0.8.18;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// This abstract contract provides basic functions to access the sender and message data.\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender; // Returns the address of the message sender.\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data; // Returns the data of the message.\r\n    }\r\n}\r\n\r\n// Interface for the ERC20 token standard.\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256); // Get the total token supply.\r\n    function balanceOf(address account) external view returns (uint256); // Get the balance of a specific account.\r\n    function transfer(address recipient, uint256 amount) external returns (bool); // Transfer tokens to a recipient.\r\n    function allowance(address owner, address spender) external view returns (uint256); // Check the amount that one address is allowed to spend on behalf of another.\r\n    function approve(address spender, uint256 amount) external returns (bool); // Approve an address to spend tokens on your behalf.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); // Transfer tokens from one address to another.\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value); // Event emitted when tokens are transferred.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value); // Event emitted when an allowance is set.\r\n}\r\n\r\n// Interface for ERC20 token metadata.\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory); // Get the token name.\r\n    function symbol() external view returns (string memory); // Get the token symbol.\r\n    function decimals() external view returns (uint8); // Get the number of decimals used for token values.\r\n}\r\n\r\n// Main contract FUTOSHI inheriting from Context, IERC20, and IERC20Metadata.\r\ncontract FUTOSHI is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private balances; // Store balances of users.\r\n    mapping(address => mapping(address => uint256)) private allowances; // Store allowed transfer amounts.\r\n    string private _name = 'Futoshi'; // Token name.\r\n    string private _symbol = 'MEMEDOG'; // Token symbol.\r\n    uint256 private _totalSupply; // Total supply of tokens.\r\n    uint256 public StartedSupply; // Initial supply.\r\n    uint256 public TotalBurnedSupply; // Total burned tokens.\r\n    address public burnAddress; // Address where tokens are burned.\r\n\r\n    constructor() {\r\n        // Initialize the contract with an initial supply and set the burn address.\r\n        _mint(_msgSender(), 20000000000000 * 10 ** 18); // Mint tokens to the contract deployer.\r\n        burnAddress = 0x000000000000000000000000000000000000dEaD; // Set the burn address.\r\n        _totalSupply = 20000000000000 * 10 ** 18; // Set the total supply.\r\n        StartedSupply = 20000000000000 * 10 ** 18; // Record the initial supply.\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name; // Get the token name.\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol; // Get the token symbol.\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18; // Specify the number of decimal places for token values.\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply; // Get the total token supply.\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return balances[account]; // Get the balance of a specific account.\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return allowances[owner][spender]; // Get the allowed amount for an address to spend on behalf of another.\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount); // Approve an address to spend tokens on your behalf.\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue); // Increase the allowance for an address to spend tokens.\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\"); // Ensure the allowance doesn't go below zero.\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue); // Decrease the allowance for an address to spend tokens.\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount); // Transfer tokens to a recipient.\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount); // Transfer tokens from one address to another.\r\n        uint256 currentAllowance = allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\"); // Ensure the transfer amount is within the allowed limit.\r\n        _approve(sender, _msgSender(), currentAllowance - amount); // Update the allowance.\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\"); // Ensure neither the owner nor spender address is zero.\r\n        require(spender != address(0), \"ERC20: approve to the zero address\"); // Ensure neither the owner nor spender address is zero.\r\n\r\n        if (allowances[owner][spender] != amount) {\r\n            allowances[owner][spender] = amount; // Set the allowance.\r\n            emit Approval(owner, spender, amount); // Emit an event to log the approval.\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\"); // Ensure the sender address is not zero.\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\"); // Ensure the recipient address is not zero.\r\n        require(balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\"); // Ensure the sender has enough balance to make the transfer.\r\n\r\n        balances[sender] -= amount; // Deduct the transferred amount from the sender's balance.\r\n        balances[recipient] += amount; // Add the transferred amount to the recipient's balance.\r\n        if (recipient == burnAddress) {\r\n            _totalSupply -= amount; // Reduce the total supply when tokens are burned.\r\n            TotalBurnedSupply += amount; // Track the total burned tokens.\r\n        }\r\n        emit Transfer(sender, recipient, amount); // Emit an event to log the transfer.\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\"); // Ensure the minting address is not zero.\r\n\r\n        _totalSupply += amount; // Increase the total supply.\r\n        balances[account] += amount; // Add the minted amount to the account's balance.\r\n        emit Transfer(address(0), account, amount); // Emit an event to log the minting.\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBurnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FUTOSHI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4af409059f9b84df4604a1853b8e1dfb1f58333ce61e4ddf4ca69964d40d7181"}