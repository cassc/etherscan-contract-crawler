{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/FarmingRange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// contracts\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"./interfaces/IFarmingRange.sol\\\";\\n\\n/**\\n * @title FarmingRange\\n * @notice Farming Range allows users to stake LP Tokens to receive various rewards\\n * @custom:from Contract taken from the alpaca protocol, adapted to version 0.8.17 and modified with more functions\\n * @custom:url https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/solidity/contracts/6.12/GrazingRange.sol\\n */\\ncontract FarmingRange is IFarmingRange, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(uint256 => RewardInfo[]) public campaignRewardInfo;\\n\\n    CampaignInfo[] public campaignInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public rewardInfoLimit;\\n    address public immutable rewardManager;\\n\\n    constructor(address _rewardManager) {\\n        rewardInfoLimit = 52;\\n        require(_rewardManager != address(0), \\\"FarmingRange::constructor::Reward manager is not defined\\\");\\n        rewardManager = _rewardManager;\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external onlyOwner {\\n        rewardInfoLimit = _updatedRewardInfoLimit;\\n        emit SetRewardInfoLimit(rewardInfoLimit);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function addCampaignInfo(\\n        IERC20 _stakingToken,\\n        IERC20 _rewardToken,\\n        uint256 _startBlock\\n    ) external virtual onlyOwner {\\n        require(_startBlock > block.number, \\\"FarmingRange::addCampaignInfo::Start block should be in the future\\\");\\n        campaignInfo.push(\\n            CampaignInfo({\\n                stakingToken: _stakingToken,\\n                rewardToken: _rewardToken,\\n                startBlock: _startBlock,\\n                lastRewardBlock: _startBlock,\\n                accRewardPerShare: 0,\\n                totalStaked: 0,\\n                totalRewards: 0\\n            })\\n        );\\n        emit AddCampaignInfo(campaignInfo.length - 1, _stakingToken, _rewardToken, _startBlock);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function addRewardInfo(\\n        uint256 _campaignID,\\n        uint256 _endBlock,\\n        uint256 _rewardPerBlock\\n    ) public virtual onlyOwner nonReentrant {\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"FarmingRange::addRewardInfo::reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock >= block.number,\\n            \\\"FarmingRange::addRewardInfo::reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock < _endBlock,\\n            \\\"FarmingRange::addRewardInfo::bad new endblock\\\"\\n        );\\n        uint256 _startBlock = rewardInfo.length == 0 ? campaign.startBlock : rewardInfo[rewardInfo.length - 1].endBlock;\\n        uint256 _blockRange = _endBlock - _startBlock;\\n        uint256 _totalRewards = _rewardPerBlock * _blockRange;\\n        campaign.totalRewards = campaign.totalRewards + _totalRewards;\\n        rewardInfo.push(RewardInfo({ endBlock: _endBlock, rewardPerBlock: _rewardPerBlock }));\\n        _transferFromWithAllowance(campaign.rewardToken, _totalRewards, _campaignID);\\n        emit AddRewardInfo(_campaignID, rewardInfo.length - 1, _endBlock, _rewardPerBlock);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function addRewardInfoMultiple(\\n        uint256 _campaignID,\\n        uint256[] calldata _endBlock,\\n        uint256[] calldata _rewardPerBlock\\n    ) external onlyOwner {\\n        require(_endBlock.length == _rewardPerBlock.length, \\\"FarmingRange::addRewardMultiple::wrong parameters length\\\");\\n        for (uint256 _i; _i != _endBlock.length; ) {\\n            addRewardInfo(_campaignID, _endBlock[_i], _rewardPerBlock[_i]);\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function updateRewardInfo(\\n        uint256 _campaignID,\\n        uint256 _rewardIndex,\\n        uint256 _endBlock,\\n        uint256 _rewardPerBlock\\n    ) public virtual onlyOwner nonReentrant {\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        RewardInfo storage selectedRewardInfo = rewardInfo[_rewardIndex];\\n        uint256 _previousEndBlock = selectedRewardInfo.endBlock;\\n        _updateCampaign(_campaignID);\\n        require(_previousEndBlock >= block.number, \\\"FarmingRange::updateRewardInfo::reward period ended\\\");\\n        if (_rewardIndex != 0) {\\n            require(\\n                rewardInfo[_rewardIndex - 1].endBlock < _endBlock,\\n                \\\"FarmingRange::updateRewardInfo::bad new endblock\\\"\\n            );\\n        }\\n        if (rewardInfo.length > _rewardIndex + 1) {\\n            require(\\n                _endBlock < rewardInfo[_rewardIndex + 1].endBlock,\\n                \\\"FarmingRange::updateRewardInfo::reward period end is in next range\\\"\\n            );\\n        }\\n        (bool _refund, uint256 _diff) = _updateRewardsDiff(\\n            _rewardIndex,\\n            _endBlock,\\n            _rewardPerBlock,\\n            rewardInfo,\\n            campaign,\\n            selectedRewardInfo\\n        );\\n        if (!_refund && _diff != 0) {\\n            _transferFromWithAllowance(campaign.rewardToken, _diff, _campaignID);\\n        }\\n        // If _endblock is changed, and if we have another range after the updated one,\\n        // we need to update rewardPerBlock to distribute on the next new range or we could run out of tokens\\n        if (_endBlock != _previousEndBlock && rewardInfo.length - 1 > _rewardIndex) {\\n            RewardInfo storage nextRewardInfo = rewardInfo[_rewardIndex + 1];\\n            uint256 _nextRewardInfoEndBlock = nextRewardInfo.endBlock;\\n            uint256 _initialBlockRange = _nextRewardInfoEndBlock - _previousEndBlock;\\n            uint256 _nextBlockRange = _nextRewardInfoEndBlock - _endBlock;\\n            uint256 _currentRewardPerBlock = nextRewardInfo.rewardPerBlock;\\n            uint256 _initialNextTotal = _initialBlockRange * _currentRewardPerBlock;\\n            _currentRewardPerBlock = (_currentRewardPerBlock * _initialBlockRange) / _nextBlockRange;\\n            uint256 _nextTotal = _nextBlockRange * _currentRewardPerBlock;\\n            nextRewardInfo.rewardPerBlock = _currentRewardPerBlock;\\n            if (_nextTotal < _initialNextTotal) {\\n                campaign.rewardToken.safeTransfer(rewardManager, _initialNextTotal - _nextTotal);\\n                campaign.totalRewards -= _initialNextTotal - _nextTotal;\\n            }\\n        }\\n        // UPDATE total\\n        campaign.totalRewards = _refund ? campaign.totalRewards - _diff : campaign.totalRewards + _diff;\\n        selectedRewardInfo.endBlock = _endBlock;\\n        selectedRewardInfo.rewardPerBlock = _rewardPerBlock;\\n        emit UpdateRewardInfo(_campaignID, _rewardIndex, _endBlock, _rewardPerBlock);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function updateRewardMultiple(\\n        uint256 _campaignID,\\n        uint256[] memory _rewardIndex,\\n        uint256[] memory _endBlock,\\n        uint256[] memory _rewardPerBlock\\n    ) public onlyOwner {\\n        require(\\n            _rewardIndex.length == _endBlock.length && _rewardIndex.length == _rewardPerBlock.length,\\n            \\\"FarmingRange::updateRewardMultiple::wrong parameters length\\\"\\n        );\\n        for (uint256 _i; _i != _rewardIndex.length; ) {\\n            updateRewardInfo(_campaignID, _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function updateCampaignsRewards(\\n        uint256[] calldata _campaignID,\\n        uint256[][] calldata _rewardIndex,\\n        uint256[][] calldata _endBlock,\\n        uint256[][] calldata _rewardPerBlock\\n    ) external onlyOwner {\\n        require(\\n            _campaignID.length == _rewardIndex.length &&\\n                _rewardIndex.length == _endBlock.length &&\\n                _rewardIndex.length == _rewardPerBlock.length,\\n            \\\"FarmingRange::updateCampaignsRewards::wrong rewardInfo length\\\"\\n        );\\n        for (uint256 _i; _i != _campaignID.length; ) {\\n            updateRewardMultiple(_campaignID[_i], _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function removeLastRewardInfo(uint256 _campaignID) external virtual onlyOwner {\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        uint256 _rewardInfoLength = rewardInfo.length;\\n        require(_rewardInfoLength != 0, \\\"FarmingRange::updateCampaignsRewards::no rewardInfoLen\\\");\\n        RewardInfo storage lastRewardInfo = rewardInfo[_rewardInfoLength - 1];\\n        uint256 _lastRewardInfoEndBlock = lastRewardInfo.endBlock;\\n        require(_lastRewardInfoEndBlock > block.number, \\\"FarmingRange::removeLastRewardInfo::reward period ended\\\");\\n        _updateCampaign(_campaignID);\\n        if (lastRewardInfo.rewardPerBlock != 0) {\\n            (bool _refund, uint256 _diff) = _updateRewardsDiff(\\n                _rewardInfoLength - 1,\\n                _lastRewardInfoEndBlock,\\n                0,\\n                rewardInfo,\\n                campaign,\\n                lastRewardInfo\\n            );\\n            if (_refund) {\\n                campaign.totalRewards = campaign.totalRewards - _diff;\\n            }\\n        }\\n        rewardInfo.pop();\\n        emit RemoveRewardInfo(_campaignID, _rewardInfoLength - 1);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256) {\\n        return campaignRewardInfo[_campaignID].length;\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function campaignInfoLen() external view returns (uint256) {\\n        return campaignInfo.length;\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function currentEndBlock(uint256 _campaignID) external view virtual returns (uint256) {\\n        return _endBlockOf(_campaignID, block.number);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function currentRewardPerBlock(uint256 _campaignID) external view virtual returns (uint256) {\\n        return _rewardPerBlockOf(_campaignID, block.number);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) public pure returns (uint256) {\\n        if ((_from >= _endBlock) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endBlock) {\\n            return _to - _from;\\n        }\\n        return _endBlock - _from;\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256) {\\n        return\\n            _pendingReward(_campaignID, userInfo[_campaignID][_user].amount, userInfo[_campaignID][_user].rewardDebt);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function updateCampaign(uint256 _campaignID) external nonReentrant {\\n        _updateCampaign(_campaignID);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function massUpdateCampaigns() external nonReentrant {\\n        uint256 _length = campaignInfo.length;\\n        for (uint256 _i; _i != _length; ) {\\n            _updateCampaign(_i);\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function deposit(uint256 _campaignID, uint256 _amount) public nonReentrant {\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\n        _updateCampaign(_campaignID);\\n        if (user.amount != 0) {\\n            uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\\n            if (_pending != 0) {\\n                campaign.rewardToken.safeTransfer(address(msg.sender), _pending);\\n            }\\n        }\\n        if (_amount != 0) {\\n            user.amount = user.amount + _amount;\\n            campaign.totalStaked = campaign.totalStaked + _amount;\\n            campaign.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / (1e20);\\n        emit Deposit(msg.sender, _amount, _campaignID);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function depositWithPermit(\\n        uint256 _campaignID,\\n        uint256 _amount,\\n        bool _approveMax,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        SafeERC20.safePermit(\\n            IERC20Permit(address(campaignInfo[_campaignID].stakingToken)),\\n            msg.sender,\\n            address(this),\\n            _approveMax ? type(uint256).max : _amount,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n\\n        deposit(_campaignID, _amount);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function withdraw(uint256 _campaignID, uint256 _amount) external nonReentrant {\\n        _withdraw(_campaignID, _amount);\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function harvest(uint256[] calldata _campaignIDs) external nonReentrant {\\n        for (uint256 _i; _i != _campaignIDs.length; ) {\\n            _withdraw(_campaignIDs[_i], 0);\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFarmingRange\\n    function emergencyWithdraw(uint256 _campaignID) external nonReentrant {\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\n        uint256 _amount = user.amount;\\n        campaign.totalStaked = campaign.totalStaked - _amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        campaign.stakingToken.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _amount, _campaignID);\\n    }\\n\\n    /**\\n     * @notice function to trick the compilator to use safeTransferFrom in try catch\\n     * @param _token token to interact with\\n     * @param _from address who own token\\n     * @param _to address to transfer token\\n     * @param _amount quantity to be transferred\\n     */\\n    function attemptTransfer(IERC20 _token, address _from, address _to, uint256 _amount) external {\\n        require(msg.sender == address(this), \\\"FarmingRange::attemptTransfer::Sender not farming\\\"); // this function should be called only by this contract\\n        _token.safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice return the endblock of the phase that contains _blockNumber\\n     * @param _campaignID the campaign id of the phases to check\\n     * @param _blockNumber the block number to check\\n     * @return the endblock of the phase that contains _blockNumber\\n     */\\n    function _endBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\\n        uint256 _len = rewardInfo.length;\\n        if (_len == 0) {\\n            return 0;\\n        }\\n        for (uint256 _i; _i != _len; ) {\\n            if (_blockNumber <= rewardInfo[_i].endBlock) {\\n                return rewardInfo[_i].endBlock;\\n            }\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n        /// @dev when couldn't find any reward info, it means that _blockNumber exceed endblock\\n        /// so return the latest reward info.\\n        return rewardInfo[_len - 1].endBlock;\\n    }\\n\\n    /**\\n     * @notice return the rewardPerBlock of the phase that contains _blockNumber\\n     * @param _campaignID the campaign id of the phases to check\\n     * @param _blockNumber the block number to check\\n     * @return the rewardPerBlock of the phase that contains _blockNumber\\n     */\\n    function _rewardPerBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\\n        uint256 _len = rewardInfo.length;\\n        if (_len == 0) {\\n            return 0;\\n        }\\n        for (uint256 _i; _i != _len; ) {\\n            if (_blockNumber <= rewardInfo[_i].endBlock) {\\n                return rewardInfo[_i].rewardPerBlock;\\n            }\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice in case of reward update, return reward diff and refund user if needed\\n     * @param _rewardIndex the number of the phase to update\\n     * @param _endBlock new endblock of the phase\\n     * @param _rewardPerBlock new rewardPerBlock of the phase\\n     * @param rewardInfo pointer on the array of rewardInfo in storage\\n     * @param campaign pointer on the campaign in storage\\n     * @param selectedRewardInfo pointer on the selectedRewardInfo in storage\\n     * @return refund_ boolean, true if user got refund\\n     * @return diff_ the reward difference\\n     */\\n    function _updateRewardsDiff(\\n        uint256 _rewardIndex,\\n        uint256 _endBlock,\\n        uint256 _rewardPerBlock,\\n        RewardInfo[] storage rewardInfo,\\n        CampaignInfo storage campaign,\\n        RewardInfo storage selectedRewardInfo\\n    ) internal virtual returns (bool refund_, uint256 diff_) {\\n        uint256 _previousStartBlock = _rewardIndex == 0 ? campaign.startBlock : rewardInfo[_rewardIndex - 1].endBlock;\\n        uint256 _newStartBlock = block.number > _previousStartBlock ? block.number : _previousStartBlock;\\n        uint256 _previousBlockRange = selectedRewardInfo.endBlock - _previousStartBlock;\\n        uint256 _newBlockRange = _endBlock - _newStartBlock;\\n        uint256 _selectedRewardPerBlock = selectedRewardInfo.rewardPerBlock;\\n        uint256 _accumulatedRewards = (_newStartBlock - _previousStartBlock) * _selectedRewardPerBlock;\\n        uint256 _previousTotalRewards = _selectedRewardPerBlock * _previousBlockRange;\\n        uint256 _totalRewards = _rewardPerBlock * _newBlockRange;\\n        refund_ = _previousTotalRewards > _totalRewards + _accumulatedRewards;\\n        diff_ = refund_\\n            ? _previousTotalRewards - _totalRewards - _accumulatedRewards\\n            : _totalRewards + _accumulatedRewards - _previousTotalRewards;\\n        if (refund_) {\\n            campaign.rewardToken.safeTransfer(rewardManager, diff_);\\n        }\\n    }\\n\\n    /**\\n     * @notice transfer tokens from rewardManger to this contract.\\n     * @param _rewardToken to reward token to be transferred from the rewardManager to this contract\\n     * @param _amount qty to be transferred\\n     * @param _campaignID id of the campaign so the rewardManager can fetch the rewardToken address to transfer\\n     *\\n     * @dev in case of fail, not enough allowance is considered to be the reason, so we call resetAllowance(uint256) on\\n     * the reward manager (which will reset allowance to uint256.max) and we try again to transfer\\n     */\\n    function _transferFromWithAllowance(IERC20 _rewardToken, uint256 _amount, uint256 _campaignID) internal {\\n        try this.attemptTransfer(_rewardToken, rewardManager, address(this), _amount) {} catch {\\n            rewardManager.call(abi.encodeWithSignature(\\\"resetAllowance(uint256)\\\", _campaignID));\\n            _rewardToken.safeTransferFrom(rewardManager, address(this), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice View function to retrieve pending Reward.\\n     * @param _campaignID pending reward of campaign id\\n     * @param _amount qty of staked token\\n     * @param _rewardDebt user info rewardDebt\\n     * @return pending rewards\\n     */\\n    function _pendingReward(\\n        uint256 _campaignID,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view virtual returns (uint256) {\\n        CampaignInfo memory _campaign = campaignInfo[_campaignID];\\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\\n        uint256 _accRewardPerShare = _campaign.accRewardPerShare;\\n\\n        if (block.number > _campaign.lastRewardBlock && _campaign.totalStaked != 0) {\\n            uint256 _cursor = _campaign.lastRewardBlock;\\n            for (uint256 _i; _i != _rewardInfo.length; ) {\\n                uint256 _multiplier = getMultiplier(_cursor, block.number, _rewardInfo[_i].endBlock);\\n                if (_multiplier != 0) {\\n                    _cursor = _rewardInfo[_i].endBlock;\\n                    _accRewardPerShare =\\n                        _accRewardPerShare +\\n                        ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / _campaign.totalStaked);\\n                }\\n                unchecked {\\n                    ++_i;\\n                }\\n            }\\n        }\\n        return ((_amount * _accRewardPerShare) / 1e20) - _rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given campaign to be up-to-date.\\n     *         NOTE: All rewards relating to periods devoid of any depositors are sent back to the reward manager.\\n     * @param _campaignID campaign id\\n     */\\n    function _updateCampaign(uint256 _campaignID) internal virtual {\\n        require(campaignInfo.length > _campaignID, \\\"FarmingRange::_updateCampaign::Campaign id not valid\\\");\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\\n        if (block.number <= campaign.lastRewardBlock) {\\n            return;\\n        }\\n        if (campaign.totalStaked == 0) {\\n            uint256 _amount;\\n            for (uint256 _i; _i != _rewardInfo.length; ) {\\n                if (_rewardInfo[_i].endBlock >= campaign.lastRewardBlock) {\\n                    uint256 _startBlock = _i != 0 ? _rewardInfo[_i - 1].endBlock : campaign.lastRewardBlock;\\n                    bool _lastRewardInfo = _rewardInfo[_i].endBlock > block.number;\\n                    uint256 _blockRange = (_lastRewardInfo ? block.number : _rewardInfo[_i].endBlock) -\\n                        (_startBlock > campaign.lastRewardBlock ? _startBlock : campaign.lastRewardBlock);\\n                    _amount += _rewardInfo[_i].rewardPerBlock * _blockRange;\\n                    if (_lastRewardInfo) {\\n                        break;\\n                    }\\n                }\\n                unchecked {\\n                    ++_i;\\n                }\\n            }\\n\\n            if (_amount != 0) {\\n                campaign.rewardToken.safeTransfer(rewardManager, _amount);\\n            }\\n\\n            campaign.lastRewardBlock = block.number;\\n\\n            return;\\n        }\\n        /// @dev for each reward info\\n        for (uint256 _i; _i != _rewardInfo.length; ) {\\n            // @dev get multiplier based on current Block and rewardInfo's end block\\n            // multiplier will be a range of either (current block - campaign.lastRewardBlock)\\n            // or (reward info's endblock - campaign.lastRewardBlock) or 0\\n            uint256 _multiplier = getMultiplier(campaign.lastRewardBlock, block.number, _rewardInfo[_i].endBlock);\\n            if (_multiplier != 0) {\\n                // @dev if currentBlock exceed end block, use end block as the last reward block\\n                // so that for the next iteration, previous endBlock will be used as the last reward block\\n                if (block.number > _rewardInfo[_i].endBlock) {\\n                    campaign.lastRewardBlock = _rewardInfo[_i].endBlock;\\n                } else {\\n                    campaign.lastRewardBlock = block.number;\\n                }\\n                campaign.accRewardPerShare =\\n                    campaign.accRewardPerShare +\\n                    ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / campaign.totalStaked);\\n            }\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\\n     * @param _campaignID campaign id\\n     * @param _amount amount to withdraw\\n     */\\n    function _withdraw(uint256 _campaignID, uint256 _amount) internal {\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\n        require(user.amount >= _amount, \\\"FarmingRange::withdraw::bad withdraw amount\\\");\\n        _updateCampaign(_campaignID);\\n        uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\\n        if (_pending != 0) {\\n            campaign.rewardToken.safeTransfer(msg.sender, _pending);\\n        }\\n        if (_amount != 0) {\\n            user.amount = user.amount - _amount;\\n            campaign.totalStaked = campaign.totalStaked - _amount;\\n            campaign.stakingToken.safeTransfer(msg.sender, _amount);\\n        }\\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / 1e20;\\n\\n        emit Withdraw(msg.sender, _amount, _campaignID);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/interfaces/IFarmingRange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IFarmingRange {\\n    /**\\n     * @notice Info of each user.\\n     * @param amount How many Staking tokens the user has provided.\\n     * @param rewardDebt We do some fancy math here. Basically, any point in time, the amount of reward\\n     *  entitled to a user but is pending to be distributed is:\\n     *\\n     *    pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n     *\\n     *  Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n     *    1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n     *    2. User receives the pending reward sent to his/her address.\\n     *    3. User's `amount` gets updated.\\n     *    4. User's `rewardDebt` gets updated.\\n     *\\n     * from: https://github.com/jazz-defi/contracts/blob/master/MasterChefV2.sol\\n     */\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Info of each reward distribution campaign.\\n     * @param stakingToken address of Staking token contract.\\n     * @param rewardToken address of Reward token contract\\n     * @param startBlock start block of the campaign\\n     * @param lastRewardBlock last block number that Reward Token distribution occurs.\\n     * @param accRewardPerShare accumulated Reward Token per share, times 1e20.\\n     * @param totalStaked total staked amount each campaign's stake token, typically,\\n     * @param totalRewards total amount of reward to be distributed until the end of the last phase\\n     *\\n     * @dev each campaign has the same stake token, so no need to track it separetely\\n     */\\n    struct CampaignInfo {\\n        IERC20 stakingToken;\\n        IERC20 rewardToken;\\n        uint256 startBlock;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n        uint256 totalStaked;\\n        uint256 totalRewards;\\n    }\\n\\n    /**\\n     * @notice Info about a reward-phase\\n     * @param endBlock block number of the end of the phase\\n     * @param rewardPerBlock amount of reward to be distributed per block in this phase\\n     */\\n    struct RewardInfo {\\n        uint256 endBlock;\\n        uint256 rewardPerBlock;\\n    }\\n\\n    /**\\n     * @notice emitted at each deposit\\n     * @param user address that deposit its funds\\n     * @param amount amount deposited\\n     * @param campaign campaingId on which the user has deposited funds\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 campaign);\\n\\n    /**\\n     * @notice emitted at each withdraw\\n     * @param user address that withdrawn its funds\\n     * @param amount amount withdrawn\\n     * @param campaign campaingId on which the user has withdrawn funds\\n     */\\n    event Withdraw(address indexed user, uint256 amount, uint256 campaign);\\n\\n    /**\\n     * @notice emitted at each emergency withdraw\\n     * @param user address that emergency-withdrawn its funds\\n     * @param amount amount emergency-withdrawn\\n     * @param campaign campaingId on which the user has emergency-withdrawn funds\\n     */\\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 campaign);\\n\\n    /**\\n     * @notice emitted at each campaign added\\n     * @param campaignID new campaign id\\n     * @param stakingToken token address to be staked in this campaign\\n     * @param rewardToken token address of the rewards in this campaign\\n     * @param startBlock starting block of this campaign\\n     */\\n    event AddCampaignInfo(uint256 indexed campaignID, IERC20 stakingToken, IERC20 rewardToken, uint256 startBlock);\\n\\n    /**\\n     * @notice emitted at each phase of reward added\\n     * @param campaignID campaign id on which rewards were added\\n     * @param phase number of the new phase added (latest at the moment of add)\\n     * @param endBlock number of the block that the phase stops (phase starts at the endblock of the previous phase's\\n     * endblock, and if it's the phase 0, it start at the startBlock of the campaign struct)\\n     * @param rewardPerBlock amount of reward distributed per block in this phase\\n     */\\n    event AddRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\n\\n    /**\\n     * @notice emitted when a reward phase is updated\\n     * @param campaignID campaign id on which the rewards-phase is updated\\n     * @param phase id of phase updated\\n     * @param endBlock new endblock of the phase\\n     * @param rewardPerBlock new rewardPerBlock of the phase\\n     */\\n    event UpdateRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\n\\n    /**\\n     * @notice emitted when a reward phase is removed\\n     * @param campaignID campaign id on which the rewards-phase is removed\\n     * @param phase id of phase removed (only the latest phase can be removed)\\n     */\\n    event RemoveRewardInfo(uint256 indexed campaignID, uint256 indexed phase);\\n\\n    /**\\n     * @notice emitted when the rewardInfoLimit is updated\\n     * @param rewardInfoLimit new max phase amount per campaign\\n     */\\n    event SetRewardInfoLimit(uint256 rewardInfoLimit);\\n\\n    /**\\n     * @notice set new reward info limit, defining how many phases are allowed\\n     * @param _updatedRewardInfoLimit new reward info limit\\n     */\\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external;\\n\\n    /**\\n     * @notice reward campaign, one campaign represent a pair of staking and reward token,\\n     * last reward Block and acc reward Per Share\\n     * @param _stakingToken staking token address\\n     * @param _rewardToken reward token address\\n     * @param _startBlock block number when the campaign will start\\n     */\\n    function addCampaignInfo(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _startBlock) external;\\n\\n    /**\\n     * @notice add a new reward info, when a new reward info is added, the reward\\n     * & its end block will be extended by the newly pushed reward info.\\n     * @param _campaignID id of the campaign\\n     * @param _endBlock end block of this reward info\\n     * @param _rewardPerBlock reward per block to distribute until the end\\n     */\\n    function addRewardInfo(uint256 _campaignID, uint256 _endBlock, uint256 _rewardPerBlock) external;\\n\\n    /**\\n     * @notice add multiple reward Info into a campaign in one tx.\\n     * @param _campaignID id of the campaign\\n     * @param _endBlock array of end blocks\\n     * @param _rewardPerBlock array of reward per block\\n     */\\n    function addRewardInfoMultiple(\\n        uint256 _campaignID,\\n        uint256[] calldata _endBlock,\\n        uint256[] calldata _rewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice update one campaign reward info for a specified range index.\\n     * @param _campaignID id of the campaign\\n     * @param _rewardIndex index of the reward info\\n     * @param _endBlock end block of this reward info\\n     * @param _rewardPerBlock reward per block to distribute until the end\\n     */\\n    function updateRewardInfo(\\n        uint256 _campaignID,\\n        uint256 _rewardIndex,\\n        uint256 _endBlock,\\n        uint256 _rewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice update multiple campaign rewards info for all range index.\\n     * @param _campaignID id of the campaign\\n     * @param _rewardIndex array of reward info index\\n     * @param _endBlock array of end block\\n     * @param _rewardPerBlock array of rewardPerBlock\\n     */\\n    function updateRewardMultiple(\\n        uint256 _campaignID,\\n        uint256[] memory _rewardIndex,\\n        uint256[] memory _endBlock,\\n        uint256[] memory _rewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice update multiple campaigns and rewards info for all range index.\\n     * @param _campaignID array of campaign id\\n     * @param _rewardIndex multi dimensional array of reward info index\\n     * @param _endBlock multi dimensional array of end block\\n     * @param _rewardPerBlock multi dimensional array of rewardPerBlock\\n     */\\n    function updateCampaignsRewards(\\n        uint256[] calldata _campaignID,\\n        uint256[][] calldata _rewardIndex,\\n        uint256[][] calldata _endBlock,\\n        uint256[][] calldata _rewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice remove last reward info for specified campaign.\\n     * @param _campaignID campaign id\\n     */\\n    function removeLastRewardInfo(uint256 _campaignID) external;\\n\\n    /**\\n     * @notice return the entries amount of reward info for one campaign.\\n     * @param _campaignID campaign id\\n     * @return reward info quantity\\n     */\\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256);\\n\\n    /**\\n     * @notice return the number of campaigns.\\n     * @return campaign quantity\\n     */\\n    function campaignInfoLen() external view returns (uint256);\\n\\n    /**\\n     * @notice return the end block of the current reward info for a given campaign.\\n     * @param _campaignID campaign id\\n     * @return reward info end block number\\n     */\\n    function currentEndBlock(uint256 _campaignID) external view returns (uint256);\\n\\n    /**\\n     * @notice return the reward per block of the current reward info for a given campaign.\\n     * @param _campaignID campaign id\\n     * @return current reward per block\\n     */\\n    function currentRewardPerBlock(uint256 _campaignID) external view returns (uint256);\\n\\n    /**\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * Reward multiplier is the amount of blocks between from and to\\n     * @param _from start block number\\n     * @param _to end block number\\n     * @param _endBlock end block number of the reward info\\n     * @return block distance\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) external returns (uint256);\\n\\n    /**\\n     * @notice View function to retrieve pending Reward.\\n     * @param _campaignID pending reward of campaign id\\n     * @param _user address to retrieve pending reward\\n     * @return current pending reward\\n     */\\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Update reward variables of the given campaign to be up-to-date.\\n     * @param _campaignID campaign id\\n     */\\n    function updateCampaign(uint256 _campaignID) external;\\n\\n    /**\\n     * @notice Update reward variables for all campaigns. gas spending is HIGH in this method call, BE CAREFUL.\\n     */\\n    function massUpdateCampaigns() external;\\n\\n    /**\\n     * @notice Deposit staking token in a campaign.\\n     * @param _campaignID campaign id\\n     * @param _amount amount to deposit\\n     */\\n    function deposit(uint256 _campaignID, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit staking token in a campaign with the EIP-2612 signature off chain\\n     * @param _campaignID campaign id\\n     * @param _amount amount to deposit\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @param _v The v component of the permit signature.\\n     * @param _r The r component of the permit signature.\\n     * @param _s The s component of the permit signature.\\n     */\\n    function depositWithPermit(\\n        uint256 _campaignID,\\n        uint256 _amount,\\n        bool _approveMax,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\\n     * @param _campaignID campaign id\\n     * @param _amount amount to withdraw\\n     */\\n    function withdraw(uint256 _campaignID, uint256 _amount) external;\\n\\n    /**\\n     * @notice Harvest campaigns, will claim rewards token of every campaign ids in the array\\n     * @param _campaignIDs array of campaign id\\n     */\\n    function harvest(uint256[] calldata _campaignIDs) external;\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param _campaignID campaign id\\n     */\\n    function emergencyWithdraw(uint256 _campaignID) external;\\n\\n    /**\\n     * @notice get Reward info for a campaign ID and index, that is a set of {endBlock, rewardPerBlock}\\n     *  indexed by campaign ID\\n     * @param _campaignID campaign id\\n     * @param _rewardIndex index of the reward info\\n     * @return endBlock_ end block of this reward info\\n     * @return rewardPerBlock_ reward per block to distribute\\n     */\\n    function campaignRewardInfo(\\n        uint256 _campaignID,\\n        uint256 _rewardIndex\\n    ) external view returns (uint256 endBlock_, uint256 rewardPerBlock_);\\n\\n    /**\\n     * @notice get a Campaign Reward info for a campaign ID\\n     * @param _campaignID campaign id\\n     * @return all params from CampaignInfo struct\\n     */\\n    function campaignInfo(\\n        uint256 _campaignID\\n    ) external view returns (IERC20, IERC20, uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice get a User Reward info for a campaign ID and user address\\n     * @param _campaignID campaign id\\n     * @param _user user address\\n     * @return all params from UserInfo struct\\n     */\\n    function userInfo(uint256 _campaignID, address _user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice how many reward phases can be set for a campaign\\n     * @return rewards phases size limit\\n     */\\n    function rewardInfoLimit() external view returns (uint256);\\n\\n    /**\\n     * @notice get reward Manager address holding rewards to distribute\\n     * @return address of reward manager\\n     */\\n    function rewardManager() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"name\":\"AddCampaignInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"AddRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaign\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaign\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"RemoveRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardInfoLimit\",\"type\":\"uint256\"}],\"name\":\"SetRewardInfoLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaign\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"addCampaignInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_endBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"addRewardInfoMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"attemptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignInfoLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"currentEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"currentRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_campaignIDs\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdateCampaigns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"removeLastRewardInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"rewardInfoLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedRewardInfoLimit\",\"type\":\"uint256\"}],\"name\":\"setRewardInfoLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"}],\"name\":\"updateCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_campaignID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_rewardIndex\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_endBlock\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[][]\"}],\"name\":\"updateCampaignsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"updateRewardMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmingRange", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ef71fde0681f567d241a2cb7f2ae46d6d709d30", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}