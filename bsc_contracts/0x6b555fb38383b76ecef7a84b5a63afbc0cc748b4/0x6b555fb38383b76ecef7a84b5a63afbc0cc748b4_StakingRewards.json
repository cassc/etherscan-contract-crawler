{"SourceCode": "pragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via _msgSender() and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface pairs{\r\n   function setIRouter(address _IRouter)external;\r\n   function IRouter()external view returns (address);\r\n}\r\ncontract StakingRewards is Ownable {\r\n    using SafeMath for uint256;\r\n    IRouter public IRouters;\r\n    uint private constant RATE_DAY= 86400;\r\n    address private USDT;\r\n    //uint public startTime;\r\n    mapping (address=>uint) public startTime;\r\n    address public auditor;\r\n    address public fee;\r\n    address public bunToken;\r\n    address public DEX;\r\n    address pool;\r\n    //mapping (address=>mapping (uint=>uint)) public stakedOf;\r\n    mapping (address=>mapping (address=>mapping (uint=>uint))) public stakedOf;\r\n    mapping (address=>mapping (address=>uint)) public stakedOfTime;\r\n    mapping (address=>mapping (address=>mapping (uint=>uint))) public stakedOfTimeSum;\r\n    mapping (address=>mapping (address=>uint)) public stakedSum;\r\n    mapping (address=>address) public myReward;\r\n    mapping (address=>address)public upaddress;\r\n    mapping (address=>address)public TokenOwner;\r\n    mapping (address=>mapping (address=>user))public users;\r\n    mapping (address=>user)public usersAddr;\r\n    mapping (address=>bool)public listToken;\r\n    mapping (address=>bool)public PairToken;\r\n    mapping (address=>team)public teams;\r\n    address[] public add;\r\n    uint public uid=1;\r\n    struct user{\r\n        uint mnu;\r\n        uint yz;\r\n        uint tz;\r\n        address[] arrs;\r\n    }\r\n    struct team{\r\n        uint A1;\r\n    }\r\n    constructor() {  \r\n        USDT=0x55d398326f99059fF775485246999027B3197955;\r\n        pool=0x8069144052f239863d72629Fa305476D7abC5868;\r\n        auditor=msg.sender;\r\n        bunToken=0x000000000000000000000000000000000000dEaD;\r\n        DEX=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        IERC20(USDT).approve(address(address(DEX)), 2 ** 256 - 1);\r\n    }\r\n    function _team(address a1,uint _value)public {\r\n        address up=a1;\r\n           for(uint k=0;k<50;k++){\r\n               if(up !=address(0)){\r\n                   teams[up].A1+=_value;\r\n               }\r\n               up=upaddress[up];\r\n               if(up == address(0)){\r\n                break ;\r\n               }\r\n           }\r\n    }\r\n    function stake(address token,address token1,address token2,address up,uint amount) external{\r\n        require(users[token][up].tz > 0 || msg.sender == owner());\r\n        require(users[token][msg.sender].mnu <50);\r\n        require(PairToken[token1]);\r\n        require(PairToken[token2]);\r\n        require(myReward[token] == token1);\r\n        require(listToken[token]);\r\n        address pair=ISwapFactory(IRouters.factory()).getPair(token,token1);\r\n        require(pair!=address(this));\r\n        require(amount > 0,\"amount can not be 0\");\r\n        bool isok=IERC20(token2).transferFrom(msg.sender, address(this), amount);\r\n        require(isok);\r\n        uint SELL=amount;\r\n        if(stakedOfTime[token][msg.sender] ==0){\r\n           stakedOfTime[token][msg.sender]=block.timestamp;\r\n        }else {\r\n           claim(token,token1);\r\n        }\r\n        users[token][msg.sender].mnu++;\r\n        IERC20(token1).transfer(auditor,SELL * 3 / 100);\r\n        //TokenOwner[_token]\r\n      uint buyToken=_buy(token1,token,SELL * 49 / 100);\r\n      require(buyToken > 0);\r\n        _addL(token,token1,buyToken,SELL*48/100,address(this));       \r\n        stakedOfTimeSum[token][msg.sender][users[token][msg.sender].mnu]=RATE_DAY * 365;\r\n        stakedOf[token][msg.sender][users[token][msg.sender].mnu] += SELL;\r\n        stakedSum[token][address(this)]+=SELL;\r\n        if(upaddress[msg.sender] == address(0) && up != msg.sender){\r\n           upaddress[msg.sender]=up;\r\n           usersAddr[up].arrs.push(msg.sender);\r\n        }\r\n        users[token][msg.sender].tz+=SELL;\r\n        _team(upaddress[msg.sender],SELL);\r\n    }\r\n    function updateU(address token,address my,uint coin)internal  {\r\n        uint ups=20;\r\n        uint rs;\r\n        address addr=my;\r\n        for(uint i=0;i<ups && i<20;i++){\r\n            if(upaddress[addr]!= address(0) && users[token][addr].tz >= 500 ether){\r\n                rs++;\r\n              IERC20(token).transfer(upaddress[addr],getUp(rs,coin));\r\n              users[token][upaddress[addr]].yz+=getUp(rs,coin);\r\n            }else {\r\n                if(upaddress[addr]!= address(0)){\r\n                  ups++;\r\n                }\r\n            }\r\n            addr=upaddress[addr];\r\n            if(rs >=10 || upaddress[addr]== address(0)){\r\n               break ;\r\n            }\r\n        }\r\n    }\r\n    function setTokenOwner(address token,address addr)public{\r\n        require(msg.sender == auditor);\r\n        TokenOwner[token]=addr;\r\n    }\r\n    function setAD(address[] memory token)public{\r\n        require(msg.sender == auditor);\r\n        for(uint i=0;i<token.length;i++){\r\n           add.push(token[i]); \r\n        }\r\n    }\r\n    function setListToken(address token,bool b)public{\r\n        require(msg.sender == auditor);\r\n        listToken[token]=b;\r\n    }\r\n    function setLauditor(address token)public{\r\n        require(msg.sender == auditor);\r\n        auditor=token;\r\n    }\r\n    //PairToken\r\n    function setPairToken(address token,bool b)public{\r\n        require(msg.sender == auditor);\r\n        PairToken[token]=b;\r\n    }\r\n    function setIRouter(address addr)public onlyOwner{\r\n        IRouters=IRouter(addr);\r\n        IERC20(USDT).approve(address(address(addr)), 2 ** 256 - 1);\r\n    }\r\n    function setEx(address _token,address addr)public onlyOwner{\r\n        myReward[_token]=addr;\r\n    }\r\n    function _buy(address bnbOrUsdt,address _token,uint amount0In) internal returns (uint){\r\n        IERC20(bnbOrUsdt).approve(address(address(IRouters)),amount0In);\r\n        uint lastvalue=IERC20(_token).balanceOf(address(this));\r\n           address[] memory path = new address[](2);\r\n           path[0] = bnbOrUsdt;\r\n           path[1] = _token; \r\n           IRouters.swapExactTokensForTokens(amount0In,0,path,address(this),block.timestamp+360);\r\n           if(IERC20(_token).balanceOf(address(this)) >lastvalue){\r\n               return IERC20(_token).balanceOf(address(this)) - lastvalue;\r\n           }else {\r\n               return 0;\r\n           }\r\n\r\n    }\r\n    function _sell(address _token,address bnbOrUsdt,address to,uint amount0In) internal{\r\n           address[] memory path = new address[](2);\r\n           path[0] = _token;\r\n           path[1] = bnbOrUsdt; \r\n           IRouters.swapExactTokensForTokens(amount0In,0,path,to,block.timestamp);\r\n    }\r\n    function addLiquidity(address _token,address token1, uint amount1)public    {\r\n        uint lp=IERC20(_token).totalSupply()*70/100;\r\n        bool isok=IERC20(_token).transferFrom(msg.sender, address(this), IERC20(_token).totalSupply());\r\n        isok=IERC20(token1).transferFrom(msg.sender, address(this), amount1);\r\n        require(isok);\r\n        IERC20(_token).approve(address(address(IRouters)), IERC20(_token).totalSupply());\r\n        IERC20(token1).approve(address(address(IRouters)), amount1);\r\n        IRouters.addLiquidity(_token,token1,lp,amount1,0, 0,address(this),block.timestamp+100);\r\n        address pair=ISwapFactory(IRouters.factory()).getPair(_token,token1);\r\n        if(pairs(pair).IRouter()==address(0)){\r\n         pairs(pair).setIRouter(address(IRouters));\r\n        }\r\n        if(myReward[_token]== address(0)){\r\n          myReward[_token]=token1;\r\n        }\r\n        users[_token][0xAcC1FEDf19D065dffc54a2945dfaE3d8C63b9C4B].tz+= 500 ether;\r\n        if(TokenOwner[_token] == address(0)){\r\n          TokenOwner[_token]=msg.sender;\r\n        }\r\n        startTime[_token]=block.timestamp+86400;\r\n    }\r\n    function _addL(address _token,address token1,uint amount0, uint amount1,address to)internal   {\r\n        IERC20(_token).approve(address(address(IRouters)),amount0);\r\n        if(PairToken[token1] && token1 != USDT){\r\n           IERC20(token1).approve(address(address(IRouters)),amount1);\r\n        }else {\r\n           IERC20(USDT).approve(address(address(IRouters)),amount1);\r\n        } \r\n        IRouters.addLiquidity(_token,token1,amount0,amount1,0, 0,to,block.timestamp+100);\r\n    }\r\n    function sell(address token,address token1,uint amount)public {\r\n        require(token != address(0) && token1 != address(0));\r\n        require(myReward[token] == token1);\r\n        require(listToken[token]);\r\n        require(PairToken[token1]);\r\n        bool isok=IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        require(isok);\r\n        address pair=ISwapFactory(IRouters.factory()).getPair(token,token1);\r\n        uint lp=IERC20(pair).balanceOf(address(this))*7/1000;\r\n        IERC20(pair).approve(address(address(IRouters)), lp);\r\n        uint totalSupply=IERC20(token).totalSupply()-IERC20(token).balanceOf(bunToken);\r\n        if(IERC20(token).totalSupply()/10 < totalSupply){\r\n           IERC20(token).transfer(bunToken,amount);\r\n        }\r\n        uint coin=amount*50/100;\r\n        uint _sellc=getTokenPriceSellc(token,token1,coin);\r\n        if(IERC20(token1).balanceOf(address(this)) < _sellc){\r\n           IRouters.removeLiquidity(token,token1,lp,0,0,address(this),block.timestamp+100);\r\n        }\r\n        require(IERC20(token1).balanceOf(address(this)) > _sellc && IERC20(token).balanceOf(address(this)) > coin);\r\n        IERC20(token1).transfer(msg.sender,_sellc);\r\n        IERC20(token).transfer(msg.sender,coin);\r\n    }\r\n    function claim(address token,address token1) public    {\r\n        require(listToken[token]);\r\n        require(myReward[token] == token1);\r\n        require(PairToken[token1]);\r\n        require(users[token][msg.sender].mnu > 0);\r\n        require(block.timestamp > stakedOfTime[token][msg.sender]);\r\n        uint minit=block.timestamp-stakedOfTime[token][msg.sender];\r\n        uint coin;\r\n        for(uint i=0;i< users[token][msg.sender].mnu;i++){\r\n            if(stakedOfTimeSum[token][msg.sender][i+1] > minit && stakedOf[token][msg.sender][i+1] >0){\r\n            uint banOf=stakedOf[token][msg.sender][i+1] / 100;\r\n            uint send=getTokenPrice(token1,token,banOf) / RATE_DAY;\r\n              coin+=minit*send;\r\n              stakedOfTimeSum[token][msg.sender][i+1]-=minit;\r\n            }\r\n        }\r\n        bool isok=IERC20(token).transfer(msg.sender,coin*50/100);\r\n        require(isok);\r\n        stakedOfTime[token][msg.sender]=block.timestamp;\r\n        removeLiquidity(token,token1);\r\n        updateU(token,msg.sender,coin*50/100);\r\n        IERC20(token).transfer(add[uid],coin*50/100);\r\n        uid++;\r\n        if(uid >=50){\r\n            uid=1;\r\n        }\r\n    }\r\n    function removeLiquidity(address token,address token1)internal  {\r\n        address pair=ISwapFactory(IRouters.factory()).getPair(token,token1);\r\n        uint last=IERC20(token1).balanceOf(address(this));\r\n        uint lp=IERC20(pair).balanceOf(address(this))*7/1000;\r\n         if(block.timestamp > startTime[token]){\r\n             IERC20(pair).approve(address(address(IRouters)), lp);\r\n             IRouters.removeLiquidity(token,token1,lp,0,0,address(this),block.timestamp+100); \r\n            if(IERC20(token1).balanceOf(address(this)) > last){\r\n              uint nowToken=IERC20(token1).balanceOf(address(this)) - last;\r\n              _buy(token1,token,nowToken/2);\r\n             _addL(token,token1,getTokenPrice(token1,token,nowToken/2),nowToken/2,address(this));  \r\n            }\r\n            startTime[token]+=86400;\r\n         }\r\n    }\r\n    function getToken(address token,uint amount)public onlyOwner{\r\n        IERC20(token).transfer(msg.sender,amount);\r\n    }\r\n    function getpair(address token) view public  returns(address){\r\n           return myReward[token];    \r\n    }\r\n    function getTokenPrice(address usdt,address _tolens,uint bnb) view private  returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = usdt;\r\n           routePath[1] = _tolens;\r\n           return IRouters.getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    function getTokenPriceSellc(address _tolens,address token1,uint bnb) view private  returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = _tolens;\r\n           routePath[1] = token1;\r\n           return IRouters.getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    function getTokenPriceU(address token,address token1,uint bnb) view private  returns(uint){\r\n           address[] memory path = new address[](2);\r\n           path[0] = token1;\r\n           path[1] = token;\r\n           return IRouters.getAmountsOut(bnb,path)[1];    \r\n    }\r\n    function getTokenPriceUs(address token,address token1,uint bnb) view private  returns(uint){\r\n           address[] memory path = new address[](2);\r\n           path[0] = token;\r\n           path[1] = token1;\r\n           uint _value=IRouters.getAmountsOut(bnb,path)[1];\r\n           return _value;    \r\n    }\r\n    function getUp(uint _rs,uint bnb)public  view returns(uint){\r\n           if(_rs == 1){\r\n               return bnb*30/100;\r\n           }\r\n            if(_rs == 2){\r\n               return bnb*15/100;\r\n           }\r\n           if(_rs == 3){\r\n               return bnb*15/100;\r\n           }\r\n           if(_rs == 4){\r\n               return bnb*10/100;\r\n           }\r\n           if(_rs == 5){\r\n               return bnb*10/100;\r\n           }\r\n           if(_rs == 6){\r\n               return bnb*4/100;\r\n           }\r\n           if(_rs == 7){\r\n               return bnb*4/100;\r\n           }\r\n           if(_rs == 8){\r\n               return bnb*4/100;\r\n           }\r\n           if(_rs == 9){\r\n               return bnb*4/100;\r\n           }\r\n           if(_rs == 10){\r\n               return bnb*4/100;\r\n           }\r\n    }\r\n    function getAddrsa(address to)external view returns(address[] memory,uint[] memory){\r\n        address[] memory addr=usersAddr[to].arrs;\r\n        uint[] memory routePath1 = new uint[](addr.length);\r\n        for(uint i=0;i<addr.length;i++){\r\n            routePath1[i]=teams[addr[i]].A1;\r\n        }\r\n        return (addr,routePath1);\r\n    }\r\n    function getAddr(address token,address to)external view returns(address[] memory,uint[] memory,uint[] memory){\r\n        address[] memory addr=usersAddr[to].arrs;\r\n        uint[] memory routePath1 = new uint[](addr.length);\r\n        uint[] memory routePath2 = new uint[](addr.length);\r\n        for(uint i=0;i<addr.length;i++){\r\n            routePath1[i]=users[token][addr[i]].yz;\r\n            routePath2[i]=users[token][addr[i]].tz;\r\n        }\r\n        return (addr,routePath1,routePath2);\r\n    }\r\n    function infos(address token,address token1,address to) external view returns(uint coin,uint a,uint banOf,uint send,uint z,uint y,uint c){\r\n    a=stakedOfTime[token][to];\r\n    if(users[token][to].mnu > 0){\r\n    if(block.timestamp > a){\r\n        uint minit=block.timestamp-a;\r\n        for(uint i=0;i< users[token][to].mnu;i++){\r\n            if(stakedOfTimeSum[token][to][i+1] > minit){\r\n                banOf+=stakedOf[token][to][i+1] / 100;\r\n            }\r\n        }\r\n        send=getTokenPrice(token1,token,banOf) / RATE_DAY;\r\n        coin+=minit*send;\r\n     }\r\n    }\r\n     c=stakedSum[token][address(this)];\r\n        z=users[token][to].yz;\r\n        y=users[token][to].tz;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IRouters\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PairToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_team\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bunToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAddr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAddrsa\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"banOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"send\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"setAD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setIRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setLauditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setPairToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedOfTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedOfTimeSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"A1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mnu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tz\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mnu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tz\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5c10a81005e7f4c82e42e9cdf14f6445b64d702ef09294ba0d952ac00fa7e79"}