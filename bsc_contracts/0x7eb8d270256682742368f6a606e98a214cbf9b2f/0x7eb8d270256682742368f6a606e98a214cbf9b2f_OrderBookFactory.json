{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: OrderBook.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\n\r\ncontract OrderBook is Ownable {\r\n\r\n  address _baseCurrencyAddress;\r\n  address _quoteCurrencyAddress;\r\n\r\n  uint maxBaseAsset;\r\n  uint maxBaseValue;\r\n  uint minBaseAsset;\r\n  uint minBaseValue;\r\n\r\n  uint maxQuoteAsset;\r\n  uint maxQuoteValue;\r\n  uint minQuoteAsset;\r\n  uint minQuoteValue;\r\n\r\n  uint minSellPrice;\r\n  uint maxSellPrice;\r\n  uint minBuyPrice;\r\n  uint maxBuyPrice;\r\n\r\n  uint48 constant maxAmount = type(uint48).max;\r\n\r\n  uint _baseCurrencyUnit; // real amount = (amount in contract) * (base unit)\r\n  uint _quoteCurrencyUnit;\r\n  uint _priceDivisor; // real price = (price in contract) / (price divisor)\r\n  uint _quoteDivisor;\r\n  uint _baseDivisor;\r\n\r\n  function _getDecimals(address token) private view returns (uint) {\r\n    return token == address(0) ? 18 : IERC20Metadata(token).decimals();\r\n  }\r\n\r\n  function _getSymbol(address token) private view returns (string memory) {\r\n    return token == address(0) ? \"BNB\" : IERC20Metadata(token).symbol();\r\n  }\r\n\r\n  constructor(\r\n    address baseCurrencyAddress,\r\n    address quoteCurrencyAddress,\r\n    uint baseCurrencyUnit,\r\n    uint quoteCurrencyUnit,\r\n    uint priceDivisor\r\n  ) {\r\n    _baseCurrencyAddress = baseCurrencyAddress;\r\n    _quoteCurrencyAddress = quoteCurrencyAddress;\r\n\r\n    _baseCurrencyUnit = baseCurrencyUnit;\r\n    _quoteCurrencyUnit = quoteCurrencyUnit;\r\n\r\n    _priceDivisor = priceDivisor;\r\n    uint baseDecimals = _getDecimals(baseCurrencyAddress);\r\n    uint quoteDecimals = _getDecimals(quoteCurrencyAddress);\r\n    _baseDivisor  = 10**baseDecimals;\r\n    _quoteDivisor = 10**quoteDecimals;\r\n\r\n    maxBaseAsset = exactBaseAmount(maxAmount);\r\n    maxBaseValue = exactBaseAmount(maxAmount);\r\n    minBaseAsset = exactBaseAmount(1);\r\n    minBaseValue = exactBaseAmount(1);\r\n\r\n    maxQuoteAsset = exactQuoteAmount(maxAmount);\r\n    maxQuoteValue = exactQuoteAmount(maxAmount);\r\n    minQuoteAsset = exactQuoteAmount(1);\r\n    minQuoteValue = exactQuoteAmount(1);\r\n\r\n    minSellPrice = 1;\r\n    maxSellPrice = type(uint).max/(exactQuoteAmount(maxAmount))/(_baseDivisor);\r\n    minBuyPrice = 1;\r\n    maxBuyPrice = type(uint).max/(exactQuoteAmount(maxAmount))/(_baseDivisor);\r\n\r\n  }\r\n\r\n  function setLimitSellRanges(\r\n    uint minAsset,\r\n    uint maxAsset,\r\n    uint minValue,\r\n    uint maxValue,\r\n    uint minPrice,\r\n    uint maxPrice\r\n  ) public onlyOwner {\r\n    require(minAsset < maxAsset, \"minAsset >= maxAsset\");\r\n    require(minValue < maxValue, \"minValue >= maxValue\");\r\n    require(minPrice < maxPrice, \"minPrice >= maxPrice\");\r\n    require(minAsset >= exactBaseAmount(1), \"minAsset too high\");\r\n    require(maxAsset <= exactBaseAmount(maxAmount), \"maxAsset too high\");\r\n    require(minValue >= exactQuoteAmount(1), \"minValue too high\");\r\n    require(maxValue <= exactQuoteAmount(maxAmount), \"maxValue too high\");\r\n    require(minPrice > 0, \"minPrice too low\");\r\n    require(maxPrice <= type(uint).max/(exactQuoteAmount(maxAmount))/(_baseDivisor), \"maxPrice too high\");\r\n    if(minAsset > 0 && minAsset != minBaseAsset) minBaseAsset = minAsset;\r\n    if(maxAsset > 0 && maxAsset != maxBaseAsset) maxBaseAsset = maxAsset;\r\n    if(minValue > 0 && minValue != minQuoteValue) minQuoteValue = minValue;\r\n    if(maxValue > 0 && maxValue != maxQuoteValue) maxQuoteValue = maxValue;\r\n    if(minPrice > 0 && minPrice != minSellPrice) minSellPrice = minPrice;\r\n    if(maxPrice > 0 && maxPrice != maxSellPrice) maxSellPrice = maxPrice;\r\n  }\r\n\r\n  function setLimitBuyRanges(\r\n    uint minAsset,\r\n    uint maxAsset,\r\n    uint minValue,\r\n    uint maxValue,\r\n    uint minPrice,\r\n    uint maxPrice\r\n  ) public onlyOwner {\r\n    require(minAsset < maxAsset, \"minAsset >= maxAsset\");\r\n    require(minValue < maxValue, \"minValue >= maxValue\");\r\n    require(minPrice < maxPrice, \"minPrice >= maxPrice\");\r\n    require(minAsset >= exactQuoteAmount(1), \"minAsset too high\");\r\n    require(maxAsset <= exactQuoteAmount(maxAmount), \"maxAsset too high\");\r\n    require(minValue >= exactBaseAmount(1), \"minValue too high\");\r\n    require(maxValue <= exactBaseAmount(maxAmount), \"maxValue too high\");\r\n    require(minPrice > 0, \"minPrice too low\");\r\n    require(maxPrice <= type(uint).max/(exactQuoteAmount(maxAmount))/(_baseDivisor), \"maxPrice too high\");\r\n    if(minValue > 0 && minValue != minBaseValue) minBaseValue = minValue;\r\n    if(maxValue > 0 && maxValue != maxBaseValue) maxBaseValue = maxValue;\r\n    if(minAsset > 0 && minAsset != minQuoteAsset) minQuoteAsset = minAsset;\r\n    if(maxAsset > 0 && maxAsset != maxQuoteAsset) maxQuoteAsset = maxAsset;\r\n    if(minPrice > 0 && minPrice != minBuyPrice) minBuyPrice = minPrice;\r\n    if(maxPrice > 0 && maxPrice != maxBuyPrice) maxBuyPrice = maxPrice;\r\n  }\r\n\r\n  function numberSettings() public view returns (\r\n    uint baseCurrencyUnit,\r\n    uint quoteCurrencyUnit,\r\n    uint priceDivisor,\r\n    uint quoteDivisor,\r\n    uint baseDivisor\r\n  ){\r\n    baseCurrencyUnit = _baseCurrencyUnit;\r\n    quoteCurrencyUnit = _quoteCurrencyUnit;\r\n    priceDivisor = _priceDivisor;\r\n    quoteDivisor = _quoteDivisor;\r\n    baseDivisor = _baseDivisor;\r\n  }\r\n\r\n  function rangeSettings() public view returns (\r\n    uint _maxBaseAsset,\r\n    uint _maxBaseValue,\r\n    uint _minBaseAsset,\r\n    uint _minBaseValue,\r\n    uint _maxQuoteAsset,\r\n    uint _maxQuoteValue,\r\n    uint _minQuoteAsset,\r\n    uint _minQuoteValue,\r\n    uint _minSellPrice,\r\n    uint _maxSellPrice,\r\n    uint _minBuyPrice,\r\n    uint _maxBuyPrice\r\n  ){\r\n    _maxBaseAsset = maxBaseAsset;\r\n    _maxBaseValue = maxBaseValue;\r\n    _minBaseAsset = minBaseAsset;\r\n    _minBaseValue = minBaseValue;\r\n    _maxQuoteAsset = maxQuoteAsset;\r\n    _maxQuoteValue = maxQuoteValue;\r\n    _minQuoteAsset = minQuoteAsset;\r\n    _minQuoteValue = minQuoteValue;\r\n    _minSellPrice = minSellPrice;\r\n    _maxSellPrice = maxSellPrice;\r\n    _minBuyPrice = minBuyPrice;\r\n    _maxBuyPrice = maxBuyPrice;\r\n  }\r\n\r\n  function baseCurrencyIsBNB() internal view returns (bool) { return _baseCurrencyAddress == address(0); }\r\n  function quoteCurrencyIsBNB() internal view returns (bool) { return _quoteCurrencyAddress == address(0); }\r\n\r\n  struct LimitOrder {\r\n    uint48 asset; // \u0442\u043e, \u0447\u0442\u043e\r\n    uint48 value;\r\n    address trader;\r\n  }\r\n\r\n  function internalBaseAmount(uint exactAmount) private view returns (uint48) {\r\n    return uint48(exactAmount/(_baseCurrencyUnit));\r\n  }\r\n\r\n  function internalQuoteAmount(uint exactAmount) private view returns (uint48) {\r\n    return uint48(exactAmount/(_quoteCurrencyUnit));\r\n  }\r\n\r\n  function exactBaseAmount(uint48 internalAmount) private view returns (uint) {\r\n    return uint(internalAmount)*(_baseCurrencyUnit);\r\n  }\r\n\r\n  function exactQuoteAmount(uint48 internalAmount) private view returns (uint) {\r\n    return uint(internalAmount)*(_quoteCurrencyUnit);\r\n  }\r\n\r\n  mapping(uint => LimitOrder) sell;\r\n  mapping(uint => LimitOrder) buy;\r\n\r\n  uint public lastOrder;\r\n\r\n  event LimitSell(uint id, uint timestamp, address trader, uint asset, uint value);\r\n\r\n  function limitSell(uint asset, uint value) public payable {\r\n    if(baseCurrencyIsBNB())\r\n      asset = msg.value;\r\n    else\r\n      require(msg.value == 0, \"Cannot accept BNB\");\r\n    require(asset%(_baseCurrencyUnit) == 0, \"Asset  is not a multiple of base unit\");\r\n    require(value%(_quoteCurrencyUnit) == 0, \"Value is not a multiple of quote unit\");\r\n    require(asset >= minBaseAsset, \"Asset too low\");\r\n    require(asset <= maxBaseAsset, \"Asset too high\");\r\n    require(value >= minQuoteValue, \"Value too low\");\r\n    require(value <= maxQuoteValue, \"Value too high\");\r\n\r\n    // pair BASE/QUOTE\r\n    // sell BASE asset, gain QUOTE value\r\n    // price = QUOTE/BASE = value/asset\r\n\r\n    /* minSellPrice    value    _baseDivisor      maxSellPrice\r\n      ------------- <= ----- * -------------- <= -------------\r\n      _priceDivisor    asset   _quoteDivisor     _priceDivisor */\r\n\r\n    require((minSellPrice)*(asset * _quoteDivisor) <= (value * _baseDivisor)*(_priceDivisor), \"Price too low\");\r\n    require((maxSellPrice)*(asset * _quoteDivisor) >= (value * _baseDivisor)*(_priceDivisor), \"Price too high\");\r\n\r\n    if(!baseCurrencyIsBNB())\r\n      IERC20(_baseCurrencyAddress).transferFrom(msg.sender, address(this), asset);\r\n\r\n    lastOrder++;\r\n    sell[lastOrder] = LimitOrder(internalBaseAmount(asset), internalQuoteAmount(value), msg.sender);\r\n    emit LimitSell(lastOrder, block.timestamp, msg.sender, asset, value);\r\n  }\r\n\r\n  event LimitBuy(uint id, uint timestamp, address trader, uint asset, uint value);\r\n\r\n  function limitBuy(uint asset, uint value) public payable {\r\n    if(quoteCurrencyIsBNB())\r\n      asset = msg.value;\r\n    else\r\n      require(msg.value == 0, \"Cannot accept BNB\");\r\n    require(asset % (_quoteCurrencyUnit) == 0, \"Asset is not a multiple of quote unit\");\r\n    require(value % (_baseCurrencyUnit) == 0, \"Value is not a multiple of base unit\");\r\n    require(asset >= minQuoteAsset, \"Asset too low\");\r\n    require(asset <= maxQuoteAsset, \"Asset too high\");\r\n    require(value >= minBaseValue, \"Value too low\");\r\n    require(value <= maxBaseValue, \"Value too high\");\r\n\r\n    // pair BASE/QUOTE\r\n    // pay QUOTE asset, gain BASE value\r\n    // price = QUOTE/BASE = asset/value\r\n\r\n    /* minBuyPrice     asset    _baseDivisor     maxBuyPrice\r\n       ------------ <= ----- * -------------- <= ------------\r\n      _priceDivisor    value   _quoteDivisor    _priceDivisor */\r\n\r\n    require((minBuyPrice)*(value * _quoteDivisor) <= (asset * _baseDivisor)*(_priceDivisor), \"Price too low\");\r\n    require((maxBuyPrice)*(value * _quoteDivisor) >= (asset * _baseDivisor)*(_priceDivisor), \"Price too high\");\r\n\r\n    if(!quoteCurrencyIsBNB())\r\n      IERC20(_quoteCurrencyAddress).transferFrom(msg.sender, address(this), asset);\r\n\r\n    lastOrder++;\r\n    buy[lastOrder] = LimitOrder(internalQuoteAmount(asset), internalBaseAmount(value), msg.sender);\r\n    emit LimitBuy(lastOrder, block.timestamp, msg.sender, asset, value);\r\n  }\r\n\r\n  function sendBaseCurrency(address recipient, uint amount) private {\r\n    if(baseCurrencyIsBNB()) {\r\n      payable(recipient).transfer(amount);\r\n    } else {\r\n      IERC20(_baseCurrencyAddress).transfer(recipient, amount);\r\n    }\r\n  }\r\n\r\n  function sendQuoteCurrency(address recipient, uint amount) private {\r\n    if(quoteCurrencyIsBNB()) {\r\n      payable(recipient).transfer(amount);\r\n    } else {\r\n      IERC20(_quoteCurrencyAddress).transfer(recipient, amount);\r\n    }\r\n  }\r\n\r\n  event Cancel(uint id, uint timestamp);\r\n\r\n  function cancelBuyOrder(uint id) public {\r\n    LimitOrder storage order = buy[id];\r\n    require(order.trader != address(0), \"Order not found\");\r\n    require(order.trader == msg.sender, \"Not your order\");\r\n    sendQuoteCurrency(order.trader, exactQuoteAmount(order.asset));\r\n    delete buy[id];\r\n    lastOperation++;\r\n    emit Cancel(id, block.timestamp);\r\n  }\r\n\r\n  function cancelSellOrder(uint id) public {\r\n    LimitOrder storage order = sell[id];\r\n    require(order.trader != address(0), \"Order not found\");\r\n    require(order.trader == msg.sender, \"Not your order\");\r\n    sendBaseCurrency(order.trader, exactBaseAmount(order.asset));\r\n    delete sell[id];\r\n    lastOperation++;\r\n    emit Cancel(id, block.timestamp);\r\n  }\r\n\r\n  uint public lastOperation;\r\n\r\n  event Close(uint id, uint timestamp);\r\n\r\n  event MarketSell(uint timestamp, address seller, uint asset, uint value);\r\n\r\n  function marketSellSafe(uint asset, uint[] memory ids, uint lastSeenOperation) public payable {\r\n    require(lastSeenOperation == lastOperation, \"Market has been changed\");\r\n    marketSell(asset, ids);\r\n  }\r\n\r\n  function marketSell(uint asset, uint[] memory ids) public payable {\r\n    if(baseCurrencyIsBNB()) {\r\n      asset = msg.value;\r\n      require(asset >= _baseCurrencyUnit, \"Asset too low\");\r\n    } else {\r\n      require(msg.value == 0, \"Cannot accept BNB\");\r\n      require(asset >= _baseCurrencyUnit, \"Asset too low\");\r\n      IERC20(_baseCurrencyAddress).transferFrom(msg.sender, address(this), asset);\r\n    }\r\n    uint _asset = asset;\r\n    uint gain = 0;\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      LimitOrder storage order = buy[ids[i]];\r\n      uint48 order_value = order.value;\r\n      uint48 order_asset = order.asset;\r\n      address buyer = order.trader;\r\n      if(buyer == address(0) || order_value == 0 || order_asset == 0) continue;\r\n      if(internalBaseAmount(_asset) >= order_value) {\r\n        _asset -= exactBaseAmount(order_value);\r\n        sendBaseCurrency(buyer, exactBaseAmount(order_value));\r\n        gain += exactQuoteAmount(order_asset);\r\n        delete buy[ids[i]];\r\n        emit Close(ids[i], block.timestamp);\r\n        if(_asset < _baseCurrencyUnit) break;\r\n      } else {\r\n        // new_order_value = order_value - asset\r\n        // order_value / order_asset == new_order_value / new_order_asset\r\n        // new_order_asset = new_order_value * order_asset / order_value\r\n\r\n        uint new_order_value = order_value - internalBaseAmount(_asset);\r\n        uint new_order_asset = new_order_value * order_asset / order_value;\r\n\r\n        if(new_order_asset == 0) {\r\n          sendBaseCurrency(buyer, exactBaseAmount(order_value));\r\n          gain += exactQuoteAmount(order_asset);\r\n          delete buy[ids[i]];\r\n          emit Close(ids[i], block.timestamp);\r\n        } else {\r\n          sendBaseCurrency(buyer, exactBaseAmount(internalBaseAmount(_asset)));\r\n          gain += exactQuoteAmount(order_asset - uint48(new_order_asset));\r\n          order.asset = uint48(new_order_asset);\r\n          order.value = uint48(new_order_value);\r\n          emit LimitBuy(ids[i], block.timestamp, buyer, exactQuoteAmount(uint48(new_order_asset)), exactBaseAmount(uint48(new_order_value)));\r\n        }\r\n        _asset = 0;\r\n        break;\r\n      }\r\n    }\r\n    if(gain > 0) sendQuoteCurrency(msg.sender, gain);\r\n    if(_asset > 0) sendBaseCurrency(msg.sender, _asset);\r\n    if(gain > 0) emit MarketSell(block.timestamp, msg.sender, asset - _asset, gain);\r\n    lastOperation++;\r\n  }\r\n\r\n  event MarketBuy(uint timestamp, address buyer, uint asset, uint value);\r\n\r\n  function marketBuySafe(uint asset, uint[] memory ids, uint lastSeenOperation) public payable {\r\n    require(lastSeenOperation == lastOperation, \"Market changed\");\r\n    marketBuy(asset, ids);\r\n  }\r\n\r\n  function marketBuy(uint asset, uint[] memory ids) public payable {\r\n    if(quoteCurrencyIsBNB()) {\r\n      asset = msg.value;\r\n      require(asset >= _quoteCurrencyUnit, \"Asset too low\");\r\n    } else {\r\n      require(msg.value == 0, \"Cannot accept BNB\");\r\n      require(asset >= _quoteCurrencyUnit, \"Asset too low\");\r\n      IERC20(_quoteCurrencyAddress).transferFrom(msg.sender, address(this), asset);\r\n    }\r\n    uint _asset = asset;\r\n    uint gain = 0;\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      LimitOrder storage order = sell[ids[i]];\r\n      uint48 order_value = order.value;\r\n      uint48 order_asset = order.asset;\r\n      address seller = order.trader;\r\n      if(seller == address(0) || order_value == 0 || order_asset == 0) continue;\r\n      if(internalQuoteAmount(_asset) >= order_value) {\r\n        _asset -= exactQuoteAmount(order_value);\r\n        sendQuoteCurrency(seller, exactQuoteAmount(order_value));\r\n        gain += exactBaseAmount(order_asset);\r\n        delete sell[ids[i]];\r\n        emit Close(ids[i], block.timestamp);\r\n        if(_asset < _quoteCurrencyUnit) break;\r\n      } else {\r\n        // new_order_value = order_value - asset\r\n        // order_value / order_asset == new_order_value / new_order_asset\r\n        // new_order_asset = new_order_value * order_asset / order_value\r\n\r\n        uint new_order_value = order_value - internalQuoteAmount(_asset);\r\n        uint new_order_asset = new_order_value * order_asset / order_value;\r\n\r\n        if(new_order_asset == 0) {\r\n          sendQuoteCurrency(seller, exactQuoteAmount(order_value));\r\n          gain += exactBaseAmount(order_asset);\r\n          delete sell[ids[i]];\r\n          emit Close(ids[i], block.timestamp);\r\n        } else {\r\n          sendQuoteCurrency(seller, exactQuoteAmount(internalQuoteAmount(_asset)));\r\n          gain += exactBaseAmount(order_asset - uint48(new_order_asset));\r\n          order.asset = uint48(new_order_asset);\r\n          order.value = uint48(new_order_value);\r\n          emit LimitSell(ids[i], block.timestamp, seller, exactBaseAmount(uint48(new_order_asset)), exactQuoteAmount(uint48(new_order_value)));\r\n        }\r\n        _asset = 0;\r\n        break;\r\n      }\r\n    }\r\n    if(gain > 0) sendBaseCurrency(msg.sender, gain);\r\n    if(_asset > 0) sendQuoteCurrency(msg.sender, _asset);\r\n    if(gain > 0) emit MarketBuy(block.timestamp, msg.sender, asset - _asset, gain);\r\n    lastOperation++;\r\n  }\r\n\r\n  function checksum() public view returns (bytes32) {\r\n    return keccak256(abi.encodePacked((lastOperation << 128) + lastOrder));\r\n  }\r\n\r\n  function symbols() public view returns (string memory, string memory) {\r\n    return (\r\n      _getSymbol(_baseCurrencyAddress),\r\n      _getSymbol(_quoteCurrencyAddress)\r\n    );\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return string.concat(\r\n      _getSymbol(_baseCurrencyAddress),\r\n      \"/\",\r\n      _getSymbol(_quoteCurrencyAddress)\r\n    );\r\n  }\r\n\r\n  function baseCurrency() public view returns (address) {\r\n    return _baseCurrencyAddress;\r\n  }\r\n\r\n  function quoteCurrency() public view returns (address) {\r\n    return _quoteCurrencyAddress;\r\n  }\r\n\r\n  function _currencyInfo(address addr) private view returns (string memory name, string memory symbol, uint decimals, address tokenAddress ) {\r\n    if(addr == address(0)) {\r\n      name = \"Binance Coin\";\r\n      symbol = \"BNB\";\r\n      decimals = 18;\r\n      tokenAddress = address(0);\r\n    } else {\r\n      IERC20Metadata token = IERC20Metadata(addr);\r\n      name = token.name();\r\n      symbol = token.symbol();\r\n      decimals = token.decimals();\r\n      tokenAddress = addr;\r\n    }    \r\n  }\r\n\r\n  function baseCurrencyInfo() public view returns (string memory name, string memory symbol, uint decimals, address tokenAddress ) { return _currencyInfo(_baseCurrencyAddress);}\r\n  function quoteCurrencyInfo() public view returns (string memory name, string memory symbol, uint decimals, address tokenAddress ) { return _currencyInfo(_quoteCurrencyAddress);}\r\n\r\n}\r\n// File: OrderBookFactory.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\n\r\n\r\ncontract OrderBookFactory is Ownable {\r\n\r\n  uint _blockOfCreation = block.number;\r\n\r\n  event PairCreated(\r\n    string symbol,\r\n    address contractAddress, \r\n    address baseCurrency, \r\n    address quoteCurrency, \r\n    bool hidden\r\n  );\r\n\r\n  function createPair(\r\n    address baseCurrencyAddress,\r\n    address quoteCurrencyAddress,\r\n    uint baseCurrencyUnit,\r\n    uint quoteCurrencyUnit,\r\n    uint priceDivisor,\r\n    bool hidden\r\n  ) public onlyOwner returns (address) {\r\n    OrderBook pair = new OrderBook(\r\n      baseCurrencyAddress,\r\n      quoteCurrencyAddress,\r\n      baseCurrencyUnit,\r\n      quoteCurrencyUnit,\r\n      priceDivisor\r\n    );\r\n    pair.transferOwnership(owner());\r\n    emit PairCreated(pair.symbol(), address(pair), baseCurrencyAddress, quoteCurrencyAddress, hidden);\r\n    return address(pair);\r\n  }\r\n\r\n  event PairHidden(address pair);\r\n\r\n  function hidePair(address pair) public onlyOwner {\r\n    emit PairHidden(pair);\r\n  }\r\n\r\n  event PairShowed(address pair);\r\n\r\n  function showPair(address pair) public onlyOwner {\r\n    emit PairShowed(pair);\r\n  }\r\n\r\n  event SetAsDefault(address pair);\r\n\r\n  function makeDefault(address pair) public onlyOwner {\r\n    emit SetAsDefault(pair);\r\n  }\r\n\r\n  event SetData(string data);\r\n\r\n  function setData(string memory data) public onlyOwner {\r\n    emit SetData(data);\r\n  }\r\n\r\n  event SetPairSettings(address pair, string settings);\r\n\r\n  function setPairSettings(address pair, string memory settings) public onlyOwner {\r\n    emit SetPairSettings(pair, settings);\r\n  }\r\n\r\n  event SetSymbol(address pair, string symbol);\r\n\r\n  function setSymbol(address pair, string memory symbol) public onlyOwner {\r\n    emit SetSymbol(pair, symbol);\r\n  }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairHidden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairShowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SetAsDefault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"SetData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"SetPairSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetSymbol\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseCurrencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteCurrencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteCurrencyUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDivisor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"hidePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"makeDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"setPairSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"showPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OrderBookFactory", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ed56f3ca5149b5b775e3bf2b07b1c3bcb48274e5f90544cfc721f1583099769"}