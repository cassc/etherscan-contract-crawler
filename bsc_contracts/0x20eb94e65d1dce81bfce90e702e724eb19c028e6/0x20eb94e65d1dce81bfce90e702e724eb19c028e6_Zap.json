{"SourceCode": "// Sources flattened with hardhat v2.12.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.1\r\n// SPDX-License-Identifier: UNLICENSED\r\n \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.1\r\n\r\n \r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IGrizzly.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n\r\ninterface IGrizzly {\r\n    function depositLp(\r\n        address to,\r\n        uint256 amount,\r\n        address referralGiver,\r\n        address[] memory fromToken,\r\n        address[] memory toToken,\r\n        uint256[] memory amountIn,\r\n        uint256[] memory amountOut,\r\n        uint256 slippage,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function withdrawToLp(\r\n        address to,\r\n        uint256 amount,\r\n        address[] memory fromToken,\r\n        address[] memory toToken,\r\n        uint256[] memory amountIn,\r\n        uint256[] memory amountOut,\r\n        uint256 slippage,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function getUpdatedState()\r\n        external\r\n        returns (\r\n            Strategy currentStrategy,\r\n            uint256 deposited,\r\n            uint256 balance,\r\n            uint256 totalReinvested,\r\n            uint256 earnedHoney,\r\n            uint256 earnedBnb,\r\n            uint256 stakedHoney\r\n        );\r\n\r\n    function changeStrategy(\r\n        Strategy toStrategy,\r\n        address[] memory fromToken,\r\n        address[] memory toToken,\r\n        uint256[] memory amountIn,\r\n        uint256[] memory amountOut,\r\n        uint256 slippage,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function ZAP_ROLE() external view returns (bytes32);\r\n\r\n    enum Strategy {\r\n        STANDARD,\r\n        GRIZZLY,\r\n        STABLECOIN\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interfaces/ILiquidityImplementation.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n\r\ninterface ILiquidityImplementation {\r\n    function getSwapRouter(address lpToken) external view returns (address);\r\n\r\n    struct AddLiquidityInput {\r\n        address lpToken;\r\n        uint256 amountToken0;\r\n        uint256 amountToken1;\r\n        uint256 minAmountToken0;\r\n        uint256 minAmountToken1;\r\n        address to;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct RemoveLiquidityInput {\r\n        address lpToken;\r\n        uint256 lpAmount;\r\n        uint256 minAmountToken0;\r\n        uint256 minAmountToken1;\r\n        address to;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct AddLiquidityOutput {\r\n        uint256 unusedToken0;\r\n        uint256 unusedToken1;\r\n        uint256 lpToken;\r\n    }\r\n\r\n    struct RemoveLiquidityOutput {\r\n        uint256 received0;\r\n        uint256 received1;\r\n    }\r\n\r\n    // Interface function to add liquidity to the implementation DEX\r\n    function addLiquidity(AddLiquidityInput calldata addLiquidityInput)\r\n        external\r\n        payable\r\n        returns (AddLiquidityOutput memory);\r\n\r\n    // Interface function to remove liquidity to the implementation DEX\r\n    function removeLiquidity(RemoveLiquidityInput calldata removeLiquidityInput)\r\n        external\r\n        returns (RemoveLiquidityOutput memory);\r\n\r\n    // Gets token0 for an lp token for the implementation DEX\r\n    function token0(address lpToken) external view returns (address);\r\n\r\n    // Gets token1 for an lp token for the implementation DEX\r\n    function token1(address lpToken) external view returns (address);\r\n\r\n    // Estimate the swap share\r\n    function estimateSwapShare(uint256 amount, address lpToken)\r\n        external\r\n        view\r\n        returns (uint256 share0, uint256 share1);\r\n\r\n    // Estimate the out share\r\n    function estimateOutShare(uint256 amount, address lpToken)\r\n        external\r\n        view\r\n        returns (uint256 share0, uint256 share1);\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IVault.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n\r\ninterface IVault {\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient)\r\n        external\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IWETH.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IZap.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n\r\ninterface IZap {\r\n    struct ZapInInput {\r\n        address fromTokenAddress; // The input token\r\n        address vault; // the valut or the hive where LP Tokens will be deposited\r\n        address referral; // referral for old hives\r\n        uint256 deadline;\r\n        SwapTokenInfo token0Info;\r\n        SwapTokenInfo token1Info;\r\n    }\r\n\r\n    struct ZapOutInput {\r\n        address vault; // the valut or the hive where LP Tokens will be deposited\r\n        uint256 withdrawAmount;\r\n        uint256 deadline;\r\n        uint256 minTokenShare0;\r\n        uint256 minTokenShare1;\r\n    }\r\n\r\n    struct SwapTokenInfo {\r\n        address swapTarget; // The 0x swap target\r\n        bytes swapData; // The 0x swap data\r\n        uint256 tokenShare; // The token share can be retrieved by helper function estimateSwapShare\r\n        uint256 minTokenShare;\r\n    }\r\n\r\n    struct VaultInfo {\r\n        address lpToken;\r\n        address liquidityRouterImplementation;\r\n        VaultType vaultType;\r\n    }\r\n\r\n    struct DepositArrays {\r\n        address[] tokens;\r\n        uint256[] amounts;\r\n    }\r\n\r\n    struct ProvideLiquidityInput {\r\n        address token0;\r\n        address token1;\r\n        address swapRouter;\r\n        address lpToken;\r\n        address liquidityImplementation;\r\n        uint256[2] amounts;\r\n        uint256[2] amountsMin;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct RemoveLiquidityInput {\r\n        address swapRouter;\r\n        address lpToken;\r\n        address liquidityImplementation;\r\n        uint256 lpValue;\r\n        uint256[2] minAmounts;\r\n        uint256 deadline;\r\n    }\r\n\r\n    enum VaultType {\r\n        YEARN,\r\n        GRIZZLY\r\n    }\r\n\r\n    event ZapIn(\r\n        address indexed user,\r\n        address indexed inToken,\r\n        address indexed toVault,\r\n        uint256 amountIn,\r\n        uint256 receivedLpTokens\r\n    );\r\n    event ZapOut(\r\n        address indexed user,\r\n        address indexed fromVault,\r\n        uint256 lpWithdrawAmount,\r\n        uint256 withdrawnAmountToken0,\r\n        uint256 withdrawnAmountToken1\r\n    );\r\n}\r\n\r\n\r\n// File contracts/ZapBase.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract ZapBase is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    bool public stopped = false;\r\n\r\n    // SwapTarget => approval status\r\n    mapping(address => bool) public approvedTargets;\r\n\r\n    address internal constant ETHAddress =\r\n        0x0000000000000000000000000000000000000000;\r\n\r\n    address internal constant wethTokenAddress =\r\n        0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    // Circuit breaker modifiers\r\n    modifier stopInEmergency() {\r\n        if (stopped) {\r\n            revert(\"Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function _pullTokens(address token, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        if (token == address(0)) {\r\n            require(msg.value > 0, \"No eth sent\");\r\n            return msg.value;\r\n        }\r\n        require(amount > 0, \"Invalid token amount\");\r\n        require(msg.value == 0, \"Eth sent with token\");\r\n\r\n        // Transfer token\r\n        require(\r\n            IERC20(token).allowance(msg.sender, address(this)) >= amount,\r\n            \"Token is not approved\"\r\n        );\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _transferToken(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token == address(0)) {\r\n            (bool sent, bytes memory data) = to.call{value: amount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        } else {\r\n            IERC20(token).safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function _getBalance(address token)\r\n        internal\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        if (token == address(0)) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(token).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _approveToken(address token, address spender) internal {\r\n        IERC20 _token = IERC20(token);\r\n        if (_token.allowance(address(this), spender) > 0) return;\r\n        else {\r\n            _token.safeApprove(spender, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function _approveToken(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(token).safeApprove(spender, 0);\r\n        IERC20(token).safeApprove(spender, amount);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    ///@notice Withdraw tokens like a sweep function\r\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 qty;\r\n            // Check weather if is native or just ERC20\r\n            if (tokens[i] == ETHAddress) {\r\n                qty = address(this).balance;\r\n                Address.sendValue(payable(owner()), qty);\r\n            } else {\r\n                qty = IERC20(tokens[i]).balanceOf(address(this));\r\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setApprovedTargets(\r\n        address[] calldata targets,\r\n        bool[] calldata isApproved\r\n    ) external onlyOwner {\r\n        require(targets.length == isApproved.length, \"Invalid Input length\");\r\n\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            approvedTargets[targets[i]] = isApproved[i];\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Zap.sol\r\n\r\n \r\npragma solidity ^0.8.17;\r\n/**\r\n * @title Zap contract\r\n * @notice This contract allows users to add or remove liquidity from supported vaults.\r\n * It also uses 0x api to swap input tokens to the destination tokens in order to provide liquidity\r\n */\r\ncontract Zap is IZap, ZapBase, ReentrancyGuard {\r\n    // Mapping from a vault address to its corresponding VaultInfo.\r\n    mapping(address => VaultInfo) public vaultInfos;\r\n\r\n    /**\r\n     * @notice Zap in with a inToken. This function swaps the inToken using 0x to token0 and token1. Then it provides the tokens as liquidity in a supported LiquidityImplementation.\r\n     * Finally, the lp tokens are deposited in a vault.\r\n     * @param zapInInput The input struct for the function\r\n     */\r\n    function zapIn(ZapInInput memory zapInInput)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        stopInEmergency\r\n    {\r\n        require(zapInInput.vault != address(0), \"Vault not defined\");\r\n        VaultInfo memory vaultInfo = vaultInfos[zapInInput.vault];\r\n        require(vaultInfo.lpToken != address(0), \"Vault not supported\");\r\n\r\n        // Get the appropriate liquidity implementation\r\n        ILiquidityImplementation liquidityImplementation = ILiquidityImplementation(\r\n                vaultInfo.liquidityRouterImplementation\r\n            );\r\n\r\n        // pull the input token from the user to the contract\r\n        uint256 receivedTokens = _pullTokens(\r\n            zapInInput.fromTokenAddress,\r\n            zapInInput.token0Info.tokenShare + zapInInput.token1Info.tokenShare\r\n        );\r\n\r\n        // swap the input token to token0 and token1\r\n        (uint256 amountToken0, uint256 amountToken1) = _swapZapIn(\r\n            zapInInput,\r\n            receivedTokens,\r\n            liquidityImplementation.token0(vaultInfo.lpToken),\r\n            liquidityImplementation.token1(vaultInfo.lpToken)\r\n        );\r\n\r\n        uint256[2] memory depositAmounts = [amountToken0, amountToken1];\r\n        uint256[2] memory minAmounts = [\r\n            zapInInput.token0Info.minTokenShare,\r\n            zapInInput.token1Info.minTokenShare\r\n        ];\r\n\r\n        // provide liquidity in the appropriate liquidity implementation (DEX)\r\n        uint256 lpValue = _provideLiquidityZapIn(\r\n            ProvideLiquidityInput(\r\n                liquidityImplementation.token0(vaultInfo.lpToken),\r\n                liquidityImplementation.token1(vaultInfo.lpToken),\r\n                liquidityImplementation.getSwapRouter(vaultInfo.lpToken),\r\n                vaultInfo.lpToken,\r\n                address(liquidityImplementation),\r\n                depositAmounts,\r\n                minAmounts,\r\n                zapInInput.deadline\r\n            )\r\n        );\r\n\r\n        // add the received lp tokens to the vault\r\n        _addToVaultZapIn(\r\n            vaultInfo.lpToken,\r\n            zapInInput.vault,\r\n            zapInInput.referral,\r\n            zapInInput.deadline,\r\n            vaultInfo.vaultType,\r\n            lpValue\r\n        );\r\n        emit ZapIn(\r\n            msg.sender,\r\n            zapInInput.fromTokenAddress,\r\n            zapInInput.vault,\r\n            zapInInput.token0Info.tokenShare + zapInInput.token1Info.tokenShare,\r\n            lpValue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Zaps out the lp tokens in a vault to a destination token. It first withdraws lp tokens from the vault, removes liquidity using the proper liquidity implementation\r\n     * and then (optionally) swaps the tokens to a withdraw token.\r\n     * @param zapOutInput The input struct for the zap out\r\n     */\r\n    function zapOut(ZapOutInput memory zapOutInput)\r\n        external\r\n        nonReentrant\r\n        stopInEmergency\r\n    {\r\n        require(zapOutInput.vault != address(0), \"Vault not defined\");\r\n        VaultInfo memory vaultInfo = vaultInfos[zapOutInput.vault];\r\n        require(vaultInfo.lpToken != address(0), \"Vault not supported\");\r\n\r\n        // Get the appropriate liquidity implementation\r\n        ILiquidityImplementation liquidityImplementation = ILiquidityImplementation(\r\n                vaultInfo.liquidityRouterImplementation\r\n            );\r\n\r\n        // remove lp tokens from the vault\r\n        uint256 withdrawnLp = _removeFromVaultZapOut(\r\n            vaultInfo.lpToken,\r\n            zapOutInput.vault,\r\n            vaultInfo.vaultType,\r\n            zapOutInput.withdrawAmount,\r\n            zapOutInput.deadline\r\n        );\r\n\r\n        uint256[2] memory minAmounts = [\r\n            zapOutInput.minTokenShare0,\r\n            zapOutInput.minTokenShare1\r\n        ];\r\n\r\n        // remove liquidity from the liquidity implementation (DEX)\r\n        (\r\n            uint256 receivedAmount0,\r\n            uint256 receivedAmount1\r\n        ) = _removeLiquidityZapOut(\r\n                RemoveLiquidityInput(\r\n                    liquidityImplementation.getSwapRouter(vaultInfo.lpToken),\r\n                    vaultInfo.lpToken,\r\n                    address(liquidityImplementation),\r\n                    withdrawnLp,\r\n                    minAmounts,\r\n                    zapOutInput.deadline\r\n                )\r\n            );\r\n\r\n        // swap to the appropriate out token and send to the user\r\n        _swapZapOut(\r\n            liquidityImplementation.token0(vaultInfo.lpToken),\r\n            liquidityImplementation.token1(vaultInfo.lpToken),\r\n            receivedAmount0,\r\n            receivedAmount1\r\n        );\r\n        emit ZapOut(\r\n            msg.sender,\r\n            zapOutInput.vault,\r\n            zapOutInput.withdrawAmount,\r\n            receivedAmount0,\r\n            receivedAmount1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the vault info. This defines how a vault is implemented, which lp token it uses and which liqidity implementation (DEX) should be used\r\n     * @param vaultAddress The address of the vault\r\n     * @param lpToken The Lp token for the given vault\r\n     * @param liquidityImplementationAddress The liquidity implementation address for this vault\r\n     * @param vaultType The vault type (either YEARN - new vaults, or GRIZZLY - old vaults)\r\n     */\r\n    function setVaultInfo(\r\n        address vaultAddress,\r\n        address lpToken,\r\n        address liquidityImplementationAddress,\r\n        VaultType vaultType\r\n    ) public onlyOwner {\r\n        vaultInfos[vaultAddress] = VaultInfo(\r\n            lpToken,\r\n            liquidityImplementationAddress,\r\n            vaultType\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the vault info in batches\r\n     * @param vaultAddresses The addresses of the vault\r\n     * @param lpTokens The Lp tokens for the given vault\r\n     * @param liquidityImplementationAddresses The liquidity implementations address for this vault\r\n     * @param vaultTypes The vault types (either YEARN - new vaults, or GRIZZLY - old vaults)\r\n     */\r\n    function setVaultInfoBatch(\r\n        address[] memory vaultAddresses,\r\n        address[] memory lpTokens,\r\n        address[] memory liquidityImplementationAddresses,\r\n        VaultType[] memory vaultTypes\r\n    ) external onlyOwner {\r\n        require(\r\n            vaultAddresses.length == lpTokens.length &&\r\n                vaultAddresses.length ==\r\n                liquidityImplementationAddresses.length &&\r\n                vaultAddresses.length == vaultTypes.length,\r\n            \"Arraylength missmatch\"\r\n        );\r\n        for (uint256 i = 0; i < vaultAddresses.length; i++) {\r\n            setVaultInfo(\r\n                vaultAddresses[i],\r\n                lpTokens[i],\r\n                liquidityImplementationAddresses[i],\r\n                vaultTypes[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to estimate the swap share for the client\r\n     * @param amount The input token amount\r\n     * @param vault The vault which should be used\r\n     * Returns The Shares or token0 and token1 that should be swapped to optimally provide liquidity\r\n     */\r\n    function estimateSwapShare(uint256 amount, address vault)\r\n        external\r\n        view\r\n        returns (uint256 share0, uint256 share1)\r\n    {\r\n        VaultInfo memory vaultInfo = vaultInfos[vault];\r\n        ILiquidityImplementation liquidityImplementation = ILiquidityImplementation(\r\n                vaultInfo.liquidityRouterImplementation\r\n            );\r\n        return\r\n            liquidityImplementation.estimateSwapShare(\r\n                amount,\r\n                vaultInfo.lpToken\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to estimate the out share swaps when zapping out\r\n     * @param lpAmount The lp amount which should be withdrawn\r\n     * @param vault The vault which should be used\r\n     * Returns The Shares or token0 and token1 that should be swapped to optimally get the final out token\r\n     */\r\n    function estimateOutShare(uint256 lpAmount, address vault)\r\n        external\r\n        view\r\n        returns (uint256 share0, uint256 share1)\r\n    {\r\n        VaultInfo memory vaultInfo = vaultInfos[vault];\r\n        ILiquidityImplementation liquidityImplementation = ILiquidityImplementation(\r\n                vaultInfo.liquidityRouterImplementation\r\n            );\r\n        return\r\n            liquidityImplementation.estimateOutShare(\r\n                lpAmount,\r\n                vaultInfo.lpToken\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice swap in token to token0 and token1\r\n     */\r\n    function _swapZapIn(\r\n        ZapInInput memory input,\r\n        uint256 receivedAmount,\r\n        address token0,\r\n        address token1\r\n    ) internal returns (uint256 amountToken0, uint256 amountToken1) {\r\n        uint256 token0Used;\r\n        uint256 token1Used;\r\n        (amountToken0, token0Used) = _fillQuote(\r\n            input.fromTokenAddress,\r\n            token0,\r\n            input.token0Info.tokenShare,\r\n            input.token0Info.swapTarget,\r\n            input.token0Info.swapData\r\n        );\r\n\r\n        (amountToken1, token1Used) = _fillQuote(\r\n            input.fromTokenAddress,\r\n            token1,\r\n            input.token1Info.tokenShare,\r\n            input.token1Info.swapTarget,\r\n            input.token1Info.swapData\r\n        );\r\n        require(\r\n            token0Used + token1Used == receivedAmount,\r\n            \"Input shares set wrong\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Provides liquidity in the right DEX\r\n     */\r\n    function _provideLiquidityZapIn(ProvideLiquidityInput memory input)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _approveToken(input.token0, input.swapRouter, input.amounts[0]);\r\n        _approveToken(input.token1, input.swapRouter, input.amounts[1]);\r\n\r\n        (bool success, bytes memory data) = input\r\n            .liquidityImplementation\r\n            .delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"addLiquidity((address,uint256,uint256,uint256,uint256,address,uint256))\",\r\n                    input.lpToken,\r\n                    input.amounts[0],\r\n                    input.amounts[1],\r\n                    input.amountsMin[0],\r\n                    input.amountsMin[1],\r\n                    address(this),\r\n                    input.deadline\r\n                )\r\n            );\r\n        require(success, \"Liquidity could not be provided\");\r\n        (uint256 unusedToken0, uint256 unusedToken1, uint256 lpValue) = abi\r\n            .decode(data, (uint256, uint256, uint256));\r\n\r\n        if (unusedToken0 > 0) {\r\n            _transferToken(input.token0, msg.sender, unusedToken0);\r\n        }\r\n        if (unusedToken1 > 0) {\r\n            _transferToken(input.token1, msg.sender, unusedToken1);\r\n        }\r\n        return lpValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds the lp tokens to a vault (can be GRIZZLY or YEARN)\r\n     */\r\n    function _addToVaultZapIn(\r\n        address lpToken,\r\n        address vault,\r\n        address referral,\r\n        uint256 deadline,\r\n        VaultType vaultType,\r\n        uint256 lpValue\r\n    ) internal {\r\n        // approve vault\r\n        _approveToken(lpToken, vault, lpValue);\r\n\r\n        if (vaultType == VaultType.GRIZZLY) {\r\n            DepositArrays memory empty = DepositArrays(\r\n                new address[](0),\r\n                new uint256[](0)\r\n            );\r\n\r\n            uint256 result = IGrizzly(vault).depositLp(\r\n                msg.sender,\r\n                lpValue,\r\n                referral,\r\n                empty.tokens,\r\n                empty.tokens,\r\n                empty.amounts,\r\n                empty.amounts,\r\n                0,\r\n                deadline\r\n            );\r\n        } else if (vaultType == VaultType.YEARN) {\r\n            uint256 iniVaultBal = _getBalance(vault);\r\n            IVault(vault).deposit(lpValue, address(this));\r\n            uint256 tokensReceived = _getBalance(vault) - iniVaultBal;\r\n\r\n            _transferToken(vault, msg.sender, tokensReceived);\r\n        } else {\r\n            revert(\"Vault type not supported\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice swap token0 and token1 to output token or ignore if wanted. Then sends the requested tokens to the user\r\n     */\r\n    function _swapZapOut(\r\n        address token0,\r\n        address token1,\r\n        uint256 amountReceived0,\r\n        uint256 amountReceived1\r\n    ) internal {\r\n        if (token0 == wethTokenAddress) {\r\n            IWETH(wethTokenAddress).withdraw(amountReceived0);\r\n            token0 = ETHAddress;\r\n        }\r\n        if (token1 == wethTokenAddress) {\r\n            IWETH(wethTokenAddress).withdraw(amountReceived1);\r\n            token1 = ETHAddress;\r\n        }\r\n        _transferToken(token0, msg.sender, amountReceived0);\r\n        _transferToken(token1, msg.sender, amountReceived1);\r\n    }\r\n\r\n    /**\r\n     * @notice remove liquidity in the right DEX\r\n     */\r\n    function _removeLiquidityZapOut(RemoveLiquidityInput memory input)\r\n        internal\r\n        returns (uint256 receivedAmount0, uint256 receivedAmount1)\r\n    {\r\n        // approve swap router\r\n        _approveToken(input.lpToken, input.swapRouter, input.lpValue);\r\n\r\n        (bool success, bytes memory data) = input\r\n            .liquidityImplementation\r\n            .delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"removeLiquidity((address,uint256,uint256,uint256,address,uint256))\",\r\n                    input.lpToken,\r\n                    input.lpValue,\r\n                    input.minAmounts[0],\r\n                    input.minAmounts[1],\r\n                    address(this),\r\n                    input.deadline\r\n                )\r\n            );\r\n        require(success, \"Liquidity could not be withdrawn\");\r\n        (receivedAmount0, receivedAmount1) = abi.decode(\r\n            data,\r\n            (uint256, uint256)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice revmove lp tokens from the right vault (supports GRIZZLY and YEARN)\r\n     */\r\n    function _removeFromVaultZapOut(\r\n        address lpToken,\r\n        address vault,\r\n        VaultType vaultType,\r\n        uint256 lpValue,\r\n        uint256 deadline\r\n    ) internal returns (uint256) {\r\n        uint256 withdrawnLp;\r\n        if (vaultType == VaultType.GRIZZLY) {\r\n            DepositArrays memory empty = DepositArrays(\r\n                new address[](0),\r\n                new uint256[](0)\r\n            );\r\n\r\n            withdrawnLp = IGrizzly(vault).withdrawToLp(\r\n                msg.sender,\r\n                lpValue,\r\n                empty.tokens,\r\n                empty.tokens,\r\n                empty.amounts,\r\n                empty.amounts,\r\n                0,\r\n                deadline\r\n            );\r\n        } else if (vaultType == VaultType.YEARN) {\r\n            _pullTokens(vault, lpValue);\r\n            uint256 iniVaultBal = _getBalance(lpToken);\r\n            IVault(vault).withdraw(lpValue, address(this));\r\n            withdrawnLp = _getBalance(lpToken) - iniVaultBal;\r\n        } else {\r\n            revert(\"Vault type not supported\");\r\n        }\r\n        return withdrawnLp;\r\n    }\r\n\r\n    /**\r\n     * @notice use 0x library to swap tokens\r\n     */\r\n    function _fillQuote(\r\n        address fromTokenAddress,\r\n        address toTokenAddress,\r\n        uint256 amount,\r\n        address swapTarget,\r\n        bytes memory swapData\r\n    ) internal returns (uint256 amountBought, uint256 fromTokensUsed) {\r\n        if (fromTokenAddress == toTokenAddress) {\r\n            return (amount, amount);\r\n        }\r\n\r\n        if (swapTarget == wethTokenAddress && fromTokenAddress == ETHAddress) {\r\n            IWETH(wethTokenAddress).deposit{value: amount}();\r\n            return (amount, amount);\r\n        }\r\n\r\n        if (swapTarget == wethTokenAddress && toTokenAddress == ETHAddress) {\r\n            IWETH(wethTokenAddress).withdraw(amount);\r\n            return (amount, amount);\r\n        }\r\n\r\n        uint256 valueToSend;\r\n        if (fromTokenAddress == ETHAddress) {\r\n            valueToSend = amount;\r\n        } else {\r\n            _approveToken(fromTokenAddress, swapTarget, amount);\r\n        }\r\n\r\n        uint256 initialBalance = _getBalance(toTokenAddress);\r\n        uint256 initialBalanceInToken = _getBalance(fromTokenAddress);\r\n\r\n        require(approvedTargets[swapTarget], \"Target not Authorized\");\r\n        (bool success, ) = swapTarget.call{value: valueToSend}(swapData);\r\n        require(success, \"Error Swapping Tokens\");\r\n\r\n        amountBought = _getBalance(toTokenAddress) - initialBalance;\r\n        fromTokensUsed = initialBalanceInToken - _getBalance(fromTokenAddress);\r\n\r\n        require(amountBought > 0, \"Swapped To Invalid Intermediate\");\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedLpTokens\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpWithdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmountToken0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmountToken1\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"estimateOutShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"estimateSwapShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isApproved\",\"type\":\"bool[]\"}],\"name\":\"setApprovedTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"enum IZap.VaultType\",\"name\":\"vaultType\",\"type\":\"uint8\"}],\"name\":\"setVaultInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityImplementationAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum IZap.VaultType[]\",\"name\":\"vaultTypes\",\"type\":\"uint8[]\"}],\"name\":\"setVaultInfoBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityRouterImplementation\",\"type\":\"address\"},{\"internalType\":\"enum IZap.VaultType\",\"name\":\"vaultType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IZap.SwapTokenInfo\",\"name\":\"token0Info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IZap.SwapTokenInfo\",\"name\":\"token1Info\",\"type\":\"tuple\"}],\"internalType\":\"struct IZap.ZapInInput\",\"name\":\"zapInInput\",\"type\":\"tuple\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenShare0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenShare1\",\"type\":\"uint256\"}],\"internalType\":\"struct IZap.ZapOutInput\",\"name\":\"zapOutInput\",\"type\":\"tuple\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zap", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xd55850ec52194ce020d89a34c3171148b8bce90b", "SwarmSource": "ipfs://648df27f211af54aef678adc697194436e65720703660ee6fae1d38eb8dc25d3"}