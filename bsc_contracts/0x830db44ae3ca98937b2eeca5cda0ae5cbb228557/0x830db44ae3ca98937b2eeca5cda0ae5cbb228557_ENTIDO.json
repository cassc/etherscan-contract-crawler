{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ENTIDO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// contracts/ENTIDO.sol.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ENTIDO is Ownable {\\n    uint public constant BASE_DIVIDER = 10000;\\n\\n    struct Node {\\n        uint id;\\n        uint minAmount;\\n        uint timesAmount;\\n        uint totalAmount;\\n        bool enable;\\n    }\\n\\n    struct UserNode {\\n        uint nodeId;\\n        uint buyAmount;\\n        uint incomeAmount;\\n        bool enable;\\n    }\\n\\n    IERC20 public USDT;\\n\\n    bool public presaleOpen;\\n\\n    address public presaleWallet;\\n\\n    Node[] public nodes;\\n\\n    mapping(address => UserNode) public usersNode;\\n\\n    uint public referrerRewardRate;\\n\\n    mapping(address => address) public referrers;\\n\\n    address public signerAddress;\\n\\n    address public claimAddress;\\n\\n    mapping(uint => address) public rands;\\n\\n    event Referrer(address indexed owner, address referrer);\\n\\n    event Presale(address indexed owner, uint nodeId, uint amount);\\n\\n    event Withdraw(address indexed token, address indexed owner, uint amount, uint rand);\\n\\n    constructor() {\\n        referrerRewardRate = 1000;\\n\\n        nodes.push(Node(1, 100e18, 100e18, 1000e18, true));\\n        nodes.push(Node(2, 200e18, 100e18, 2000e18, true));\\n        nodes.push(Node(3, 300e18, 100e18, 3000e18, true));\\n    }\\n\\n    function setReferer(address referrer) public {\\n        require(referrer != address(0), \\\"ENTIDO: Invalid referrer\\\");\\n        require(referrer != _msgSender(), \\\"ENTIDO: Invalid referrer for owner\\\");\\n        require(referrer != address(this), \\\"ENTIDO: Invalid referrer for this\\\");\\n        require(referrers[_msgSender()] == address(0), \\\"ENTIDO: Referrer already set\\\");\\n\\n        _setReferrer(_msgSender(), referrer);\\n    }\\n\\n    function presale(uint nodeId, uint usdtAmount) public {\\n        require(presaleOpen, \\\"ENTIDO: Presale not open\\\");\\n        require(referrers[_msgSender()] != address(0), \\\"ENTIDO: Bind the referrer first\\\");\\n\\n        uint referrerRewardAmount = usdtAmount * referrerRewardRate / BASE_DIVIDER;\\n        if (referrerRewardAmount > 0) {\\n            USDT.transferFrom(_msgSender(), referrers[_msgSender()], referrerRewardAmount);\\n        }\\n\\n        uint surplusAmount = usdtAmount - referrerRewardAmount;\\n        if (surplusAmount > 0) {\\n            USDT.transferFrom(_msgSender(), presaleWallet, surplusAmount);\\n        }\\n\\n        _presale(_msgSender(), nodeId, usdtAmount);\\n    }\\n\\n    function _presale(address owner, uint nodeId, uint amount) internal {\\n        Node memory node = getNodeById(nodeId);\\n        require(node.enable, \\\"ENTIDO: Node id invalid\\\");\\n\\n        if (usersNode[owner].enable) {\\n            require(node.id == usersNode[owner].nodeId, \\\"ENTIDO: Different presale nodes\\\");\\n            require(amount % node.timesAmount == 0, \\\"ENTIDO: USDT Amount invalid\\\");\\n\\n            usersNode[owner].buyAmount += amount;\\n            usersNode[owner].enable = true;\\n        } else {\\n            require(amount >= node.minAmount, \\\"ENTIDO: USDT Amount too small\\\");\\n            require(amount % node.timesAmount == 0, \\\"ENTIDO: USDT Amount invalid\\\");\\n\\n            usersNode[owner].nodeId = nodeId;\\n            usersNode[owner].buyAmount = amount;\\n            usersNode[owner].enable = true;\\n        }\\n\\n        for (uint i = 0; i < nodes.length; i++) {\\n            if (usersNode[owner].nodeId < nodes[i].id && usersNode[owner].buyAmount > nodes[i].totalAmount) {\\n                usersNode[owner].nodeId = nodes[i].id;\\n            }\\n        }\\n\\n        emit Presale(_msgSender(), usersNode[owner].nodeId, amount);\\n    }\\n\\n    function getNodeById(uint id) public view returns (Node memory) {\\n        Node memory node;\\n        for (uint i = 0; i < nodes.length; i++) {\\n            if (nodes[i].id == id) {\\n                node = nodes[i];\\n                break;\\n            }\\n        }\\n\\n        return node;\\n    }\\n\\n    function _setReferrer(address owner, address referrer) internal {\\n        bool result = false;\\n        address parent = referrer;\\n        while (true) {\\n            if (parent == address(0)) {\\n                result = true;\\n                break;\\n            }\\n\\n            if (parent == owner) {\\n                result = false;\\n                break;\\n            }\\n            parent = referrers[parent];\\n        }\\n\\n        require(result, \\\"ENTIDO: Inviter address find loop\\\");\\n        referrers[owner] = referrer;\\n        emit Referrer(owner, referrer);\\n    }\\n\\n    function getNodes() public view returns (Node[] memory) {\\n        return nodes;\\n    }\\n\\n    function claim(address token, uint amount, uint rand, uint8 v, bytes32 r, bytes32 s) public {\\n        require(rand > 0, \\\"ENTIDO: Rand invalid\\\");\\n        require(rands[rand] == address(0), \\\"ENTIDO: Rand used\\\");\\n\\n        address signer = _recoverClaimSigner(token, _msgSender(), amount, rand, v, r, s);\\n        require(signer != address(0), \\\"ENTIDO: Sign invalid\\\");\\n        require(signer == signerAddress, \\\"ENTIDO: Sign unauthorized\\\");\\n\\n        IERC20(token).transferFrom(claimAddress, _msgSender(), amount);\\n        rands[rand] = _msgSender();\\n        emit Withdraw(token, _msgSender(), amount, rand);\\n    }\\n\\n    function _recoverClaimSigner(address token, address to, uint amount, uint rand, uint8 v, bytes32 r, bytes32 s) private view returns (address) {\\n        bytes32 message = keccak256(\\n            abi.encode(block.chainid, address(this), \\\"claim\\\", token, to, amount, rand)\\n        );\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\n\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    function airdrop(address token, address[] memory _tos, uint[] memory _values) public {\\n        require(_tos.length > 0, \\\"ENTIDO: Address invalid\\\");\\n        require(_values.length > 0, \\\"ENTIDO: Amount invalid\\\");\\n        require(_values.length == _tos.length, \\\"ENTIDO: Address or values length not eq\\\");\\n\\n        IERC20 _token = IERC20(token);\\n        uint amount = 0;\\n        for (uint i = 0; i < _values.length; i++) {\\n            amount += _values[i];\\n        }\\n        require(_token.balanceOf(_msgSender()) >= amount, \\\"ENTIDO: Insufficient funds\\\");\\n\\n        for (uint i = 0; i < _tos.length; i++) {\\n            require(_tos[i] != address(0), \\\"ENTIDO: To address is zero\\\");\\n            require(_values[i] > 0, \\\"ENTIDO: Amount invalid\\\");\\n\\n            _token.transferFrom(_msgSender(), _tos[i], _values[i]);\\n        }\\n    }\\n\\n    function setConfig(address _usdt, address _presaleWallet, address _signerAddress, address _claimAddress) public onlyOwner {\\n        USDT = IERC20(_usdt);\\n        presaleWallet = _presaleWallet;\\n        signerAddress = _signerAddress;\\n        claimAddress = _claimAddress;\\n    }\\n\\n    function setNodes(Node memory _node) public onlyOwner {\\n        nodes.push(_node);\\n    }\\n\\n    function ClearNodes() public onlyOwner {\\n        delete nodes;\\n    }\\n\\n    function setPresaleOpen(bool _open) public onlyOwner {\\n        presaleOpen = _open;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Presale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Referrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClearNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNodeById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"internalType\":\"struct ENTIDO.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"internalType\":\"struct ENTIDO.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rands\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimAddress\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"internalType\":\"struct ENTIDO.Node\",\"name\":\"_node\",\"type\":\"tuple\"}],\"name\":\"setNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setPresaleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setReferer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ENTIDO", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}