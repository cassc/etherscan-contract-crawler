{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/ISphereXEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for SphereXEngine - definitions of core functionality\\n * @author SphereX Technologies ltd\\n * @notice This interface is imported by SphereXProtected, so that SphereXProtected can call functions from SphereXEngine\\n * @dev Full docs of these functions can be found in SphereXEngine\\n */\\n\\ninterface ISphereXEngine {\\n    function sphereXValidatePre(int256 num, address sender, bytes calldata data) external returns (bytes32[] memory);\\n    function sphereXValidatePost(\\n        int256 num,\\n        uint256 gas,\\n        bytes32[] calldata valuesBefore,\\n        bytes32[] calldata valuesAfter\\n    ) external;\\n    function sphereXValidateInternalPre(int256 num) external returns (bytes32[] memory);\\n    function sphereXValidateInternalPost(\\n        int256 num,\\n        uint256 gas,\\n        bytes32[] calldata valuesBefore,\\n        bytes32[] calldata valuesAfter\\n    ) external;\\n\\n    function addAllowedSenderOnChain(address sender) external;\\n\\n    /**\\n     * This function is taken as is from OZ IERC165, we don't inherit from OZ\\n     * to avoid collisions with the customer OZ version.\\n     *\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @dev this struct is used to reduce the stack usage of the modifiers.\\n */\\nstruct ModifierLocals {\\n    bytes32[] storageSlots;\\n    bytes32[] valuesBefore;\\n    uint256 gas;\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/ProtectedProxies/ISphereXBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISphereXEngine} from \\\"../ISphereXEngine.sol\\\";\\n\\n/**\\n * @title Interface for a spherex beacon to be used by spherex's beacon proxy.\\n */\\n\\ninterface ISphereXBeacon {\\n    function protectedImplementation(bytes4 func_sig) external view returns (address, address, bool);\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/ProtectedProxies/ProtectedBeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\nimport {BeaconProxy, Proxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {SphereXProtectedProxy} from \\\"../SphereXProtectedProxy.sol\\\";\\nimport {ISphereXEngine, ModifierLocals} from \\\"../ISphereXEngine.sol\\\";\\nimport {ISphereXBeacon} from \\\"./ISphereXBeacon.sol\\\";\\n\\n/**\\n * @title BeaconProxy implementation with spherex's protection\\n */\\ncontract ProtectedBeaconProxy is BeaconProxy {\\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {}\\n\\n    /**\\n     * Internal function that reads values from given storage slots and returns them\\n     * @param storageSlots list of storage slots to read\\n     * @return list of values read from the various storage slots\\n     */\\n    function _readStorage(bytes32[] memory storageSlots) internal view returns (bytes32[] memory) {\\n        uint256 arrayLength = storageSlots.length;\\n        bytes32[] memory values = new bytes32[](arrayLength);\\n        // create the return array data\\n\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            bytes32 slot = storageSlots[i];\\n            bytes32 temp_value;\\n            // solhint-disable-next-line no-inline-assembly\\n            // slither-disable-next-line assembly\\n            assembly {\\n                temp_value := sload(slot)\\n            }\\n\\n            values[i] = temp_value;\\n        }\\n        return values;\\n    }\\n\\n    function _before(address engine) private returns (ModifierLocals memory locals) {\\n        locals.storageSlots =\\n            ISphereXEngine(engine).sphereXValidatePre(int256(uint256(uint32(msg.sig))), msg.sender, msg.data);\\n        locals.valuesBefore = _readStorage(locals.storageSlots);\\n        locals.gas = gasleft();\\n\\n        return locals;\\n    }\\n\\n    function _after(address engine, ModifierLocals memory locals) private {\\n        uint256 gas = locals.gas - gasleft();\\n        bytes32[] memory valuesAfter;\\n        valuesAfter = _readStorage(locals.storageSlots);\\n\\n        ISphereXEngine(engine).sphereXValidatePost(\\n            -int256(uint256(uint32(msg.sig))), gas, locals.valuesBefore, valuesAfter\\n        );\\n    }\\n\\n    function _fallback() internal virtual override {\\n        (address imp, address engine, bool isProtectedFuncSig) =\\n            ISphereXBeacon(_getBeacon()).protectedImplementation(msg.sig);\\n        if (isProtectedFuncSig && engine != address(0)) {\\n            ModifierLocals memory locals = _before(engine);\\n            bytes memory ret_data = Address.functionDelegateCall(imp, msg.data);\\n            _after(engine, locals);\\n\\n            uint256 ret_size = ret_data.length;\\n            assembly {\\n                return(add(ret_data, 0x20), ret_size)\\n            }\\n        } else {\\n            super._delegate(imp);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/SphereXProtectedBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISphereXEngine, ModifierLocals} from \\\"./ISphereXEngine.sol\\\";\\n\\n/**\\n * @title SphereX base Customer contract template\\n */\\nabstract contract SphereXProtectedBase {\\n    /**\\n     * @dev we would like to avoid occupying storage slots\\n     * @dev to easily incorporate with existing contracts\\n     */\\n    bytes32 private constant SPHEREX_ADMIN_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.spherex.spherex\\\")) - 1);\\n    bytes32 private constant SPHEREX_PENDING_ADMIN_STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"eip1967.spherex.pending\\\")) - 1);\\n    bytes32 private constant SPHEREX_OPERATOR_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.spherex.operator\\\")) - 1);\\n    bytes32 private constant SPHEREX_ENGINE_STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"eip1967.spherex.spherex_engine\\\")) - 1);\\n\\n    event ChangedSpherexOperator(address oldSphereXAdmin, address newSphereXAdmin);\\n    event ChangedSpherexEngineAddress(address oldEngineAddress, address newEngineAddress);\\n    event SpherexAdminTransferStarted(address currentAdmin, address pendingAdmin);\\n    event SpherexAdminTransferCompleted(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @dev used when the client doesn't use a proxy\\n     * @notice constructor visibility is required to support all compiler versions\\n     */\\n    constructor(address admin, address operator, address engine) {\\n        __SphereXProtectedBase_init(admin, operator, engine);\\n    }\\n\\n    /**\\n     * @dev used when the client uses a proxy - should be called by the inhereter initialization\\n     */\\n    function __SphereXProtectedBase_init(address admin, address operator, address engine) internal virtual {\\n        _setAddress(SPHEREX_ADMIN_STORAGE_SLOT, admin);\\n        emit SpherexAdminTransferCompleted(address(0), admin);\\n\\n        _setAddress(SPHEREX_OPERATOR_STORAGE_SLOT, operator);\\n        emit ChangedSpherexOperator(address(0), operator);\\n\\n        _checkSphereXEngine(engine);\\n        _setAddress(SPHEREX_ENGINE_STORAGE_SLOT, engine);\\n        emit ChangedSpherexEngineAddress(address(0), engine);\\n    }\\n\\n    // ============ Helper functions ============\\n\\n    function _sphereXEngine() private view returns (ISphereXEngine) {\\n        return ISphereXEngine(_getAddress(SPHEREX_ENGINE_STORAGE_SLOT));\\n    }\\n\\n    /**\\n     * Stores a new address in an arbitrary slot\\n     * @param slot where to store the address\\n     * @param newAddress address to store in given slot\\n     */\\n    function _setAddress(bytes32 slot, address newAddress) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            sstore(slot, newAddress)\\n        }\\n    }\\n\\n    /**\\n     * Returns an address from an arbitrary slot.\\n     * @param slot to read an address from\\n     */\\n    function _getAddress(bytes32 slot) internal view returns (address addr) {\\n        // solhint-disable-next-line no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            addr := sload(slot)\\n        }\\n    }\\n\\n    // ============ Local modifiers ============\\n\\n    modifier onlySphereXAdmin() {\\n        require(msg.sender == _getAddress(SPHEREX_ADMIN_STORAGE_SLOT), \\\"SphereX error: admin required\\\");\\n        _;\\n    }\\n\\n    modifier spherexOnlyOperator() {\\n        require(msg.sender == _getAddress(SPHEREX_OPERATOR_STORAGE_SLOT), \\\"SphereX error: operator required\\\");\\n        _;\\n    }\\n\\n    modifier returnsIfNotActivated() {\\n        if (address(_sphereXEngine()) == address(0)) {\\n            return;\\n        }\\n\\n        _;\\n    }\\n\\n    // ============ Management ============\\n\\n    /**\\n     * Returns the currently pending admin address, the one that can call acceptSphereXAdminRole to become the admin.\\n     * @dev Could not use OZ Ownable2Step because the client's contract might use it.\\n     */\\n    function pendingSphereXAdmin() public view returns (address) {\\n        return _getAddress(SPHEREX_PENDING_ADMIN_STORAGE_SLOT);\\n    }\\n\\n    /**\\n     * Returns the current admin address, the one that can call acceptSphereXAdminRole to become the admin.\\n     * @dev Could not use OZ Ownable2Step because the client's contract might use it.\\n     */\\n    function sphereXAdmin() public view returns (address) {\\n        return _getAddress(SPHEREX_ADMIN_STORAGE_SLOT);\\n    }\\n\\n    /**\\n     * Returns the current operator address.\\n     */\\n    function sphereXOperator() public view returns (address) {\\n        return _getAddress(SPHEREX_OPERATOR_STORAGE_SLOT);\\n    }\\n\\n    /**\\n     * Returns the current engine address.\\n     */\\n    function sphereXEngine() public view returns (address) {\\n        return _getAddress(SPHEREX_ENGINE_STORAGE_SLOT);\\n    }\\n\\n    /**\\n     * Setting the address of the next admin. this address will have to accept the role to become the new admin.\\n     * @dev Could not use OZ Ownable2Step because the client's contract might use it.\\n     */\\n    function transferSphereXAdminRole(address newAdmin) public virtual onlySphereXAdmin {\\n        _setAddress(SPHEREX_PENDING_ADMIN_STORAGE_SLOT, newAdmin);\\n        emit SpherexAdminTransferStarted(sphereXAdmin(), newAdmin);\\n    }\\n\\n    /**\\n     * Accepting the admin role and completing the transfer.\\n     * @dev Could not use OZ Ownable2Step because the client's contract might use it.\\n     */\\n    function acceptSphereXAdminRole() public virtual {\\n        require(pendingSphereXAdmin() == msg.sender, \\\"SphereX error: not the pending account\\\");\\n        address oldAdmin = sphereXAdmin();\\n        _setAddress(SPHEREX_ADMIN_STORAGE_SLOT, msg.sender);\\n        _setAddress(SPHEREX_PENDING_ADMIN_STORAGE_SLOT, address(0));\\n        emit SpherexAdminTransferCompleted(oldAdmin, msg.sender);\\n    }\\n\\n    /**\\n     *\\n     * @param newSphereXOperator new address of the new operator account\\n     */\\n    function changeSphereXOperator(address newSphereXOperator) external onlySphereXAdmin {\\n        address oldSphereXOperator = _getAddress(SPHEREX_OPERATOR_STORAGE_SLOT);\\n        _setAddress(SPHEREX_OPERATOR_STORAGE_SLOT, newSphereXOperator);\\n        emit ChangedSpherexOperator(oldSphereXOperator, newSphereXOperator);\\n    }\\n\\n    /**\\n     * Checks the given address implements ISphereXEngine or is address(0)\\n     * @param newSphereXEngine new address of the spherex engine\\n     */\\n    function _checkSphereXEngine(address newSphereXEngine) private view {\\n        require(\\n            newSphereXEngine == address(0)\\n                || ISphereXEngine(newSphereXEngine).supportsInterface(type(ISphereXEngine).interfaceId),\\n            \\\"SphereX error: not a SphereXEngine\\\"\\n        );\\n    }\\n\\n    /**\\n     *\\n     * @param newSphereXEngine new address of the spherex engine\\n     * @dev this is also used to actually enable the defense\\n     * (because as long is this address is 0, the protection is disabled).\\n     */\\n    function changeSphereXEngine(address newSphereXEngine) external spherexOnlyOperator {\\n        _checkSphereXEngine(newSphereXEngine);\\n        address oldEngine = _getAddress(SPHEREX_ENGINE_STORAGE_SLOT);\\n        _setAddress(SPHEREX_ENGINE_STORAGE_SLOT, newSphereXEngine);\\n        emit ChangedSpherexEngineAddress(oldEngine, newSphereXEngine);\\n    }\\n    // ============ Engine interaction ============\\n\\n    function _addAllowedSenderOnChain(address newSender) internal {\\n        ISphereXEngine engine = _sphereXEngine();\\n        if (address(engine) != address(0)) {\\n            engine.addAllowedSenderOnChain(newSender);\\n        }\\n    }\\n\\n    // ============ Hooks ============\\n\\n    /**\\n     * @dev internal function for engine communication. We use it to reduce contract size.\\n     *  Should be called before the code of a function.\\n     * @param num function identifier\\n     * @param isExternalCall set to true if this was called externally\\n     *  or a 'public' function from another address\\n     */\\n    function _sphereXValidatePre(int256 num, bool isExternalCall)\\n        private\\n        returnsIfNotActivated\\n        returns (ModifierLocals memory locals)\\n    {\\n        ISphereXEngine sphereXEngine = _sphereXEngine();\\n        if (isExternalCall) {\\n            locals.storageSlots = sphereXEngine.sphereXValidatePre(num, msg.sender, msg.data);\\n        } else {\\n            locals.storageSlots = sphereXEngine.sphereXValidateInternalPre(num);\\n        }\\n        locals.valuesBefore = _readStorage(locals.storageSlots);\\n        locals.gas = gasleft();\\n        return locals;\\n    }\\n\\n    /**\\n     * @dev internal function for engine communication. We use it to reduce contract size.\\n     *  Should be called after the code of a function.\\n     * @param num function identifier\\n     * @param isExternalCall set to true if this was called externally\\n     *  or a 'public' function from another address\\n     */\\n    function _sphereXValidatePost(int256 num, bool isExternalCall, ModifierLocals memory locals)\\n        private\\n        returnsIfNotActivated\\n    {\\n        uint256 gas = locals.gas - gasleft();\\n\\n        ISphereXEngine sphereXEngine = _sphereXEngine();\\n\\n        bytes32[] memory valuesAfter;\\n        valuesAfter = _readStorage(locals.storageSlots);\\n\\n        if (isExternalCall) {\\n            sphereXEngine.sphereXValidatePost(num, gas, locals.valuesBefore, valuesAfter);\\n        } else {\\n            sphereXEngine.sphereXValidateInternalPost(num, gas, locals.valuesBefore, valuesAfter);\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function for engine communication. We use it to reduce contract size.\\n     *  Should be called before the code of a function.\\n     * @param num function identifier\\n     * @return locals ModifierLocals\\n     */\\n    function _sphereXValidateInternalPre(int256 num)\\n        internal\\n        returnsIfNotActivated\\n        returns (ModifierLocals memory locals)\\n    {\\n        locals.storageSlots = _sphereXEngine().sphereXValidateInternalPre(num);\\n        locals.valuesBefore = _readStorage(locals.storageSlots);\\n        locals.gas = gasleft();\\n        return locals;\\n    }\\n\\n    /**\\n     * @dev internal function for engine communication. We use it to reduce contract size.\\n     *  Should be called after the code of a function.\\n     * @param num function identifier\\n     * @param locals ModifierLocals\\n     */\\n    function _sphereXValidateInternalPost(int256 num, ModifierLocals memory locals) internal returnsIfNotActivated {\\n        bytes32[] memory valuesAfter;\\n        valuesAfter = _readStorage(locals.storageSlots);\\n        _sphereXEngine().sphereXValidateInternalPost(num, locals.gas - gasleft(), locals.valuesBefore, valuesAfter);\\n    }\\n\\n    /**\\n     *  @dev Modifier to be incorporated in all internal protected non-view functions\\n     */\\n    modifier sphereXGuardInternal(int256 num) {\\n        ModifierLocals memory locals = _sphereXValidateInternalPre(num);\\n        _;\\n        _sphereXValidateInternalPost(-num, locals);\\n    }\\n\\n    /**\\n     *  @dev Modifier to be incorporated in all external protected non-view functions\\n     */\\n    modifier sphereXGuardExternal(int256 num) {\\n        ModifierLocals memory locals = _sphereXValidatePre(num, true);\\n        _;\\n        _sphereXValidatePost(-num, true, locals);\\n    }\\n\\n    /**\\n     *  @dev Modifier to be incorporated in all public protected non-view functions\\n     */\\n    modifier sphereXGuardPublic(int256 num, bytes4 selector) {\\n        ModifierLocals memory locals = _sphereXValidatePre(num, msg.sig == selector);\\n        _;\\n        _sphereXValidatePost(-num, msg.sig == selector, locals);\\n    }\\n\\n    // ============ Internal Storage logic ============\\n\\n    /**\\n     * Internal function that reads values from given storage slots and returns them\\n     * @param storageSlots list of storage slots to read\\n     * @return list of values read from the various storage slots\\n     */\\n    function _readStorage(bytes32[] memory storageSlots) internal view returns (bytes32[] memory) {\\n        uint256 arrayLength = storageSlots.length;\\n        bytes32[] memory values = new bytes32[](arrayLength);\\n        // create the return array data\\n\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            bytes32 slot = storageSlots[i];\\n            bytes32 temp_value;\\n            // solhint-disable-next-line no-inline-assembly\\n            // slither-disable-next-line assembly\\n            assembly {\\n                temp_value := sload(slot)\\n            }\\n\\n            values[i] = temp_value;\\n        }\\n        return values;\\n    }\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/SphereXProtectedProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\nimport {Proxy} from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {SphereXProxyBase} from \\\"./SphereXProxyBase.sol\\\";\\n\\n/**\\n * @title SphereX abstract proxt contract which implements OZ's Proxy intereface.\\n */\\nabstract contract SphereXProtectedProxy is SphereXProxyBase, Proxy {\\n    constructor(address admin, address operator, address engine) SphereXProxyBase(admin, operator, engine) {}\\n\\n    /**\\n     * The main point of the contract, wrap the delegate operation with SphereX's protection modfifier\\n     * @param implementation delegate dst\\n     */\\n    function _protectedDelegate(address implementation)\\n        private\\n        sphereXGuardExternal(int256(uint256(uint32(msg.sig))))\\n        returns (bytes memory)\\n    {\\n        return Address.functionDelegateCall(implementation, msg.data);\\n    }\\n\\n    /**\\n     * Override Proxy.sol _delegate to make every inheriting proxy delegate with sphere'x protection\\n     * @param implementation delegate dst\\n     */\\n    function _delegate(address implementation) internal virtual override {\\n        if (isProtectedFuncSig(msg.sig)) {\\n            bytes memory ret_data = _protectedDelegate(implementation);\\n            uint256 ret_size = ret_data.length;\\n\\n            assembly {\\n                return(add(ret_data, 0x20), ret_size)\\n            }\\n        } else {\\n            super._delegate(implementation);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@spherex-xyz/contracts/src/SphereXProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// (c) SphereX 2023 Terms&Conditions\\n\\npragma solidity ^0.8.0;\\n\\nimport {SphereXProtectedBase} from \\\"./SphereXProtectedBase.sol\\\";\\n\\ncontract SphereXProxyBase is SphereXProtectedBase {\\n    constructor(address admin, address operator, address engine) SphereXProtectedBase(admin, operator, engine) {}\\n\\n    event AddedProtectedFuncSigs(bytes4[] patterns);\\n    event RemovedProtectedFuncSigs(bytes4[] patterns);\\n\\n    /**\\n     * @dev As we dont want to conflict with the imp's storage we implenment the protected\\n     * @dev functions map in an arbitrary slot.\\n     */\\n    bytes32 private constant PROTECTED_FUNC_SIG_BASE_POSITION =\\n        bytes32(uint256(keccak256(\\\"eip1967.spherex.protection_sig_base\\\")) - 1);\\n\\n    /**\\n     * Sets the value of a functions signature in the protected functions map stored in an arbitrary slot\\n     * @param func_sig of the wanted function\\n     * @param value bool value to set for the given function signature\\n     */\\n    function _setProtectedFuncSig(bytes4 func_sig, bool value) internal {\\n        bytes32 position = keccak256(abi.encodePacked(func_sig, PROTECTED_FUNC_SIG_BASE_POSITION));\\n        assembly {\\n            sstore(position, value)\\n        }\\n    }\\n\\n    /**\\n     * Adds several functions' signature to the protected functions map stored in an arbitrary slot\\n     * @param keys of the functions added to the protected map\\n     */\\n    function addProtectedFuncSigs(bytes4[] memory keys) public spherexOnlyOperator {\\n        for (uint256 i = 0; i < keys.length; ++i) {\\n            _setProtectedFuncSig(keys[i], true);\\n        }\\n        emit AddedProtectedFuncSigs(keys);\\n    }\\n\\n    /**\\n     * Removes given functions' signature from the protected functions map\\n     * @param keys of the functions removed from the protected map\\n     */\\n    function removeProtectedFuncSigs(bytes4[] memory keys) public spherexOnlyOperator {\\n        for (uint256 i = 0; i < keys.length; ++i) {\\n            _setProtectedFuncSig(keys[i], false);\\n        }\\n        emit RemovedProtectedFuncSigs(keys);\\n    }\\n\\n    /**\\n     * Getter for a specific function signature in the protected map\\n     * @param func_sig of the wanted function\\n     */\\n    function isProtectedFuncSig(bytes4 func_sig) public view virtual returns (bool value) {\\n        bytes32 position = keccak256(abi.encodePacked(func_sig, PROTECTED_FUNC_SIG_BASE_POSITION));\\n        assembly {\\n            value := sload(position)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ProtectedPublicBeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\nimport \\\"@spherex-xyz/contracts/src/ProtectedProxies/ProtectedBeaconProxy.sol\\\";\\n\\ncontract ProtectedPublicBeaconProxy is ProtectedBeaconProxy {\\n    constructor(address beacon, bytes memory data) ProtectedBeaconProxy(beacon, data) {}\\n\\n    function implementation() external view returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProtectedPublicBeaconProxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000083e225353fafc848bc5af132a3ebc2f8f66d95c800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}