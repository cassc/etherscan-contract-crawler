{"SourceCode": "/**\r\n\u2591\u2588\u2500\u2591\u2588 \u2588\u2500\u2500\u2588 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580\u2588 \u2591\u2588\u2580\u2580\u2588 \u2588\u2500\u2500\u2588 \u2588\u2580\u2580\u2588 \u2500\u2580\u2500 \u2588\u2580\u2580\u2584 \u3000 \u2580\u2584\u2591\u2584\u2580 \r\n\u2591\u2588\u2580\u2580\u2588 \u2588\u2584\u2584\u2588 \u2588\u2500\u2500\u2588 \u2588\u2580\u2580 \u2588\u2584\u2584\u2580 \u2591\u2588\u2500\u2500\u2500 \u2588\u2580\u2580\u2588 \u2588\u2584\u2584\u2588 \u2580\u2588\u2580 \u2588\u2500\u2500\u2588 \u3000 \u2500\u2591\u2588\u2500\u2500 \r\n\u2591\u2588\u2500\u2591\u2588 \u2584\u2584\u2584\u2588 \u2588\u2580\u2580\u2580 \u2580\u2580\u2580 \u2580\u2500\u2580\u2580 \u2591\u2588\u2584\u2584\u2588 \u2580\u2500\u2500\u2580 \u2580\u2500\u2500\u2580 \u2580\u2580\u2580 \u2580\u2500\u2500\u2580 \u3000 \u2584\u2580\u2591\u2580\u2584\r\n                                               VERSION III\r\n\r\nAnti-Dump - Anti-Bots - Pump-no-Dump Tokenomics\"\r\nCreated by Joyu Quma \r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function Z_transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract HyperchainX is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    address public _marketingWallet;\r\n    address public _buybackWallet;\r\n    address public _communityRewardsWallet;\r\n    address public _migrationWallet;\r\n\r\n   \r\n    uint8 private _decimals = 7;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000000 * 10**_decimals; // 1 Trillion\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"HyperChain X\";\r\n    string private _symbol = \"HYPER\";\r\n    \r\n    uint256 public _impact1 = 10;\r\n    uint256 public _impact2 = 20;    \r\n\r\n    uint256 public _taxFee = 100000; // will change according to sell or buy function\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    \r\n    uint256 public _liquidityFee = 400000; // will change according to sell or buy function\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    uint256 public _buyLiquidityFee = 400000;\r\n    uint256 public _buyTaxFee = 100000;\r\n    uint256 public _sellLiquidityFeeA = 800000;\r\n    uint256 public _sellLiquidityFeeB = 1600000;\r\n    uint256 public _sellTaxFeeA = 200000;\r\n    uint256 public _sellTaxFeeB = 400000;\r\n    uint256 public _transferLiquidityFee = 400000;\r\n    uint256 public _transferTaxFee = 100000;\r\n    uint256 public _exchangeLiquidityFee = 0;\r\n    uint256 public _exchangeTaxFee = 0;\r\n    uint256 public _marketingFee = 50;\r\n    uint256 public _buybackFee = 50;\r\n\r\n\r\n    uint256 public _maxSellAttempts = 4;\r\n\r\n    uint256 public _sell_Window = 21600; \r\n    uint256 public _sell_InitialWait = 1800; \r\n    uint256 public _sell_FurtherWait = 1800;\r\n\r\n\r\n    mapping(address => uint256) private buy_AllowedTime;\r\n    mapping(address => uint256) private sell_AllowedTime;\r\n    mapping(address => uint256) private firstsell;\r\n    mapping(address => uint256) private sellnumber;\r\n    mapping(address => uint256) private HodlingStartTime;\r\n    mapping(address => bool) private _isBlacklisted;\r\n    mapping(address => bool) private AllowedExchanges;\r\n    mapping(address => uint256) private BridgeLiquidityFee;\r\n    mapping(address => uint256) private BridgeTaxFee;\r\n    mapping(address => bool) private AllowedBridges;\r\n\r\n\r\n\r\n    bool private isTrade = true;\r\n    bool private antiDumpEnabled = false;\r\n\r\n    uint256 public _maxTxAmount = _tTotal;\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n                \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n\r\n    bool public feesEnabled = false;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public ProjectFundingEnabled = false;\r\n    bool public tradingEnabled = false;\r\n    uint256 private minTokensBeforeSwap = 30000000 * 10**_decimals; // 30m\r\n\r\n    uint256 startDate;\r\n\r\n    event ProjectFundingEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        address indexed address01,\r\n\t\tuint256 amount01,\r\n\t\taddress indexed address02,\r\n\t\tuint256 amount02\r\n    );\r\n    event TokensSentToCommunityWallet (\r\n\t\t\taddress indexed recipient,\r\n\t\t\tuint256  amount\r\n\t);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n         IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Pancake\r\n\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        startDate = block.timestamp + 20700;\r\n\r\n        _marketingWallet = msg.sender;\r\n        _communityRewardsWallet = msg.sender;\r\n        _buybackWallet = msg.sender;\r\n        _migrationWallet = msg.sender;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee, address to) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount, to);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount, to);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlacklisted[from], \"Sender address is blacklisted\");\r\n\t\trequire(!_isBlacklisted[to], \"Recipient address is blacklisted\");\r\n        \r\n        if (from == owner() && balanceOf(to) == 0) {\r\n            HodlingStartTime[to] = block.timestamp;\r\n        }        \r\n        if (from != owner() && !tradingEnabled) {\r\n            require(tradingEnabled, \"Trading is not enabled yet\");\r\n        }\r\n        uint256 firstaugust = 1627776000;\r\n        if (from == address(_migrationWallet) && balanceOf(to) == 0) {\r\n                HodlingStartTime[to] = firstaugust;\r\n        }\r\n        if (from != owner() && to != owner() && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            \r\n            if (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {\r\n                require(amount <= _maxTxAmount, \"Anti-dump enabled: Token amount exceeds the max amount.\");\r\n            }\r\n            if ( balanceOf(from) == 0 ) {\r\n                HodlingStartTime[from] = block.timestamp;\r\n            }\r\n            if ( from != address(_migrationWallet) && balanceOf(to) == 0 ) {\r\n                 HodlingStartTime[to] = block.timestamp;\r\n            }\r\n            if (to != address(uniswapV2Router) && antiDumpEnabled) {\r\n                require(amount <= _maxTxAmount, \"Anti-dump enabled: Token amount exceeds the max amount.\");\r\n                require(buy_AllowedTime[to] < block.timestamp, \"Anti-bots enabled: The waiting period is 1 minute\");\r\n                buy_AllowedTime[to] = block.timestamp + (1 minutes);\r\n                isTrade = true;\r\n                _liquidityFee = _buyLiquidityFee; \r\n                _taxFee = _buyTaxFee;\r\n            }\r\n            if (from != uniswapV2Pair && to != address(uniswapV2Pair) && antiDumpEnabled) {\r\n                require(amount <= _maxTxAmount, \"Anti-dump enabled: Token amount exceeds the max amount.\");\r\n\r\n                if (AllowedExchanges[from] || AllowedExchanges[to]) {\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = false;\r\n                    _liquidityFee = _exchangeLiquidityFee; \r\n                    _taxFee = _exchangeTaxFee;\r\n                }\r\n                else if (AllowedBridges[from]) {\r\n                        HodlingStartTime[from] = block.timestamp; \r\n                        isTrade = false;\r\n                        _liquidityFee = BridgeLiquidityFee[from];\r\n                        _taxFee = BridgeTaxFee[from];\r\n                }\r\n                else if (AllowedBridges[to]) {\r\n                        HodlingStartTime[from] = block.timestamp;\r\n                        isTrade = false;\r\n                        _liquidityFee = BridgeLiquidityFee[to];\r\n                        _taxFee = BridgeTaxFee[to];\r\n                }\r\n                else {\r\n                        HodlingStartTime[from] = block.timestamp;\r\n                        isTrade = false;\r\n                        _liquidityFee = _transferLiquidityFee; \r\n                        _taxFee = _transferTaxFee;\r\n                }\r\n            }\r\n            if (from != uniswapV2Pair && to == address(uniswapV2Pair) && antiDumpEnabled) {\r\n                require(sell_AllowedTime[from] < block.timestamp);\r\n                if(firstsell[from] + _sell_Window < block.timestamp){\r\n                sellnumber[from] = 0;\r\n                }\r\n\r\n                if (sellnumber[from] == 0 && amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1)) {\r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1));\r\n                    sellnumber[from]++;\r\n                    firstsell[from] = block.timestamp;\r\n                    sell_AllowedTime[from] = block.timestamp + _sell_InitialWait;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeA;\r\n                    _taxFee = _sellTaxFeeA;\r\n                }\r\n                else if (sellnumber[from] == 0) {\r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact2));\r\n                    sellnumber[from]++;\r\n                    firstsell[from] = block.timestamp;\r\n                    sell_AllowedTime[from] = block.timestamp + _sell_FurtherWait;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeB;\r\n                    _taxFee = _sellTaxFeeB;\r\n                }\r\n                else if (sellnumber[from] < _maxSellAttempts && amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1)) { \r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1));\r\n                    sellnumber[from]++;\r\n                    sell_AllowedTime[from] = block.timestamp + _sell_InitialWait;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeA;\r\n                    _taxFee = _sellTaxFeeA; \r\n                }\r\n                else if (sellnumber[from] < _maxSellAttempts) { \r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact2));\r\n                    sellnumber[from]++;\r\n                    sell_AllowedTime[from] = block.timestamp + _sell_FurtherWait;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeB;\r\n                    _taxFee = _sellTaxFeeB;\r\n                }\r\n                else if (sellnumber[from] == _maxSellAttempts && amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1)) {\r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact1));\r\n                    sellnumber[from]++;\r\n                    sell_AllowedTime[from] = firstsell[from] + _sell_Window;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeA;\r\n                    _taxFee = _sellTaxFeeA;\r\n                }\r\n                else if (sellnumber[from] == _maxSellAttempts) {\r\n                    require (amount <= balanceOf(uniswapV2Pair).div(10000).mul(_impact2));\r\n                    sellnumber[from]++;\r\n                    sell_AllowedTime[from] = firstsell[from] + _sell_Window;\r\n                    HodlingStartTime[from] = block.timestamp;\r\n                    isTrade = true;\r\n                    _liquidityFee = _sellLiquidityFeeB;\r\n                    _taxFee = _sellTaxFeeB;\r\n                }   \r\n                // setFee(sellnumber[from]);\r\n            }\r\n        }\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if (contractTokenBalance >= _maxTxAmount)\r\n        {\r\n           contractTokenBalance = _maxTxAmount;\r\n        }\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            ProjectFundingEnabled\r\n        ) {\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || !feesEnabled){\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n        restoreAllFee;\r\n    }\r\n        function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n        // check tokens in contract\r\n        uint256 tokensbeforeSwap = contractTokenBalance;\r\n        \r\n        // swap tokens for BNB\r\n        swapTokensForBNB(tokensbeforeSwap); // <- this breaks the BNB -> swap when swap+liquify is triggered\r\n        \r\n        uint256 BalanceBNB = address(this).balance;\r\n\r\n        // calculate the percentages\r\n        uint256 marketingBNB = BalanceBNB.div(100).mul(_marketingFee);\r\n        uint256 buybackBNB = BalanceBNB.div(100).mul(_buybackFee);      \r\n\r\n        //pay the marketing wallet\r\n        payable(_marketingWallet).transfer(marketingBNB);\r\n\r\n        //pay the buyback wallet\r\n        payable(_buybackWallet).transfer(buybackBNB);\r\n\r\n        emit SwapAndLiquify(tokensbeforeSwap, _marketingWallet, marketingBNB, _buybackWallet, buybackBNB);  \r\n\r\n    }\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, recipient);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, recipient);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, recipient);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, recipient);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, address to) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount, to);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, address to) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount, to);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        if (isTrade) {\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n            if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity); \r\n        } else {\r\n            _rOwned[address(_communityRewardsWallet)] = _rOwned[address(_communityRewardsWallet)].add(rLiquidity);\r\n            emit TokensSentToCommunityWallet(_communityRewardsWallet, rLiquidity);\r\n\r\n            if(_isExcluded[address(_communityRewardsWallet)])\r\n            _tOwned[address(_communityRewardsWallet)] = _tOwned[address(_communityRewardsWallet)].add(tLiquidity); \r\n            emit TokensSentToCommunityWallet(_communityRewardsWallet, tLiquidity);\r\n        }\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount, address to) private view returns (uint256) {\r\n        if (startDate > block.timestamp || _taxFee == 0 || to != address(uniswapV2Pair)) {\r\n            return _amount.mul(_taxFee).div(\r\n                10**_decimals\r\n            );\r\n        }\r\n        return _amount.mul(_taxFee).div(\r\n            10**_decimals\r\n        );\r\n    }\r\n    \r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**_decimals\r\n        );\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        \r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function checkAntiDumpEnabled() public view returns (bool) {\r\n    return antiDumpEnabled;\r\n    }\r\n    function A_setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() { \r\n    _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n    emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n    function E1_enableFees(bool truefalse) external onlyOwner() {\r\n        feesEnabled = truefalse;\r\n    }\r\n    function E2_enable_ProjectFunding(bool truefalse) public onlyOwner {\r\n        ProjectFundingEnabled = truefalse;\r\n        emit ProjectFundingEnabledUpdated(truefalse);\r\n    }\r\n    function E3_enableAntiDump(bool onoff) external onlyOwner() {\r\n        antiDumpEnabled = onoff;\r\n    }\r\n    function E4_enableTrading(bool truefalse) external onlyOwner() {\r\n        tradingEnabled = truefalse;\r\n    }\r\n    function F01_setMarketingFee(uint256 marketingfee) external onlyOwner() {\r\n        _marketingFee = marketingfee;\r\n    }\r\n    function F02_setBuyBackfee(uint256 buybackfee) external onlyOwner() {\r\n        _buybackFee = buybackfee;\r\n    }\r\n    function F06_setBuyTaxfee(uint256 buyTaxFee) external onlyOwner() {\r\n        _buyTaxFee = buyTaxFee;\r\n    }\r\n    function F07_setTaxFee(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n    function F08_setProjectFee(uint256 ProjectFee) external onlyOwner() {\r\n        _liquidityFee = ProjectFee;\r\n    }\r\n    function F09_setSellTaxFeeA(uint256 sellTaxFeeA) external onlyOwner() {\r\n        _sellTaxFeeA = sellTaxFeeA;\r\n    }\r\n    function F10_setSellTaxFeeB(uint256 sellTaxFeeB) external onlyOwner() {\r\n        _sellTaxFeeB = sellTaxFeeB;\r\n    }\r\n    function F11_setTransferTaxFee(uint256 transferTaxFee) external onlyOwner() {\r\n        _transferTaxFee = transferTaxFee;\r\n    }\r\n    function F12_setBuyProjectFee(uint256 buyProjectFee) external onlyOwner() {\r\n        _buyLiquidityFee = buyProjectFee;\r\n    }\r\n    function F13_setSellProjectFeeA(uint256 sellProjectFeeA) external onlyOwner() {\r\n        _sellLiquidityFeeA = sellProjectFeeA;\r\n    }\r\n    function F14_setSellProjectFeeB(uint256 sellProjectFeeB) external onlyOwner() {\r\n        _sellLiquidityFeeB = sellProjectFeeB;\r\n    }\r\n    function F15_setTransferProjectFee(uint256 transferProjectFee) external onlyOwner() {\r\n        _transferLiquidityFee = transferProjectFee;\r\n    }\r\n    function F16_setExchangeTaxFee(uint256 exchangeTaxFee) external onlyOwner() {\r\n        _exchangeTaxFee = exchangeTaxFee;\r\n    }\r\n    function F17_setExchangeProjectFee(uint256 exchangeProjectFee) external onlyOwner() {\r\n        _exchangeLiquidityFee = exchangeProjectFee;\r\n    }\r\n    function I1_setImpact1(uint256 impact1) external onlyOwner {\r\n        _impact1 = impact1;\r\n    }\r\n    function I2_setImpact2(uint256 impact2) external onlyOwner {\r\n        _impact2 = impact2;\r\n    }\r\n    function I3_setMaxSellAttempts(uint256 maxSellAttempts) external onlyOwner() {\r\n        _maxSellAttempts = maxSellAttempts;\r\n    }\r\n    function I4_setSellWindow(uint256 sell_Window) external onlyOwner() {\r\n        _sell_Window = sell_Window;\r\n    }\r\n    function I5_setSellInitialWait(uint256 sell_InitialWait) external onlyOwner() {\r\n        _sell_InitialWait = sell_InitialWait;\r\n    }\r\n    function I6_setSellFurtherWait(uint256 sell_FurtherWait) external onlyOwner() {\r\n        _sell_FurtherWait = sell_FurtherWait;\r\n    }\r\n    function S01_includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    function S02_excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    function S03_includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n        function S04_excludeFromReward(address account) public onlyOwner() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    function S05_addToBlacklist(address _address) public onlyOwner {\r\n        require(!_isBlacklisted[_address], \"Address is already blacklisted\");\r\n        _isBlacklisted[_address] = true;\r\n    }\r\n    function S06_removeFromBlacklist(address _address) public onlyOwner {\r\n        require(_isBlacklisted[_address], \"Address is already whitelisted\");\r\n        _isBlacklisted[_address] = false;\r\n    }\r\n    function S07_addAllowedExchange(address _address) public onlyOwner {\r\n        require(!AllowedExchanges[_address], \"Cannot add Exchange, it is already in the list\");\r\n        AllowedExchanges[_address] = true;\r\n    }\r\n    function S08_removeAllowedExchange(address _address) public onlyOwner {\r\n        require(AllowedExchanges[_address], \"Cannot remove Exchange, it is not in the list \");\r\n        AllowedExchanges[_address] = false;\r\n    }\r\n    function S09_isAllowedExchange(address _address) public view returns(bool) {\r\n        return AllowedExchanges[_address];\r\n    }\r\n    function S10_addBridge(address _address, bool Allowed_Bridges, uint256 liq_fee, uint256 tax_fee) public onlyOwner {\r\n        AllowedBridges[_address] = Allowed_Bridges;\r\n        BridgeLiquidityFee[_address] = liq_fee;\r\n        BridgeTaxFee[_address] = tax_fee;\r\n    }\r\n    function S11_removeBridge(address _address) public onlyOwner {\r\n        delete AllowedBridges[_address];\r\n        delete BridgeLiquidityFee[_address];\r\n        delete BridgeTaxFee[_address];\r\n    }\r\n    function W1_setMarketingWallet(address _address) public onlyOwner() {\r\n        _marketingWallet = _address;\r\n    }\r\n    function W2_setBuybackWallet(address _address) public onlyOwner() {\r\n        _buybackWallet = _address;\r\n    }\r\n    function W3_setCommunityrewardsWallet(address _address) public onlyOwner() {\r\n        _communityRewardsWallet = _address;\r\n    }\r\n    function W3_setMigrationsWallet(address _address) public onlyOwner() {\r\n        _migrationWallet = _address;\r\n    }\r\n    function getAllowedBridges(address _address) public view returns(bool) {\r\n        return AllowedBridges[_address];\r\n    }\r\n    function getBridgeLiquidityFee(address _address) public view returns(uint256) {\r\n        return BridgeLiquidityFee[_address];\r\n    }\r\n    function getBridgeTaxFee(address _address) public view returns(uint256) {\r\n        return BridgeTaxFee[_address];\r\n    }\r\n    function get_HodlingDuration(address account) public view returns(string memory, uint256, uint256) {\r\n        require (balanceOf(account) > 0, \"Account has no tokens\");\r\n        uint256 HodlingInSecs = block.timestamp - HodlingStartTime[account];\r\n        string memory Message = \"Hodling time measured in Seconds and in Days. Must own tokens!\";\r\n        uint256 HodlingDays = HodlingInSecs / 1 days;\r\n        return (Message, HodlingInSecs, HodlingDays);\r\n    }\r\n   \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ProjectFundingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"address01\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount01\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"address02\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount02\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSentToCommunityWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"A_setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"truefalse\",\"type\":\"bool\"}],\"name\":\"E1_enableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"truefalse\",\"type\":\"bool\"}],\"name\":\"E2_enable_ProjectFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"E3_enableAntiDump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"truefalse\",\"type\":\"bool\"}],\"name\":\"E4_enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingfee\",\"type\":\"uint256\"}],\"name\":\"F01_setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buybackfee\",\"type\":\"uint256\"}],\"name\":\"F02_setBuyBackfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"}],\"name\":\"F06_setBuyTaxfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"F07_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectFee\",\"type\":\"uint256\"}],\"name\":\"F08_setProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFeeA\",\"type\":\"uint256\"}],\"name\":\"F09_setSellTaxFeeA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFeeB\",\"type\":\"uint256\"}],\"name\":\"F10_setSellTaxFeeB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferTaxFee\",\"type\":\"uint256\"}],\"name\":\"F11_setTransferTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyProjectFee\",\"type\":\"uint256\"}],\"name\":\"F12_setBuyProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellProjectFeeA\",\"type\":\"uint256\"}],\"name\":\"F13_setSellProjectFeeA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellProjectFeeB\",\"type\":\"uint256\"}],\"name\":\"F14_setSellProjectFeeB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferProjectFee\",\"type\":\"uint256\"}],\"name\":\"F15_setTransferProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeTaxFee\",\"type\":\"uint256\"}],\"name\":\"F16_setExchangeTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeProjectFee\",\"type\":\"uint256\"}],\"name\":\"F17_setExchangeProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"impact1\",\"type\":\"uint256\"}],\"name\":\"I1_setImpact1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"impact2\",\"type\":\"uint256\"}],\"name\":\"I2_setImpact2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellAttempts\",\"type\":\"uint256\"}],\"name\":\"I3_setMaxSellAttempts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sell_Window\",\"type\":\"uint256\"}],\"name\":\"I4_setSellWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sell_InitialWait\",\"type\":\"uint256\"}],\"name\":\"I5_setSellInitialWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sell_FurtherWait\",\"type\":\"uint256\"}],\"name\":\"I6_setSellFurtherWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProjectFundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"S01_includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"S02_excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"S03_includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"S04_excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S05_addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S06_removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S07_addAllowedExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S08_removeAllowedExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S09_isAllowedExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Allowed_Bridges\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liq_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax_fee\",\"type\":\"uint256\"}],\"name\":\"S10_addBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"S11_removeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"W1_setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"W2_setBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"W3_setCommunityrewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"W3_setMigrationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Z_transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityRewardsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_exchangeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_exchangeTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_impact1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_impact2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellAttempts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_migrationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFeeA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFeeB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFeeA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFeeB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sell_FurtherWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sell_InitialWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sell_Window\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAntiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllowedBridges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBridgeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBridgeTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_HodlingDuration\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HyperchainX", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c54f2c7230f8c26a94a0f80b74c055c50aae1b79646a73897bb21e5c36711941"}