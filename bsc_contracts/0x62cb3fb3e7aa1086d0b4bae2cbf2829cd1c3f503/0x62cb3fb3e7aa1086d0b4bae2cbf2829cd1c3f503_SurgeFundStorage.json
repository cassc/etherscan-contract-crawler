{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IOldFund {\r\n    function allVictims(uint i) external view returns (address);\r\n    function victims(address victim) external view returns (\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool);\r\n}\r\n\r\ncontract SurgeFundStorage {\r\n\r\n    // Old Fund\r\n    IOldFund private constant oldFund = IOldFund(0x0dC64c73eD08e683BDd80bb6b4F9E617BA7d3798);\r\n\r\n    // Index In Iterating The Old Fund\r\n    uint256 private oldFundIndex;\r\n\r\n    // List Of Victims, They're Total Claim And If They Have Been Repaid\r\n    address[] public allVictims;\r\n    address[] public remainingVictims;\r\n    address[] public repaidVictims;\r\n    mapping ( address => uint256 ) public victimOwed;\r\n    mapping ( address => uint256 ) public victimTotalOwed;\r\n    mapping ( address => uint256 ) public victimIndex;\r\n\r\n    // Total BNB Owed And Total Repaid\r\n    uint256 public totalOwed;\r\n    uint256 public totalRepaid;\r\n\r\n    // Tier Starting Points\r\n    uint256[] public tierStart;\r\n    uint256[] public tiers;\r\n\r\n    // number of tiers\r\n    uint256 public constant nTiers = 8;\r\n\r\n    // Donation Event\r\n    event Donation(address user, uint256 value);\r\n    event Repaid(address user);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() {\r\n\r\n        // init starting tiers\r\n        tierStart = new uint256[](nTiers);\r\n        tierStart[0] = 0;\r\n        tierStart[1] = 20;\r\n        tierStart[2] = 200;\r\n        tierStart[3] = 500;\r\n        tierStart[4] = 1000;\r\n        tierStart[5] = 3000;\r\n        tierStart[6] = 5000;\r\n        tierStart[7] = 7000;\r\n\r\n        // init current tiers\r\n        tiers = new uint256[](nTiers);\r\n        tiers[0] = tierStart[0];\r\n        tiers[1] = tierStart[1];\r\n        tiers[2] = tierStart[2];\r\n        tiers[3] = tierStart[3];\r\n        tiers[4] = tierStart[4];\r\n        tiers[5] = tierStart[5];\r\n        tiers[6] = tierStart[6];\r\n        tiers[7] = tierStart[7];\r\n\r\n        // init transfer\r\n        emit Transfer(address(0), address(0), 0);\r\n    }\r\n\r\n    function updateVictims(uint nVictims) external {\r\n        for (uint i = 0; i < nVictims;) {\r\n            address victim_ = oldFund.allVictims(oldFundIndex);\r\n            (,,uint claim,,,) = oldFund.victims(victim_);\r\n            claim = claim / 420;\r\n            if (victimOwed[victim_] == 0 && claim > 0) {\r\n                victimIndex[victim_] = remainingVictims.length;\r\n                allVictims.push(victim_);\r\n                remainingVictims.push(victim_);\r\n            }\r\n            unchecked {\r\n                victimTotalOwed[victim_] += claim;\r\n                victimOwed[victim_] += claim;\r\n                totalOwed += claim;\r\n\r\n                ++i;\r\n                ++oldFundIndex;\r\n            }\r\n            emit Transfer(address(0), victim_, claim);\r\n        }\r\n    }\r\n\r\n    function distribute() external {\r\n        _distribute();\r\n    }\r\n\r\n    function donate() external payable {\r\n        emit Donation(msg.sender, msg.value);\r\n        _distribute();\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Donation(msg.sender, msg.value);\r\n        _distribute();\r\n    }\r\n\r\n    function withdrawLostFunds() external {\r\n        (bool s,) = payable(address(oldFund)).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    function optOut(uint256 amount) external {\r\n        require(\r\n            victimOwed[msg.sender] > 0,\r\n            'Non Victim'\r\n        );\r\n        if (amount > victimOwed[msg.sender]) {\r\n            amount = victimOwed[msg.sender];\r\n        }\r\n        victimOwed[msg.sender] -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n        emit Donation(msg.sender, amount);\r\n    }\r\n\r\n    function fetchAllVictims() external view returns (address[] memory) {\r\n        return allVictims;\r\n    }\r\n\r\n    function fetchAllRemainingVictims() external view returns (address[] memory) {\r\n        return remainingVictims;\r\n    }\r\n\r\n    function fetchAllRepaidVictims() external view returns (address[] memory) {\r\n        return repaidVictims;\r\n    }\r\n\r\n    function nVictimsRepaid() external view returns (uint256) {\r\n        return repaidVictims.length;\r\n    }\r\n    \r\n    function nVictimsRemaining() external view returns (uint256) {\r\n        return remainingVictims.length;\r\n    }\r\n\r\n    function nVictimsTotal() external view returns (uint256) {\r\n        return allVictims.length;\r\n    } \r\n\r\n    function balanceOf(address user) external view returns (uint256) {\r\n        return victimOwed[user];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalOwed - totalRepaid;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return 'SurgeFund Receipt';\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return 'PendingBNB';\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function isValidTier(uint tier) public view returns (bool) {\r\n        if (tiers[tier] >= allVictims.length) {\r\n            return false;\r\n        } else if (tier < nTiers -1 ){\r\n            if (tiers[tier] >= tierStart[tier+1]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function numValidTiers() public view returns (uint256 total) {\r\n        for (uint i = 0; i < nTiers;) {\r\n            if (isValidTier(i)) {\r\n                total++;\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function _distribute() internal {\r\n\r\n        uint256 each = address(this).balance / numValidTiers();\r\n\r\n        for (uint i = 0; i < nTiers;) {\r\n            \r\n            uint currentAmount = each;\r\n            while (currentAmount > 0) {\r\n\r\n                if (!isValidTier(i)) {\r\n                    break;\r\n                }\r\n\r\n                address victim = allVictims[tiers[i]];\r\n                uint256 owed = victimOwed[victim];\r\n                if (owed == 0) {\r\n                    tiers[i]++;\r\n                    continue;\r\n                }\r\n\r\n                if (currentAmount >= owed) {\r\n\r\n                    delete victimOwed[victim];\r\n                    unchecked {\r\n                        currentAmount -= owed;\r\n                        totalRepaid += owed;\r\n                    }\r\n                    _send(victim, owed);\r\n                    repaidVictims.push(victim);\r\n                    emit Repaid(victim);\r\n\r\n                    address lastVictim = remainingVictims[remainingVictims.length - 1];\r\n                    remainingVictims[victimIndex[victim]] = lastVictim;\r\n                    victimIndex[lastVictim] = victimIndex[victim];\r\n                    remainingVictims.pop();\r\n                    delete victimIndex[victim];\r\n\r\n                    tiers[i]++;\r\n                } else {\r\n\r\n                    uint amt = currentAmount;\r\n                    victimOwed[victim] -= amt;\r\n                    unchecked {\r\n                        totalRepaid += amt;\r\n                    }\r\n                    delete currentAmount;\r\n                    _send(victim, amt);\r\n                }\r\n\r\n            }\r\n\r\n            unchecked { ++i; }\r\n        }\r\n\r\n    }\r\n\r\n    function _send(address to, uint amount) internal {\r\n        if (!isContract(to) && amount > 0) {\r\n            (bool s,) = payable(to).call{value: amount}(\"\");\r\n            if (s) {\r\n                emit Transfer(to, address(0), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContract(address account) public view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVictims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllRemainingVictims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllRepaidVictims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllVictims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"isValidTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nVictimsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nVictimsRepaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nVictimsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numValidTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"optOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingVictims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"repaidVictims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRepaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nVictims\",\"type\":\"uint256\"}],\"name\":\"updateVictims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"victimIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"victimOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"victimTotalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLostFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SurgeFundStorage", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56d40baba990e5e267110e62e0a28311bbaf60e848cb9cf14df63403046d0ac8"}