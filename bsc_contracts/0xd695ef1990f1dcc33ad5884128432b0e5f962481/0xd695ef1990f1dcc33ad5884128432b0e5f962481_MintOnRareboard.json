{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintOnRareboard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n\\n/**\\n * @title Minter used on https://rareboard.com to track all initiated mints and the due commission.\\n *\\n * @notice This contract is build to allow the integration of all sorts of ERC721 contracts under a single interface.\\n * Commission is not collected up-front to not require initial funding of this contract.\\n * Pending commission can be inspected using {pendingCommissions} or {totalPendingCommission}.\\n *\\n * @author Fab\\n */\\ncontract MintOnRareboard is ERC721Holder, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    enum MinterType {\\n        NoArg,\\n        Amount,\\n        ToAmount,\\n        AmountTo\\n    }\\n\\n    enum PriceSourceType {\\n        NoArg,\\n        User\\n    }\\n\\n    struct Collection {\\n        address token;\\n        address minter;\\n        MinterType minterType;\\n        bytes4 mintSelector;\\n        PriceSourceType priceSourceType;\\n        address priceSource;\\n        bytes4 priceSelector;\\n        address maxSupplySource;\\n        bytes4 maxSupplySelector;\\n    }\\n\\n    /// @notice Maximum commission in base points\\n    uint256 public constant COMMISSION_BPS_MAX = 1000; // 10%\\n\\n    /// @notice Divisor base for commission (base points)\\n    uint256 public constant COMMISSION_BASE = 10000;\\n\\n    /// @notice Commission in base points (100bps =^= 1%)\\n    uint256 public commission = 500; // 5%\\n\\n    /// @notice Total amount of commissions in WEI which were payed for by projects\\n    uint256 public totalPayedCommisions;\\n\\n    /// @notice Collection details\\n    mapping(address => Collection) public collectionDetails;\\n\\n    /// @notice Pending commission in WEI due per collection\\n    mapping(address => uint256) public pendingCommissions;\\n\\n    /// @notice Tokens minted per collection.\\n    mapping(address => uint256) public minted;\\n\\n    /// @notice Mintable collections.\\n    address[] public collections;\\n    \\n    // used with minting modifiers\\n    address private receivableTokenAddress;\\n    uint256[] private receivedTokenIds;\\n\\n    event Minted(\\n        address indexed collection,\\n        uint256 amount,\\n        address indexed buyer,\\n        uint256 price,\\n        uint256 commission\\n    );\\n\\n    event PendingCommissionUpdated(\\n        address indexed collection,\\n        uint256 oldCommission,\\n        uint256 newCommission\\n    );\\n\\n    event CollectionAdded(address indexed collection);\\n    event CollectionUpdated(address indexed collection);\\n    event CommissionChanged(uint256 commission);\\n\\n    // Recover NFT tokens sent by accident\\n    event NonFungibleTokenRecovery(\\n        address indexed token,\\n        uint256 indexed tokenId\\n    );\\n\\n    // Recover ERC20 tokens sent by accident\\n    event TokenRecovery(address indexed token, uint256 amount);\\n\\n    constructor() {\\n        emit CommissionChanged(commission);\\n    }\\n\\n    modifier validCollection(address _collection) {\\n        require(\\n            collectionDetails[_collection].mintSelector != 0,\\n            \\\"Collection not supported\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier minting(address _collection) {\\n        require(receivedTokenIds.length == 0, \\\"Invalid state\\\");\\n        receivableTokenAddress = _collection;\\n        _;\\n        receivableTokenAddress = address(0);\\n        require(receivedTokenIds.length == 0, \\\"Invalid state\\\");\\n    }\\n\\n    modifier onlyWhenMinting(address _collection) {\\n        require(receivableTokenAddress == _collection, \\\"Only when minting\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @notice Mint `_amount` tokens of `_collection` to `_to` and registers the commission due.\\n     * @dev Pricing can be dependent on `_to`.\\n     * @param _collection: the token\\n     * @param _to: the address to mint the tokens for\\n     * @param _amount: the amount of tokens\\n     */\\n    function mint(\\n        address _collection,\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        payable\\n        validCollection(_collection)\\n        minting(_collection)\\n        nonReentrant\\n    {\\n        Collection memory collection = collectionDetails[_collection];\\n        uint256 price = _priceFor(collection, _to);\\n        uint256 cost = price * _amount;\\n        uint256 _commission = (cost * commission) / COMMISSION_BASE;\\n\\n        require(cost == msg.value, \\\"Value sent != cost\\\");\\n\\n        if (collection.minterType == MinterType.NoArg) {\\n            for (uint256 i = 0; i < _amount; ++i) {\\n                collection.minter.functionCallWithValue(\\n                    abi.encodeWithSelector(collection.mintSelector),\\n                    price\\n                );\\n            }\\n            transferedReceived(_collection, _to, _amount);\\n        } else if (collection.minterType == MinterType.Amount) {\\n            collection.minter.functionCallWithValue(\\n                abi.encodeWithSelector(collection.mintSelector, _amount),\\n                cost\\n            );\\n            transferedReceived(_collection, _to, _amount);\\n        } else if (collection.minterType == MinterType.ToAmount) {\\n            collection.minter.functionCallWithValue(\\n                abi.encodeWithSelector(collection.mintSelector, _to, _amount),\\n                cost\\n            );\\n        } else if (collection.minterType == MinterType.AmountTo) {\\n            collection.minter.functionCallWithValue(\\n                abi.encodeWithSelector(collection.mintSelector, _amount, _to),\\n                cost\\n            );\\n        } else {\\n            revert(\\\"Unknown minterType\\\");\\n        }\\n\\n        uint256 oldCommissions = pendingCommissions[_collection];\\n        uint256 newCommissions = oldCommissions + _commission;\\n        pendingCommissions[_collection] = newCommissions;\\n        minted[_collection] += _amount;\\n\\n        emit Minted(_collection, _amount, _to, cost, _commission);\\n        emit PendingCommissionUpdated(\\n            _collection,\\n            oldCommissions,\\n            newCommissions\\n        );\\n    }\\n\\n    /**\\n     * @notice Add a new collection to be mintable.\\n     * @param _collection: token address\\n     * @param _minter: contract with minting function\\n     * @param _minterType: type of minting function\\n     * @param _minterSiganture: mint signature i.e. 'mint(address,uint256)'\\n     * @param _priceSource: contract with price function\\n     * @param _priceSourceType: type of price function\\n     * @param _priceSignature: price signature i.e. 'price(address)'\\n     * @param _maxSupplySource: contract with maxSupply function\\n     * @param _maxSupplySignature: maxSupply signature i.e. 'maxSupply()'\\n     */\\n    function addCollection(\\n        address _collection,\\n        address _minter,\\n        MinterType _minterType,\\n        string calldata _minterSiganture,\\n        address _priceSource,\\n        PriceSourceType _priceSourceType,\\n        string calldata _priceSignature,\\n        address _maxSupplySource,\\n        string calldata _maxSupplySignature\\n    ) external onlyOwner {\\n        require(\\n            collectionDetails[_collection].mintSelector == 0,\\n            \\\"Collection already added\\\"\\n        );\\n        collectionDetails[_collection] = Collection({\\n            token: _collection,\\n            minter: _minter,\\n            minterType: _minterType,\\n            mintSelector: getSelector(_minterSiganture),\\n            priceSource: _priceSource,\\n            priceSourceType: _priceSourceType,\\n            priceSelector: getSelector(_priceSignature),\\n            maxSupplySource: _maxSupplySource,\\n            maxSupplySelector: getSelector(_maxSupplySignature)\\n        });\\n        collections.push(_collection);\\n        emit CollectionAdded(_collection);\\n\\n        // check valid settings\\n        _priceFor(collectionDetails[_collection], msg.sender);\\n        _maxSupplyOf(collectionDetails[_collection]);\\n    }\\n\\n    /**\\n     * @notice Change collection configuration\\n     * @param _collection: token address\\n     * @param _minter: contract with minting function\\n     * @param _minterType: type of minting function\\n     * @param _minterSiganture: mint signature i.e. 'mint(address,uint256)'\\n     * @param _priceSource: contract with price function\\n     * @param _priceSourceType: type of price function\\n     * @param _priceSignature: price signature i.e. 'price(address)'\\n     * @param _maxSupplySource: contract with maxSupply function\\n     * @param _maxSupplySignature: maxSupply signature i.e. 'maxSupply()'\\n     */\\n    function updateCollection(\\n        address _collection,\\n        address _minter,\\n        MinterType _minterType,\\n        string calldata _minterSiganture,\\n        address _priceSource,\\n        PriceSourceType _priceSourceType,\\n        string calldata _priceSignature,\\n        address _maxSupplySource,\\n        string calldata _maxSupplySignature\\n    ) external onlyOwner validCollection(_collection) {\\n        collectionDetails[_collection] = Collection({\\n            token: _collection,\\n            minter: _minter,\\n            minterType: _minterType,\\n            mintSelector: getSelector(_minterSiganture),\\n            priceSource: _priceSource,\\n            priceSourceType: _priceSourceType,\\n            priceSelector: getSelector(_priceSignature),\\n            maxSupplySource: _maxSupplySource,\\n            maxSupplySelector: getSelector(_maxSupplySignature)\\n        });\\n        emit CollectionUpdated(_collection);\\n\\n        // check valid settings\\n        _priceFor(collectionDetails[_collection], msg.sender);\\n        _maxSupplyOf(collectionDetails[_collection]);\\n    }\\n\\n    /**\\n     * @notice Update commission rate to `_commissionBps`, only owner.\\n     * @param _commissionBps: commission in base points (100bps =^= 1%)\\n     */\\n    function updateCommission(uint256 _commissionBps) external onlyOwner {\\n        require(_commissionBps <= COMMISSION_BPS_MAX, \\\"Invalid commission\\\");\\n        commission = _commissionBps;\\n        emit CommissionChanged(_commissionBps);\\n    }\\n\\n    /**\\n     * @notice Pay the pending commission due to the minting of `_collection`, can not overpay.\\n     * @param _collection: the token address \\n     */\\n    function payCommissionsFor(address _collection)\\n        external\\n        payable\\n        validCollection(_collection)\\n        nonReentrant\\n    {\\n        uint256 oldCommissions = pendingCommissions[_collection];\\n        require(msg.value <= oldCommissions, \\\"Overpayed\\\");\\n\\n        uint256 newCommissions = oldCommissions - msg.value;\\n        pendingCommissions[_collection] = newCommissions;\\n        totalPayedCommisions += msg.value;\\n\\n        emit PendingCommissionUpdated(\\n            _collection,\\n            oldCommissions,\\n            newCommissions\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw all payed commissions, only callable by owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        Address.sendValue(payable(_msgSender()), address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverFungibleTokens(address _token) external onlyOwner {\\n        uint256 amountToRecover = IERC20(_token).balanceOf(address(this));\\n        require(amountToRecover != 0, \\\"Operations: No token to recover\\\");\\n\\n        IERC20(_token).safeTransfer(address(msg.sender), amountToRecover);\\n\\n        emit TokenRecovery(_token, amountToRecover);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover NFTs sent to the contract by mistake\\n     * @param _token: NFT token address\\n     * @param _tokenId: tokenId\\n     * @dev Callable by owner\\n     */\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        IERC721(_token).safeTransferFrom(\\n            address(this),\\n            address(msg.sender),\\n            _tokenId\\n        );\\n\\n        emit NonFungibleTokenRecovery(_token, _tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the price to mint token of `_collection` for `_user`.\\n     * @param _collection: token address\\n     * @param _user: user to mint for\\n     */\\n    function priceFor(address _collection, address _user)\\n        external\\n        view\\n        validCollection(_collection)\\n        returns (uint256)\\n    {\\n        return _priceFor(collectionDetails[_collection], _user);\\n    }\\n\\n    /**\\n     * @notice Returns the maximum amount of mintable tokens of `_collection`.\\n     * @param _collection: token address\\n     */\\n    function maxSupplyOf(address _collection)\\n        external\\n        view\\n        validCollection(_collection)\\n        returns (uint256)\\n    {\\n        return _maxSupplyOf(collectionDetails[_collection]);\\n    }\\n\\n    /**\\n     * @notice Returns the totalSupply of `_collection`.\\n     * @dev Tokens needs to implement {IERC721Enumerable}.\\n     * @param _collection: token address\\n     */\\n    function totalSupplyOf(address _collection)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return IERC721Enumerable(_collection).totalSupply();\\n    }\\n\\n    /** \\n     * @notice Returns the total number of minted tokens across all collections.\\n     */\\n    function totalMinted() external view returns (uint256 _minted) {\\n        for (uint256 i = 0; i < collections.length; ++i) {\\n            _minted += minted[collections[i]];\\n        }\\n    }\\n\\n    /** \\n     * @notice Returns the total amount of pending commissions across all collections.\\n     */\\n    function totalPendingCommission()\\n        external\\n        view\\n        returns (uint256 _pendingCommissions)\\n    {\\n        for (uint256 i = 0; i < collections.length; ++i) {\\n            _pendingCommissions += pendingCommissions[collections[i]];\\n        }\\n    }\\n\\n    /** \\n     * @notice Returns the total amount of commissions across all collections, pending and payed.\\n     */\\n    function totalCommission()\\n        external\\n        view\\n        returns (uint256 _totalCommissions)\\n    {\\n        _totalCommissions = totalPayedCommisions;\\n        for (uint256 i = 0; i < collections.length; ++i) {\\n            _totalCommissions += pendingCommissions[collections[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the number of collections, use with {collectionDetails} to enumerate.\\n     */\\n    function collectionsLength() external view returns (uint256) {\\n        return collections.length;\\n    }\\n\\n\\n    /**\\n     * @dev Called when tokens transfered via {IERC721-safeTransferFrom} to this contract.\\n     * Only allow transfers initiated by this contract in {mint} function.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) public override returns (bytes4) {\\n        // only allow receiving tokens when inside of mint function\\n        require(receivableTokenAddress == msg.sender, \\\"Only minting\\\");\\n        receivedTokenIds.push(tokenId);\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n\\n\\n    /**\\n     * @dev For contracts which don't support a destination address in mint function.\\n     * Transfer all tokens received during mint function via {onERC721Received} to `_to`.\\n     */\\n    function transferedReceived(\\n        address _collection,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyWhenMinting(_collection) {\\n        require(receivedTokenIds.length == _amount, \\\"State: received amount\\\");\\n\\n        for (uint256 i = 0; i < receivedTokenIds.length; ++i) {\\n            IERC721(_collection).safeTransferFrom(\\n                address(this),\\n                _to,\\n                receivedTokenIds[i]\\n            );\\n        }\\n\\n        delete receivedTokenIds;\\n    }\\n\\n    /**\\n     * @dev Use priceSource and priceSelecor to fetch minting price.\\n     */\\n    function _priceFor(Collection memory _collection, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_collection.priceSourceType == PriceSourceType.NoArg) {\\n            return\\n                abi.decode(\\n                    _collection.priceSource.functionStaticCall(\\n                        abi.encodeWithSelector(_collection.priceSelector)\\n                    ),\\n                    (uint256)\\n                );\\n        } else if (_collection.priceSourceType == PriceSourceType.User) {\\n            return\\n                abi.decode(\\n                    _collection.priceSource.functionStaticCall(\\n                        abi.encodeWithSelector(\\n                            _collection.priceSelector,\\n                            _user\\n                        )\\n                    ),\\n                    (uint256)\\n                );\\n        } else {\\n            revert(\\\"Unknown price type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Use maxSupplySource and maxSupplySelecor to fetch max supply.\\n     */\\n    function _maxSupplyOf(Collection memory _collection)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            abi.decode(\\n                _collection.maxSupplySource.functionStaticCall(\\n                    abi.encodeWithSelector(_collection.maxSupplySelector)\\n                ),\\n                (uint256)\\n            );\\n    }\\n\\n    /**\\n     * @dev Get function selector from signature.\\n     */\\n    function getSelector(string calldata _signature) internal pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(_signature)));\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"CommissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonFungibleTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCommission\",\"type\":\"uint256\"}],\"name\":\"PendingCommissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMISSION_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_BPS_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"enum MintOnRareboard.MinterType\",\"name\":\"_minterType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_minterSiganture\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_priceSource\",\"type\":\"address\"},{\"internalType\":\"enum MintOnRareboard.PriceSourceType\",\"name\":\"_priceSourceType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_priceSignature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_maxSupplySource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_maxSupplySignature\",\"type\":\"string\"}],\"name\":\"addCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"enum MintOnRareboard.MinterType\",\"name\":\"minterType\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"mintSelector\",\"type\":\"bytes4\"},{\"internalType\":\"enum MintOnRareboard.PriceSourceType\",\"name\":\"priceSourceType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"priceSource\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"priceSelector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"maxSupplySource\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"maxSupplySelector\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"maxSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"payCommissionsFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"priceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverFungibleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalCommissions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayedCommisions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingCommissions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"enum MintOnRareboard.MinterType\",\"name\":\"_minterType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_minterSiganture\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_priceSource\",\"type\":\"address\"},{\"internalType\":\"enum MintOnRareboard.PriceSourceType\",\"name\":\"_priceSourceType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_priceSignature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_maxSupplySource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_maxSupplySignature\",\"type\":\"string\"}],\"name\":\"updateCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionBps\",\"type\":\"uint256\"}],\"name\":\"updateCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintOnRareboard", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}