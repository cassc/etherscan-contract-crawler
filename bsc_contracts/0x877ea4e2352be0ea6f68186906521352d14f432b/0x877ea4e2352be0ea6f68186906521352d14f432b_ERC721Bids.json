{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/market/ERC721Bids.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../library/CollectionReader.sol\\\";\\nimport \\\"../royalty/ICollectionRoyaltyReader.sol\\\";\\nimport \\\"../payment-token/IPaymentTokenReader.sol\\\";\\nimport \\\"../market-settings/IMarketSettings.sol\\\";\\nimport \\\"./IERC721Bids.sol\\\";\\nimport \\\"./OperatorDelegation.sol\\\";\\n\\ncontract ERC721Bids is IERC721Bids, OperatorDelegation, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address marketSettings_) {\\n        _marketSettings = IMarketSettings(marketSettings_);\\n        _paymentTokenRegistry = IPaymentTokenReader(\\n            _marketSettings.paymentTokenRegistry()\\n        );\\n    }\\n\\n    IMarketSettings private _marketSettings;\\n    IPaymentTokenReader private _paymentTokenRegistry;\\n\\n    mapping(address => ERC721Bids) private _erc721Bids;\\n\\n    /**\\n     * @dev See {IERC721Bids-enterBidForToken}.\\n     */\\n    function enterBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        uint256 value,\\n        uint64 expireTimestamp,\\n        uint32 paymentTokenId,\\n        address bidder\\n    ) external {\\n        require(\\n            bidder == _msgSender() || isApprovedOperator(bidder, _msgSender()),\\n            \\\"sender not bidder or approved operator\\\"\\n        );\\n\\n        (bool isValid, string memory message) = _checkEnterBidAction(\\n            erc721Address,\\n            tokenId,\\n            value,\\n            expireTimestamp,\\n            paymentTokenId,\\n            bidder\\n        );\\n\\n        require(isValid, message);\\n\\n        _enterBidForToken(\\n            erc721Address,\\n            tokenId,\\n            value,\\n            expireTimestamp,\\n            paymentTokenId,\\n            bidder\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-enterBidForTokens}.\\n     */\\n    function enterBidForTokens(\\n        EnterBidInput[] calldata newBids,\\n        address bidder\\n    ) external {\\n        require(\\n            bidder == _msgSender() || isApprovedOperator(bidder, _msgSender()),\\n            \\\"sender not bidder or approved operator\\\"\\n        );\\n\\n        for (uint256 i = 0; i < newBids.length; i++) {\\n            address erc721Address = newBids[i].erc721Address;\\n            uint256 tokenId = newBids[i].tokenId;\\n            uint256 value = newBids[i].value;\\n            uint64 expireTimestamp = newBids[i].expireTimestamp;\\n            uint32 paymentTokenId = newBids[i].paymentTokenId;\\n\\n            (bool isValid, string memory message) = _checkEnterBidAction(\\n                erc721Address,\\n                tokenId,\\n                value,\\n                expireTimestamp,\\n                paymentTokenId,\\n                bidder\\n            );\\n\\n            if (isValid) {\\n                _enterBidForToken(\\n                    erc721Address,\\n                    tokenId,\\n                    value,\\n                    expireTimestamp,\\n                    paymentTokenId,\\n                    bidder\\n                );\\n            } else {\\n                emit EnterBidFailed(\\n                    erc721Address,\\n                    tokenId,\\n                    message,\\n                    _msgSender()\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-withdrawBidForToken}.\\n     */\\n    function withdrawBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder\\n    ) external {\\n        Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[bidder];\\n\\n        (bool isValid, string memory message) = _checkWithdrawBidAction(bid);\\n\\n        require(isValid, message);\\n\\n        _withdrawBidForToken(erc721Address, bid);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-withdrawBidForTokens}.\\n     */\\n    function withdrawBidForTokens(WithdrawBidInput[] calldata bids) external {\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            address erc721Address = bids[i].erc721Address;\\n            uint256 tokenId = bids[i].tokenId;\\n            address bidder = bids[i].bidder;\\n            Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[\\n                bidder\\n            ];\\n\\n            (bool isValid, string memory message) = _checkWithdrawBidAction(\\n                bid\\n            );\\n\\n            if (isValid) {\\n                _withdrawBidForToken(erc721Address, bid);\\n            } else {\\n                emit WithdrawBidFailed(\\n                    erc721Address,\\n                    tokenId,\\n                    message,\\n                    _msgSender()\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-acceptBidForToken}.\\n     */\\n    function acceptBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder,\\n        uint256 value\\n    ) external {\\n        Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[bidder];\\n        address tokenOwner = CollectionReader.tokenOwner(\\n            erc721Address,\\n            tokenId\\n        );\\n\\n        (bool isValid, string memory message) = _checkAcceptBidAction(\\n            erc721Address,\\n            bid,\\n            value,\\n            tokenOwner\\n        );\\n\\n        require(isValid, message);\\n\\n        _acceptBidForToken(erc721Address, bid, tokenOwner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-acceptBidForTokens}.\\n     */\\n    function acceptBidForTokens(AcceptBidInput[] calldata bids) external {\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            address erc721Address = bids[i].erc721Address;\\n            uint256 tokenId = bids[i].tokenId;\\n            address bidder = bids[i].bidder;\\n            uint256 value = bids[i].value;\\n            Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[\\n                bidder\\n            ];\\n            address tokenOwner = CollectionReader.tokenOwner(\\n                erc721Address,\\n                tokenId\\n            );\\n\\n            (bool isValid, string memory message) = _checkAcceptBidAction(\\n                erc721Address,\\n                bid,\\n                value,\\n                tokenOwner\\n            );\\n\\n            if (isValid) {\\n                _acceptBidForToken(erc721Address, bid, tokenOwner);\\n            } else {\\n                emit AcceptBidFailed(\\n                    erc721Address,\\n                    tokenId,\\n                    message,\\n                    _msgSender()\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-removeExpiredBids}.\\n     */\\n    function removeExpiredBids(RemoveExpiredBidInput[] calldata bids) external {\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            address erc721Address = bids[i].erc721Address;\\n            uint256 tokenId = bids[i].tokenId;\\n            address bidder = bids[i].bidder;\\n            Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[\\n                bidder\\n            ];\\n\\n            if (\\n                bid.expireTimestamp != 0 &&\\n                bid.expireTimestamp <= block.timestamp\\n            ) {\\n                _removeBid(erc721Address, tokenId, bidder);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev check if enter bid action is valid\\n     * if not valid, return the reason\\n     */\\n    function _checkEnterBidAction(\\n        address erc721Address,\\n        uint256 tokenId,\\n        uint256 value,\\n        uint64 expireTimestamp,\\n        uint32 paymentTokenId,\\n        address bidder\\n    ) private view returns (bool isValid, string memory message) {\\n        isValid = false;\\n\\n        if (!_marketSettings.isCollectionTradingEnabled(erc721Address)) {\\n            message = \\\"trading is not open\\\";\\n            return (isValid, message);\\n        }\\n        if (value == 0) {\\n            message = \\\"value cannot be 0\\\";\\n            return (isValid, message);\\n        }\\n        if (\\n            expireTimestamp - block.timestamp <\\n            _marketSettings.actionTimeOutRangeMin()\\n        ) {\\n            message = \\\"expire time below minimum\\\";\\n            return (isValid, message);\\n        }\\n        if (\\n            expireTimestamp - block.timestamp >\\n            _marketSettings.actionTimeOutRangeMax()\\n        ) {\\n            message = \\\"expire time above maximum\\\";\\n            return (isValid, message);\\n        }\\n        if (!_isAllowedPaymentToken(erc721Address, paymentTokenId)) {\\n            message = \\\"payment token not enabled\\\";\\n            return (isValid, message);\\n        }\\n        address paymentToken = _getPaymentTokenAddress(paymentTokenId);\\n        if (IERC20(paymentToken).balanceOf(bidder) < value) {\\n            message = \\\"insufficient balance\\\";\\n            return (isValid, message);\\n        }\\n        if (IERC20(paymentToken).allowance(bidder, address(this)) < value) {\\n            message = \\\"insufficient allowance\\\";\\n            return (isValid, message);\\n        }\\n        address tokenOwner = CollectionReader.tokenOwner(\\n            erc721Address,\\n            tokenId\\n        );\\n        if (tokenOwner == bidder) {\\n            message = \\\"token owner cannot bid\\\";\\n            return (isValid, message);\\n        }\\n\\n        isValid = true;\\n    }\\n\\n    /**\\n     * @dev enter a bid\\n     */\\n    function _enterBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        uint256 value,\\n        uint64 expireTimestamp,\\n        uint32 paymentTokenId,\\n        address bidder\\n    ) private {\\n        Bid memory bid = Bid(\\n            tokenId,\\n            value,\\n            bidder,\\n            expireTimestamp,\\n            paymentTokenId\\n        );\\n\\n        _erc721Bids[erc721Address].tokenIds.add(tokenId);\\n        _erc721Bids[erc721Address].bids[tokenId].bidders.add(bidder);\\n        _erc721Bids[erc721Address].bids[tokenId].bids[bidder] = bid;\\n\\n        emit TokenBidEntered(erc721Address, bidder, tokenId, bid, _msgSender());\\n    }\\n\\n    /**\\n     * @dev check if withdraw bid action is valid\\n     * if not valid, return the reason\\n     */\\n    function _checkWithdrawBidAction(\\n        Bid memory bid\\n    ) private view returns (bool isValid, string memory message) {\\n        isValid = false;\\n\\n        if (bid.bidder == address(0)) {\\n            message = \\\"bid does not exist\\\";\\n            return (isValid, message);\\n        }\\n\\n        if (\\n            bid.bidder != _msgSender() &&\\n            !isApprovedOperator(bid.bidder, _msgSender())\\n        ) {\\n            message = \\\"sender not bidder or approved operator\\\";\\n            return (isValid, message);\\n        }\\n\\n        isValid = true;\\n    }\\n\\n    /**\\n     * @dev withdraw a bid\\n     */\\n    function _withdrawBidForToken(\\n        address erc721Address,\\n        Bid memory bid\\n    ) private {\\n        _removeBid(erc721Address, bid.tokenId, bid.bidder);\\n\\n        emit TokenBidWithdrawn(\\n            erc721Address,\\n            bid.bidder,\\n            bid.tokenId,\\n            bid,\\n            _msgSender()\\n        );\\n    }\\n\\n    /**\\n     * @dev check if accept bid action is valid\\n     * if not valid, return the reason\\n     */\\n    function _checkAcceptBidAction(\\n        address erc721Address,\\n        Bid memory bid,\\n        uint256 value,\\n        address tokenOwner\\n    ) private view returns (bool isValid, string memory message) {\\n        isValid = false;\\n\\n        Status status = _getBidStatus(erc721Address, bid);\\n        if (status != Status.ACTIVE) {\\n            message = \\\"bid is not valid\\\";\\n            return (isValid, message);\\n        }\\n        if (value != bid.value) {\\n            message = \\\"accepting value differ from bid\\\";\\n            return (isValid, message);\\n        }\\n        if (\\n            tokenOwner != _msgSender() &&\\n            !isApprovedOperator(tokenOwner, _msgSender())\\n        ) {\\n            message = \\\"sender not owner or approved operator\\\";\\n            return (isValid, message);\\n        }\\n        if (\\n            !_isApprovedToTransferToken(erc721Address, bid.tokenId, tokenOwner)\\n        ) {\\n            message = \\\"transferred not approved\\\";\\n            return (isValid, message);\\n        }\\n        isValid = true;\\n    }\\n\\n    /**\\n     * @dev accept a bid\\n     */\\n    function _acceptBidForToken(\\n        address erc721Address,\\n        Bid memory bid,\\n        address tokenOwner\\n    ) private nonReentrant {\\n        (\\n            FundReceiver[] memory fundReceivers,\\n            ICollectionRoyaltyReader.RoyaltyAmount[] memory royaltyInfo,\\n            uint256 serviceFee\\n        ) = _getFundReceiversOfBid(erc721Address, bid, tokenOwner);\\n\\n        _sendFundToReceivers(bid.bidder, fundReceivers);\\n\\n        // Send token to bidder\\n        IERC721(erc721Address).safeTransferFrom(\\n            tokenOwner,\\n            bid.bidder,\\n            bid.tokenId\\n        );\\n\\n        _removeBid(erc721Address, bid.tokenId, bid.bidder);\\n\\n        emit TokenBidAccepted({\\n            erc721Address: erc721Address,\\n            seller: tokenOwner,\\n            tokenId: bid.tokenId,\\n            bid: bid,\\n            serviceFee: serviceFee,\\n            royaltyInfo: royaltyInfo,\\n            sender: _msgSender()\\n        });\\n    }\\n\\n    /**\\n     * @dev remove bid from storage\\n     */\\n    function _removeBid(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder\\n    ) private {\\n        if (_erc721Bids[erc721Address].bids[tokenId].bidders.contains(bidder)) {\\n            // Step 1: delete the bid and the address\\n            delete _erc721Bids[erc721Address].bids[tokenId].bids[bidder];\\n            _erc721Bids[erc721Address].bids[tokenId].bidders.remove(bidder);\\n\\n            // Step 2: if no bid left\\n            if (\\n                _erc721Bids[erc721Address].bids[tokenId].bidders.length() == 0\\n            ) {\\n                _erc721Bids[erc721Address].tokenIds.remove(tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev get list of fund receivers, amount, and payment token\\n     * Note:\\n     * List of receivers\\n     * - Seller of token\\n     * - Service fee receiver\\n     * - royalty receivers\\n     */\\n    function _getFundReceiversOfBid(\\n        address erc721Address,\\n        Bid memory bid,\\n        address tokenOwner\\n    )\\n        private\\n        view\\n        returns (\\n            FundReceiver[] memory fundReceivers,\\n            ICollectionRoyaltyReader.RoyaltyAmount[] memory royaltyInfo,\\n            uint256 serviceFee\\n        )\\n    {\\n        address paymentToken = _getPaymentTokenAddress(bid.paymentTokenId);\\n\\n        royaltyInfo = ICollectionRoyaltyReader(\\n            _marketSettings.royaltyRegsitry()\\n        ).royaltyInfo(erc721Address, bid.tokenId, bid.value);\\n\\n        fundReceivers = new FundReceiver[](royaltyInfo.length + 2);\\n\\n        uint256 amountToSeller = bid.value;\\n        for (uint256 i = 0; i < royaltyInfo.length; i++) {\\n            address royaltyReceiver = royaltyInfo[i].receiver;\\n            uint256 royaltyAmount = royaltyInfo[i].royaltyAmount;\\n\\n            fundReceivers[i + 2] = FundReceiver({\\n                account: royaltyReceiver,\\n                amount: royaltyAmount,\\n                paymentToken: paymentToken\\n            });\\n\\n            amountToSeller -= royaltyAmount;\\n        }\\n\\n        (address feeReceiver, uint256 feeAmount) = _marketSettings\\n            .serviceFeeInfo(bid.value);\\n        serviceFee = feeAmount;\\n\\n        fundReceivers[1] = FundReceiver({\\n            account: feeReceiver,\\n            amount: serviceFee,\\n            paymentToken: paymentToken\\n        });\\n\\n        amountToSeller -= serviceFee;\\n\\n        fundReceivers[0] = FundReceiver({\\n            account: tokenOwner,\\n            amount: amountToSeller,\\n            paymentToken: paymentToken\\n        });\\n    }\\n\\n    /**\\n     * @dev map payment token address\\n     * 0 is mapped to wrapped ether address.\\n     * For a given chain, wrapped ether represent it's\\n     * corresponding wrapped coin. e.g. WBNB for BSC, WFTM for FTM\\n     */\\n    function _getPaymentTokenAddress(\\n        uint32 paymentTokenId\\n    ) private view returns (address paymentToken) {\\n        if (paymentTokenId == 0) {\\n            paymentToken = _marketSettings.wrappedEther();\\n        } else {\\n            paymentToken = _paymentTokenRegistry.getPaymentTokenAddressById(\\n                paymentTokenId\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev send payment token\\n     */\\n    function _sendFund(\\n        address paymentToken,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(paymentToken != address(0), \\\"payment token can't be 0 address\\\");\\n        IERC20(paymentToken).safeTransferFrom(from, to, value);\\n    }\\n\\n    /**\\n     * @dev send funds to a list of receivers\\n     */\\n    function _sendFundToReceivers(\\n        address from,\\n        FundReceiver[] memory fundReceivers\\n    ) private {\\n        for (uint256 i; i < fundReceivers.length; i++) {\\n            _sendFund(\\n                fundReceivers[i].paymentToken,\\n                from,\\n                fundReceivers[i].account,\\n                fundReceivers[i].amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-getBidderTokenBid}.\\n     */\\n    function getBidderTokenBid(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder\\n    ) public view returns (BidStatus memory) {\\n        Bid memory bid = _erc721Bids[erc721Address].bids[tokenId].bids[bidder];\\n        Status status = _getBidStatus(erc721Address, bid);\\n\\n        address paymentToken = _paymentTokenRegistry.getPaymentTokenAddressById(\\n            bid.paymentTokenId\\n        );\\n\\n        return\\n            BidStatus({\\n                tokenId: bid.tokenId,\\n                value: bid.value,\\n                bidder: bid.bidder,\\n                expireTimestamp: bid.expireTimestamp,\\n                paymentToken: paymentToken,\\n                status: status\\n            });\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-getTokenBids}.\\n     */\\n    function getTokenBids(\\n        address erc721Address,\\n        uint256 tokenId\\n    ) public view returns (BidStatus[] memory bids) {\\n        uint256 bidderCount = _erc721Bids[erc721Address]\\n            .bids[tokenId]\\n            .bidders\\n            .length();\\n\\n        bids = new BidStatus[](bidderCount);\\n        for (uint256 i; i < bidderCount; i++) {\\n            address bidder = _erc721Bids[erc721Address]\\n                .bids[tokenId]\\n                .bidders\\n                .at(i);\\n            bids[i] = getBidderTokenBid(erc721Address, tokenId, bidder);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-getTokenHighestBid}.\\n     */\\n    function getTokenHighestBid(\\n        address erc721Address,\\n        uint256 tokenId\\n    ) public view returns (BidStatus memory highestBid) {\\n        uint256 bidderCount = _erc721Bids[erc721Address]\\n            .bids[tokenId]\\n            .bidders\\n            .length();\\n        for (uint256 i; i < bidderCount; i++) {\\n            address bidder = _erc721Bids[erc721Address]\\n                .bids[tokenId]\\n                .bidders\\n                .at(i);\\n            BidStatus memory bid = getBidderTokenBid(\\n                erc721Address,\\n                tokenId,\\n                bidder\\n            );\\n            if (bid.status == Status.ACTIVE && bid.value > highestBid.value) {\\n                highestBid = bid;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-numTokenWithBidsOfCollection}.\\n     */\\n    function numTokenWithBidsOfCollection(\\n        address erc721Address\\n    ) public view returns (uint256) {\\n        return _erc721Bids[erc721Address].tokenIds.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-getHighestBidsOfCollection}.\\n     */\\n    function getHighestBidsOfCollection(\\n        address erc721Address,\\n        uint256 from,\\n        uint256 size\\n    ) external view returns (BidStatus[] memory highestBids) {\\n        uint256 tokenCount = numTokenWithBidsOfCollection(erc721Address);\\n\\n        if (from < tokenCount && size > 0) {\\n            uint256 querySize = size;\\n            if ((from + size) > tokenCount) {\\n                querySize = tokenCount - from;\\n            }\\n            highestBids = new BidStatus[](querySize);\\n            for (uint256 i = 0; i < querySize; i++) {\\n                highestBids[i] = getTokenHighestBid({\\n                    erc721Address: erc721Address,\\n                    tokenId: _erc721Bids[erc721Address].tokenIds.at(i + from)\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Bids-getBidderBidsOfCollection}.\\n     */\\n    function getBidderBidsOfCollection(\\n        address erc721Address,\\n        address bidder,\\n        uint256 from,\\n        uint256 size\\n    ) external view returns (BidStatus[] memory bidderBids) {\\n        uint256 tokenCount = numTokenWithBidsOfCollection(erc721Address);\\n\\n        if (from < tokenCount && size > 0) {\\n            uint256 querySize = size;\\n            if ((from + size) > tokenCount) {\\n                querySize = tokenCount - from;\\n            }\\n            bidderBids = new BidStatus[](querySize);\\n            for (uint256 i = 0; i < querySize; i++) {\\n                bidderBids[i] = getBidderTokenBid({\\n                    erc721Address: erc721Address,\\n                    tokenId: _erc721Bids[erc721Address].tokenIds.at(i + from),\\n                    bidder: bidder\\n                });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev address of market settings contract\\n     */\\n    function marketSettingsContract() external view returns (address) {\\n        return address(_marketSettings);\\n    }\\n\\n    /**\\n     * @dev update market settings contract\\n     */\\n    function updateMarketSettingsContract(\\n        address newMarketSettingsContract\\n    ) external onlyOwner {\\n        address oldMarketSettingsContract = address(_marketSettings);\\n        _marketSettings = IMarketSettings(newMarketSettingsContract);\\n\\n        emit MarketSettingsContractUpdated(\\n            oldMarketSettingsContract,\\n            newMarketSettingsContract\\n        );\\n    }\\n\\n    /**\\n     * @dev check if payment token is allowed for a collection\\n     */\\n    function _isAllowedPaymentToken(\\n        address erc721Address,\\n        uint32 paymentTokenId\\n    ) private view returns (bool) {\\n        return\\n            paymentTokenId == 0 ||\\n            _paymentTokenRegistry.isAllowedPaymentToken(\\n                erc721Address,\\n                paymentTokenId\\n            );\\n    }\\n\\n    /**\\n     * @dev check if a token or a collection if approved\\n     *  to be transferred by this contract\\n     */\\n    function _isApprovedToTransferToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address account\\n    ) private view returns (bool) {\\n        return\\n            CollectionReader.isTokenApproved(erc721Address, tokenId) ||\\n            CollectionReader.isAllTokenApproved(\\n                erc721Address,\\n                account,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev get current status of a bid\\n     */\\n    function _getBidStatus(\\n        address erc721Address,\\n        Bid memory bid\\n    ) private view returns (Status) {\\n        if (bid.bidder == address(0)) {\\n            return Status.NOT_EXIST;\\n        }\\n        if (!_marketSettings.isCollectionTradingEnabled(erc721Address)) {\\n            return Status.TRADE_NOT_OPEN;\\n        }\\n        if (bid.expireTimestamp < block.timestamp) {\\n            return Status.EXPIRED;\\n        }\\n        if (\\n            CollectionReader.tokenOwner(erc721Address, bid.tokenId) ==\\n            bid.bidder\\n        ) {\\n            return Status.ALREADY_TOKEN_OWNER;\\n        }\\n        if (!_isAllowedPaymentToken(erc721Address, bid.paymentTokenId)) {\\n            return Status.INVALID_PAYMENT_TOKEN;\\n        }\\n\\n        address paymentToken = _getPaymentTokenAddress(bid.paymentTokenId);\\n        if (IERC20(paymentToken).balanceOf(bid.bidder) < bid.value) {\\n            return Status.INSUFFICIENT_BALANCE;\\n        }\\n        if (\\n            IERC20(paymentToken).allowance(bid.bidder, address(this)) <\\n            bid.value\\n        ) {\\n            return Status.INSUFFICIENT_ALLOWANCE;\\n        }\\n\\n        return Status.ACTIVE;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/royalty/ICollectionRoyaltyReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface ICollectionRoyaltyReader {\\n    struct RoyaltyAmount {\\n        address receiver;\\n        uint256 royaltyAmount;\\n    }\\n\\n    /**\\n     * @dev Get collection royalty receiver list\\n     * @param collectionAddress to read royalty receiver\\n     * @return list of royalty receivers and their shares\\n     */\\n    function royaltyInfo(\\n        address collectionAddress,\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (RoyaltyAmount[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/payment-token/IPaymentTokenReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IPaymentTokenReader {\\n    /**\\n     * @dev Check if a payment token is allowed for a collection\\n     */\\n    function isAllowedPaymentToken(\\n        address collectionAddress,\\n        uint32 paymentTokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev get payment token id by address\\n     */\\n    function getPaymentTokenIdByAddress(\\n        address token\\n    ) external view returns (uint32);\\n\\n    /**\\n     * @dev get payment token address by id\\n     */\\n    function getPaymentTokenAddressById(\\n        uint32 id\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/market/OperatorDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IOperatorDelegation.sol\\\";\\n\\ncontract OperatorDelegation is IOperatorDelegation, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Allowed operator contracts will be reviewed\\n    // to make sure the original caller is the owner.\\n    // And the operator contract is a just a delegator contract\\n    // that does what the owner intended\\n    EnumerableSet.AddressSet private _allowedOperators;\\n    mapping(address => string) private _operatorName;\\n    mapping(address => EnumerableSet.AddressSet) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {IOperatorDelegation-setApprovalToOperator}.\\n     */\\n    function setApprovalToOperator(address operator, bool approved) public {\\n        _setApprovalToOperator(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-isOperatorAllowed}.\\n     */\\n    function isOperatorAllowed(address operator) public view returns (bool) {\\n        return _allowedOperators.contains(operator);\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-isApprovedOperator}.\\n     */\\n    function isApprovedOperator(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return\\n            isOperatorAllowed(operator) &&\\n            _operatorApprovals[owner].contains(operator);\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-getOperator}.\\n     */\\n    function getOperator(address operator)\\n        external\\n        view\\n        returns (OperatorInfo memory operatorInfo)\\n    {\\n        if (isOperatorAllowed(operator)) {\\n            operatorInfo = OperatorInfo({\\n                operator: operator,\\n                name: _operatorName[operator]\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-getAllowedOperators}.\\n     */\\n    function getAllowedOperators()\\n        external\\n        view\\n        returns (OperatorInfo[] memory operators)\\n    {\\n        operators = new OperatorInfo[](_allowedOperators.length());\\n\\n        for (uint256 i; i < _allowedOperators.length(); i++) {\\n            operators[i] = OperatorInfo({\\n                operator: _allowedOperators.at(i),\\n                name: _operatorName[_allowedOperators.at(i)]\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-getOwnerApprovedOperators}.\\n     */\\n    function getOwnerApprovedOperators(address owner)\\n        external\\n        view\\n        returns (OwnerOperatorInfo[] memory operators)\\n    {\\n        uint256 ownerOperatorCount = _operatorApprovals[owner].length();\\n        operators = new OwnerOperatorInfo[](ownerOperatorCount);\\n\\n        for (uint256 i; i < ownerOperatorCount; i++) {\\n            address operator = _operatorApprovals[owner].at(i);\\n            operators[i] = OwnerOperatorInfo({\\n                operator: operator,\\n                name: _operatorName[operator],\\n                allowed: _allowedOperators.contains(operator)\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-addAllowedOperator}.\\n     */\\n    function addAllowedOperator(address newOperator, string memory operatorName)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            !_allowedOperators.contains(newOperator),\\n            \\\"operator already in allowed list\\\"\\n        );\\n\\n        _allowedOperators.add(newOperator);\\n        _operatorName[newOperator] = operatorName;\\n\\n        emit AllowedOperatorAdded(newOperator, operatorName, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-removeAllowedOperator}.\\n     */\\n    function removeAllowedOperator(address operator) external onlyOwner {\\n        require(\\n            _allowedOperators.contains(operator),\\n            \\\"operator not in allowed list\\\"\\n        );\\n\\n        string memory operatorName = _operatorName[operator];\\n\\n        _allowedOperators.remove(operator);\\n        delete _operatorName[operator];\\n\\n        emit AllowedOperatorRemoved(operator, operatorName, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IOperatorDelegation-updateOperatorName}.\\n     */\\n    function updateOperatorName(address operator, string memory newName)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _allowedOperators.contains(operator),\\n            \\\"operator not in allowed list\\\"\\n        );\\n\\n        string memory oldName = _operatorName[operator];\\n\\n        require(\\n            keccak256(abi.encodePacked((newName))) ==\\n                keccak256(abi.encodePacked((oldName))),\\n            \\\"operator name unchanged\\\"\\n        );\\n\\n        _operatorName[operator] = newName;\\n\\n        emit OperatorNameUpdated(operator, oldName, newName, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on behalf of `owner`\\n     */\\n    function _setApprovalToOperator(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) private {\\n        require(\\n            _allowedOperators.contains(operator),\\n            \\\"operator not in allowed list\\\"\\n        );\\n        require(owner != operator, \\\"approve to sender\\\");\\n\\n        if (approved) {\\n            _operatorApprovals[owner].add(operator);\\n        } else {\\n            _operatorApprovals[owner].remove(operator);\\n        }\\n\\n        string memory operatorName = _operatorName[operator];\\n        emit OperatorApproved(owner, operator, approved, operatorName);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/market/IOperatorDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IOperatorDelegation {\\n    struct OperatorInfo {\\n        address operator;\\n        string name;\\n    }\\n\\n    struct OwnerOperatorInfo {\\n        address operator;\\n        string name;\\n        bool allowed;\\n    }\\n\\n    event OperatorApproved(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved,\\n        string operatorName\\n    );\\n\\n    event AllowedOperatorAdded(\\n        address indexed operator,\\n        string operatorName,\\n        address sender\\n    );\\n\\n    event AllowedOperatorRemoved(\\n        address indexed operator,\\n        string operatorName,\\n        address sender\\n    );\\n\\n    event OperatorNameUpdated(\\n        address indexed operator,\\n        string previousName,\\n        string newName,\\n        address sender\\n    );\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the sender.\\n     */\\n    function setApprovalToOperator(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev check if operator is in the allowed list\\n     */\\n    function isOperatorAllowed(address operator) external view returns (bool);\\n\\n    /**\\n     * @dev check if the `operator` is allowed to manage on behalf of `owner`.\\n     */\\n    function isApprovedOperator(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev check details of operator by address\\n     */\\n    function getOperator(address operator)\\n        external\\n        view\\n        returns (OperatorInfo memory);\\n\\n    /**\\n     * @dev get the allowed list of operators\\n     */\\n    function getAllowedOperators()\\n        external\\n        view\\n        returns (OperatorInfo[] memory);\\n\\n    /**\\n     * @dev get approved operators of a given address\\n     */\\n    function getOwnerApprovedOperators(address owner)\\n        external\\n        view\\n        returns (OwnerOperatorInfo[] memory);\\n\\n    /**\\n     * @dev add allowed operator to allowed list\\n     */\\n    function addAllowedOperator(address newOperator, string memory operatorName)\\n        external;\\n\\n    /**\\n     * @dev remove allowed operator from allowed list\\n     */\\n    function removeAllowedOperator(address operator) external;\\n\\n    /**\\n     * @dev update name of an operator\\n     */\\n    function updateOperatorName(address operator, string memory newName)\\n        external;\\n}\\n\"\r\n    },\r\n    \"/contracts/market/IERC721Bids.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../royalty/ICollectionRoyaltyReader.sol\\\";\\n\\ninterface IERC721Bids {\\n    struct EnterBidInput {\\n        address erc721Address;\\n        uint256 tokenId;\\n        uint256 value;\\n        uint64 expireTimestamp;\\n        uint32 paymentTokenId;\\n    }\\n\\n    struct WithdrawBidInput {\\n        address erc721Address;\\n        uint256 tokenId;\\n        address bidder;\\n    }\\n\\n    struct AcceptBidInput {\\n        address erc721Address;\\n        uint256 tokenId;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    struct RemoveExpiredBidInput {\\n        address erc721Address;\\n        uint256 tokenId;\\n        address bidder;\\n    }\\n\\n    struct Bid {\\n        uint256 tokenId;\\n        uint256 value;\\n        address bidder;\\n        uint64 expireTimestamp;\\n        uint32 paymentTokenId;\\n    }\\n\\n    struct TokenBids {\\n        EnumerableSet.AddressSet bidders;\\n        mapping(address => Bid) bids;\\n    }\\n\\n    struct ERC721Bids {\\n        EnumerableSet.UintSet tokenIds;\\n        mapping(uint256 => TokenBids) bids;\\n    }\\n\\n    struct FundReceiver {\\n        address account;\\n        uint256 amount;\\n        address paymentToken;\\n    }\\n\\n    enum Status {\\n        NOT_EXIST, // 0: bid doesn't exist\\n        ACTIVE, // 1: bid is active and valid\\n        TRADE_NOT_OPEN, // 2: trade not open\\n        EXPIRED, // 3: bid has expired\\n        ALREADY_TOKEN_OWNER, // 4: bidder is token owner\\n        INVALID_PAYMENT_TOKEN, // 5: payment token is not allowed\\n        INSUFFICIENT_BALANCE, // 6: insufficient payment token balance\\n        INSUFFICIENT_ALLOWANCE // 7: insufficient payment token allowance\\n    }\\n\\n    struct BidStatus {\\n        uint256 tokenId;\\n        uint256 value;\\n        address bidder;\\n        uint64 expireTimestamp;\\n        address paymentToken;\\n        Status status;\\n    }\\n\\n    event TokenBidEntered(\\n        address indexed erc721Address,\\n        address indexed bidder,\\n        uint256 tokenId,\\n        Bid bid,\\n        address sender\\n    );\\n    event TokenBidWithdrawn(\\n        address indexed erc721Address,\\n        address indexed bidder,\\n        uint256 tokenId,\\n        Bid bid,\\n        address sender\\n    );\\n    event TokenBidAccepted(\\n        address indexed erc721Address,\\n        address indexed seller,\\n        uint256 tokenId,\\n        Bid bid,\\n        uint256 serviceFee,\\n        ICollectionRoyaltyReader.RoyaltyAmount[] royaltyInfo,\\n        address sender\\n    );\\n\\n    event EnterBidFailed(\\n        address indexed erc721Address,\\n        uint256 tokenId,\\n        string message,\\n        address sender\\n    );\\n    event WithdrawBidFailed(\\n        address indexed erc721Address,\\n        uint256 tokenId,\\n        string message,\\n        address sender\\n    );\\n    event AcceptBidFailed(\\n        address indexed erc721Address,\\n        uint256 tokenId,\\n        string message,\\n        address sender\\n    );\\n\\n    event MarketSettingsContractUpdated(\\n        address previousMarketSettingsContract,\\n        address newMarketSettingsContract\\n    );\\n\\n    /**\\n     * @dev enter bid for token\\n     * @param erc721Address collection address\\n     * @param tokenId token ID to bid on\\n     * @param value bid price\\n     * @param expireTimestamp bid expire time\\n     * @param paymentTokenId Payment token registry ID for payment\\n     * @param bidder address of bidder\\n     * Note:\\n     * paymentTokenId: When using 0 as payment token ID,\\n     * it refers to wrapped coin of the chain, e.g. WBNB, WFTM, etc.\\n     * bidder: bidder is a required field because\\n     * sender can be a delegated operator, therefore bidder\\n     * address needs to be included\\n     */\\n    function enterBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        uint256 value,\\n        uint64 expireTimestamp,\\n        uint32 paymentTokenId,\\n        address bidder\\n    ) external;\\n\\n    /**\\n     * @dev batch enter bids\\n     * @param newBids details of new bid\\n     * @param bidder address of bidder\\n     * Note:\\n     * Refer to enterBidForToken comments for input params def\\n     */\\n    function enterBidForTokens(\\n        EnterBidInput[] calldata newBids,\\n        address bidder\\n    ) external;\\n\\n    /**\\n     * @dev withdraw bid for token\\n     * @param erc721Address collection address\\n     * @param tokenId token ID of the bid\\n     * @param bidder address of bidder\\n     */\\n    function withdrawBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder\\n    ) external;\\n\\n    /**\\n     * @dev batch withdraw bids\\n     * @param bids details of bid to withdraw\\n     * Note:\\n     * Refer to withdrawBidForToken comments for input params def\\n     */\\n    function withdrawBidForTokens(WithdrawBidInput[] calldata bids) external;\\n\\n    /**\\n     * @dev accept bid for token\\n     * @param erc721Address collection address\\n     * @param tokenId token ID to accept bid of\\n     * @param value bid price\\n     * @param bidder address of bidder\\n     * Note:\\n     * value is required to avoid bidder frontrun\\n     */\\n    function acceptBidForToken(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev batch accept bids\\n     * @param bids details of bid to accept\\n     * Note:\\n     * Refer to acceptBidForToken comments for input params def\\n     */\\n    function acceptBidForTokens(AcceptBidInput[] calldata bids) external;\\n\\n    /**\\n     * @dev Remove expired bids\\n     * @param bids list bids to remove\\n     * anyone can removed expired bids\\n     */\\n    function removeExpiredBids(RemoveExpiredBidInput[] calldata bids) external;\\n\\n    /**\\n     * @dev get bid details of a bid\\n     * @param erc721Address collection address\\n     * @param tokenId token ID to read\\n     * @param bidder address of bidder\\n     */\\n    function getBidderTokenBid(\\n        address erc721Address,\\n        uint256 tokenId,\\n        address bidder\\n    ) external view returns (BidStatus memory);\\n\\n    /**\\n     * @dev get bids details of a token\\n     * @param erc721Address collection address\\n     * @param tokenId token ID to read\\n     */\\n    function getTokenBids(\\n        address erc721Address,\\n        uint256 tokenId\\n    ) external view returns (BidStatus[] memory bids);\\n\\n    /**\\n     * @dev get highest bid of a token\\n     * @param erc721Address collection address\\n     * @param tokenId token ID to read\\n     */\\n    function getTokenHighestBid(\\n        address erc721Address,\\n        uint256 tokenId\\n    ) external view returns (BidStatus memory highestBid);\\n\\n    /**\\n     * @dev get number of token with bids of a collection\\n     * @param erc721Address collection address\\n     */\\n    function numTokenWithBidsOfCollection(\\n        address erc721Address\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev get batch of highest bids of a collection\\n     * @param erc721Address collection address\\n     * @param from index of token to read\\n     * @param size amount of tokens to read\\n     */\\n    function getHighestBidsOfCollection(\\n        address erc721Address,\\n        uint256 from,\\n        uint256 size\\n    ) external view returns (BidStatus[] memory highestBids);\\n\\n    /**\\n     * @dev get batch of bids from a bidder of a collection\\n     * @param erc721Address collection address\\n     * @param bidder address of bidder\\n     * @param from index of token to read\\n     * @param size amount of tokens to read\\n     */\\n    function getBidderBidsOfCollection(\\n        address erc721Address,\\n        address bidder,\\n        uint256 from,\\n        uint256 size\\n    ) external view returns (BidStatus[] memory bidderBids);\\n}\\n\"\r\n    },\r\n    \"/contracts/market-settings/IMarketSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IMarketSettings {\\n    event RoyaltyRegistryChanged(\\n        address previousRoyaltyRegistry,\\n        address newRoyaltyRegistry\\n    );\\n\\n    event PaymentTokenRegistryChanged(\\n        address previousPaymentTokenRegistry,\\n        address newPaymentTokenRegistry\\n    );\\n\\n    /**\\n     * @dev fee denominator for service fee\\n     */\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    /**\\n     * @dev address to wrapped coin of the chain\\n     * e.g.: WETH, WBNB, WFTM, WAVAX, etc.\\n     */\\n    function wrappedEther() external view returns (address);\\n\\n    /**\\n     * @dev address of royalty registry contract\\n     */\\n    function royaltyRegsitry() external view returns (address);\\n\\n    /**\\n     * @dev address of payment token registry\\n     */\\n    function paymentTokenRegistry() external view returns (address);\\n\\n    /**\\n     * @dev Show if trading is enabled\\n     */\\n    function isTradingEnabled() external view returns (bool);\\n\\n    /**\\n     * @dev Show if trading is enabled\\n     */\\n    function isCollectionTradingEnabled(address collectionAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Surface minimum trading time range\\n     */\\n    function actionTimeOutRangeMin() external view returns (uint64);\\n\\n    /**\\n     * @dev Surface maximum trading time range\\n     */\\n    function actionTimeOutRangeMax() external view returns (uint64);\\n\\n    /**\\n     * @dev Service fee receiver\\n     */\\n    function serviceFeeReceiver() external view returns (address);\\n\\n    /**\\n     * @dev Service fee fraction\\n     * @return fee fraction based on denominator\\n     */\\n    function serviceFeeFraction() external view returns (uint256);\\n\\n    /**\\n     * @dev Service fee receiver and amount\\n     * @param salePrice price of token\\n     */\\n    function serviceFeeInfo(uint256 salePrice)\\n        external\\n        view\\n        returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/library/CollectionReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nlibrary CollectionReader {\\n    function collectionOwner(address collectionAddress)\\n        internal\\n        view\\n        returns (address owner)\\n    {\\n        try Ownable(collectionAddress).owner() returns (address _owner) {\\n            owner = _owner;\\n        } catch {}\\n    }\\n\\n    function tokenOwner(address erc721Address, uint256 tokenId)\\n        internal\\n        view\\n        returns (address owner)\\n    {\\n        IERC721 _erc721 = IERC721(erc721Address);\\n        try _erc721.ownerOf(tokenId) returns (address _owner) {\\n            owner = _owner;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @dev check if this contract has approved to transfer this erc721 token\\n     */\\n    function isTokenApproved(address erc721Address, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool isApproved)\\n    {\\n        IERC721 _erc721 = IERC721(erc721Address);\\n        try _erc721.getApproved(tokenId) returns (address tokenOperator) {\\n            if (tokenOperator == address(this)) {\\n                isApproved = true;\\n            }\\n        } catch {}\\n    }\\n\\n    /**\\n     * @dev check if this contract has approved to all of this owner's erc721 tokens\\n     */\\n    function isAllTokenApproved(\\n        address erc721Address,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool isApproved) {\\n        IERC721 _erc721 = IERC721(erc721Address);\\n\\n        try _erc721.isApprovedForAll(owner, operator) returns (\\n            bool _isApproved\\n        ) {\\n            isApproved = _isApproved;\\n        } catch {}\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999999\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketSettings_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AcceptBidFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operatorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllowedOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operatorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllowedOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EnterBidFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousMarketSettingsContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketSettingsContract\",\"type\":\"address\"}],\"name\":\"MarketSettingsContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operatorName\",\"type\":\"string\"}],\"name\":\"OperatorApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OperatorNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"paymentTokenId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IERC721Bids.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICollectionRoyaltyReader.RoyaltyAmount[]\",\"name\":\"royaltyInfo\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"paymentTokenId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IERC721Bids.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"paymentTokenId\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IERC721Bids.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawBidFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"acceptBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721Bids.AcceptBidInput[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"name\":\"acceptBidForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operatorName\",\"type\":\"string\"}],\"name\":\"addAllowedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"paymentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"enterBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"paymentTokenId\",\"type\":\"uint32\"}],\"internalType\":\"struct IERC721Bids.EnterBidInput[]\",\"name\":\"newBids\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"enterBidForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOperatorDelegation.OperatorInfo[]\",\"name\":\"operators\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getBidderBidsOfCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Bids.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Bids.BidStatus[]\",\"name\":\"bidderBids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getBidderTokenBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Bids.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Bids.BidStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getHighestBidsOfCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Bids.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Bids.BidStatus[]\",\"name\":\"highestBids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOperatorDelegation.OperatorInfo\",\"name\":\"operatorInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerApprovedOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct IOperatorDelegation.OwnerOperatorInfo[]\",\"name\":\"operators\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Bids.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Bids.BidStatus[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenHighestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expireTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Bids.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Bids.BidStatus\",\"name\":\"highestBid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketSettingsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"name\":\"numTokenWithBidsOfCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeAllowedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Bids.RemoveExpiredBidInput[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"name\":\"removeExpiredBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalToOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketSettingsContract\",\"type\":\"address\"}],\"name\":\"updateMarketSettingsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"updateOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"withdrawBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Bids.WithdrawBidInput[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"name\":\"withdrawBidForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721Bids", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "99999999", "ConstructorArguments": "000000000000000000000000d4f17ecef345abb9a4cd0ccbf9f561506c31ad89", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}