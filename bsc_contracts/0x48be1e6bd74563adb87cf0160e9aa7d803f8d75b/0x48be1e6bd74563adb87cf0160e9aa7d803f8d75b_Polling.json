{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n                @dev Md. Sayem Abedin\r\n\r\n\r\n*/\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://b...content-available-to-author-only...n.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://e...content-available-to-author-only...m.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(0x88B3c9F414b15D29d06fa561050B98a5342B5B90);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Polling.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// The polling contract for getting user vote for decisions.\r\n\r\ncontract Polling is Ownable, ReentrancyGuard{\r\n\r\n\r\n    struct Poll{ // Polling struct.\r\n\r\n        string name;\r\n        string type1;\r\n        string type1URL;\r\n        string type2;\r\n        string type2URL;\r\n        string type3;\r\n        string type3URL;\r\n        uint[3] votes;\r\n        uint endTime;\r\n        string transactionProof;\r\n        uint bnbAmount;\r\n        mapping(address=>uint[3]) myVote;\r\n        mapping(address=> bool) isVoted;\r\n          \r\n    }\r\n\r\n                /// -> Storage Variables  ///\r\n\r\n\r\n    mapping(uint=> Poll) public polls;\r\n    uint public pollNumber;\r\n    bool public isPolling;\r\n\r\n    IERC20 public token;\r\n\r\n    uint public giveawayPercentage = 10;\r\n\r\n\r\n    uint public lowerBariar = 1_000;\r\n    uint public higherBariar = 20_000;\r\n    \r\n\r\n\r\n    constructor(address _token){\r\n        token = IERC20(_token);\r\n        \r\n    }\r\n\r\n    // events\r\n    event pollCreated(uint indexed _id);\r\n    event voted(address indexed _voter, uint indexed _id, uint indexed _type);\r\n\r\n\r\n    function createPoll(\r\n        string memory _name,\r\n        string memory _type1,\r\n        string memory _type1URL,\r\n        string memory _type2,\r\n        string memory _type2URL,\r\n        string memory _type3,\r\n        string memory _type3URL,\r\n        uint _endTime,\r\n        uint _bnbAmount\r\n        ) public onlyOwner nonReentrant{\r\n\r\n        Poll storage _poll = polls[pollNumber];\r\n\r\n        // Setting the poll data\r\n\r\n        _poll.name = _name;\r\n\r\n        _poll.type1 = _type1;\r\n        _poll.type1URL = _type1URL;\r\n\r\n        _poll.type2 = _type2;\r\n        _poll.type2URL = _type2URL;\r\n\r\n        _poll.type3 = _type3;\r\n        _poll.type3URL = _type3URL;\r\n\r\n        _poll.endTime = _endTime;\r\n        _poll.transactionProof = 'N/A';\r\n        _poll.bnbAmount = _bnbAmount;\r\n\r\n        emit pollCreated(pollNumber);\r\n\r\n        pollNumber++; \r\n        \r\n    }\r\n\r\n    function vote(uint _id, uint _type) public nonReentrant{\r\n        Poll storage _poll = polls[_id];\r\n        require(_id<pollNumber, \"Not a valid pole\");\r\n        require(isPolling, \"Polling is stopped\");\r\n        require(!isCompleted(_id), \"The voting for this pole has ended\");\r\n        require(!_poll.isVoted[msg.sender], \"You already voted\");\r\n \r\n        \r\n      \r\n        uint _ctfBalance = token.balanceOf(msg.sender);\r\n\r\n        uint _votingPower = _ctfBalance/(lowerBariar*10**token.decimals());\r\n\r\n        require(_votingPower>=1, \"Not enough token to vote\");\r\n\r\n        if(_votingPower>20){\r\n            _votingPower = 20;\r\n        }\r\n\r\n        if(_type == 1){\r\n            _poll.votes[0] +=_votingPower;\r\n            _poll.myVote[msg.sender][0] +=_votingPower;\r\n        }else if(_type == 2){\r\n            _poll.votes[1] += _votingPower;\r\n            _poll.myVote[msg.sender][1]+=_votingPower;\r\n\r\n        }else if(_type == 3){\r\n            _poll.votes[2] +=_votingPower;\r\n            _poll.myVote[msg.sender][2]+=_votingPower;\r\n\r\n        }\r\n        else{\r\n            revert(\"Wrong type\");\r\n        }\r\n        _poll.isVoted[msg.sender]  = true;\r\n\r\n        emit voted(msg.sender, _id, _type);\r\n    }\r\n\r\n\r\n            /// Write contract functions///\r\n    /*\r\n     @dev set new token.\r\n     @params _token_address is the new token address.\r\n    \r\n    */\r\n\r\n    function setBariar(uint _lowerBariar, uint _higherBariar) public onlyOwner{\r\n        lowerBariar = _lowerBariar;\r\n        higherBariar = _higherBariar;\r\n    }\r\n\r\n    function setTOken(address _tokenAddress) public onlyOwner {\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    function setGiveawayPercentage(uint _percentage) public onlyOwner{\r\n        giveawayPercentage = _percentage;\r\n    }\r\n\r\n    function startStopPolling(bool _state) public onlyOwner{\r\n        require(isPolling != _state, \"Already in required state\");\r\n        isPolling =_state;\r\n    }\r\n\r\n    \r\n\r\n    function setTransactionProof(uint _id, string memory _transactionProof) public onlyOwner{\r\n        Poll storage _poll = polls[_id];\r\n        require(isCompleted(_id), \"Polling has not finished yet\");\r\n        _poll.transactionProof = _transactionProof;\r\n    }\r\n\r\n\r\n            /// Read contract functions///\r\n\r\n    function isCompleted(uint _id) public view returns(bool){\r\n        Poll storage _poll = polls[_id];\r\n        if(_poll.endTime>block.timestamp){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    // Get poll info\r\n    function getPoleVote(uint _id) public view returns(uint _v1, uint _v2, uint _v3){\r\n        Poll storage _poll = polls[_id];\r\n        _v1 = _poll.votes[0];\r\n        _v2 = _poll.votes[1];\r\n        _v3 = _poll.votes[2];\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type1URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type2URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type3URL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bnbAmount\",\"type\":\"uint256\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPoleVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_v1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_v2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_v3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveawayPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"higherBariar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPolling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBariar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type1URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type2URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"type3URL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"transactionProof\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowerBariar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_higherBariar\",\"type\":\"uint256\"}],\"name\":\"setBariar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setGiveawayPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTOken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_transactionProof\",\"type\":\"string\"}],\"name\":\"setTransactionProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"startStopPolling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Polling", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000037689aa21aac069e06686f08a653ee88bd612df", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://268b2017318cff856c9b0d3fd86a71f70096c9fc358b5365c359f10b8c5e27cf"}