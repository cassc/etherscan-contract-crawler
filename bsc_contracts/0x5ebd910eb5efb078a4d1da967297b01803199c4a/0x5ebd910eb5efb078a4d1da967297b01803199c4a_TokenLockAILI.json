{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract TokenLockAILI {\r\n    \r\n    IERC20 public token;\r\n    \r\n    uint256 private constant DECIMAL_MULTIPLIER = 1e8;\r\n    \r\n    uint256 private constant INITIAL_DAILY_UNLOCK = 21600 * DECIMAL_MULTIPLIER;\r\n    \r\n    uint256 private constant PERIOD_DAYS = 90;\r\n    \r\n    uint256 private constant TOTAL_DAYS = 360;\r\n    \r\n    uint256 private constant MIN_DAILY_UNLOCK = 1000 * DECIMAL_MULTIPLIER;\r\n\r\n    \r\n    uint256 public startTimestamp;\r\n    \r\n    uint256 public unlockedToken;\r\n    \r\n    uint256 public lastUnlockTimestamp;\r\n    \r\n    address public owner;\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    event UnlockEvent(uint256 indexed amount, uint256 indexed timestamp);\r\n    \r\n    event TransferEvent(address indexed to, uint256 indexed amount);\r\n\r\n    \r\n    \r\n    constructor(address _token) {\r\n        \r\n        require(_token != address(0), \"Token address cannot be zero address.\");\r\n        \r\n        token = IERC20(_token);\r\n\r\n        \r\n        \r\n        startTimestamp = block.timestamp - 1 days;\r\n\r\n        lastUnlockTimestamp = startTimestamp;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    \r\n    \r\n    function unlock() external onlyOwner {\r\n        \r\n        require(block.timestamp - lastUnlockTimestamp >= 1 days, \"The time since the last unlock is less than one day.\");\r\n        \r\n        require(token.balanceOf(address(this)) >= MIN_DAILY_UNLOCK, \"Insufficient balance\");\r\n        \r\n        uint256 daysSinceStart = (block.timestamp - startTimestamp) / 1 days;\r\n        \r\n        uint256 periodsSinceStart = daysSinceStart / PERIOD_DAYS;\r\n        \r\n        uint256 dailyUnlock;\r\n\r\n        \r\n        if (daysSinceStart >= TOTAL_DAYS) {\r\n            dailyUnlock = MIN_DAILY_UNLOCK;\r\n        } else {\r\n            \r\n            dailyUnlock = INITIAL_DAILY_UNLOCK / 2 ** periodsSinceStart;\r\n        }\r\n\r\n        \r\n        uint256 daysSinceLastUnlock = daysSinceStart - (lastUnlockTimestamp - startTimestamp) / 1 days;\r\n        \r\n        uint256 newUnlockedToken = daysSinceLastUnlock * dailyUnlock;\r\n\r\n        \r\n        unlockedToken += newUnlockedToken;\r\n        \r\n        lastUnlockTimestamp = block.timestamp;\r\n\r\n        \r\n        emit UnlockEvent(newUnlockedToken, block.timestamp);\r\n    }\r\n\r\n    \r\n    function transfer(address to, uint256 amount) external onlyOwner {\r\n        \r\n        require(to != address(0), \"Recipient address cannot be zero address.\");\r\n        require(to != address(this), \"Recipient address cannot be contract address.\");\r\n        \r\n        require(unlockedToken >= amount, \"Not enough unlocked tokens.\");\r\n\r\n        \r\n        unlockedToken -= amount;\r\n        \r\n        token.transfer(to, amount);\r\n\r\n        \r\n        emit TransferEvent(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnlockEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"lastUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenLockAILI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5dc84c8602240242d50ecb26e718fca69134816", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35c56b70a551b2c2c3323df1a9c0c3487b51c6ce8a8db6031332ff49d19d5b78"}