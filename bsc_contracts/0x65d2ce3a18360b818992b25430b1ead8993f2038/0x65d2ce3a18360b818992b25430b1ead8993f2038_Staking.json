{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport './utils/AddressSet.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract Staking is ReentrancyGuard, Ownable {\\n    using AddressSet for AddressSet.Storage;\\n\\n    uint256 private constant MINUTE = 60;\\n    uint256 private constant HOUR = 60 * MINUTE;\\n    uint256 private constant DAY = 24 * HOUR;\\n    uint256 public constant StakingPeriod = 7 * DAY;\\n\\n    address public feeWallet;\\n    uint256 public tokenFee; // percent\\n    uint256 public feeDenom; // usually 10000\\n    uint256 public nativeFee; // const value not percent\\n\\n    uint256 public maxTicketsAmount;\\n    IERC20 public PAC;\\n\\n    enum OrderType {\\n        ON_SELL,\\n        ON_BUY\\n    }\\n\\n    struct UserStats {\\n        uint256 ownedTicketsAmount;\\n        uint256 onSell;\\n        uint256 onBuy;\\n    }\\n\\n    struct Order {\\n        OrderType orderType;\\n        uint256 amountOfTickets;\\n        uint256 eachTicketPrice;\\n        address user;\\n    }\\n\\n    mapping(address => UserStats) userStats;\\n\\n    AddressSet.Storage participants;\\n    Order[] ordersOnSell;\\n    Order[] ordersOnBuy;\\n\\n    /**\\n     * @dev custom parameter to watch\\n     * how many tokens on contract balance\\n     * is not supposed to spread as revards\\n     * between participants\\n     */\\n    uint256 tokensAmountOwnedByBuyers;\\n\\n    constructor(\\n        address _token,\\n        uint256 _maxTicketsAmount,\\n        address _feeWallet,\\n        uint256 _tokenFee,\\n        uint256 _feeDenom,\\n        uint256 _nativeFee\\n    ) {\\n        participants.init();\\n\\n        PAC = IERC20(_token);\\n        maxTicketsAmount = _maxTicketsAmount;\\n        feeWallet = _feeWallet;\\n        tokenFee = _tokenFee; // percent equals: tokenFee / feeDenom\\n        feeDenom = _feeDenom; // usually 10000\\n        nativeFee = _nativeFee;\\n\\n        userStats[msg.sender].ownedTicketsAmount = maxTicketsAmount;\\n        addParticipant(msg.sender);\\n        // then we sell all our tickets\\n    }\\n\\n    receive() external payable {\\n        address[] memory _participants = participants.all();\\n        uint256 pacPerTicket = (PAC.balanceOf(address(this)) -\\n            tokensAmountOwnedByBuyers) / maxTicketsAmount;\\n\\n        for (uint256 i; i < _participants.length; ++i) {\\n            PAC.transfer(\\n                _participants[i],\\n                (pacPerTicket * userStats[_participants[i]].ownedTicketsAmount)\\n            );\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param orderId - need to identify from which user to buy\\n     * @param amount of tickets to buy\\n     * @dev when user buys tickets, (s)he only pays for each ticket (no fee)\\n     */\\n    function buyTickets(uint256 orderId, uint256 amount) external nonReentrant {\\n        if (orderId < ordersOnSell.length) {\\n            Order storage orderOnSell = ordersOnSell[orderId]; // chosen order on sell\\n            address seller = orderOnSell.user;\\n\\n            UserStats storage senderStats = userStats[msg.sender]; // who buys tickets\\n            UserStats storage sellerStats = userStats[seller]; // who sells tickets\\n\\n            require(\\n                orderOnSell.orderType == OrderType.ON_SELL,\\n                'This order is not on sell.'\\n            );\\n            require(\\n                amount <= orderOnSell.amountOfTickets,\\n                'Amount of tickets to buy is higher than offered.'\\n            );\\n\\n            orderOnSell.amountOfTickets -= amount;\\n            senderStats.ownedTicketsAmount += amount;\\n            addParticipant(msg.sender); // if it's needed we add msg.sender to participants array\\n\\n            sellerStats.ownedTicketsAmount -= amount;\\n            sellerStats.onSell -= amount;\\n            removeParticipant(seller); // if it's needed we remove seller from participants array\\n\\n            /**\\n             * here we buy tokens from someone who already set order on sell\\n             * so we transfer 95% to seller and 5% to fee wallet (no native fee for buy)\\n             */\\n\\n            // transfer tokens to tickets seller (95%)\\n            PAC.transferFrom(\\n                msg.sender,\\n                seller,\\n                ((amount * orderOnSell.eachTicketPrice) * (feeDenom - tokenFee)) /\\n                    feeDenom\\n            );\\n\\n            // token fee (5%)\\n            PAC.transferFrom(\\n                msg.sender,\\n                feeWallet,\\n                ((amount * orderOnSell.eachTicketPrice) * tokenFee) / feeDenom\\n            );\\n\\n            if (orderOnSell.amountOfTickets == 0)\\n                deleteOrder(orderId, orderOnSell.orderType);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param amount of tickets to buy\\n     * @param ticketPrice price of each ticket user would like to buy\\n     * @dev when user set order on buy, (s)he only pays for each ticket (no fee)\\n     */\\n    function setOrderOnBuy(uint256 amount, uint256 ticketPrice) external {\\n        UserStats storage senderStats = userStats[msg.sender];\\n        uint256 tokensTotransfer = amount * ticketPrice;\\n\\n        PAC.transferFrom(msg.sender, address(this), tokensTotransfer);\\n\\n        ordersOnBuy.push(Order(OrderType.ON_BUY, amount, ticketPrice, msg.sender));\\n        senderStats.onBuy += amount;\\n\\n        // increase amount of user tokens on contract\\n        tokensAmountOwnedByBuyers += tokensTotransfer;\\n    }\\n\\n    /**\\n     *\\n     * @param orderId - need to identify to which user to sell\\n     * @param amount of tickets to sell\\n     * @dev when user sells tickets, (s)he pays fee\\n     */\\n    function sellTickets(uint256 orderId, uint256 amount) external payable nonReentrant {\\n        if (orderId < ordersOnBuy.length) {\\n            Order storage orderOnBuy = ordersOnBuy[orderId]; // chosen order on buy\\n            address buyer = orderOnBuy.user;\\n\\n            UserStats storage senderStats = userStats[msg.sender]; // who sells tickets\\n            UserStats storage buyerStats = userStats[buyer]; // who buys tickets\\n\\n            require(senderStats.ownedTicketsAmount != 0, 'Your tickets balance is zero.');\\n            require(\\n                senderStats.onSell + amount <= senderStats.ownedTicketsAmount,\\n                'Amount to sell is to high.'\\n            );\\n            require(\\n                ordersOnBuy[orderId].orderType == OrderType.ON_BUY,\\n                'This order is not on buy.'\\n            );\\n            require(msg.value == nativeFee, 'Need to pay native fee.');\\n\\n            orderOnBuy.amountOfTickets -= amount;\\n            senderStats.ownedTicketsAmount -= amount;\\n            removeParticipant(msg.sender);\\n\\n            buyerStats.ownedTicketsAmount += amount;\\n            buyerStats.onBuy -= amount;\\n            addParticipant(buyer);\\n\\n            // decrease amount of user tokens on contract\\n            tokensAmountOwnedByBuyers -= amount * orderOnBuy.eachTicketPrice;\\n\\n            /**\\n             * person who set order on buy already transefred PAC tokens to contract\\n             * so we just transfer amount * 95% to seller and %5 to fee wallet\\n             */\\n\\n            // transfer tokens to tickets seller (95%)\\n            PAC.transfer(\\n                msg.sender,\\n                ((amount * orderOnBuy.eachTicketPrice) * (feeDenom - tokenFee)) / feeDenom\\n            );\\n\\n            // token fee (5%)\\n            PAC.transfer(\\n                feeWallet,\\n                ((amount * orderOnBuy.eachTicketPrice) * tokenFee) / feeDenom\\n            );\\n\\n            // native fee (static)\\n            (bool sent, ) = payable(feeWallet).call{value: nativeFee}('');\\n            require(sent, 'Failed to send Ether');\\n\\n            if (orderOnBuy.amountOfTickets == 0)\\n                deleteOrder(orderId, orderOnBuy.orderType);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param amount of tickets to sell\\n     * @param ticketPrice price of each ticket user would like to sell\\n     */\\n    function setOrderOnSell(uint256 amount, uint256 ticketPrice) external payable {\\n        UserStats storage senderStats = userStats[msg.sender];\\n        require(\\n            senderStats.onSell + amount <= senderStats.ownedTicketsAmount,\\n            'Amount to sell is to high.'\\n        );\\n        require(msg.value == nativeFee, 'Need to pay native fee.');\\n\\n        ordersOnSell.push(Order(OrderType.ON_SELL, amount, ticketPrice, msg.sender));\\n        senderStats.onSell += amount;\\n\\n        /**\\n         * person who set order on sell need to pay native fee only\\n         * so (s)he only transfers native fee to fee wallet\\n         * and then when someone will buy h(is)er tickets will recieve 95% of price\\n         * for bought tickets\\n         */\\n\\n        // native fee (static)\\n        (bool sent, ) = payable(feeWallet).call{value: nativeFee}('');\\n        require(sent, 'Failed to send Ether');\\n    }\\n\\n    /**\\n     *\\n     * @param orderId - current order (array index)\\n     * @dev need to check if order was set by msg.sender, return transfered from this user amount of data and delete order\\n     */\\n    function cancelBuy(uint256 orderId) external {\\n        if (orderId < ordersOnBuy.length) {\\n            Order memory currentOrder = ordersOnBuy[orderId];\\n            require(\\n                currentOrder.user == msg.sender,\\n                \\\"It's not your order, unable to cancel it.\\\"\\n            );\\n\\n            PAC.transfer(\\n                currentOrder.user,\\n                currentOrder.amountOfTickets * currentOrder.eachTicketPrice\\n            );\\n\\n            userStats[msg.sender].onBuy -= currentOrder.amountOfTickets;\\n            deleteOrder(orderId, currentOrder.orderType);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param orderId - current order (array index)\\n     * @dev need to check if order was set by msg.sender and delete order\\n     */\\n    function cancelSell(uint256 orderId) external {\\n        if (orderId < ordersOnSell.length) {\\n            Order memory currentOrder = ordersOnSell[orderId];\\n            require(\\n                currentOrder.user == msg.sender,\\n                \\\"It's not your order, unable to cancel it.\\\"\\n            );\\n\\n            userStats[msg.sender].onSell -= currentOrder.amountOfTickets;\\n            deleteOrder(orderId, currentOrder.orderType);\\n        }\\n    }\\n\\n    function deleteOrder(uint256 orderId, OrderType orderType) internal {\\n        if (orderType == OrderType.ON_BUY) {\\n            ordersOnBuy[orderId] = ordersOnBuy[ordersOnBuy.length - 1];\\n            ordersOnBuy.pop();\\n        }\\n\\n        if (orderType == OrderType.ON_SELL) {\\n            ordersOnSell[orderId] = ordersOnSell[ordersOnSell.length - 1];\\n            ordersOnSell.pop();\\n        }\\n    }\\n\\n    /* _-_-_-_-_-_-_-_-_-_-_- PARTICIPANTS _-_-_-_-_-_-_-_-_-_-_- */\\n\\n    /**\\n     *\\n     * @param user - current user\\n     * @param result - 0 if user GOT tickets and IN array;\\n     *                 1 if user GOT NO tickets and IN array;\\n     *                 2 if user GOT tickets and NOT IN array;\\n     *                 3 if user GOT NO tickets and NOT IN array;\\n     */\\n    function check(address user) internal view returns (uint8 result) {\\n        bool userFound = participants.find(user);\\n        bool userGotTickets = userStats[user].ownedTicketsAmount > 0;\\n\\n        if (userStats[user].ownedTicketsAmount > 0) userGotTickets = true;\\n\\n        if (userGotTickets && userFound) result = 0;\\n        if (!userGotTickets && userFound) result = 1;\\n        if (userGotTickets && !userFound) result = 2;\\n        if (!userGotTickets && !userFound) result = 3;\\n    }\\n\\n    function addParticipant(address user) internal {\\n        uint8 result = check(user);\\n\\n        // add if only user got tickets and no such user in array\\n        if (result == 2) participants.add(user);\\n    }\\n\\n    function removeParticipant(address user) internal {\\n        uint8 result = check(user);\\n\\n        // add if only user got no tickets and still in array\\n        if (result == 1) participants.remove(user);\\n    }\\n\\n    /* _-_-_-_-_-_-_-_-_-_-_- GETTERS _-_-_-_-_-_-_-_-_-_-_- */\\n\\n    function getUser(address user) external view returns (UserStats memory) {\\n        return userStats[user];\\n    }\\n\\n    function getOrdersOnSell() external view returns (Order[] memory) {\\n        return ordersOnSell;\\n    }\\n\\n    function getOrdersOnBuy() external view returns (Order[] memory) {\\n        return ordersOnBuy;\\n    }\\n\\n    function getAllParticipants() external view returns (address[] memory) {\\n        return participants.all();\\n    }\\n\\n    /* _-_-_-_-_-_-_-_-_-_-_- SETTERS _-_-_-_-_-_-_-_-_-_-_- */\\n\\n    function setFeeWallet(address _feeWallet) external onlyOwner {\\n        feeWallet = _feeWallet;\\n    }\\n\\n    function setTokenFee(uint256 _tokenFee, uint256 _feeDenom) external onlyOwner {\\n        require(_tokenFee < _feeDenom, 'Not correct fee params');\\n        tokenFee = _tokenFee;\\n        feeDenom = _feeDenom;\\n    }\\n\\n    function setNativeFee(uint256 _nativeFee) external onlyOwner {\\n        nativeFee = _nativeFee;\\n    }\\n\\n    /* _-_-_-_-_-_-_-_-_-_-_- EMERGENCY BACKDOOR HANDLES _-_-_-_-_-_-_-_-_-_-_- */\\n\\n    function setUserStats(\\n        address user,\\n        uint256 _ownedTicketsAmount,\\n        uint256 _onSell,\\n        uint256 _onBuy\\n    ) external onlyOwner {\\n        userStats[user].ownedTicketsAmount = _ownedTicketsAmount;\\n        userStats[user].onSell = _onSell;\\n        userStats[user].onBuy = _onBuy;\\n        addParticipant(user);\\n    }\\n\\n    function removeUser(address user) external onlyOwner {\\n        userStats[user].ownedTicketsAmount = 0;\\n        userStats[user].onSell = 0;\\n        userStats[user].onBuy = 0;\\n        removeParticipant(user);\\n    }\\n\\n    function removeOrdersOnBuy() external onlyOwner {\\n        while (ordersOnBuy.length > 0) {\\n            ordersOnBuy.pop();\\n        }\\n    }\\n\\n    function removeOrdersOnSell() external onlyOwner {\\n        while (ordersOnSell.length > 0) {\\n            ordersOnSell.pop();\\n        }\\n    }\\n\\n    function deleteOrderOnBuy(uint256 orderId) external onlyOwner {\\n        if (orderId < ordersOnBuy.length) deleteOrder(orderId, OrderType.ON_BUY);\\n    }\\n\\n    function deleteOrderOnSell(uint256 orderId) external onlyOwner {\\n        if (orderId < ordersOnSell.length) deleteOrder(orderId, OrderType.ON_SELL);\\n    }\\n\\n    function setOrderOnSellByOwner(\\n        address user,\\n        uint256 amount,\\n        uint256 ticketPrice\\n    ) external onlyOwner {\\n        UserStats storage senderStats = userStats[user];\\n\\n        ordersOnSell.push(Order(OrderType.ON_SELL, amount, ticketPrice, user));\\n        senderStats.onSell += amount;\\n    }\\n\\n    function setOrderOnBuyByOwner(\\n        address user,\\n        uint256 amount,\\n        uint256 ticketPrice\\n    ) external onlyOwner {\\n        UserStats storage senderStats = userStats[user];\\n\\n        ordersOnBuy.push(Order(OrderType.ON_BUY, amount, ticketPrice, user));\\n        senderStats.onSell += amount;\\n    }\\n\\n    /* _-_-_-_-_-_-_-_-_-_-_- EMERGENCY WITHDRRAW LOGIC _-_-_-_-_-_-_-_-_-_-_- */\\n\\n    function withdrawEth() external onlyOwner {\\n        require(address(this).balance != 0, 'Zero ETH balance.');\\n\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}('');\\n        require(sent, 'Failed to send Ether');\\n    }\\n\\n    function withdrawERC20(address _randToken) external onlyOwner {\\n        IERC20 randToken = IERC20(_randToken);\\n\\n        require(\\n            randToken.balanceOf(address(this)) != 0,\\n            'Zero balance of current ERC20 token.'\\n        );\\n\\n        randToken.transfer(msg.sender, randToken.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\n\\r\\n// import 'hardhat/console.sol';\\r\\n\\r\\n/**\\r\\n * @title Address Set\\r\\n * @author GrandF17\\r\\n * @dev is supposed to be using for large arrays with O(1) complexity of next operations: add, find, remove\\r\\n */\\r\\nlibrary AddressSet {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint256) arrayIndex;\\r\\n        address[] participants;\\r\\n        uint256 length;\\r\\n    }\\r\\n\\r\\n    // zero index is always store zero address, and if arrayIndex equals zero --> address doesn't exist\\r\\n    function init(Storage storage currentSet) internal {\\r\\n        add(currentSet, address(0));\\r\\n    }\\r\\n\\r\\n    function find(\\r\\n        Storage storage currentSet,\\r\\n        address participant\\r\\n    ) internal view returns (bool) {\\r\\n        return currentSet.arrayIndex[participant] != 0;\\r\\n    }\\r\\n\\r\\n    function add(Storage storage currentSet, address participant) internal {\\r\\n        require(!find(currentSet, participant), 'Address already exists in the set');\\r\\n\\r\\n        currentSet.arrayIndex[participant] = currentSet.length;\\r\\n        currentSet.participants.push(participant);\\r\\n        currentSet.length = currentSet.length.add(1);\\r\\n    }\\r\\n\\r\\n    // function remove(Storage storage currentSet, address participant) internal {\\r\\n    //     require(\\r\\n    //         currentSet.find(participant),\\r\\n    //         'Address does not exist in the set'\\r\\n    //     );\\r\\n    //     arrayIndex[participant] = 0;\\r\\n    //     currentSet.length.sub(1);\\r\\n    // }\\r\\n    function remove(Storage storage currentSet, address participant) internal {\\r\\n        require(find(currentSet, participant), 'Address does not exist in the set');\\r\\n\\r\\n        uint256 index = currentSet.arrayIndex[participant];\\r\\n        currentSet.arrayIndex[participant] = 0;\\r\\n\\r\\n        address lastElement = currentSet.participants[currentSet.length.sub(1)];\\r\\n        currentSet.participants[index] = lastElement;\\r\\n        currentSet.arrayIndex[lastElement] = index;\\r\\n        currentSet.participants.pop();\\r\\n\\r\\n        currentSet.length = currentSet.length.sub(1);\\r\\n    }\\r\\n\\r\\n    function length(Storage storage currentSet) internal view returns (uint256) {\\r\\n        return currentSet.length.sub(1);\\r\\n    }\\r\\n\\r\\n    function isEmpty(Storage storage currentSet) internal view returns (bool) {\\r\\n        return length(currentSet) == 0;\\r\\n    }\\r\\n\\r\\n    function isNotEmpty(Storage storage currentSet) internal view returns (bool) {\\r\\n        return !isEmpty(currentSet);\\r\\n    }\\r\\n\\r\\n    function all(Storage storage currentSet) internal view returns (address[] memory) {\\r\\n        address[] memory tmpArray = new address[](currentSet.participants.length - 1);\\r\\n        for (uint i = 1; i < currentSet.participants.length; i++) {\\r\\n            tmpArray[i - 1] = currentSet.participants[i];\\r\\n        }\\r\\n        return tmpArray;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTicketsAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"deleteOrderOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"deleteOrderOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersOnBuy\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Staking.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eachTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Staking.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersOnSell\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Staking.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eachTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Staking.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ownedTicketsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.UserStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTicketsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOrdersOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOrdersOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeFee\",\"type\":\"uint256\"}],\"name\":\"setNativeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setOrderOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setOrderOnBuyByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setOrderOnSell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setOrderOnSellByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenom\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownedTicketsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onBuy\",\"type\":\"uint256\"}],\"name\":\"setUserStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randToken\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d722bac68242bc0b830667cd8999ae6dcdfaac690000000000000000000000000000000000000000000000000000000000000258000000000000000000000000842430e2a27bb379ffe323bf508d0f80e419e7220000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000038d7ea4c68000", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}