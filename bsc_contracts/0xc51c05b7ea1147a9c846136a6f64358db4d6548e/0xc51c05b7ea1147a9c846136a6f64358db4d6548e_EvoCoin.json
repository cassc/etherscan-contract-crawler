{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts/Bep20/EvoCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IBEP20Metadata.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/OwnableV2.sol\\\";\\nimport \\\"../interfaces/IView.sol\\\";\\n\\ncontract EvoCoin is IBEP20Metadata, OwnableV2\\n{\\n    IController controller;\\n    IView View;\\n    string public _name = \\\"EVOLUTION MULTY GAME\\\";  \\n    string public _symbol = \\\"EVO\\\"; \\n\\n    constructor ( address controllerAdr, address viewAdr)\\n    {\\n       controller = IController(controllerAdr);\\n       View = IView(viewAdr);\\n    }\\n\\n\\n\\n/// Metadata\\n    function name() public   override view returns (string memory)\\n    {\\n        return _name;\\n    }\\n    function symbol() public   override view returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n    function decimals() public   override pure returns (uint8)\\n    {\\n        return 18;\\n    }\\n///\\n\\n/// ERC20\\n    function totalSupply() public   override view returns (uint)\\n    {\\n        return View.totalSupply();\\n    }\\n    function balanceOf(address account) public   override view returns (uint)\\n    {\\n        return View.balanceOf(account);\\n    }\\n    function transfer(address recipient, uint amount) public override returns (bool)\\n    {\\n        require(View.balanceOf(msg.sender)>=amount,\\\"Not enougtht tokens\\\");\\n        require(recipient != address(0), \\\"pecipient is 0\\\" );\\n        bool answer = controller.transfer(msg.sender,recipient, amount);\\n        if (answer)\\n        {\\n            emit Transfer(msg.sender, recipient, amount);\\n        }\\n        return answer;\\n    }\\n    function allowance(address owner, address spender) public   override view returns (uint)\\n    {\\n        return View.allowance(owner, spender);\\n    }\\n    function approve(address spender, uint amount) external returns (bool)\\n    {\\n\\n        bool answer = controller.approve(msg.sender, spender, amount);\\n        if (answer)\\n        {\\n            emit Approval( msg.sender, spender, amount);\\n        }\\n        return answer;\\n    }\\n\\n\\n    function transferFrom(address from, address to, uint amount) external returns (bool)\\n    {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        bool answer = controller.transfer(from, to, amount);\\n        if (answer)\\n        {\\n            emit Transfer(from, to, amount);\\n        }\\n        return answer;\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint256 amount) private {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                controller.approve(owner, spender, currentAllowance - amount);\\n                emit Approval(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n\\n\\n/// ADMIN\\n    function setController(address _Controller) onlyOwner public\\n    {\\n        controller = IController(_Controller);\\n    }\\n    function setView (address newAdr)onlyOwner public\\n    {\\n        View = IView(newAdr);\\n    }\\n///    \\n}\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IView \\n{\\n    function isUserExist(address acc) external view returns(bool);\\n    function isUserExistById(uint id) external view returns(bool);\\n    function getReferalIdById(uint id) external view returns(uint);\\n    function getAddressById(uint id) external view returns (address);\\n    function getIdByAddress(address acc)external view returns(uint);\\n    function getUser(uint id)external view returns(address,uint,uint,uint8,uint);\\n    function getRefCount(uint id, uint8 lvl) external view returns (uint);\\n    function getStatsCount(uint id) external view returns (uint);\\n    function checkUpdate(uint id) external view returns(bool);\\n    function getLine (uint id) external view returns (uint[] memory);\\n    function totalSupply() external view returns (uint);\\n    function getEmission() external view returns(uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function getFrozenToken(address acc) external view returns(uint);\\n    function getFrozenDate(address acc) external view returns(uint);\\n    function balanceWithFrozen(address acc) external view returns(uint);\\n    function getDeposite(address acc) external view returns(uint);\\n    function getDepositeDate(address acc) external view returns(uint);\\n    function getDepositeProfit(address acc) external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract OwnableV2 is Context\\n{\\n    address _owner;\\n    address public _newOwner;\\n    constructor()  \\n    {\\n        _owner = payable(msg.sender);\\n    }\\n\\n    modifier onlyOwner() \\n    {\\n        require(_msgSender() == _owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address newOwner) onlyOwner public\\n    {\\n        _newOwner = newOwner;\\n    }\\n    function confirm() public\\n    {\\n        require(_newOwner == msg.sender);\\n        _owner = _newOwner;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IController \\n{\\n\\n    /// ERC20 \\n    function transfer(address owner, address recipient, uint amount) external returns (bool);\\n    function approve(address owner,address spender, uint amount) external returns (bool);\\n\\n    //// USER\\n    function register(address user, uint referlaId) external;\\n    function updateStatus(address acc)  external;\\n\\n    //// Deposite\\n    function deposite (address user,uint amount)external returns(bool);\\n    function withdrawProfit(address user) external;\\n    function withdrawAll(address user) external;\\n    function reinvest(address user) external;\\n\\n    /// unfrozen\\n    function setUnfrozenUser(address user) external;\\n    //// API\\n    function destroyToken(address acc, uint amount) external ;\\n    function addTokenforCoin(address acc, uint amount) external;\\n    function burn(uint amount) external;\\n    //// Presale\\n    function pay(address acc, uint amount) external returns(bool, uint,uint);\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IBEP20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IBEP20.sol\\\";\\n\\ninterface IBEP20Metadata is IBEP20 \\n{ \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract Context \\n{\\n    function _msgSender() internal view virtual returns (address) \\n    {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) \\n    {\\n        this; \\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function transferFrom(address sender,address recipient,uint amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerAdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"viewAdr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setView\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvoCoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006e979f241145e72cf7b1cc05b597b1162b1312b1000000000000000000000000584fccc54d3f46dd8afd6c595e7fb8a916e34e78", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}