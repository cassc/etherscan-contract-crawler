{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function sync() external;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\ncontract Pool {\r\n    constructor(address _father, address reToken){\r\n        IERC20(reToken).approve(_father, 2**256 - 1);\r\n    }\r\n}\r\n\r\ncontract MTCTOKEN is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => uint256) private _tOwnedU;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 private _tTotal;\r\n    address public _uniswapV2Pair;\r\n    address public _token;\r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _swaptime;\r\n    uint256 public _minPeriod;\r\n    uint256 public topValue;\r\n    address public router;\r\n    bool public _enMint = false;\r\n    address public  bonuspool;\r\n    address public  community;\r\n    address public  sediment;\r\n    address public  firstbonus;\r\n    mapping(address => uint256) public addLPTime;\r\n    mapping(address => uint256) public addLPAmount;\r\n    mapping(address => bool) public _isDividendExempt;\r\n    mapping(address => bool) public _nodefirst;\r\n    mapping(uint256 => uint256) public advertrate;\r\n\r\n    mapping(address => address) public invite;\r\n    mapping(address => uint256) public invitecounts;\r\n    mapping(address => uint256) public invitenodes;\r\n    mapping(address => bool) public invitenodeown;\r\n    mapping(address => mapping(address => uint256)) private invitefirst;\r\n    \r\n    EnumerableSet.AddressSet _shareholders;\r\n    EnumerableSet.AddressSet _communitynodes;\r\n    EnumerableSet.AddressSet _deletelist;\r\n    address private  admin = 0x0f7F4E5acF0b58DB0be9e09f8fa4DE2bD064b0c2;\r\n\r\n    constructor() {\r\n        router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        transferOwnership(admin);\r\n        setAdvertRate();\r\n        _token = 0x55d398326f99059fF775485246999027B3197955;\r\n        sediment = 0x1E7273def54b8f2499C31532880efD4406D704F1;\r\n        firstbonus = 0x82d3CFd137bdfC7f9f6028b562E8b97D15AB493D;\r\n        _name = \"MTC\";\r\n        _symbol = \"MTC\";\r\n        _decimals = uint8(18);\r\n        _tTotal = 140000700000 * (10**uint256(_decimals));\r\n        _minPeriod = 3600 * 24;\r\n        _tOwned[admin] = _tTotal;\r\n        topValue = 8;\r\n\r\n        emit Transfer(address(0), admin, _tTotal);\r\n        \r\n        Pool snOne = new Pool(address(this), _token);\r\n        bonuspool = address(snOne);\r\n        \r\n        Pool snTwo = new Pool(address(this), _token);\r\n        community = address(snTwo);\r\n        \r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[bonuspool] = true;\r\n        _isDividendExempt[community] = true;\r\n        _isDividendExempt[sediment] = true;\r\n        _isDividendExempt[firstbonus] = true;\r\n        _isDividendExempt[address(0)] = true;\r\n        _isDividendExempt[address(0xdead)] = true;\r\n        _isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;\r\n\r\n        _communitynodes.add(0xF9Eb7b1c8395e8F796d5f76a2522e38A19E84336);\r\n        _communitynodes.add(0xD9d19c2e191A70cA917781BB3D926b64B6A4E1f5);\r\n        _communitynodes.add(0x9c6dBD3Ed1d0899b4da3363D71C6682f958342c2);\r\n        _communitynodes.add(0x6bA6C753d021ae66d5c456dc7D2D41725B71Add3);\r\n        _communitynodes.add(0x86Dc89E213187D9242Ab2499f27759FdF9b3220c);\r\n        _communitynodes.add(0xF2a8e8adD98D529983DA4f09d7DaD61F419D1b22);\r\n        _communitynodes.add(0x237A2620bA60bfB0DFA059dbA443902BDee707B6);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (_startTimeForSwap == 0 && msg.sender == router) {\r\n            _startTimeForSwap = 1702468800;\r\n            _uniswapV2Pair = recipient;\r\n            _isDividendExempt[_uniswapV2Pair] = true;\r\n            IERC20(address(this)).approve(router, _tTotal);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 txamount = 0;\r\n        uint256 burnamount = 0;\r\n        if(amount == balanceOf(from)){\r\n            amount = amount.mul(9999).div(10000);\r\n        }\r\n        if(_currentIndex == 0 && _deletelist.length() > 0){\r\n            for (uint256 i = 0; i < _deletelist.length(); i++) {\r\n                if (_shareholders.contains(_deletelist.at(0))) _shareholders.remove(_deletelist.at(0));\r\n                _deletelist.remove(_deletelist.at(0));\r\n            }\r\n        }\r\n        if (_enMint) {\r\n            uint256 pricenow = getprice( address(this), _token, amount.mul(97).div(100));\r\n            if (!_isDividendExempt[to]) {\r\n                _tOwnedU[to] = _tOwnedU[to].add(pricenow);\r\n            }\r\n            if (!_isDividendExempt[from]) {\r\n                if (_tOwnedU[from] > pricenow) {\r\n                    _tOwnedU[from] = _tOwnedU[from].sub(pricenow);\r\n                } else if (_tOwnedU[from] > 0 && _tOwnedU[from] < pricenow) {\r\n                    burnamount = getprice( _token, address(this), pricenow.sub(_tOwnedU[from]) ).mul(20).div(100);\r\n                    _tOwnedU[from] = 0;\r\n                } else {\r\n                    burnamount = getprice(_token, address(this), pricenow).mul(20) .div(100);\r\n                    _tOwnedU[from] = 0;\r\n                }\r\n            }\r\n            if (from == _uniswapV2Pair && !_isDividendExempt[to]) {\r\n                if (_isRemoveLiquidity()) {\r\n                    uint256 removeLp = getremovelp(amount);\r\n                    if(_nodefirst[to] || (removeLp.add(balanceOf(to))).mul(99) > addLPAmount[to].mul(100)){\r\n                        removeLp = addLPAmount[to];\r\n                        txamount = amount.mul(99).div(100);\r\n                        _pushtxamount(from,amount,0,79,20);\r\n                    }else {\r\n                        txamount = amount.mul(4).div(100);                    \r\n                        _pushtxamount(from,amount,1,2,1);\r\n                    }\r\n                    if(invitenodeown[to] && invitenodes[invite[to]] > 0){\r\n                        invitenodes[invite[to]] -= 1 ;\r\n                        invitenodeown[to] = false;\r\n                    }\r\n                    addLPAmount[to] = addLPAmount[to].sub(removeLp);\r\n                } else {\r\n                    if(block.timestamp < (_swaptime + 600)){\r\n                        require(_getSwapU() <= 50*10**18);\r\n                        txamount = amount.mul(30).div(100);\r\n                        _basicTransfer(from, firstbonus, amount.mul(27).div(100));\r\n                    }else{\r\n                        txamount = amount.mul(3).div(100);\r\n                    }\r\n                    _pushtxamount(from,amount,1,1,1);\r\n                }\r\n            }\r\n            if (to == _uniswapV2Pair && !_isDividendExempt[from]) {\r\n                if (_isAddLiquidity()) {\r\n                    burnamount = 0;\r\n                    uint256 amountU = _getSwapU();\r\n                    uint256 amountlp = getaddlp(amountU,amount);\r\n\r\n                    _shareholders.add(from);\r\n                    addLPTime[from] = block.timestamp;\r\n                    addLPAmount[from] = addLPAmount[from].add(amountlp);\r\n\r\n                    if( amountU >= 50*10**18 && invite[from] != address(0) && invitenodeown[from] == false){\r\n                        invitenodes[invite[from]] += 1 ;\r\n                        invitenodeown[from] = true;\r\n                    }\r\n                } else {\r\n                    if(block.timestamp < (_swaptime + 600)){\r\n                        txamount = amount.mul(30).div(100);\r\n                        _basicTransfer(from, firstbonus, amount.mul(27).div(100));\r\n                    }else{\r\n                        txamount = amount.mul(3).div(100);\r\n                    }\r\n                    _pushtxamount(from,amount,1,1,1);\r\n                }\r\n            }\r\n            process();\r\n        }else{\r\n            if(from == _uniswapV2Pair || (to == _uniswapV2Pair && !_isAddLiquidity())){\r\n                require(from == owner());\r\n            }\r\n        }\r\n        if( burnamount > 0 ){\r\n            _advert(from,burnamount.mul(30).div(100));\r\n            _basicTransfer(from, bonuspool, burnamount.mul(70).div(100));\r\n        }\r\n\r\n        if (!_isDividendExempt[from] && !_isDividendExempt[to]) {\r\n            if (invite[to] == address(0) && from != to){\r\n                invitefirst[from][to] = amount;\r\n            }\r\n        }\r\n        if ( invite[from] == address(0) && invitefirst[to][from] > 0 && invitecounts[from] == 0 ) {\r\n            invite[from] = to;\r\n            invitecounts[to] = invitecounts[to].add(1);\r\n        }\r\n        \r\n        uint256 comamount = balanceOf(community);\r\n        uint256 comnumber = _communitynodes.length();\r\n        if(comamount > 1*10**18 &&  comnumber > 0){\r\n            for (uint256 j = 0; j < comnumber; j++) {\r\n                _basicTransfer( community, _communitynodes.at(j), comamount.div(comnumber) );\r\n            }                    \r\n        }\r\n        \r\n        _basicTransfer(from, to, amount.sub(txamount).sub(burnamount));\r\n    }\r\n\r\n    function _pushtxamount(address from, uint256 amount, uint256 rate1, uint256 rate2, uint256 rate3) private {\r\n        if( rate1 > 0 ){\r\n            _basicTransfer(from, community, amount.mul(rate1).div(100));\r\n        }\r\n        if(rate2 > 0 ){\r\n            _basicTransfer(from, bonuspool, amount.mul(rate2).div(100));\r\n        }\r\n        if(rate3 > 0 ){\r\n            _basicTransfer(from, address(0xdead), amount.mul(rate3).div(100));\r\n        }\r\n    }\r\n\r\n    function setEnMint(bool val) external onlyOwner {\r\n        _enMint = val;\r\n        _swaptime = block.timestamp;\r\n    }\r\n\r\n    function setTopValue(uint256 number) public {        \r\n        require(admin == msg.sender);\r\n        topValue = number;\r\n    }\r\n\r\n    function setSediment(address addr) public {        \r\n        require(admin == msg.sender);\r\n        sediment = addr;\r\n    }\r\n\r\n    function setNodeFirst(address addr, uint256 value) public {        \r\n        require(admin == msg.sender);\r\n        if(invite[addr] != address(0)){\r\n            invitenodes[invite[addr]] += 1 ;\r\n        }\r\n        invitenodeown[addr] = true;\r\n        _nodefirst[addr] = true;\r\n        addLPAmount[addr] = value;\r\n        addLPTime[addr] = block.timestamp;\r\n        _shareholders.add(addr);\r\n    }\r\n\r\n    function setCommunity(address addr, bool value) public {        \r\n        require(admin == msg.sender);\r\n        if(value){\r\n            _communitynodes.add(addr);\r\n        }else{\r\n            if (_communitynodes.contains(addr)) _communitynodes.remove(addr);\r\n        }\r\n    }\r\n\r\n    function getCommunity() public view returns (address[] memory) {\r\n        return _communitynodes.values();\r\n    }\r\n\r\n    function setAdvertRate(uint256 number, uint256 value) public {\r\n        require(admin == msg.sender);\r\n        advertrate[number] = value;\r\n    }\r\n\r\n    function setAdvertRate() private {\r\n        for (uint256 i = 0; i < 11; i++) {\r\n            advertrate[i] = 10;\r\n        }\r\n    }\r\n\r\n    function setMinTime(uint256 val) external onlyOwner {\r\n        _startTimeForSwap = val;\r\n    }\r\n\r\n    function getC() public view returns (uint256) {\r\n        return (block.timestamp - _startTimeForSwap) / _minPeriod;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _getSwapU() internal view returns (uint256 amount) {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        amount = bal.sub(r);\r\n    }\r\n\r\n    function getaddlp( uint256 amount0, uint256 amount1 ) private  view returns (uint256) {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 totallp = IERC20(_uniswapV2Pair).totalSupply();\r\n        uint256 liquidity;\r\n        if (_token < address(this)) {\r\n            liquidity = Math.min( amount0.mul(totallp) / r0, amount1.mul(totallp) / r1 );\r\n        } else {\r\n            liquidity = Math.min( amount1.mul(totallp) / r0, amount0.mul(totallp) / r1 );\r\n        }\r\n        return liquidity;\r\n    }\r\n    function getremovelp( uint256 amount) private  view returns (uint256) {\r\n        return amount.mul( IERC20(_uniswapV2Pair).totalSupply() ).div( balanceOf(_uniswapV2Pair).sub(amount) );\r\n    }\r\n\r\n    function getHolder() public view returns (address[] memory) {\r\n        return _shareholders.values();\r\n    }\r\n\r\n    function getHolder(uint256 i) public view returns (address) {\r\n        return _shareholders.at(i);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount, \"Insufficient Balance\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function getprice(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        uint256[] memory price = IUniswapV2Pair(router).getAmountsOut(\r\n            amount,\r\n            path\r\n        );\r\n        return price[1];\r\n    }\r\n\r\n    uint256 public lastClaimTime;\r\n    uint256 public everyDivi = 100;\r\n    uint256 public _currentIndex;\r\n    mapping(uint256 => uint256) public theDayMint;\r\n    mapping(uint256 => uint256) public theDayMinted;\r\n\r\n    function process() private {\r\n        uint256 today = getC();\r\n        if (today < lastClaimTime) {\r\n            return;\r\n        }\r\n        if(theDayMinted[today] >= theDayMint[today] && theDayMinted[today] > 0){\r\n            return;\r\n        }\r\n        uint256 shareholderCount = _shareholders.length();\r\n        if (shareholderCount == 0) return;\r\n        if (_currentIndex == 0) {\r\n            theDayMint[today] = balanceOf(bonuspool);\r\n            theDayMinted[today] = 0;\r\n        }\r\n\r\n        uint256 ss = everyDivi > shareholderCount ? shareholderCount : everyDivi;\r\n        address user;\r\n\r\n        for (uint256 i; i <= ss; i++) {\r\n            if (today < lastClaimTime) {\r\n                break;\r\n            }\r\n            if (_currentIndex >= shareholderCount) {\r\n                _currentIndex = 0;\r\n                lastClaimTime = today + 1;\r\n                break;\r\n            }\r\n            user = _shareholders.at(_currentIndex);\r\n\r\n            if(addLPAmount[user] < 1*10**18 || IERC20(_uniswapV2Pair).balanceOf(user).mul(100) < addLPAmount[user].mul(99)){\r\n                _deletelist.add(user);\r\n                _currentIndex++;\r\n                continue;\r\n            }\r\n\r\n            uint256 amount = theDayMint[today].mul(addLPAmount[user]).div(getLpTotal());\r\n            uint256 amountnow = balanceOf(_uniswapV2Pair).mul(addLPAmount[user]).div(IERC20(_uniswapV2Pair).totalSupply()).mul(topValue).div(100);\r\n            if(amount > amountnow){\r\n                amount = amountnow;\r\n            }\r\n\r\n            if ( amount < 1e13 || balanceOf(bonuspool) < amount || addLPTime[user] + (26 * 3600) > block.timestamp) {\r\n                _currentIndex++;\r\n                continue;\r\n            }\r\n\r\n            if (theDayMinted[today] + amount >= theDayMint[today]) {\r\n                amount = theDayMint[today] > theDayMinted[today] ? (theDayMint[today] - theDayMinted[today]) : 0;\r\n            }\r\n            if(amount > 0){\r\n                _basicTransfer( bonuspool, user, amount );\r\n            }\r\n\r\n            theDayMinted[today] += amount;\r\n            _currentIndex++;\r\n        }\r\n    }\r\n\r\n    function getLpTotal() public view returns (uint256) {\r\n        return\r\n            IERC20(_uniswapV2Pair).totalSupply() -\r\n            IERC20(_uniswapV2Pair).balanceOf( 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE ) -\r\n            IERC20(_uniswapV2Pair).balanceOf(address(0xdead));\r\n    }\r\n    \r\n    function _advert(address from, uint256 amount) private {\r\n        address recieve = from;\r\n        uint256 feeamount = 0;\r\n        for (uint256 i = 0; i < advertrate[0]; i++) {\r\n            recieve = invite[recieve];\r\n            if( recieve == address(0)){\r\n                break;\r\n            }\r\n            if (invitenodes[recieve] > i && invitenodeown[recieve]) {\r\n                feeamount = feeamount.add(amount.mul(advertrate[i+1]).div(100));\r\n                _basicTransfer(from, recieve, amount.mul(advertrate[i+1]).div(100));\r\n            }\r\n        }\r\n        if ( amount > feeamount ) {\r\n            _basicTransfer(from, sediment, amount.sub(feeamount));\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nodefirst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swaptime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advertrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonuspool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everyDivi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstbonus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunity\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitecounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitenodeown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitenodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sediment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAdvertRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setEnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMinTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setNodeFirst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSediment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setTopValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theDayMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theDayMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MTCTOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa126e5b465b02557ecead52ff1f5f5b3b0d719e893eeec0f95d1016d316fdc6"}