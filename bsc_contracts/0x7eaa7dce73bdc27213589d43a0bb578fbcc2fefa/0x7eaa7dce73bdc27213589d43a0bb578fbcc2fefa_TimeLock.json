{"SourceCode": "{\"Context.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"TokenTimelock.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface IERC20Trusted is IERC20 {\\n    function transferTrusted(address recipient, uint256 amount)\\n    external\\n    returns (bool);\\n\\n    function transferFromTrusted(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ncontract TimeLock is Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    uint256 public percent;\\n    uint256 public poolsCount;\\n    poolName[] poolNamesArray;\\n    IERC20Trusted token;\\n\\n    mapping(string =\\u003e mapping(address =\\u003e LockBoxStruct[])) public boxPool;\\n    mapping(string =\\u003e poolData) public poolLockTime;\\n    mapping(address =\\u003e LPLocker[]) public liquidityLocker;\\n\\n    struct LockBoxStruct {\\n        address beneficiary;\\n        uint256 total;\\n        uint256 balance;\\n        uint256 payed;\\n        uint256 depositTime;\\n        uint256 periodsPassed;\\n    }\\n\\n    struct poolData {\\n        string name;\\n        uint256 lockPeriod;\\n        uint256 periodLength;\\n        uint256 periodsNumber;\\n        uint256 percent;\\n        bool exists;\\n        uint256 startTime;\\n        uint256 cap;\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct bulkDeposit {\\n        address beneficiary;\\n        uint256 amount;\\n    }\\n\\n    struct poolName {\\n        string name;\\n    }\\n\\n    struct LPLocker {\\n        address lp;\\n        uint256 amount;\\n        uint256 tillBlockTime;\\n    }\\n\\n    event LogLockBoxDeposit(\\n        address sender,\\n        uint256 amount,\\n        uint256 releaseTime,\\n        string pool\\n    );\\n    event LogLockBoxWithdrawal(address receiver, uint256 amount);\\n    event PoolAdded(string name);\\n\\n    constructor(address tokenContract) {\\n        token = IERC20Trusted(tokenContract);\\n        percent = 1000000; // 100% * 10000   / 1% = 10000\\n    }\\n\\n    function initPools(uint256 startTime) external onlyOwner {\\n        // TGE round pools\\n        _addPool(\\\"angel_round\\\", 0, 30 days, 10, percent.div(10), startTime, _setAmount(5733334));\\n        _addPool(\\\"seed_round\\\", 0, 30 days, 9, percent.div(9), startTime, _setAmount(5800000));\\n        _addPool(\\\"strategic_round\\\", 30 days, 30 days, 7, percent.div(7), startTime, _setAmount(6732534));\\n        _addPool(\\\"private_round\\\", 30 days, 30 days, 6, percent.div(6), startTime, _setAmount(6221588));\\n        _addPool(\\\"caghan_round\\\", 30 days, 30 days, 10, percent.div(10), startTime, _setAmount(3599879));\\n\\n        // Internal distribution\\n        _addPool(\\\"team\\\", 3*30 days, 3*30 days, 6, percent.div(6), startTime, _setAmount(11499999)); // 16.66% every 3 Months\\n        _addPool(\\\"advisors\\\", 0, 30 days, 6, percent.div(6), startTime, _setAmount(7700000)); // 16.66% every 1 Months\\n        _addPool(\\\"operations\\\", 2*30 days, 30 days, 10, percent.div(10), startTime, _setAmount(8650000)); // 10% every 1 Months\\n        _addPool(\\\"marketing\\\", 2*30 days, 30 days, 20, percent.div(20), startTime, _setAmount(8650000)); // 5% every 1 Months\\n        _addPool(\\\"development\\\", 6*30 days, 3*30 days, 8, percent.div(8), startTime, _setAmount(9600000)); // 12.5% every 3 Months\\n        _addPool(\\\"partnership\\\", 1*30 days, 30 days, 10, percent.div(10), startTime, _setAmount(9600000)); // 10% every 1 Months\\n\\n    }\\n\\n    function lockLPToken(address LP, uint256 amount, uint256 lockTimeSeconds) external onlyOwner {\\n        require(lockTimeSeconds \\u003c 630720000, \\\"Lock: period should be less than 20 years\\\");\\n        LPLocker memory lock;\\n        IERC20 lpToken = IERC20(LP);\\n        require(lpToken.transferFrom(_msgSender(), address(this), amount), \\\"LP: transferFrom error\\\");\\n        lock.amount = amount;\\n        lock.lp = LP;\\n        lock.tillBlockTime = block.timestamp.add(lockTimeSeconds);\\n        liquidityLocker[LP].push(lock);\\n    }\\n\\n    function continueLock(address LP, uint256 id, uint256 lockTimeSeconds) external onlyOwner {\\n        require(lockTimeSeconds \\u003c 630720000, \\\"Lock: period should be less than 20 years\\\");\\n        liquidityLocker[LP][id].tillBlockTime = liquidityLocker[LP][id].tillBlockTime.add(lockTimeSeconds);\\n    }\\n\\n    function withdrawLocked(address LP, uint256 id) external onlyOwner {\\n        require(id \\u003c liquidityLocker[LP].length, \\\"Locker: wrong id\\\");\\n        LPLocker memory lock = liquidityLocker[LP][id];\\n        require(block.timestamp \\u003e lock.tillBlockTime, \\\"Locker: LP tokens still locked\\\");\\n        require(IERC20(lock.lp).transfer(_msgSender(), lock.amount), \\\"Locker: unable to transfer\\\");\\n        liquidityLocker[LP][id] = liquidityLocker[LP][liquidityLocker[LP].length.sub(1)];\\n        liquidityLocker[LP].pop();\\n    }\\n\\n    function addPool(\\n        string calldata name,\\n        uint256 lockPeriod,\\n        uint256 periodLength,\\n        uint256 periodsNumber,\\n        uint256 percentPerNumber,\\n        uint256 startTime,\\n        uint256 cap\\n    ) external onlyOwner returns (bool success) {\\n        _addPool(\\n            name,\\n            lockPeriod,\\n            periodLength,\\n            periodsNumber,\\n            percentPerNumber,\\n            startTime,\\n            cap\\n        );\\n        return true;\\n    }\\n\\n    function bulkUploadDeposits(bytes calldata data, string calldata _poolName)\\n    external\\n    onlyOwner\\n    {\\n        bulkDeposit[] memory depositArray = abi.decode(data, (bulkDeposit[]));\\n        for (uint8 i = 0; i \\u003c depositArray.length; i++) {\\n            deposit(\\n                depositArray[i].beneficiary,\\n                depositArray[i].amount,\\n                _poolName\\n            );\\n        }\\n    }\\n\\n    function withdraw(\\n        uint256 lockBoxNumber,\\n        address beneficiary,\\n        string calldata _poolName\\n    ) external returns (bool) {\\n        require(poolLockTime[_poolName].exists, \\\"Pool: not exists\\\");\\n        LockBoxStruct storage l = boxPool[_poolName][_msgSender()][\\n        lockBoxNumber\\n        ];\\n        require(l.balance \\u003e 0, \\\"Benefeciary does not exists\\\");\\n        uint256 _unlockTime = l.depositTime.add(\\n            poolLockTime[_poolName].lockPeriod\\n        );\\n        require(_unlockTime \\u003c block.timestamp, \\\"Funds locked\\\");\\n\\n        (uint256 amount, uint256 periods) = _calculateUnlockedTokens(\\n            beneficiary,\\n            lockBoxNumber,\\n            _poolName\\n        );\\n\\n        l.balance = l.balance.sub(amount);\\n        l.payed = l.payed.add(amount);\\n        l.periodsPassed = periods;\\n        require(\\n            token.balanceOf(address(this)) \\u003e= amount \\u0026\\u0026 amount \\u003e 0,\\n            \\\"Wrong amount or balance\\\"\\n        );\\n        require(\\n            token.transferTrusted(_msgSender(), amount),\\n            \\\"Cannot send to beneficiary\\\"\\n        );\\n        poolLockTime[_poolName].withdrawn = poolLockTime[_poolName]\\n        .withdrawn\\n        .add(amount);\\n        emit LogLockBoxWithdrawal(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    function getBeneficiaryStructs(string calldata _poolName, address beneficiary)\\n    external\\n    view\\n    returns (LockBoxStruct[] memory)\\n    {\\n        require(poolLockTime[_poolName].exists, \\\"Pool: not exists\\\");\\n        return boxPool[_poolName][beneficiary];\\n    }\\n\\n    function getPools() external view returns (poolName[] memory) {\\n        return poolNamesArray;\\n    }\\n\\n    function getTokensAvailable(\\n        string calldata _poolName,\\n        address beneficiary,\\n        uint256 id\\n    )\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        require(poolLockTime[_poolName].exists, \\\"Pool: not exists\\\");\\n        (uint256 amount, uint256 periods) = _calculateUnlockedTokens(\\n            beneficiary,\\n            id,\\n            _poolName\\n        );\\n        poolData memory pool = poolLockTime[_poolName];\\n        uint256 timeToUnlock = pool.startTime.add(pool.lockPeriod) \\u003e\\n        block.timestamp\\n        ? pool.startTime.add(pool.lockPeriod).sub(block.timestamp)\\n        : 0;\\n        return (amount, timeToUnlock, periods);\\n    }\\n\\n    function deposit(\\n        address beneficiary,\\n        uint256 amount,\\n        string memory _poolName\\n    ) public onlyOwner returns (bool success) {\\n        require(poolLockTime[_poolName].exists, \\\"Pool: not exists\\\");\\n        require(\\n            poolLockTime[_poolName].deposited.add(amount) \\u003c=\\n            poolLockTime[_poolName].cap,\\n            \\\"Pool: cap exceded\\\"\\n        );\\n\\n        LockBoxStruct memory l;\\n        l.beneficiary = beneficiary;\\n        l.balance = amount;\\n        l.total = amount;\\n        l.payed = 0;\\n        l.depositTime = poolLockTime[_poolName].startTime;\\n        l.periodsPassed = 0;\\n        boxPool[_poolName][beneficiary].push(l);\\n        poolLockTime[_poolName].deposited = poolLockTime[_poolName]\\n        .deposited\\n        .add(amount);\\n        require(\\n            token.transferFromTrusted(_msgSender(), address(this), amount),\\n            \\\"Unable to transfer\\\"\\n        );\\n        emit LogLockBoxDeposit(\\n            _msgSender(),\\n            amount,\\n            poolLockTime[_poolName].lockPeriod,\\n            _poolName\\n        );\\n        return true;\\n    }\\n\\n    function getMapCount(address beneficiary, string memory _poolName)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        require(poolLockTime[_poolName].exists, \\\"Pool: not exists\\\");\\n        return boxPool[_poolName][beneficiary].length;\\n    }\\n\\n    function _setAmount(uint256 amount) internal pure returns (uint256) {\\n        uint256 oneToken = 1e18;\\n        return oneToken.mul(amount);\\n    }\\n\\n    function _addPool(\\n        string memory name,\\n        uint256 lockPeriod,\\n        uint256 periodLength,\\n        uint256 periodsNumber,\\n        uint256 percentPerNumber,\\n        uint256 startTime,\\n        uint256 cap\\n    ) internal returns (bool success) {\\n        require(!poolLockTime[name].exists, \\\"Pool: already exists\\\");\\n        require(\\n            periodsNumber.mul(percentPerNumber) \\u003c= percent,\\n            \\\"Pool: percents exceeded limit\\\"\\n        );\\n\\n        poolName memory pD;\\n        poolLockTime[name].name = name;\\n        poolLockTime[name].lockPeriod = lockPeriod;\\n        poolLockTime[name].periodLength = periodLength;\\n        poolLockTime[name].periodsNumber = periodsNumber;\\n        poolLockTime[name].percent = percentPerNumber;\\n        poolLockTime[name].cap = cap;\\n        poolLockTime[name].exists = true;\\n        poolLockTime[name].startTime = startTime;\\n        poolLockTime[name].deposited = 0;\\n        poolLockTime[name].withdrawn = 0;\\n        poolsCount = poolsCount.add(1);\\n\\n        pD.name = name;\\n        poolNamesArray.push(pD);\\n        emit PoolAdded(name);\\n        return true;\\n    }\\n\\n    function _calculateUnlockedTokens(\\n        address _beneficiary,\\n        uint256 _boxNumber,\\n        string memory _poolName\\n    ) private view returns (uint256, uint256) {\\n        LockBoxStruct memory box = boxPool[_poolName][_beneficiary][_boxNumber];\\n        poolData memory pool = poolLockTime[_poolName];\\n        uint256 _cliff = pool.lockPeriod;\\n        uint256 _periodLength = pool.periodLength;\\n        uint256 _periodAmount = (box.total * pool.percent) / percent;\\n        uint256 _periodsNumber = pool.periodsNumber;\\n\\n        if(box.depositTime.add(_cliff) \\u003e block.timestamp) {\\n            return (0, 0);\\n        }\\n\\n        uint256 periods = block.timestamp.sub(box.depositTime.add(_cliff)).div(\\n            _periodLength\\n        );\\n        periods = periods \\u003e _periodsNumber ? _periodsNumber : periods;\\n        uint256 periodsToSend = periods.sub(box.periodsPassed);\\n\\n        if (box.periodsPassed == _periodsNumber \\u0026\\u0026 box.total.sub(box.payed) \\u003e 0) {\\n            return (box.total.sub(box.payed), periods);\\n        }\\n\\n        return (periodsToSend.mul(_periodAmount), periods);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pool\",\"type\":\"string\"}],\"name\":\"LogLockBoxDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogLockBoxWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentPerNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPassed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"}],\"name\":\"bulkUploadDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeSeconds\",\"type\":\"uint256\"}],\"name\":\"continueLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryStructs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPassed\",\"type\":\"uint256\"}],\"internalType\":\"struct TimeLock.LockBoxStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"}],\"name\":\"getMapCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct TimeLock.poolName[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"initPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tillBlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeSeconds\",\"type\":\"uint256\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"poolLockTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockBoxNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TimeLock", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000001e0d17a533e5930a349c2bb71304f04f20ab12b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d927eabf7897d5fa0281652c3099dc3ec1bf96c0fdf9c11056021fd488ea7cb"}