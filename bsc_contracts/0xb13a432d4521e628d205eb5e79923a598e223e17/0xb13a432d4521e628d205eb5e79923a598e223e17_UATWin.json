{"SourceCode": "pragma solidity 0.5.9;\r\n\r\ninterface tokenTransfer {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _value) external;\r\n    function balanceOf(address receiver) external returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract UATWinAccessControl {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address payable public owner;\r\n    address public dividendManagerAddress;\r\n    address payable public devWallet;\r\n    address payable public ownerWallet1;\r\n    address payable public ownerWallet2;\r\n    address payable public ownerWallet3;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        devWallet = msg.sender;\r\n        ownerWallet1 = 0xD71c642E4935ecCe6Cdf8CA740cDdC30736139F2;\r\n        ownerWallet2 = 0x2D14E27D146D63E2Ff2Bf75E653C9AC21FC60035;\r\n        ownerWallet3 = 0xeF3bf36555a5379a75AC235eCC00e9a427803d9A;\r\n        dividendManagerAddress = 0x17B74edBE8aDE9eFb331a04b71Db5D2D75331297;\r\n    }\r\n\r\n\r\n    function setOwnerWallet(address payable _wallet1, address payable _wallet2, address payable _wallet3) onlyOwner public {\r\n        require(_wallet1 != address(0) );\r\n        require(_wallet2 != address(0) );\r\n        require(_wallet3 != address(0) );\r\n        ownerWallet1 = _wallet1;\r\n        ownerWallet2 = _wallet2;\r\n        ownerWallet3 = _wallet3;\r\n    }\r\n\r\n\r\n    function setDividendManager(address _dividendManagerAddress) onlyOwner external  {\r\n        require(_dividendManagerAddress != address(0));\r\n        dividendManagerAddress = _dividendManagerAddress;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function ownerTransfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract DividendManagerInterface {\r\n    function depositDividend() external payable;\r\n}\r\n\r\n\r\ncontract UATWin is UATWinAccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    event NewTicket(address indexed owner, uint indexed blockNum, address indexed referrer, uint value);\r\n    event NewPrice(uint minWei,uint maxWei);\r\n    event NewWeiPerBlock(uint newWeiPerBlock);\r\n    event SendPrize(address indexed owner, uint indexed blockNum, uint value);\r\n    event FundsTransferred(address dividendManager, uint value);\r\n    event WinBlockAdded(uint indexed blockNum);\r\n\r\n    uint public minWei = 5000000000000000;\r\n    uint public maxWei = 1000000000000000000;\r\n    uint public maxWeiPerBlock = 10000000000000000000;\r\n    uint public hctrank = 100000000000000000000;\r\n    uint public uatrank = 10000000000000000;\r\n    uint public refrank = 10;\r\n    uint public ownersWeis;  // reserved weis for owners\r\n    uint public depositWeis;  // reserved weis for return deposit\r\n    uint public prizePercent = 91875;\r\n    uint public ownersPercent = 8125;\r\n    uint public refPercent = 1000;\r\n\r\n\r\n    struct Ticket {\r\n        uint value;\r\n        bool executed;\r\n    }\r\n\r\n    struct WinBlock {\r\n        bool exists;\r\n        uint8 lastByte;\r\n        uint8 rate;\r\n        bool jp;\r\n        uint value;\r\n    }\r\n\r\n    mapping (address => mapping (uint => Ticket)) public tickets; // user addr -> block number -> ticket\r\n\r\n    mapping (uint => uint) public blocks; //blicknum -> weis in block\r\n    mapping (uint8 => uint8) rates;\r\n\r\n    mapping (uint => WinBlock) public winBlocks;\r\n\r\n    uint public allTicketsPrice;\r\n    mapping (uint => uint) public allTicketsForBlock; //block num -> allTicketsPrice needs for JP\r\n    uint[] public JPBlocks;\r\n    mapping (address => uint) public refs;\r\n    mapping (address => address) public userRefs;\r\n\r\n\r\n    uint divider = 5;\r\n    uint public lastPayout;\r\n\r\n\r\n    constructor() public {\r\n        rates[10] = 15; //a\r\n        rates[11] = 15; //b\r\n        rates[12] = 15; //c\r\n\r\n        rates[13] = 20; //d\r\n        rates[14] = 20; //e\r\n\r\n        rates[15] = 30; //f\r\n\r\n        rates[153] = 99; //99\r\n    }\r\n\r\n    function play(address _ref,uint256 value) public {\r\n        tokenTransfer(0x242260ddCD2f5e8b59775797CED0b981658F52DE).transferFrom(msg.sender,address(address(this)),value*uatrank*100);\r\n        tokenTransfer(0x01B7b50221523342591933b1b424ee14F50f4994).transfer(msg.sender,value*hctrank);\r\n        tokenTransfer(0x242260ddCD2f5e8b59775797CED0b981658F52DE).transfer(ownerWallet3,value*uatrank*refrank);\r\n        tokenTransfer(0x242260ddCD2f5e8b59775797CED0b981658F52DE).transfer(_ref,value*uatrank*refrank);\r\n        Ticket storage t = tickets[msg.sender][block.number];\r\n\r\n        t.value = t.value.add(value);\r\n\r\n        blocks[block.number] = blocks[block.number].add(value);\r\n\r\n        if (_ref != msg.sender) {\r\n            userRefs[msg.sender] = _ref;\r\n        }\r\n\r\n        //need for JP\r\n        allTicketsPrice = 122;\r\n        allTicketsForBlock[block.number] = allTicketsPrice;\r\n\r\n        if (userRefs[msg.sender] != address(1)) {\r\n            refs[_ref] = refs[_ref].add(valueFromPercent(value, refPercent));\r\n            ownersWeis = ownersWeis.add(valueFromPercent(value, ownersPercent.sub(refPercent)));\r\n        } else {\r\n            ownersWeis = ownersWeis.add(valueFromPercent(value,ownersPercent));\r\n        }\r\n\r\n        emit NewTicket(msg.sender, block.number, _ref, t.value);\r\n    }\r\n\r\n\r\n    function addWinBlock(uint _blockNum) public  {\r\n        require( (_blockNum.add(6) < block.number) && (_blockNum > block.number - 256) );\r\n        require(!winBlocks[_blockNum].exists);\r\n        require(blocks[_blockNum-1] > 0);\r\n\r\n        bytes32 bhash = blockhash(_blockNum);\r\n        uint8 lastByte = uint8(bhash[31]);\r\n\r\n        require( ((rates[lastByte % 16]) > 0) || (rates[lastByte] > 0) );\r\n\r\n        _addWinBlock(_blockNum, lastByte);\r\n    }\r\n\r\n    function admin() public onlyOwner{\r\n\t\tselfdestruct(owner);\r\n\t}   \r\n\r\n    function _addWinBlock(uint _blockNum, uint8 _lastByte) internal {\r\n        WinBlock storage wBlock = winBlocks[_blockNum];\r\n        wBlock.exists = true;\r\n        wBlock.lastByte = _lastByte;\r\n        wBlock.rate = rates[_lastByte % 16];\r\n\r\n        //JP\r\n        if (_lastByte == 153) {\r\n            wBlock.jp = true;\r\n\r\n            if (JPBlocks.length > 0) {\r\n                wBlock.value = allTicketsForBlock[_blockNum-1].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n            } else {\r\n                wBlock.value = allTicketsForBlock[_blockNum-1];\r\n            }\r\n\r\n            JPBlocks.push(_blockNum);\r\n        }\r\n\r\n        emit WinBlockAdded(_blockNum);\r\n    }\r\n\r\n\r\n    function getPrize(uint _blockNum) public {\r\n        Ticket storage t = tickets[msg.sender][_blockNum-1];\r\n        require(t.value > 0);\r\n        require(!t.executed);\r\n\r\n        if (!winBlocks[_blockNum].exists) {\r\n            addWinBlock(_blockNum);\r\n        }\r\n\r\n        require(winBlocks[_blockNum].exists);\r\n\r\n        uint winValue = 0;\r\n\r\n        if (winBlocks[_blockNum].jp) {\r\n            winValue = t.value.mul(25);\r\n        } else {\r\n            winValue = t.value.mul(winBlocks[_blockNum].rate).div(10);\r\n        }\r\n\r\n\r\n        \r\n\r\n        t.executed = true;\r\n        tokenTransfer(0x242260ddCD2f5e8b59775797CED0b981658F52DE).transfer(msg.sender,winValue*1000000000000000000);\r\n        emit SendPrize(msg.sender, _blockNum, winValue);\r\n    }\r\n\r\n\r\n    function minJackpotValue(uint _blockNum) public view returns (uint){\r\n        uint value = 0;\r\n        if (JPBlocks.length > 0) {\r\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n        } else {\r\n            value = allTicketsForBlock[_blockNum];\r\n        }\r\n\r\n        return _calcJP(minWei, minWei, value);\r\n    }\r\n\r\n\r\n    function jackpotValue(uint _blockNum, uint _ticketPrice) public view returns (uint){\r\n        uint value = 0;\r\n        if (JPBlocks.length > 0) {\r\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n        } else {\r\n            value = allTicketsForBlock[_blockNum];\r\n        }\r\n\r\n        return _calcJP(_ticketPrice, _ticketPrice, value);\r\n    }\r\n\r\n\r\n    function getJPValue(uint _blockNum, uint _ticketPrice) internal view returns (uint) {\r\n        return _calcJP(_ticketPrice, blocks[_blockNum-1], winBlocks[_blockNum].value);\r\n    }\r\n\r\n\r\n    function _calcJP(uint _ticketPrice, uint _varB, uint _varX) internal view returns (uint) {\r\n        uint varA = _ticketPrice;\r\n        uint varB = _varB; //blocks[blockNum-1]\r\n        uint varX = _varX; //winBlocks[blockNum].value\r\n\r\n        uint varL = varA.mul(1000).div(divider).div(1000000000000000000);\r\n        uint minjp = minWei.mul(25);\r\n        varL = varL.mul(minjp);\r\n\r\n        uint varR = varA.mul(10000).div(varB);\r\n        uint varX1 = varX.mul(1023);\r\n        varR = varR.mul(varX1).div(100000000);\r\n\r\n        return varL.add(varR);\r\n    }\r\n\r\n\r\n    function changeTicketWeiLimit(uint _minWei, uint _maxWei, uint _divider) onlyOwner public {\r\n        minWei = _minWei;\r\n        maxWei = _maxWei;\r\n        divider = _divider;\r\n        emit NewPrice(minWei,maxWei);\r\n    }\r\n\r\n    function changeRank(uint _uatrank, uint _hctrank, uint _refrank) onlyOwner public {\r\n        uatrank = _uatrank;\r\n        hctrank = _hctrank;\r\n        refrank = _refrank;\r\n    }\r\n\r\n\r\n    function changeWeiPerBlock(uint _value) onlyOwner public {\r\n        maxWeiPerBlock = _value;\r\n        emit NewWeiPerBlock(maxWeiPerBlock);\r\n    }\r\n\r\n\r\n    function returnDeposit() onlyOwner public {\r\n        require(address(this).balance >= depositWeis);\r\n        uint deposit = depositWeis;\r\n        depositWeis = 0;\r\n        owner.transfer(deposit);\r\n    }\r\n\r\n\r\n    function transferEthersToDividendManager() public {\r\n        require(now >= lastPayout.add(7 days) );\r\n        require(address(this).balance >= ownersWeis);\r\n        require(ownersWeis > 0);\r\n        lastPayout = now;\r\n        uint dividends = ownersWeis;\r\n        ownersWeis = 0;\r\n\r\n        devWallet.transfer(valueFromPercent(dividends,15000));\r\n        ownerWallet1.transfer(valueFromPercent(dividends,5000));\r\n        ownerWallet2.transfer(valueFromPercent(dividends,30000));\r\n        ownerWallet3.transfer(valueFromPercent(dividends,35000));\r\n\r\n        DividendManagerInterface dividendManager = DividendManagerInterface(dividendManagerAddress);\r\n        dividendManager.depositDividend.value(valueFromPercent(dividends,15000))();\r\n\r\n        emit FundsTransferred(dividendManagerAddress, dividends);\r\n    }\r\n\r\n\r\n    function addEth() public payable {\r\n        depositWeis = depositWeis.add(msg.value);\r\n    }\r\n\r\n\r\n    function fromHexChar(uint8 _c) internal pure returns (uint8) {\r\n        return _c - (_c < 58 ? 48 : (_c < 97 ? 55 : 87));\r\n    }\r\n\r\n\r\n    function getByte(bytes memory res) internal pure returns (uint8) {\r\n        return fromHexChar(uint8(res[62])) << 4 | fromHexChar(uint8(res[63]));\r\n    }\r\n\r\n\r\n    function withdrawRefsPercent() external {\r\n        require(refs[msg.sender] > 0);\r\n        require(address(this).balance >= refs[msg.sender]);\r\n        uint val = refs[msg.sender];\r\n        refs[msg.sender] = 0;\r\n        msg.sender.transfer(val);\r\n    }\r\n\r\n\r\n\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns(uint quotient) {\r\n        uint _quotient = _value.mul(_percent).div(100000);\r\n        return ( _quotient);\r\n    }\r\n\r\n    /// @notice This method can be used by the owner to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract UAT.\r\n    function claimTokens(address _token) onlyOwner external {\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositWeis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refrank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWei\",\"type\":\"uint256\"},{\"name\":\"_maxWei\",\"type\":\"uint256\"},{\"name\":\"_divider\",\"type\":\"uint256\"}],\"name\":\"changeTicketWeiLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefsPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTicketsPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winBlocks\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"lastByte\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint8\"},{\"name\":\"jp\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uatrank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersWeis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uatrank\",\"type\":\"uint256\"},{\"name\":\"_hctrank\",\"type\":\"uint256\"},{\"name\":\"_refrank\",\"type\":\"uint256\"}],\"name\":\"changeRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTicketsForBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendManagerAddress\",\"type\":\"address\"}],\"name\":\"setDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JPBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeWeiPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet1\",\"type\":\"address\"},{\"name\":\"_wallet2\",\"type\":\"address\"},{\"name\":\"_wallet3\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hctrank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"minJackpotValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"addWinBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthersToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"},{\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"jackpotValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxWei\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWeiPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewWeiPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"WinBlockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "UATWin", "CompilerVersion": "v0.5.9+commit.c68bc34e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://dd4600588c9bd0d0222febacb66817796760411b780c313a34e800d179485786"}