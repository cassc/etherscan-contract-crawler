{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract NOPIPrivateSale {\r\n    IERC20 public token;\r\n    address public owner;\r\n    uint256 public rate; // Number of tokens per BNB\r\n    uint256 public maxPurchase; // Max tokens that can be bought by each user\r\n    mapping(address => uint256) public purchasedTokens;\r\n    mapping(uint256 => address) private referralMapping;\r\n    uint256 private constant REFERRAL_BONUS_PERCENTAGE = 10;\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _rate,\r\n        uint256 _maxPurchase\r\n    ) {\r\n        require(_rate > 0, \"Rate should be greater than 0\");\r\n        require(_maxPurchase > 0, \"Max purchase should be greater than 0\");\r\n\r\n        token = IERC20(_token);\r\n        owner = msg.sender;\r\n        rate = _rate;\r\n        maxPurchase = _maxPurchase;\r\n    }\r\n\r\n    receive() external payable {\r\n        // Ensure BNBs are sent to the contract\r\n       \r\n    }\r\n\r\n    function setReferral(uint256 refCode, address referrer) public {\r\n        require(msg.sender == owner, \"Only owner can add referrers!\");\r\n        // Only owner or admin can set referral\r\n        referralMapping[refCode] = referrer;\r\n    }\r\n\r\n    function getReferrer(uint256 refCode) public view returns (address) {\r\n        \r\n        return referralMapping[refCode];\r\n    }\r\n\r\n    function buyTokens(uint256 tokenAmount, uint256 refCode) public payable {\r\n        uint256 requiredBNB = tokenAmount / rate;\r\n        require(msg.value >= requiredBNB, \"Not enough BNB sent\");\r\n        require(tokenAmount <= maxPurchase, \"Exceeds max purchase limit\");\r\n        require(\r\n            purchasedTokens[msg.sender] + tokenAmount <= maxPurchase,\r\n            \"Purchase limit exceeded\"\r\n        );\r\n\r\n        purchasedTokens[msg.sender] += tokenAmount;\r\n        \r\n\r\n        if (referralMapping[refCode] != address(0)) {\r\n            payable(referralMapping[refCode]).transfer(msg.value * REFERRAL_BONUS_PERCENTAGE / 100);\r\n        }\r\n        \r\n        payable(0xfd9134d64Ac280c01b1D2AE79cbD070458f4Bc9c).transfer(msg.value * 90 /100);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == owner, \"Only owner can withdraw funds\");\r\n\r\n        // Transfer BNB balance to owner\r\n        payable(owner).transfer(address(this).balance);\r\n\r\n        // Transfer remaining tokens to owner\r\n        uint256 remainingTokens = token.balanceOf(address(this));\r\n        if (remainingTokens > 0) {\r\n            token.transfer(owner, remainingTokens);\r\n        }\r\n    }\r\n\r\n    function setRate(uint256 newRate) public {\r\n        require(msg.sender == owner, \"Only owner can set rate\");\r\n        rate = newRate;\r\n    }\r\n\r\n    function setMaxPurchase(uint256 newMaxPurchase) public {\r\n        require(msg.sender == owner, \"Only owner can set max purchase\");\r\n        maxPurchase = newMaxPurchase;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCode\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refCode\",\"type\":\"uint256\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxPurchase\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refCode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NOPIPrivateSale", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bad3b2c0bc62f4b5e1c59d09cac11a8544e5e7ff0000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000a56fa5b99019a5c800000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://834fbab8254259b860b5fac0006b32e6e8927e664367086963a39d4b9203acfd"}