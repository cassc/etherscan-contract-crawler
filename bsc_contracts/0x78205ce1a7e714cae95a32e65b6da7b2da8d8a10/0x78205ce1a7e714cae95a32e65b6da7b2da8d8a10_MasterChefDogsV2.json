{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterChefDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./DogsTokenV2.sol\\\";\\nimport \\\"./interfaces/IDDSCA.sol\\\";\\nimport \\\"./interfaces/IFeeManager.sol\\\";\\nimport \\\"./interfaces/IReferralSystem.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\ncontract MasterChefDogsV2 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public PLATFORM_ADDRESS;\\n    address public govAddress;\\n    bool public migrationEnabled = false;\\n    bool public platformnotLocked = true;\\n    bool public mintBurned = false;\\n    uint256 public totalLockedUpRewards;\\n\\n    DogsTokenV2 public immutable dogsToken;\\n    IFeeManager public feeManager;\\n    IReferralSystem dogsReferral;\\n    IDDSCA DDSCA;\\n\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;             // How many LP tokens the user has provided.\\n        uint256 dogsRewardDebt;     // Reward debt. See explanation below.\\n        uint256 rewardLockedUp;     // Reward locked up.\\n        uint256 nextHarvestUntil;   // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        IStrategy strategy;       // Strategy address that will earnings compound want tokens\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DOGS to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that DOGS distribution occurs.\\n        uint256 accDogsPerShare;  // Accumulated DOGS per share, times 1e24. See below.\\n        uint256 lpSupply;         // Total units locked in the pool\\n        uint256 harvestInterval;  // Harvest interval in seconds\\n        uint256 depositFeeBP;     // Deposit fee in basis points\\n        uint256 withdrawFeeBP;    // Withdraw fee in basis points\\n        bool isLPToken;\\n    }\\n\\n    struct migrationInfo {\\n        address lpToken;\\n        uint256 amountStaked;\\n    }\\n\\n    // Info of each user.\\n    struct UserMigrationInfo {\\n        uint256 amountStaked;\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserMigrationInfo)) public userMigrationInfo;\\n\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public constant referralCommissionRate = 300; // Pay out 3% to the referrer\\n\\n    // Events\\n    event AddPool(uint256 indexed pid, bool isLPToken, uint256 allocPoint, address lpToken, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\n    event SetDogsReferral(address dogsAddress);\\n    event SetPlatformAddress(address indexed newAddress);\\n    event GovUpdated(address govAddress);\\n\\n    constructor(\\n        DogsTokenV2 _dogsToken,\\n        address _platform,\\n        IDDSCA _ddsca\\n    ){\\n        DDSCA = _ddsca;\\n        PLATFORM_ADDRESS = _platform;\\n        dogsToken = _dogsToken;\\n        \\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IERC20 => bool) public poolExistence;\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n\\n    // View function to see pending on frontend.\\n    function pendingDogs(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accDogsPerShare = pool.accDogsPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0 && totalAllocPoint > 0) {\\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 dogReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n            accDogsPerShare = accDogsPerShare + ((dogReward * 1e24) / pool.lpSupply);\\n        }\\n\\n        uint256 pending = ((user.amount * accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n        return pending + user.rewardLockedUp;\\n    }\\n\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    function addPoolUserData(uint256 _poolIndex, address[] memory _users, uint256[] memory _usersStakeData) external onlyOwner {\\n        require(_users.length == _usersStakeData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            userMigrationInfo[_poolIndex][_users[i]].amountStaked = _usersStakeData[i];\\n        }\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getDogsMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        // As we set the multiplier to 0 here after DDSCA.emissionEndBlock\\n        // deposits aren't blocked after farming ends.\\n        if (_from > DDSCA.emissionEndBlock())\\n            return 0;\\n        if (_to > DDSCA.emissionEndBlock())\\n            return DDSCA.emissionEndBlock() - _from;\\n        else\\n            return _to - _from;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock)\\n            return;\\n\\n        uint256 lpSupply = pool.lpSupply;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        if (totalAllocPoint > 0){ \\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            if (multiplier > 0) {\\n                uint256 dogsReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n                dogsToken.mint(address(this), dogsReward);\\n                pool.accDogsPerShare = pool.accDogsPerShare + ((dogsReward * 1e24) / lpSupply);\\n            }\\n        }\\n\\n        pool.lastRewardBlock = block.number;\\n\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {\\n        _deposit(_pid, msg.sender, _amount, _referrer, false);\\n    }\\n\\n    function depositMigrator(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {\\n        require(migrationEnabled, 'migration not enabled');\\n        require(_amount > 0, 'zero amount');\\n        require(userMigrationInfo[_pid][msg.sender].amountStaked >= _amount);\\n        _deposit(_pid, msg.sender, _amount, _referrer, true);\\n        userMigrationInfo[_pid][msg.sender].amountStaked -= _amount;\\n    }\\n\\n    function canMigrate(address _address) external view returns(bool){\\n        uint256 migrationSum = 0;\\n        for(uint256 i = 0 ; i < poolInfo.length; i++){\\n            migrationSum += userMigrationInfo[i][_address].amountStaked ;\\n        }\\n        if(migrationSum > 0){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function canMigratePools(address _address) external view returns(migrationInfo[] memory){\\n        migrationInfo[] memory returnval = new migrationInfo[](poolInfo.length);\\n        for(uint256 i = 0 ; i < poolInfo.length; i++){\\n            returnval[i] = migrationInfo({lpToken: address(poolInfo[i].lpToken), amountStaked: userMigrationInfo[i][_address].amountStaked});\\n        }\\n        return returnval;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for DOGS allocation.\\n    function _deposit(uint256 _pid, address _userAddress, uint256 _amount, address _referrer, bool _isMigrator) internal {\\n\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n        updatePool(_pid);\\n\\n        if (_amount > 0 && address(dogsReferral) != address(0) && _referrer != address(0) && _referrer != _userAddress) {\\n            dogsReferral.recordReferral(_userAddress, _referrer);\\n        }\\n\\n        payOrLockupPendingDogs(_pid, _userAddress);\\n\\n        if (_amount > 0) {\\n\\n            uint256 userBalance = pool.lpToken.balanceOf(_userAddress);\\n            // Accept the balance of coins we receive (useful for coins which take fees).\\n            uint256 previousBalance = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_userAddress, address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;\\n            require(_amount > 0, \\\"no funds were received\\\");\\n\\n            uint256 depositFee = pool.depositFeeBP > 0 ? ((_amount * pool.depositFeeBP) / 10000) : 0;\\n            if (_isMigrator){\\n                depositFee = 0;\\n            }\\n\\n            if (depositFee > 0) {\\n\\n                uint256 platformFees = ((depositFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n                uint256 rewardFees = depositFee - platformFees;          // 75% converted to busd for rewards\\n\\n                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n                pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n\\n            }\\n\\n            //take remains, send to strategy\\n            pool.lpToken.safeIncreaseAllowance(address(pool.strategy), _amount - depositFee);\\n            uint256 amountDeposit = pool.strategy.deposit(_amount - depositFee);\\n\\n            user.amount = user.amount + amountDeposit;\\n            pool.lpSupply = pool.lpSupply + amountDeposit;\\n\\n        }\\n\\n        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n\\n        emit Deposit(_userAddress, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        _withdraw(_pid, msg.sender, _amount);\\n    }\\n\\n    function _withdraw(uint256 _pid, address _userAddress, uint256 _amount) internal {\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingDogs(_pid, _userAddress);\\n\\n        if (_amount > 0) {\\n\\n            uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n            pool.strategy.withdraw(_amount);\\n            uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n            uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n            // @bb new section\\n            uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;\\n            if (withdrawFee > 0) {\\n                uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n                uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards\\n\\n                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n                pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n            }\\n\\n            uint256 amountRemaining = amountRemoved - withdrawFee;\\n\\n            if (_amount > user.amount) {\\n                user.amount = 0;\\n            } else {\\n                user.amount = user.amount - _amount;\\n            }\\n\\n            pool.lpToken.safeTransfer(_userAddress, amountRemaining);\\n\\n            if (pool.lpSupply >= _amount)\\n                pool.lpSupply = pool.lpSupply - _amount;\\n            else\\n                pool.lpSupply = 0;\\n        }\\n\\n        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n\\n        emit Withdraw(_userAddress, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.dogsRewardDebt = 0;\\n\\n        uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n        pool.strategy.withdraw(amount);\\n        uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n        uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n        // @bb new section\\n        uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;\\n        if (withdrawFee > 0) {\\n            uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n            uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards\\n\\n            pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n            pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n//            feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amountRemoved - withdrawFee);\\n\\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\\n        if (pool.lpSupply >=  amount)\\n            pool.lpSupply = pool.lpSupply - amount;\\n        else\\n            pool.lpSupply = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay pending Dogs\\n    function payOrLockupPendingDogs(uint256 _pid, address _userAddress) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n\\n        if (user.nextHarvestUntil == 0) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 dogsPending = ((user.amount * pool.accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n\\n        if (canHarvest(_pid, _userAddress)) {\\n            if (dogsPending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = dogsPending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards - user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // dogsPending can't be zero\\n                safeTokenTransfer(address(dogsToken), _userAddress, totalRewards);\\n                payReferralCommission(_userAddress, totalRewards);\\n            }\\n        } else if (dogsPending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp + dogsPending;\\n            totalLockedUpRewards = totalLockedUpRewards + dogsPending;\\n            emit RewardLockedUp(_userAddress, _pid, dogsPending);\\n        }\\n\\n    }\\n\\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DOGS.\\n    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            IERC20(token).safeTransfer(_to, tokenBal);\\n        } else {\\n            IERC20(token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        if (address(dogsReferral) != address(0)) {\\n            address referrer = dogsReferral.getReferrer(_user);\\n            uint256 commissionAmount = (_pending * referralCommissionRate) / 10000;\\n\\n            if (referrer != address(0) && commissionAmount > 0) {\\n                dogsToken.mint(referrer, commissionAmount);\\n                dogsReferral.recordReferralCommission(referrer, commissionAmount);\\n            }\\n        }\\n    }\\n\\n    function increaseDogsSupply(uint256 _amount) external onlyOwner{\\n        require(!mintBurned);\\n        dogsToken.mint(msg.sender, _amount);\\n    }\\n\\n    function burnMint() external onlyOwner{\\n        mintBurned = true;\\n    }\\n\\n    // ************* Admin functions // *************\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(bool _isLPToken, uint256 _allocPoint, IERC20 _lpToken, IStrategy _strategy, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        _lpToken.balanceOf(address(this)); // Make sure the provided token is ERC20\\n        require(_strategy.wantLockedTotal() >= 0, \\\"add: invalid strategy\\\");\\n        require(_depositFeeBP <= 601, \\\"add: bad deposit fee\\\");\\n        require(_withdrawFeeBP <= 601, \\\"add: bad withdraw fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\n        require(address(_lpToken) != address(dogsToken), \\\"add: no native token pool\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardBlock = block.number > DDSCA.emissionStartBlock() ? block.number : DDSCA.emissionStartBlock();\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolExistence[_lpToken] = true;\\n\\n        poolInfo.push(PoolInfo({\\n        lpToken: _lpToken,\\n        allocPoint: _allocPoint,\\n        lastRewardBlock: lastRewardBlock,\\n        accDogsPerShare: 0,\\n        depositFeeBP: _depositFeeBP,\\n        withdrawFeeBP: _withdrawFeeBP,\\n        isLPToken: _isLPToken,\\n        lpSupply: 0,\\n        strategy: _strategy,\\n        harvestInterval: _harvestInterval\\n        }));\\n\\n        emit AddPool(poolInfo.length - 1, _isLPToken, _allocPoint, address(_lpToken), _depositFeeBP, _withdrawFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the given pool's DOGS allocation point and deposit fee. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner {\\n        require(_allocPoint <= 1e6, \\\"set: invalid allocPoint\\\");\\n        require(_depositFeeBP <= 601, \\\"set: bad deposit fee\\\");\\n        require(_withdrawFeeBP <= 601, \\\"set: bad withdraw fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].withdrawFeeBP = _withdrawFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n\\n        emit SetPool(_pid, _allocPoint, _depositFeeBP, _withdrawFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the dogs referral contract address by the owner\\n    function setReferral(IReferralSystem _dogsReferral) external onlyOwner {\\n        require(address(_dogsReferral) != address(0), \\\"dogsReferral cannot be the 0 address\\\");\\n        require(address(dogsReferral) == address(0), \\\"dogs referral address already set\\\");\\n        dogsReferral = _dogsReferral;\\n\\n        emit SetDogsReferral(address(dogsReferral));\\n    }\\n\\n    function setFarmStartBlock(uint256 _newStartBlock) external onlyOwner {\\n        DDSCA._setFarmStartBlock(_newStartBlock);\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = _newStartBlock;\\n        }\\n    }\\n\\n    function setPlatformAddress(address _platformAddress) external onlyOwner {\\n        require(_platformAddress != address(0), \\\"!nonzero\\\");\\n        require(platformnotLocked);\\n        PLATFORM_ADDRESS = _platformAddress;\\n        emit SetPlatformAddress(_platformAddress);\\n    }\\n    \\n    function setDDSCAAddress(IDDSCA _ddsca) external onlyOwner{\\n        DDSCA = _ddsca;\\n    }\\n\\n    function updateEmissions(uint256 priceInCents) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        (bool needsUpdate, IDDSCA.EmissionRate rate) = DDSCA.checkIfUpdateIsNeeded(priceInCents);\\n        if (needsUpdate){\\n            // Update pools before changing the emission rate\\n            massUpdatePools();\\n            DDSCA.updateEmissions(rate);\\n        }\\n    }\\n\\n    function toggleMigrationEnabled(bool _state) public onlyOwner {\\n        migrationEnabled = _state;\\n    }\\n    \\n    function lockPlatform() external onlyOwner{\\n        platformnotLocked = false; \\n    }\\n\\n    function setGov(address _govAddress) external onlyOwner {\\n        require(_govAddress != address(0), 'zero address');\\n        govAddress = _govAddress;\\n        emit GovUpdated(govAddress);\\n    }\\n\\n    function updateFeeManager(IFeeManager _feeManagerAddress) external onlyOwner {\\n        feeManager = _feeManagerAddress;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/DogsTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFeeManagerDogs.sol\\\";\\nimport \\\"./interfaces/IDogPound.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract DogsTokenV2 is ERC20(\\\"Animal Farm Dogs\\\", \\\"AFD\\\"), Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public TxBaseTax = 9000; // 90%\\n    uint256 public TxBurnRate = 333; // 3.33%\\n    uint256 public TxVaultRewardRate = 9666; // 96.66%\\n\\n    uint256 public constant MAXIMUM_TX_BASE_TAX = 9001; // Max transfer tax rate: 90.01%.\\n    uint256 public constant ZERO_TAX_INT = 10001; // Special 0 tax int\\n\\n    address public constant BUSD_ADDRESS = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    IERC20 public constant busdRewardCurrency = IERC20(BUSD_ADDRESS);\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    address public constant PANCAKESWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    IUniswapV2Router02 public pancakeswapRouter = IUniswapV2Router02(PANCAKESWAP_ROUTER_ADDRESS);\\n\\n    address public dogsBusdSwapPair;\\n    address public dogsWbnbSwapPair;\\n\\n    bool public swapAndLiquifyEnabled = false; // Automatic swap and liquify enabled\\n    bool private _inSwapAndLiquify;  // In swap and liquify\\n\\n    IFeeManagerDogs public FeeManagerDogs;\\n\\n    mapping(address => bool) public txTaxOperators;\\n\\n    mapping(address => bool) public liquifyExemptFrom;\\n    mapping(address => bool) public liquifyExemptTo;\\n\\n    mapping(address => uint256) public customTaxRateFrom;\\n    mapping(address => uint256) public customTaxRateTo;\\n\\n    // Events\\n    event Burn(address indexed sender, uint256 amount);\\n    event SetSwapAndLiquifyEnabled(bool swapAndLiquifyEnabled);\\n    event TransferTaxChanged(uint256 txBaseTax);\\n    event TransferTaxDistributionChanged(uint256 baseBurnRate, uint256 vaultRewardRate);\\n    event UpdateCustomTaxRateFrom(address _account, uint256 _taxRate);\\n    event UpdateCustomTaxRateTo(address _account, uint256 _taxRate);\\n    event SetOperator(address operator);\\n    event SetFeeManagerDogs(address feeManagerDogs);\\n    event SetTxTaxOperator(address taxOperator, bool isOperator);\\n\\n    // The operator can use admin functions\\n    address public _operator;\\n\\n    // AB measures\\n    mapping(address => bool) private blacklistFrom;\\n    mapping(address => bool) private blacklistTo;\\n    mapping (address => bool) private _isExcludedFromLimiter;\\n    bool private blacklistFeatureAllowed = true;\\n\\n    bool private transfersPaused = true;\\n    bool private transfersPausedFeatureAllowed = true;\\n\\n    bool private sellingEnabled = false;\\n    bool private sellingToggleAllowed = true;\\n\\n    bool private buySellLimiterEnabled = true;\\n    bool private buySellLimiterAllowed = true;\\n    uint256 private buySellLimitThreshold = 500e18;\\n\\n    // AB events\\n    event LimiterUserUpdated(address account, bool isLimited);\\n    event BlacklistUpdated(address account, bool blacklisted);\\n    event TransferStatusUpdate(bool isPaused);\\n    event TransferPauseFeatureBurn();\\n    event SellingToggleFeatureBurn();\\n    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);\\n    event SellingEnabledToggle(bool enabled);\\n    event LimiterFeatureBurn();\\n    event BlacklistingFeatureBurn();\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyTxTaxOperator() {\\n        require(txTaxOperators[msg.sender], \\\"!txTaxOperator\\\");\\n        _;\\n    }\\n\\n    modifier lockTheSwap {\\n        _inSwapAndLiquify = true;\\n        _;\\n        _inSwapAndLiquify = false;\\n    }\\n\\n    modifier transferTaxFree {\\n        uint256 _TxBaseTaxPrevious = TxBaseTax;\\n        TxBaseTax = 0;\\n        _;\\n        TxBaseTax = _TxBaseTaxPrevious;\\n\\n    }\\n\\n    /**\\n     * @notice Constructs the Dogs Token contract.\\n     */\\n    constructor(address _addLiquidityHelper) {\\n\\n        _operator = msg.sender;\\n        txTaxOperators[msg.sender] = true;\\n\\n        // Create BUSD and WBNB pairs\\n        dogsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), BUSD_ADDRESS);\\n        dogsWbnbSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), pancakeswapRouter.WETH());\\n\\n        // Exclude from AB limiter\\n        _isExcludedFromLimiter[msg.sender] = true;\\n        _isExcludedFromLimiter[_addLiquidityHelper] = true; // needs to be false for initial launch\\n\\n        // Apply custom Taxes\\n        // Buying / Remove Liq directly on PCS incurs 6% tax.\\n        customTaxRateFrom[dogsBusdSwapPair] = 600;\\n        customTaxRateFrom[dogsWbnbSwapPair] = 600;\\n\\n        // Adding liquidity via helper is tax free\\n        customTaxRateFrom[_addLiquidityHelper] = ZERO_TAX_INT;\\n        customTaxRateTo[_addLiquidityHelper] = ZERO_TAX_INT;\\n\\n        // Operator is untaxed\\n        customTaxRateFrom[msg.sender] = ZERO_TAX_INT;\\n\\n        // Sending to Burn address is tax free\\n        customTaxRateTo[BURN_ADDRESS] = ZERO_TAX_INT;\\n\\n        // Exclude add liquidityHelper from triggering liquification\\n        liquifyExemptFrom[_addLiquidityHelper] = true;\\n        liquifyExemptTo[_addLiquidityHelper] = true;\\n\\n        liquifyExemptFrom[dogsBusdSwapPair] = true;\\n        liquifyExemptTo[dogsBusdSwapPair] = true;\\n\\n        liquifyExemptFrom[dogsWbnbSwapPair] = true;\\n        liquifyExemptTo[dogsWbnbSwapPair] = true;\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev overrides transfer function to meet tokenomics of Dogs Token\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n\\n        require(!isBlacklistedFrom(sender), \\\"ERROR: Address Blacklisted!\\\");\\n        require(!isBlacklistedTo(recipient), \\\"ERROR: Address Blacklisted!\\\");\\n\\n        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];\\n\\n        if (transfersPaused) {\\n            require(isExcluded, \\\"ERROR: Transfer Paused!\\\");\\n        }\\n\\n        if (recipient == address(dogsBusdSwapPair) && !isExcluded) {\\n            require(sellingEnabled, \\\"ERROR: Selling disabled!\\\");\\n        }\\n        if (recipient == address(dogsWbnbSwapPair) && !isExcluded) {\\n            require(sellingEnabled, \\\"ERROR: Selling disabled!\\\");\\n        }\\n\\n        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding\\n        if (buySellLimiterEnabled && !isExcluded) {\\n            if (recipient == address(dogsBusdSwapPair) || sender == address(dogsBusdSwapPair)) {\\n                require(amount <= buySellLimitThreshold, \\\"ERROR: buy / sell exceeded!\\\");\\n            }\\n            if (recipient == address(dogsWbnbSwapPair) || sender == address(dogsWbnbSwapPair)) {\\n                require(amount <= buySellLimitThreshold, \\\"ERROR: buy / sell exceeded!\\\");\\n            }\\n        }\\n        // End of AB measures\\n\\n        if (swapAndLiquifyEnabled == true && _inSwapAndLiquify == false){\\n            if (!liquifyExemptFrom[sender] || !liquifyExemptTo[recipient]){\\n                swapAndLiquefy();\\n            }\\n        }\\n\\n        uint256 taxToApply = TxBaseTax;\\n        if (customTaxRateFrom[sender] > 0 ){\\n            taxToApply = customTaxRateFrom[sender];\\n        }\\n        if (customTaxRateTo[recipient] > 0 ){\\n            taxToApply = customTaxRateTo[recipient];\\n        }\\n\\n        if (taxToApply == ZERO_TAX_INT || taxToApply == 0) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            uint256 baseTax = amount * taxToApply / 10000;\\n            uint256 baseBurn = baseTax * TxBurnRate / 10000;\\n            uint256 vaultReward = baseTax * TxVaultRewardRate / 10000;\\n            uint256 sendAmount = amount - baseBurn - vaultReward;\\n\\n            _burnTokens(sender, baseBurn);\\n            super._transfer(sender, address(FeeManagerDogs), vaultReward);\\n            super._transfer(sender, recipient, sendAmount);\\n\\n        }\\n    }\\n\\n    function swapAndLiquefy() private lockTheSwap transferTaxFree {\\n        FeeManagerDogs.liquefyDogs();\\n    }\\n\\n    /**\\n     * @notice Destroys `amount` tokens from the sender, reducing the total supply.\\n\\t */\\n    function burn(uint256 _amount) external {\\n        _burnTokens(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the sender, reducing the total supply.\\n\\t */\\n    function _burnTokens(address sender, uint256 _amount) private {\\n        _burn(sender, _amount);\\n        emit Burn(sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Update the transfer base tax rate.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTransferTaxRate(uint256 _txBaseTax) external onlyTxTaxOperator {\\n        require(_txBaseTax <= MAXIMUM_TX_BASE_TAX, \\\"invalid tax\\\");\\n        TxBaseTax = _txBaseTax;\\n        emit TransferTaxChanged(TxBaseTax);\\n    }\\n\\n    function updateCustomTaxRateFrom(address _account, uint256 _taxRate) external onlyTxTaxOperator {\\n        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, \\\"invalid tax\\\");\\n        customTaxRateFrom[_account] = _taxRate;\\n        emit UpdateCustomTaxRateFrom(_account, _taxRate);\\n    }\\n\\n    function updateCustomTaxRateTo(address _account, uint256 _taxRate) external onlyTxTaxOperator {\\n        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, \\\"invalid tax\\\");\\n        customTaxRateTo[_account] = _taxRate;\\n        emit UpdateCustomTaxRateTo(_account, _taxRate);\\n    }\\n\\n    /**\\n     * @dev Update the transfer tax distribution ratio's.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTaxDistribution(uint256 _txBurnRate, uint256 _txVaultRewardRate) external onlyOperator {\\n        require(_txBurnRate + _txVaultRewardRate <= 10000, \\\"!valid\\\");\\n        TxBurnRate = _txBurnRate;\\n        TxVaultRewardRate = _txVaultRewardRate;\\n        emit TransferTaxDistributionChanged(TxBurnRate, TxVaultRewardRate);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() external view returns (address) {\\n        return _operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) external onlyOperator {\\n        require(newOperator != address(0), \\\"!!0\\\");\\n        _operator = newOperator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    /**\\n     * @dev Update list of Transaction Tax Operators\\n     * Can only be called by the current operator.\\n     */\\n    function updateTxTaxOperator(address _txTaxOperator, bool _isTxTaxOperator) external onlyOperator {\\n        require(_txTaxOperator != address(0), \\\"!!0\\\");\\n        txTaxOperators[_txTaxOperator] = _isTxTaxOperator;\\n\\n        emit SetTxTaxOperator(_txTaxOperator, _isTxTaxOperator);\\n    }\\n\\n\\n    /**\\n     * @dev Update Fee Manager Dogs, sets tax to 0, exclude from triggering liquification\\n     * Can only be called by the current operator.\\n     */\\n    function updateFeeManagerDogs(address _feeManagerDogs) public onlyOperator {\\n        FeeManagerDogs = IFeeManagerDogs(_feeManagerDogs);\\n        customTaxRateFrom[_feeManagerDogs] = ZERO_TAX_INT;\\n        liquifyExemptFrom[_feeManagerDogs] = true;\\n        emit SetFeeManagerDogs(_feeManagerDogs);\\n    }\\n\\n    /**\\n     * @dev Update the swapAndLiquifyEnabled.\\n     * Can only be called by the current operator.\\n     */\\n    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\\n        swapAndLiquifyEnabled = _enabled;\\n\\n        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled);\\n    }\\n\\n\\n    // AB measures\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        _isExcludedFromLimiter[account] = isExcluded;\\n        emit LimiterUserUpdated(account, isExcluded);\\n    }\\n\\n    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        buySellLimiterEnabled = isEnabled;\\n        buySellLimitThreshold = amount;\\n        emit BuySellLimiterUpdate(isEnabled, amount);\\n    }\\n\\n    function burnLimiterFeature() external onlyOperator {\\n        buySellLimiterAllowed = false;\\n        emit LimiterFeatureBurn();\\n    }\\n\\n    function isBlacklistedFrom(address account) public view returns (bool) {\\n        return blacklistFrom[account];\\n    }\\n\\n    function isBlacklistedTo(address account) public view returns (bool) {\\n        return blacklistTo[account];\\n    }\\n\\n    function toggleBlacklistUserFrom(address[] memory accounts, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, \\\"ERROR: Function burned!\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            blacklistFrom[accounts[i]] = blacklisted;\\n            emit BlacklistUpdated(accounts[i], blacklisted);\\n        }\\n    }\\n\\n    function toggleBlacklistUserTo(address[] memory accounts, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, \\\"ERROR: Function burned!\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            blacklistTo[accounts[i]] = blacklisted;\\n            emit BlacklistUpdated(accounts[i], blacklisted);\\n        }\\n    }\\n\\n    function burnBlacklistingFeature() external onlyOperator {\\n        blacklistFeatureAllowed = false;\\n        emit BlacklistingFeatureBurn();\\n    }\\n\\n    function toggleSellingEnabled(bool enabled) external onlyOperator {\\n        require(sellingToggleAllowed, 'feature destroyed');\\n        sellingEnabled = enabled;\\n        emit SellingEnabledToggle(enabled);\\n    }\\n\\n    function burnToggleSellFeature() external onlyOperator {\\n        sellingToggleAllowed = false;\\n        emit SellingToggleFeatureBurn();\\n    }\\n\\n    function toggleTransfersPaused(bool isPaused) external onlyOperator {\\n        require(transfersPausedFeatureAllowed, 'feature destroyed');\\n        transfersPaused = isPaused;\\n        emit TransferStatusUpdate(isPaused);\\n    }\\n\\n    function burnTogglePauseFeature() external onlyOperator {\\n        transfersPausedFeatureAllowed = false;\\n        emit TransferPauseFeatureBurn();\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IDDSCA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDDSCA {\\r\\n  enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\r\\n  function ActiveEmissionIndex (  ) external view returns ( uint8 );\\r\\n  function bottomPriceInCents (  ) external view returns ( uint256 );\\r\\n  function checkIfUpdateIsNeeded ( uint256 priceInCents ) external view returns ( bool, EmissionRate );\\r\\n  function emissionEndBlock (  ) external view returns ( uint256 );\\r\\n  function emissionStartBlock (  ) external view returns ( uint256 );\\r\\n  function getEmissionStage ( uint256 currentPriceCents ) external view returns ( uint8 );\\r\\n  function isInitialized (  ) external view returns ( bool );\\r\\n  function masterchef (  ) external view returns ( address );\\r\\n  function maxEmissionRate (  ) external view returns ( uint256 );\\r\\n  function owner (  ) external view returns ( address );\\r\\n  function renounceOwnership (  ) external;\\r\\n  function setFarmEndBlock ( uint256 _newEndBlock ) external;\\r\\n  function _setFarmStartBlock(uint256 _newStartBlock) external;\\r\\n  function token (  ) external view returns ( address );\\r\\n  function tokenPerBlock (  ) external view returns ( uint256 );\\r\\n  function topPriceInCents (  ) external view returns ( uint256 );\\r\\n  function transferOwnership ( address newOwner ) external;\\r\\n  function updateDDSCAMaxEmissionRate ( uint256 _maxEmissionRate ) external;\\r\\n  function updateDDSCAPriceRange ( uint256 _topPrice, uint256 _bottomPrice ) external;\\r\\n  function updateEmissions ( EmissionRate _newEmission ) external;\\r\\n  function updateMcAddress ( address _mcAddress ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeManager {\\n\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) external;\\n    function convertDepositFeesToBUSD(address token, bool isLPToken, bool isLiquidation) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrategy {\\n    // Total want tokens managed by strategy\\n    function wantLockedTotal() external view returns (uint256);\\n\\n    // Main want token compounding function\\n    function earn() external;\\n\\n    // Transfer want tokens MasterChefV2 -> strategy\\n    function deposit(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    // Transfer want tokens strategy -> MasterChefV2\\n    function withdraw(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IReferralSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralSystem {\\n    /**\\n     * @dev Record referral.\\n     */\\n    function recordReferral(address user, address referrer) external;\\n\\n    /**\\n     * @dev Record referral commission.\\n     */\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\n\\n    /**\\n     * @dev Get the referrer address that referred the user.\\n     */\\n    function getReferrer(address user) external view returns (address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDogPound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILoyalityPool {\\n    function totalTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFeeManagerDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeManagerDogs {\\n\\n    function liquefyDogs() external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract DogsTokenV2\",\"name\":\"_dogsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"contract IDDSCA\",\"name\":\"_ddsca\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLPToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"}],\"name\":\"GovUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dogsAddress\",\"type\":\"address\"}],\"name\":\"SetDogsReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLPToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_usersStakeData\",\"type\":\"uint256[]\"}],\"name\":\"addPoolUserData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canMigrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canMigratePools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefDogsV2.migrationInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogsToken\",\"outputs\":[{\"internalType\":\"contract DogsTokenV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getDogsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseDogsSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformnotLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDogsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLPToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDDSCA\",\"name\":\"_ddsca\",\"type\":\"address\"}],\"name\":\"setDDSCAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartBlock\",\"type\":\"uint256\"}],\"name\":\"setFarmStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"setPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferralSystem\",\"name\":\"_dogsReferral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"toggleMigrationEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInCents\",\"type\":\"uint256\"}],\"name\":\"updateEmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManagerAddress\",\"type\":\"address\"}],\"name\":\"updateFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dogsRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMigrationInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefDogsV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000198271b868dae875bfea6e6e4045cdda5d6b9829000000000000000000000000a76216d578bda59d50b520aaf717b187d21f5121000000000000000000000000ba39da7f8dd14c351316e0c50e88b317788d6103", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}