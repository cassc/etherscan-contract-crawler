{"SourceCode": "// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v3.4.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/stakingpools/interfaces/IStakingPoolMigrator.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IStakingPoolMigrator {\r\n    function migrate(\r\n        uint256 poolId,\r\n        address oldToken,\r\n        uint256 amount\r\n    ) external returns (address);\r\n}\r\n\r\n\r\n// File contracts/stakingpools/interfaces/IStakingPoolRewarder.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IStakingPoolRewarder {\r\n    function onReward(\r\n        uint256 poolId,\r\n        address user,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/stakingpools/StakingPools.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StakingPools\r\n *\r\n * @dev A contract for staking Uniswap LP tokens in exchange for locked CONV rewards.\r\n * No actual CONV tokens will be held or distributed by this contract. Only the amounts\r\n * are accumulated.\r\n *\r\n * @dev The `migrator` in this contract has access to users' staked tokens. Any changes\r\n * to the migrator address will only take effect after a delay period specified at contract\r\n * creation.\r\n *\r\n * @dev This contract interacts with token contracts via `safeApprove`, `safeTransfer`,\r\n * and `safeTransferFrom` instead of the standard Solidity interface so that some non-ERC20-\r\n * compatible tokens (e.g. Tether) can also be staked.\r\n */\r\ncontract StakingPools is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event PoolCreated(\r\n        uint256 indexed poolId,\r\n        address indexed token,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        uint256 migrationBlock,\r\n        uint256 rewardPerBlock\r\n    );\r\n    event PoolEndBlockExtended(uint256 indexed poolId, uint256 oldEndBlock, uint256 newEndBlock);\r\n    event PoolMigrationBlockExtended(uint256 indexed poolId, uint256 oldMigrationBlock, uint256 newMigrationBlock);\r\n    event PoolRewardRateChanged(uint256 indexed poolId, uint256 oldRewardPerBlock, uint256 newRewardPerBlock);\r\n    event MigratorChangeProposed(address newMigrator);\r\n    event MigratorChanged(address oldMigrator, address newMigrator);\r\n    event RewarderChanged(address oldRewarder, address newRewarder);\r\n    event PoolMigrated(uint256 indexed poolId, address oldToken, address newToken);\r\n    event Staked(uint256 indexed poolId, address indexed staker, address token, uint256 amount);\r\n    event Unstaked(uint256 indexed poolId, address indexed staker, address token, uint256 amount);\r\n    event RewardRedeemed(uint256 indexed poolId, address indexed staker, address rewarder, uint256 amount);\r\n\r\n    /**\r\n     * @param startBlock the block from which reward accumulation starts\r\n     * @param endBlock the block from which reward accumulation stops\r\n     * @param migrationBlock the block since which LP token migration can be triggered\r\n     * @param rewardPerBlock total amount of token to be rewarded in a block\r\n     * @param poolToken token to be staked\r\n     */\r\n    struct PoolInfo {\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 migrationBlock;\r\n        uint256 rewardPerBlock;\r\n        address poolToken;\r\n    }\r\n    /**\r\n     * @param totalStakeAmount total amount of staked tokens\r\n     * @param accuRewardPerShare accumulated rewards for a single unit of token staked, multiplied by `ACCU_REWARD_MULTIPLIER`\r\n     * @param accuRewardLastUpdateBlock the block number at which the `accuRewardPerShare` field was last updated\r\n     */\r\n    struct PoolData {\r\n        uint256 totalStakeAmount;\r\n        uint256 accuRewardPerShare;\r\n        uint256 accuRewardLastUpdateBlock;\r\n    }\r\n    /**\r\n     * @param stakeAmount amount of token the user stakes\r\n     * @param pendingReward amount of reward to be redeemed by the user up to the user's last action\r\n     * @param entryAccuRewardPerShare the `accuRewardPerShare` value at the user's last stake/unstake action\r\n     */\r\n    struct UserData {\r\n        uint256 stakeAmount;\r\n        uint256 pendingReward;\r\n        uint256 entryAccuRewardPerShare;\r\n    }\r\n    /**\r\n     * @param proposeTime timestamp when the change is proposed\r\n     * @param newMigrator new migrator address\r\n     */\r\n    struct PendingMigratorChange {\r\n        uint64 proposeTime;\r\n        address newMigrator;\r\n    }\r\n\r\n    uint256 public lastPoolId; // The first pool has ID of 1\r\n\r\n    IStakingPoolMigrator public migrator;\r\n    uint256 public migratorSetterDelay;\r\n    PendingMigratorChange public pendingMigrator;\r\n\r\n    IStakingPoolRewarder public rewarder;\r\n\r\n    mapping(uint256 => PoolInfo) public poolInfos;\r\n    mapping(uint256 => PoolData) public poolData;\r\n    mapping(uint256 => mapping(address => UserData)) public userData;\r\n\r\n    uint256 private constant ACCU_REWARD_MULTIPLIER = 10**20; // Precision loss prevention\r\n\r\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 private constant APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n    bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n\r\n    modifier onlyPoolExists(uint256 poolId) {\r\n        require(poolInfos[poolId].endBlock > 0, \"StakingPools: pool not found\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolActive(uint256 poolId) {\r\n        require(\r\n            block.number >= poolInfos[poolId].startBlock && block.number < poolInfos[poolId].endBlock,\r\n            \"StakingPools: pool not active\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolNotEnded(uint256 poolId) {\r\n        require(block.number < poolInfos[poolId].endBlock, \"StakingPools: pool ended\");\r\n        _;\r\n    }\r\n\r\n    function getReward(uint256 poolId, address staker) external view returns (uint256) {\r\n        UserData memory currentUserData = userData[poolId][staker];\r\n        PoolInfo memory currentPoolInfo = poolInfos[poolId];\r\n        PoolData memory currentPoolData = poolData[poolId];\r\n\r\n        uint256 latestAccuRewardPerShare =\r\n            currentPoolData.totalStakeAmount > 0\r\n                ? currentPoolData.accuRewardPerShare.add(\r\n                    Math\r\n                        .min(block.number, currentPoolInfo.endBlock)\r\n                        .sub(currentPoolData.accuRewardLastUpdateBlock)\r\n                        .mul(currentPoolInfo.rewardPerBlock)\r\n                        .mul(ACCU_REWARD_MULTIPLIER)\r\n                        .div(currentPoolData.totalStakeAmount)\r\n                )\r\n                : currentPoolData.accuRewardPerShare;\r\n\r\n        return\r\n            currentUserData.pendingReward.add(\r\n                currentUserData.stakeAmount.mul(latestAccuRewardPerShare.sub(currentUserData.entryAccuRewardPerShare)).div(\r\n                    ACCU_REWARD_MULTIPLIER\r\n                )\r\n            );\r\n    }\r\n\r\n    constructor(uint256 _migratorSetterDelay) {\r\n        require(_migratorSetterDelay > 0, \"StakingPools: zero setter delay\");\r\n\r\n        migratorSetterDelay = _migratorSetterDelay;\r\n    }\r\n\r\n    function createPool(\r\n        address token,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        uint256 migrationBlock,\r\n        uint256 rewardPerBlock\r\n    ) external onlyOwner {\r\n        require(token != address(0), \"StakingPools: zero address\");\r\n        require(\r\n            startBlock > block.number && endBlock > startBlock && migrationBlock > startBlock,\r\n            \"StakingPools: invalid block range\"\r\n        );\r\n        require(rewardPerBlock > 0, \"StakingPools: reward must be positive\");\r\n\r\n        uint256 newPoolId = ++lastPoolId;\r\n\r\n        poolInfos[newPoolId] = PoolInfo({\r\n            startBlock: startBlock,\r\n            endBlock: endBlock,\r\n            migrationBlock: migrationBlock,\r\n            rewardPerBlock: rewardPerBlock,\r\n            poolToken: token\r\n        });\r\n        poolData[newPoolId] = PoolData({totalStakeAmount: 0, accuRewardPerShare: 0, accuRewardLastUpdateBlock: startBlock});\r\n\r\n        emit PoolCreated(newPoolId, token, startBlock, endBlock, migrationBlock, rewardPerBlock);\r\n    }\r\n\r\n    function extendEndBlock(uint256 poolId, uint256 newEndBlock)\r\n        external\r\n        onlyOwner\r\n        onlyPoolExists(poolId)\r\n        onlyPoolNotEnded(poolId)\r\n    {\r\n        uint256 currentEndBlock = poolInfos[poolId].endBlock;\r\n        require(newEndBlock > currentEndBlock, \"StakingPools: end block not extended\");\r\n\r\n        poolInfos[poolId].endBlock = newEndBlock;\r\n\r\n        emit PoolEndBlockExtended(poolId, currentEndBlock, newEndBlock);\r\n    }\r\n\r\n    function extendMigrationBlock(uint256 poolId, uint256 newMigrationBlock)\r\n        external\r\n        onlyOwner\r\n        onlyPoolExists(poolId)\r\n        onlyPoolNotEnded(poolId)\r\n    {\r\n        uint256 currentMigrationBlock = poolInfos[poolId].migrationBlock;\r\n        require(newMigrationBlock > currentMigrationBlock, \"StakingPools: migration block not extended\");\r\n\r\n        poolInfos[poolId].migrationBlock = newMigrationBlock;\r\n\r\n        emit PoolMigrationBlockExtended(poolId, currentMigrationBlock, newMigrationBlock);\r\n    }\r\n\r\n    function setPoolReward(uint256 poolId, uint256 newRewardPerBlock)\r\n        external\r\n        onlyOwner\r\n        onlyPoolExists(poolId)\r\n        onlyPoolNotEnded(poolId)\r\n    {\r\n        if ( block.number >= poolInfos[poolId].startBlock) {\r\n            // \"Settle\" rewards up to this block \r\n             _updatePoolAccuReward(poolId);\r\n        }\r\n\r\n\r\n        // We're deliberately allowing setting the reward rate to 0 here. If it turns\r\n        // out this, or even changing rates at all, is undesirable after deployment, the\r\n        // ownership of this contract can be transferred to a contract incapable of making\r\n        // calls to this function.\r\n        uint256 currentRewardPerBlock = poolInfos[poolId].rewardPerBlock;\r\n        poolInfos[poolId].rewardPerBlock = newRewardPerBlock;\r\n\r\n        emit PoolRewardRateChanged(poolId, currentRewardPerBlock, newRewardPerBlock);\r\n    }\r\n\r\n    function proposeMigratorChange(address newMigrator) external onlyOwner {\r\n        pendingMigrator = PendingMigratorChange({proposeTime: uint64(block.timestamp), newMigrator: newMigrator});\r\n\r\n        emit MigratorChangeProposed(newMigrator);\r\n    }\r\n\r\n    function executeMigratorChange() external {\r\n        require(pendingMigrator.proposeTime > 0, \"StakingPools: migrator change proposal not found\");\r\n        require(\r\n            block.timestamp >= uint256(pendingMigrator.proposeTime).add(migratorSetterDelay),\r\n            \"StakingPools: migrator setter delay not passed\"\r\n        );\r\n\r\n        address oldMigrator = address(migrator);\r\n        migrator = IStakingPoolMigrator(pendingMigrator.newMigrator);\r\n\r\n        // Clear storage\r\n        pendingMigrator = PendingMigratorChange({proposeTime: 0, newMigrator: address(0)});\r\n\r\n        emit MigratorChanged(oldMigrator, address(migrator));\r\n    }\r\n\r\n    function setRewarder(address newRewarder) external onlyOwner {\r\n        address oldRewarder = address(rewarder);\r\n        rewarder = IStakingPoolRewarder(newRewarder);\r\n\r\n        emit RewarderChanged(oldRewarder, newRewarder);\r\n    }\r\n\r\n    function migratePool(uint256 poolId) external onlyPoolExists(poolId) {\r\n        require(address(migrator) != address(0), \"StakingPools: migrator not set\");\r\n\r\n        PoolInfo memory currentPoolInfo = poolInfos[poolId];\r\n        PoolData memory currentPoolData = poolData[poolId];\r\n        require(block.number >= currentPoolInfo.migrationBlock, \"StakingPools: migration block not reached\");\r\n\r\n        safeApprove(currentPoolInfo.poolToken, address(migrator), currentPoolData.totalStakeAmount);\r\n\r\n        // New token balance is not validated here since the migrator can do whatever\r\n        // it wants anyways (including providing a fake token address with fake balance).\r\n        // It's the migrator contract's responsibility to ensure tokens are properly migrated.\r\n        address newToken =\r\n            migrator.migrate(poolId, address(currentPoolInfo.poolToken), uint256(currentPoolData.totalStakeAmount));\r\n        require(newToken != address(0), \"StakingPools: zero new token address\");\r\n\r\n        poolInfos[poolId].poolToken = newToken;\r\n\r\n        emit PoolMigrated(poolId, currentPoolInfo.poolToken, newToken);\r\n    }\r\n\r\n    function stake(uint256 poolId, uint256 amount) external onlyPoolExists(poolId) onlyPoolActive(poolId) {\r\n        _updatePoolAccuReward(poolId);\r\n        _updateStakerReward(poolId, msg.sender);\r\n\r\n        _stake(poolId, msg.sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 poolId, uint256 amount) external onlyPoolExists(poolId) {\r\n        _updatePoolAccuReward(poolId);\r\n        _updateStakerReward(poolId, msg.sender);\r\n\r\n        _unstake(poolId, msg.sender, amount);\r\n    }\r\n\r\n    function emergencyUnstake(uint256 poolId) external onlyPoolExists(poolId) {\r\n        _unstake(poolId, msg.sender, userData[poolId][msg.sender].stakeAmount);\r\n\r\n        // Forfeit user rewards to avoid abuse\r\n        userData[poolId][msg.sender].pendingReward = 0;\r\n    }\r\n\r\n    function redeemRewards(uint256 poolId) external onlyPoolExists(poolId) {\r\n\r\n        redeemRewardsByAddress(poolId, msg.sender);\r\n    }\r\n\r\n    function redeemRewardsByAddress(uint256 poolId, address user) public onlyPoolExists(poolId) {\r\n\r\n        require(user != address(0), \"StakingPools: zero address\");\r\n\r\n        _updatePoolAccuReward(poolId);\r\n        _updateStakerReward(poolId, user);\r\n\r\n        require(address(rewarder) != address(0), \"StakingPools: rewarder not set\");\r\n\r\n        uint256 rewardToRedeem = userData[poolId][user].pendingReward;\r\n        require(rewardToRedeem > 0, \"StakingPools: no reward to redeem\");\r\n\r\n        userData[poolId][user].pendingReward = 0;\r\n\r\n        rewarder.onReward(poolId, user, rewardToRedeem);\r\n\r\n        emit RewardRedeemed(poolId, user, address(rewarder), rewardToRedeem);\r\n    }\r\n\r\n    function _stake(\r\n        uint256 poolId,\r\n        address user,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"StakingPools: cannot stake zero amount\");\r\n\r\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.add(amount);\r\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.add(amount);\r\n\r\n        safeTransferFrom(poolInfos[poolId].poolToken, user, address(this), amount);\r\n\r\n        emit Staked(poolId, user, poolInfos[poolId].poolToken, amount);\r\n    }\r\n\r\n    function _unstake(\r\n        uint256 poolId,\r\n        address user,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"StakingPools: cannot unstake zero amount\");\r\n\r\n        // No sufficiency check required as sub() will throw anyways\r\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.sub(amount);\r\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.sub(amount);\r\n\r\n        safeTransfer(poolInfos[poolId].poolToken, user, amount);\r\n\r\n        emit Unstaked(poolId, user, poolInfos[poolId].poolToken, amount);\r\n    }\r\n\r\n    function _updatePoolAccuReward(uint256 poolId) private {\r\n        PoolInfo storage currentPoolInfo = poolInfos[poolId];\r\n        PoolData storage currentPoolData = poolData[poolId];\r\n\r\n        uint256 appliedUpdateBlock = Math.min(block.number, currentPoolInfo.endBlock);\r\n        uint256 durationInBlocks = appliedUpdateBlock.sub(currentPoolData.accuRewardLastUpdateBlock);\r\n\r\n        // This saves tx cost when being called multiple times in the same block\r\n        if (durationInBlocks > 0) {\r\n            // No need to update the rate if no one staked at all\r\n            if (currentPoolData.totalStakeAmount > 0) {\r\n                currentPoolData.accuRewardPerShare = currentPoolData.accuRewardPerShare.add(\r\n                    durationInBlocks.mul(currentPoolInfo.rewardPerBlock).mul(ACCU_REWARD_MULTIPLIER).div(\r\n                        currentPoolData.totalStakeAmount\r\n                    )\r\n                );\r\n            }\r\n            currentPoolData.accuRewardLastUpdateBlock = appliedUpdateBlock;\r\n        }\r\n    }\r\n\r\n    function _updateStakerReward(uint256 poolId, address staker) private {\r\n        UserData storage currentUserData = userData[poolId][staker];\r\n        PoolData storage currentPoolData = poolData[poolId];\r\n\r\n        uint256 stakeAmount = currentUserData.stakeAmount;\r\n        uint256 stakerEntryRate = currentUserData.entryAccuRewardPerShare;\r\n        uint256 accuDifference = currentPoolData.accuRewardPerShare.sub(stakerEntryRate);\r\n\r\n        if (accuDifference > 0) {\r\n            currentUserData.pendingReward = currentUserData.pendingReward.add(\r\n                stakeAmount.mul(accuDifference).div(ACCU_REWARD_MULTIPLIER)\r\n            );\r\n            currentUserData.entryAccuRewardPerShare = currentPoolData.accuRewardPerShare;\r\n        }\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(APPROVE_SELECTOR, spender, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"StakingPools: approve failed\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"StakingPools: transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, sender, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"StakingPools: transferFrom failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_migratorSetterDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"MigratorChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMigrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"MigratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"PoolEndBlockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"PoolMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMigrationBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMigrationBlock\",\"type\":\"uint256\"}],\"name\":\"PoolMigrationBlockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"PoolRewardRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"RewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"migrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeMigratorChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"extendEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMigrationBlock\",\"type\":\"uint256\"}],\"name\":\"extendMigrationBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"migratePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IStakingPoolMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratorSetterDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMigrator\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"proposeTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuRewardLastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"migrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"proposeMigratorChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"redeemRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemRewardsByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IStakingPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryAccuRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingPools", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c8dbf1eb88a4ed725a74aa7e570b09b1d1ab86435b28ad6ef28a9e7b6987713"}