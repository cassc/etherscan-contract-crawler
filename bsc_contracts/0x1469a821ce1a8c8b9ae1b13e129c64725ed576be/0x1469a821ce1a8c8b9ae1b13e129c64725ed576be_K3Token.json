{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\n\r\ncontract K3Token {\r\n\r\n    // ERC20 BASIC DATA\r\n    mapping(address => uint256) internal balances;\r\n    uint256 internal totalSupply_;\r\n    string public constant name = \"k3\"; // solium-disable-line\r\n    string public constant symbol = \"k3\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    // ERC20 DATA\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // OWNER DATA\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    // PAUSABILITY DATA\r\n    bool public paused = false;\r\n    bool public publicSale = false;\r\n\r\n    // ASSET PROTECTION DATA\r\n    mapping(address => bool) internal frozen;\r\n\r\n    //assign coin\r\n    address public stakeContractAddr;\r\n\r\n    mapping(address => bool) public transferWhiteList;\r\n\r\n    mapping(address => bool) public assetRole;\r\n\r\n    /**\r\n     * EVENTS\r\n     */\r\n\r\n    // ERC20 BASIC EVENTS\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // ERC20 EVENTS\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * The constructor is used here to ensure that the implementation\r\n     * contract is initialized. An uncontrolled implementation\r\n     * contract might lead to misleading state\r\n     * for users who accidentally interact with it.\r\n     */\r\n    constructor() {\r\n        owner = msg.sender;\r\n        totalSupply_ = 0;\r\n        pause();\r\n    }\r\n\r\n    function mint(address _to, uint256 _value ) external whenNotPaused onlyAssetRole returns (bool){\r\n        totalSupply_ += _value;\r\n        require(_to != address(0), \"cannot mint to address zero\");\r\n        balances[_to] += _value;\r\n        emit Transfer(address(0), _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n    // ERC20 BASIC FUNCTIONALITY\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token to a specified address from msg.sender\r\n    * Note: the use of Safemath ensures that _value is nonnegative.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) external whenNotPaused returns (bool) {\r\n        require(_to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[_to] && !frozen[msg.sender], \"address frozen\");\r\n\r\n        //        uint256 _tax = _getTax(msg.sender, _value);\r\n        //\u4e70\u5e01 \u89e3\u9664lp\r\n        if (!publicSale && !transferWhiteList[_to] ) {\r\n            require( msg.sender != stakeContractAddr, \"operate illegality\");\r\n        }\r\n\r\n        require(_value <= balances[msg.sender], \"insufficient funds\");\r\n\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _addr The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    // ERC20 FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    external\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(_from != address(0), \"from can not address zero\");\r\n        require(!frozen[_to] && !frozen[_from] && !frozen[msg.sender], \"address frozen\");\r\n        require(_value <= balances[_from], \"insufficient funds\");\r\n\r\n        //\u5356\u5e01\uff0c\u52a0lp\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value ;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) external whenNotPaused returns (bool) {\r\n        require(!frozen[_spender] && !frozen[msg.sender], \"address frozen\");\r\n        require(_spender != address(0), \"address can not be zero\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // OWNER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAssetRole() {\r\n        require(assetRole[msg.sender] || msg.sender == owner, \"onlyAssetRole\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\r\n     * @param _proposedOwner The address to transfer ownership to.\r\n     */\r\n    function proposeOwner(address _proposedOwner) external onlyOwner {\r\n        require(_proposedOwner != address(0), \"cannot transfer ownership to address zero\");\r\n        require(msg.sender != _proposedOwner, \"caller already is owner\");\r\n        proposedOwner = _proposedOwner;\r\n    }\r\n\r\n//    /**\r\n// * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\r\n//     */\r\n//    function disregardProposeOwner() external {\r\n//        require(msg.sender == proposedOwner || msg.sender == owner, \"only proposedOwner or owner\");\r\n//        require(proposedOwner != address(0), \"can only disregard a proposed owner that was previously set\");\r\n//        proposedOwner = address(0);\r\n//    }\r\n\r\n    /**\r\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\r\n     */\r\n    function claimOwnership() external {\r\n        require(msg.sender == proposedOwner, \"onlyProposedOwner\");\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n    }\r\n\r\n\r\n    // PAUSABILITY FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner {\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    function openPublicSale() external onlyOwner{\r\n        publicSale = true;\r\n    }\r\n    function closePublicSale() external onlyOwner{\r\n        publicSale = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes an address balance from being transferred.\r\n     * @param _addr The new address to freeze.\r\n     */\r\n    function freeze(address _addr) external onlyOwner {\r\n        frozen[_addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes an address balance allowing transfer.\r\n     * @param _addr The new address to unfreeze.\r\n     */\r\n    function unfreeze(address _addr) external onlyOwner {\r\n        frozen[_addr] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets whether the address is currently frozen.\r\n    * @param _addr The address to check if frozen.\r\n    * @return A bool representing whether the given address is frozen.\r\n    */\r\n    function isFrozen(address _addr) external view returns (bool) {\r\n        return frozen[_addr];\r\n    }\r\n\r\n    function addAssetRole(address _addr) external onlyOwner {\r\n        assetRole[_addr] = true;\r\n    }\r\n\r\n    function removeAssetRole(address _addr) external onlyOwner {\r\n        assetRole[_addr] = false;\r\n    }\r\n\r\n    function addTransWhite(address _addr) external onlyOwner {\r\n        transferWhiteList[_addr] = true;\r\n    }\r\n\r\n    function removeTransWhite(address _addr) external onlyOwner {\r\n        transferWhiteList[_addr] = false;\r\n    }\r\n\r\n    function isTransWhite(address _addr) external view returns (bool) {\r\n        return transferWhiteList[_addr];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAssetRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addTransWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isTransWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAssetRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeTransWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "K3Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2163ebb998670444da6fbbc73faa3b97a5bc35697d3a8e60fece26ac2bfdd990"}