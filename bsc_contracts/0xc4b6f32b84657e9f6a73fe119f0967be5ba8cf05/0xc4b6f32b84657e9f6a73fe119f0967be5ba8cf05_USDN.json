{"SourceCode": "pragma solidity <=0.7;\r\n\r\ninterface Staking {\r\n  function deposit(address account, uint256 amount) external returns (bool);\r\n\r\n  function withdraw(address account) external returns (bool);\r\n\r\n  function stake(uint256 reward) external returns (bool);\r\n\r\n  event Reward(uint256 id, uint256 amount);\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n  address private _owner;\r\n  address private _admin;\r\n\r\n  constructor () internal {\r\n    _owner = msg.sender;\r\n    _admin = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender || _admin == msg.sender, \"Ownable: caller is not the owner or admin\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nabstract contract Deprecateble is Ownable {\r\n  bool internal deprecated;\r\n\r\n  modifier onlyNotDeprecated() {\r\n    require(!deprecated, \"Deprecateble: contract is deprecated\");\r\n    _;\r\n  }\r\n\r\n  function deprecate() external onlyOwner {\r\n    deprecated = true;\r\n    emit Deprecate(msg.sender);\r\n  }\r\n\r\n  event Deprecate(address indexed account);\r\n}\r\n\r\nabstract contract StandartToken is Staking, ERC20, Ownable, Deprecateble {\r\n  uint256[] private _percents;\r\n  uint256 private _liquidTotalSupply;\r\n  uint256 private _liquidDeposit;\r\n  uint256 constant private PERCENT_FACTOR = 10 ** 12;\r\n\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => uint256) private _deposits;\r\n  mapping(address => uint256) private _rewardIndexForAccount;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  constructor () internal {\r\n    _percents.push(PERCENT_FACTOR);\r\n  }\r\n\r\n  function deposit(address account, uint256 amount) external onlyOwner onlyNotDeprecated override virtual returns (bool)  {\r\n    require(amount > 0, \"amount should be > 0\");\r\n    require(account != address(0), \"deposit to the zero address\");\r\n\r\n    uint256 liquidDeposit = _liquidDeposit;\r\n    require(liquidDeposit + amount >= liquidDeposit, \"addition overflow for deposit\");\r\n    _liquidDeposit = liquidDeposit + amount;\r\n\r\n    uint256 oldDeposit = _deposits[account];\r\n    if (oldDeposit == 0) {\r\n      _balances[account] = balanceOf(account);\r\n      _rewardIndexForAccount[account] = _percents.length - 1;\r\n      _deposits[account] = amount;\r\n    } else {\r\n      uint256 rewardIndex = _rewardIndexForAccount[account];\r\n      if (rewardIndex == _percents.length - 1) {\r\n        require(oldDeposit + amount >= oldDeposit, \"addition overflow for deposit\");\r\n        _deposits[account] = oldDeposit + amount;\r\n      } else {\r\n        _balances[account] = balanceOf(account);\r\n        _rewardIndexForAccount[account] = _percents.length - 1;\r\n        _deposits[account] = amount;\r\n      }\r\n    }\r\n\r\n    emit Transfer(address(0), account, amount);\r\n    return true;\r\n  }\r\n\r\n  function stake(uint256 reward) external onlyOwner onlyNotDeprecated override virtual returns (bool) {\r\n    require(reward > 0, \"reward should be > 0\");\r\n\r\n    uint256 liquidTotalSupply = _liquidTotalSupply;\r\n    uint256 liquidDeposit = _liquidDeposit;\r\n\r\n    if (liquidTotalSupply == 0) {\r\n      _percents.push(PERCENT_FACTOR);\r\n    } else {\r\n      uint256 oldPercent = _percents[_percents.length - 1];\r\n      uint256 percent = reward * PERCENT_FACTOR / liquidTotalSupply;\r\n      require(percent + PERCENT_FACTOR >= percent, \"addition overflow for percent\");\r\n      uint256 newPercent = percent + PERCENT_FACTOR;\r\n      _percents.push(newPercent * oldPercent / PERCENT_FACTOR);\r\n\r\n      require(liquidTotalSupply + reward >= liquidTotalSupply, \"addition overflow for total supply + reward\");\r\n      liquidTotalSupply = liquidTotalSupply + reward;\r\n    }\r\n\r\n    require(liquidTotalSupply + liquidDeposit >= liquidTotalSupply, \"addition overflow for total supply\");\r\n    _liquidTotalSupply = liquidTotalSupply + liquidDeposit;\r\n    _liquidDeposit = 0;\r\n\r\n    emit Reward(_percents.length, reward);\r\n    return true;\r\n  }\r\n\r\n  function withdraw(address account) external onlyOwner onlyNotDeprecated override virtual returns (bool) {\r\n    uint256 oldDeposit = _deposits[account];\r\n    uint256 rewardIndex = _rewardIndexForAccount[account];\r\n\r\n    if (rewardIndex == _percents.length - 1) {\r\n      uint256 balance = _balances[account];\r\n      require(balance <= _liquidTotalSupply, \"subtraction overflow for total supply\");\r\n      _liquidTotalSupply = _liquidTotalSupply - balance;\r\n\r\n      require(oldDeposit <= _liquidDeposit, \"subtraction overflow for liquid deposit\");\r\n      _liquidDeposit = _liquidDeposit - oldDeposit;\r\n\r\n      require(balance + oldDeposit >= balance, \"addition overflow for total balance + oldDeposit\");\r\n      emit Transfer(account, address(0), balance + oldDeposit);\r\n    } else {\r\n      uint256 balance = balanceOf(account);\r\n      uint256 liquidTotalSupply = _liquidTotalSupply;\r\n      require(balance <= liquidTotalSupply, \"subtraction overflow for total supply\");\r\n      _liquidTotalSupply = liquidTotalSupply - balance;\r\n      emit Transfer(account, address(0), balance);\r\n    }\r\n\r\n    _balances[account] = 0;\r\n    _deposits[account] = 0;\r\n    return true;\r\n  }\r\n\r\n  // ERC20\r\n  function totalSupply() external view override virtual returns (uint256) {\r\n    uint256 liquidTotalSupply = _liquidTotalSupply;\r\n    uint256 liquidDeposit = _liquidDeposit;\r\n\r\n    require(liquidTotalSupply + liquidDeposit >= liquidTotalSupply, \"addition overflow for total supply\");\r\n    return liquidTotalSupply + liquidDeposit;\r\n  }\r\n\r\n  function balanceOf(address account) public view override virtual returns (uint256) {\r\n    uint256 balance = _balances[account];\r\n    uint256 oldDeposit = _deposits[account];\r\n\r\n    if (balance == 0 && oldDeposit == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 rewardIndex = _rewardIndexForAccount[account];\r\n    if (rewardIndex == _percents.length - 1) {\r\n      require(balance + oldDeposit >= balance, \"addition overflow for balance\");\r\n      return balance + oldDeposit;\r\n    }\r\n\r\n    if (oldDeposit == 0) {\r\n      uint256 profit = _percents[_percents.length - 1];\r\n      return profit * balance / _percents[rewardIndex];\r\n    } else {\r\n      uint256 newBalance = balance * _percents[_percents.length - 1] / _percents[rewardIndex];\r\n      uint256 profit = oldDeposit * _percents[_percents.length - 1] / _percents[rewardIndex + 1];\r\n      require(profit + newBalance >= newBalance, \"addition overflow for balance\");\r\n      return profit + newBalance;\r\n    }\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view override virtual returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal onlyNotDeprecated virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override virtual returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external override virtual returns (bool) {\r\n    uint256 temp = _allowances[msg.sender][spender];\r\n    require(temp + addedValue >= temp, \"addition overflow\");\r\n    _approve(msg.sender, spender, temp + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external override virtual returns (bool) {\r\n    uint256 temp = _allowances[msg.sender][spender];\r\n    require(subtractedValue <= temp, \"ERC20: decreased allowance below zero\");\r\n    _approve(msg.sender, spender, temp - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override virtual returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override virtual returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 temp = _allowances[sender][msg.sender];\r\n    require(amount <= temp, \"ERC20: transfer amount exceeds allowance\");\r\n    _approve(sender, msg.sender, temp - amount);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal onlyNotDeprecated virtual {\r\n    require(amount > 0, \"amount should be > 0\");\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    uint256 oldDeposit = _deposits[sender];\r\n    uint256 rewardIndex = _rewardIndexForAccount[sender];\r\n    uint256 depositDiff = 0;\r\n\r\n    if (oldDeposit == 0 || rewardIndex != _percents.length - 1) {\r\n      uint256 senderBalance = balanceOf(sender);\r\n      require(amount <= senderBalance, \"ERC20: transfer amount exceeds balance\");\r\n      _balances[sender] = senderBalance - amount;\r\n\r\n      _deposits[sender] = 0;\r\n      _rewardIndexForAccount[sender] = _percents.length - 1;\r\n    } else {\r\n      if (amount <= oldDeposit) {\r\n        _deposits[sender] = oldDeposit - amount;\r\n        depositDiff = amount;\r\n      } else {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(amount - oldDeposit <= senderBalance, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - (amount - oldDeposit);\r\n        _deposits[sender] = 0;\r\n        depositDiff = oldDeposit;\r\n      }\r\n    }\r\n\r\n    oldDeposit = _deposits[recipient];\r\n    rewardIndex = _rewardIndexForAccount[recipient];\r\n    if (oldDeposit == 0 || rewardIndex != _percents.length - 1) {\r\n      uint256 recipientBalance = balanceOf(recipient);\r\n      require((amount - depositDiff) + recipientBalance >= recipientBalance, \"ERC20: addition overflow for recipient balance\");\r\n      _balances[recipient] = recipientBalance + (amount - depositDiff);\r\n      _rewardIndexForAccount[recipient] = _percents.length - 1;\r\n      _deposits[recipient] = depositDiff;\r\n    } else {\r\n      uint256 recipientBalance = _balances[recipient];\r\n      _balances[recipient] = recipientBalance + (amount - depositDiff);\r\n      _deposits[recipient] = oldDeposit + depositDiff;\r\n    }\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n}\r\n\r\ncontract USDN is StandartToken {\r\n  function name() external pure returns (string memory) {\r\n    return \"Wrapped Neutrino USD\";\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return \"gwUSDN\";\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return 18;\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USDN", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be7df75e56b9778d4d4ee33f05d6770dab690e6bcf257dc3e7a999605ddb9a81"}