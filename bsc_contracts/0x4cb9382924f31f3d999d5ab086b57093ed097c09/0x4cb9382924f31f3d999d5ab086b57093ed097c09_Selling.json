{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IoldSell {\r\n    function binder(address, uint256) external view returns (address);\r\n\r\n    function bought(address) external view returns (bool);\r\n\r\n    function getBinderLength(address account) external view returns (uint256);\r\n\r\n    function inviter(address) external view returns (address);\r\n\r\n    function rewards(address) external view returns (uint256);\r\n\r\n    function teamNum(address) external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract Selling is Ownable {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private total_price = 100 * 10 ** 18;\r\n    uint256 private buy_amount = 50 * 10 ** 18;\r\n    uint256 private inviter_rewards = 30 * 10 ** 18;\r\n    uint256 private top_inviter_rewards = 20 * 10 ** 18;\r\n\r\n    address private immutable usdtAddress;\r\n    address private immutable wbnbAddress;\r\n    address private immutable defaultAddress;\r\n    address private immutable oldAddress;\r\n    address public immutable salecoin;\r\n\r\n    mapping(address => address) public inviter;\r\n    mapping(address => address[]) public binder;\r\n    mapping(address => uint256) public teamNum;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    mapping(address => bool) public bought;\r\n\r\n    ISwapRouter private _router;\r\n    IERC20 USDT;\r\n\r\n    bool public status;\r\n    IoldSell _oldsell;\r\n\r\n    constructor() {\r\n        _router = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n        wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        salecoin = 0x299ECC384ded931a8F611B215dbfd370B5E1CCf3;\r\n        defaultAddress = 0x5801ec90200bbCa54ACB82af0a4Af82365A93955;\r\n        oldAddress = 0x381C59C2d4e9dF4D0D4D620D79F81D3b97D96767;\r\n        _oldsell = IoldSell(oldAddress);\r\n\r\n        USDT = IERC20(usdtAddress);\r\n        USDT.approve(address(_router), MAX);\r\n        USDT.approve(owner(), MAX);\r\n    }\r\n\r\n    function Buy(address _inviter) public {\r\n        require(status, \"not open\");\r\n        require(\r\n            bought[_inviter] || _inviter == defaultAddress,\r\n            \"invalid inviter\"\r\n        );\r\n        address buyer = msg.sender;\r\n        require(!bought[buyer], \"Only buy once\");\r\n\r\n        USDT.transferFrom(buyer, address(this), total_price);\r\n        SwapTokenForBuyer(buyer);\r\n        bought[buyer] = true;\r\n\r\n        address top_inviter;\r\n        top_inviter = inviter[_inviter];\r\n        if (top_inviter == address(0)) {\r\n            top_inviter = defaultAddress;\r\n        } else {\r\n            teamNum[top_inviter] += 1;\r\n        }\r\n\r\n        USDT.transfer(_inviter, inviter_rewards);\r\n        USDT.transfer(top_inviter, top_inviter_rewards);\r\n        rewards[_inviter] += inviter_rewards;\r\n        rewards[top_inviter] += top_inviter_rewards;\r\n\r\n        inviter[buyer] = _inviter;\r\n        binder[_inviter].push(buyer);\r\n        teamNum[_inviter] += 1;\r\n    }\r\n\r\n    function SwapTokenForBuyer(address _buyer) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = usdtAddress;\r\n        path[1] = wbnbAddress;\r\n        path[2] = salecoin;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            buy_amount,\r\n            0,\r\n            path,\r\n            _buyer,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n    }\r\n\r\n    function updateParams(\r\n        uint256 _total_price,\r\n        uint256 _buy_amount,\r\n        uint256 _inviter_rewards,\r\n        uint256 _top_inviter_rewards\r\n    ) public onlyOwner {\r\n        require(\r\n            _buy_amount + _inviter_rewards + _top_inviter_rewards ==\r\n                _total_price,\r\n            \"Wrong parameter\"\r\n        );\r\n        total_price = _total_price;\r\n        buy_amount = _buy_amount;\r\n        inviter_rewards = _inviter_rewards;\r\n        top_inviter_rewards = _top_inviter_rewards;\r\n    }\r\n\r\n    function batchSyncAddressData(address[] calldata _addr) public onlyOwner {\r\n        uint256 _len = _addr.length;\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            syncAddressData(_addr[i]);\r\n        }\r\n    }\r\n\r\n    function syncAddressData(address addr) public onlyOwner {\r\n        teamNum[addr] = _oldsell.teamNum(addr);\r\n        inviter[addr] = _oldsell.inviter(addr);\r\n        rewards[addr] = _oldsell.rewards(addr);\r\n        bought[addr] = _oldsell.bought(addr);\r\n        uint256 _len = _oldsell.getBinderLength(addr);\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            address binder_addr = _oldsell.binder(addr, i);\r\n            binder[addr].push(binder_addr);\r\n        }\r\n    }\r\n\r\n    function setAddressData(\r\n        address addr,\r\n        bool _bought,\r\n        address _inviter,\r\n        uint256 _rewards,\r\n        uint256 _teamNum\r\n    ) public onlyOwner {\r\n        teamNum[addr] = _teamNum;\r\n        inviter[addr] = _inviter;\r\n        rewards[addr] = _rewards;\r\n        bought[addr] = _bought;\r\n    }\r\n\r\n    function addAddressBinders(\r\n        address addr,\r\n        address[] calldata _binders\r\n    ) public onlyOwner {\r\n        uint256 _len = _binders.length;\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            binder[addr].push(_binders[i]);\r\n        }\r\n    }\r\n\r\n    function delAddressBinders(address addr) public onlyOwner {\r\n        delete binder[addr];\r\n    }\r\n\r\n    function getBinderLength(address account) public view returns (uint256) {\r\n        return binder[account].length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_binders\",\"type\":\"address[]\"}],\"name\":\"addAddressBinders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"batchSyncAddressData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delAddressBinders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bought\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamNum\",\"type\":\"uint256\"}],\"name\":\"setAddressData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"syncAddressData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inviter_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_top_inviter_rewards\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Selling", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82bd4941311ac0e668cc9238ea626cf63a68ebddbf61e4584d2afd5dcefcda31"}