{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"GenesisFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\n\\ncontract GenesisFarmBUSD is Ownable {\\n\\tusing SafeMath for uint256;\\n\\n\\tIERC20 public immutable stablecoin;\\n\\tuint256 constant public INVEST_MIN_AMOUNT = 50 ether; // Min 50 BUSD \\n\\tuint256 constant public PROJECT_FEE = 300;\\n\\tuint256 constant public ROI_FEE = 600;\\n\\tuint256 constant public UNSTAKE_FEE = 2000;\\n\\tuint256 constant public UNSTAKE_COMM_DIVIDER = 4;\\n\\tuint256 constant public PERCENTS_DIVIDER = 10000;\\n\\tuint256 constant public PLANPER_DIVIDER = 10000;\\n\\tuint256 constant public TIME_STEP = 1 days;\\n\\tuint256 immutable public LAUNCH_TIME;\\n\\n\\tuint256 public totalInvested;\\n\\tuint256 public totalReinvested;\\n\\n\\tstruct Plan {\\n\\t\\tuint256 time;\\n\\t\\tuint256 percent;\\n\\t}\\n\\tPlan[] internal plans;\\n\\n\\tstruct Deposit {\\n\\t\\tuint8 plan;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 start;\\n\\t}\\n\\n\\tstruct User {\\n\\t\\tDeposit[] deposits;\\n\\t\\tuint256 checkpoint;\\n\\t\\tuint256 withdrawn;\\n\\t\\tuint256 totalReinvested;\\n\\t\\tuint256 totalInvested;\\n\\t}\\n\\n\\tmapping (address => User) internal users;\\n\\n\\taddress public commissionWallet;\\n\\n\\tevent Newbie(address user);\\n\\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\\n\\tevent Withdrawn(address indexed user, uint256 amount);\\n\\tevent Reinvested(address indexed user, uint256 amount);\\n\\tevent FeePayed(address indexed user, uint256 totalAmount);\\n\\n\\tconstructor(uint256 _launch, address payable _commissionWallet, address _stablecoin) {\\n\\t\\tstablecoin = IERC20(_stablecoin);\\n\\t\\tLAUNCH_TIME = _launch;\\n\\t\\tcommissionWallet = _commissionWallet;\\n\\n\\t\\tplans.push(Plan(10000, 50));\\n\\t\\tplans.push(Plan(10000, 75));\\n\\t}\\n\\n\\tfunction invest(uint256 amount) public {\\n\\t\\trequire(block.timestamp >= LAUNCH_TIME, \\\"Contract has not started yet.\\\");\\n\\t\\trequire(amount >= INVEST_MIN_AMOUNT);\\n\\n\\t\\tUser storage user = users[msg.sender];\\n\\t\\tuser.totalInvested += amount;\\n\\n\\t\\tstablecoin.transferFrom(msg.sender, address(this), amount);\\n\\t\\tuint256 fee = amount * getApplicableFee(msg.sender) / PERCENTS_DIVIDER;\\n\\t\\tstablecoin.transfer(commissionWallet, fee);\\n\\t\\temit FeePayed(msg.sender, fee);\\n\\t\\tamount -= fee;\\n\\n\\t\\tif (user.deposits.length == 0) {\\n\\t\\t\\tuser.checkpoint = block.timestamp;\\n\\t\\t\\temit Newbie(msg.sender);\\n\\t\\t}\\n\\n\\t\\tuser.deposits.push(Deposit(/*plan*/0, amount, block.timestamp));\\n\\n\\t\\ttotalInvested = totalInvested.add(amount);\\n\\n\\t\\temit NewDeposit(msg.sender, /*plan*/0, amount);\\n\\t}\\n\\n\\tfunction withdraw() public {\\n\\t\\tUser storage user = users[msg.sender];\\n\\n\\t\\tuint256 totalAmount = getUserDividends(msg.sender);\\n\\t\\trequire(totalAmount > 0, \\\"User has no dividends\\\");\\n\\n\\t\\tuint256 contractBalance = getContractBalance();\\n\\t\\tuint256 fee = totalAmount * getApplicableFee(msg.sender) / PERCENTS_DIVIDER;\\n    if (contractBalance < fee) {\\n      fee = contractBalance;\\n    }\\n\\t\\tstablecoin.transfer(commissionWallet, fee);\\n    contractBalance -= fee;\\n\\t\\ttotalAmount -= fee;\\n\\n\\t\\tif (contractBalance < totalAmount) {\\n\\t\\t\\ttotalAmount = contractBalance;\\n\\t\\t}\\n\\n\\t\\tuser.checkpoint = block.timestamp;\\n\\t\\tuser.withdrawn += totalAmount;\\n\\n\\t\\tstablecoin.transfer(msg.sender, totalAmount);\\n\\n\\t\\temit Withdrawn(msg.sender, totalAmount);\\n\\t}\\n\\n\\tfunction getContractBalance() public view returns (uint256) {\\n\\t\\treturn stablecoin.balanceOf(address(this));\\n\\t}\\n\\n  function reinvest() public {\\n\\t\\tUser storage user = users[msg.sender];\\n\\n    // Calculate amount to reinvest in totalAmount\\n\\t\\tuint256 totalAmount = getUserDividends(msg.sender);\\n\\t\\trequire(totalAmount > 0, \\\"User has no dividends\\\");\\n\\n\\t\\tuint256 contractBalance = getContractBalance();\\n\\t\\tif (contractBalance < totalAmount) {\\n\\t\\t\\ttotalAmount = contractBalance;\\n\\t\\t}\\n\\n\\t\\tuser.checkpoint = block.timestamp;\\n\\n    // Invest totalAmount back into the contract\\n\\t\\tuser.deposits.push(Deposit(/*plan*/1, totalAmount, block.timestamp));\\n\\t\\tuser.totalReinvested += totalAmount;\\n\\t\\ttotalReinvested += totalAmount;\\n\\n\\t\\temit Reinvested(msg.sender, totalAmount);\\n  }\\n\\n\\tfunction unstake() public {\\n\\t\\tUser storage user = users[msg.sender];\\n\\t\\tuint256 dividends = 0 ;\\n\\t\\tuint256 initialDeposits = 0;\\n\\t\\tuint256 amountToWithdraw = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < user.deposits.length; i++) {\\n\\t\\t\\tDeposit storage deposit = user.deposits[i];\\n\\t\\t\\tuint256 finish = deposit.start.add(plans[deposit.plan].time.mul(1 days));\\n\\t\\t\\tif (user.checkpoint < finish) {\\n\\t\\t\\t\\tuint256 share = deposit.amount.mul(plans[deposit.plan].percent).div(PLANPER_DIVIDER);\\n\\t\\t\\t\\tuint256 from = deposit.start > user.checkpoint ? deposit.start : user.checkpoint;\\n\\t\\t\\t\\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\\n\\t\\t\\t\\tif (from < to) {\\n\\t\\t\\t\\t\\tdividends += (share * (to - from)) / TIME_STEP;\\n\\t\\t\\t\\t\\tif (deposit.plan == 0) {\\n\\t\\t\\t\\t\\t\\tinitialDeposits += deposit.amount;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdeposit.plan = 0;\\n\\t\\t\\t\\t\\tdeposit.amount = 0;\\n\\t\\t\\t\\t\\tdeposit.start = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuser.checkpoint = block.timestamp;\\n\\t\\tuint256 dividendFee = dividends * getApplicableFee(msg.sender) / PERCENTS_DIVIDER;\\n\\t\\tdividends -= dividendFee;\\n\\t\\tuser.withdrawn += dividends;\\n\\t\\tamountToWithdraw += dividends;\\n\\t\\tuint256 unstakeFee = initialDeposits * UNSTAKE_FEE / PERCENTS_DIVIDER;\\n\\t\\tif (user.withdrawn < user.totalInvested) {\\n\\t\\t\\tuint256 unstakeAmount = min(user.totalInvested - user.withdrawn, initialDeposits - unstakeFee);\\n\\t\\t\\tamountToWithdraw += unstakeAmount;\\n\\t\\t\\tuser.withdrawn += unstakeAmount;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"You have already earned your initial investment back!\\\");\\n\\t\\t}\\n\\n\\t\\tstablecoin.transfer(msg.sender, amountToWithdraw);\\n\\t\\tstablecoin.transfer(commissionWallet, min(dividendFee + (unstakeFee / UNSTAKE_COMM_DIVIDER), getContractBalance()));\\n\\t}\\n\\n\\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\\n\\t\\ttime = plans[plan].time;\\n\\t\\tpercent = plans[plan].percent;\\n\\t}\\n\\n\\tfunction getUserDividends(address userAddress) public view returns (uint256) {\\n\\t\\tUser storage user = users[userAddress];\\n\\n\\t\\tuint256 totalAmount;\\n\\n\\t\\tfor (uint256 i = 0; i < user.deposits.length; i++) {\\n\\t\\t\\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\\n\\t\\t\\tif (user.checkpoint < finish) {\\n\\t\\t\\t\\tuint256 share = user.deposits[i].amount.mul(plans[user.deposits[i].plan].percent).div(PLANPER_DIVIDER);\\n\\t\\t\\t\\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\\n\\t\\t\\t\\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\\n\\t\\t\\t\\tif (from < to) {\\n\\t\\t\\t\\t\\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn totalAmount;\\n\\t}\\n\\n\\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\\n\\t\\treturn users[userAddress].withdrawn;\\n\\t}\\n\\n\\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].checkpoint;\\n\\t}\\n\\n\\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].deposits.length;\\n\\t}\\n\\n\\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\\n\\t\\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\\n\\t\\t\\tamount = amount.add(users[userAddress].deposits[i].amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish) {\\n\\t    User storage user = users[userAddress];\\n\\n\\t\\tplan = user.deposits[index].plan;\\n\\t\\tpercent = plans[plan].percent;\\n\\t\\tamount = user.deposits[index].amount;\\n\\t\\tstart = user.deposits[index].start;\\n\\t\\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(1 days));\\n\\t}\\n\\n\\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReinvestedUser, uint256 totalInvestedUser) {\\n\\t\\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), users[userAddress].totalReinvested, users[userAddress].totalInvested);\\n\\t}\\n\\n\\tfunction getApplicableFee(address userAddress) public view returns (uint256) {\\n\\t\\tUser storage user = users[userAddress];\\n\\t\\treturn user.withdrawn < (user.totalInvested + user.totalReinvested) ? PROJECT_FEE : ROI_FEE;\\n\\t}\\n\\n\\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\tfunction changeShares(address newWallet) external onlyOwner {\\n\\t\\tcommissionWallet = newWallet;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"GenesisFarm.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launch\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_commissionWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLANPER_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_COMM_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getApplicableFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReinvestedUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestedUser\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenesisFarmBUSD", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000630515a0000000000000000000000000f0aaf293161086c786624757f25e9b1f26b6f175000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}