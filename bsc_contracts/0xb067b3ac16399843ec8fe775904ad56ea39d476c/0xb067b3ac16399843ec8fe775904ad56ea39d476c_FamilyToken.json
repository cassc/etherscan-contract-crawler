{"SourceCode": "pragma solidity ^0.7.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n\tfunction onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface RouterInterface {\r\n\tfunction WETH() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\tfunction addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}\r\n\r\ninterface FactoryInterface {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract BUSDManager {\r\n\taddress mainC;\r\n\tERC20Interface BUSD;\r\n\r\n\tconstructor(ERC20Interface _busd) {\r\n\t\tmainC = msg.sender;\r\n\t\tBUSD = _busd;\r\n\t}\r\n\t\r\n\tfunction transfer(address to, uint256 tokens) public {\r\n\t\trequire(msg.sender == mainC);\r\n\t\tBUSD.transfer(to, tokens);\r\n\t}\r\n\t\r\n\tfunction transferAll(address to) public {\r\n\t\trequire(msg.sender == mainC);\r\n\t\tBUSD.transfer(to, BUSD.balanceOf(address(this)));\r\n\t}\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\tevent OwnershipRenounced();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\t\r\n\tfunction _chainId() internal pure returns (uint256) {\r\n\t\tuint256 id;\r\n\t\tassembly {\r\n\t\t\tid := chainid()\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\t\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\t\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\towner = address(0);\r\n\t\tnewOwner = address(0);\r\n\t\temit OwnershipRenounced();\r\n\t}\r\n}\r\n\r\ncontract FamilyToken is Owned {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tstruct TransferOut {\r\n\t\tuint256 amount;\r\n\t\tuint256 timestamp;\r\n\t\tuint256 balanceBefore;\r\n\t}\r\n\t\r\n\tstruct Account {\r\n\t\tuint256 balance;\r\n\t\tmapping (address => uint256) allowances;\r\n\t\tuint256 staked;\r\n\t\tuint256 lastClaim;\r\n        bool whitelisted;\r\n        bool excluded;\r\n\t\tbool allowedToStake;\r\n\t\tTransferOut[] sent;\r\n\t}\r\n\t\r\n\tERC20Interface public BUSD;\r\n\t\r\n\tmapping (address => Account) public accounts;\r\n\tmapping (address => bool) public whitelisters;\r\n\taddress[] activeAccounts;\r\n\t\r\n\tuint256 public totalSupply;\r\n\tuint8 public decimals;\r\n\tstring public name;\r\n\tstring public symbol;\r\n\t\r\n\taddress public marketingAddress;\r\n\taddress public donationAddress;\r\n\taddress public arbitrationAddress;\r\n\t\r\n\tbool public stakingEnabled;\r\n\t\r\n\tuint256 public buyFeeLp = 100;\r\n\tuint256 public buyFeeDonation = 100;\r\n\tuint256 public buyFeeMarketing = 100;\r\n\tuint256 public buyFeeBurn = 0;\r\n\tuint256 public buyFeeArbitration = 0;\r\n\t\r\n\tuint256 public sellFeeLp = 100;\r\n\tuint256 public sellFeeBurn = 300;\r\n\tuint256 public sellFeeDonation = 25;\r\n\tuint256 public sellFeeMarketing = 25;\r\n\tuint256 public sellFeeArbitration = 150;\r\n\t\r\n\tuint256 public penaltyFeeLP = 500;\r\n\tuint256 public penaltyFeeBurn = 1500;\r\n\tuint256 public penaltyFeeDonation = 500;\r\n\tuint256 public penaltyFeeMarketing = 500;\r\n\tuint256 public penaltyFeeArbitration = 1000;\r\n\t\r\n\t\r\n\tuint256 public antiWhaleThreshold = 2;\r\n\t\r\n    address deployer;\r\n\r\n\tBUSDManager busdManager;\r\n\r\n\tuint256 initialSupply;\r\n\tbool lock;\r\n\t\r\n\tRouterInterface public router;\r\n\taddress public pair;\r\n\tbool routerDefined;\r\n\tbool public initialized;\r\n\t\r\n\tuint256 toSwap;\r\n\tuint256 liquifiable;\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Whitelisted(address indexed acct);\r\n\tevent Unwhitelisted(address indexed acct);\r\n\tevent Excluded(address indexed acct);\r\n\tevent Unexcluded(address indexed acct);\r\n\tevent MarketingAddressChanged(address indexed oldAddress, address indexed newAddress);\r\n\tevent DonationAddressChanged(address indexed oldAddress, address indexed newAddress);\r\n\tevent ArbitrationAddressChanged(address indexed oldAddress, address indexed newAddress);\r\n\t\r\n\tevent LpTaxChanged(uint256 indexed buyTax, uint256 indexed sellTax, uint256 indexed penaltyTax);\r\n\tevent DonationTaxChanged(uint256 indexed buyTax, uint256 indexed sellTax, uint256 indexed penaltyTax);\r\n\tevent MarketingTaxChanged(uint256 indexed buyTax, uint256 indexed sellTax, uint256 indexed penaltyTax);\r\n\tevent BurnTaxChanged(uint256 indexed buyTax, uint256 indexed sellTax, uint256 indexed penaltyTax);\r\n\tevent ArbitrationTaxChanged(uint256 indexed buyTax, uint256 indexed sellTax, uint256 indexed penaltyTax);\r\n\r\n\tevent AntiwhaleThresholdChanged(uint256 indexed newThreshold);\r\n\t\r\n\tevent AllowedToStake(address indexed user);\r\n\tevent DisallowedToStake(address indexed user);\r\n\t\r\n\tmodifier onlyWhitelister {\r\n\t\trequire((msg.sender == owner) || (whitelisters[msg.sender]), \"UNAUTHORIZED\"); // allows either owner or an approved whitelisters\r\n\t\t_;\r\n\t}\r\n\t\r\n\tconstructor(string memory _name, string memory _symbol, uint256 _supply, uint8 _decimals, address _marketingAddress, address _donationAddress, address _arbitrationAddress) {\r\n\t\tbool _testnet = (getChainID() == 97); // 97 is BSC testnet chainid, 56 is mainnet one\r\n\t\taddress _routerAddress = (_testnet ? 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 : 0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\taddress busd = (_testnet ? 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee : 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\t\tmarketingAddress = _marketingAddress;\r\n\t\tdonationAddress = _donationAddress;\r\n\t\tarbitrationAddress = _arbitrationAddress;\r\n        deployer = msg.sender;\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\ttotalSupply = _supply;\r\n\t\tinitialSupply = _supply;\r\n\t\taccounts[msg.sender].balance = _supply;\r\n\t\t\r\n\t\taccounts[address(this)].whitelisted = true;\r\n\t\taccounts[address(this)].excluded = true;\r\n\t\t\r\n\t\taccounts[marketingAddress].whitelisted = true;\r\n\t\taccounts[marketingAddress].excluded = true;\r\n\t\t\r\n\t\taccounts[msg.sender].whitelisted = true;\r\n\t\taccounts[msg.sender].excluded = true;\r\n\t\t\r\n\t\tBUSD = ERC20Interface(busd);\r\n\t\tbusdManager = new BUSDManager(BUSD);\r\n\t\tif (_routerAddress != address(0)) {\r\n\t\t\tRouterInterface _router = RouterInterface(_routerAddress);\r\n\t\t\trouter = _router;\r\n\t\t\tpair = FactoryInterface(_router.factory()).createPair(address(this), busd);\r\n\t\t\taccounts[pair].excluded = true;\r\n\t\t\trouterDefined = true;\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(address(0), msg.sender, _supply);\r\n\t}\r\n\t\r\n\tfunction getChainID() public pure returns (uint256) {\r\n\t\tuint256 id;\r\n\t\tassembly {\r\n\t\t\tid := chainid()\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\r\n\t\r\n\t// function init(uint256 BUSDAmount, uint256 tokenAmount) public payable {\r\n\t\t// require(!initialized, \"ALREADY_INITIALIZED\");\r\n        // require(msg.sender == deployer, \"Deployer: wth is going on here ?\");\r\n\t\t// initialized = true;\r\n\t\t// if (routerDefined) {\r\n\t\t\t// lock = true;\r\n\t\t\t// BUSD.transferFrom(msg.sender, address(this), BUSDAmount);\r\n\t\t\t// _transfer(msg.sender, address(this), tokenAmount);\r\n\t\t\t// addLiquidity(balanceOf(address(this)), BUSDAmount);\r\n\t\t\t// lock = false;\r\n\t\t// }\r\n\t// }\r\n\t\r\n\tfunction balanceOf(address addr) public view returns (uint256) {\r\n\t\treturn accounts[addr].balance;\r\n\t}\r\n\t\r\n\tfunction stakedOf(address addr) public view returns (uint256) {\r\n\t\treturn accounts[addr].staked.add(pendingRewards(addr));\r\n\t}\r\n\t\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint256) {\r\n\t\treturn accounts[tokenOwner].allowances[spender];\r\n\t}\r\n\t\r\n\tfunction limitUsed(address addr) public view returns (uint256 maxAmt, uint256 total) {\r\n\t\tTransferOut[] memory sent = accounts[addr].sent;\r\n\t\tuint256 minTime = block.timestamp.sub(86400);\r\n\t\tTransferOut memory _tx;\r\n\t\tfor (uint256 n = (sent.length); n > 0; n--) {\r\n\t\t\t_tx = sent[n-1];\r\n\t\t\tif (_tx.timestamp > minTime) {\r\n\t\t\t\ttotal += _tx.amount;\r\n\t\t\t\tmaxAmt = _tx.balanceBefore.div(10);\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (maxAmt == 0) {\r\n\t\t\tmaxAmt = balanceOf(addr).div(10);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction swapForBNB(uint256 tokenAmt) private {\r\n        accounts[address(this)].allowances[address(router)] = uint256(tokenAmt);\r\n\t\taddress[] memory path = new address[](3);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = address(BUSD);\r\n\t\tpath[2] = router.WETH();\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmt, 0, path, address(this), block.timestamp);\r\n\t}\r\n\t\r\n\tfunction swapForBUSD(uint256 tokenAmt, address recipient) private returns (uint256) {\r\n\t\tuint256 balanceBefore = BUSD.balanceOf(address(this));\r\n//\t\tuint256 tokenAmt = (_tokenAmt <= balanceOf(address(this))) ? _tokenAmt : balanceOf(address(this));\r\n        accounts[address(this)].allowances[address(router)] = uint256(tokenAmt);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = address(BUSD);\r\n\t\tif (recipient == address(this)) {\r\n\t\t\trouter.swapExactTokensForTokens(tokenAmt, 0, path, address(busdManager), block.timestamp);\r\n\t\t\tbusdManager.transferAll(address(this));\r\n\t\t} else {\r\n\t\t\trouter.swapExactTokensForTokens(tokenAmt, 0, path, recipient, block.timestamp);\r\n\t\t}\r\n\t\treturn BUSD.balanceOf(address(this)).sub(balanceBefore);\r\n\t}\r\n\t\r\n\tfunction addLiquidity(uint256 tokenAmt, uint256 BUSDAmt) private {\r\n\t\tuint256 _toApprove = uint256(2**256-1);\r\n        accounts[address(this)].allowances[address(router)] = _toApprove;\r\n\t\tBUSD.approve(address(router), _toApprove);\r\n\t\trouter.addLiquidity(address(BUSD), address(this), BUSDAmt, tokenAmt, 0, 0, address(this), block.timestamp);\r\n\t}\r\n\t\r\n\tfunction liquify(uint256 tokens) private {\r\n\t\tliquifiable = liquifiable.add(tokens);\r\n\t\tif (canSwap()) {\r\n\t\t\tuint256 half = liquifiable.div(2);\r\n\t\t\tuint256 otherHalf = liquifiable.sub(half);\r\n\t\t\tuint256 busdAmount = swapForBUSD(half, address(this));\r\n\t\t\taddLiquidity(otherHalf, busdAmount);\r\n\t\t\tliquifiable = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getBurnFee(uint256 tokens, uint8 caseType) public view returns (uint256) {\r\n\t\tif (caseType == 2) {\r\n\t\t\treturn tokens.mul(penaltyFeeBurn).div(10000);\r\n\t\t} else if (caseType == 1) {\t\t\r\n\t\t\treturn tokens.mul(sellFeeBurn).div(10000);\r\n\t\t} else {\r\n\t\t\treturn tokens.mul(buyFeeBurn).div(10000);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getDonationFee(uint256 tokens, uint8 caseType) public view returns (uint256) {\r\n\t\tif (caseType == 2) {\r\n\t\t\treturn tokens.mul(penaltyFeeDonation).div(10000);\r\n\t\t} else if (caseType == 1) {\t\t\r\n\t\t\treturn tokens.mul(sellFeeDonation).div(10000);\r\n\t\t} else {\r\n\t\t\treturn tokens.mul(buyFeeDonation).div(10000);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getLiquidityFee(uint256 tokens, uint8 caseType) public view returns (uint256) {\r\n\t\tif (caseType == 2) {\r\n\t\t\treturn tokens.mul(penaltyFeeLP).div(10000);\r\n\t\t} else if (caseType == 1) {\t\t\r\n\t\t\treturn tokens.mul(sellFeeLp).div(10000);\r\n\t\t} else {\r\n\t\t\treturn tokens.mul(buyFeeLp).div(10000);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getArbitrationFee(uint256 tokens, uint8 caseType) public view returns (uint256) {\r\n\t\tif (caseType == 2) {\r\n\t\t\treturn tokens.mul(penaltyFeeArbitration).div(10000);\r\n\t\t} else if (caseType == 1) {\t\t\r\n\t\t\treturn tokens.mul(sellFeeArbitration).div(10000);\r\n\t\t} else {\r\n\t\t\treturn tokens.mul(buyFeeArbitration).div(10000);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getMarketingFee(uint256 tokens, uint8 caseType) public view returns (uint256) {\r\n\t\tif (caseType == 2) {\r\n\t\t\treturn tokens.mul(penaltyFeeMarketing).div(10000);\r\n\t\t} else if (caseType == 1) {\r\n\t\t\treturn tokens.mul(sellFeeMarketing).div(10000);\r\n\t\t} else {\r\n\t\t\treturn tokens.mul(buyFeeMarketing).div(10000);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction pendingRewards(address user) public view returns (uint256) {\r\n\t\tAccount storage acct = accounts[user];\r\n\t\tuint256 deltaT = block.timestamp.sub(acct.lastClaim); // time elapsed since last claim\r\n\t\treturn acct.staked.mul(4).mul(deltaT).div(3153600000); // 4% per year, multiplied by delta T, divided by total seconds in a year (so we get rewards per second)\r\n\t}\r\n\t\r\n\tfunction _compound(address user) private {\r\n\t\tAccount storage acct = accounts[user];\r\n\t\tuint256 _rewards = pendingRewards(user);\r\n\t\tacct.lastClaim = block.timestamp;\r\n\t\tif (_rewards > 0) {\r\n\t\t\tacct.staked = acct.staked.add(_rewards);\r\n\t\t\taccounts[address(this)].balance = accounts[address(this)].balance.add(_rewards);\r\n\t\t\ttotalSupply = totalSupply.add(_rewards);\r\n\t\t\temit Transfer(address(0), address(this), _rewards);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction compound() public {\r\n\t\t_compound(msg.sender);\r\n\t}\r\n\t\r\n\tfunction claim() public {\r\n\t\tAccount storage acct = accounts[msg.sender];\r\n\t\tuint256 _rewards = pendingRewards(msg.sender);\r\n\t\tacct.lastClaim = block.timestamp;\r\n\t\tacct.balance = acct.balance.add(_rewards);\r\n\t\ttotalSupply = totalSupply.add(_rewards);\r\n\t\temit Transfer(address(0), msg.sender, _rewards);\r\n\t}\r\n\t\r\n\tfunction stake(uint256 tokens) public {\r\n\t\trequire(stakingEnabled, \"Staking not yet enabled\");\r\n\t\t_compound(msg.sender);\r\n\t\tAccount storage acct = accounts[msg.sender];\r\n\t\trequire(acct.allowedToStake, \"NOT_ALLOWED_TO_STAKE\");\r\n\t\t\r\n\t\tacct.balance = acct.balance.sub(tokens, \"INSUFFICIENT_BALANCE\");\r\n\t\taccounts[address(this)].balance = accounts[address(this)].balance.add(tokens);\r\n\t\tacct.staked = acct.staked.add(tokens);\r\n\t\t\r\n\t\temit Transfer(msg.sender, address(this), tokens);\r\n\t}\r\n\t\r\n\tfunction unstake(uint256 tokens) public {\r\n\t\trequire(stakingEnabled, \"Staking not yet enabled\");\r\n\t\t_compound(msg.sender);\r\n\t\tAccount storage acct = accounts[msg.sender];\r\n\t\t\r\n\t\taccounts[address(this)].balance = accounts[address(this)].balance.sub(tokens);\r\n\t\tacct.staked = acct.staked.sub(tokens, \"INSUFFICIENT_STAKED\");\r\n\t\tacct.balance = acct.balance.add(tokens);\r\n\t\t\r\n\t\temit Transfer(address(this), msg.sender, tokens);\r\n\t}\r\n\t\r\n\tfunction canSwap() private view returns (bool) {\r\n\t\treturn (msg.sender != pair);\r\n\t}\r\n\t\r\n\tfunction _distributeBUSD(uint256 LPAmt, uint256 marketingAmt, uint256 donationAmt, uint256 arbitrationAmt) private {\r\n\t\tif (routerDefined) {\r\n\t\t\tlock = true;\r\n\t\t\tliquify(LPAmt);\r\n\t\t\ttoSwap = toSwap.add(marketingAmt.add(donationAmt).add(arbitrationAmt));\r\n\t\t\tif (canSwap()) {\r\n\t\t\t\tuint256 obtainedBUSD = swapForBUSD(toSwap, address(busdManager));\r\n\t\t\t\tbusdManager.transfer(marketingAddress, obtainedBUSD.mul(marketingAmt).div(toSwap));\r\n\t\t\t\tbusdManager.transfer(donationAddress, obtainedBUSD.mul(donationAmt).div(toSwap));\r\n\t\t\t\tbusdManager.transfer(arbitrationAddress, obtainedBUSD.mul(arbitrationAmt).div(toSwap));\r\n\t\t\t\ttoSwap = 0;\r\n\t\t\t}\r\n\t\t\t// swapForBUSD(marketingAmt, marketingAddress);\r\n\t\t\t// swapForBUSD(donationAmt, donationAddress);\r\n\t\t\t// swapForBUSD(arbitrationAmt, arbitrationAddress);\r\n\t\t\tlock = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _transfer(address from, address to, uint256 tokens) private returns (bool) {\r\n\t\t// require(initialized, \"WAIT_FOR_INIT\");\r\n\t\tAccount storage acctFrom = accounts[from];\r\n\t\tAccount storage acctTo = accounts[to];\r\n\t\t\r\n\t\t_compound(from);\r\n\t\t_compound(to);\r\n\t\t\r\n\t\tacctFrom.sent.push(TransferOut({amount: tokens, timestamp: block.timestamp, balanceBefore: acctFrom.balance}));\r\n\t\t\r\n\t\tacctFrom.balance = acctFrom.balance.sub(tokens, \"INSUFFICIENT_BALANCE\"); // removes them from sender balances\r\n\t\trequire((((acctTo.balance + tokens) < totalSupply.mul(antiWhaleThreshold).div(100)) || acctTo.excluded), \"BLOCKED_BY_ANTIWHALE\");\r\n\t\tbool _lock = (lock || (acctFrom.whitelisted) || (acctTo.whitelisted));\r\n\t\t\r\n\t\tuint256 totalFees;\r\n\t\tuint256 toBurn;\r\n\t\tif (!(_lock)) {\r\n\t\t\t(uint256 maxAmt, uint256 totalSpent) = limitUsed(from);\r\n\t\t\tuint8 caseType = ((from == address(pair)) ? 0 : (((totalSpent + tokens) > maxAmt) ? 2 : 1));\r\n\t\t\t\r\n\t\t\ttoBurn = getBurnFee(tokens, caseType);\r\n\t\t\tuint256 toMarketing = getMarketingFee(tokens, caseType);\r\n\t\t\tuint256 toDonation = getDonationFee(tokens, caseType);\r\n\t\t\tuint256 toLP = getLiquidityFee(tokens, caseType);\r\n\t\t\tuint256 toArbitration = getArbitrationFee(tokens, caseType);\r\n\r\n\t\t\ttotalFees = toLP.add(toDonation).add(toMarketing).add(toArbitration);\r\n\r\n\t\t\tif (totalFees > 0) {\r\n\t\t\t\taccounts[address(this)].balance = accounts[address(this)].balance.add(totalFees);\r\n\t\t\t}\r\n\t\t\tif (toBurn > 0) {\r\n\t\t\t\ttotalSupply = totalSupply.sub(toBurn);\r\n\t\t\t}\r\n\t\t\t_distributeBUSD(toLP, toMarketing, toDonation, toArbitration);\r\n\t\t}\r\n\t\t\r\n\t\tuint256 toRecipient = tokens.sub(totalFees).sub(toBurn);\r\n\t\tacctTo.balance = acctTo.balance.add(toRecipient);\r\n\t\t// accounts[marketingAddress].balance = accounts[marketingAddress].balance.add(toMarketing);\r\n\t\t\r\n\t\temit Transfer(from, address(this), totalFees);\r\n\t\temit Transfer(from, address(0), toBurn);\r\n\t\temit Transfer(from, to, toRecipient);\r\n        return true;\r\n\t}\r\n\t\r\n\tfunction transfer(address to, uint256 tokens) public returns (bool) {\r\n\t\t_transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 tokens) public returns (bool) {\r\n\t\taccounts[from].allowances[msg.sender] = accounts[from].allowances[msg.sender].sub(tokens, \"INSUFFICIENT_ALLOWANCE\");\r\n\t\t_transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction approve(address spender, uint256 tokens) public returns (bool) {\r\n\t\taccounts[msg.sender].allowances[spender] = accounts[msg.sender].allowances[spender].add(tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {\r\n\t\tapprove(spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction changeMarketingAddress(address newAddr) public onlyOwner {\r\n\t\temit MarketingAddressChanged(marketingAddress, newAddr);\r\n\t\tmarketingAddress = newAddr;\r\n\t}\r\n\t\r\n\tfunction changeDonationAddress(address newAddr) public onlyOwner {\r\n\t\temit DonationAddressChanged(donationAddress, newAddr);\r\n\t\tdonationAddress = newAddr;\r\n\t}\r\n\r\n\tfunction changeArbitrationAddress(address newAddr) public onlyOwner {\r\n\t\temit ArbitrationAddressChanged(arbitrationAddress, newAddr);\r\n\t\tarbitrationAddress = newAddr;\r\n\t}\r\n\r\n\tfunction whitelistWallet(address addr) public onlyWhitelister {\r\n\t\taccounts[addr].whitelisted = true;\r\n\t\temit Whitelisted(addr);\r\n\t}\r\n\t\r\n\tfunction unWhitelistWallet(address addr) public onlyWhitelister {\r\n\t\taccounts[addr].whitelisted = false;\r\n\t\temit Unwhitelisted(addr);\r\n\t}\r\n\t\r\n\tfunction excludeWhale(address addr) public onlyOwner {\r\n\t\taccounts[addr].excluded = true;\r\n\t\temit Excluded(addr);\r\n\t}\r\n\t\r\n\tfunction unexcludeWhale(address addr) public onlyOwner {\r\n\t\taccounts[addr].excluded = false;\r\n\t\temit Unexcluded(addr);\r\n\t}\r\n\t\r\n\tfunction transferAnyERC20Token(address token, uint256 tokens) public onlyOwner {\r\n\t\tERC20Interface(token).transfer(owner, tokens);\r\n\t}\r\n\t\r\n\tfunction setLPTax(uint256 buy, uint256 sell, uint256 penalty) public onlyOwner {\r\n\t\tbuyFeeLp = buy;\r\n\t\tsellFeeLp = sell;\r\n\t\tpenaltyFeeLP = penalty;\r\n\t\temit LpTaxChanged(buyFeeLp, sellFeeLp, penaltyFeeLP);\r\n\t}\r\n\r\n\tfunction setMarketingTax(uint256 buy, uint256 sell, uint256 penalty) public onlyOwner {\r\n\t\tbuyFeeMarketing = buy;\r\n\t\tsellFeeMarketing = sell;\r\n\t\tpenaltyFeeMarketing = penalty;\r\n\t\temit MarketingTaxChanged(buyFeeMarketing, sellFeeMarketing, penaltyFeeMarketing);\r\n\t}\r\n\t\r\n\tfunction setDonationTax(uint256 buy, uint256 sell, uint256 penalty) public onlyOwner {\r\n\t\tbuyFeeDonation = buy;\r\n\t\tsellFeeDonation = sell;\r\n\t\tpenaltyFeeDonation = penalty;\r\n\t\temit DonationTaxChanged(buyFeeDonation, sellFeeDonation, penaltyFeeDonation);\r\n\t}\r\n\t\r\n\tfunction setBurnTax(uint256 buy, uint256 sell, uint256 penalty) public onlyOwner {\r\n\t\tbuyFeeBurn = buy;\r\n\t\tsellFeeBurn = sell;\r\n\t\tpenaltyFeeBurn = penalty;\r\n\t\temit BurnTaxChanged(buyFeeBurn, sellFeeBurn, penaltyFeeBurn);\r\n\t}\r\n\t\r\n\tfunction setArbitrationTax(uint256 buy, uint256 sell, uint256 penalty) public onlyOwner {\r\n\t\tbuyFeeArbitration = buy;\r\n\t\tsellFeeArbitration = sell;\r\n\t\tpenaltyFeeArbitration = penalty;\r\n\t\temit ArbitrationTaxChanged(buyFeeArbitration, sellFeeArbitration, penaltyFeeArbitration);\r\n\t}\r\n\t\r\n\tfunction setAntiwhaleThreshold(uint256 percent) public onlyOwner {\r\n\t\tantiWhaleThreshold = percent;\r\n\t\temit AntiwhaleThresholdChanged(percent);\r\n\t}\r\n\t\r\n\tfunction enableStaking() public onlyOwner {\r\n\t\tstakingEnabled = true;\r\n\t}\r\n\t\r\n\tfunction allowStaking(address user) public onlyOwner {\r\n\t\taccounts[user].allowedToStake = true;\r\n\t\temit AllowedToStake(user);\r\n\t}\r\n\t\r\n\tfunction disallowStaking(address user) public onlyOwner {\r\n\t\taccounts[user].allowedToStake = false;\r\n\t\temit DisallowedToStake(user);\r\n\t}\r\n\t\r\n\tfunction setWhitelisterStatus(address addr, bool _status) public onlyOwner {\r\n\t\twhitelisters[addr] = _status;\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_donationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AllowedToStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AntiwhaleThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ArbitrationAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyTax\",\"type\":\"uint256\"}],\"name\":\"ArbitrationTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyTax\",\"type\":\"uint256\"}],\"name\":\"BurnTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DisallowedToStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DonationAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyTax\",\"type\":\"uint256\"}],\"name\":\"DonationTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"}],\"name\":\"Excluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyTax\",\"type\":\"uint256\"}],\"name\":\"LpTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MarketingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penaltyTax\",\"type\":\"uint256\"}],\"name\":\"MarketingTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"}],\"name\":\"Unexcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"}],\"name\":\"Unwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acct\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowedToStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeArbitration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeArbitrationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeDonationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"disallowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"excludeWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"caseType\",\"type\":\"uint8\"}],\"name\":\"getArbitrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"caseType\",\"type\":\"uint8\"}],\"name\":\"getBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"caseType\",\"type\":\"uint8\"}],\"name\":\"getDonationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"caseType\",\"type\":\"uint8\"}],\"name\":\"getLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"caseType\",\"type\":\"uint8\"}],\"name\":\"getMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"limitUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFeeArbitration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFeeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFeeDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFeeLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFeeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract RouterInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeArbitration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setAntiwhaleThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setArbitrationTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setBurnTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setDonationTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setLPTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelisterStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unWhitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unexcludeWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FamilyToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000d4f4fceaba44e3c88335c79f0fad87891287766b0000000000000000000000000b305abc86e52c83ed96a0b48e77bfd4cd7be255000000000000000000000000c35fd04ad4c1b32f7895ab9c200ad069445f87d2000000000000000000000000000000000000000000000000000000000000000b46616d696c79546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024654000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9e62e2d4f498a8f7063acbd103189c027e6d4600df36c373249d84369beb57a"}