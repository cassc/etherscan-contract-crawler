{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: test.sol\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract SwtStaking is Ownable {\r\n    IBEP20 public starToken = IBEP20(0x52CD40697ee19e0a3B99F67B5f8c111Ad54728Bb);\r\n\r\n    uint256 dailyROI = 80; // 0.8%  0.8 * 10**2\r\n    uint256 maxROIrewards = 20000; // Max ROI 200%  200 * 10**2\r\n    uint256 minimumUsdStake = 100 ether; // USD amount $100 worth of SWT\r\n    uint256 oneDayTimestamp = 86400; // 86400 One day\r\n    uint256 feesPercentage = 500; // 5%  5 * 10**2\r\n\r\n    address public feesWallet;\r\n    address public minter;\r\n\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955; // Mainnet USDT\r\n    IUniswapV2Router02 public router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    struct StakeDetails {\r\n        uint256 swtAmount;\r\n        uint256 usdtAmount;\r\n        uint256 dailyROI;\r\n        uint256 totalRewardDays;\r\n        uint256 stakeTime;\r\n        uint256 withdrawAmount;\r\n        bool isExpired;\r\n    }\r\n\r\n    mapping(address => StakeDetails[]) public stakeData;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 indexed stakeId,\r\n        uint256 usdtAmount,\r\n        uint256 swtAmount\r\n    );\r\n\r\n    event Claim(address indexed user, uint256 usdtAmount, uint256 swtAmount);\r\n    event Withdraw(address indexed walletAddress, uint256 amount);\r\n    event ExpiredStaking(\r\n        address indexed walletAddress,\r\n        uint256 indexed stakeId,\r\n        bool isExpired\r\n    );\r\n\r\n    constructor(address _minter, address _feesWallet) {\r\n        minter = _minter;\r\n        feesWallet = _feesWallet;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            minter == msg.sender || owner() == msg.sender,\r\n            \"Only minter can call\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function getSwtPriceInUSDT() public view returns (uint256) {\r\n        address WBNB = router.WETH();\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(starToken);\r\n        path[1] = WBNB;\r\n        path[2] = USDT;\r\n        uint256[] memory Price = router.getAmountsOut(1 ether, path);\r\n        return Price[2];\r\n    }\r\n\r\n    function getFeesPercentage() public view returns (uint256) {\r\n        return feesPercentage;\r\n    }\r\n\r\n    function getCountStaking(address wallet) public view returns (uint256) {\r\n        return stakeData[wallet].length;\r\n    }\r\n\r\n    function getUsdtAmountInSwt(\r\n        uint256 _usdtToken\r\n    ) public view returns (uint256) {\r\n        return (_usdtToken * 10 ** 18) / getSwtPriceInUSDT();\r\n    }\r\n\r\n    function getDailyROI() public view returns (uint256) {\r\n        return dailyROI;\r\n    }\r\n\r\n    function getTotalSwtInContract() public view returns (uint256) {\r\n        return starToken.balanceOf(address(this));\r\n    }\r\n\r\n    function setMinimumUsdStake(uint256 _minimumUsdStake) external onlyOwner {\r\n        minimumUsdStake = _minimumUsdStake; // _minimumUsdStake * 10 ** 18\r\n    }\r\n\r\n    function setDailyROI(uint256 _ROI) external onlyOwner {\r\n        dailyROI = _ROI; // _ROI * 10 ** 2\r\n    }\r\n\r\n    function setMaxROIrewards(uint256 _maxROIrewards) external onlyOwner {\r\n        maxROIrewards = _maxROIrewards; // _maxROIrewards * 10 ** 2\r\n    }\r\n\r\n    function setFeesWallet(address _feesWallet) external onlyOwner {\r\n        require(address(0) != _feesWallet, \"Zero address not allowed\");\r\n        feesWallet = _feesWallet; // Receive claim amount fees\r\n    }\r\n\r\n    function setFeesPercentage(uint256 _percent) external onlyOwner {\r\n        feesPercentage = _percent; // _percent * 10 ** 2\r\n    }\r\n\r\n    function setMinter(address _minter) external onlyOwner {\r\n        minter = _minter;\r\n    }\r\n\r\n    function expireStaking(\r\n        address _user,\r\n        uint256 index,\r\n        bool _isExpired\r\n    ) external onlyMinter {\r\n        require(stakeData[_user].length > 0, \"You do not have any staking.\");\r\n\r\n        if (_isExpired) {\r\n            uint256 amountToClaim = calculateRewardAmount(_user, index); // In USDT\r\n            if (amountToClaim > 0) {\r\n                claimTransfer(index, _user);\r\n            }\r\n        }\r\n\r\n        stakeData[_user][index].isExpired = _isExpired;\r\n\r\n        emit ExpiredStaking(_user, index, _isExpired);\r\n    }\r\n\r\n    function stake(uint256 _usdtAmount) external {\r\n        require(_usdtAmount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            _usdtAmount >= minimumUsdStake,\r\n            \"Staking amount should be greater than minimum amount\"\r\n        );\r\n        uint _swtAmount = getUsdtAmountInSwt(_usdtAmount);\r\n        require(\r\n            starToken.balanceOf(msg.sender) >= _swtAmount,\r\n            \"Insufficient funds for stake\"\r\n        );\r\n        require(\r\n            starToken.allowance(msg.sender, address(this)) >= _swtAmount,\r\n            \"Insufficient approval for stake\"\r\n        );\r\n\r\n        starToken.transferFrom(msg.sender, address(this), _swtAmount);\r\n\r\n        uint256 totalDays = maxROIrewards / dailyROI;\r\n        uint256 index = stakeData[msg.sender].length;\r\n\r\n        require(totalDays > 0, \"Invalid totalDays value\");\r\n\r\n        stakeData[msg.sender].push(\r\n            StakeDetails({\r\n                swtAmount: _swtAmount,\r\n                usdtAmount: _usdtAmount,\r\n                dailyROI: dailyROI,\r\n                totalRewardDays: totalDays,\r\n                stakeTime: block.timestamp,\r\n                withdrawAmount: 0,\r\n                isExpired: false\r\n            })\r\n        );\r\n\r\n        emit Staked(msg.sender, index, _usdtAmount, _swtAmount);\r\n    }\r\n\r\n    function getAmountToCliam(\r\n        uint256 index,\r\n        address sender\r\n    ) public view returns (uint256) {\r\n        require(stakeData[sender].length > 0, \"You do not have any staking.\");\r\n        require(\r\n            !stakeData[sender][index].isExpired,\r\n            \"Your staking is expired.\"\r\n        );\r\n        uint256 amountToClaim = calculateRewardAmount(sender, index);\r\n        return amountToClaim;\r\n    }\r\n\r\n    function claim(uint256 index) external {\r\n        require(\r\n            stakeData[msg.sender].length > 0,\r\n            \"You do not have any staking.\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp - stakeData[msg.sender][index].stakeTime >\r\n                oneDayTimestamp,\r\n            \"No reward generated yet.\"\r\n        );\r\n\r\n        claimTransfer(index, msg.sender);\r\n    }\r\n\r\n    function claimTransfer(uint256 index, address _user) internal {\r\n        require(!stakeData[_user][index].isExpired, \"Your staking is expired.\");\r\n\r\n        uint256 amountToClaim = calculateRewardAmount(_user, index); // In USDT\r\n        uint rewardInSWT = getUsdtAmountInSwt(amountToClaim); // IN SWT\r\n\r\n        require(\r\n            amountToClaim > 0,\r\n            \"Rewards generated already claimed. Please try later.\"\r\n        );\r\n\r\n        require(\r\n            rewardInSWT <= getTotalSwtInContract(),\r\n            \"Insufficient amount in staking pool.\"\r\n        );\r\n        uint256 fees = (rewardInSWT * feesPercentage) / 10000;\r\n\r\n        stakeData[_user][index].withdrawAmount += amountToClaim; // USDT Amount\r\n\r\n        starToken.transfer(_user, rewardInSWT - fees);\r\n        starToken.transfer(feesWallet, fees);\r\n\r\n        emit Claim(_user, amountToClaim, rewardInSWT);\r\n    }\r\n\r\n    function calculateRewardAmount(\r\n        address sender,\r\n        uint256 index\r\n    ) internal view returns (uint256) {\r\n        uint256 rewardGeneratedAmount = (stakeData[sender][index].usdtAmount *\r\n            stakeData[sender][index].dailyROI) / 10000;\r\n\r\n        uint256 daysPassed = (block.timestamp -\r\n            stakeData[sender][index].stakeTime) / oneDayTimestamp;\r\n\r\n        if (daysPassed <= stakeData[sender][index].totalRewardDays) {\r\n            return\r\n                (rewardGeneratedAmount * daysPassed) -\r\n                stakeData[sender][index].withdrawAmount;\r\n        } else {\r\n            return\r\n                (rewardGeneratedAmount *\r\n                    stakeData[sender][index].totalRewardDays) -\r\n                stakeData[sender][index].withdrawAmount;\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 amount,\r\n        address walletAddress\r\n    ) external onlyOwner {\r\n        require(amount <= getTotalSwtInContract(), \"Insufficient amount.\");\r\n        require(walletAddress != address(0), \"Wallet address is required.\");\r\n        starToken.transfer(walletAddress, amount);\r\n        emit Withdraw(walletAddress, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swtAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"}],\"name\":\"ExpiredStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swtAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isExpired\",\"type\":\"bool\"}],\"name\":\"expireStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getAmountToCliam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getCountStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwtPriceInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSwtInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtToken\",\"type\":\"uint256\"}],\"name\":\"getUsdtAmountInSwt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeesPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"setFeesWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxROIrewards\",\"type\":\"uint256\"}],\"name\":\"setMaxROIrewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUsdStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumUsdStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwtStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000010e122d9e60ff7088e4c2b99fcf88098d78d796000000000000000000000000f487f3a369f64d9619e2ae6305d25f574411c2a4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f30a8ce29b8274dd9de8c47d22785d74247ee428be46797928f9256af887ad9f"}