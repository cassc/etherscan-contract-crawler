{"SourceCode": "pragma solidity ^0.5.13;\r\n\r\ncontract Lock {\r\n    \r\n    ERC20 constant token = ERC20(0xB42e1c3902b85b410334f5fff79cDc51fBeE6950);\r\n    \r\n    address admin = msg.sender;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    \r\n    mapping(address => int256) public payoutsTo;\r\n    uint256 public profitPerShare;\r\n    \r\n    uint256 public totalStakePower;\r\n    uint256 public totalPowerStaked;\r\n    \r\n    mapping(address => uint256) public playersStakePower;\r\n    mapping(address => Frozen[]) public playersFreezes;\r\n    \r\n    mapping(uint256 => StakingOption) public stakingBonus;\r\n    \r\n    struct Frozen {\r\n        uint128 amount;\r\n        uint64 unlockEpoch;\r\n        uint32 stakeBonus;\r\n    }\r\n    \r\n    struct StakingOption {\r\n        uint128 unlockEpoch;\r\n        uint128 stakeBonus;\r\n    }\r\n    \r\n    constructor() public {\r\n        stakingBonus[0] = StakingOption(7 days, 0);\r\n        stakingBonus[1] = StakingOption(14 days, 10);\r\n        stakingBonus[2] = StakingOption(30 days, 25);\r\n    }\r\n    \r\n    function addStakingOption(uint256 id, uint128 unlockEpoch, uint128 stakeBonus) external {\r\n        require(msg.sender == admin, \"msg.sender is not authorized\");\r\n        require(unlockEpoch >= 7 days);\r\n        require(stakeBonus > 0 && stakeBonus <= 200);\r\n        stakingBonus[id] = StakingOption(unlockEpoch, stakeBonus);\r\n    }\r\n\r\n    function stake(address player, uint256 amount, bytes calldata data) external {\r\n        require(amount >= 1 * (10 ** 18));\r\n        require(token.transferFrom(player, address(this), amount), \"transferFrom failed on token contract. Are we approved?\");\r\n        \r\n        StakingOption memory stakingOptions = stakingBonus[bytesToUint(data)];\r\n        require(stakingOptions.unlockEpoch > 0, \"unlockEpoch invalid\");\r\n        uint256 stakeBonus = stakingOptions.stakeBonus;\r\n        uint256 unlockEpoch = now + stakingOptions.unlockEpoch;\r\n        uint256 stakePower = (amount * (100 + stakeBonus)) / 100;\r\n        totalPowerStaked += amount;\r\n        totalStakePower += stakePower;\r\n        playersStakePower[player] += stakePower;\r\n        payoutsTo[player] += (int256) (profitPerShare * stakePower);\r\n        playersFreezes[player].push(Frozen(uint128(amount), uint64(unlockEpoch), uint32(stakeBonus)));\r\n    }\r\n\r\n    function unstake(uint256 index) external {\r\n        uint256 playersFreezeCount = playersFreezes[msg.sender].length;\r\n        require(index < playersFreezeCount);\r\n        Frozen memory freeze = playersFreezes[msg.sender][index];\r\n        require(freeze.amount > 0);\r\n        require(freeze.unlockEpoch <= now);\r\n        \r\n        withdrawEarnings();\r\n        \r\n        uint256 stakePower = (freeze.amount * (100 + freeze.stakeBonus)) / 100;\r\n        totalPowerStaked -= freeze.amount;\r\n        totalStakePower -= stakePower;\r\n        playersStakePower[msg.sender] -= stakePower;\r\n        payoutsTo[msg.sender] -= (int256) (profitPerShare * stakePower);\r\n        \r\n        if (playersFreezeCount > 1) {\r\n            playersFreezes[msg.sender][index] = playersFreezes[msg.sender][playersFreezeCount - 1];\r\n        }\r\n        \r\n        delete playersFreezes[msg.sender][playersFreezeCount - 1];\r\n        playersFreezes[msg.sender].length--;\r\n        \r\n        token.transfer(msg.sender, freeze.amount);\r\n    }\r\n    \r\n    function withdrawEarnings() public {\r\n        uint256 dividends = dividendsOf(msg.sender);\r\n        payoutsTo[msg.sender] += (int256) (dividends * magnitude);\r\n        token.transfer(msg.sender, dividends);\r\n    }\r\n    \r\n    function distributeDivs(uint256 amount) external {\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"transferFrom failed on token contract. Are we approved?\");\r\n        profitPerShare += amount * magnitude / totalStakePower;\r\n    }\r\n    \r\n    function dividendsOf(address customerAddress) view public returns (uint256) {\r\n        return (uint256) ((int256)(profitPerShare * playersStakePower[customerAddress]) - payoutsTo[customerAddress]) / magnitude;\r\n    }\r\n\r\n    function getPlayersFreezings(address player, uint256 startIndex, uint256 endIndex) public view returns (uint256[3][] memory) {\r\n        uint256 numListings = (endIndex - startIndex) + 1;\r\n        if (startIndex == 0 && endIndex == 0) {\r\n            numListings = playersFreezes[player].length;\r\n        }\r\n\r\n        uint256[3][] memory freezeData = new uint256[3][](numListings);\r\n        for (uint256 i = 0; i < numListings; i++) {\r\n            Frozen memory freeze = playersFreezes[player][i];\r\n            freezeData[i][0] = freeze.amount;\r\n            freezeData[i][1] = freeze.unlockEpoch;\r\n            freezeData[i][2] = freeze.stakeBonus;\r\n        }\r\n\r\n        return (freezeData);\r\n    }\r\n    \r\n    function bytesToUint(bytes memory b) public pure returns (uint256) {\r\n        uint256 number;\r\n        for (uint i=0;i<b.length;i++) {\r\n            number = number + uint(uint8(b[i]))*(2**(8*(b.length-(i+1))));\r\n        }\r\n        return number;\r\n    }\r\n    \r\n}\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"unlockEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stakeBonus\",\"type\":\"uint128\"}],\"name\":\"addStakingOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayersFreezings\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersFreezes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"unlockEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"stakeBonus\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersStakePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingBonus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unlockEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stakeBonus\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPowerStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lock", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8f01f582accd6e244e9750642bb2a2e4b5ff7d2822da0468785186d2e1833646"}