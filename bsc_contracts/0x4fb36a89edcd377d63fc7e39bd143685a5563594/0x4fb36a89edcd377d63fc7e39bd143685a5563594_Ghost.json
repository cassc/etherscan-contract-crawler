{"SourceCode": "pragma solidity ^0.7.4;\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Ghost is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    \r\n    string constant _name = \"Ghost Trader\";\r\n    string constant _symbol = \"GTR\";\r\n    uint8 constant _decimals = 9;\r\n    \r\n    uint256 _totalSupply = 100 * 10**6 * (10 ** _decimals); //\r\n    \r\n    //max txn is launch only as anti-bot measures, will be lifted after\r\n    uint256 public _maxTxAmount = _totalSupply * 100 / 100; //\r\n\r\n    //used for getting all user reward calculations\r\n    address[] public holderAddresses;\r\n    mapping (address => uint256) lastBuyTime;\r\n    mapping (address => uint256) rewardAmount;\r\n    mapping (address => bool) isHolder;\r\n\r\n    mapping (address => uint256) firstBuy;\r\n    mapping (address => bool) neverSold;\r\n    mapping(address => bool) heldThisCycle;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isFeeExempt;\r\n\r\n    //two kinds of vesting, private sale and minivesting. Minivesting is for a couple hours and only in the first minute\r\n    mapping(address => bool) public _isWL;\r\n    mapping(address => uint256) public _hasBought;\r\n    mapping(address => uint256) public _miniVested;\r\n    mapping(address => uint256) vestedAmount;\r\n    mapping(address => uint256) miniAmount;\r\n\r\n    bool public _wlVestingEnabled = true;\r\n    uint256 public _vestingPercentage = 80;\r\n\r\n    bool public miniVestingEnabled = true;\r\n    uint256 miniVestTime = 60;\r\n\r\n    //this is for staking and othe future functions. Send tokens without losing reward multi\r\n    bool public safeSendActive = false;\r\n    mapping (address => bool) safeSend;\r\n\r\n    uint256 public launchTime;\r\n\r\n    uint256 public tradingFee = 4;\r\n    uint256 public sellMulti = 200;\r\n\r\n    uint256 public sellFee = tradingFee * sellMulti.div(100);\r\n\r\n    //for if trading wallet becomes a contract in future, call is required over transfer\r\n    uint256 gasAmount = 75000;\r\n\r\n    //for if trading wallet becomes a contract, treated differently. true = wallet, false = contract\r\n    bool walletType = true;\r\n\r\n    address public tradingWallet;\r\n    \r\n    //trading lock, lastSell variable prevents it from being called while trading ongoing\r\n    bool public tradingStarted = false;\r\n    uint256 lastSell;\r\n\r\n    //Trade cycle, for rewards\r\n    uint256 public startTime;\r\n    uint256 public dayNumber;\r\n\r\n    //cooldown for buyers at start\r\n    bool public cooldownEnabled = true;\r\n    uint256 cooldownSeconds = 15;\r\n\r\n    mapping(address => bool) nope;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 10 / 100000; \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, address(this));\r\n        _allowances[address(this)][address(router)] = uint256(-1);\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        tradingWallet = 0x5e6410D82a748B666BBA0EF2BF7b338d63D2e920;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n    \r\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(tradingWallet).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n    \r\n    function setTxLimit(uint256 amount) external onlyOwner {\r\n        require(amount > 10000);\r\n        _maxTxAmount = amount * (10**9);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setCooldown(bool _enabled, uint256 _cooldownSeconds) external authorized {\r\n        if (_enabled){\r\n            require((lastSell + 1 hours) < block.timestamp);\r\n        }\r\n        require(_cooldownSeconds < 20);\r\n        cooldownEnabled = _enabled;\r\n        cooldownSeconds = _cooldownSeconds;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setSafeSendActive(bool _enabled) external authorized {\r\n        safeSendActive = _enabled;\r\n    }\r\n\r\n    function designateSafeSend(address deposit, bool _enabled) external authorized {\r\n        safeSend[deposit] = _enabled;\r\n    }\r\n\r\n    function setTradingFees(uint256 _tradingFee, uint256 _sellMulti) external authorized{\r\n        require((_tradingFee * (_sellMulti/100)) < 60);\r\n        tradingFee = _tradingFee;\r\n        sellMulti = _sellMulti;\r\n    }\r\n\r\n    function setTradingWallet(address _tradingWallet, bool _wallet) external authorized {\r\n        tradingWallet = _tradingWallet;\r\n        walletType = _wallet;\r\n    }\r\n    \r\n    function setTradingStarted(bool _enabled) external onlyOwner {\r\n\r\n        //Prevents us from stopping trading until an hour has passed since the last sell\r\n        if (_enabled == false){\r\n            require((lastSell + 1 hours) < block.timestamp);\r\n        }\r\n        tradingStarted = _enabled;\r\n        launchTime = block.timestamp;\r\n    }\r\n\r\n    function setTokenSwapSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount * (10 ** _decimals);\r\n    }\r\n    \r\n    function setVestingPercent(uint256 vest) external authorized {\r\n        require(vest == 80 || vest == 60 || vest == 40 || vest == 20 || vest == 0);\r\n        _vestingPercentage = vest;\r\n        if (vest == 0){\r\n            _wlVestingEnabled = false;\r\n        }\r\n    }\r\n\r\n    function miniVestCheck() internal view returns (uint256){\r\n\r\n        if (block.timestamp > launchTime + 120 * 1 minutes){\r\n            return 0;\r\n        }\r\n        else if (block.timestamp > launchTime + 90 * 1 minutes){\r\n            return 25;\r\n        }\r\n        else if (block.timestamp > launchTime + 60 * 1 minutes){\r\n            return 50;\r\n        }\r\n        else if (block.timestamp > launchTime + 30 * 1 minutes){\r\n            return 75;\r\n        }\r\n        else{\r\n            return 90;\r\n        }\r\n    }\r\n    //sets seconds at start before minivesting begins\r\n    function setMiniVestTime(uint256 _miniVestTime) external onlyOwner{\r\n        require(_miniVestTime < 120);\r\n        miniVestTime = _miniVestTime;\r\n    }\r\n\r\n    function checkFee() internal view returns (uint256){\r\n        if (block.timestamp < launchTime + 5 seconds){\r\n            return 95;\r\n        }\r\n        else{\r\n            return tradingFee;\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n    \r\n    function shouldTokenSwap() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    //Rewards calculation section\r\n    //Rewards are based on hold amount as well as time, rewardWeight is calculated and used\r\n\r\n    function startTradeCycle(uint256 _dayNumber) public authorized{\r\n        startTime = block.timestamp;\r\n        dayNumber = _dayNumber;\r\n        for(uint i=0; i < holderAddresses.length; i++){\r\n            heldThisCycle[holderAddresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function dayMulti() public view returns(uint256) {\r\n        uint256 reward = dayNumber - getDiff();\r\n        return reward;\r\n    }\r\n\r\n    function getDiff() internal view returns(uint256){\r\n        uint256 timeDiffer = (block.timestamp - startTime) / 60 / 60 / 24;\r\n        return timeDiffer;\r\n    }\r\n\r\n    function isDiamondHand(address holder) external view returns(bool, uint256){\r\n        return (neverSold[holder], firstBuy[holder]);\r\n    }\r\n\r\n    function getRewardWeight(address holder) public view returns(uint256){\r\n        if ((lastBuyTime[holder] < startTime) && heldThisCycle[holder]){\r\n            return _balances[holder] * dayNumber;\r\n        }\r\n        else{\r\n            return rewardAmount[holder];\r\n        }\r\n    }\r\n\r\n    function getHolderInfo(address holder) public view returns(uint256, uint256, uint256, uint256, bool, bool){\r\n        \r\n        return(_balances[holder], rewardAmount[holder], firstBuy[holder], lastBuyTime[holder], heldThisCycle[holder],\r\n            neverSold[holder]);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 _tradingFee = checkFee();\r\n        if (_tradingFee == 95){\r\n            nope[sender] = true;\r\n        }\r\n        \r\n        if (recipient == pair){\r\n            _tradingFee = _tradingFee * sellMulti.div(100);\r\n            if (nope[sender]){\r\n                _tradingFee = 95;\r\n            }\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(_tradingFee).div(100);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    //allows for manual sells\r\n    function manualSwap(uint256 amount) external swapping authorized{\r\n        \r\n        uint256 amountToSwap = amount * (10**9);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        \r\n        //wallets are treated different from contracts when sending bnb\r\n        if (walletType){\r\n            payable(tradingWallet).transfer(amountBNB);\r\n        }\r\n        else {\r\n            payable(tradingWallet).call{value: amountBNB, gas: gasAmount};\r\n        }\r\n    }\r\n\r\n    function tokenSwap() internal swapping {\r\n        uint256 amountToSwap = swapThreshold;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        \r\n        //wallets are treated different from contracts when sending bnb\r\n        if (walletType){\r\n            payable(tradingWallet).transfer(amountBNB);\r\n        }\r\n        else {\r\n            payable(tradingWallet).call{value: amountBNB, gas: gasAmount};\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if (isAuthorized(msg.sender)){\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n        if (safeSendActive && safeSend[recipient]){\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n        if (msg.sender != pair && recipient != pair && !_isWL[msg.sender] && _miniVested[msg.sender] == 0){\r\n            rewardAmount[recipient] = rewardAmount[msg.sender];\r\n            rewardAmount[msg.sender] = 0;\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n        else {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingStarted,\"Trading not open yet\");\r\n        }\r\n\r\n        //vesting code\r\n        if (_wlVestingEnabled && _isWL[sender]){\r\n            uint256 safeSell = balanceOf(sender).sub(amount);\r\n            vestedAmount[sender] = _hasBought[sender].mul(_vestingPercentage).div(100);\r\n            require(safeSell >= vestedAmount[sender], \"Cant sell more than vested\");\r\n        }\r\n\r\n        //minivesting code, start only\r\n        if (miniVestingEnabled && sender != pair) {\r\n            uint256 miniSell = balanceOf(sender).sub(amount);\r\n            miniAmount[sender] = _miniVested[sender].mul(miniVestCheck()).div(100);\r\n            require(miniSell >= miniAmount[sender], \"Cant sell more than vested\");\r\n        }\r\n        if (cooldownEnabled){\r\n            require(block.timestamp > lastBuyTime[recipient] + cooldownSeconds * 1 seconds, \"Wait to buy more\");\r\n        }\r\n\r\n        //txn limit at start only\r\n        checkTxLimit(sender, amount);\r\n\r\n        if(shouldTokenSwap()){ tokenSwap(); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        //reward weight, selling reduces your weight to your total balance, you lose day multiplier\r\n        if (recipient == pair){\r\n\r\n            rewardAmount[sender] = _balances[sender];\r\n            neverSold[sender] = false;\r\n            heldThisCycle[sender] = false;\r\n            lastSell = block.timestamp;\r\n            \r\n        }\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\r\n        \r\n        //reward weight calc\r\n        if (sender == pair){\r\n\r\n            if (balanceOf(recipient) == 0 && recipient != pair && !isHolder[recipient]){\r\n            holderAddresses.push(recipient);\r\n            firstBuy[recipient] = block.timestamp;\r\n            isHolder[recipient] = true;\r\n            heldThisCycle[recipient] = true;\r\n            neverSold[recipient] = true;\r\n            }\r\n        lastBuyTime[recipient] = block.timestamp;\r\n        rewardAmount[recipient] += (amountReceived * dayMulti());\r\n            \r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        \r\n        //locks a portion of funds at start for early buyers, no pump and dump\r\n        if (miniVestingEnabled && block.timestamp  < launchTime + miniVestTime * 1 seconds)\r\n            if (sender == pair) {\r\n                _miniVested[recipient] += amountReceived;\r\n            }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    //who needs bulksender\r\n    function airdrop(address[] calldata addresses, uint[] calldata tokens, bool vesting) external authorized {\r\n        uint256 airCapacity = 0;\r\n        require(addresses.length == tokens.length,\"Must be same amount of allocations/addresses\");\r\n        for(uint i=0; i < addresses.length; i++){\r\n            airCapacity = airCapacity + tokens[i];\r\n        }\r\n        require(balanceOf(msg.sender) >= airCapacity, \"Not enough tokens in airdrop wallet\");\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _balances[addresses[i]] += tokens[i];\r\n            _balances[msg.sender] -= tokens[i];\r\n\r\n            if (vesting){\r\n            _isWL[addresses[i]] = true;\r\n            _hasBought[addresses[i]] = tokens[i];\r\n            }\r\n            rewardAmount[addresses[i]] = (tokens[i] * dayMulti());\r\n            firstBuy[addresses[i]] = block.timestamp;\r\n            lastBuyTime[addresses[i]] = block.timestamp;\r\n            neverSold[addresses[i]] = true;\r\n            heldThisCycle[addresses[i]] = true;\r\n            holderAddresses.push(addresses[i]);\r\n            emit Transfer(msg.sender, addresses[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_miniVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vestingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wlVestingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"vesting\",\"type\":\"bool\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"designateSafeSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isDiamondHand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniVestingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownSeconds\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miniVestTime\",\"type\":\"uint256\"}],\"name\":\"setMiniVestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSafeSendActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMulti\",\"type\":\"uint256\"}],\"name\":\"setTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_wallet\",\"type\":\"bool\"}],\"name\":\"setTradingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vest\",\"type\":\"uint256\"}],\"name\":\"setVestingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayNumber\",\"type\":\"uint256\"}],\"name\":\"startTradeCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ghost", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d50a8db5b499cd959d337b094b25c52dded974c2362a8d0004229fe4e39ff08a"}