{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract MyContract {\r\n    address private pancakeRouterAddress = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F; // Replace with the actual PancakeSwap router address\r\n    address private tokenToSwap = 0xdBf830A929133291D43EdC9546CbE7a934fb328d; // Replace with the actual token address\r\n\r\n    IPancakeRouter02 private pancakeRouter;\r\n\r\n    constructor() {\r\n        pancakeRouter = IPancakeRouter02(pancakeRouterAddress);\r\n    }\r\n\r\n    function swapTokens(uint256 amountIn, uint256 amountOutMin) external {\r\n        // Approve PancakeSwap router to spend tokens\r\n        // Assume ERC-20 token, adjust for ERC-20 or BNB as needed\r\n        IERC20(tokenToSwap).approve(pancakeRouterAddress, amountIn);\r\n\r\n        // Swap tokens\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            getPath(),\r\n            address(this), // Your contract's address\r\n            block.timestamp + 1000 // Use appropriate deadline\r\n        );\r\n    }\r\n\r\n    function getPath() internal view returns (address[] memory) {\r\n        // Define the token swap path\r\n        address[] memory path = new address[](3);\r\n        path[0] = tokenToSwap;\r\n        path[1] = pancakeRouter.WETH();\r\n        path[2] = 0xB8c77482e45F1F44dE1745F52C74426C631bDD52; // Replace with the token you want to swap to\r\n        return path;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MyContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ce7d9d179116c9d5242aa1f9930190ef5ecea61d8e36b99fe52b7448d7ae4da"}