{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.18;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n\r\n}\r\n\r\ncontract PriceConsumerV3 {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n        // priceFeed = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526); // testnet bnb/USD\r\n        priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // mainnet bnb/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ncontract PriceConsumerEth {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n        priceFeed = AggregatorV3Interface(0x2A3796273d47c4eD363b361D3AEFb7F7E2A13782); // mainnet BinanceEth/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ncontract PriceConsumerBtc {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n        priceFeed = AggregatorV3Interface(0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf); // mainnet BTC/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ncontract PriceConsumerUsdt {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n        priceFeed = AggregatorV3Interface(0xB97Ad0E74fa7d920791E90258A6E2085088b4320); // mainnet usdt/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract TokenSale {\r\n    \r\n    PriceConsumerV3 priceConsumerV3 = new PriceConsumerV3();\r\n    PriceConsumerEth priceConsumerEth = new PriceConsumerEth();\r\n    PriceConsumerBtc priceConsumerBtc = new PriceConsumerBtc();\r\n    PriceConsumerUsdt priceConsumerUsdt = new PriceConsumerUsdt();\r\n    \r\n    struct Buyer{\r\n        bool buyStatus;\r\n        uint totalTokensBought;\r\n    }\r\n    \r\n    // Variables\r\n    address private owner = msg.sender;\r\n    address buyTokenAddr = 0xB2a3FF23bc36b962CA5F2Ca8FEf118Ef7f83C152; //  token address\r\n    address private contractAddr = address(this);\r\n    uint private buyPrice;\r\n    mapping(address => Buyer) public buyer;\r\n    bool private saleStatus;\r\n    uint private saleEndTime;\r\n    ERC20 token = ERC20(buyTokenAddr);\r\n    \r\n    // Events\r\n    event Received(address, uint);\r\n    event TokensBought(address, uint);\r\n    event OwnershipTransferred(address);\r\n    \r\n    constructor() {\r\n        buyPrice = 100000;\r\n        saleStatus = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Buy token \r\n     * \r\n     * Requirements:\r\n     * saleStatus has to be true\r\n     * cannot send zero value transaction\r\n     */\r\n    function buyToken(address _tokenAddress, uint _tokenAmount) public payable returns(bool) {\r\n        \r\n        require(saleStatus == true, \"Sale not started or has finished\");\r\n        ERC20 payToken = ERC20(_tokenAddress);\r\n\r\n        address sender = msg.sender;\r\n        uint tokens;\r\n\r\n        if(_tokenAddress == address(0)){    // bnb\r\n            require(msg.value > 0, \"Zero value\");\r\n            uint priceOfbnb = priceConsumerV3.getThePrice();\r\n            tokens = (msg.value * priceOfbnb / 100) / buyPrice;\r\n        }\r\n        else if(_tokenAddress == 0x2170Ed0880ac9A755fd29B2688956BD959F933F8){   // eth\r\n            require(_tokenAmount > 0, \"Invalid token amount\");\r\n            uint priceOfEth = priceConsumerEth.getThePrice();\r\n            tokens = (_tokenAmount * priceOfEth / 100) / buyPrice; \r\n            payToken.transferFrom(sender, address(this), _tokenAmount);\r\n        }\r\n        else if(_tokenAddress == 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c){   // btc\r\n            require(_tokenAmount > 0, \"Invalid token amount\");\r\n            uint priceOfBtc = priceConsumerBtc.getThePrice();\r\n            tokens = (_tokenAmount * priceOfBtc / 100) / buyPrice;\r\n            payToken.transferFrom(sender, address(this), _tokenAmount);\r\n        }\r\n        else if(_tokenAddress == 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d){  // usdc\r\n            require(_tokenAmount > 0, \"Invalid token amount\");\r\n            uint priceOfUsdc = priceConsumerUsdt.getThePrice();\r\n            tokens = (_tokenAmount * priceOfUsdc / 100) / buyPrice;\r\n            payToken.transferFrom(sender, address(this), _tokenAmount);\r\n        }\r\n        else if(_tokenAddress == 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56){  // busd\r\n            require(_tokenAmount > 0, \"Invalid token amount\");\r\n            uint priceOfUsdc = priceConsumerUsdt.getThePrice();\r\n            tokens = (_tokenAmount * priceOfUsdc / 100) / buyPrice;\r\n            payToken.transferFrom(sender, address(this), _tokenAmount);\r\n        }\r\n        else if(_tokenAddress == 0x55d398326f99059fF775485246999027B3197955){   // usdt\r\n            require(_tokenAmount > 0, \"Invalid token amount\");\r\n            uint priceOfUsdc = priceConsumerUsdt.getThePrice();\r\n            tokens = (_tokenAmount * priceOfUsdc / 100) / buyPrice;\r\n            payToken.transferFrom(sender, address(this), _tokenAmount);\r\n        }\r\n        else{\r\n            revert(\"Invalid token address\");\r\n        }\r\n        \r\n        require(token.balanceOf(address(this)) >= tokens, \"Insufficient contract balance\");\r\n        \r\n        buyer[sender].totalTokensBought += tokens;\r\n        buyer[sender].buyStatus = true;\r\n        token.transfer(sender, tokens);\r\n        \r\n        emit TokensBought(sender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    // Set buy price \r\n    // Upto 6 decimals\r\n    function setBuyPrice(uint _price) public onlyOwner {\r\n        buyPrice = _price;\r\n    }\r\n    \r\n    // View tokens for bnb\r\n    function getTokens(uint bnbAmt) public view returns(uint tokens) {\r\n        uint priceOfbnb = priceConsumerV3.getThePrice();\r\n        tokens = (bnbAmt * priceOfbnb / 100) / buyPrice;\r\n        return tokens;\r\n    }\r\n\r\n    // View tokens for eth\r\n    function getTokensEth(uint ethAmt) public view returns(uint tokens) {\r\n        uint priceOfEth = priceConsumerEth.getThePrice();\r\n        tokens = (ethAmt * priceOfEth / 100) / buyPrice;\r\n        return tokens;\r\n    }\r\n    \r\n    /** \r\n     * @dev Set sale status\r\n     * \r\n     * Only to temporarily pause sale if necessary\r\n     * Otherwise use 'endSale' function to end sale\r\n     */\r\n    function setSaleStatus(bool status) public onlyOwner returns (bool) {\r\n        saleStatus = status;\r\n        return true;\r\n    }\r\n    \r\n    /** \r\n     * @dev End presale \r\n     * \r\n     * Requirements:\r\n     * \r\n     * Only owner can call this function\r\n     */\r\n    function endSale() public onlyOwner returns (bool) {\r\n        saleStatus = false;\r\n        saleEndTime = block.timestamp;\r\n        return true;\r\n    }\r\n    \r\n    /// Set claim token address\r\n    function setClaimTokenAddress(address addr) public onlyOwner returns(bool) {\r\n        buyTokenAddr = addr;\r\n        return true;\r\n    }\r\n    \r\n    /// View owner address\r\n    function getOwner() public view returns(address){\r\n        return owner;\r\n    }\r\n    \r\n    /// View sale end time\r\n    function viewSaleEndTime() public view returns(uint) {\r\n        return saleEndTime;\r\n    }\r\n    \r\n    /// View Buy Price\r\n    function viewPrice() public view returns(uint){\r\n        return buyPrice;\r\n    }\r\n    \r\n    /// Return bought status of user\r\n    function userBuyStatus(address user) public view returns (bool) {\r\n        return buyer[user].buyStatus;\r\n    }\r\n    \r\n    /// Return sale status\r\n    function showSaleStatus() public view returns (bool) {\r\n        return saleStatus;\r\n    }\r\n    \r\n    /// Show USD Price of bnb\r\n    function usdPrice(uint amount) external view returns(uint) {\r\n        uint priceOfbnb = priceConsumerV3.getThePrice();\r\n        uint bnbAmt = amount * priceOfbnb;\r\n        return bnbAmt/100000000;\r\n    }\r\n    \r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public onlyOwner returns(bool) {\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        ERC20 _token = ERC20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n    \r\n    // Owner bnb Withdraw\r\n    // Only owner can withdraw bnb from contract\r\n    function withdrawbnb(address payable to, uint amount) public onlyOwner returns(bool) {\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) public onlyOwner returns(bool) {\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }\r\n    \r\n    // Fallback\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buyStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"getTokensEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setClaimTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBuyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawbnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://afaea06b767a8e80aa8fdd051319c9fa8c5372f62f7728c23b5a2d222123447f"}