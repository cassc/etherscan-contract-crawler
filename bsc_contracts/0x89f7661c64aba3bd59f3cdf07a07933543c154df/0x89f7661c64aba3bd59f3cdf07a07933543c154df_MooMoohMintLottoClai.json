{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface INft {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenid) external view returns (address);\r\n    function getResultEndcode(uint256 nftIndex,uint256 amountReward) external view returns (uint256);\r\n    function ProcessTokenRequest(address account) external returns (bool);\r\n}\r\n\r\ninterface IUser {\r\n    function getUserUpline(address account,uint256 level) external view returns (address[] memory);\r\n}\r\n\r\ninterface IMooMint {\r\n    function modAmount(address rewardToken,uint256 rewardAmount) external view returns (uint256);\r\n    function wasClaimed(address rewardToken,uint256 roundid,uint256 rewardAmount) external view returns (bool);\r\n    function transferReward(address token,address to,uint256 amount) external returns (bool);\r\n    function updateWasClaimed(address rewardToken,uint256 roundid,uint256 rewardAmount,bool flag) external returns (bool);\r\n    function updateClaimedAmount(address ownerNft,address rewardToken,uint256 amount,bool isIncrease) external returns (bool);\r\n    function updateClaimedMatching(address ownerNft,address rewardToken,uint256 level,uint256 amount,bool isIncrease) external returns (bool);\r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MooMoohMintLottoClaimmer is permission {\r\n\r\n    address mooMintAddress = 0x4f26097b09B29a475335304ce4b0893b2CcA6207;\r\n    address mooUserAddress = 0x91EdA823eeddc18d89Ec5124517bA7F14820Ad86;\r\n    address mooNftAddress = 0x1D2424ccda2Cb5858184B42d3c4Ab17fAecF3d78;\r\n\r\n    address[] overFilledWallet = [\r\n        0xc5Fca183AC0952417FDdB47dD9d9738E62D258d9,\r\n        0xF0Df31a1A123a63c8DC50B9d89e0eF59Ad80b621,\r\n        0xe21877a5263561BbEBFe9dc6C423e8C949bD8fE2,\r\n        0xB7Db5A08856D2B0DAd03194aBd91deF1DD8eC0D6\r\n    ];\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n\r\n    }\r\n\r\n    IMooMint public moomint;\r\n    IUser public user;\r\n    INft public nft;\r\n\r\n    constructor() {\r\n        moomint = IMooMint(mooMintAddress);\r\n        user = IUser(mooUserAddress);\r\n        nft = INft(mooNftAddress);\r\n    }\r\n\r\n    function isShouldCanClaim(uint256 tokenid,uint256 roundid,uint256 rewardAmount,address rewardToken) public view returns (bool isCanClaim,string memory error) {\r\n \r\n        uint256 winnerSelector = nft.getResultEndcode(roundid,rewardAmount);\r\n        if(winnerSelector==tokenid){}else{\r\n            return (false,\"You Are Not The Winner!\");\r\n        }\r\n\r\n        bool wasClaimed = moomint.wasClaimed(rewardToken,roundid,rewardAmount);\r\n        if(!wasClaimed){}else{\r\n            return (false,\"This Round Was Claimed!\");\r\n        }\r\n\r\n        uint256 modAmount = moomint.modAmount(rewardToken,rewardAmount);\r\n        if(roundid>8 && (roundid+1) % modAmount == 0){}else{\r\n            return (false,\"Round Id Invalid Mod %!\");\r\n        }\r\n\r\n        return (true,\"Approved!\");\r\n    }\r\n    \r\n    function claimWinnerMooMint(uint256 tokenid,uint256 roundid,uint256 rewardAmount,address rewardToken) public noReentrant returns (bool) {\r\n        (bool isCanClaim,) = isShouldCanClaim(tokenid,roundid,rewardAmount,rewardToken);\r\n        require(isCanClaim,\"Error on claim condition!\");\r\n\r\n        address claimer = nft.ownerOf(tokenid);\r\n        address[] memory upline = new address[](10);\r\n        upline = user.getUserUpline(claimer,10);\r\n\r\n        moomint.updateWasClaimed(rewardToken,roundid,rewardAmount,true);\r\n\r\n        moomint.transferReward(rewardToken,claimer,rewardAmount*80/100);\r\n        moomint.transferReward(rewardToken,owner(),rewardAmount*20/100);\r\n        moomint.updateClaimedAmount(claimer,rewardToken,rewardAmount*80/100,true);\r\n\r\n        uint256 rewardForDirect = rewardAmount / 10;\r\n        uint256 rewardForDividend = rewardAmount / 100;\r\n        uint256 rewardForSplit = rewardForDividend / overFilledWallet.length;\r\n\r\n        for(uint256 i = 0; i < 10; i++){\r\n            if(upline[i]!=address(0)){\r\n                if(i==0){\r\n                    moomint.transferReward(rewardToken,upline[i],rewardForDirect);\r\n                    moomint.updateClaimedMatching(upline[i],rewardToken,rewardForDirect,i,true);\r\n                }else{\r\n                    moomint.transferReward(rewardToken,upline[i],rewardForDividend);\r\n                    moomint.updateClaimedMatching(upline[i],rewardToken,rewardForDividend,i,true);\r\n                }\r\n            }else{\r\n                for(uint256 j = 0; j < overFilledWallet.length; j++){\r\n                    moomint.transferReward(rewardToken,overFilledWallet[j],rewardForSplit);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function callWithData(address to,bytes memory data) public forRole(\"owner\") returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n\r\n    function callWithValue(address to,bytes memory data,uint256 amount) public forRole(\"owner\") returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call{ value: amount }(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callWithData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"callWithValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"claimWinnerMooMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"isShouldCanClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCanClaim\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moomint\",\"outputs\":[{\"internalType\":\"contract IMooMint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract INft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"contract IUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MooMoohMintLottoClaimmer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10e5e90aa809504a85244fa06bfeaf14f0f8860f96e8e6e94f5673715df1f945"}