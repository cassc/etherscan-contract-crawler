{"SourceCode": "// SPDX-License-Identifier: NO LICENSE\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * BETSWAMP\r\n */\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 1;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev contract handles all ownership operations which provides\r\n * basic access control mechanism where an account (owner) is granted\r\n * exclusive access to specific functions\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev initializes the contract deployer as the initial owner\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only contract owner can call function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev function returns the current owner of the contract\r\n     */\r\n    function displayOnwer() internal view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"New owner cannot be zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface implements the BEP20\r\n * token standard for the Euphoria token\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * contract creates the Euphoria\r\n * platfrom token\r\n */\r\n\r\ncontract BETS is IBEP20, Ownable {\r\n    // pancakeswap v2 router testnet address: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => uint256) private _betswamp_addresses;\r\n\r\n    // addresses excluded from transaction fess\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => bool) private _full_withdrawal_betswamp_address;\r\n\r\n    mapping(address => bool) private _autoMarketMakerPair;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    uint256 private _allowed_betswamp_address_spending;\r\n\r\n    address payable private marketing_wallet_address;\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    address private _uniswapV2Pair;\r\n    uint256 private _liquidity_buy_tax = 4;\r\n    uint256 private _liquidity_sell_tax = 8;\r\n    bool private _isTaxable = true; // tax on\r\n    bool private _isSwapping = false;\r\n    uint256 private swapTokensAtAmount = 25;\r\n    bool private _launchedTax = false;\r\n\r\n    // event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);    \r\n    event SetAutoMaketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor(\r\n        address marketing,\r\n        address airdrop,\r\n        address operationAndInfrastructure,\r\n        address privateSale,\r\n        address presale,\r\n        address liquidity,\r\n        address advisors,\r\n        address dev,\r\n        address staking,\r\n        address bonuses,\r\n        address exchange\r\n    ) {\r\n        _name = \"Betswamp\";\r\n        _symbol = \"BETS\";\r\n        _decimals = 18;\r\n        _totalSupply = 250000000 * 10**18;\r\n\r\n        // init uniswap\r\n\r\n        // 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // get currency pair\r\n        address pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n            _uniswapV2Router.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        // pair not yet created - create pair\r\n        if (pair == address(0)) {\r\n            _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(_uniswapV2Router.WETH(), address(this));\r\n        } else {\r\n            _uniswapV2Pair = pair;\r\n        }\r\n\r\n        _setAutoMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        marketing_wallet_address = payable(marketing);\r\n\r\n        // allowed amount euphoria addresses are allowed to withdraw monthly after lock period\r\n        _allowed_betswamp_address_spending = 2;\r\n\r\n        // tokenomics\r\n\r\n        _balances[dev] = (_totalSupply / 100) * 5;\r\n        _balances[marketing] = (_totalSupply / 100) * 10;\r\n        _balances[airdrop] = (_totalSupply / 100) * 2;\r\n        _balances[operationAndInfrastructure] = (_totalSupply / 100) * 8;\r\n        _balances[privateSale] = (_totalSupply / 100) * 2;\r\n        _balances[presale] = (_totalSupply / 100) * 12;\r\n        _balances[liquidity] = (_totalSupply / 100) * 32;\r\n        _balances[advisors] = (_totalSupply / 100) * 2;\r\n        _balances[staking] = (_totalSupply / 100) * 15;\r\n        _balances[bonuses] = (_totalSupply / 100) * 2;\r\n        _balances[exchange] = (_totalSupply / 100) * 10;\r\n\r\n        // exclude addresses from fees\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[dev] = true;\r\n        _isExcludedFromFee[marketing] = true;\r\n        _isExcludedFromFee[airdrop] = true;\r\n        _isExcludedFromFee[operationAndInfrastructure] = true;\r\n        _isExcludedFromFee[privateSale] = true;\r\n        _isExcludedFromFee[presale] = true;\r\n        _isExcludedFromFee[liquidity] = true;\r\n        _isExcludedFromFee[advisors] = true;\r\n        _isExcludedFromFee[staking] = true;\r\n        _isExcludedFromFee[bonuses] = true;\r\n        _isExcludedFromFee[exchange] = true;\r\n\r\n        // betswamp wallet lock time\r\n        _betswamp_addresses[marketing] = block.timestamp + 12 weeks;\r\n        _betswamp_addresses[dev] = block.timestamp + 48 weeks;\r\n        _betswamp_addresses[operationAndInfrastructure] =\r\n            block.timestamp +\r\n            32 weeks; // lock wallet for 8 months\r\n        _betswamp_addresses[airdrop] = block.timestamp + 16 weeks;\r\n        _betswamp_addresses[exchange] = block.timestamp + 8 weeks;\r\n        _betswamp_addresses[bonuses] = block.timestamp + 2 weeks;\r\n\r\n        // betswamp addresses permitted to perform full withdrawal\r\n        _full_withdrawal_betswamp_address[privateSale] = true;\r\n        _full_withdrawal_betswamp_address[presale] = true;\r\n        _full_withdrawal_betswamp_address[liquidity] = true;\r\n        _full_withdrawal_betswamp_address[staking] = true;\r\n        _full_withdrawal_betswamp_address[bonuses] = true;\r\n        _full_withdrawal_betswamp_address[advisors] = true;\r\n        _full_withdrawal_betswamp_address[exchange] = true;\r\n\r\n        emit Transfer(address(0), dev, (_totalSupply / 100) * 5);\r\n        emit Transfer(address(0), advisors, (_totalSupply / 100) * 2);\r\n        emit Transfer(address(0), staking, (_totalSupply / 100) * 15);\r\n        emit Transfer(address(0), bonuses, (_totalSupply / 100) * 2);\r\n        emit Transfer(address(0), exchange, (_totalSupply / 100) * 10);\r\n        emit Transfer(address(0), marketing, (_totalSupply / 100) * 10);\r\n        emit Transfer(address(0), airdrop, (_totalSupply / 100) * 2);\r\n        emit Transfer(\r\n            address(0),\r\n            operationAndInfrastructure,\r\n            (_totalSupply / 100) * 8\r\n        );\r\n        emit Transfer(address(0), privateSale, (_totalSupply / 100) * 2);\r\n        emit Transfer(address(0), presale, (_totalSupply / 100) * 12);\r\n        emit Transfer(address(0), liquidity, (_totalSupply / 100) * 32);\r\n    }\r\n\r\n    // Required to recieve ETH from uniswapV2Router on swaps\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev modifier checks if euphoria address withdrawal time has reached\r\n     * throws if the address withdrawal time isn't greater than\r\n     * the value of block.timestamp\r\n     */\r\n    modifier checkWithdrwalAddressTime(address userAddress) {\r\n        require(\r\n            _betswamp_addresses[userAddress] < block.timestamp,\r\n            \"Address withdrawal time hasn't reached.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the bep20 token owner.\r\n     */\r\n    function getOwner() external view override returns (address) {\r\n        return displayOnwer();\r\n    }\r\n\r\n    /**\r\n     * @dev returns the token name\r\n     */\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the token symbol\r\n     */\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the token decimal\r\n     */\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the token total supply\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the balance of the account\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the specified amount is transfered to the recipient\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        checkWithdrwalAddressTime(msg.sender)\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers [amount] from [sender] to [recipient]\r\n     *\r\n     * Emits a Transer event\r\n     *\r\n     * Requirement:\r\n     * [sender] cannot be a zero address\r\n     * [recipient] cannot be a zero address\r\n     * [sender] balance must be equal or greater than amount\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            sender != address(0),\r\n            \"Transfer from zero address not allowed.\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"Transfer to the zero address not allowed.\"\r\n        );\r\n\r\n        // check if tax is on is on\r\n        if (\r\n            _isTaxable &&\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient]\r\n        ) {\r\n            uint256 fees = 0;\r\n            if (_autoMarketMakerPair[recipient]) {\r\n                // selling\r\n                fees = (amount / 100) * _liquidity_sell_tax;\r\n                amount = amount.sub(fees);\r\n            } else if (_autoMarketMakerPair[sender]) {\r\n                // buying\r\n                fees = (\r\n                    !_launchedTax\r\n                        ? (amount / 100) * _liquidity_buy_tax\r\n                        : (amount / 100) * 90\r\n                );\r\n                amount = amount.sub(fees);\r\n            }\r\n\r\n            if (fees > 0) {\r\n                _balances[sender] = _balances[sender].sub(fees);\r\n                _balances[address(this)] = _balances[address(this)].add(fees);\r\n                emit Transfer(sender, address(this), fees);\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            !_isSwapping &&\r\n            !_autoMarketMakerPair[sender] &&\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient]\r\n        ) {\r\n            _isSwapping = true;\r\n            uint256 _liquidityTokens = (contractTokenBalance * 40) / 100;\r\n            swapAndLiquify(_liquidityTokens);\r\n\r\n            uint256 marketingTokens = balanceOf(address(this));\r\n            swapAndSendFee(marketingTokens, marketing_wallet_address);\r\n\r\n            _isSwapping = false;\r\n        }\r\n\r\n        // check if address is an betswamp address\r\n        if (_betswamp_addresses[sender] != 0) {\r\n            // check if euphoria address isn't presale, privateSale or liquidity wallet\r\n            if (_full_withdrawal_betswamp_address[sender] != true) {\r\n                // check if amount is less than 20% allowed spending\r\n                if (amount > (_balances[sender] / 100) * 2) {\r\n                    revert(\"Amount is greater than 20% allowed spending power\");\r\n                } else {\r\n                    // next allowed withdrawal time is next month\r\n                    _betswamp_addresses[sender] = block.timestamp + 4 weeks;\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient balance.\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev returns amount spender is allowed to spend on owner's behalf\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev approves a specific amount that spender is allowed to spend on owner's\r\n     * behalf\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev function is similiar to approve function\r\n     * [amount] is set that spender is allowed to spend on owners behalf\r\n     *\r\n     * Requirements:\r\n     * [owner] cannot be a zero address\r\n     * [spender] cannot be a zero address\r\n     *\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal checkWithdrwalAddressTime(msg.sender) {\r\n        require(\r\n            owner != address(0),\r\n            \"Approval from a zero address not allowed\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"Approval to the zero address not allowed\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev function conducts transfer on behalf of sender and transfers the funds to recipient\r\n     *\r\n     * Requirements:\r\n     * the [amount] specified must be the same as the approved [amount]\r\n     * approved for the spender to spend.\r\n     */\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(\r\n            amount,\r\n            \"Amount exceeds allowance\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev destroys [amount] tokens from caller account reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with [to] set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - sender must have at least [amount] tokens.\r\n     */\r\n    function burn(uint256 amount)\r\n        public\r\n        checkWithdrwalAddressTime(msg.sender)\r\n        returns (bool success)\r\n    {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(\r\n            amount,\r\n            \"Amount for burn exceeds balance.\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev destroys token on behalf of another account\r\n     *\r\n     * Requirements:\r\n     *\r\n     * the [amount] specified must be the same with the amount approved\r\n     * for the spender to spend.\r\n     */\r\n    function burnFrom(address account, uint256 amount)\r\n        public\r\n        checkWithdrwalAddressTime(msg.sender)\r\n        returns (bool success)\r\n    {\r\n        _approve(\r\n            account,\r\n            msg.sender,\r\n            _allowances[account][msg.sender].sub(\r\n                amount,\r\n                \"Burn amount exceeds allowance\"\r\n            )\r\n        );\r\n        burn(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev funcction is swaps BETS in the smart contract(tax) to BNB\r\n     */\r\n    function swapTokens(uint256 tokenAmount) private returns (uint256) {\r\n        uint256 initBalance = address(this).balance; // contract initial balance\r\n\r\n        // uniswap token pair path == BETS -> WBNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        return (address(this).balance - initBalance);\r\n    }\r\n\r\n    function swapAndSendFee(uint256 tokens, address feeAddress) private {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokens(tokens);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        (bool success, ) = feeAddress.call{value: newBalance}(\"\");\r\n        require(success, \"Betswamp: Payment to marketing wallet failed\");\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        // split the contract balance into halves\r\n        uint256 half = tokens / 2;\r\n        uint256 otherHalf = tokens - half;\r\n\r\n        // swap tokens for ETH\r\n        uint256 newBalance = swapTokens(half);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        (, uint256 ethFromLiquidity, ) = _uniswapV2Router.addLiquidityETH{\r\n            value: ethAmount\r\n        }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n        if (ethAmount - ethFromLiquidity > 0)\r\n            payable(marketing_wallet_address).transfer(\r\n                ethAmount - ethFromLiquidity\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev function is used to exlude an address for Buy/Sell Fee\r\n     */\r\n    function _excludeFromFee(address _address) external onlyOwner {\r\n        _isExcludedFromFee[_address] = true;\r\n        emit ExcludeFromFees(_address, true);\r\n    }\r\n\r\n    /**\r\n     * @dev function is used to include an address to address to be charged Buy/Sell Fee\r\n     */\r\n    function _includeToFee(address _address) external onlyOwner {\r\n        _isExcludedFromFee[_address] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev function changes uniswapV2Router address\r\n     */\r\n    function updateRouterAddress(address _router)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _uniswapV2Router = IUniswapV2Router02(_router);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev function changes marketing address\r\n     */\r\n    function updateMarketingWalletAddress(address _marketing_wallet_address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        marketing_wallet_address = payable(_marketing_wallet_address);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev function returns marketing wallet address\r\n     */\r\n    function getMarketingWalletAddress() external view returns (address) {\r\n        return marketing_wallet_address;\r\n    }\r\n\r\n    /**\r\n     * @dev function sets uniswapPair\r\n     */\r\n    function setAutoMarketMakerPair(address _pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _pair != _uniswapV2Pair,\r\n            \"Betswamp: Pancakeswap pair cannot be removed.\"\r\n        );\r\n        _setAutoMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function _setAutoMarketMakerPair(address _pair, bool value) private {\r\n        require(\r\n            _autoMarketMakerPair[_pair] != value,\r\n            \"Betswamp: Pancakeswap automatic market maker pair already set to value\"\r\n        );\r\n        _autoMarketMakerPair[_pair] = value;\r\n\r\n        emit SetAutoMaketMakerPair(_pair, value);\r\n    }\r\n\r\n    /**\r\n     * @dev function switches transaction tax on/off\r\n     */\r\n    function _taxSwitch(bool _status) private {\r\n        _isTaxable = _status;\r\n    }\r\n\r\n    function switchTax(bool _status) external onlyOwner {\r\n        _taxSwitch(_status);\r\n    }\r\n\r\n    // function denotes Pancakeswap launch timestamp\r\n    function launch() external onlyOwner {\r\n        if (_launchedTax) {\r\n            _launchedTax = false;\r\n        } else {\r\n            _launchedTax = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function is used to airdrop different amount of\r\n     * tokens to the [_recipients]\r\n     */\r\n    function airdropDifferentTokenAmount(\r\n        address _sender,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _airdropAmount\r\n    ) external onlyOwner {\r\n        // check if sender is excluded from fees\r\n        if (!_isExcludedFromFee[_sender]) _isExcludedFromFee[_sender] = true;\r\n        // loop through [_recipients] and airdrop tokens\r\n        for (uint256 counter = 0; counter < _recipients.length; counter++) {\r\n            _transfer(_sender, _recipients[counter], _airdropAmount[counter]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function is used to airdrop same amount of\r\n     * tokens to all [_recipient]\r\n     */\r\n    function airdropSameTokenAmount(\r\n        address _sender,\r\n        address[] calldata _recipients,\r\n        uint256 _airdropAmount\r\n    ) external onlyOwner {\r\n        // check if [_sender] is excluded from fees\r\n        if (!_isExcludedFromFee[_sender]) _isExcludedFromFee[_sender] = true;\r\n        // loop through [_recipients] and airdrop tokens\r\n        for (uint256 counter = 0; counter < _recipients.length; counter++) {\r\n            // airdrop token\r\n            _transfer(_sender, _recipients[counter], _airdropAmount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"airdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operationAndInfrastructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"privateSale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"advisors\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonuses\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutoMaketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_includeToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_airdropAmount\",\"type\":\"uint256[]\"}],\"name\":\"airdropDifferentTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_airdropAmount\",\"type\":\"uint256\"}],\"name\":\"airdropSameTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"switchTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing_wallet_address\",\"type\":\"address\"}],\"name\":\"updateMarketingWalletAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BETS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a513e5b1cc4e04480da2fc0c95316ccf17e5b191000000000000000000000000226c6ad8d31ff827a269d2e9add9ce9e7c9637c8000000000000000000000000b30ab285858e5320119906574baf1c9db6897def000000000000000000000000beaf9811021fc3ce60b691c328efbfe5764bbad200000000000000000000000098da1310cc92a65ebff65775aacd7f58220a4c97000000000000000000000000fd4595178c0474ae265784671ff42a6cde35513f000000000000000000000000df38ef4dabf87040cd19512ee35655fa66115a460000000000000000000000007e77e5a5573a506a57ae3ce2206b0d731e13ee1a00000000000000000000000085af48fd7d306052f3a022aa1b31d8914ebd3ea4000000000000000000000000a704d3d1f6350a21866936744acd06f67698e090000000000000000000000000ad9eab09cd57772d1550379f81bc655ed66a19c1", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50a1260368537c2e723285873295f13c8b6ac2971155447f2af3ac7f4f602c0a"}