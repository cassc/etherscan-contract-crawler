{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AtomicSwap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MultiMetaLife.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract AtomicSwap is Ownable, Pausable, ReentrancyGuard {\\n  struct LockedBalance {\\n    uint64 start;\\n    uint256 amount;\\n    bool claimed;\\n  }\\n  struct Account {\\n    uint64 last;\\n    address ref;\\n    uint256 balance;\\n    uint256 lockedBalanceCount;\\n    mapping(uint256 => LockedBalance) lockedBalance;\\n  }\\n  struct Pair {\\n    uint256 min;\\n    uint256 max;\\n    bool active;\\n  }\\n\\n  MultiMetaLife public token;\\n  PriceOracle public priceOracle;\\n\\n  uint24[7] public levels = [12, 8, 6, 4, 3, 2, 1];\\n  uint64 public lockDuration;\\n  uint64 public activeDuration;\\n\\n  mapping(address => Pair) public whitelist;\\n  mapping(address => Account) public balance;\\n\\n  error NotAllowed();\\n  error AlreadyClaimed();\\n  error RefIsInvalid();\\n  error AccountRegistered();\\n  error AccountNotRegistered();\\n\\n  modifier validateAccount() {\\n    if (balance[msg.sender].last == 0) {\\n      revert AccountNotRegistered();\\n    }\\n    _;\\n  }\\n\\n  constructor(\\n    address head,\\n    address _token,\\n    address _priceOracle,\\n    uint64 _lockDuration,\\n    uint64 _activeDuration\\n  ) {\\n    token = MultiMetaLife(_token);\\n    priceOracle = PriceOracle(_priceOracle);\\n    lockDuration = _lockDuration;\\n    activeDuration = _activeDuration;\\n    balance[head].last = uint64(block.timestamp);\\n  }\\n\\n  function isRegister(address _address) external view returns (bool) {\\n    return balance[_address].last > 0;\\n  }\\n\\n  function isActive(address _address) external view returns (bool) {\\n    return balance[_address].last + activeDuration > block.timestamp;\\n  }\\n\\n  function getLockedBalance(\\n    address _address,\\n    uint256 index\\n  ) external view returns (LockedBalance memory) {\\n    require(\\n      index < balance[_address].lockedBalanceCount,\\n      \\\"contract address already exists\\\"\\n    );\\n    return balance[_address].lockedBalance[index];\\n  }\\n\\n  function calculateSwap(\\n    uint256 _amount,\\n    address _token\\n  ) external view returns (uint256) {\\n    require(whitelist[_token].active, \\\"token is not active\\\");\\n    require(_amount > 0, \\\"No ETH sent\\\");\\n\\n    uint256 value = priceOracle.purchase(_token, _amount);\\n\\n    return value;\\n  }\\n\\n  function calculateSell(\\n    uint256 _amount,\\n    address _token\\n  ) external view returns (uint256) {\\n    require(whitelist[_token].active, \\\"token is not active\\\");\\n    require(_amount > 0, \\\"No ETH sent\\\");\\n\\n    uint256 value = priceOracle.sell(_amount, _token);\\n\\n    return value;\\n  }\\n\\n  function swapAndRegister(address _ref) external payable {\\n    _register(_ref);\\n    _swap();\\n  }\\n\\n  function swap() external payable validateAccount {\\n    _swap();\\n  }\\n\\n  function sell(uint256 _amount) external payable {\\n    _sell(msg.sender, _amount);\\n  }\\n\\n  function sellForToken(address _token, uint256 _amount) external {\\n    _sellToken(msg.sender, _amount, _token);\\n  }\\n\\n  function swapTokenAndRegister(\\n    address _ref,\\n    uint256 _amount,\\n    address _token\\n  ) external {\\n    _register(_ref);\\n    _swapToken(_amount, _token);\\n  }\\n\\n  function swapToken(uint256 _amount, address _token) external validateAccount {\\n    _swapToken(_amount, _token);\\n  }\\n\\n  function clearBalance(uint64 index) external {\\n    _removeLockedBalance(msg.sender, index);\\n  }\\n\\n  function clearBalances(uint64[] memory indexes) external {\\n    for (uint256 i = 0; i < indexes.length; i++) {\\n      _removeLockedBalance(msg.sender, indexes[i]);\\n    }\\n  }\\n\\n  function isClear(\\n    address _address,\\n    uint256 index\\n  ) external view returns (bool) {\\n    require(\\n      index < balance[_address].lockedBalanceCount,\\n      \\\"contract address already exists\\\"\\n    );\\n    LockedBalance memory _lockedBalance = balance[_address].lockedBalance[\\n      index\\n    ];\\n    return _lockedBalance.start + lockDuration < block.timestamp;\\n  }\\n\\n  function unpause() external onlyOwner {\\n    return super._unpause();\\n  }\\n\\n  function pause() external onlyOwner {\\n    return super._pause();\\n  }\\n\\n  function updateLockDuration(uint64 _lockDuration) external onlyOwner {\\n    emit LockDurationUpdated(lockDuration, _lockDuration);\\n    lockDuration = _lockDuration;\\n  }\\n\\n  function updateActiveDuration(uint64 _activeDuration) external onlyOwner {\\n    emit ActiveDurationUpdated(activeDuration, _activeDuration);\\n    activeDuration = _activeDuration;\\n  }\\n\\n  function addPair(\\n    address _token,\\n    uint256 _min,\\n    uint256 _max\\n  ) external onlyOwner {\\n    whitelist[_token] = Pair(_min, _max, true);\\n    emit PairAdded(_token, _min, _max);\\n  }\\n\\n  function deactivePair(address _token) external onlyOwner {\\n    whitelist[_token].active = false;\\n    emit PairDeactivated(_token);\\n  }\\n\\n  function _swap() internal {\\n    require(msg.value > 0, \\\"Send some tokens\\\");\\n\\n    uint256 value = priceOracle.purchase(address(0), msg.value);\\n    _mmlTransfer(msg.sender, value);\\n\\n    emit Swap(msg.sender, msg.value, value);\\n  }\\n\\n  function _swapToken(uint256 _amount, address _token) internal {\\n    require(whitelist[_token].active, \\\"token is not active\\\");\\n    require(_amount > 0, \\\"No ETH sent\\\");\\n\\n    uint256 value = priceOracle.purchase(_token, _amount);\\n    bool res = ERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n    require(res, \\\"Failed to transfer token\\\");\\n    _mmlTransfer(msg.sender, value);\\n\\n    emit SwapToken(msg.sender, _token, _amount, value);\\n  }\\n\\n  function _sell(address _from, uint256 _amount) internal nonReentrant {\\n    require(_amount > 0, \\\"Send some tokens\\\");\\n    uint256 tokenBalance = token.balanceOf(_from);\\n    require(tokenBalance >= _amount, \\\"Insufficient locked token\\\");\\n\\n    bool res = token.transferFrom(_from, address(this), _amount);\\n    require(res, \\\"Failed to transfer token\\\");\\n    uint256 value = priceOracle.sell(_amount, address(0));\\n    Address.sendValue(payable(_from), value);\\n\\n    emit Sell(_from, _amount, value);\\n  }\\n\\n  function _sellToken(address _from, uint256 _amount, address _token) internal {\\n    require(whitelist[_token].active, \\\"token is not active\\\");\\n    require(_amount > 0, \\\"Send some tokens\\\");\\n\\n    bool res = token.transferFrom(_from, address(this), _amount);\\n    require(res, \\\"Failed to transfer token\\\");\\n    uint256 value = priceOracle.sell(_amount, _token);\\n\\n    bool res2 = ERC20(_token).transfer(_from, value);\\n    require(res2, \\\"Failed to transfer second token\\\");\\n\\n    emit SellToken(_from, _token, _amount, value);\\n  }\\n\\n  function _mmlTransfer(\\n    address _reciever,\\n    uint256 value\\n  ) internal nonReentrant whenNotPaused {\\n    uint256 tokenBalance = token.balanceOf(address(this));\\n    require(tokenBalance >= value, \\\"Insufficient locked token\\\");\\n\\n    uint256 refsShare = _payRefs(_reciever, value);\\n    uint buyShare = value - refsShare;\\n    _addLockedBalance(_reciever, buyShare);\\n    token.transfer(_reciever, buyShare);\\n    balance[_reciever].last = uint64(block.timestamp);\\n  }\\n\\n  function _payRefs(\\n    address _address,\\n    uint256 _amount\\n  ) internal returns (uint256 totalShare) {\\n    address _ref = balance[_address].ref;\\n    for (uint256 i = 0; i < 7; i++) {\\n      if (_ref != address(0)) {\\n        if (balance[_ref].last + activeDuration > block.timestamp) {\\n          uint256 share = (levels[i] * _amount) / 100;\\n          totalShare += share;\\n          token.transfer(_ref, share);\\n        }\\n        _ref = balance[_ref].ref;\\n      } else {\\n        return totalShare;\\n      }\\n    }\\n  }\\n\\n  function _addLockedBalance(address _address, uint256 _amount) internal {\\n    Account storage account = balance[_address];\\n    uint256 index = account.lockedBalanceCount;\\n    uint64 timestamp = uint64(block.timestamp);\\n\\n    account.lockedBalance[index] = LockedBalance(timestamp, _amount, false);\\n    account.lockedBalanceCount = account.lockedBalanceCount + 1;\\n    account.balance += _amount;\\n    emit LockedBalanceAdded(_address, _amount, index);\\n  }\\n\\n  function _removeLockedBalance(address _address, uint256 index) internal {\\n    LockedBalance storage _lockedBalance = balance[_address].lockedBalance[\\n      index\\n    ];\\n    if (_lockedBalance.start + lockDuration > block.timestamp) {\\n      revert NotAllowed();\\n    }\\n    if (_lockedBalance.claimed) {\\n      revert AlreadyClaimed();\\n    }\\n\\n    _lockedBalance.claimed = true;\\n    balance[_address].balance -= _lockedBalance.amount;\\n    emit LockedBalanceCleared(_address, _lockedBalance.amount, index);\\n  }\\n\\n  function _register(address _ref) internal {\\n    if (balance[_ref].last == 0) {\\n      revert RefIsInvalid();\\n    }\\n\\n    Account storage account = balance[msg.sender];\\n    if (account.ref != address(0)) {\\n      revert AccountRegistered();\\n    }\\n    account.ref = _ref;\\n    emit Register(_ref, msg.sender);\\n  }\\n\\n  event Register(address indexed ref, address account);\\n  event Swap(address indexed receiver, uint256 amount, uint256 value);\\n  event SwapToken(\\n    address indexed receiver,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n\\n  event Sell(address indexed from, uint256 amount, uint256 value);\\n  event SellToken(\\n    address indexed from,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n\\n  event PairAdded(address token, uint256 min, uint256 max);\\n  event PairDeactivated(address token);\\n\\n  event LockedBalanceAdded(\\n    address indexed receiver,\\n    uint256 value,\\n    uint256 index\\n  );\\n  event LockedBalanceCleared(\\n    address indexed receiver,\\n    uint256 value,\\n    uint256 index\\n  );\\n\\n  event LockDurationUpdated(uint64 prvValue, uint64 newValue);\\n  event ActiveDurationUpdated(uint64 prvValue, uint64 newValue);\\n}\\n\"\r\n    },\r\n    \"contracts/IFeed.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IFeed {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function updator() external returns (address);\\n\\n    function subscribeFee() external returns (uint256);\\n\\n    function getCoinIndex(\\n        string calldata name,\\n        string calldata symbol\\n    ) external view returns (uint256);\\n\\n    function coinsCount() external returns (uint256);\\n\\n    function updatePrices(\\n        uint256[] calldata index,\\n        uint256[] calldata newPrice,\\n        uint256[] calldata newTimestamp\\n    ) external;\\n\\n    function updatePrice(\\n        uint256 index,\\n        uint128 newPrice,\\n        uint128 timestamp\\n    ) external;\\n\\n    function updateOracleUpdaterAddress(address newUpdator) external;\\n\\n    function getCoinPrice(\\n        uint256 index\\n    ) external view returns (uint128, uint128);\\n\\n    function getCoinInfo(\\n        uint256 index\\n    ) external view returns (string memory, string memory);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function addCoin(\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 price\\n    ) external returns (uint256);\\n\\n    function setSubscribeFee(uint256 newSubscribeFee) external;\\n\\n    function subscribe(address account, uint256 blocks) external returns (bool);\\n\\n    event CoinUpdated(string name, string symbol, uint256 index, uint256 price);\\n    event PriceUpdated(uint256 index, uint128 price, uint128 timestamp);\\n    event PricesUpdated(uint256[] index, uint256[] price, uint256[] timestamp);\\n    event SubscribeFeeUpdated(uint256 fee);\\n}\\n\"\r\n    },\r\n    \"contracts/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPriceOracle {\\n    /**\\n     * @dev Returns the mml amount of sent tokens\\n     * @param token The address of target pair.\\n     * @param amount mml token amount.\\n     * @return price final price in mml\\n     */\\n    function purchase(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev Returns the price of mml amount\\n     * @param amount mml token amount.\\n     * @param token The address of target pair.\\n     * @return price final price of mml amount\\n     */\\n    function sell(uint256 amount, address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/MMLStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MultiMetaLife.sol\\\";\\n\\ncontract MMLStaking is Ownable, Pausable, ReentrancyGuard {\\n  struct Stake {\\n    uint256 amount;\\n    uint32 plan;\\n    address owner;\\n    uint64 start;\\n    uint64 claim;\\n    bool active;\\n  }\\n\\n  struct Plan {\\n    uint64 unstakeLockDuration;\\n    uint32 rewardPercentagePerPeriod;\\n    uint64 calculateRewardPeriod;\\n    uint256 minAmount;\\n    uint256 maxAmount;\\n  }\\n\\n  bool public isStakingPaused;\\n  MultiMetaLife public token;\\n  uint public stakesCount;\\n  mapping(uint => Stake) public stakes;\\n  mapping(address => uint) public balanceOf;\\n  Plan[] public plans;\\n\\n  modifier stakeIsValid(address _address, uint256 _stakeIndex) {\\n    Stake memory _stake = stakes[_stakeIndex];\\n    require(_stake.owner == _address, \\\"Unauthorized stake\\\");\\n    require(_stake.active == true, \\\"Stake is not active\\\");\\n    _;\\n  }\\n\\n  modifier whenStakingNotDisalbed() {\\n    require(!isStakingPaused, \\\"Staking is disabled\\\");\\n    _;\\n  }\\n\\n  constructor(MultiMetaLife _token) {\\n    token = _token;\\n  }\\n\\n  function getAllPlans() public view returns (Plan[] memory) {\\n    return plans;\\n  }\\n\\n  function calculateReward(\\n    uint256 _stakeIndex\\n  ) public view returns (uint256 _rewardAmount) {\\n    Stake storage _stake = stakes[_stakeIndex];\\n    if (!_stake.active) {\\n      return 0;\\n    }\\n    Plan memory _plan = plans[_stake.plan];\\n\\n    _rewardAmount = _calculateReward(\\n      _stake.amount,\\n      _stake.claim,\\n      block.timestamp,\\n      _plan.rewardPercentagePerPeriod,\\n      _plan.calculateRewardPeriod\\n    );\\n  }\\n\\n  function stake(\\n    uint256 _amount,\\n    uint32 _planIndex\\n  ) external whenNotPaused whenStakingNotDisalbed nonReentrant {\\n    require(_amount > 0, \\\"Staking amount should be greater than 0\\\");\\n    require(token.balanceOf(msg.sender) >= _amount, \\\"Insufficient fund\\\");\\n    Plan memory selectedPlan = plans[_planIndex];\\n    require(\\n      _amount >= selectedPlan.minAmount && _amount <= selectedPlan.maxAmount,\\n      \\\"Invalid staking amount for the selected plan\\\"\\n    );\\n\\n    token.transferFrom(msg.sender, address(this), _amount);\\n\\n    uint256 stakeIndex = stakesCount;\\n    stakes[stakeIndex] = Stake({\\n      amount: _amount,\\n      plan: _planIndex,\\n      owner: msg.sender,\\n      start: uint64(block.timestamp),\\n      claim: uint64(block.timestamp),\\n      active: true\\n    });\\n\\n    unchecked {\\n      stakesCount++;\\n      balanceOf[msg.sender] += _amount;\\n    }\\n    emit Staked(msg.sender, _planIndex, _amount, stakeIndex);\\n  }\\n\\n  function unstake(\\n    uint256 _stakeIndex\\n  ) external whenNotPaused nonReentrant stakeIsValid(msg.sender, _stakeIndex) {\\n    Stake storage _stake = stakes[_stakeIndex];\\n    Plan memory _plan = plans[_stake.plan];\\n    require(_stake.start + _plan.unstakeLockDuration < block.timestamp);\\n\\n    uint256 _rewardAmount = _calculateReward(\\n      _stake.amount,\\n      _stake.claim,\\n      block.timestamp,\\n      _plan.rewardPercentagePerPeriod,\\n      _plan.calculateRewardPeriod\\n    );\\n    if (_rewardAmount > 0) {\\n      claimReward(_stakeIndex);\\n    }\\n\\n    _stake.active = false;\\n\\n    unchecked {\\n      balanceOf[msg.sender] -= _stake.amount;\\n    }\\n    emit Unstaked(_stakeIndex);\\n  }\\n\\n  function claimReward(\\n    uint256 _stakeIndex\\n  ) public whenNotPaused stakeIsValid(msg.sender, _stakeIndex) {\\n    Stake storage _stake = stakes[_stakeIndex];\\n    Plan memory _plan = plans[_stake.plan];\\n\\n    uint256 _rewardAmount = _calculateReward(\\n      _stake.amount,\\n      _stake.claim,\\n      block.timestamp,\\n      _plan.rewardPercentagePerPeriod,\\n      _plan.calculateRewardPeriod\\n    );\\n\\n    require(_rewardAmount > 0, \\\"No rewards to claim\\\");\\n\\n    uint256 balance = token.balanceOf(address(this));\\n    require(balance >= _rewardAmount, \\\"Not enough balance in treasury\\\");\\n\\n    token.transfer(msg.sender, _rewardAmount);\\n    _stake.claim = uint64(block.timestamp);\\n    emit RewardClaimed(_stakeIndex, _rewardAmount);\\n  }\\n\\n  function addPlan(\\n    uint64 _unstakeLockDuration,\\n    uint32 _rewardPercentagePerPeriod,\\n    uint64 _calculateRewardPeriod,\\n    uint256 _minAmount,\\n    uint256 _maxAmount\\n  ) external onlyOwner {\\n    uint index = plans.length;\\n    plans.push(\\n      Plan(\\n        _unstakeLockDuration,\\n        _rewardPercentagePerPeriod,\\n        _calculateRewardPeriod,\\n        _minAmount,\\n        _maxAmount\\n      )\\n    );\\n    emit PlanAdded(\\n      index,\\n      _unstakeLockDuration,\\n      _rewardPercentagePerPeriod,\\n      _calculateRewardPeriod,\\n      _minAmount,\\n      _maxAmount\\n    );\\n  }\\n\\n  function unpause() external onlyOwner {\\n    return super._unpause();\\n  }\\n\\n  function pause() external onlyOwner {\\n    return super._pause();\\n  }\\n\\n  function changeStakeStatus(bool _active) external onlyOwner {\\n    isStakingPaused = _active;\\n  }\\n\\n  function _calculateReward(\\n    uint256 amount,\\n    uint256 start,\\n    uint256 end,\\n    uint256 rewardPercentagePerPeriod,\\n    uint64 calculateRewardPeriod\\n  ) public pure returns (uint256) {\\n    return\\n      (amount *\\n        rewardPercentagePerPeriod *\\n        ((end - start) / calculateRewardPeriod)) / 10000;\\n  }\\n\\n  event Staked(\\n    address indexed _address,\\n    uint32 _planIndex,\\n    uint256 _amount,\\n    uint256 _stakeIndex\\n  );\\n  event Unstaked(uint256 _stakeIndex);\\n  event RewardClaimed(uint256 _stakeIndex, uint256 _amount);\\n\\n  event PlanAdded(\\n    uint256 index,\\n    uint64 unstakeLockDuration,\\n    uint32 rewardPercentagePerPeriod,\\n    uint64 calculateRewardPeriod,\\n    uint256 minAmount,\\n    uint256 maxAmount\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/MultiMetaLife.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./AtomicSwap.sol\\\";\\nimport \\\"./MMLStaking.sol\\\";\\n\\ncontract MultiMetaLife is ERC20, Ownable {\\n  uint public MAX_SUPPLY = 54_100_000 ether;\\n  uint public advisorShare = (MAX_SUPPLY * 1) / 20;\\n  uint public reserveShare = (MAX_SUPPLY * 3) / 20;\\n  uint public stakeShare = (MAX_SUPPLY * 3) / 10;\\n  uint public swapShare = (MAX_SUPPLY * 1) / 10;\\n  uint public liquidityShare = (MAX_SUPPLY * 2) / 10;\\n  uint public ownerShare =\\n    MAX_SUPPLY - swapShare - stakeShare - reserveShare - advisorShare - liquidityShare;\\n  AtomicSwap public swap;\\n  MMLStaking public stake;\\n  mapping(address => bool) public whitelist;\\n  bool public stakeMint;\\n  bool public swapMint;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _owner,\\n    address reserve,\\n    address advisor,\\n    address liqudiity\\n  ) ERC20(_name, _symbol) {\\n    whitelist[address(0)] = true;\\n    _mint(_owner, ownerShare);\\n    _mint(reserve, reserveShare);\\n    _mint(advisor, advisorShare);\\n    _mint(liqudiity, liquidityShare);\\n  }\\n\\n  function setStakeContract(MMLStaking _stake) public onlyOwner {\\n    require(address(_stake) != address(0), \\\"Stake contract not defined\\\");\\n    require(!stakeMint, \\\"One-time method\\\");\\n    stakeMint = true;\\n    stake = _stake;\\n    _mint(address(_stake), stakeShare);\\n  }\\n\\n  function setSwapContract(AtomicSwap _swap) public onlyOwner {\\n    require(address(_swap) != address(0), \\\"Stake contract not defined\\\");\\n    require(!swapMint, \\\"One-time method\\\");\\n    swapMint = true;\\n    swap = _swap;\\n    _mint(address(_swap), swapShare);\\n  }\\n\\n  function getLockedBalance(address _address) public view returns (uint) {\\n    if (address(swap) == address(0)) {\\n      return 0;\\n    }\\n    (, , uint balance, ) = swap.balance(_address);\\n\\n    return balance;\\n  }\\n\\n  function getStakedBalance(address _address) public view returns (uint) {\\n    if (address(stake) == address(0)) {\\n      return 0;\\n    }\\n    return stake.balanceOf(_address);\\n  }\\n\\n  // check the contract address exist in authorized list or not\\n  function isContractAuthorized(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  //burn amount from msg.sender wallet\\n  function burn(uint256 amount) external {\\n    return _burn(msg.sender, amount);\\n  }\\n\\n  //add contract address to authorized list\\n  function addContractToAuthorized(address _address) external onlyOwner {\\n    require(\\n      Address.isContract(_address),\\n      \\\"should only add contract address to authorized list\\\"\\n    );\\n    require(!whitelist[_address], \\\"contract address already exists\\\");\\n    whitelist[_address] = true;\\n  }\\n\\n  //remote contract address From Authorized list\\n  function removeContractFromAuthorized(address _address) external onlyOwner {\\n    require(whitelist[_address], \\\"contract address does not exist\\\");\\n    whitelist[_address] = false;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal view override {\\n    if (\\n      from != address(swap) &&\\n      !isContractAuthorized(from) &&\\n      !isContractAuthorized(to)\\n    ) {\\n      require(\\n        balanceOf(from) + getStakedBalance(from) - getLockedBalance(from) >=\\n          amount,\\n        \\\"cannot using locked balance\\\"\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./IFeed.sol\\\";\\nimport \\\"./IPancakeRouter01.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract PriceOracle is IPriceOracle {\\n    IFeed public immutable usdOracle;\\n    uint256 public coinIndex;\\n    IPancakeRouter01 public router;\\n    address public wbnbToken;\\n    address public usdtToken;\\n\\n    constructor(\\n        IFeed _usdOracle,\\n        uint256 _coinIndex,\\n        address _router,\\n        address _wbnbToken,\\n        address _usdtToken\\n    ) {\\n        usdOracle = _usdOracle;\\n        coinIndex = _coinIndex;\\n        router = IPancakeRouter01(_router);\\n        wbnbToken = _wbnbToken;\\n        usdtToken = _usdtToken;\\n    }\\n\\n    function purchase(\\n        address token,\\n        uint256 amount\\n    ) external view override returns (uint basePrice) {\\n        (uint128 mmlPrice, ) = usdOracle.getCoinPrice(coinIndex);\\n        if (token == address(0)) {\\n            basePrice = (_purchase(amount) * 1e4) / mmlPrice;\\n        } else if (token == usdtToken) {\\n            basePrice = (amount * 1e4) / mmlPrice;\\n        } else {\\n            basePrice = (_purchaseToken(token, amount) * 1e4) / mmlPrice;\\n        }\\n    }\\n\\n    function _purchaseToken(\\n        address token,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        address[] memory path;\\n        path = new address[](3);\\n        path[0] = token;\\n        path[1] = wbnbToken;\\n        path[2] = usdtToken;\\n        uint[] memory amountsOut = router.getAmountsOut(amount, path);\\n        return amountsOut[2];\\n    }\\n\\n    function _purchase(uint256 amount) internal view returns (uint256) {\\n        address[] memory path;\\n        path = new address[](2);\\n        path[0] = wbnbToken;\\n        path[1] = usdtToken;\\n        uint[] memory amountsOut = router.getAmountsOut(amount, path);\\n        return amountsOut[1];\\n    }\\n\\n    function sell(\\n        uint256 amount,\\n        address token\\n    ) external view override returns (uint) {\\n        (uint128 mmlPrice, ) = usdOracle.getCoinPrice(coinIndex);\\n        uint value = (mmlPrice * amount) / 1e4;\\n        if (token == address(0)) {\\n            return _sell(value);\\n        } else if (token == usdtToken) {\\n            return value;\\n        } else {\\n            return _sellToken(token, value);\\n        }\\n    }\\n\\n    function _sellToken(\\n        address token,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        address[] memory path;\\n        path = new address[](3);\\n        path[0] = usdtToken;\\n        path[1] = wbnbToken;\\n        path[2] = token;\\n        uint[] memory amountsOut = router.getAmountsOut(amount, path);\\n        return amountsOut[2];\\n    }\\n\\n    function _sell(uint256 amount) internal view returns (uint256) {\\n        address[] memory path;\\n        path = new address[](2);\\n        path[0] = usdtToken;\\n        path[1] = wbnbToken;\\n        uint[] memory amountsOut = router.getAmountsOut(amount, path);\\n        return amountsOut[1];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IPriceOracle).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"advisor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liqudiity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractToAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContractAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeContractFromAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MMLStaking\",\"name\":\"_stake\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtomicSwap\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"setSwapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"contract MMLStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contract AtomicSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiMetaLife", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000930a66daa964c5d60143737b02e950be720492aa0000000000000000000000002173ddc46c76d76c304370be531bc39553934ea600000000000000000000000040c35affbd3e6c20e81cb8ea815c96acc9aa1fcb00000000000000000000000022da21be8c00fd66bb02956b0f71bf7b024f615d000000000000000000000000000000000000000000000000000000000000000d4d756c74694d6574614c6966650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4d4c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}