{"SourceCode": "pragma solidity ^0.8.0; \r\n//SPDX-License-Identifier: UNLICENSED\r\n    library SafeMath { \r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n             uint256 c = a / b;\r\n             return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n        function mint(uint256 amount) external  returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n\r\n    contract Base {\r\n        using SafeMath for uint;\r\n        Erc20Token constant internal _USDTIns = Erc20Token(0x55d398326f99059fF775485246999027B3197955); \r\n        Erc20Token constant internal _MUSOIns = Erc20Token(0xF7288CfB44413c8d0156D47D4Af23e0208E35c7c); \r\n        receive() external payable {}  \r\n}\r\n\r\ncontract DataPlayer is Base{\r\n    using SafeMath for uint;\r\n    address  _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    struct Player{\r\n        address superior; \r\n        address[] subordinate;\r\n        uint256 Time; \r\n        uint256 nodeLevel; \r\n    }\r\n\r\n\r\n    struct Playerxx{\r\n        address Player; \r\n        uint256 Time; \r\n        uint256 nodeLevel; \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    mapping(address => Player)  public addressToPlayer;\r\n    mapping(address => bool)  public isNode;\r\n\r\n    uint256 public PlayerCount; \r\n\r\n    address public ProjectPartyWallet = 0x601b555E538B8a5bc80293F1f3999D1215E0F098; \r\n     function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n \r\ncontract  Package is DataPlayer {\r\n    using SafeMath for uint;\r\n    mapping(uint256 => uint256) public Price;\r\n    mapping(uint256 => uint256) public nodeToToken;\r\n    mapping(uint256 => uint256) public superiorToToken;\r\n\r\n\r\n    bool public open;\r\n\r\n    constructor()\r\n     {\r\n        Price[3] = 1000e18;\r\n        Price[2] = 500e18;\r\n        Price[1] = 200e18;\r\n\r\n\r\n        nodeToToken[3] = 30000e18;\r\n        nodeToToken[2] = 12500e18;\r\n        nodeToToken[1] = 4000e18;\r\n\r\n\r\n        superiorToToken[3] = 10000e18;\r\n        superiorToToken[2] = 5000e18;\r\n        superiorToToken[1] = 2000e18;\r\n        _owner = _msgSender();\r\n        isNode[address(this)] = true;  \r\n        open = true;\r\n    }\r\n\r\n    function register(address _referral) external {\r\n        require(isNode[_referral]  , \"is not Node\");\r\n        addressToPlayer[msg.sender].superior = _referral;\r\n        addressToPlayer[msg.sender].Time   = block.timestamp;\r\n        addressToPlayer[_referral].subordinate.push(msg.sender);\r\n     }\r\n\r\n    function setopen() external onlyOwner {\r\n        open = !open;\r\n     }\r\n\r\n    function BUYnode(uint256 PackageType) public  {\r\n        require(!isNode[msg.sender], \"isNode\");\r\n        require(open, \"open\");\r\n        require(PackageType > 0 && PackageType <4, \"out\");  \r\n        _USDTIns.transferFrom(msg.sender, ProjectPartyWallet,Price[PackageType]);\r\n\r\n        if(addressToPlayer[msg.sender].superior != address(this)){\r\n            _MUSOIns.transfer(addressToPlayer[msg.sender].superior,superiorToToken[PackageType]);\r\n        }\r\n\r\n        _MUSOIns.transfer(msg.sender ,nodeToToken[PackageType]);\r\n\r\n        isNode[msg.sender] = true;  \r\n        addressToPlayer[msg.sender].nodeLevel  = PackageType;\r\n    }\r\n\r\n \r\n\r\n \r\n\r\n   function getSubordinate(address Player) public view returns(Playerxx[] memory SubordinateAddress) {\r\n        uint256 totalCount = addressToPlayer[Player].subordinate.length;\r\n        SubordinateAddress = new Playerxx[](totalCount);\r\n        for(uint256 i = 0; i < totalCount ; i++){\r\n            SubordinateAddress[i].Player = addressToPlayer[Player].subordinate[i];\r\n            SubordinateAddress[i].nodeLevel = addressToPlayer[addressToPlayer[Player].subordinate[i]].nodeLevel;\r\n            SubordinateAddress[i].Time = addressToPlayer[addressToPlayer[Player].subordinate[i]].Time;\r\n        }\r\n    }\r\n    function getsuperior(address Player) public view returns(address  superior) {\r\n        superior = addressToPlayer[Player].superior;\r\n     \r\n    }\r\n\r\n    function getuserInfo(address Player) public view returns(address  superior,uint256 Time,uint256 nodeLevel,bool ISNode) {\r\n        superior = addressToPlayer[Player].superior;\r\n        Time = addressToPlayer[Player].Time;\r\n        nodeLevel = addressToPlayer[Player].nodeLevel;\r\n        ISNode = isNode[Player];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"PackageType\",\"type\":\"uint256\"}],\"name\":\"BUYnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProjectPartyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"getSubordinate\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeLevel\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPlayer.Playerxx[]\",\"name\":\"SubordinateAddress\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"getsuperior\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"getuserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeLevel\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ISNode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setopen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"superiorToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Package", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://735ea77d59fe0b365ad9286b3c6c51d050502e2e3a7d762398dc855378ced93b"}