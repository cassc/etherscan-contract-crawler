{"SourceCode": "/**\r\n\r\nSTABLEFUEL by ArtemisX\r\n \r\nrewards up to 8% Daily in BUSD.\r\n~ 2920% yearly APR\r\n8% Referral bonus that is instantly paid in BUSD to your wallet\r\n5% Ecosystem tax\r\nSustainability features:\r\n24 Hours earnings accumulation cut-Off (so 6-1 cannot be abused).\r\n10 Mandatory compound feature (~ 6-1 with 2 compounds a day)\r\n60% Contract Fee For early withdrawals that is locked in the TVL.\r\n\r\nBenefits if you hold $ArtemisX tokens:\r\nA stacking compound bonus up to 10%! When compounding every 12 hours you will go up a tier with each compound up to a maximum of 10! The maximum tier and compound step gives a 10% bonus. What tier you can reach depends on the on number of $ArtemisX tokens held:\r\n*Tier 1: 150 ArtemisX gives a stacking 0.1% compounding bonus with each compound up to 1%\r\n*Tier 2: 450 ArtemisX gives a stacking 0.2% compounding bonus with each compound up to 2%\r\n*Tier 3: 650 Artemisx gives a stacking 0.3% compounding bonus with each compound up to 3%\r\n*Tier 4: 1000 ArtemisX gives a stacking 0.5% compounding bonus with each compound up to 5%\r\n*Tier 5: 2000 ArtemisX gives a stacking 1% compounding bonus with each compound up to 10%\r\n\r\nAn additional stacking 0.1% compounding bonus up to 1% is given as a loyalty bonus to anyone who holds over 100 ArtemisX tokens. This loyalty bonus stacks with the bonus tiers.\r\nExtra Referral Bonuses based on the number of Beans on ArtemisX tokens held, increasing referral bonus to 9.2%!\r\nPart of the miner tax will be used to buyback $ArtemisX and support the ArtemisX ecosystem\r\n\r\nEarnings automation:\r\nMINIMUM INITIAL DEPOSIT OF 250 BUSD REQUIRED! This does not have to be your first deposit but tallies all your non compounded deposits. You can enable/disable automation at any time.\r\nYou can choose automated compounding intervals between 12 and 24 hours. 12 hours is recommended if you hold $ArtemisX tokens for maximum bonus tier effectiveness\r\nAutomation will follow the 6+1 strategy: compounding for 6 days and claiming on 7th with no withdrawal penalty. All fully automatic, no input required.\r\nAutomation fee of 1% per compound/claim\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StableFuel {\r\n    using SafeMath for uint256;\r\n\r\n    IToken public token_BUSD;\r\n\t//address erctoken = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; /** BUSD Testnet **/\r\n    address erctoken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; /** BUSD Mainnet **/\r\n    \r\n    uint256 public QUBIC_TO_HIRE_1MINERS = 1080000;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public REFERRAL = 80;\r\n    uint256 public TAX = 50;\r\n    uint256 public BBTAX = 0;\r\n    uint256 public DEVTAX = 20;\r\n    uint256 public MKTTAX = 30;\r\n    uint256 public AUTOTAX = 10;\r\n    uint256 public MARKET_QUBIC_DIVISOR = 5; // 20%\r\n    uint256 public MARKET_QUBIC_DIVISOR_SELL = 2; // 50%\r\n\r\n    uint256 public MIN_INVEST_LIMIT = 5 * 1e18; /** 5 BUSD  **/\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 20000 * 1e18; /** 20000 BUSD  **/\r\n\r\n\tuint256 public COMPOUND_BONUS = 5; /** 0.5% **/\r\n\tuint256 public COMPOUND_BONUS_MAX_TIMES = 10; /** 10 times / 5 days. **/\r\n    uint256 public COMPOUND_STEP = 12 * 60 * 60; /** every 12 hours. **/\r\n\r\n    uint256 public WITHDRAWAL_TAX = 600; //, 600 = 60%\r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 10; // compound for no tax withdrawal.\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n\r\n    uint256 public marketQubic;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n\tuint256 public CUTOFF_STEP = 24 * 60 * 60; /** 24 hours  **/\r\n\tuint256 public WITHDRAW_COOLDOWN = 4 * 60 * 60; /** 4 hours  **/\r\n\r\n    address public owner;\r\n    address public bbadr;\r\n    address public devadr;\r\n    address public mktadr;\r\n    address public autoadr;\r\n\r\n    uint256 goldvalue = 15000000;\r\n    uint256 platinumvalue = 45000000;\r\n    uint256 platinumhonorvalue = 65000000;\r\n    uint256 diamondvalue = 100000000;\r\n    uint256 diamondhonorvalue = 200000000;\r\n\r\n    uint256 goldbonus = 1;\r\n    uint256 platinumbonus = 2;\r\n    uint256 platinumhonorbonus = 3;\r\n    uint256 diamondbonus = 5;\r\n    uint256 diamondhonorbonus = 10;\r\n\r\n    IBEP20 quantic = IBEP20(0xB45f305ACAf7beC63E30c669737ed8E7aA4C1d33);\r\n        \r\n    address[] partnerships;\r\n    mapping (address => uint256) partnershipIndexes;\r\n\r\n    struct Partner {\r\n        uint256 min_amount;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping(address => Partner) public partners;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedQubic;\r\n        uint256 lastCompound;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralQubicRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    address[] automate;\r\n    mapping (address => uint256) automateIndexes;\r\n\r\n    struct Automation {\r\n        uint256 day;\r\n        uint256 runhours;\r\n        uint256 dayrun;\r\n        uint256 lastrun;\r\n    }\r\n\r\n    mapping(address => Automation) public automations;\r\n\r\n\r\n    constructor(address _bbadr, address _devadr, address _mktadr, address _autoadr) {\r\n\t\trequire(!isContract(_bbadr) && !isContract(_devadr) && !isContract(_mktadr) && !isContract(_autoadr));\r\n        owner = msg.sender;\r\n        bbadr = _bbadr;\r\n        devadr = _devadr;\r\n        mktadr = _mktadr;\r\n        autoadr = _autoadr;\r\n        token_BUSD = IToken(erctoken);\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function getQuanticBalance(address adr) public view returns(uint256) {\r\n        return quantic.balanceOf(address(adr));\r\n    }\r\n\r\n    function getBonusQuantic(address adr) public view returns(uint256) {\r\n         if(quantic.balanceOf(address(adr)) >= diamondhonorvalue){\r\n            return diamondhonorbonus;\r\n        }\r\n        else if(quantic.balanceOf(address(adr)) >= diamondvalue){\r\n            return diamondbonus;\r\n        }\r\n        else if(quantic.balanceOf(address(adr)) >= platinumhonorvalue) {\r\n            return platinumhonorbonus;\r\n        }\r\n        else if(quantic.balanceOf(address(adr))>= platinumvalue){\r\n            return platinumbonus;\r\n        }\r\n        else if(quantic.balanceOf(address(adr))>= goldvalue){\r\n            return goldbonus;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function Compound(bool isCompound) public {\r\n        User storage user = users[msg.sender];\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n        require(automations[msg.sender].day < 1, \"Holder is automated!\");\r\n\r\n        uint256 qubicUsed = getMyQubic();\r\n        uint256 qubicForCompound = qubicUsed;\r\n\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, qubicForCompound);\r\n            qubicForCompound = qubicForCompound.add(dailyCompoundBonus);\r\n            uint256 qubicUsedValue = calculateQubicSell(qubicForCompound);\r\n            user.userDeposit = user.userDeposit.add(qubicUsedValue);\r\n            totalCompound = totalCompound.add(qubicUsedValue);\r\n        } \r\n\r\n        if(block.timestamp.sub(user.lastCompound) >= COMPOUND_STEP) {\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n        \r\n        user.miners = user.miners.add(qubicForCompound.div(QUBIC_TO_HIRE_1MINERS));\r\n        user.claimedQubic = 0;\r\n        user.lastCompound = block.timestamp;\r\n\r\n        marketQubic = marketQubic.add(qubicUsed.div(MARKET_QUBIC_DIVISOR));\r\n    }\r\n\r\n    function compoundAutoQubic(address adr, bool isCompound) internal {\r\n        User storage user = users[adr];\r\n         \r\n        uint256 qubicUsed = users[adr].claimedQubic.add(getQubicSinceLastCompound(adr));\r\n        uint256 qubicForCompound = qubicUsed;\r\n\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(adr, qubicForCompound);\r\n            qubicForCompound = qubicForCompound.add(dailyCompoundBonus);\r\n            uint256 qubicUsedValue = calculateQubicSell(qubicForCompound);\r\n            qubicUsedValue = qubicUsedValue - payAuto(qubicUsedValue);\r\n            qubicForCompound = qubicForCompound - qubicForCompound.mul(AUTOTAX).div(PERCENTS_DIVIDER);\r\n            user.userDeposit = user.userDeposit.add(qubicUsedValue);\r\n            totalCompound = totalCompound.add(qubicUsedValue);\r\n        } \r\n\r\n        if(block.timestamp.sub(user.lastCompound) >= COMPOUND_STEP) {\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n        \r\n        user.miners = user.miners.add(qubicForCompound.div(QUBIC_TO_HIRE_1MINERS));\r\n        user.claimedQubic = 0;\r\n        user.lastCompound = block.timestamp;\r\n\r\n        marketQubic = marketQubic.add(qubicUsed.div(MARKET_QUBIC_DIVISOR));\r\n    }\r\n\r\n    function Sell() public{\r\n        require(contractStarted);\r\n        require(automations[msg.sender].day < 1, \"Holder is automated!\");\r\n        User storage user = users[msg.sender];\r\n        uint256 hasQubic = getMyQubic();\r\n        uint256 qubicValue = calculateQubicSell(hasQubic);\r\n        \r\n        \r\n            //if user compound < to mandatory compound days\r\n        if(user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL){\r\n            //daily compound bonus count will not reset and qubicValue will be deducted with 60% feedback fee.\r\n            qubicValue = qubicValue.sub(qubicValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        }else{\r\n            //set daily compound bonus count to 0 and qubicValue will remain without deductions\r\n             user.dailyCompoundBonus = 0;   \r\n        }\r\n        \r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedQubic = 0;  \r\n        user.lastCompound = block.timestamp;\r\n        marketQubic = marketQubic.add(hasQubic.div(MARKET_QUBIC_DIVISOR_SELL));\r\n        \r\n        if(getBalance() < qubicValue) {\r\n            qubicValue = getBalance();\r\n        }\r\n\r\n        uint256 qubicPayout = qubicValue.sub(payFees(qubicValue));\r\n        token_BUSD.transfer(msg.sender, qubicPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(qubicPayout);\r\n        totalWithdrawn = totalWithdrawn.add(qubicPayout);\r\n    }\r\n\r\n    function sellAutoQubic(address adr) internal {\r\n        User storage user = users[adr];\r\n        uint256 hasQubic = users[adr].claimedQubic.add(getQubicSinceLastCompound(adr));\r\n        uint256 qubicValue = calculateQubicSell(hasQubic);\r\n\r\n        user.dailyCompoundBonus = 0;  \r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedQubic = 0;  \r\n        user.lastCompound = block.timestamp;\r\n        marketQubic = marketQubic.add(hasQubic.div(MARKET_QUBIC_DIVISOR_SELL));\r\n        \r\n        if(getBalance() < qubicValue) {\r\n            qubicValue = getBalance();\r\n        }\r\n\r\n        uint256 qubicPayout = qubicValue.sub(payFees(qubicValue));\r\n        qubicPayout = qubicPayout.sub(payAuto(qubicValue));\r\n        token_BUSD.transfer(adr, qubicPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(qubicPayout);\r\n        totalWithdrawn = totalWithdrawn.add(qubicPayout);\r\n    }\r\n\r\n    function Buy(address ref, uint256 amount) public{\r\n        require(contractStarted);\r\n        User storage user = users[msg.sender];\r\n        require(automations[msg.sender].day < 1, \"Holder is automated!\");\r\n\r\n        require(amount >= MIN_INVEST_LIMIT, \"Mininum investment not met.\");\r\n        require(user.initialDeposit.add(amount) <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n        \r\n        token_BUSD.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 qubicBought = calculateQubicBuy(amount, getBalance().sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedQubic = user.claimedQubic.add(qubicBought);\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n                \r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = amount.mul(REFERRAL+getBonusQuantic(ref)+getBonusPartnership(ref)).div(PERCENTS_DIVIDER);\r\n                token_BUSD.transfer(upline, refRewards);\r\n                users[upline].referralQubicRewards = users[upline].referralQubicRewards.add(refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 qubicPayout = payFees(amount);\r\n        /** less the fee on total Staked to give more transparency of data. **/\r\n        totalStaked = totalStaked.add(amount.sub(qubicPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n        Compound(false);\r\n    }\r\n\r\n    function payFees(uint256 qubicValue) internal returns(uint256){\r\n        uint256 tax = qubicValue.mul(TAX).div(PERCENTS_DIVIDER);\r\n        token_BUSD.transfer(bbadr, qubicValue.mul(BBTAX).div(PERCENTS_DIVIDER));\r\n        token_BUSD.transfer(devadr, qubicValue.mul(DEVTAX).div(PERCENTS_DIVIDER));\r\n        token_BUSD.transfer(mktadr, qubicValue.mul(MKTTAX).div(PERCENTS_DIVIDER));\r\n        return tax.mul(1);\r\n    }\r\n\r\n    function payAuto(uint256 qubicValue) internal returns(uint256){\r\n        uint256 tax = qubicValue.mul(AUTOTAX).div(PERCENTS_DIVIDER);\r\n         token_BUSD.transfer(autoadr, qubicValue.mul(AUTOTAX).div(PERCENTS_DIVIDER));\r\n         return tax.mul(1);\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(getBonusQuantic(_adr)+getBonusPartnership(_adr)); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedQubic, uint256 _lastCompound, address _referrer, uint256 _referrals,\r\n\t uint256 _totalWithdrawn, uint256 _referralQubicRewards, uint256 _dailyCompoundBonus, uint256 _lastWithdrawTime) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _miners = users[_adr].miners;\r\n         _claimedQubic = users[_adr].claimedQubic;\r\n         _lastCompound = users[_adr].lastCompound;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralQubicRewards = users[_adr].referralQubicRewards;\r\n         _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n\t}\r\n\r\n    function initialize(uint256 amount) public{\r\n        if (!contractStarted) {\r\n    \t\tif (msg.sender == owner) {\r\n    \t\t    require(marketQubic == 0);\r\n    \t\t\tcontractStarted = true;\r\n                marketQubic = 86400000000;\r\n                Buy(msg.sender, amount);\r\n    \t\t} else revert(\"Contract not yet started.\");\r\n    \t}\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return token_BUSD.balanceOf(address(this));\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userQubic = users[_adr].claimedQubic.add(getQubicSinceLastCompound(_adr));\r\n        return calculateQubicSell(userQubic);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN, bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt)));\r\n    }\r\n\r\n    function calculateQubicSell(uint256 qubic) public view returns(uint256){\r\n        return calculateTrade(qubic, marketQubic, getBalance());\r\n    }\r\n\r\n    function calculateQubicBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketQubic);\r\n    }\r\n\r\n    function calculateQubicBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateQubicBuy(eth, getBalance());\r\n    }\r\n\r\n    function getQubicYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 qubicAmount = calculateQubicBuy(amount , getBalance().add(amount).sub(amount));\r\n        uint256 miners = qubicAmount.div(QUBIC_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 qubicPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateQubicSellForYield(qubicPerDay, amount);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateQubicSellForYield(uint256 qubic,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(qubic,marketQubic, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyQubic() public view returns(uint256){\r\n        return users[msg.sender].claimedQubic.add(getQubicSinceLastCompound(msg.sender));\r\n    }\r\n\r\n    function getQubicSinceLastCompound(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastCompound = block.timestamp.sub(users[adr].lastCompound);\r\n                            /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastCompound, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(QUBIC_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function REMOVE_PARTNERSHIP(address partnership) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        partnerships[partnershipIndexes[partnership]] = partnerships[partnerships.length-1];\r\n        partnershipIndexes[partnerships[partnerships.length-1]] = partnershipIndexes[partnership];\r\n        partnerships.pop();\r\n        delete partners[partnership];\r\n\r\n    }\r\n   \r\n    function ADD_PARTNERSHIP(address partnership, uint256 minamount, uint256 bonus) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        partnershipIndexes[partnership] = partnerships.length;\r\n        partnerships.push(partnership);\r\n\r\n        partners[partnership].bonus = bonus;\r\n        partners[partnership].min_amount = minamount;\r\n    }\r\n\r\n    function CHANGE_PARTNERSHIP(address partnership, uint256 minamount, uint256 bonus) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n\r\n        partners[partnership].bonus = bonus;\r\n        partners[partnership].min_amount = minamount;\r\n    }\r\n\r\n\r\n    function getBonusPartnership(address adr) public view returns(uint256) {\r\n        uint256 partnershipCount = partnerships.length;\r\n        if(partnershipCount == 0) { return 0; }\r\n\r\n        uint256 iterations = 0;\r\n        uint256 bonus = 0;\r\n\r\n        while(iterations < partnershipCount) {\r\n            IBEP20 partner = IBEP20(partnerships[iterations]);\r\n            if(partner.balanceOf(address(adr)) >= partners[partnerships[iterations]].min_amount ) {\r\n                if(partners[partnerships[iterations]].bonus > bonus) {\r\n                    bonus = partners[partnerships[iterations]].bonus;\r\n                }\r\n            }\r\n            iterations++;\r\n        }\r\n        return bonus;\r\n    }\r\n\r\n    function getPartnershipCount() public view returns(uint256) {\r\n        return partnerships.length;\r\n    }\r\n\r\n    function verifyPartnership(address token) public view returns(uint256) {\r\n        uint256 partnershipCount = partnerships.length;\r\n        if(partnershipCount == 0) { return 0; }\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(iterations < partnershipCount) {\r\n            address partner = partnerships[iterations];\r\n            if(partner == token) {return 1;}\r\n            iterations++;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function ADD_AUTOMATE(uint256 hrs) external {\r\n        require(contractStarted);\r\n        require(automations[msg.sender].day == 0, \"Address already exists!\");\r\n        require(hrs >= 4 && hrs <= 24, \"Hours are not correct!\");\r\n\r\n        automateIndexes[msg.sender] = automate.length;\r\n        automate.push(msg.sender);\r\n\r\n        automations[msg.sender].day = 1;\r\n        automations[msg.sender].runhours = hrs;\r\n        automations[msg.sender].lastrun = block.timestamp;\r\n        automations[msg.sender].dayrun = block.timestamp;\r\n    }\r\n\r\n    function REMOVE_AUTOMATE() external {\r\n        require(contractStarted);\r\n        require(automations[msg.sender].day >= 1, \"Address doesn't exists!\");\r\n        automate[automateIndexes[msg.sender]] = automate[automate.length-1];\r\n        automateIndexes[automate[automate.length-1]] = automateIndexes[msg.sender];\r\n        automate.pop();\r\n        delete automations[msg.sender];\r\n    }\r\n\r\n    function getAutomateCounts() public view returns(uint256) {\r\n        return automate.length;\r\n    }\r\n\r\n    function runAutomate() external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(contractStarted);\r\n        uint256 automateCount = automate.length;\r\n\r\n        uint256 iterations = 0;\r\n        while(iterations < automateCount) {\r\n            address adr = automate[iterations];\r\n            uint256 hasQubic = users[adr].claimedQubic.add(getQubicSinceLastCompound(adr));\r\n            if(hasQubic > 0){\r\n                if ((block.timestamp - automations[adr].lastrun) >= (automations[adr].runhours*3600)) {  //86400=24hrs, 3600=1hr, 7200=2hr, 10800=3rs, 14400=4hrs 21600=6hrs, 43200=12hrs, 64800=18\r\n                    if(automations[adr].day == 7 && ((block.timestamp - automations[adr].dayrun) >= (24*3600))) {\r\n                        automations[adr].day = 1;\r\n                        automations[adr].lastrun = automations[adr].lastrun + (automations[adr].runhours*3600);\r\n                        automations[adr].dayrun = automations[adr].dayrun + (24*3600);\r\n                        sellAutoQubic(adr);\r\n                    }\r\n                    else {\r\n                        if(automations[adr].day<7) {\r\n                            compoundAutoQubic(adr,true);\r\n                        }\r\n                        if((block.timestamp - automations[adr].dayrun) >= (24*3600)) {\r\n                            automations[adr].day++;\r\n                            automations[adr].dayrun = automations[adr].dayrun + (24*3600);\r\n                        }\r\n                        automations[adr].lastrun = automations[adr].lastrun + (automations[adr].runhours*3600);\r\n                    }\r\n                }\r\n            }\r\n            iterations++;\r\n        }\r\n    }    \r\n\r\n    function CHANGE_TIERBONUS(uint256 dh, uint256 d,uint256 ph, uint256 p,uint256 g) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        diamondhonorbonus = dh;\r\n        diamondbonus = d;\r\n        platinumhonorbonus = ph;\r\n        platinumbonus = p;\r\n        goldbonus = g;\r\n    }\r\n\r\n    function CHANGE_TIERS(uint256 dh, uint256 d,uint256 ph, uint256 p,uint256 g) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        diamondhonorvalue = dh;\r\n        diamondvalue = d;\r\n        platinumhonorvalue = ph;\r\n        platinumvalue = p;\r\n        goldvalue = g;\r\n    }\r\n\r\n    function CHANGE_QUANTIC(IBEP20 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n         quantic = value;\r\n    }\r\n\r\n    /** wallet addresses setters **/\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        owner = value;\r\n    }\r\n\r\n    function CHANGE_BB_WALLET(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        bbadr = value;\r\n    }\r\n\r\n    function CHANGE_DEV_WALLET(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        devadr = value;\r\n    }\r\n\r\n    function CHANGE_MKT_WALLET(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        mktadr = value;\r\n    }\r\n\r\n    function CHANGE_AUTO_WALLET(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        autoadr = value;\r\n    }\r\n\r\n    /** percentage setters, MAIN TAX CANNOT BE SET HIGHER THAN 6% **/\r\n\r\n    // 2592000 - 3%, 2160000 - 4%, 1728000 - 5%, 1440000 - 6%, 1200000 - 7%, 1080000 - 8%\r\n    // 959000 - 9%, 864000 - 10%, 720000 - 12%, 575424 - 15%, 540000 - 16%, 479520 - 18%\r\n    \r\n    function PRC_QUBIC_TO_HIRE_1MINERS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 479520 && value <= 2592000); /** min 3% max 12%**/\r\n        QUBIC_TO_HIRE_1MINERS = value;\r\n    }\r\n\r\n    function PRC_TAX(uint256 t, uint256 b, uint256 d, uint256 m) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(b+d+m <= 60); /** 6% max **/\r\n        TAX = t;\r\n        BBTAX = b;\r\n        DEVTAX = d;\r\n        MKTTAX = m;\r\n    }    \r\n\r\n    function PRC_REFERRAL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        REFERRAL = value;\r\n    }\r\n\t\r\n\t  \r\n    function SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        COMPOUND_FOR_NO_TAX_WITHDRAWAL = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND_BONUS_MAX_TIMES(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value <= 30);\r\n        COMPOUND_BONUS_MAX_TIMES = value;\r\n    }\r\n\r\n    function BONUS_COMPOUND_STEP(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        COMPOUND_STEP = value * 60 * 60;\r\n    }\r\n\r\n\t    function SET_WITHDRAW_COOLDOWN(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value <= 24);\r\n        WITHDRAW_COOLDOWN = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WALLET_DEPOSIT_LIMIT(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        require(value >= 20);  /** 20k busd minimum cap **/\r\n        WALLET_DEPOSIT_LIMIT = value * 1e18;\r\n    }\r\n\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bbadr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devadr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mktadr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_autoadr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"}],\"name\":\"ADD_AUTOMATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnership\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"ADD_PARTNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_COMPOUND_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_AUTO_WALLET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_BB_WALLET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_DEV_WALLET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_MKT_WALLET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnership\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"CHANGE_PARTNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_QUANTIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ph\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"}],\"name\":\"CHANGE_TIERBONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ph\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"}],\"name\":\"CHANGE_TIERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"Compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEVTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_QUBIC_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_QUBIC_DIVISOR_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKTTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_QUBIC_TO_HIRE_1MINERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_REFERRAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"PRC_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUBIC_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_AUTOMATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnership\",\"type\":\"address\"}],\"name\":\"REMOVE_PARTNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WALLET_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoadr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runhours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayrun\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastrun\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbadr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateQubicBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateQubicBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qubic\",\"type\":\"uint256\"}],\"name\":\"calculateQubicSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qubic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateQubicSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devadr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutomateCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBonusPartnership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBonusQuantic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyQubic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartnershipCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getQuanticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getQubicSinceLastCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getQubicYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedQubic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCompound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralQubicRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketQubic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mktadr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runAutomate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_BUSD\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedQubic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCompound\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralQubicRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"verifyPartnership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StableFuel", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006fbe719b246723fae4e2d2ea920fe578f9bb4ce70000000000000000000000006fbe719b246723fae4e2d2ea920fe578f9bb4ce70000000000000000000000006fbe719b246723fae4e2d2ea920fe578f9bb4ce70000000000000000000000006fbe719b246723fae4e2d2ea920fe578f9bb4ce7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdc7d6244b4ca900722174235aa49db4e9de89c63c78a4d57ffa1efebcd55bfe"}