{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Contract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ncontract TokenPresale {\\n    IBEP20 public token;\\n    IBEP20 public usdt = IBEP20(0x55d398326f99059fF775485246999027B3197955);\\n    IBEP20 public busd = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n\\n    address public owner;\\n    address public projectWallet;\\n    bool public isSaleActive = false;\\n    uint256 public stage;\\n    uint256 public minimumPurchaseAmount = 0;\\n    uint256[] internal prices = [666666, 333333, 166667];\\n\\n    event TokensPurchased(\\n        address indexed buyer,\\n        uint256 amountSpent,\\n        uint256 tokensReceived,\\n        uint256 pricePerToken\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    modifier saleIsActive() {\\n        require(isSaleActive, \\\"Sale is not active\\\");\\n        _;\\n    }\\n\\n    constructor(address _token, address _projectWallet) {\\n        token = IBEP20(_token);\\n        owner = msg.sender;\\n        projectWallet = _projectWallet;\\n        stage = 0;\\n    }\\n\\n    function startSale() external onlyOwner {\\n        isSaleActive = true;\\n    }\\n\\n    function stopSale() external onlyOwner {\\n        isSaleActive = false;\\n    }\\n\\n    function setMinimumPurchaseAmount() external onlyOwner {\\n        minimumPurchaseAmount = 49;\\n    }\\n\\n    function buyWithUSDT(uint256 usdtAmount) public saleIsActive {\\n        usdtAmount *= 1e18;\\n        require(\\n            usdtAmount >= minimumPurchaseAmount * 1e18,\\n            \\\"Purchase amount too low\\\"\\n        );\\n        require(stage < prices.length, \\\"Presale has ended\\\");\\n        uint256 tokensToBuy = usdtAmount * prices[stage];\\n        require(\\n            token.balanceOf(address(this)) >= tokensToBuy,\\n            \\\"Not enough tokens left for sale\\\"\\n        );\\n\\n        usdt.transferFrom(msg.sender, projectWallet, usdtAmount);\\n        token.transfer(msg.sender, tokensToBuy);\\n\\n        emit TokensPurchased(\\n            msg.sender,\\n            usdtAmount,\\n            tokensToBuy,\\n            prices[stage]\\n        );\\n    }\\n\\n    function buyWithBUSD(uint256 busdAmount) public saleIsActive {\\n        busdAmount *= 1e18;\\n        require(\\n            busdAmount >= minimumPurchaseAmount * 1e18,\\n            \\\"Purchase amount too low\\\"\\n        );\\n        require(stage < prices.length, \\\"Presale has ended\\\");\\n        uint256 tokensToBuy = busdAmount * prices[stage];\\n        require(\\n            token.balanceOf(address(this)) >= tokensToBuy,\\n            \\\"Not enough tokens left for sale\\\"\\n        );\\n\\n        busd.transferFrom(msg.sender, projectWallet, busdAmount);\\n        token.transfer(msg.sender, tokensToBuy);\\n\\n        emit TokensPurchased(\\n            msg.sender,\\n            busdAmount,\\n            tokensToBuy,\\n            prices[stage]\\n        );\\n    }\\n\\n    function nextStage() public onlyOwner {\\n        require(stage < prices.length, \\\"Presale already at final stage\\\");\\n        stage++;\\n    }\\n\\n    // Function to burn unsold tokens after the sale ends\\n    function burnUnsoldTokens() public onlyOwner {\\n        require(\\n            !isSaleActive && stage == prices.length,\\n            \\\"Sale is not yet ended\\\"\\n        );\\n        uint256 amount = token.balanceOf(address(this));\\n        token.transfer(0x000000000000000000000000000000000000dEaD, amount); // Sending to the BNB burn address\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPurchaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMinimumPurchaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenPresale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000834c108a211f725f6faa327f7c386d8f3a770dbe00000000000000000000000064efe0cd586d6fed2f2782c1b4e62517dd2d4b90", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}