{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns(uint256);\r\n  function transfer(address recipient, uint256 amount) external returns(bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n        uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n \r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract LiquidityManagerRLXT is IERC20, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  IERC20 public token;\r\n  uint256 public rlxt_rate;\r\n\r\n  uint256 public customerId;\r\n  uint256 public buyId;\r\n\r\n  struct User {\r\n      address customer_address;\r\n      uint256 totalDeposit;\r\n      uint256 token_from_sc;\r\n      uint256 totalWithdraw;\r\n  }\r\n\r\n  struct Buyhistory {\r\n      address cust_address;\r\n      uint256 bnb_amt;\r\n      uint256 token_to_user;\r\n  }\r\n\r\n  \r\n  mapping(uint256 => Buyhistory) public buyRecord;\r\n  mapping(uint256 => User) public userRegister;\r\n  mapping(address => uint256) public addressToUserId;\r\n  mapping(address => bool) public isRegistered;\r\n\r\n  constructor(address token_address) {\r\n    token = IERC20(token_address);\r\n    isRegistered[address(this)] = true;\r\n    rlxt_rate = 0.001 ether;\r\n  }\r\n\r\n  function balanceOf(address account) external view override returns(uint256) {\r\n  // implementation of the balanceOf function\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns(bool) {\r\n  // implementation of the transfer function\r\n  }\r\n\r\n  function withdrawCollection(address payable recevier, uint256 amount) public onlyOwner {\r\n    recevier.transfer(amount);\r\n  }\r\n\r\n  function register() public returns (uint256 custid) {\r\n    require(!isRegistered[msg.sender], \"User is already registered\");\r\n\r\n    custid = ++customerId;\r\n    userRegister[custid].customer_address = msg.sender;\r\n    userRegister[custid].totalDeposit = 0;\r\n    userRegister[custid].token_from_sc = 0;\r\n    userRegister[custid].totalWithdraw = 0;\r\n\r\n    addressToUserId[msg.sender] = custid;\r\n    \r\n    isRegistered[msg.sender] = true;\r\n  }\r\n\r\n\r\n  function BuyRlxt () payable public returns (uint256 id) {\r\n    require(isRegistered[msg.sender], \"User is not registered.\");\r\n\r\n    uint256 token_amt = msg.value.mul(1 ether).div(rlxt_rate);\r\n\r\n    require(IERC20(token).balanceOf(address(this)) >= token_amt, \"Unable to buy RLXT.\");\r\n\r\n    IERC20(token).transfer(msg.sender, token_amt);\r\n\r\n    id = ++buyId;\r\n    buyRecord[id].cust_address = msg.sender;\r\n    buyRecord[id].bnb_amt = msg.value;\r\n    buyRecord[id].token_to_user = token_amt;\r\n\r\n    uint256 userId = addressToUserId[msg.sender];\r\n    userRegister[userId].totalDeposit += msg.value;\r\n    userRegister[userId].token_from_sc += token_amt;\r\n\r\n  }\r\n\r\n  function updateRate(uint256 new_rate) public onlyOwner {\r\n     rlxt_rate = new_rate;\r\n  }\r\n\r\n  function bnbAmount() public view returns(uint256) {\r\n     return address(this).balance;\r\n  }\r\n\r\n  function update_sellvalue(address user_address, uint256 token_amt, uint256 bnb_amt) public onlyOwner {\r\n    require(isRegistered[user_address], \"User is not registered.\");\r\n\r\n    uint256 userId = addressToUserId[user_address];\r\n    userRegister[userId].token_from_sc -= token_amt;\r\n    userRegister[userId].totalWithdraw += bnb_amt;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyRlxt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cust_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_to_user\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"custid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rlxt_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnb_amt\",\"type\":\"uint256\"}],\"name\":\"update_sellvalue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"customer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_from_sc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiquidityManagerRLXT", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d899ebded30f1f2939593c6d3a9fc70d0201280c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7960e1b4e50351df0c37346f39cd86c70df23213d127b060030b5454fc8ebf8b"}