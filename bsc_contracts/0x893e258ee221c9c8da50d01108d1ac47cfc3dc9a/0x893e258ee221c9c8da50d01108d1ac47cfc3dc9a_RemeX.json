{"SourceCode": "pragma solidity 0.8.6;\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n/*\r\n    /$$$$$$$                                           /$$   /$$\r\n   | $$__  $$                                         | $$  / $$\r\n   | $$  \\ $$   /$$$$$$    /$$$$$$/$$$$     /$$$$$$   |  $$/ $$/\r\n   | $$$$$$$/  /$$__  $$  | $$_  $$_  $$   /$$__  $$   \\  $$$$/ \r\n   | $$__  $$ | $$$$$$$$  | $$ \\ $$ \\ $$  | $$$$$$$$    >$$  $$ \r\n   | $$  \\ $$ | $$_____/  | $$ | $$ | $$  | $$_____/   /$$/\\  $$\r\n   | $$  | $$ |  $$$$$$$  | $$ | $$ | $$  |  $$$$$$$  | $$  \\ $$\r\n   |__/  |__/  \\_______/  |__/ |__/ |__/   \\_______/  |__/  |__/\r\n\r\n*/\r\n\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    \r\n  constructor () { }\r\n  \r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n  \r\n  function _msgData() internal view returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n  \r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract RemeX is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => bool) private _noReward;\r\n  mapping (address => bool) private _noFeeFrom;\r\n  mapping (address => bool) private _noFeeTo;\r\n  mapping (address => uint256) private _privateSaleAmount;\r\n  mapping (address => bool) private _preSaleMamber;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint256 private _totalReward;\r\n  uint256 private _totalNoReward;\r\n  uint256 private _rewardCumulation;\r\n  uint256 private _rewardCumulationTime;\r\n  uint256 private _lastRewardCumulationTime;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n  address public _developmentFundsAddress;\r\n  address public _fundRaisingAddress;\r\n  address public _liquidityPoolAddress;\r\n\r\n  uint256 public _privateSaleStartTime;\r\n  uint256 public _preSaleStartTime;\r\n  uint256 public _publicStartTime;\r\n\r\n  uint256 public _rewardMilipercent = 3000;\r\n  uint256 public _developmentMilipercent = 3000;\r\n  uint256 public _fundRaisingMilipercent = 1000;\r\n  uint256 public _liquidityMilipercent = 3000;\r\n\r\n  constructor() {\r\n    _name = \"RemeX\";\r\n    _symbol = \"RMX\";\r\n    _decimals = 9;\r\n    _totalSupply = 10**15 * 10**9;\r\n    _totalReward = 0;\r\n    _totalNoReward = 0;\r\n    _rewardCumulation = 0;\r\n    _rewardCumulationTime = 0;\r\n    _lastRewardCumulationTime = block.timestamp;\r\n    _balances[msg.sender] = _totalSupply;\r\n    _developmentFundsAddress = msg.sender;\r\n    _fundRaisingAddress = msg.sender;\r\n    _liquidityPoolAddress = msg.sender;\r\n    _privateSaleStartTime = block.timestamp;\r\n    _preSaleStartTime = _privateSaleStartTime + 30 * 86400;\r\n    _publicStartTime = _preSaleStartTime + 30 * 86400;\r\n  \r\n    _noReward[address(0)] = true;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  function getOwner() external override view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function decimals() external override view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external override view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external override view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external override view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) external override view returns (uint256) {\r\n    return _getBalanceIncReward(account);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 amount) external returns (bool) {\r\n    _burn(_msgSender(), amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external override view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n \r\n  /**\r\n    * Calculates fee depending on public sale start time for presale members.\r\n    *\r\n    * @param sender Address of amount sender.   \r\n    * \r\n    * @return Calculated fee for presale member.\r\n    */ \r\n  function totalFeeMultiplierForSender(address sender, uint256 timestamp) private view returns(uint256) {\r\n    if (_preSaleMamber[sender]) {\r\n      uint256 publicSaleFeeEnds = _publicStartTime + 20 * 86400; // 20 days\r\n      if (timestamp < publicSaleFeeEnds) {\r\n        return 10 + (publicSaleFeeEnds - timestamp) / 86400; // 10 + ramaining days %\r\n      }\r\n    }\r\n    return 10;\r\n  }\r\n  \r\n  /**\r\n    * Checks if private presale member dont extended limit of possible amount transfer, \r\n    * depending on yearly quarters.\r\n    *\r\n    * @param sender Address of amount sender.  \r\n    * @param amount Amount of token which sender wants to transfer.\r\n    * \r\n    * @return boolean If selected amount is transferable\r\n    */ \r\n  function checkIfBalanceNotFrozen(address sender, uint256 amount, uint256 timestamp) private view returns(bool) {\r\n    if (_privateSaleAmount[sender] > 0) {\r\n      uint256 quarter = (timestamp - _publicStartTime) / 7776000; // 90 days\r\n      if (quarter < 3) {\r\n        uint frozen = _privateSaleAmount[sender] * (3 - quarter) / 4;\r\n        return (_getBalanceIncReward(sender) - frozen >=  amount);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Amount transfer function between 2 addresses after the conditions are met.\r\n    * Conditions: \r\n    *   1) Sender must not be burn address.\r\n    *   2) Recipient must not be burn address.\r\n    *   3) Amount must be higher then 0.\r\n    *   4) Contract must be in live or sender must be owner or recipient must be the owner.\r\n    *   5) Checks if private presale member dont extended limit of possible amount transfer, \r\n    *     depending on yearly quarters.\r\n    *   6) Transfer amount must not exceed total balanse of sender.\r\n    *\r\n    * Additionaly only owner can transfer amount before public start date.\r\n    * Fee is separated depending on imposed percentages in addresses \r\n    * (Development, Fundraising, Liquidity) and goes as reward for holders.\r\n    *\r\n    * @param sender Address of amount sender.  \r\n    * @param recipient Address of amount reciever.\r\n    * @param amount Amount of token which sender wants to transfer. \r\n    */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"transfer from the zero address\");\r\n    require(recipient != address(0), \"transfer to the zero address\");\r\n    require(amount > 0, \"transfer amount must be greater than zero\");\r\n    require(block.timestamp >= _publicStartTime || sender == owner() || recipient == owner());\r\n    require(checkIfBalanceNotFrozen(sender, amount, block.timestamp)); // private sale\r\n    \r\n    uint256 noRewardAmount = _deductBalanceIncReward(sender, amount);\r\n    \r\n    if (!_noFeeFrom[sender] && !_noFeeTo[recipient]) {\r\n      uint256 deductTotal = 0;\r\n      uint256 totalFeeMultiplier = totalFeeMultiplierForSender(sender, block.timestamp); // presale\r\n      deductTotal = deductTotal.add(_deductDevelopmentFund(sender, noRewardAmount, totalFeeMultiplier));\r\n      deductTotal = deductTotal.add(_deductFundRaising(sender, noRewardAmount, totalFeeMultiplier));\r\n      deductTotal = deductTotal.add(_deductLiquidityPool(sender, noRewardAmount, totalFeeMultiplier));\r\n      deductTotal = deductTotal.add(_deductReward(noRewardAmount, totalFeeMultiplier));\r\n      noRewardAmount = noRewardAmount.sub(deductTotal);\r\n    }\r\n\r\n    amount = _addBalanceExcReward(recipient, noRewardAmount);\r\n    emit Transfer(sender, recipient, amount);\r\n\r\n    if (sender == owner() && block.timestamp < _publicStartTime) {\r\n      if (block.timestamp < _preSaleStartTime) {\r\n         _privateSaleAmount[recipient] = _privateSaleAmount[recipient].add(amount);\r\n      } else {\r\n        _preSaleMamber[recipient] = true;\r\n      }\r\n    }\r\n    \r\n    if (_lastRewardCumulationTime + _rewardCumulationTime <= block.timestamp) {\r\n      _lastRewardCumulationTime = _lastRewardCumulationTime + _rewardCumulationTime;\r\n      _totalReward = _totalReward + _rewardCumulation;\r\n      _rewardCumulation = 0;   \r\n    } \r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"approve from the zero address\");\r\n    require(spender != address(0), \"approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n  \r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"burn from the zero address\");\r\n\r\n    amount = _addBalanceExcReward(address(0), _deductBalanceIncReward(account, amount));\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n    * Calculates amount which must be transfered to development address.\r\n    *\r\n    * @param amount Transaction token amount.\r\n    * @param totalFeeMultiplier Coefficient for adjusting presale fee. \r\n    * \r\n    * @return deductAmount Amount for development address.\r\n    */ \r\n  function _deductDevelopmentFund(address sender, uint256 amount, uint256 totalFeeMultiplier) private returns(uint256) {\r\n    uint256 deductAmount = amount.mul(_developmentMilipercent).mul(totalFeeMultiplier).div(1000000);\r\n    emit Transfer(sender, _developmentFundsAddress, _addBalanceExcReward(_developmentFundsAddress, deductAmount));\r\n    return deductAmount;\r\n  }\r\n\r\n  /**\r\n    * Calculates amount which must be transfered to fundraising address.\r\n    *\r\n    * @param amount Transaction token amount.\r\n    * @param totalFeeMultiplier Coefficient for adjusting presale fee. \r\n    * \r\n    * @return deductAmount Amount for fundraising address.\r\n    */ \r\n  function _deductFundRaising(address sender, uint256 amount, uint256 totalFeeMultiplier) private returns(uint256) {\r\n    uint256 deductAmount = amount.mul(_fundRaisingMilipercent).mul(totalFeeMultiplier).div(1000000);\r\n    emit Transfer(sender, _fundRaisingAddress, _addBalanceExcReward(_fundRaisingAddress, deductAmount));\r\n    return deductAmount;\r\n  }\r\n\r\n  /**\r\n    * Calculates amount which must be transfered to liquidity.\r\n    *\r\n    * @param amount Transaction token amount.\r\n    * @param totalFeeMultiplier Coefficient for adjusting presale fee. \r\n    * \r\n    * @return deductAmount Amount for liquidity.\r\n    */ \r\n  function _deductLiquidityPool(address sender, uint256 amount, uint256 totalFeeMultiplier) private returns(uint256) {\r\n    uint256 deductAmount = amount.mul(_liquidityMilipercent).mul(totalFeeMultiplier).div(1000000);\r\n    emit Transfer(sender, _liquidityPoolAddress, _addBalanceExcReward(_liquidityPoolAddress, deductAmount));\r\n    return deductAmount;\r\n  }\r\n  \r\n  /**\r\n    * Calculates amount which must be transfered to holder rewards.\r\n    *\r\n    * @param amount Transaction token amount.\r\n    * @param totalFeeMultiplier Coefficient for adjusting presale fee. \r\n    * \r\n    * @return deductAmount Amount for holder rewards.\r\n    */ \r\n  function _deductReward(uint256 amount, uint256 totalFeeMultiplier) private returns(uint256) {\r\n    uint256 deductAmount = amount.mul(_rewardMilipercent).mul(totalFeeMultiplier).div(1000000);\r\n    _rewardCumulation = _rewardCumulation.add(deductAmount);\r\n    return deductAmount;\r\n  }\r\n  \r\n  /**\r\n    * Inteface to add reward to balance.\r\n    *\r\n    * @param amount Balance without reward.\r\n    * \r\n    * @return Balance amount including reward.\r\n    */ \r\n  function _incReward(uint256 amount) private view returns(uint256) {\r\n     return amount * (_totalSupply - _totalNoReward) / (_totalSupply - _totalNoReward - _totalReward);\r\n  }\r\n\r\n\r\n  /**\r\n    * Inteface to deduct reward from balance.\r\n    *\r\n    * @param amount Balance including reward.\r\n    * \r\n    * @return Balance amount excluding reward.\r\n    */ \r\n  function _excReward(uint256 amount) private view returns(uint256) {\r\n     return amount * (_totalSupply - _totalNoReward - _totalReward) / (_totalSupply - _totalNoReward);\r\n  }\r\n\r\n  /**\r\n    * Interface to get balance amount including reward.\r\n    *\r\n    * @param account Address of user.\r\n    * \r\n    * @return Balance amount including reward.\r\n    */ \r\n  function _getBalanceIncReward(address account) private view returns(uint256) {\r\n    if (!_noReward[account]) {\r\n      return _incReward(_balances[account]);\r\n    }\r\n    return _balances[account];\r\n  }\r\n  \r\n  /**\r\n    * Interface to deduct amount from address considering reward.\r\n    *\r\n    * @param account Address of user.\r\n    * @param amount Amount of tokens including reward.\r\n    * \r\n    * @return Deducted tokens excluding reward.\r\n    */\r\n  function _deductBalanceIncReward(address account, uint256 amount) private returns(uint256) {\r\n    if (!_noReward[account]) {\r\n      amount = _excReward(amount);\r\n      _balances[account] = _balances[account].sub(amount, \"transfer amount exceeds balance\");\r\n      return amount;\r\n    } else {\r\n      _balances[account] = _balances[account].sub(amount, \"transfer amount exceeds balance\");\r\n      _totalReward = _totalReward + amount * _totalReward / (_totalSupply - _totalNoReward);\r\n      _totalNoReward = _totalNoReward.sub(amount);\r\n      return _excReward(amount);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * Interface to add amount to address excluding reward.\r\n    *\r\n    * @param account Address of user.\r\n    * @param amount Amount of tokens excluding rewards.\r\n    * \r\n    * @return Add tokens including reward.\r\n    */\r\n  function _addBalanceExcReward(address account, uint256 amount) private returns(uint256) {\r\n    if (!_noReward[account]) {\r\n      _balances[account] = _balances[account].add(amount);\r\n      amount = _incReward(amount);\r\n    } else {\r\n      amount = _incReward(amount);\r\n      _totalReward = _totalReward.sub(amount * _totalReward / (_totalSupply - _totalNoReward));\r\n      _totalNoReward = _totalNoReward + amount;\r\n      _balances[account] = _balances[account].add(amount);\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n    * Interface to set address for development funds.\r\n    *\r\n    * @param account Address for collecting development funds.\r\n    * \r\n    * @return boolean.\r\n    */\r\n  function setDevelopmentFundsAddress(address account) external onlyOwner returns (bool) {\r\n    _developmentFundsAddress = account;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set address for fundraising tokens.\r\n    *\r\n    * @param account Address for collecting fundraising tokens.\r\n    * \r\n    * @return boolean.\r\n    */\r\n  function setFundRaisingAddress(address account) external onlyOwner returns (bool) {\r\n    _fundRaisingAddress = account;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set address for liquidity pool tokens.\r\n    *\r\n    * @param account Address for collecting liquidity pool tokens.\r\n    * \r\n    * @return boolean.\r\n    */\r\n  function setLiquidityPoolAddress(address account) external onlyOwner returns (bool) {\r\n    _liquidityPoolAddress = account;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Function for checking fee threshold. \r\n    *  1) Summary of all fees must not exceed 10%.\r\n    *  2) Fee for development funds must not exceed 5%.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function checkFeeThreshold() private view returns(bool) {\r\n    if (_rewardMilipercent + _developmentMilipercent + _fundRaisingMilipercent + _liquidityMilipercent > 10000) {\r\n      return false;\r\n    }\r\n    if (_developmentMilipercent > 5000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set fee percentage for rewards.\r\n    * \r\n    * @param value Percentage in milipercents.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function setRewardMilipercent(uint256 value) external onlyOwner returns (bool) {\r\n    _rewardMilipercent = value;\r\n    require(checkFeeThreshold());\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set fee percentage for development funds.\r\n    * \r\n    * @param value Percentage in milipercents.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function setDevelopmentMilipercent(uint256 value) external onlyOwner returns (bool) {\r\n    _developmentMilipercent = value;\r\n    require(checkFeeThreshold());\r\n    return true; \r\n  }\r\n\r\n  /**\r\n    * Interface to set fee percentage for fundraising.\r\n    * \r\n    * @param value Percentage in milipercents.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function setFundRaisingMilipercent(uint256 value) external onlyOwner returns (bool) {\r\n    _fundRaisingMilipercent = value;\r\n    require(checkFeeThreshold());\r\n    return true;   \r\n  }\r\n\r\n  /**\r\n    * Interface to set fee percentage for liquidity pool.\r\n    * \r\n    * @param value Percentage in milipercents.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function setLiquidityMilipercent(uint256 value) external onlyOwner returns (bool) {\r\n    _liquidityMilipercent = value;\r\n    require(checkFeeThreshold());\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set reward cumulation time interval.\r\n    * \r\n    * @param value Time interval.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function setRewardCumulationTime(uint256 value) external onlyOwner returns (bool) {\r\n    _rewardCumulationTime = value;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to exclude address from fee during transfer.\r\n    * \r\n    * @param account Address of sender.\r\n    * @param value Boolean.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function excludeIncludeFeeFrom(address account, bool value) external onlyOwner returns (bool) {\r\n    _noFeeFrom[account] = value;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to exclude address from fee during recieve.\r\n    * \r\n    * @param account Address of recipient.\r\n    * @param value Boolean.\r\n    * \r\n    * @return boolean\r\n    */\r\n  function excludeIncludeFeeTo(address account, bool value) external onlyOwner returns (bool) {\r\n    _noFeeTo[account] = value;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n    * Interface to exclude address from rewards.\r\n    * \r\n    * @param account Address.\r\n    *\r\n    * @return boolean\r\n    */\r\n  function excludeFromReward(address account) external onlyOwner returns (bool) {\r\n    require(!_noReward[account]);\r\n    _noReward[account] = true;\r\n    uint256 balance = _incReward(_balances[account]);\r\n    _totalReward = _totalReward.sub(balance - _balances[account]);\r\n    _totalNoReward = _totalNoReward + balance;\r\n    _balances[account] = balance;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set private pre sale duration in hours.\r\n    * \r\n    * @param hr Hours.\r\n    *\r\n    * @return boolean\r\n    */\r\n  function setPrivateSaleHours(uint256 hr) external onlyOwner returns (bool) {\r\n    require(block.timestamp < _preSaleStartTime);\r\n    uint256 preSaleLength = _publicStartTime - _preSaleStartTime;\r\n    _preSaleStartTime = _privateSaleStartTime + hr * 3600; \r\n    _publicStartTime = _preSaleStartTime + preSaleLength;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Interface to set public pre sale duration in hours.\r\n    * \r\n    * @param hr Hours.\r\n    *\r\n    * @return boolean\r\n    */\r\n  function setPreSaleHours(uint256 hr) external onlyOwner returns (bool) {\r\n    require(block.timestamp < _publicStartTime);\r\n    _publicStartTime = _preSaleStartTime + hr * 3600;\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_developmentFundsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developmentMilipercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundRaisingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundRaisingMilipercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityMilipercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_privateSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardMilipercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeIncludeFeeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeIncludeFeeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevelopmentFundsAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDevelopmentMilipercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFundRaisingAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFundRaisingMilipercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLiquidityMilipercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hr\",\"type\":\"uint256\"}],\"name\":\"setPreSaleHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hr\",\"type\":\"uint256\"}],\"name\":\"setPrivateSaleHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRewardCumulationTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRewardMilipercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RemeX", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20de0920f016e8fa749ec833c77010d2cf81c975d8a7cd54bc6930a2084c2820"}