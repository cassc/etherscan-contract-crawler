{"SourceCode": "// File: @openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\Pausable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\interfaces\\IERC20.sol\r\n\r\n// File: contracts\\Presale.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//import \"./BrnMetaverse.sol\";\r\n/**\r\n * @title TokenPresale\r\n * TokenPresale allows investors to make\r\n * token purchases and assigns them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n\r\ncontract Presale is Pausable, Ownable {\r\n    /**\r\n     * crowdsale constructor\r\n     * @param _wallet who receives invested ether\r\n     * @param _cap above which the crowdsale is closed\r\n     */\r\n\r\n    constructor(\r\n        address _priceFeedAddress,\r\n        address _tokenAddress,\r\n        address payable _wallet,\r\n        uint256 _cap // 50,000,000 BRN\r\n    ) {\r\n        require(_wallet != address(0));\r\n        require(_tokenAddress != address(0));\r\n        require(_priceFeedAddress != address(0));\r\n        require(_cap > 0);\r\n        TokenAddress = _tokenAddress;\r\n        priceFeedAddress = _priceFeedAddress;\r\n\r\n        wallet = _wallet;\r\n        cap = _cap * (10**18); //cap in tokens base units (=1000000 tokens)\r\n        phase1Cap = (cap * 14) / 100;\r\n        phase2Cap = (cap * 36) / 100;\r\n        phase3Cap = (cap * 50) / 100;\r\n    }\r\n\r\n    mapping(address => uint256) public phase1Balance;\r\n    mapping(address => uint256) public phase2Balance;\r\n    mapping(address => uint256) public phase3Balance;\r\n\r\n    mapping(address => uint256) public phase1USDAmount;\r\n    mapping(address => uint256) public phase2USDAmount;\r\n    mapping(address => uint256) public phase3USDAmount;\r\n\r\n    mapping(address => uint256) public Contribution;\r\n\r\n    address priceFeedAddress;\r\n\r\n    uint256 public phase1Start = 0;\r\n    uint256 public phase1End = 0;\r\n    uint256 public phase1LockPeriod = 24 weeks;\r\n    uint256 public phase2Start = 0;\r\n    uint256 public phase2End = 0;\r\n    uint256 public phase2LockPeriod = 16 weeks;\r\n    uint256 public phase3Start = 0;\r\n    uint256 public phase3End = 0;\r\n    uint256 public phase3LockPeriod = 8 weeks;\r\n\r\n    // The token being sold\r\n    address immutable TokenAddress;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    //amount of wei raised \r\n    uint256 public weiRaised; \r\n\r\n    // amount of tokens sold in each phase\r\n    uint256 public tokenSoldPhase1;\r\n    uint256 public tokenSoldPhase2;\r\n    uint256 public tokenSoldPhase3;\r\n\r\n    uint256 public totalTokensOwnedByInvestors;\r\n\r\n    // cap above which the crowdsale is ended\r\n    uint256 public cap;\r\n    uint256 public phase1Cap;\r\n    uint256 public phase2Cap;\r\n    uint256 public phase3Cap;\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokenWithdrawal(address indexed beneficiary, uint256 amount);\r\n\r\n    function startNextPhase() external onlyOwner {\r\n        if (phase1Start == phase2Start && phase3Start == phase2Start) {\r\n            phase1Start = block.timestamp;\r\n            phase1End = phase1Start + 15 days;\r\n            phase2Start = phase1End;\r\n            phase2End = phase2Start + 15 days;\r\n            phase3Start = phase2End;\r\n            phase3End = phase3Start + 15 days;\r\n        } else if (\r\n            block.timestamp > phase1Start && block.timestamp < phase2Start\r\n        ) {\r\n            require(\r\n                tokenSoldPhase1 == phase1Cap,\r\n                \"Phase 1 cap has not been exhausted\"\r\n            );\r\n            phase1End = block.timestamp;\r\n            phase2Start = phase1End;\r\n            phase2End = phase2Start + 15 days;\r\n            phase3Start = phase2End;\r\n            phase3End = phase3Start + 15 days;\r\n        } else if (\r\n            block.timestamp > phase2Start && block.timestamp < phase3Start\r\n        ) {\r\n            require(\r\n                tokenSoldPhase2 == phase2Cap,\r\n                \"Phase 2 cap has not been exhausted\"\r\n            );\r\n            phase2End = block.timestamp;\r\n            phase3Start = phase2End;\r\n            phase3End = phase3Start + 15 days;\r\n        } else if (\r\n            block.timestamp > phase3Start && block.timestamp < phase3End\r\n        ) {\r\n            require(\r\n                tokenSoldPhase3 == phase3Cap,\r\n                \"Phase 2 cap has not been exhausted\"\r\n            );\r\n            phase3End = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen() {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(block.timestamp >= phase1Start && block.timestamp <= phase3End);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function phase1HasClosed() public view returns (bool) {\r\n        return block.timestamp > phase2Start;\r\n    }\r\n\r\n    function phase2HasClosed() public view returns (bool) {\r\n        return block.timestamp > phase2Start;\r\n    }\r\n\r\n    function presaleHasClosed() public view returns (bool) {\r\n        return block.timestamp > phase3End;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period for withdrawal has reach.\r\n     * @return whether the period for withdrawal has reach\r\n     */\r\n    function phase1WithdrawalReach() public view returns (bool) {\r\n        return block.timestamp > phase1Start + phase1LockPeriod;\r\n    }\r\n\r\n    function phase2WithdrawalReach() public view returns (bool) {\r\n        return block.timestamp > phase2Start + phase2LockPeriod;\r\n    }\r\n\r\n    function phase3WithdrawalReach() public view returns (bool) {\r\n        return block.timestamp > phase3Start + phase3LockPeriod;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256, uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            priceFeedAddress\r\n        );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        uint256 decimals = uint256(priceFeed.decimals());\r\n        return (uint256(price), decimals);\r\n    }\r\n\r\n    function coinToUSD(uint256 _amountIn) public view returns (uint256) {\r\n        (uint256 inputTokenPrice, uint256 inputTokenDecimals) = getPrice();\r\n        uint256 value2USD = (_amountIn * inputTokenPrice) /\r\n            10**inputTokenDecimals;\r\n        return value2USD;\r\n    }\r\n\r\n    // fallback function to buy tokens\r\n    receive() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function getPhaseArg()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 phaseCap;\r\n        uint256 tokensSold;\r\n        uint256 pricePerToken;\r\n        if (block.timestamp > phase1Start && block.timestamp < phase2Start) {\r\n            phaseCap = phase1Cap;\r\n            tokensSold = tokenSoldPhase1;\r\n            pricePerToken = 10 * 10**18;\r\n        }\r\n        if (block.timestamp > phase2Start && block.timestamp < phase3Start) {\r\n            phaseCap = phase2Cap;\r\n            tokensSold = tokenSoldPhase2;\r\n            pricePerToken = 20 * 10**18;\r\n        }\r\n        if (block.timestamp > phase3Start && block.timestamp < phase3End) {\r\n            phaseCap = phase3Cap;\r\n            tokensSold = tokenSoldPhase3;\r\n            pricePerToken = 30 * 10**18;\r\n        }\r\n        return (phaseCap, tokensSold, pricePerToken);\r\n    }\r\n\r\n    /**\r\n     * Low level token purchse function\r\n     * @param beneficiary will recieve the tokens.\r\n     */\r\n    function buyTokens(address beneficiary)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        onlyWhileOpen\r\n    {\r\n        require(!presaleHasClosed(), \"The presale is over\");\r\n        require(beneficiary != address(0), \"Zero Address\");\r\n        require(msg.value > 0, \"Empty value\");\r\n\r\n        uint256 amount = coinToUSD(msg.value);\r\n\r\n        uint256 phaseUSDAmount;\r\n\r\n        if (block.timestamp > phase1Start && block.timestamp < phase2Start) {\r\n            phaseUSDAmount = phase1USDAmount[beneficiary];\r\n        }\r\n        if (block.timestamp > phase2Start && block.timestamp < phase3Start) {\r\n            phaseUSDAmount = phase2USDAmount[beneficiary];\r\n        }\r\n        if (block.timestamp > phase3Start && block.timestamp < phase3End) {\r\n            phaseUSDAmount = phase3USDAmount[beneficiary];\r\n        }\r\n\r\n        require(amount >= 10 * 10**18, \"The enter amount is below minimum\");\r\n        require(amount <= 10000 * 10**18, \"The enter amount is above maximum\");\r\n        require(\r\n            amount + phaseUSDAmount <= 10000 * 10**18,\r\n            \"Your total purchase will be above the allowable maximum per wallet!\"\r\n        );\r\n\r\n        (\r\n            uint256 phaseCap,\r\n            uint256 tokensSold,\r\n            uint256 pricePerToken\r\n        ) = getPhaseArg();\r\n\r\n        uint256 tokenAmount = (amount * 100 * 10**18) / pricePerToken;\r\n        require(tokenAmount + tokensSold <= phaseCap, \"Greater than phase cap\");\r\n\r\n        if (block.timestamp > phase1Start && block.timestamp < phase2Start) {\r\n            phase1USDAmount[beneficiary] += amount;\r\n            phase1Balance[beneficiary] += tokenAmount;\r\n            tokenSoldPhase1 += tokenAmount;\r\n        }\r\n        if (block.timestamp > phase2Start && block.timestamp < phase3Start) {\r\n            phase2USDAmount[beneficiary] += amount;\r\n            phase2Balance[beneficiary] += tokenAmount;\r\n            tokenSoldPhase2 += tokenAmount;\r\n        }\r\n        if (block.timestamp > phase3Start && block.timestamp < phase3End) {\r\n            phase3USDAmount[beneficiary] += amount;\r\n            phase3Balance[beneficiary] += tokenAmount;\r\n            tokenSoldPhase3 += tokenAmount;\r\n        }\r\n        Contribution[beneficiary] += msg.value;\r\n        totalTokensOwnedByInvestors += tokenAmount;\r\n\r\n        uint256 weiAmount = msg.value;\r\n        // update weiRaised\r\n        weiRaised = weiRaised + weiAmount;\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n        forwardFunds();\r\n    }\r\n\r\n    function withdrawRemainingTokens() external onlyOwner {\r\n        require(block.timestamp > phase3End);\r\n        uint256 presaleTokenBalance = IERC20(TokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 withdrawableBalance = presaleTokenBalance -\r\n            totalTokensOwnedByInvestors;\r\n        IERC20(TokenAddress).transfer(msg.sender, withdrawableBalance);\r\n    }\r\n\r\n    // withdraw ERC20 Tokens\r\n    function withdrawToken() public whenNotPaused {\r\n        require(\r\n            phase1WithdrawalReach() ||\r\n                phase2WithdrawalReach() ||\r\n                phase3WithdrawalReach(),\r\n            \"No phase withdrawal has reached yet!\"\r\n        );\r\n        uint256 balance;\r\n        if (phase1WithdrawalReach()) {\r\n            balance =\r\n                phase1Balance[msg.sender] +\r\n                phase2Balance[msg.sender] +\r\n                phase3Balance[msg.sender];\r\n            phase1Balance[msg.sender] = 0;\r\n            phase2Balance[msg.sender] = 0;\r\n            phase3Balance[msg.sender] = 0;\r\n        } else if (phase2WithdrawalReach()) {\r\n            balance = phase3Balance[msg.sender] + phase2Balance[msg.sender];\r\n            phase3Balance[msg.sender] = 0;\r\n            phase2Balance[msg.sender] = 0;\r\n        } else if (phase3WithdrawalReach()) {\r\n            balance = phase3Balance[msg.sender];\r\n            phase3Balance[msg.sender] = 0;\r\n        }\r\n\r\n        totalTokensOwnedByInvestors -= balance;\r\n\r\n        IERC20(TokenAddress).transfer(msg.sender, balance);\r\n        emit TokenWithdrawal(msg.sender, balance);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        payable(wallet).transfer(msg.value);\r\n    }\r\n\r\n    function setContactInformation(string memory info) public onlyOwner {\r\n        contactInformation = info;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Contribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"coinToUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseArg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase1Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1Cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1End\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1HasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1LockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase1USDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1WithdrawalReach\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase2Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2Cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2End\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2HasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2LockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase2USDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2WithdrawalReach\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase3Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3Cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3End\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3LockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phase3USDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3WithdrawalReach\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleHasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldPhase1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldPhase2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldPhase3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensOwnedByInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000926ecc7687fcfb296e97a2b4501f41a6f5f8c2140000000000000000000000003d4244f7c70a12cbe6102e31d097b81565fb874a0000000000000000000000000000000000000000000000000000000002faf080", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14cb45e1fdf6d2b008ae7b4dd1f033429192a224ab9e2a6f11b78e0c7e4746a7"}