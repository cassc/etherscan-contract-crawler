{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-09-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-08-29\r\n */\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-08-16\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.8.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File contracts/interface/IUniswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\n// File contracts/interface/IUniswapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapPair {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.8.19;\r\n\r\ncontract AiBabyDoge is ERC20, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public constant MAX_MINT = 10 ** 26;\r\n    uint256 public constant DEL_TIME = 30 days ;\r\n    uint256 public constant MINT_RATIO_THIRTY = 5000;\r\n    uint256 public constant MINT_RATIO_SIXTY = 2500;\r\n    uint256 public constant MINT_RATIO_NINETY = 1250;\r\n    uint256 public constant MINT_RATIO_OTHER = 625;\r\n    uint256 public constant BURN_RATIO = 3;\r\n    uint256 public constant BLOCK_AMOUNT_OF_DAY = 28800;\r\n    address private constant DESTROY = 0x000000000000000000000000000000000000dEaD;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    IUniswapPair public immutable uniswapV2PairUSDT;\r\n    address public usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n    uint256 public buyToUsdtFee = 20;\r\n    uint256 public burnFee= 10;\r\n    uint256 public sellToUsdtFee = 20;\r\n    mapping(address => bool) public ammPairs;\r\n    mapping(address => bool) public isParter;\r\n    mapping(address => uint256) public userTimeOfBurn;\r\n    bool private swapping;\r\n    address public lastAddress = address(0);\r\n    mapping(address => bool) public lpPush;\r\n    mapping(address => uint256) private lpIndex;\r\n\r\n    mapping(address => uint256) public userTimeOfMint;\r\n    uint256 public totalMint;\r\n    mapping(address => bool) public whiteList;\r\n    mapping(address => address) public toFather;\r\n    mapping(address => uint256) public sonToFather;\r\n    mapping(address => address[]) public sonAddress;\r\n    mapping(address => uint256) public haveLpAmount;\r\n    mapping(address => bool) public isExcludedFromFeesVip;\r\n    bool public flags;\r\n    mapping(address => uint256) public addLiqudityInfo;\r\n    address[] public lpUser;\r\n\r\n    address[] public _exAddress;\r\n    mapping(address => bool) private _bexAddress;\r\n    mapping(address => uint256) private _exIndex;\r\n    uint256 public limitAmount = 1000000 ether;\r\n    uint256 public startTime;\r\n   \r\n    address public jdAddress;\r\n    address public fundAddress = address(0xC6c7f835eaCe671d74c3b59f9D87d188639eDd38); \r\n    address public mintAddress = address(0x0E9b25aF324e6613ce3550a857bF83e6700370c3); \r\n\r\n    constructor(address _jdAddress) ERC20(\"AiBaByDoge\", \"AiBaByDoge\") {\r\n        jdAddress = _jdAddress;\r\n        startTime = block.timestamp;\r\n        uint256 total = 42000 * 10 ** decimals();\r\n        _approve(address(this),address(0x10ED43C718714eb63d5aA57B78B54704E256024E),total.mul(10000));\r\n        require(address(this) > usdt, \"small\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapV2PairUSDT = IUniswapPair(\r\n            IUniswapFactory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                usdt\r\n            )\r\n        );\r\n        ammPairs[address(uniswapV2PairUSDT)] = true;\r\n        isExcludedFromFeesVip[mintAddress] = true;\r\n        whiteList[address(this)] = true;\r\n        whiteList[mintAddress] = true;\r\n        setExAddress(address(0x000000000000000000000000000000000000dEaD));\r\n        setExAddress(address(0));\r\n        _mint(mintAddress, total);\r\n    }\r\n\r\n    function setWhiteList(address _whiteList,bool _isWhiteList) external onlyOwner{\r\n        whiteList[_whiteList] = _isWhiteList;\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        limitAmount = amount;\r\n    }\r\n\r\n    function setAmmPairs(address _pair, bool _isPair) external onlyOwner {\r\n        require(_pair != address(0),\"Pair is zero address\");\r\n        ammPairs[_pair] = _isPair;\r\n    }\r\n\r\n    function setIsParter(address _parter, bool _isParter) external onlyOwner {\r\n        isParter[_parter] = _isParter;\r\n    }\r\n\r\n   \r\n    function setToUsdtFee(uint256 _toUsdtFee) external onlyOwner {\r\n        buyToUsdtFee = _toUsdtFee;\r\n         sellToUsdtFee = _toUsdtFee;\r\n    }\r\n\r\n    function setBurnFee(uint256 _burnFee) external onlyOwner {\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    function setRecommed(address father,address son) external{\r\n        require(msg.sender == jdAddress,\"No jd address\");\r\n        toFather[son] = father;\r\n        sonAddress[father].push(son);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 burnAmount;\r\n        uint256 mintAmount;\r\n        uint256 amount = super.balanceOf(account);\r\n        if (whiteList[account]) {\r\n            burnAmount = 0;\r\n        } else {\r\n            burnAmount = getUserBurnAmount(account);\r\n        }\r\n        uint256 spendTime = block.timestamp.sub(userTimeOfBurn[account]);\r\n        if (spendTime == 0) return amount;\r\n        mintAmount = getUserMintAmount(account);\r\n        uint256 balance = amount.sub(burnAmount).add(mintAmount);\r\n        return balance;\r\n    }\r\n\r\n    function getUserBurnAmount(address user) public view returns (uint256) {\r\n        uint256 userBalance = super.balanceOf(user);\r\n        if (address(uniswapV2PairUSDT) == user || userBalance == 0) return 0;\r\n        uint256 _userTime = userTimeOfBurn[user];\r\n        uint256 endTime = block.timestamp;\r\n        if (_userTime > 0 && _userTime < endTime) {\r\n            uint256 burnSecond = endTime.sub(_userTime);\r\n            uint256 burnCount = burnSecond.div(3);\r\n            if(burnCount == 0){\r\n                return 0;\r\n            }\r\n            uint256 burnAmount = userBalance.mul(BURN_RATIO).div(1000).div(\r\n                BLOCK_AMOUNT_OF_DAY\r\n            );\r\n            uint256 burnAmountOfThree = burnAmount.mul(burnCount);\r\n            uint256 half = userBalance.div(2);\r\n            if (burnAmountOfThree >= half) return half;\r\n            return burnAmountOfThree;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getUserMintAmount(address user) public view returns (uint256) {\r\n        if (!lpPush[user] || totalMint >= MAX_MINT) return 0;\r\n        uint256 userTime = userTimeOfMint[user];\r\n        uint256 endTime = block.timestamp;\r\n        uint256 _startTime = startTime;\r\n        if (userTime > 0 && userTime < endTime) {\r\n            uint256 mintSecond = endTime.sub(userTime);\r\n            uint256 mintCount = mintSecond.div(3);\r\n            if(mintCount == 0){\r\n                return 0;\r\n            }\r\n            uint256 lpAmount = uniswapV2PairUSDT.balanceOf(user);\r\n            if (lpAmount == 0) {\r\n                return 0;\r\n            }\r\n            uint256 tokenAmount = getTokenAmountByLp(lpAmount).sub(\r\n                sonToFather[user]\r\n            );\r\n\r\n            uint256 mintRatio;\r\n            uint256 spendTime = block.timestamp - _startTime;\r\n            if(spendTime <= 30 days){\r\n                mintRatio = MINT_RATIO_THIRTY;\r\n            }else if(spendTime <= 60 days){\r\n                mintRatio = MINT_RATIO_SIXTY;\r\n            }else if(spendTime <= 90 days){\r\n                mintRatio = MINT_RATIO_NINETY;\r\n            }else{\r\n                mintRatio = MINT_RATIO_OTHER;\r\n            }\r\n               \r\n            uint256 mintAmount = tokenAmount\r\n                .mul(mintRatio)\r\n                .div(BLOCK_AMOUNT_OF_DAY)\r\n                .div(1000000);\r\n            return mintAmount.mul(mintCount);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getTokenAmountByLp(\r\n        uint256 lpAmount\r\n    ) public view returns (uint256) {\r\n        uint256 balance1 = super.balanceOf(address(uniswapV2PairUSDT));\r\n        if (balance1 == 0 || lpAmount == 0) return 0;\r\n        return lpAmount.mul(balance1).div(uniswapV2PairUSDT.totalSupply());\r\n    }\r\n\r\n    function getLpBalanceByToken(uint256 amount) public view returns (uint256) {\r\n        uint256 pairTotalAmount = uniswapV2PairUSDT.totalSupply();\r\n        uint256 pairUSDTAmount = IERC20(usdt).balanceOf(\r\n            address(uniswapV2PairUSDT)\r\n        );\r\n        return pairTotalAmount.mul(amount).div(pairUSDTAmount).div(100).mul(101);\r\n    }\r\n\r\n     function getLpBalanceByUsdt(\r\n        uint256 usdtAmount\r\n    ) public view returns (uint256, uint256) {\r\n        uint256 pairTotalAmount = uniswapV2PairUSDT.totalSupply();\r\n        (uint256 pairUSDTAmount, uint256 pairTokenAmount, ) = IUniswapPair(\r\n            uniswapV2PairUSDT\r\n        ).getReserves();\r\n        uint256 probablyLpAmount = pairTotalAmount.mul(usdtAmount).div(\r\n            pairUSDTAmount\r\n        ).div(1000).mul(1020);\r\n        uint256 probablyTokenAmount = probablyLpAmount.mul(pairTokenAmount).div(\r\n            pairTotalAmount\r\n        );\r\n        return (probablyLpAmount, probablyTokenAmount);\r\n    }\r\n\r\n    function setExAddress(address exa) private {\r\n        require(!_bexAddress[exa]);\r\n        _bexAddress[exa] = true;\r\n        _exIndex[exa] = _exAddress.length;\r\n        _exAddress.push(exa);\r\n        address[] memory addrs = new address[](1);\r\n        addrs[0] = exa;\r\n        _lpDividendProc(addrs);\r\n    }\r\n\r\n    function _clrLpDividend(address lpAddress) internal {\r\n        lpPush[lpAddress] = false;\r\n        lpUser[lpIndex[lpAddress]] = lpUser[lpUser.length - 1];\r\n        lpIndex[lpUser[lpUser.length - 1]] = lpIndex[lpAddress];\r\n        lpIndex[lpAddress] = 0;\r\n        lpUser.pop();\r\n    }\r\n\r\n    function _setLpDividend(address lpAddress) internal {\r\n        if(!lpPush[lpAddress]){\r\n            lpPush[lpAddress] = true;\r\n            lpIndex[lpAddress] = lpUser.length;\r\n            lpUser.push(lpAddress);\r\n        }\r\n        \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != to, \"ERC20: transfer to the same address\");\r\n        require(amount > 0 && amount <= limitAmount, \"Invalid amount\");\r\n\r\n        if (swapping) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool isAddLdx;\r\n        bool isDelLdx;\r\n\r\n        if (ammPairs[from]) {\r\n            _distributeRewards(to);\r\n            _updateUserAmountMint(to);\r\n            _updateUserAmountBurn(to);\r\n        } else if (ammPairs[to]) {\r\n            _distributeRewards(from);\r\n            _updateUserAmountMint(from);\r\n            _updateUserAmountBurn(from);\r\n        } else {\r\n            _distributeRewards(from);\r\n            _distributeRewards(to);\r\n            _updateUserAmountMint(from);\r\n            _updateUserAmountMint(to);\r\n            _updateUserAmountBurn(from);\r\n            _updateUserAmountBurn(to);\r\n        }\r\n\r\n        if (lastAddress == address(0)) {\r\n            address[] memory addrs = new address[](2);\r\n            addrs[0] = from;\r\n            addrs[1] = to;\r\n            _lpDividendProc(addrs);\r\n        } else {\r\n            address[] memory addrs = new address[](3);\r\n            addrs[0] = from;\r\n            addrs[1] = to;\r\n            addrs[2] = lastAddress;\r\n            lastAddress = address(0);\r\n            _lpDividendProc(addrs);\r\n        }\r\n\r\n        if (ammPairs[to]) {\r\n            lastAddress = from;\r\n        }\r\n\r\n        uint256 usdtAmount;\r\n        if (ammPairs[to]) {\r\n            (isAddLdx, usdtAmount) = _isAddLiquidityV2();\r\n            if (isAddLdx) {\r\n                if (isExcludedFromFeesVip[from] && !flags) {\r\n                    super._transfer(from, to, amount);\r\n                    flags = true;\r\n                    return;\r\n                }\r\n                _setLpDividend(from);\r\n                (uint256 lpAddAmount, ) = getLpBalanceByUsdt(usdtAmount);\r\n               \r\n                addLiqudityInfo[from] += lpAddAmount;\r\n            }\r\n        } else if (ammPairs[from]) {\r\n            (isDelLdx, , usdtAmount) = _isDelLiquidityV2();\r\n            if (isDelLdx) {\r\n                uint256 lpDelAmount = getLpBalanceByToken(usdtAmount);\r\n                uint256 totalLpAmounts = addLiqudityInfo[to];\r\n        \r\n                if (isParter[to]) {\r\n                    uint256 _startTime = startTime;\r\n                    if(block.timestamp - _startTime <= DEL_TIME){\r\n                        super._transfer(from, DESTROY, amount);\r\n                        _totalSupply = _totalSupply - amount;\r\n                    }else{\r\n                        super._transfer(from, to, amount);\r\n                    } \r\n                    return;\r\n                } else {\r\n                    if(lpDelAmount > totalLpAmounts){\r\n                        uint256 delAmount = totalLpAmounts.mul(amount).div(lpDelAmount);\r\n                        super._transfer(from, to, delAmount);\r\n                        uint256 other = amount - delAmount;\r\n                        if(other != 0){\r\n                            super._transfer(from, DESTROY, other);\r\n                            addLiqudityInfo[to] = 0;\r\n                        }\r\n                    }else{\r\n                        super._transfer(from,to,amount);\r\n                        addLiqudityInfo[to] -= lpDelAmount; \r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n           \r\n        }\r\n\r\n        uint256 balance = super.balanceOf(address(this));\r\n        uint256 lpAITokenAmount = super.balanceOf(address(uniswapV2PairUSDT));\r\n        uint256 _lpTokenAmount;\r\n        if(lpAITokenAmount != 0){\r\n            _lpTokenAmount = lpAITokenAmount.div(1000);\r\n        }\r\n        uint256 swapAmount = balance > _lpTokenAmount ? _lpTokenAmount : balance;\r\n        if (balance > 0) {\r\n            if (\r\n                !swapping &&\r\n                (ammPairs[to] || (!ammPairs[from] && !ammPairs[to])) &&\r\n                !isAddLdx\r\n            ) {\r\n                swapping = true;\r\n                _swap(swapAmount);\r\n                swapping = false;\r\n            }\r\n        }\r\n\r\n        if (!isAddLdx && !isDelLdx) {\r\n            if (whiteList[from] || whiteList[to]) {} else {\r\n                if (ammPairs[to]) {\r\n                    uint256 sellToUsdtAmount = amount.mul(sellToUsdtFee).div(1000);\r\n                    uint256 burnFeeAmount = amount.mul(burnFee).div(1000);\r\n                    uint256 total = sellToUsdtAmount + burnFeeAmount;\r\n                    super._transfer(from, address(this), sellToUsdtAmount);\r\n                    super._transfer(from, DESTROY, burnFeeAmount); \r\n                    amount = amount.sub(total);\r\n                }else if (ammPairs[from]){\r\n                    uint256 buyToUsdtAmount = amount.mul(buyToUsdtFee).div(1000);\r\n                    uint256 burnFeeAmount = amount.mul(burnFee).div(1000);\r\n                    uint256 total = buyToUsdtAmount + burnFeeAmount;\r\n                    super._transfer(from, address(this), buyToUsdtAmount); \r\n                    super._transfer(from, DESTROY, burnFeeAmount); \r\n                    amount = amount.sub(total);\r\n                }\r\n            }\r\n        }\r\n        super._transfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n    function _distributeRewards(address addr) private {\r\n        address father = toFather[addr];\r\n        address lastFather = addr;\r\n        uint256 lastFatherAmount = getUserMintAmount(addr);\r\n        uint256 fatherAmount;\r\n        uint256 rewardAmount;\r\n\r\n        uint256 ratio;\r\n        //\u5faa\u73af\u591a\u5c11\u6b21\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            if (father == address(0)) break;\r\n            fatherAmount = getUserMintAmount(father);\r\n\r\n            uint256 lpAmountLastFather = uniswapV2PairUSDT.balanceOf(lastFather);\r\n            uint256 lpAmountFather = uniswapV2PairUSDT.balanceOf(father);\r\n\r\n            if (lpAmountLastFather == 0 && i == 0) return;\r\n            if (lpAmountFather == 0){\r\n                lastFather = father;\r\n                father = toFather[father];\r\n                continue;\r\n            }\r\n            if (lpAmountFather > 0) {\r\n                if(i == 0){\r\n                    ratio = 20;\r\n                }else if(i == 1){\r\n                    ratio = 15;\r\n                }else if(i <= 9){\r\n                    ratio = 10;\r\n                }\r\n\r\n                rewardAmount = lastFatherAmount.mul(ratio).div(100);\r\n                uint256 _totalMint = totalMint + rewardAmount;\r\n                if (_totalMint >= MAX_MINT) {\r\n                    totalMint = MAX_MINT;\r\n                    uint256 amount = MAX_MINT - totalMint;\r\n                    if (amount == 0) return;\r\n                    _mint(father, amount);\r\n                    sonToFather[lastFather] = amount;\r\n                } else {\r\n                    _mint(father, rewardAmount);\r\n                    totalMint = totalMint + rewardAmount;\r\n                    sonToFather[lastFather] = rewardAmount;\r\n                }   \r\n            }\r\n            lastFather = father;\r\n            father = toFather[father];\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidityV2()private view returns (bool ldxAdd, uint256 otherAmount){\r\n        address token0 = IUniswapPair(address(uniswapV2PairUSDT)).token0();\r\n        (uint256 r0, , ) = IUniswapPair(address(uniswapV2PairUSDT))\r\n            .getReserves();\r\n        uint256 bal0 = IERC20(token0).balanceOf(address(uniswapV2PairUSDT));\r\n        if (token0 != address(this)) {\r\n            if (bal0 > r0) {\r\n                otherAmount = bal0 - r0;\r\n                ldxAdd = otherAmount > 10 ** 15;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isDelLiquidityV2()private view returns (bool ldxDel, bool bot, uint256 otherAmount){\r\n        address token0 = IUniswapPair(address(uniswapV2PairUSDT)).token0();\r\n        (uint256 reserves0, , ) = IUniswapPair(address(uniswapV2PairUSDT))\r\n            .getReserves();\r\n        uint256 amount = IERC20(token0).balanceOf(address(uniswapV2PairUSDT));\r\n        if (token0 != address(this)) {\r\n            if (reserves0 > amount) {\r\n                otherAmount = reserves0 - amount;\r\n                ldxDel = otherAmount > 10 ** 10;\r\n            } else {\r\n                bot = reserves0 == amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swap(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(fundAddress),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function _updateUserAmountMint(address user) private {\r\n        if (block.timestamp > userTimeOfMint[user]) {\r\n            uint256 mintAmount = getUserMintAmount(user);\r\n            if (mintAmount > 0) {\r\n                uint256 _totalMint = totalMint + mintAmount;\r\n                if (_totalMint >= MAX_MINT) {\r\n                    uint256 amount = MAX_MINT - totalMint;\r\n                    totalMint = MAX_MINT;\r\n                    if (amount != 0) {\r\n                        _mint(user, amount);\r\n                    }\r\n                } else {\r\n                    totalMint = totalMint + mintAmount;\r\n                    _mint(user, mintAmount);\r\n                }\r\n            }\r\n        }\r\n        userTimeOfMint[user] = block.timestamp;\r\n    }\r\n\r\n    function _updateUserAmountBurn(address user) private {\r\n        if (block.timestamp > userTimeOfBurn[user] && !whiteList[user]) {\r\n            uint256 burnAmount = getUserBurnAmount(user);\r\n            if (burnAmount > 0) {\r\n                super._transfer(user, DESTROY, burnAmount);\r\n            }\r\n        }\r\n        userTimeOfBurn[user] = block.timestamp;\r\n    }\r\n\r\n    function _lpDividendProc(address[] memory lpAddresses) private {\r\n        for (uint256 i = 0; i < lpAddresses.length; i++) {\r\n            if (\r\n                lpPush[lpAddresses[i]] &&\r\n                (uniswapV2PairUSDT.balanceOf(lpAddresses[i]) < 0 ||\r\n                    _bexAddress[lpAddresses[i]])\r\n            ) {\r\n                _clrLpDividend(lpAddresses[i]);\r\n            } else if (\r\n                !lpPush[lpAddresses[i]] &&\r\n                !_bexAddress[lpAddresses[i]] &&\r\n                uniswapV2PairUSDT.balanceOf(lpAddresses[i]) > 0\r\n            ) {\r\n                _setLpDividend(lpAddresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jdAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_AMOUNT_OF_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_RATIO_NINETY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_RATIO_OTHER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_RATIO_SIXTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_RATIO_THIRTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_exAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLiqudityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToUsdtFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLpBalanceByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getLpBalanceByUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountByLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haveLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFeesVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isParter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpPush\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToUsdtFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"name\":\"setAmmPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isParter\",\"type\":\"bool\"}],\"name\":\"setIsParter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"father\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"son\",\"type\":\"address\"}],\"name\":\"setRecommed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toUsdtFee\",\"type\":\"uint256\"}],\"name\":\"setToUsdtFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteList\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sonToFather\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toFather\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairUSDT\",\"outputs\":[{\"internalType\":\"contract IUniswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTimeOfBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTimeOfMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AiBabyDoge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d2dc772f5eddc216ccaf6fc3e731090122c16b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61db6ead7e0b3f24223233427e5ec6a22b3b2029e958b139fbb88c8fd1d93df9"}