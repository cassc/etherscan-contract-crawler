{"SourceCode": "// File: contracts/interface/IPancakeRouter02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeRouter02 {\r\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n// File: contracts/interface/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function burn(uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/Fund.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/// @title Fund contartc\r\n/// @notice storege funds info\r\ncontract Fund {\r\n    address public USDC;\r\n    uint256 public totalFund;\r\n    uint256 public endtime; \r\n    mapping (address => uint256) public investOf; \r\n\r\n    event Invest(address user, uint256 amount);\r\n\r\n    function _setUSDC(address usdc) internal {\r\n        USDC = usdc;\r\n    }\r\n\r\n    function _setEndtime(uint256 end) internal {\r\n        endtime = end;\r\n    }\r\n\r\n    function balance() public view returns(uint256){\r\n        return IERC20(USDC).balanceOf(address(this));\r\n    }\r\n\r\n    function invest(uint256 amount) external {\r\n        require(block.timestamp < endtime, \"Fund: activit ended\");\r\n        IERC20(USDC).transferFrom(msg.sender, address(this), amount);\r\n        investOf[msg.sender] += amount;\r\n        totalFund += amount;\r\n        emit Invest(msg.sender, amount);\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/PancakeHelper.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/// @title pancakeHelper contarct\r\n/// @notice rpovider pancakeSwap swap function\r\ncontract PancakeHelper {\r\n    address public pancakeRouter;\r\n  \r\n    function _setRouter(address router) internal  {\r\n        pancakeRouter = router;\r\n    }\r\n\r\n    function calculateAmountOutMin(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amountIn\r\n    ) public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        uint[] memory amounts = IPancakeRouter02(pancakeRouter).getAmountsOut(amountIn, path);\r\n        return amounts[1] - (amounts[1] / 10);  //Slippage Tolerance: 10%\r\n    }\r\n\r\n    function _swapTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amountIn,\r\n        uint amountOutMin, \r\n        address to,\r\n        uint deadline\r\n    ) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n\r\n        require(IERC20(tokenIn).approve(pancakeRouter, amountIn), \"Approval failed\");\r\n\r\n        IPancakeRouter02(pancakeRouter).swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function _buybackAndBurn(        \r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint amountIn\r\n    ) internal {\r\n        uint256 amountOutMin = calculateAmountOutMin(tokenIn, tokenOut, amountIn);\r\n        _swapTokens(tokenIn, tokenOut, amountIn, amountOutMin, address(this), block.timestamp);\r\n        IERC20(tokenOut).burn(IERC20(tokenOut).balanceOf(address(this)));\r\n    }\r\n}\r\n// File: contracts/Manager.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @title manager of the funds\r\n/// @notice any one which in the managers can give or vote buyback proposal\r\ncontract Manager {\r\n    mapping(address => uint256) public managers;   //map of managers\r\n    uint256 public total;                          //total of managers\r\n    \r\n    struct Proposal{\r\n        address sender;\r\n        uint256 cost;\r\n        uint256 expire;\r\n        uint256 line;\r\n        address[] agree;\r\n        address[] disagree;\r\n        uint256 statu; //0: pending; 1: passed; 2: unpassed\r\n    }\r\n\r\n    \r\n    uint256 public pId;                          //proposal id\r\n    uint256 public validtime;                    //proposal valid time\r\n    uint256 public line;                         //proposal vote thershold\r\n    mapping (uint256 => Proposal) internal proposals;\r\n\r\n    modifier auth() {\r\n        require(managers[msg.sender]==1, \"Manager: only manager\");\r\n        _;\r\n    }\r\n\r\n    event SentProposal(uint256 indexed  id, address indexed sender, uint256 cost);\r\n    event Vote(uint256 indexed id, address voter, bool side);\r\n\r\n    function proposal(uint256 id) view external returns(address sender, uint256 cost, uint256 expire, uint256 _line, address[] memory agree, address[] memory disagree, uint256 statu){\r\n        Proposal memory p = proposals[id];\r\n        return (p.sender, p.cost, p.expire, p.line, p.agree, p.disagree, p.statu);\r\n    }\r\n\r\n    function _set(uint256 t, uint256 r) internal {\r\n        (validtime, line) = (t, r);\r\n    }\r\n\r\n    function _rely(address guy) internal  {\r\n        require(managers[guy] != 1,\"Manager: exist\");\r\n        managers[guy] = 1; \r\n        total++;\r\n    }\r\n\r\n    function _deny(address guy) internal  {\r\n        require(managers[guy] == 1, \"Manager: unexist\");\r\n        managers[guy] = 0; \r\n        total--;\r\n    }\r\n\r\n    function sentProposal(uint256 cost) auth external returns(uint256){\r\n        if (pId > 0){\r\n            Proposal memory p = proposals[pId];\r\n            require(p.statu > 0 || block.timestamp > p.expire, \"Manager: last proposal is acting\");\r\n        }\r\n\r\n        pId++;\r\n        address[] memory nullList;\r\n        proposals[pId] = Proposal(msg.sender, cost, block.timestamp + validtime, line, nullList, nullList, 0);\r\n        emit SentProposal(pId, msg.sender, cost);\r\n        return pId;\r\n    }\r\n\r\n    function vote(bool side) auth external {\r\n        if (pId == 0) revert(\"manager: not proposal\");\r\n        \r\n        Proposal storage p = proposals[pId];\r\n        require(p.statu == 0 && block.timestamp < p.expire, \"Manager: without valid proposal\");\r\n        uint256 al = p.agree.length;\r\n        uint256 dl = p.disagree.length; \r\n        if(al > 0){\r\n            for(uint256 i=0; i<al; i++){require(p.agree[i] != msg.sender, \"Manager: can not revote\");}\r\n        }\r\n\r\n        if(dl > 0){\r\n            for(uint256 i=0; i<al; i++){require(p.disagree[i] != msg.sender, \"Manager: can not revote\");}\r\n        }\r\n      \r\n        if(side){\r\n            p.agree.push(msg.sender);\r\n            if (p.agree.length >= p.line) {//proprsal pass and call afterpass\r\n                p.statu = 1;\r\n                afterPass(p.cost);\r\n            }\r\n        }else {\r\n            p.disagree.push(msg.sender);\r\n            if (p.disagree.length > total-p.line ) {p.statu = 2;}//proposal faild\r\n        }\r\n\r\n        emit Vote(pId, msg.sender, side);\r\n    }\r\n\r\n\r\n    function afterPass(uint256) internal virtual {} \r\n}\r\n// File: contracts/common/Initialize.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Initialize {\r\n    bool private initialized;\r\n    \r\n    modifier noinit(){\r\n        require(!initialized, \"initialized\");\r\n        _;\r\n        initialized = true;\r\n    }\r\n}\r\n// File: contracts/common/Admin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    function getAddressSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\ncontract Admin{\r\n    modifier admin() {\r\n        require(StorageSlot.getAddressSlot(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103).value == msg.sender,\"Admin: only admin\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/RecoverFund.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title ATM Recover Fund contract\r\n/// @notice user can invest in this contarct, and managers can sent a proposal to spent funds to buyback and burn LUCA  \r\ncontract RecoverFund is Admin, Manager, Fund, PancakeHelper, Initialize {\r\n    address public LUCA;\r\n\r\n    function _setLUCA(address luca) internal {\r\n        LUCA = luca;\r\n    }\r\n\r\n    // wrapping Manager contract\r\n    function set(uint256 t, uint256 r) public admin {\r\n        _set(t, r);\r\n    }\r\n\r\n    function rely(address guy) public admin {\r\n        _rely(guy);\r\n    }\r\n\r\n    function deny(address guy) public admin {\r\n        _deny(guy);\r\n    }\r\n\r\n    function afterPass(uint256 tokenIn) internal override {\r\n        _buybackAndBurn(USDC, LUCA, tokenIn);\r\n    }\r\n\r\n    function init(\r\n        address router,\r\n        address luca,\r\n        address usdc,\r\n        uint256 votetime,\r\n        uint256 thershold,\r\n        uint256 endtime,\r\n        address[] calldata mngs\r\n    ) external noinit {\r\n        _setRouter(router);\r\n        _setUSDC(usdc);\r\n        _setLUCA(luca);\r\n        _setEndtime(endtime);\r\n        _set(votetime, thershold);\r\n        for (uint i = 0; i < mngs.length; i++) {\r\n            _rely(mngs[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"SentProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LUCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thershold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"mngs\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"line\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_line\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"agree\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"disagree\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"statu\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"sentProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecoverFund", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfeac11e706b85b35ce41309fa1074e67f6ba519682d34dda463e21d316d697b"}