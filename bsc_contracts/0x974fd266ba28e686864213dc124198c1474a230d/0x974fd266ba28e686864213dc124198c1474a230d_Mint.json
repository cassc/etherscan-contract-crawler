{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Mint is Ownable{\r\n\r\n    address public _token;\r\n\r\n    uint256 public _currentAmount;\r\n\r\n    uint256 public _totalCount;\r\n\r\n    uint256 public _rate;\r\n\r\n    struct Person {\r\n        bool initial;\r\n        uint256 mintTime;\r\n        uint256 startTime;\r\n        uint256 inviteCount;\r\n        uint256 claim;\r\n        uint256 unclaim;\r\n    }\r\n    struct Invite {\r\n        address addr;\r\n        uint256 datetime;\r\n    }\r\n\r\n    mapping (address => Person) public _users;\r\n    mapping (address => Invite[]) public _invites;\r\n    mapping (address => address) public  _exitsCheck;\r\n\r\n    constructor(address token,uint256 rate){\r\n        _token = token; // Mint token address\r\n        _rate = rate;\r\n    }\r\n\r\n\r\n    function startMint(address refer) public {\r\n        require(msg.sender == tx.origin, \"Only external accounts can call this function\");\r\n        require(!isContract(msg.sender), \"Only external accounts can call this function\");\r\n        require(!_users[msg.sender].initial,\"repeat start\");\r\n        Person memory newPerson;\r\n        newPerson.initial = true;\r\n        newPerson.mintTime = block.timestamp;\r\n        newPerson.startTime = block.timestamp;\r\n        newPerson.inviteCount = 0;\r\n        newPerson.claim = 0;\r\n        newPerson.unclaim = 0;\r\n        _users[msg.sender] = newPerson;\r\n        _totalCount += 1;\r\n        \r\n        if(refer == address(0) || refer == msg.sender){\r\n            return;\r\n        }\r\n        if(_exitsCheck[msg.sender] == address(0)){\r\n            \r\n            if(_users[refer].initial){\r\n            \r\n            uint256 unclaim = _users[refer].unclaim;\r\n            unclaim+= (block.timestamp - _users[refer].startTime) * (_rate * _users[refer].inviteCount + _rate);\r\n            _users[refer].unclaim = unclaim;\r\n            _users[refer].startTime = block.timestamp;\r\n            }\r\n             \r\n            _users[refer].inviteCount+=1;\r\n            Invite memory invite = Invite(msg.sender,block.timestamp);\r\n            _invites[refer].push(invite);\r\n            \r\n            _exitsCheck[msg.sender] = refer;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function withdraw() public  {\r\n        require(msg.sender == tx.origin, \"Only external accounts can call this function\");\r\n        require(!isContract(msg.sender), \"Only external accounts can call this function\");\r\n        require(_users[msg.sender].initial,\"initial error\");\r\n        require((block.timestamp - _users[msg.sender].startTime) > 0, \"too fast\");\r\n        \r\n        uint256 claim = (block.timestamp - _users[msg.sender].startTime) * (_rate * _users[msg.sender].inviteCount + _rate);\r\n        uint256 unclaim =  _users[msg.sender].unclaim;\r\n        \r\n        IERC20(_token).transfer(msg.sender,unclaim + claim);\r\n        \r\n        _users[msg.sender].unclaim = 0;\r\n        _users[msg.sender].claim += (unclaim + claim);\r\n        _users[msg.sender].startTime = block.timestamp;\r\n\r\n        _currentAmount += (unclaim + claim);\r\n\r\n    }\r\n\r\n    function getRewards(address addr) public view returns(uint256) {\r\n        if(!_users[addr].initial){\r\n            return 0;\r\n        }\r\n        uint256 claim = (block.timestamp - _users[addr].startTime) * (_rate * _users[addr].inviteCount + _rate);\r\n        uint256 unclaim =  _users[addr].unclaim;\r\n        return (claim + unclaim);\r\n    }\r\n\r\n\r\n\r\n\r\n    function withdrawToken(address token, address recipient,uint amount) onlyOwner external {\r\n        IERC20(token).transfer(recipient, amount);\r\n    }\r\n\r\n    function withdrawBNB() onlyOwner external {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exitsCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_invites\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initial\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer\",\"type\":\"address\"}],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Mint", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000694ad25e6c67da10f7b07ad527fe8edf2ba23ae0000000000000000000000000000000000000000000000008ac7230489e80000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab037eabf69f801f74baf62e9de61a4297c72d88e4546088aeed28b64f90294e"}