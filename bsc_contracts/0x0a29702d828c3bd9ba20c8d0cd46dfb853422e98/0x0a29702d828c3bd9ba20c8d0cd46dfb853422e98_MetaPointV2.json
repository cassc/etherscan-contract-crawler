{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetaPointV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./DoubleEndedQueue40.sol\\\";\\n\\ninterface IDonate {\\n    function queryDonatedList() external view returns (address[] memory);\\n}\\n\\ninterface IMebLpStake {\\n    function award(address token, uint256 amount) external;\\n}\\nstruct AccountSrc {\\n    uint256 srd;\\n    uint256 srw;\\n    address head;\\n    uint8 vip;\\n    uint32 point;\\n    uint32 effect;\\n    uint256 wdm;\\n    uint256 wd;\\n    uint256 wda;\\n    uint256 grd;\\n    uint32 rootLevel;\\n    uint32 rootSn;\\n    uint32 level;\\n    uint32 sn;\\n}\\n\\ninterface IMetaPoint {\\n    function accounts(address addr) external view returns (AccountSrc memory);\\n\\n    function followList(address addr)\\n        external\\n        view\\n        returns (address[] memory addrs, uint8[] memory vips);\\n}\\n\\ncontract MetaPointV2 is Ownable {\\n    using SafeERC20 for IERC20;\\n    using DoubleEndedQueue for DoubleEndedQueue.Uint40Deque;\\n    address public creator;\\n    uint256 public creatorBalance;\\n    address public first = 0x72956614Ec1442DC450D79c9bd1fd6E9B0c0006E;\\n    address public lpds = 0x949Ea644969E3bb1b64BC519977146cBaf81bd7E;\\n    address public lp = 0x9b22403637F18020B78696766d2Be7De2F1a67e2;\\n    uint256 public expend = 100e18;\\n    uint256 public back = 300e18;\\n    address public wdr = 0x2081d6EBda62B44417Ed8FaCd19902AcAfae3318;\\n    address public donate = 0x8DDeaD5dA29A08E35110eE0c216A85cBE2C65884;\\n\\n    uint8[] public allot = [30, 5, 60, 5];\\n\\n    uint40 public accountCnt;\\n    uint40 public pointCnt;\\n    mapping(uint40 => address) public points;\\n\\n    mapping(uint32 => uint40) public dailyCnts;\\n\\n    struct Account {\\n        uint256 srd;\\n        uint256 srw;\\n        address head;\\n        uint8 vip;\\n        uint40 point;\\n        uint40 effect;\\n        uint256 wdm;\\n        uint256 wd;\\n        uint256 wda;\\n        uint256 grd;\\n        uint40 rootSn;\\n    }\\n    struct Node {\\n        uint40 pid;\\n        uint40 lid;\\n        uint40 rid;\\n    }\\n\\n    mapping(address => Account) public accounts;\\n    mapping(address => address[]) private follows;\\n    mapping(uint40 => Node) public nodes;\\n    uint256 public acc;\\n    uint40 public effectTotal;\\n\\n    event LogUp(\\n        address indexed addr,\\n        uint40 indexed current,\\n        uint256 indexed nextSn,\\n        bool isLeft\\n    );\\n\\n    constructor() {\\n        creator = msg.sender;\\n\\n        accounts[first].head = creator;\\n        accounts[first].point = 1;\\n        accounts[first].effect = 1;\\n        accounts[first].rootSn = 2;\\n\\n        points[1] = creator;\\n        points[2] = first;\\n\\n        pointCnt = 2;\\n        nodes[1].lid = 2;\\n        nodes[2].pid = 1;\\n\\n        effectTotal = 1;\\n        accountCnt = 2;\\n\\n        acc = 69500000000000000000;\\n        accountCnt = 8678;\\n        creatorBalance = 1884821500000000000000000;\\n        donateBalance = 665000000000000000000;\\n        effectTotal = 50654;\\n        pointCnt = 57209;\\n        grwCreatorToday[today()] = true;\\n    }\\n\\n    function setExpend(uint256 _expend) public onlyOwner {\\n        expend = _expend;\\n    }\\n\\n    function initAddress(\\n        address _lpds,\\n        address _lp,\\n        address _wdr,\\n        address _donate\\n    ) public onlyOwner {\\n        lpds = _lpds;\\n        lp = _lp;\\n        wdr = _wdr;\\n        donate = _donate;\\n    }\\n\\n    function register(address head) public {\\n        require(head != msg.sender, \\\"head can not set to youself\\\");\\n        require(accounts[msg.sender].head == address(0), \\\"head is exist\\\");\\n        require(accounts[head].head != address(0), \\\"head is not actived\\\");\\n        require(accounts[head].point > 0, \\\"head is not actived\\\");\\n        accounts[msg.sender].head = head;\\n        accountCnt++;\\n        follows[head].push(msg.sender);\\n\\n        up();\\n    }\\n\\n    uint8[] public levelUpFollows = [0, 6, 4, 2];\\n    uint8[] public upLmt = [5, 7, 9, 11];\\n    mapping(uint32 => bool) private grwCreatorToday;\\n    address public opr;\\n\\n    function setOpr(address addr) public onlyOwner {\\n        opr = addr;\\n    }\\n\\n    function followList(address addr)\\n        public\\n        view\\n        returns (address[] memory addrs, uint8[] memory vips)\\n    {\\n        addrs = follows[addr];\\n        vips = new uint8[](addrs.length);\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            vips[i] = accounts[addrs[i]].vip;\\n        }\\n    }\\n\\n    function levelUp(uint8 target) public {\\n        require(target > accounts[msg.sender].vip, \\\"Already higher level.\\\");\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < follows[msg.sender].length; i++) {\\n            if (accounts[follows[msg.sender][i]].vip >= (target - 1)) {\\n                count += 1;\\n                if (count >= levelUpFollows[target]) {\\n                    accounts[msg.sender].vip = target;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function up() public {\\n        require(\\n            accounts[msg.sender].effect >= freeLimitCount ||\\n                userDailyCnts[msg.sender][today()] <\\n                upLmt[accounts[msg.sender].vip],\\n            \\\"Amount limit today.\\\"\\n        );\\n        address head = accounts[msg.sender].head;\\n        require(head != address(0), \\\"Account not actived.\\\");\\n        grwCreatorEachAuto();\\n\\n        IERC20(lp).safeTransferFrom(msg.sender, address(this), expend);\\n        uint256 srd = (expend * allot[0]) / 100;\\n        uint256 srdEach = srd / 30;\\n\\n        uint40 current = 0;\\n        if (accounts[msg.sender].rootSn == 0) {\\n            current = take(head, msg.sender);\\n            accounts[msg.sender].rootSn = current;\\n        } else {\\n            current = take(msg.sender, msg.sender);\\n        }\\n\\n        accounts[msg.sender].point += 1;\\n        accounts[msg.sender].effect += 1;\\n        accounts[msg.sender].wdm += back;\\n        accounts[msg.sender].grd += acc;\\n\\n        effectTotal += 1;\\n\\n        for (uint8 i = 0; i < 30; i++) {\\n            current = nodes[current].pid;\\n            if (current < 2) {\\n                break;\\n            }\\n            address addr = points[current];\\n            if (verifysrd(addr, i)) {\\n                accounts[addr].srd += srdEach;\\n                srd -= srdEach;\\n            }\\n        }\\n        creatorBalance += srd;\\n        donateBalance += (expend * allot[1]) / 100;\\n        creatorBalance += (expend * allot[2]) / 100;\\n\\n        uint256 lpdsBalance = (expend * allot[3]) / 100;\\n        IERC20(lp).approve(lpds, lpdsBalance);\\n        IMebLpStake(lpds).award(lp, lpdsBalance);\\n\\n        userDailyCnts[msg.sender][today()] += 1;\\n        dailyCnts[today()] += 1;\\n    }\\n\\n    mapping(address => DoubleEndedQueue.Uint40Deque) private queues;\\n\\n    function userQueue(address addr)\\n        external\\n        view\\n        returns (uint40[] memory result)\\n    {\\n        result = new uint40[](queues[addr].length());\\n        for (uint40 i = 0; i < queues[addr].length(); i++) {\\n            result[i] = queues[addr].at(i);\\n        }\\n    }\\n\\n    function take(address parent, address addr) private returns (uint40) {\\n        pointCnt += 1;\\n        uint40 next = pointCnt;\\n        points[next] = addr;\\n\\n        if (queues[parent].empty()) {\\n            queues[parent].pushFront(accounts[parent].rootSn);\\n        }\\n        while (!queues[parent].empty()) {\\n            uint40 current = queues[parent].popBack();\\n\\n            if (nodes[current].lid == 0) {\\n                nodes[current].lid = next;\\n                nodes[next].pid = current;\\n                queues[parent].pushBack(current);\\n                emit LogUp(addr, current, next, true);\\n                return next;\\n            } else {\\n                queues[parent].pushFront(nodes[current].lid);\\n            }\\n            if (nodes[current].rid == 0) {\\n                nodes[current].rid = next;\\n                nodes[next].pid = current;\\n                queues[parent].pushFront(next);\\n                emit LogUp(addr, current, next, false);\\n                return next;\\n            } else {\\n                queues[parent].pushFront(nodes[current].rid);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function upBatch(uint256 times) public {\\n        for (uint256 i = 0; i < times; i++) {\\n            up();\\n        }\\n    }\\n\\n    function grwCreator(uint256 amount) public {\\n        require(msg.sender == opr, \\\"Forbidden.\\\");\\n        require(!grwCreatorToday[today()], \\\"Already operate today\\\");\\n        require(amount <= creatorBalance, \\\"Insufficient creatorBalance\\\");\\n        require(amount / effectTotal <= 2.5e18, \\\"Too much amount one time\\\");\\n        acc += amount / effectTotal;\\n        creatorBalance -= amount;\\n        grwCreatorToday[today()] = true;\\n    }\\n\\n    function grwCreatorEach(uint256 each) public {\\n        require(msg.sender == opr, \\\"Forbidden.\\\");\\n        require(!grwCreatorToday[today()], \\\"Already operate today\\\");\\n        require(each <= 2.5e18, \\\"Too much amount one time\\\");\\n        uint256 amount = effectTotal * each;\\n        require(amount <= creatorBalance, \\\"Insufficient creatorBalance\\\");\\n        acc += each;\\n        creatorBalance -= amount;\\n        grwCreatorToday[today()] = true;\\n    }\\n\\n    uint256 autoGrwEach;\\n\\n    function setAutoGrwEach(uint256 each) external {\\n        require(msg.sender == opr, \\\"Forbidden.\\\");\\n        require(each <= 2.5e18, \\\"Too much amount one time\\\");\\n        autoGrwEach = each;\\n    }\\n\\n    function grwCreatorEachAuto() internal {\\n        if (autoGrwEach != 0 && !grwCreatorToday[today()]) {\\n            acc += autoGrwEach;\\n            uint256 amount = effectTotal * autoGrwEach;\\n            creatorBalance -= amount;\\n            grwCreatorToday[today()] = true;\\n        }\\n    }\\n\\n    function rcgCreator(uint256 amount) public {\\n        IERC20(lp).safeTransferFrom(msg.sender, address(this), amount);\\n        creatorBalance += amount;\\n    }\\n\\n    function srdTransCreator(uint256 amount) public onlyOwner {\\n        require(accounts[creator].srd >= amount, \\\"Insufficient of creator srd\\\");\\n        accounts[creator].srd -= amount;\\n        creatorBalance += amount;\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        uint256 grd = grping(msg.sender);\\n        uint256 srd = accounts[msg.sender].srd;\\n        accounts[msg.sender].wda += (grd + srd);\\n        accounts[msg.sender].srw += srd;\\n        accounts[msg.sender].srd = 0;\\n        require(amount <= accounts[msg.sender].wda, \\\"Insufficient aviable wd\\\");\\n        accounts[msg.sender].wd += amount;\\n        require(\\n            accounts[msg.sender].wd <= accounts[msg.sender].wdm,\\n            \\\"Insufficient wdm\\\"\\n        );\\n        uint40 downCount = uint40(accounts[msg.sender].wd / back);\\n        uint40 count = downCount -\\n            (accounts[msg.sender].point - accounts[msg.sender].effect);\\n        if (count > 0) {\\n            accounts[msg.sender].effect -= count;\\n            effectTotal -= count;\\n        }\\n        accounts[msg.sender].wda -= amount;\\n        accounts[msg.sender].grd = accounts[msg.sender].effect * acc;\\n        uint256 withdrawFee = amount / 10;\\n        IERC20(lp).safeTransfer(wdr, withdrawFee);\\n        IERC20(lp).safeTransfer(msg.sender, amount - withdrawFee);\\n    }\\n\\n    function grping(address addr) public view returns (uint256) {\\n        return accounts[addr].effect * acc - accounts[addr].grd;\\n    }\\n\\n    function arping(address addr)\\n        public\\n        view\\n        returns (uint256 total_, uint256 withdraw_)\\n    {\\n        total_ = grping(addr) + accounts[addr].srd + accounts[addr].wda;\\n        withdraw_ = total_;\\n        if (total_ + accounts[addr].wd > accounts[addr].wdm) {\\n            withdraw_ = accounts[addr].wdm - accounts[addr].wd;\\n        }\\n    }\\n\\n    uint16 public freeLimitCount = 900;\\n    mapping(address => mapping(uint32 => uint40)) public userDailyCnts;\\n\\n    function today() public view returns (uint32) {\\n        return uint32(block.timestamp - (block.timestamp % (24 * 60 * 60)));\\n    }\\n\\n    function setLevelUpFollows(uint8 vip, uint8 cnt) public onlyOwner {\\n        levelUpFollows[vip] = cnt;\\n    }\\n\\n    function setUpLmt(uint8 vip, uint8 lmt) public onlyOwner {\\n        upLmt[vip] = lmt;\\n    }\\n\\n    function setAllot(uint8 at, uint8 _allot) public onlyOwner {\\n        allot[at] = _allot;\\n    }\\n\\n    function setFreeLimitCount(uint16 count) public onlyOwner {\\n        freeLimitCount = count;\\n    }\\n\\n    uint256 public donateBalance = 0;\\n\\n    function processDonate() public {\\n        require(donateBalance > 0, \\\"Insufficient of DonateBalance\\\");\\n        address[] memory donates = IDonate(donate).queryDonatedList();\\n        require(donates.length > 0, \\\"Donate is empty\\\");\\n        uint256 perDonate = donateBalance / donates.length;\\n        donateBalance = 0;\\n        for (uint256 i = 0; i < donates.length; i++) {\\n            IERC20(lp).safeTransfer(donates[i], perDonate);\\n        }\\n    }\\n\\n    function verifysrd(address addr, uint8 level)\\n        public\\n        view\\n        returns (bool result)\\n    {\\n        uint8 vip = accounts[addr].vip;\\n        if (vip == 3) {\\n            result = (level < 30);\\n        } else if (vip == 2) {\\n            result = (level < 20);\\n        } else if (vip == 1) {\\n            result = (level < 10);\\n        } else {\\n            result = (level < 5);\\n        }\\n    }\\n\\n    address public opr_mapping;\\n\\n    function setOprMapping(address addr) public onlyOwner {\\n        opr_mapping = addr;\\n    }\\n\\n    address metapoint = 0x967d92eBd17Fa2b2D3B0cCA312B602ad0B03D998;\\n\\n    function mapping_metas(\\n        uint40[] calldata ids,\\n        address[] calldata addrs,\\n        uint40[] calldata pids,\\n        uint40[] calldata lids,\\n        uint40[] calldata rids\\n    ) external {\\n        require(msg.sender == opr_mapping, \\\"Forbidden.\\\");\\n        require(ids.length == addrs.length, \\\"size error\\\");\\n        for (uint40 i = 0; i < ids.length; i++) {\\n            points[ids[i]] = addrs[i];\\n            nodes[ids[i]] = Node({pid: pids[i], lid: lids[i], rid: rids[i]});\\n        }\\n    }\\n\\n    function mapping_accounts(\\n        address[] calldata addrs,\\n        uint40[] calldata rootSns\\n    ) external {\\n        require(msg.sender == opr_mapping, \\\"Forbidden.\\\");\\n        address addr = address(0);\\n        for (uint40 i = 0; i < addrs.length; i++) {\\n            addr = addrs[i];\\n            AccountSrc memory accountSrc = IMetaPoint(metapoint).accounts(addr);\\n            accounts[addr] = Account({\\n                srd: accountSrc.srd, //\\n                srw: accountSrc.srw,\\n                head: accountSrc.head,\\n                vip: accountSrc.vip,\\n                point: accountSrc.point,\\n                effect: accountSrc.effect,\\n                wdm: accountSrc.wdm,\\n                wd: accountSrc.wd,\\n                wda: accountSrc.wda,\\n                grd: accountSrc.grd,\\n                rootSn: rootSns[i]\\n            });\\n            (address[] memory addrs_, ) = IMetaPoint(metapoint).followList(\\n                addr\\n            );\\n            follows[addr] = addrs_;\\n        }\\n    }\\n\\n    function mapping_queue_clear(address addr) external {\\n        require(msg.sender == opr_mapping, \\\"Forbidden.\\\");\\n        queues[addr].clear();\\n    }\\n\\n    function mapping_queue_add(address addr, uint40[] calldata _queues) public {\\n        require(msg.sender == opr_mapping, \\\"Forbidden.\\\");\\n        for (uint40 i = 0; i < _queues.length; i++) {\\n            queues[addr].pushBack(_queues[i]);\\n        }\\n    }\\n\\n    function mapping_queue_batch(\\n        address[] calldata addrs,\\n        uint40[][] calldata _queues\\n    ) external {\\n        require(msg.sender == opr_mapping, \\\"Forbidden.\\\");\\n        for (uint40 i = 0; i < addrs.length; i++) {\\n            mapping_queue_add(addrs[i], _queues[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DoubleEndedQueue40.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Uint40Deque`. Other types can be cast to and from `uint40`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Uint40Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Uint40Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => uint40) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Uint40Deque storage deque, uint40 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Uint40Deque storage deque) internal returns (uint40 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Uint40Deque storage deque, uint40 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Uint40Deque storage deque) internal returns (uint40 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Uint40Deque storage deque) internal view returns (uint40 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Uint40Deque storage deque) internal view returns (uint40 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Uint40Deque storage deque, uint256 index) internal view returns (uint40 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Uint40Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Uint40Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Uint40Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"current\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextSn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLeft\",\"type\":\"bool\"}],\"name\":\"LogUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountCnt\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"srd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"vip\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"point\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"effect\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"wdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wda\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grd\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"rootSn\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"arping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"back\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"dailyCnts\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectTotal\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"followList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vips\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeLimitCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"grping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grwCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"each\",\"type\":\"uint256\"}],\"name\":\"grwCreatorEach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_donate\",\"type\":\"address\"}],\"name\":\"initAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpFollows\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint40[]\",\"name\":\"rootSns\",\"type\":\"uint40[]\"}],\"name\":\"mapping_accounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40[]\",\"name\":\"ids\",\"type\":\"uint40[]\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint40[]\",\"name\":\"pids\",\"type\":\"uint40[]\"},{\"internalType\":\"uint40[]\",\"name\":\"lids\",\"type\":\"uint40[]\"},{\"internalType\":\"uint40[]\",\"name\":\"rids\",\"type\":\"uint40[]\"}],\"name\":\"mapping_metas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint40[]\",\"name\":\"_queues\",\"type\":\"uint40[]\"}],\"name\":\"mapping_queue_add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint40[][]\",\"name\":\"_queues\",\"type\":\"uint40[][]\"}],\"name\":\"mapping_queue_batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mapping_queue_clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"pid\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lid\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"rid\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opr_mapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointCnt\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"points\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDonate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rcgCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"at\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_allot\",\"type\":\"uint8\"}],\"name\":\"setAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"each\",\"type\":\"uint256\"}],\"name\":\"setAutoGrwEach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expend\",\"type\":\"uint256\"}],\"name\":\"setExpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"setFreeLimitCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"vip\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cnt\",\"type\":\"uint8\"}],\"name\":\"setLevelUpFollows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOpr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOprMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"vip\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lmt\",\"type\":\"uint8\"}],\"name\":\"setUpLmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"srdTransCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"up\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"upBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upLmt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userDailyCnts\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"userQueue\",\"outputs\":[{\"internalType\":\"uint40[]\",\"name\":\"result\",\"type\":\"uint40[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"verifysrd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaPointV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}