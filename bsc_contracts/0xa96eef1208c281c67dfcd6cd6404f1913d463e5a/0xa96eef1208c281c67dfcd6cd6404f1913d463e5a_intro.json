{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract intro is Ownable {\r\n\r\n    constructor() {\r\n        rootAddress = 0xAcbec2Fe3B31F5DE49Ba760D11169642eF0a50bF;\r\n        accessAddr[msg.sender] = true;\r\n        accessAddr[0x45e7E74bb5EE5E4CB9683F2235582dBda0b635f3] = true;\r\n        accessAddr[0x6923Df416CEef0c95c1bb84455c5CF6D21FeA8a1] = true;\r\n        accessAddr[0xdBb993C2E34d885A4Cfdd2B563dD95A3Df1f63C8] = true;\r\n        isPair[0x970AAbdC5363e0d52Db1bE6a832caF601d154622] = true;\r\n    }\r\n    address public rootAddress;\r\n    mapping(address=>bool) public accessAddr;\r\n    mapping(address => address) intros;\r\n\r\n    function isBindIntro(address userAddress) public view returns (bool) {\r\n        if (intros[userAddress] != address(0) || userAddress == rootAddress) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getIntro(address _user) public view returns (address) {\r\n        if (intros[_user] == address(0) || _user == rootAddress) {\r\n            return rootAddress;\r\n        }\r\n        return intros[_user];\r\n    }\r\n\r\n    function bindIntro(address _intro,address _user) public onlyCoin{\r\n        if(intros[_user] != address(0) || _user == rootAddress||_intro == address(0)||isPair[_intro]||isPair[_user]){\r\n            return;\r\n        }\r\n        if(_intro != rootAddress && intros[_intro] == address(0)){\r\n            intros[_intro] = rootAddress;\r\n            emit BindIntroLogs(_intro, rootAddress, block.timestamp);\r\n        }\r\n        \r\n        intros[_user] = _intro;\r\n        emit BindIntroLogs(_user, _intro, block.timestamp);\r\n    }\r\n\r\n    event BindIntroLogs(\r\n        address hero_address,\r\n        address intro_address,\r\n        uint256 time\r\n    );\r\n    modifier onlyCoin {\r\n        require(accessAddr[msg.sender],\"The address is not authorized\");\r\n        _;\r\n    }\r\n    function setAccessAddr(address _addr,bool isAccess)public onlyCoin{\r\n        accessAddr[_addr] = isAccess;\r\n    }\r\n    function bindIntro2(address _intro) public{\r\n        require(msg.sender == tx.origin, \"The contract cannot be called\");\r\n        require(\r\n            intros[msg.sender] == address(0) && msg.sender != rootAddress,\r\n            \"Already bound\"\r\n        );\r\n        require(_intro != address(0), \"Referrer cannot be a zero address\");\r\n        require(\r\n            _intro == rootAddress || intros[_intro] != address(0),\r\n            \"intro error\"\r\n        );\r\n        intros[msg.sender] = _intro;\r\n        emit BindIntroLogs(msg.sender, _intro, block.timestamp);\r\n    }\r\n    mapping(address => bool) public isPair;\r\n    function setPair(address _addr,bool isAccess)public onlyOwner{\r\n        isPair[_addr] = isAccess;\r\n    }\r\n    function unbindIntro(address _user) public onlyCoin{\r\n        intros[_user] = address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hero_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"intro_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BindIntroLogs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"bindIntro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intro\",\"type\":\"address\"}],\"name\":\"bindIntro2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIntro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isBindIntro\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAccess\",\"type\":\"bool\"}],\"name\":\"setAccessAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAccess\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unbindIntro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "intro", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22e61874ffa9211625637a5cc62bfda71107a94991a45ea4503b56b0f4ad2fff"}