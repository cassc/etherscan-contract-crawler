{"SourceCode": "// Wambo [https://wambocoin.io] - Platinum Apes 2021\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Wambo is ERC20, Ownable {\r\n\taddress constant UniswapRouterV2 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\taddress constant DAI = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\r\n\t//\r\n\tconstructor() ERC20(\"Wambo\", \"WAMBO\") {\r\n\t\texcludeFromDividendsAndFees(address(this), true);\r\n\r\n\t\t_mint(owner(), 1000000000 * 10 ** decimals()); // 1B fixed supply fully minted\r\n\r\n\t\tsetUniswapV2RouterAddress(UniswapRouterV2);\r\n\r\n\t\t// set default fee structure\r\n\t\tfees.dividend = 3;\r\n\t\tfees.lottery = 2;\r\n\t\tfees.liquidity = 2;\r\n\t\tfees.marketing = 1;\r\n\t}\r\n\r\n\treceive() external payable {} // accept BNB on contract address\r\n\r\n\t// Router v2\r\n\tIUniswapV2Router02 internal _uniswap_router;\r\n\r\n\tevent UniswapV2RouterAddressUpdated(address router_address, address wambo_wbnb_pair);\r\n\r\n\tfunction setUniswapV2RouterAddress(address router_address) onlyOwner public {\r\n\t\trequire(router_address != address(_uniswap_router), \"WAMBO: UniswapV2 router already set to this address\");\r\n\r\n\t\t_uniswap_router = IUniswapV2Router02(router_address);\r\n\t\texcludeFromDividends(router_address, true);\r\n\r\n\t\taddress wambo_wbnb_pair = IUniswapV2Factory(_uniswap_router.factory()).createPair(address(this), _uniswap_router.WETH());\r\n\t\tflagAsPairContractAddress(wambo_wbnb_pair, true);\r\n\r\n\t\temit UniswapV2RouterAddressUpdated(router_address, wambo_wbnb_pair);\r\n\t}\r\n\r\n\t// fee structure\r\n\tstruct Fees { // 4B\r\n\t\tuint8 dividend; // 3\r\n\t\tuint8 lottery; // 2\r\n\t\tuint8 liquidity; // 2\r\n\t\tuint8 marketing; // 1\r\n\t}\r\n\r\n\tFees public fees;\r\n\r\n\tfunction feesTotal() public view returns(uint8) { return fees.dividend + fees.lottery + fees.liquidity + fees.marketing; }\r\n\r\n\tfunction setDividendFee(uint8 fee) onlyOwner public { fees.dividend = fee; }\r\n\tfunction setLotteryFee(uint8 fee) onlyOwner public { fees.lottery = fee; }\r\n\tfunction setLiquidityFee(uint8 fee) onlyOwner public { fees.liquidity = fee; }\r\n\tfunction setMarketingFee(uint8 fee) onlyOwner public { fees.marketing = fee; }\r\n\r\n\tbool public enable_fees = false;\r\n\r\n\tfunction setEnableFees(bool enable) onlyOwner public { enable_fees = enable; }\r\n\r\n\t// wallets\r\n\taddress payable private _marketing_wallet = payable(0xE4c7C123e0E3229bCe55C8D88A2E47E909006265); // receives ETH\r\n\taddress payable private _lottery_wallet = payable(0x833a24ddD47302b3501F79D885ac1ad9306fe28A); // receives DAI\r\n\taddress payable private _dust_wallet = payable(0xB29cc36C48d47a6795258248a8BF769251042BD5); // receives all ETH excedents\r\n\r\n\tfunction setMarketingWallet(address payable wallet) onlyOwner public { _marketing_wallet = wallet; }\r\n\tfunction setLotteryWallet(address payable wallet) onlyOwner public { _lottery_wallet = wallet; }\r\n\tfunction setDustWallet(address payable wallet) onlyOwner public { _dust_wallet = wallet; }\r\n\r\n\t// holders\r\n\tmapping(address => uint8) private _address_flags; // track states associated with an address\r\n\r\n\tmapping(address => uint32) private _holder_idx; // uint32 is a problem if half the Earth population ever holds this token\r\n\taddress[] private _holders = [address(0)]; // index 0 is reserved and means the adress was not inserted\r\n\r\n\tuint8 constant address_has_sent_wambo = (1 << 0);\r\n\tuint8 constant address_is_excluded_from_fees = (1 << 1);\r\n\tuint8 constant address_is_excluded_from_dividends = (1 << 2);\r\n\tuint8 constant address_is_pair_contract = (1 << 4);\r\n\r\n\tfunction _addHolder(address holder) internal {\r\n\t\tif (_holder_idx[holder] == 0) {\r\n\t\t\t_holder_idx[holder] = uint32(_holders.length);\r\n\t\t\t_holders.push(holder);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getHolderCount() onlyOwner public view returns (uint32) { return uint32(_holders.length - 1); }\r\n\r\n\tfunction excludeFromFees(address addr, bool enable) onlyOwner public {\r\n\t\tenable ? _address_flags[addr] |= address_is_excluded_from_fees :\r\n\t\t\t\t _address_flags[addr] &= ~address_is_excluded_from_fees;\r\n\t}\r\n\r\n\tfunction isExcludedFromFees(address addr) public view returns(bool) { return (_address_flags[addr] & address_is_excluded_from_fees) != 0; }\r\n\r\n\tfunction excludeFromDividends(address addr, bool enable) onlyOwner public {\r\n\t\tenable ? _address_flags[addr] |= address_is_excluded_from_dividends :\r\n\t\t\t\t _address_flags[addr] &= ~address_is_excluded_from_dividends;\r\n\t}\r\n\r\n\tfunction isExcludedFromDividends(address addr) public view returns(bool) { return (_address_flags[addr] & (address_is_excluded_from_dividends | address_is_pair_contract)) != 0; }\r\n\r\n\tfunction flagAsPairContractAddress(address addr, bool flag) onlyOwner public {\r\n\t\tflag ? _address_flags[addr] |= address_is_pair_contract :\r\n\t\t\t   _address_flags[addr] &= ~address_is_pair_contract;\r\n\t}\r\n\r\n\tfunction isPairContractAddress(address addr) public view returns(bool) { return (_address_flags[addr] & address_is_pair_contract) != 0; }\r\n\r\n\t// Flag an address as an automated market maker pair contract and exclude it from fees and dividends\r\n\tfunction excludeFromDividendsAndFees(address pair, bool enable) onlyOwner public {\r\n\t\texcludeFromFees(pair, enable);\r\n\t\texcludeFromDividends(pair, enable);\r\n\t}\r\n\r\n\t/*\r\n\t\tReturn holder informations for the lottery.\r\n\r\n\t\tNote: This function intentionally wraps the provided index so that you can feed it a\r\n\t\t\t  32-bit number to select a random candidate without risking a race condition.\r\n\t*/\r\n\tfunction getHolderInfo(uint32 idx) public view returns (address, uint256, bool) {\r\n\t\taddress holder = _holders[(idx % getHolderCount()) + 1];\r\n\t\treturn (holder, balanceOf(holder), _address_flags[holder] & address_has_sent_wambo != 0);\r\n\t}\r\n\r\n\t// dividends\r\n\tevent DividendsDistributed(uint256 amount);\r\n\tevent DividendWithdrawn(address receiver, uint256 amount);\r\n\r\n\tmapping(address => int256) internal _magnified_dividend_corrections;\r\n\tmapping(address => uint256) internal _withdrawn_dividends;\r\n\r\n\tuint256 internal _magnified_dividend_per_token;\r\n\tuint256 constant internal _fixed_point_precision = 2**128;\r\n\r\n\tuint256 private _minimum_holder_balance_for_dividends_withdrawal = 200000 * 10 ** decimals(); // defaults to 200K token\r\n\r\n\t// Set the minimum balance required for a holder to receive dividends.\r\n\tfunction setMinimumHolderBalanceForDividendsWithdrawal(uint256 amount) onlyOwner public {\r\n\t\t_minimum_holder_balance_for_dividends_withdrawal = amount;\r\n\t}\r\n\r\n\tuint256 public total_dividends_distributed;\r\n\r\n\tfunction _distributeDividends(uint256 amount) internal {\r\n\t\trequire(totalSupply() > 0);\r\n\r\n\t\ttotal_dividends_distributed += amount;\r\n\r\n\t\tif (amount > 0)\r\n\t\t\t_magnified_dividend_per_token += (amount * _fixed_point_precision) / totalSupply();\r\n\r\n\t\temit DividendsDistributed(amount);\r\n\t}\r\n\r\n\tfunction _totalDividendOf(address holder) internal view returns(int256) {\r\n\t\tint256 total_dividend = int256(balanceOf(holder) * _magnified_dividend_per_token) + _magnified_dividend_corrections[holder];\r\n\t\treturn total_dividend / int256(_fixed_point_precision);\r\n\t}\r\n\r\n\tfunction _withdrawableDividendOf(address holder) internal view returns(int256) {\r\n\t\treturn _totalDividendOf(holder) - int256(_withdrawn_dividends[holder]);\r\n\t}\r\n\r\n\tfunction _withdrawnDividendOf(address holder) internal view returns(uint256) {\r\n\t\treturn _withdrawn_dividends[holder];\r\n\t}\r\n\r\n\tfunction _withdrawDividendToHolder(address holder) internal {\r\n\t\tint256 withdrawable_dividend = _withdrawableDividendOf(holder);\r\n\r\n\t\tif (withdrawable_dividend > 0) {\r\n\t\t\t_withdrawn_dividends[holder] += uint256(withdrawable_dividend); // dividends are either withdrawn or forfeited\r\n\r\n\t\t\tif (!isExcludedFromDividends(holder))\r\n\t\t\t\tif (balanceOf(holder) >= _minimum_holder_balance_for_dividends_withdrawal) {\r\n\t\t\t\t\tpayable(holder).transfer(uint256(withdrawable_dividend)); // transfer from contract coin balance to holder wallet\r\n\t\t\t\t\temit DividendWithdrawn(holder, uint256(withdrawable_dividend));\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// swap\r\n\tfunction _swapWamboToDAI(uint256 wambo_amount, address recipient) internal {\r\n\t\taddress[] memory path = new address[](3); // Wambo->WETH->DAI\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswap_router.WETH();\r\n\t\tpath[2] = DAI;\r\n\r\n\t\t_approve(address(this), address(_uniswap_router), wambo_amount);\r\n\t\t_uniswap_router.swapExactTokensForTokensSupportingFeeOnTransferTokens(wambo_amount, 0, path, recipient, block.timestamp);\r\n\t}\r\n\r\n\tfunction _swapWamboToETH(uint256 wambo_amount, address recipient) internal returns(uint256) {\r\n\t\tuint256 eth_amount = recipient.balance;\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswap_router.WETH();\r\n\r\n\t\t_approve(address(this), address(_uniswap_router), wambo_amount);\r\n\t\t_uniswap_router.swapExactTokensForETHSupportingFeeOnTransferTokens(wambo_amount, 0, path, recipient, block.timestamp);\r\n\r\n\t\treturn recipient.balance - eth_amount;\r\n\t}\r\n\r\n\tevent LiquidityAdded(uint256 wambo_amount, uint256 eth_amount);\r\n\r\n\tfunction _sendWamboToLiquidityPool(uint256 wambo_amount) internal {\r\n\t\tuint256 wambo_amount_to_swap = wambo_amount / 2;\r\n\t\twambo_amount -= wambo_amount_to_swap;\r\n\r\n\t\tuint256 eth_amount = _swapWamboToETH(wambo_amount_to_swap, address(this));\r\n\r\n\t\t_approve(address(this), address(_uniswap_router), wambo_amount);\r\n\t\t_uniswap_router.addLiquidityETH{value: eth_amount}(address(this), wambo_amount, 0, 0, address(0), block.timestamp);\r\n\r\n\t\temit LiquidityAdded(wambo_amount, eth_amount);\r\n\t}\r\n\r\n\tfunction _sendWamboToLotteryWallet(uint256 wambo_amount) internal {\r\n\t\tif (_lottery_wallet != address(0))\r\n\t\t\t_swapWamboToDAI(wambo_amount, _lottery_wallet);\r\n\t}\r\n\r\n\tfunction _sendWamboToMarketingWallet(uint256 wambo_amount) internal {\r\n\t\tif (_marketing_wallet != address(0))\r\n\t\t\t_swapWamboToETH(wambo_amount, _marketing_wallet);\r\n\t}\r\n\r\n\tfunction _transferContractETHToDustWallet() internal {\r\n\t\tif (_dust_wallet != address(0))\r\n\t\t\t_dust_wallet.transfer(address(this).balance);\r\n\t}\r\n\r\n\t// fee tokens processing\r\n\tevent ProcessFeesStarted(uint256 wambo_amount);\r\n\tevent WithdrawnDividendsToHolders(uint256 holder_count, uint256 gas_consumed);\r\n\tevent ProcessFeesEnded();\r\n\r\n\tbool internal _processing_fees; // 1B\r\n\r\n\tuint8 public fee_cycle_stage; // 1B\r\n\tFees internal _fee_cycle_fees; // 4B\r\n\r\n\tuint32 public fee_processing_gas_limit = 200000; // defaults to 200 Kwei\r\n\tuint64 private _next_holder_idx_to_withdraw;\r\n\r\n\tuint256 public fee_cycle_wambo_amount;\r\n\tuint256 public minimum_wambo_to_start_fee_cycle = 2000000 * 10 ** decimals();\r\n\r\n\t// Set the maximum amount of gas to be used for fee tokens processing\r\n\tfunction setFeeProcessingGasLimit(uint256 limit) onlyOwner public {\r\n\t\trequire(limit >= 200000 && limit <= 600000, \"WAMBO: Fee processing gas limit must be between 200 and 600 Kwei\");\r\n\t\tfee_processing_gas_limit = uint32(limit);\r\n\t}\r\n\r\n\t// Once the accumulated wambo on the contract address reach this threshold the withdraw cycle starts\r\n\tfunction setMinimumWamboToStartFeeCycle(uint256 amount) onlyOwner public { minimum_wambo_to_start_fee_cycle = amount; }\r\n\r\n\tfunction _cycleFeesTotal() internal view returns(uint8) {\r\n\t\treturn _fee_cycle_fees.dividend + _fee_cycle_fees.liquidity + _fee_cycle_fees.lottery + _fee_cycle_fees.marketing;\r\n\t}\r\n\r\n\tfunction _execFeeCycle(bool sender_is_pair) internal {\r\n\t\t_processing_fees = true;\r\n\r\n\t\tif (fee_cycle_stage == 0) {\r\n\t\t\t_fee_cycle_fees = fees; // store cycle invariant\r\n\r\n\t\t\tif (_cycleFeesTotal() > 0) {\r\n\t\t\t\tfee_cycle_wambo_amount = balanceOf(address(this)); // store cycle invariant\r\n\r\n\t\t\t\tif (fee_cycle_wambo_amount >= minimum_wambo_to_start_fee_cycle) {\r\n\t\t\t\t\temit ProcessFeesStarted(fee_cycle_wambo_amount);\r\n\t\t\t\t\t_transferContractETHToDustWallet(); // transfer ETH that was sent to the contract to the dust wallet\r\n\t\t\t\t\t++fee_cycle_stage;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (fee_cycle_stage == 1) {\r\n\t\t\tif (!sender_is_pair) {\r\n\t\t\t\t_sendWamboToLiquidityPool((fee_cycle_wambo_amount * _fee_cycle_fees.liquidity) / _cycleFeesTotal());\r\n\t\t\t\t++fee_cycle_stage;\r\n\t\t\t}\r\n\t\t} else if (fee_cycle_stage == 2) {\r\n\t\t\tif (!sender_is_pair) {\r\n\t\t\t\t_sendWamboToLotteryWallet((fee_cycle_wambo_amount * _fee_cycle_fees.lottery) / _cycleFeesTotal());\r\n\t\t\t\t++fee_cycle_stage;\r\n\t\t\t}\r\n\t\t} else if (fee_cycle_stage == 3) {\r\n\t\t\tif (!sender_is_pair) {\r\n\t\t\t\t_sendWamboToMarketingWallet((fee_cycle_wambo_amount * _fee_cycle_fees.marketing) / _cycleFeesTotal());\r\n\t\t\t\t++fee_cycle_stage;\r\n\t\t\t}\r\n\t\t} else if (fee_cycle_stage == 4) {\r\n\t\t\tif (!sender_is_pair) {\r\n\t\t\t\t// swap tokens to ETH on the contract address to distribute to holders\r\n\t\t\t\tuint256 eth_amount = _swapWamboToETH((fee_cycle_wambo_amount * _fee_cycle_fees.dividend) / _cycleFeesTotal(), address(this)); // note: any wambo dust is left for the next cycle to deal with\r\n\t\t\t\t_distributeDividends(eth_amount);\r\n\t\t\t\t_next_holder_idx_to_withdraw = 1; // holder 0 is reserved\r\n\t\t\t\t++fee_cycle_stage;\r\n\t\t\t}\r\n\t\t} else if (fee_cycle_stage == 5) {\r\n\t\t\tuint16 holder_processed = 0;\r\n\r\n\t\t\t// withdraw holder dividends until we hit our gas limit\r\n\t\t\tuint256 gas_consumed = 0;\r\n\t\t\tuint256 ref_gasleft = gasleft();\r\n\r\n\t\t\twhile (fee_cycle_stage == 5) {\r\n\t\t\t\tgas_consumed = ref_gasleft - gasleft();\r\n\t\t\t\tif (gas_consumed >= fee_processing_gas_limit)\r\n\t\t\t\t\tbreak; // enforce gas limit\r\n\r\n\t\t\t\t_withdrawDividendToHolder(_holders[_next_holder_idx_to_withdraw]);\r\n\r\n\t\t\t\t++_next_holder_idx_to_withdraw;\r\n\t\t\t\t++holder_processed;\r\n\r\n\t\t\t\tif (_next_holder_idx_to_withdraw == _holders.length) {\r\n\t\t\t\t\tfee_cycle_stage = 0;\r\n\t\t\t\t\temit ProcessFeesEnded();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\temit WithdrawnDividendsToHolders(holder_processed, gas_consumed);\r\n\t\t}\r\n\r\n\t\t_processing_fees = false;\r\n\t}\r\n\r\n\tevent WamboFeesTransferredToContract(uint256 amount);\r\n\r\n\tfunction _transferWamboFeesToContract(address sender, uint256 wambo_amount) internal returns (uint256) {\r\n\t\tuint256 fees_in_wambo = (wambo_amount * feesTotal()) / 100;\r\n\t\tsuper._transfer(sender, address(this), fees_in_wambo);\r\n\t\temit WamboFeesTransferredToContract(fees_in_wambo);\r\n\t\treturn fees_in_wambo;\r\n\t}\r\n\r\n\tuint256 public buy_limit; // prevent whales from buying too much of the supply on launch\r\n\r\n\tfunction setBuyLimit(uint256 limit) onlyOwner public { buy_limit = limit; }\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n\t\tbool sender_is_pair_contract = isPairContractAddress(sender);\r\n\r\n\t\t// buy limit\r\n\t\trequire(!sender_is_pair_contract || buy_limit == 0 || amount <= buy_limit, 'WAMBO: Buy limit in effect, try a lower amount');\r\n\r\n\t\t// flag sender\r\n\t\t_address_flags[sender] |= address_has_sent_wambo;\r\n\r\n\t\t// fees\r\n\t\tif (!_processing_fees) {\r\n\t\t\tbool take_fees = enable_fees && !isExcludedFromFees(sender) && !isExcludedFromFees(recipient);\r\n\r\n\t\t\tif (take_fees)\r\n\t\t\t\tamount -= _transferWamboFeesToContract(sender, amount);\r\n\r\n\t\t\t_execFeeCycle(sender_is_pair_contract); // some operations cannot be carried out if the sender is a liquidity pair contract\r\n\t\t}\r\n\r\n\t\t// send remaining wambo to the recipient\r\n\t\tsuper._transfer(sender, recipient, amount);\r\n\r\n\t\t// recipient becomes a holder (if we're not doing a swap)\r\n\t\tif (!_processing_fees)\r\n\t\t\t_addHolder(recipient);\r\n\r\n\t\t// update dividend correction terms so that _totalDividendOf remains constant despite the sender and receiver balances changing\r\n\t\tint256 magnified_correction_term = int256(_magnified_dividend_per_token * amount);\r\n\t\t_magnified_dividend_corrections[sender] += magnified_correction_term;\r\n\t\t_magnified_dividend_corrections[recipient] -= magnified_correction_term;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wambo_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProcessFeesEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wambo_amount\",\"type\":\"uint256\"}],\"name\":\"ProcessFeesStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wambo_wbnb_pair\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WamboFeesTransferredToContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holder_count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas_consumed\",\"type\":\"uint256\"}],\"name\":\"WithdrawnDividendsToHolders\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable_fees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"excludeFromDividendsAndFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_cycle_stage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_cycle_wambo_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_processing_gas_limit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"dividend\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lottery\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesTotal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"flagAsPairContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"idx\",\"type\":\"uint32\"}],\"name\":\"getHolderInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPairContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_wambo_to_start_fee_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"setDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDustWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setFeeProcessingGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"setLotteryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setLotteryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumHolderBalanceForDividendsWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumWamboToStartFeeCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_address\",\"type\":\"address\"}],\"name\":\"setUniswapV2RouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_dividends_distributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Wambo", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b490832fabea614e9bb5b98ba774560b655c494c2de6c9fa22f215d41c89356a"}