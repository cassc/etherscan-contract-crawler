{"SourceCode": "{\"BasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function mul(uint a, uint b) internal pure  returns (uint) {\\r\\n    uint c = a * b;\\r\\n    require(a == 0 || c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n  function div(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003e 0);\\r\\n    uint c = a / b;\\r\\n    require(a == b * c + a % b);\\r\\n    return c;\\r\\n  }\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) public virtual view returns (uint);\\r\\n  function transfer(address to, uint value) virtual public;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public virtual view returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) virtual public;\\r\\n  function approve(address spender, uint value) virtual public;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  mapping(address =\\u003e uint) balances;\\r\\n\\r\\n  function transfer(address _to, uint _value) public override {\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    emit Transfer(msg.sender, _to, _value);\\r\\n  }\\r\\n\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) public virtual view returns (uint);\\r\\n  function transfer(address to, uint value) virtual public;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public virtual view returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) virtual public;\\r\\n  function approve(address spender, uint value) virtual public;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\"},\"ERC20Basic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) public virtual view returns (uint);\\r\\n  function transfer(address to, uint value) virtual public;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\"},\"MultiSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function mul(uint a, uint b) internal pure  returns (uint) {\\r\\n    uint c = a * b;\\r\\n    require(a == 0 || c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n  function div(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003e 0);\\r\\n    uint c = a / b;\\r\\n    require(a == b * c + a % b);\\r\\n    return c;\\r\\n  }\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) public virtual view returns (uint);\\r\\n  function transfer(address to, uint value) virtual public;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public virtual view returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) virtual public;\\r\\n  function approve(address spender, uint value) virtual public;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\n\\r\\n//   Payzus Multi Sender, support ETH and ERC20 Tokens\\r\\n\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  mapping(address =\\u003e uint) balances;\\r\\n\\r\\n  function transfer(address _to, uint _value) public override {\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    emit Transfer(msg.sender, _to, _value);\\r\\n  }\\r\\n\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n//   Payzus Multi Sender, support ETH and ERC20 Tokens\\r\\n\\r\\ncontract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint)) allowed;\\r\\n  using SafeMath for uint;\\r\\n  \\r\\n  function transferFrom(address _from, address _to, uint _value) public override {\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n} \\r\\n\\r\\n//   Payzus Multi Sender, support ETH and ERC20 Tokens\\r\\n\\r\\n\\r\\ncontract Ownable {\\r\\n     address payable public owner;\\r\\n\\r\\n    constructor () {\\r\\n        owner = payable(0x2b3BEe4c8264Df1aC7F32F181a1bA5f9a5339AC4); \\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\ncontract MultiSender is Ownable , StandardToken {\\r\\n\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    event LogTokenMultiSent(address token,uint256 total);\\r\\n    event LogGetToken(address token, address receiver, uint256 balance);\\r\\n   \\r\\n    address private receiverAddress;\\r\\n    uint public txFee = 0;\\r\\n    uint public VIPFee = 0 ;\\r\\n    address _tokenAddress;\\r\\n    StandardToken token = StandardToken(_tokenAddress);\\r\\n\\r\\n     receive() external payable {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /* VIP List */\\r\\n    mapping(address =\\u003e bool) private vipList;\\r\\n    \\r\\n    \\r\\n   /*\\r\\n  *  Register VIP\\r\\n  */\\r\\n  function registerVIP() payable public {\\r\\n      require(msg.value \\u003e= VIPFee);\\r\\n      require(owner.send(msg.value));\\r\\n      vipList[msg.sender] = true;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  *  VIP list\\r\\n  */\\r\\n  function addToVIPList(  address[] memory _vipList) onlyOwner public {\\r\\n    for (uint i =0;i\\u003c_vipList.length;i++){\\r\\n      vipList[_vipList[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*\\r\\n    * Remove address from VIP List by Owner\\r\\n  */\\r\\n  function removeFromVIPList(address[] memory _vipList) onlyOwner public {\\r\\n    for (uint i =0;i\\u003c_vipList.length;i++){\\r\\n      vipList[_vipList[i]] = false;\\r\\n    }\\r\\n   }\\r\\n\\r\\n    /*\\r\\n        * Check isVIP\\r\\n    */\\r\\n    function isVIP(address _addr) public view returns (bool) {\\r\\n        return _addr == owner || vipList[_addr];\\r\\n    }\\r\\n\\r\\n  \\r\\n     /*\\r\\n        * set vip fee\\r\\n    */\\r\\n    function setVIPFee(uint _fee) onlyOwner public {\\r\\n        VIPFee = _fee;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        * set tx fee\\r\\n    */\\r\\n    function setTxFee(uint _fee) onlyOwner public {\\r\\n        txFee = _fee;\\r\\n    }\\r\\n\\r\\n\\r\\n   function ETHSendSameValue(address payable[]  memory  _to, uint _value) internal {\\r\\n\\r\\n        uint sendAmount = _to.length.mul(_value);\\r\\n        uint transferValue = msg.value;\\r\\n        bool vip = isVIP(msg.sender);\\r\\n        if(vip){\\r\\n            require(transferValue \\u003e= sendAmount);\\r\\n        }else{\\r\\n            require(transferValue \\u003e= sendAmount.add(txFee)) ;\\r\\n            \\r\\n        }\\r\\n\\t\\trequire(_to.length \\u003c= 255);\\r\\n\\r\\n\\t\\tfor (uint8 i = 0; i \\u003c _to.length; i++) {\\r\\n\\t\\t\\ttransferValue = transferValue.sub(_value);\\r\\n\\t\\t\\trequire(_to[i].send(_value));\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif(!vip){\\r\\n            owner.transfer(txFee);\\r\\n        }\\r\\n\\t\\t\\r\\n\\r\\n\\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\\r\\n    }\\r\\n\\r\\n    function ETHSendDifferentValue(address payable[] memory _to, uint[] memory _value) internal {\\r\\n\\r\\n        uint sendAmount =0;\\r\\n        \\r\\n        for (uint8 i=0;i\\u003c_to.length;i++ )\\r\\n        {\\r\\n            sendAmount+=_value[i];\\r\\n        }\\r\\n\\t\\tuint remainingValue = msg.value;\\r\\n\\r\\n\\t    bool vip = isVIP(msg.sender);\\r\\n        if(vip){\\r\\n            require(remainingValue \\u003e= sendAmount);\\r\\n        }else{\\r\\n            require(remainingValue \\u003e= sendAmount.add(txFee)) ;\\r\\n            \\r\\n        }\\r\\n\\r\\n\\t\\trequire(_to.length == _value.length);\\r\\n\\t\\trequire(_to.length \\u003c= 255);\\r\\n\\r\\n\\t\\tfor (uint8 i = 0; i \\u003c _to.length; i++) {\\r\\n\\t\\t\\tremainingValue = remainingValue.sub(_value[i]);\\r\\n\\t\\t\\trequire(_to[i].send(_value[i]));\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif(!vip){\\r\\n            owner.transfer(txFee);\\r\\n        }\\r\\n\\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\\r\\n\\r\\n    }\\r\\n\\r\\n    function coinSendSameValue(address _tokenAddress, address[] memory _to, uint _value)  internal {\\r\\n\\r\\n\\t\\tuint sendValue = msg.value;\\r\\n\\t    bool vip = isVIP(msg.sender);\\r\\n        if(!vip){\\r\\n\\t\\t    require(sendValue \\u003e= txFee);\\r\\n\\t\\t   \\r\\n        }\\r\\n\\t\\trequire(_to.length \\u003c= 255);\\r\\n\\t\\t\\r\\n\\t\\taddress from = msg.sender;\\r\\n\\t\\tuint256 sendAmount = _to.length.mul(_value);\\r\\n\\r\\n        StandardToken token = StandardToken(_tokenAddress);\\t\\t\\r\\n\\t\\tfor (uint8 i = 0; i \\u003c _to.length; i++) {\\r\\n\\t\\t\\ttoken.transferFrom(from, _to[i], _value);\\r\\n\\t\\t}\\r\\n        if(!vip){\\r\\n            owner.transfer(txFee);\\r\\n        }\\r\\n\\t    emit LogTokenMultiSent(_tokenAddress,sendAmount);\\r\\n\\r\\n\\t}\\r\\n\\tfunction coinSendDifferentValue(address _tokenAddress, address[] memory _to, uint[] memory _value)  internal  {\\r\\n\\t\\t\\r\\n\\t  bool vip = isVIP(msg.sender);\\r\\n  \\r\\n    require(address(msg.sender).balance \\u003e= msg.value, \\\"Insufficient Balance\\\");    \\r\\n\\t\\trequire(_to.length == _value.length, \\\"Incorrect Value\\\");\\r\\n\\t\\trequire(_to.length \\u003c= 255, \\\"Crossed the Address length\\\");\\r\\n        \\r\\n    uint sendAmount = 0;\\r\\n        \\r\\n    for (uint8 i=0;i\\u003c_to.length;i++ )\\r\\n    {\\r\\n      sendAmount+=_value[i];\\r\\n    }\\r\\n        \\r\\n    StandardToken token = StandardToken(_tokenAddress);\\r\\n        \\r\\n\\t\\tfor (uint8 i = 0; i \\u003c _to.length; i++) {\\r\\n\\t\\t\\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif(!vip){\\r\\n      (bool sent,) = owner.call{value: msg.value}(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send ETH\\\"); \\r\\n    }\\r\\n    \\r\\n\\r\\n    emit LogTokenMultiSent(_tokenAddress,sendAmount);\\r\\n\\r\\n\\t}\\r\\n\\r\\n  function ownerBalance() onlyOwner public view returns(uint){\\r\\n    return address(msg.sender).balance;\\r\\n  }\\r\\n    /*\\r\\n        Send ETH with the same value by a explicit call mETH\\r\\n    */\\r\\n\\r\\n    function sendETH(address payable[] memory _to, uint _value) payable public {\\r\\n\\t\\tETHSendSameValue(_to,_value);\\r\\n\\t}\\r\\n\\r\\n   \\r\\n\\t/*\\r\\n        Send ETH with the different value by a implicit call ETH\\r\\n    */\\r\\n\\r\\n\\tfunction mutiSendETHWithDifferentValue(address payable[] memory _to, uint[] memory _value) payable public {\\r\\n        ETHSendDifferentValue(_to,_value);\\r\\n        \\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n        Send ETH with the same value by a implicit call ETH\\r\\n    */\\r\\n\\r\\n    function mutiSendETHWithSameValue(address payable[] memory _to, uint _value) payable public {\\r\\n\\t\\tETHSendSameValue(_to,_value);\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\r\\n    /*\\r\\n        Send coin with the same value by a implicit call ETH\\r\\n    */\\r\\n\\r\\n\\tfunction mutiSendCoinWithSameValue(address _tokenAddress, address[] memory _to, uint _value)  payable public {\\r\\n\\t    coinSendSameValue(_tokenAddress, _to, _value);\\r\\n\\t   \\r\\n\\t}\\r\\n\\r\\n    /*\\r\\n        Send coin with the different value by a implicit call ETH, this ETH can save some fee.\\r\\n    */\\r\\n\\tfunction mutiSendCoinWithDifferentValue(address _tokenAddress, address[] memory _to, uint[] memory _value) payable public {\\r\\n\\t    coinSendDifferentValue(_tokenAddress, _to, _value);\\r\\n\\t   \\r\\n\\t}\\r\\n\\r\\n    /*\\r\\n        Send coin with the different value by a explicit call ETH\\r\\n    */\\r\\n    function multisendToken(address _tokenAddress, address[] memory _to, uint[] memory _value) payable public {\\r\\n\\t    coinSendDifferentValue(_tokenAddress, _to, _value);\\r\\n\\t    \\r\\n    }\\r\\n    /*\\r\\n        Send coin with the same value by a explicit call ETH\\r\\n    */\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\ncontract Ownable {\\r\\n     address payable public owner;\\r\\n\\r\\n    constructor () {\\r\\n        owner = payable(0x2b3BEe4c8264Df1aC7F32F181a1bA5f9a5339AC4); \\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function mul(uint a, uint b) internal pure  returns (uint) {\\r\\n    uint c = a * b;\\r\\n    require(a == 0 || c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n  function div(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003e 0);\\r\\n    uint c = a / b;\\r\\n    require(a == b * c + a % b);\\r\\n    return c;\\r\\n  }\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n}\\r\\n\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function mul(uint a, uint b) internal pure  returns (uint) {\\r\\n    uint c = a * b;\\r\\n    require(a == 0 || c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n  function div(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003e 0);\\r\\n    uint c = a / b;\\r\\n    require(a == b * c + a % b);\\r\\n    return c;\\r\\n  }\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    require(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003e= b ? a : b;\\r\\n  }\\r\\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\\r\\n    return a \\u003c b ? a : b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) public virtual view returns (uint);\\r\\n  function transfer(address to, uint value) virtual public;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public virtual view returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) virtual public;\\r\\n  function approve(address spender, uint value) virtual public;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  mapping(address =\\u003e uint) balances;\\r\\n\\r\\n  function transfer(address _to, uint _value) public override {\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    emit Transfer(msg.sender, _to, _value);\\r\\n  }\\r\\n\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ncontract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint)) allowed;\\r\\n  using SafeMath for uint;\\r\\n  \\r\\n  function transferFrom(address _from, address _to, uint _value) public override {\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n} \"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenMultiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mutiSendCoinWithDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendCoinWithSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mutiSendETHWithDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendETHWithSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSender", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d13bf6aa44b02107f2443e381ac886feb7c038d2986c7ed7d4a0f034b32a4143"}