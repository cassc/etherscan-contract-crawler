{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n contract BNB_Stack_Distribution {\r\n  \r\n    address public owner;\r\n    address private creator;\r\n    address private tokenAddr;\r\n    mapping(address => uint256) private gasBalance;\r\n    \r\n    event Transaction (address indexed sender, address indexed receiver, uint256 amount, uint256 time);\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == creator);\r\n        _;\r\n    }\r\n    \r\n    constructor(address _owner, address _creator,address _tokenAddress)  {\r\n        owner = _owner;\r\n        creator = _creator;\r\n        tokenAddr = _tokenAddress;\r\n    }\r\n    \r\n    function setNewOwner(address _owner) public onlyOwner returns (bool){\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    \r\n\r\n    \r\n    function transferGas(uint256 _noOfGas) public returns (bool transferBool){\r\n        require(_noOfGas <= Token(tokenAddr).balanceOf(msg.sender),\"Token Balance of user is less\");\r\n        require(Token(tokenAddr).transferFrom(msg.sender,address(this), _noOfGas));\r\n        require(isContract(msg.sender) == false);\r\n        gasBalance[msg.sender] = gasBalance[msg.sender].add(_noOfGas);\r\n        return true;\r\n    }\r\n    \r\n    function transferGasBNB(uint256 _noOfGas) public payable returns (bool transferBool){\r\n        require(msg.value >= _noOfGas);\r\n        require(isContract(msg.sender) == false);\r\n        gasBalance[msg.sender] = gasBalance[msg.sender].add(_noOfGas);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawGasByOwner() public onlyOwner returns (bool withdrawBool){\r\n        require(Token(tokenAddr).transfer(msg.sender, Token(tokenAddr).balanceOf(address(this))));\r\n        return true;\r\n    }\r\n    \r\n    function getGasBalance() public view returns (uint256 retGas){\r\n        return Token(tokenAddr).balanceOf(address(this));\r\n    }\r\n    \r\n    function withdrawGasByOwnerBNB() public onlyOwner returns (bool withdrawBool){\r\n        address payable ownerAdd = payable(msg.sender);\r\n        ownerAdd.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    function getGasBalanceBNB() public view returns (uint256 retGas){\r\n        return address(this).balance;\r\n    }\r\n    \r\n\r\n    \r\n    function withdrawMultipleGas(address[] memory _receivers, uint256[] memory _amounts) public onlyOwner returns (bool withdrawBool){\r\n        require(_receivers.length == _amounts.length, \"Arrays not of equal length\");\r\n        for(uint256 i=0; i<_receivers.length; i++){\r\n            Token(tokenAddr).transfer(_receivers[i],_amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n     function withdrawMultipleGasBNB(address payable[] memory _receivers, uint256[] memory _amounts) public payable onlyOwner returns (bool withdrawBool){\r\n        require(_receivers.length == _amounts.length, \"Arrays not of equal length\");\r\n        for(uint256 i=0; i<_receivers.length; i++){\r\n            _receivers[i].transfer(_amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool isItContract){\r\n          uint32 size;\r\n          assembly {\r\n            size := extcodesize(_addr)\r\n          }\r\n          return (size > 0);\r\n    }\r\n    \r\n    receive () payable external {\r\n        \r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getGasBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"retGas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBalanceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"retGas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfGas\",\"type\":\"uint256\"}],\"name\":\"transferGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"transferBool\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfGas\",\"type\":\"uint256\"}],\"name\":\"transferGasBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"transferBool\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGasByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawBool\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGasByOwnerBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawBool\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultipleGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawBool\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultipleGasBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawBool\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BNB_Stack_Distribution", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000027edb38c00afad061bec46c5c4c36f9fdd8cf33300000000000000000000000027edb38c00afad061bec46c5c4c36f9fdd8cf333000000000000000000000000e2ad8178d3da4a5169e7c563effebb710130fec9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4475802535f5ca258321cacfbd12c9df0e406819698aed4af8c0cb99fa111a06"}