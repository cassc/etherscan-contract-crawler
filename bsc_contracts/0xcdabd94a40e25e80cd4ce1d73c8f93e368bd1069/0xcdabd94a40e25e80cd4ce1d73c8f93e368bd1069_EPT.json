{"SourceCode": "pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n    library SafeMath {//konwnsec//\u5b89\u5168\u6570\u503c\u8fd0\u7b97\u5e93\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    contract EPT  {\r\n        using SafeMath for uint;\r\n        string public name; \r\n        string public symbol; \r\n        uint256 public decimals;\r\n        uint256 public totalSupply; \r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Burn(address indexed from, uint256 value);\r\n        constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint256 _decimals) public {\r\n            totalSupply = initialSupply * 10 ** _decimals;  \r\n            balanceOf[msg.sender] = totalSupply;  \r\n            name = tokenName;  \r\n            symbol = tokenSymbol; \r\n            decimals = _decimals; \r\n        }\r\n \r\n        function _transfer(address _from, address _to, uint _value) internal { \r\n            require(_to != address(0)&& _from != _to);\r\n            require(balanceOf[_from] >= _value);\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]); balanceOf[_from] = balanceOf[_from].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances); \r\n        }\r\n\r\n \r\n        function transfer(address _to, uint256 _value) public {\r\n            // require(_to != address(0) && _to != _from); \r\n            _transfer(msg.sender, _to, _value); \r\n        }\r\n\r\n \r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value <= allowance[_from][msg.sender]); // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); _transfer(_from, _to, _value);\r\n            return true; \r\n        }\r\n\r\n \r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            require(_spender != address(0));\r\n            require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true; \r\n        }\r\n\r\n \r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value); \r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \r\n            totalSupply = totalSupply.sub(_value); \r\n            emit Burn(msg.sender, _value);\r\n            return true; \r\n        }\r\n \r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[_from] >= _value); \r\n            require(_value <= allowance[_from][msg.sender]); \r\n            balanceOf[_from] = balanceOf[_from].sub(_value); \r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n             totalSupply = totalSupply.sub(_value); \r\n            emit Burn(_from, _value);\r\n            return true; \r\n        }\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EPT", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000011e1a300000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000003455054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034550540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4f3d9f94dc801de051d9e0ec5e7efee8073a00417bc6af7a316817156f2c5e4b"}