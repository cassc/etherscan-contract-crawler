{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n  \r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() virtual internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() virtual internal {\r\n      \r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\r\n        return;\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\nabstract contract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() override internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() virtual override internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    //super._willFallback();\r\n  }\r\n}\r\n\r\ninterface IAdminUpgradeabilityProxyView {\r\n  function admin() external view returns (address);\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n  \r\n  //function _willFallback() virtual override internal {\r\n    //super._willFallback();\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n  /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface IProxyFactory {\r\n    function productImplementation() external view returns (address);\r\n    function productImplementations(bytes32 name) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title ProductProxy\r\n * @dev This contract implements a proxy that \r\n * it is deploied by ProxyFactory, \r\n * and it's implementation is stored in factory.\r\n */\r\ncontract ProductProxy is Proxy {\r\n    \r\n  /**\r\n   * @dev Storage slot with the address of the ProxyFactory.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.factory\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\r\n  bytes32 internal constant NAME_SLOT    = 0x4cd9b827ca535ceb0880425d70eff88561ecdf04dc32fcf7ff3b15c587f8a870;      // bytes32(uint256(keccak256('eip1967.proxy.name')) - 1)\r\n\r\n  function _name() virtual internal view returns (bytes32 name_) {\r\n    bytes32 slot = NAME_SLOT;\r\n    assembly {  name_ := sload(slot)  }\r\n  }\r\n  \r\n  function _setName(bytes32 name_) internal {\r\n    bytes32 slot = NAME_SLOT;\r\n    assembly {  sstore(slot, name_)  }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the factory address of the ProductProxy.\r\n   * @param newFactory Address of the new factory.\r\n   */\r\n  function _setFactory(address newFactory) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newFactory), \"Cannot set a factory to a non-contract address\");\r\n\r\n    bytes32 slot = FACTORY_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newFactory)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the factory.\r\n   * @return factory_ Address of the factory.\r\n   */\r\n  function _factory() internal view returns (address factory_) {\r\n    bytes32 slot = FACTORY_SLOT;\r\n    assembly {\r\n      factory_ := sload(slot)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() virtual override internal view returns (address) {\r\n    address factory_ = _factory();\r\n    if(OpenZeppelinUpgradesAddress.isContract(factory_))\r\n        return IProxyFactory(factory_).productImplementations(_name());\r\n    else\r\n        return address(0);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableProductProxy\r\n * @dev Extends ProductProxy with an initializer for initializing\r\n * factory and init data.\r\n */\r\ncontract InitializableProductProxy is ProductProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param factory_ Address of the initial factory.\r\n   * @param data_ Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function __InitializableProductProxy_init(address factory_, bytes32 name_, bytes memory data_) public payable {\r\n    require(_factory() == address(0));\r\n    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\r\n    assert(NAME_SLOT    == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1));\r\n    _setFactory(factory_);\r\n    _setName(name_);\r\n    if(data_.length > 0) {\r\n      (bool success,) = _implementation().delegatecall(data_);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a - b : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if(sender != _msgSender() && _allowances[sender][_msgSender()] != uint(-1))\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20CappedUpgradeSafe is Initializable, ERC20UpgradeSafe {\r\n    uint256 internal _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n\r\n    function __ERC20Capped_init(uint256 cap) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20Capped_init_unchained(cap);\r\n    }\r\n\r\n    function __ERC20Capped_init_unchained(uint256 cap) internal initializer {\r\n\r\n\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() virtual public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - minted tokens must not cause the total supply to go over the cap.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) { // When minting tokens\r\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// https://github.com/hamdiallam/Solidity-RLP/blob/master/contracts/RLPReader.sol\r\n/*\r\n* @author Hamdi Allam hamdi.allam97@gmail.com\r\n* Please reach out with any questions or concerns\r\n*/\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START  = 0xb8;\r\n    uint8 constant LIST_SHORT_START   = 0xc0;\r\n    uint8 constant LIST_LONG_START    = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint len;\r\n        uint memPtr;\r\n    }\r\n\r\n    struct Iterator {\r\n        RLPItem item;   // Item that's being iterated over.\r\n        uint nextPtr;   // Position of the next item in the list.\r\n    }\r\n\r\n    /*\r\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\r\n    * @param self The iterator.\r\n    * @return The next element in the iteration.\r\n    */\r\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\r\n        require(hasNext(self));\r\n\r\n        uint ptr = self.nextPtr;\r\n        uint itemLength = _itemLength(ptr);\r\n        self.nextPtr = ptr + itemLength;\r\n\r\n        return RLPItem(itemLength, ptr);\r\n    }\r\n\r\n    /*\r\n    * @dev Returns true if the iteration has more elements.\r\n    * @param self The iterator.\r\n    * @return true if the iteration has more elements.\r\n    */\r\n    function hasNext(Iterator memory self) internal pure returns (bool) {\r\n        RLPItem memory item = self.item;\r\n        return self.nextPtr < item.memPtr + item.len;\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded bytes\r\n    */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        uint memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n    * @dev Create an iterator. Reverts if item is not a list.\r\n    * @param self The RLP item.\r\n    * @return An 'Iterator' over the item.\r\n    */\r\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\r\n        require(isList(self));\r\n\r\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\r\n        return Iterator(self, ptr);\r\n    }\r\n\r\n    /*\r\n    * @param the RLP item.\r\n    */\r\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\r\n        return item.len;\r\n    }\r\n\r\n    /*\r\n     * @param the RLP item.\r\n     * @return (memPtr, len) pair: location of the item's payload in memory.\r\n     */\r\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint memPtr = item.memPtr + offset;\r\n        uint len = item.len - offset; // data length\r\n        return (memPtr, len);\r\n    }\r\n\r\n    /*\r\n    * @param the RLP item.\r\n    */\r\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\r\n        (, uint len) = payloadLocation(item);\r\n        return len;\r\n    }\r\n\r\n    /*\r\n    * @param the RLP item containing the encoded list.\r\n    */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\r\n        require(isList(item));\r\n\r\n        uint items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n\r\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint dataLen;\r\n        for (uint i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr); \r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        if (item.len == 0) return false;\r\n\r\n        uint8 byte0;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of RLP encoded bytes.\r\n     */\r\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        uint256 ptr = item.memPtr;\r\n        uint256 len = item.len;\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(ptr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of the item payload.\r\n     */\r\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        (uint memPtr, uint len) = payloadLocation(item);\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(memPtr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        bytes memory result = new bytes(item.len);\r\n        if (result.length == 0) return result;\r\n        \r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    // any non-zero byte except \"0x80\" is considered true\r\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\r\n        require(item.len == 1);\r\n        uint result;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            result := byte(0, mload(memPtr))\r\n        }\r\n\r\n        // SEE Github Issue #5.\r\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\r\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\r\n        // here.\r\n        if (result == 0 || result == STRING_SHORT_START) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21);\r\n\r\n        return address(toUint(item));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint) {\r\n        require(item.len > 0 && item.len <= 33);\r\n\r\n        (uint memPtr, uint len) = payloadLocation(item);\r\n\r\n        uint result;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\r\n        // one byte prefix\r\n        require(item.len == 33);\r\n\r\n        uint result;\r\n        uint memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        require(item.len > 0);\r\n\r\n        (uint memPtr, uint len) = payloadLocation(item);\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(memPtr, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    * Private Helpers\r\n    */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint) {\r\n        if (item.len == 0) return 0;\r\n\r\n        uint count = 0;\r\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n           count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint memPtr) private pure returns (uint) {\r\n        uint itemLen;\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START)\r\n            itemLen = 1;\r\n        \r\n        else if (byte0 < STRING_LONG_START)\r\n            itemLen = byte0 - STRING_SHORT_START + 1;\r\n\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n                \r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } \r\n\r\n        else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) \r\n            return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\r\n            return 1;\r\n        else if (byte0 < LIST_SHORT_START)  // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else\r\n            return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n    * @param src Pointer to source\r\n    * @param dest Pointer to destination\r\n    * @param len Amount of memory to copy from the source\r\n    */\r\n    function copy(uint src, uint dest, uint len) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// https://github.com/bakaoh/solidity-rlp-encode/blob/master/contracts/RLPEncode.sol\r\n/**\r\n * @title RLPEncode\r\n * @dev A simple RLP encoding library.\r\n * @author Bakaoh\r\n */\r\nlibrary RLPEncode {\r\n    /*\r\n     * Internal functions\r\n     */\r\n\r\n    /**\r\n     * @dev RLP encodes a byte string.\r\n     * @param self The byte string to encode.\r\n     * @return The RLP encoded string in bytes.\r\n     */\r\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\r\n        bytes memory encoded;\r\n        if (self.length == 1 && uint8(self[0]) <= 128) {\r\n            encoded = self;\r\n        } else {\r\n            encoded = concat(encodeLength(self.length, 128), self);\r\n        }\r\n        return encoded;\r\n    }\r\n\r\n    /**\r\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\r\n     * @param self The list of RLP encoded byte strings.\r\n     * @return The RLP encoded list of items in bytes.\r\n     */\r\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\r\n        bytes memory list = flatten(self);\r\n        return concat(encodeLength(list.length, 192), list);\r\n    }\r\n\r\n    /**\r\n     * @dev RLP encodes a string.\r\n     * @param self The string to encode.\r\n     * @return The RLP encoded string in bytes.\r\n     */\r\n    function encodeString(string memory self) internal pure returns (bytes memory) {\r\n        return encodeBytes(bytes(self));\r\n    }\r\n\r\n    /** \r\n     * @dev RLP encodes an address.\r\n     * @param self The address to encode.\r\n     * @return The RLP encoded address in bytes.\r\n     */\r\n    function encodeAddress(address self) internal pure returns (bytes memory) {\r\n        bytes memory inputBytes;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\r\n            mstore(0x40, add(m, 52))\r\n            inputBytes := m\r\n        }\r\n        return encodeBytes(inputBytes);\r\n    }\r\n\r\n    /** \r\n     * @dev RLP encodes a uint.\r\n     * @param self The uint to encode.\r\n     * @return The RLP encoded uint in bytes.\r\n     */\r\n    function encodeUint(uint self) internal pure returns (bytes memory) {\r\n        return encodeBytes(toBinary(self));\r\n    }\r\n\r\n    /** \r\n     * @dev RLP encodes an int.\r\n     * @param self The int to encode.\r\n     * @return The RLP encoded int in bytes.\r\n     */\r\n    function encodeInt(int self) internal pure returns (bytes memory) {\r\n        return encodeUint(uint(self));\r\n    }\r\n\r\n    /** \r\n     * @dev RLP encodes a bool.\r\n     * @param self The bool to encode.\r\n     * @return The RLP encoded bool in bytes.\r\n     */\r\n    function encodeBool(bool self) internal pure returns (bytes memory) {\r\n        bytes memory encoded = new bytes(1);\r\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\r\n        return encoded;\r\n    }\r\n\r\n\r\n    /*\r\n     * Private functions\r\n     */\r\n\r\n    /**\r\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\r\n     * @param len The length of the string or the payload.\r\n     * @param offset 128 if item is string, 192 if item is list.\r\n     * @return RLP encoded bytes.\r\n     */\r\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\r\n        bytes memory encoded;\r\n        if (len < 56) {\r\n            encoded = new bytes(1);\r\n            encoded[0] = bytes32(len + offset)[31];\r\n        } else {\r\n            uint lenLen;\r\n            uint i = 1;\r\n            while (len / i != 0) {\r\n                lenLen++;\r\n                i *= 256;\r\n            }\r\n\r\n            encoded = new bytes(lenLen + 1);\r\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\r\n            for(i = 1; i <= lenLen; i++) {\r\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\r\n            }\r\n        }\r\n        return encoded;\r\n    }\r\n\r\n    /**\r\n     * @dev Encode integer in big endian binary form with no leading zeroes.\r\n     * @notice TODO: This should be optimized with assembly to save gas costs.\r\n     * @param _x The integer to encode.\r\n     * @return RLP encoded bytes.\r\n     */\r\n    function toBinary(uint _x) private pure returns (bytes memory) {\r\n        bytes memory b = new bytes(32);\r\n        assembly { \r\n            mstore(add(b, 32), _x) \r\n        }\r\n        uint i;\r\n        for (i = 0; i < 32; i++) {\r\n            if (b[i] != 0) {\r\n                break;\r\n            }\r\n        }\r\n        bytes memory res = new bytes(32 - i);\r\n        for (uint j = 0; j < res.length; j++) {\r\n            res[j] = b[i++];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev Copies a piece of memory to another location.\r\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\r\n     * @param _dest Destination location.\r\n     * @param _src Source location.\r\n     * @param _len Length of memory to copy.\r\n     */\r\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\r\n        uint dest = _dest;\r\n        uint src = _src;\r\n        uint len = _len;\r\n\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Flattens a list of byte strings into one byte string.\r\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\r\n     * @param _list List of byte strings to flatten.\r\n     * @return The flattened byte string.\r\n     */\r\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\r\n        if (_list.length == 0) {\r\n            return new bytes(0);\r\n        }\r\n\r\n        uint len;\r\n        uint i;\r\n        for (i = 0; i < _list.length; i++) {\r\n            len += _list[i].length;\r\n        }\r\n\r\n        bytes memory flattened = new bytes(len);\r\n        uint flattenedPtr;\r\n        assembly { flattenedPtr := add(flattened, 0x20) }\r\n\r\n        for(i = 0; i < _list.length; i++) {\r\n            bytes memory item = _list[i];\r\n            \r\n            uint listPtr;\r\n            assembly { listPtr := add(item, 0x20)}\r\n\r\n            memcpy(flattenedPtr, listPtr, item.length);\r\n            flattenedPtr += _list[i].length;\r\n        }\r\n\r\n        return flattened;\r\n    }\r\n\r\n    /**\r\n     * @dev Concatenates two bytes.\r\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\r\n     * @param _preBytes First byte string.\r\n     * @param _postBytes Second byte string.\r\n     * @return Both byte string combined.\r\n     */\r\n    function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes memory) {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            tempBytes := mload(0x40)\r\n\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n            let mc := add(tempBytes, 0x20)\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n            mc := end\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            mstore(0x40, and(\r\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n              not(31)\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n}\r\n\r\n\r\ncontract Governable is Initializable {\r\n    address public governor;\r\n\r\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev Contract initializer.\r\n     * called once by the factory at time of deployment\r\n     */\r\n    function __Governable_init_unchained(address governor_) virtual public initializer {\r\n        governor = governor_;\r\n        emit GovernorshipTransferred(address(0), governor);\r\n    }\r\n\r\n    modifier governance() {\r\n        require(msg.sender == governor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to relinquish control of the contract.\r\n     * @notice Renouncing to governorship will leave the contract without an governor.\r\n     * It will not be possible to call the functions with the `governance`\r\n     * modifier anymore.\r\n     */\r\n    function renounceGovernorship() public governance {\r\n        emit GovernorshipTransferred(governor, address(0));\r\n        governor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function transferGovernorship(address newGovernor) public governance {\r\n        _transferGovernorship(newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function _transferGovernorship(address newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit GovernorshipTransferred(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n}\r\n\r\n\r\ncontract ConfigurableBase {\r\n    mapping (bytes32 => uint) internal config;\r\n    \r\n    function getConfig(bytes32 key) public view returns (uint) {\r\n        return config[key];\r\n    }\r\n    function getConfigI(bytes32 key, uint index) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ index)];\r\n    }\r\n    function getConfigA(bytes32 key, address addr) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ uint(addr))];\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint value) internal {\r\n        if(config[key] != value)\r\n            config[key] = value;\r\n    }\r\n    function _setConfig(bytes32 key, uint index, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function _setConfig(bytes32 key, address addr, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}    \r\n\r\ncontract Configurable is Governable, ConfigurableBase {\r\n    function setConfig(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfigI(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfigA(bytes32 key, address addr, uint value) public governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}\r\n\r\n\r\n// Inheritancea\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function rewards(address account) external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function getReward() external;\r\n\r\n    function exit() external;\r\n}\r\n\r\nabstract contract RewardsDistributionRecipient {\r\n    address public rewardsDistribution;\r\n\r\n    function notifyRewardAmount(uint256 reward) virtual external;\r\n\r\n    modifier onlyRewardsDistribution() {\r\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuardUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;                  // obsoleted\r\n    uint256 public rewardsDuration = 60 days;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) override public rewards;\r\n\r\n    uint256 internal _totalSupply;\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    //constructor(\r\n    function __StakingRewards_init(\r\n        address _rewardsDistribution,\r\n        address _rewardsToken,\r\n        address _stakingToken\r\n    ) public initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n        __StakingRewards_init_unchained(_rewardsDistribution, _rewardsToken, _stakingToken);\r\n    }\r\n    \r\n    function __StakingRewards_init_unchained(address _rewardsDistribution, address _rewardsToken, address _stakingToken) public initializer {\r\n        rewardsToken = IERC20(_rewardsToken);\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsDistribution = _rewardsDistribution;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function totalSupply() virtual override public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) virtual override public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lastTimeRewardApplicable() override public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() virtual override public view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\r\n            );\r\n    }\r\n\r\n    function earned(address account) virtual override public view returns (uint256) {\r\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\r\n    }\r\n\r\n    function getRewardForDuration() virtual override external view returns (uint256) {\r\n        return rewardRate.mul(rewardsDuration);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual public nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n\r\n        // permit\r\n        IPermit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function stake(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() virtual override public nonReentrant updateReward(msg.sender) {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function exit() virtual override public {\r\n        withdraw(_balances[msg.sender]);\r\n        getReward();\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function notifyRewardAmount(uint256 reward) override external onlyRewardsDistribution updateReward(address(0)) {\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(rewardsDuration);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(rewardsDuration);\r\n        }\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint balance = rewardsToken.balanceOf(address(this));\r\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(rewardsDuration);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier updateReward(address account) virtual {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\n\r\ninterface IPermit {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\ncontract Constants {\r\n    bytes32 internal constant _TokenMapped_     = 'TokenMapped';\r\n    bytes32 internal constant _MappableToken_   = 'MappableToken';\r\n    bytes32 internal constant _MappingToken_    = 'MappingToken';\r\n    bytes32 internal constant _fee_             = 'fee';\r\n    bytes32 internal constant _feeCreate_       = 'feeCreate';\r\n    bytes32 internal constant _feeRegister_     = 'feeRegister';\r\n    bytes32 internal constant _feeTo_           = 'feeTo';\r\n    bytes32 internal constant _onlyDeployer_    = 'onlyDeployer';\r\n    bytes32 internal constant _minSignatures_   = 'minSignatures';\r\n    bytes32 internal constant _initQuotaRatio_  = 'initQuotaRatio';\r\n    bytes32 internal constant _autoQuotaRatio_  = 'autoQuotaRatio';\r\n    bytes32 internal constant _autoQuotaPeriod_ = 'autoQuotaPeriod';\r\n    //bytes32 internal constant _uniswapRounter_  = 'uniswapRounter';\r\n    \r\n    function _chainId() internal pure returns (uint id) {\r\n        assembly { id := chainid() }\r\n    }\r\n}\r\n\r\nstruct Signature {\r\n    address signatory;\r\n    uint8   v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n}\r\n\r\nabstract contract MappingBase is ContextUpgradeSafe, Constants {\r\n\tusing SafeMath for uint;\r\n\r\n    bytes32 public constant RECEIVE_TYPEHASH = keccak256(\"Receive(uint256 fromChainId,address to,uint256 nonce,uint256 volume,address signatory)\");\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 internal _DOMAIN_SEPARATOR;\r\n    function DOMAIN_SEPARATOR() virtual public view returns (bytes32) {  return _DOMAIN_SEPARATOR;  }\r\n\r\n    address public factory;\r\n    uint256 public mainChainId;\r\n    address public token;\r\n    address public deployer;\r\n    \r\n    mapping (address => uint) internal _authQuotas;                                     // signatory => quota\r\n    mapping (uint => mapping (address => uint)) public sentCount;                       // toChainId => to => sentCount\r\n    mapping (uint => mapping (address => mapping (uint => uint))) public sent;          // toChainId => to => nonce => volume\r\n    mapping (uint => mapping (address => mapping (uint => uint))) public received;      // fromChainId => to => nonce => volume\r\n    mapping (address => uint) public lasttimeUpdateQuotaOf;                             // signatory => lasttime\r\n    uint public autoQuotaRatio;\r\n    uint public autoQuotaPeriod;\r\n    \r\n    function setAutoQuota(uint ratio, uint period) virtual external onlyFactory {\r\n        autoQuotaRatio  = ratio;\r\n        autoQuotaPeriod = period;\r\n    }\r\n    \r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, 'Only called by Factory');\r\n        _;\r\n    }\r\n    \r\n    modifier updateAutoQuota(address signatory) virtual {\r\n        uint quota = authQuotaOf(signatory);\r\n        if(_authQuotas[signatory] != quota) {\r\n            _authQuotas[signatory] = quota;\r\n            lasttimeUpdateQuotaOf[signatory] = now;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function authQuotaOf(address signatory) virtual public view returns (uint quota) {\r\n        quota = _authQuotas[signatory];\r\n        uint ratio  = autoQuotaRatio  != 0 ? autoQuotaRatio  : Factory(factory).getConfig(_autoQuotaRatio_);\r\n        uint period = autoQuotaPeriod != 0 ? autoQuotaPeriod : Factory(factory).getConfig(_autoQuotaPeriod_);\r\n        if(ratio == 0 || period == 0 || period == uint(-1))\r\n            return quota;\r\n        uint quotaCap = cap().mul(ratio).div(1e18);\r\n        uint delta = quotaCap.mul(now.sub(lasttimeUpdateQuotaOf[signatory])).div(period);\r\n        return Math.max(quota, Math.min(quotaCap, quota.add(delta)));\r\n    }\r\n    \r\n    function cap() public view virtual returns (uint);\r\n\r\n    function increaseAuthQuotas(address[] memory signatories, uint[] memory increments) virtual external returns (uint[] memory quotas) {\r\n        require(signatories.length == increments.length, 'two array lenth not equal');\r\n        quotas = new uint[](signatories.length);\r\n        for(uint i=0; i<signatories.length; i++)\r\n            quotas[i] = increaseAuthQuota(signatories[i], increments[i]);\r\n    }\r\n    \r\n    function increaseAuthQuota(address signatory, uint increment) virtual public updateAutoQuota(signatory) onlyFactory returns (uint quota) {\r\n        quota = _authQuotas[signatory].add(increment);\r\n        _authQuotas[signatory] = quota;\r\n        emit IncreaseAuthQuota(signatory, increment, quota);\r\n    }\r\n    event IncreaseAuthQuota(address indexed signatory, uint increment, uint quota);\r\n    \r\n    function decreaseAuthQuotas(address[] memory signatories, uint[] memory decrements) virtual external returns (uint[] memory quotas) {\r\n        require(signatories.length == decrements.length, 'two array lenth not equal');\r\n        quotas = new uint[](signatories.length);\r\n        for(uint i=0; i<signatories.length; i++)\r\n            quotas[i] = decreaseAuthQuota(signatories[i], decrements[i]);\r\n    }\r\n    \r\n    function decreaseAuthQuota(address signatory, uint decrement) virtual public onlyFactory returns (uint quota) {\r\n        quota = authQuotaOf(signatory);\r\n        if(quota < decrement)\r\n            decrement = quota;\r\n        return _decreaseAuthQuota(signatory, decrement);\r\n    }\r\n    \r\n    function _decreaseAuthQuota(address signatory, uint decrement) virtual internal updateAutoQuota(signatory) returns (uint quota) {\r\n        quota = _authQuotas[signatory].sub(decrement);\r\n        _authQuotas[signatory] = quota;\r\n        emit DecreaseAuthQuota(signatory, decrement, quota);\r\n    }\r\n    event DecreaseAuthQuota(address indexed signatory, uint decrement, uint quota);\r\n    \r\n\r\n    function needApprove() virtual public pure returns (bool);\r\n    \r\n    function send(uint toChainId, address to, uint volume) virtual external payable returns (uint nonce) {\r\n        return sendFrom(_msgSender(), toChainId, to, volume);\r\n    }\r\n    \r\n    function sendFrom(address from, uint toChainId, address to, uint volume) virtual public payable returns (uint nonce) {\r\n        _chargeFee();\r\n        _sendFrom(from, volume);\r\n        nonce = sentCount[toChainId][to]++;\r\n        sent[toChainId][to][nonce] = volume;\r\n        emit Send(from, toChainId, to, nonce, volume);\r\n    }\r\n    event Send(address indexed from, uint indexed toChainId, address indexed to, uint nonce, uint volume);\r\n    \r\n    function _sendFrom(address from, uint volume) virtual internal;\r\n\r\n    function receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, Signature[] memory signatures) virtual external payable {\r\n        _chargeFee();\r\n        require(received[fromChainId][to][nonce] == 0, 'withdrawn already');\r\n        uint N = signatures.length;\r\n        require(N >= Factory(factory).getConfig(_minSignatures_), 'too few signatures');\r\n        for(uint i=0; i<N; i++) {\r\n            for(uint j=0; j<i; j++)\r\n                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\r\n            bytes32 structHash = keccak256(abi.encode(RECEIVE_TYPEHASH, fromChainId, to, nonce, volume, signatures[i].signatory));\r\n            bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _DOMAIN_SEPARATOR, structHash));\r\n            address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s);\r\n            require(signatory != address(0), \"invalid signature\");\r\n            require(signatory == signatures[i].signatory, \"unauthorized\");\r\n            _decreaseAuthQuota(signatures[i].signatory, volume);\r\n            emit Authorize(fromChainId, to, nonce, volume, signatory);\r\n        }\r\n        received[fromChainId][to][nonce] = volume;\r\n        _receive(to, volume);\r\n        emit Receive(fromChainId, to, nonce, volume);\r\n    }\r\n    event Receive(uint256 indexed fromChainId, address indexed to, uint256 indexed nonce, uint256 volume);\r\n    event Authorize(uint256 fromChainId, address indexed to, uint256 indexed nonce, uint256 volume, address indexed signatory);\r\n    \r\n    function _receive(address to, uint256 volume) virtual internal;\r\n    \r\n    function _chargeFee() virtual internal {\r\n        require(msg.value >= Math.min(Factory(factory).getConfig(_fee_), 0.1 ether), 'fee is too low');\r\n        address payable feeTo = address(Factory(factory).getConfig(_feeTo_));\r\n        if(feeTo == address(0))\r\n            feeTo = address(uint160(factory));\r\n        feeTo.transfer(msg.value);\r\n        emit ChargeFee(_msgSender(), feeTo, msg.value);\r\n    }\r\n    event ChargeFee(address indexed from, address indexed to, uint value);\r\n\r\n    uint256[47] private __gap;\r\n}    \r\n    \r\n    \r\ncontract TokenMapped is MappingBase {\r\n    using SafeERC20 for IERC20;\r\n    \r\n\tfunction __TokenMapped_init(address factory_, address token_) external initializer {\r\n        __Context_init_unchained();\r\n\t\t__TokenMapped_init_unchained(factory_, token_);\r\n\t}\r\n\t\r\n\tfunction __TokenMapped_init_unchained(address factory_, address token_) public initializer {\r\n        factory = factory_;\r\n        mainChainId = _chainId();\r\n        token = token_;\r\n        deployer = address(0);\r\n        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(ERC20UpgradeSafe(token).name())), _chainId(), address(this)));\r\n\t}\r\n\t\r\n    function cap() virtual override public view returns (uint) {\r\n        return IERC20(token).totalSupply();\r\n    }\r\n    \r\n    function totalMapped() virtual public view returns (uint) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    function needApprove() virtual override public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n    function _sendFrom(address from, uint volume) virtual override internal {\r\n        IERC20(token).safeTransferFrom(from, address(this), volume);\r\n    }\r\n\r\n    function _receive(address to, uint256 volume) virtual override internal {\r\n        IERC20(token).safeTransfer(to, volume);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n/*\r\ncontract TokenMapped2 is TokenMapped, StakingRewards, ConfigurableBase {\r\n    modifier governance {\r\n        require(_msgSender() == MappingTokenFactory(factory).governor());\r\n        _;\r\n    }\r\n    \r\n    function setConfig(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfigI(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfigA(bytes32 key, address addr, uint value) public governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n\r\n    function rewardDelta() public view returns (uint amt) {\r\n        if(begin == 0 || begin >= now || lastUpdateTime >= now)\r\n            return 0;\r\n            \r\n        amt = rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\r\n        \r\n        // calc rewardDelta in period\r\n        if(lep == 3) {                                                              // power\r\n            uint y = period.mul(1 ether).div(lastUpdateTime.add(rewardsDuration).sub(begin));\r\n            uint amt1 = amt.mul(1 ether).div(y);\r\n            uint amt2 = amt1.mul(period).div(now.add(rewardsDuration).sub(begin));\r\n            amt = amt.sub(amt2);\r\n        } else if(lep == 2) {                                                       // exponential\r\n            if(now.sub(lastUpdateTime) < rewardsDuration)\r\n                amt = amt.mul(now.sub(lastUpdateTime)).div(rewardsDuration);\r\n        }else if(now < periodFinish)                                                // linear\r\n            amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime));\r\n        else if(lastUpdateTime >= periodFinish)\r\n            amt = 0;\r\n    }\r\n    \r\n    function rewardPerToken() virtual override public view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                rewardDelta().mul(1e18).div(_totalSupply)\r\n            );\r\n    }\r\n\r\n    modifier updateReward(address account) virtual override {\r\n        (uint delta, uint d) = (rewardDelta(), 0);\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = now;\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n\r\n        address addr = address(config[_ecoAddr_]);\r\n        uint ratio = config[_ecoRatio_];\r\n        if(addr != address(0) && ratio != 0) {\r\n            d = delta.mul(ratio).div(1 ether);\r\n            rewards[addr] = rewards[addr].add(d);\r\n        }\r\n        rewards[address(0)] = rewards[address(0)].add(delta).add(d);\r\n        _;\r\n    }\r\n\r\n    function getReward() virtual override public {\r\n        getReward(msg.sender);\r\n    }\r\n    function getReward(address payable acct) virtual public nonReentrant updateReward(acct) {\r\n        require(acct != address(0), 'invalid address');\r\n        require(getConfig(_blocklist_, acct) == 0, 'In blocklist');\r\n        bool isContract = acct.isContract();\r\n        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, acct) != 0, 'No allowContract');\r\n\r\n        uint256 reward = rewards[acct];\r\n        if (reward > 0) {\r\n            paid[acct] = paid[acct].add(reward);\r\n            paid[address(0)] = paid[address(0)].add(reward);\r\n            rewards[acct] = 0;\r\n            rewards[address(0)] = rewards[address(0)].sub0(reward);\r\n            rewardsToken.safeTransferFrom(rewardsDistribution, acct, reward);\r\n            emit RewardPaid(acct, reward);\r\n        }\r\n    }\r\n\r\n    function getRewardForDuration() override external view returns (uint256) {\r\n        return rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\r\n    }\r\n    \r\n}\r\n*/\r\n\r\nabstract contract Permit {\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    function DOMAIN_SEPARATOR() virtual public view returns (bytes32);\r\n\r\n    mapping (address => uint) public nonces;\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'permit EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR(),\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual;    \r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\ncontract MappableToken is Permit, ERC20UpgradeSafe, MappingBase {\r\n\tfunction __MappableToken_init(address factory_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) external initializer {\r\n        __Context_init_unchained();\r\n\t\t__ERC20_init_unchained(name_, symbol_);\r\n\t\t_setupDecimals(decimals_);\r\n\t\t_mint(deployer_, totalSupply_);\r\n\t\t__MappableToken_init_unchained(factory_, deployer_);\r\n\t}\r\n\t\r\n\tfunction __MappableToken_init_unchained(address factory_, address deployer_) public initializer {\r\n        factory = factory_;\r\n        mainChainId = _chainId();\r\n        token = address(0);\r\n        deployer = deployer_;\r\n        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));\r\n\t}\r\n\t\r\n    function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32) {\r\n        return MappingBase.DOMAIN_SEPARATOR();\r\n    }\r\n    \r\n    function cap() virtual override public view returns (uint) {\r\n        return totalSupply();\r\n    }\r\n    \r\n    function totalMapped() virtual public view returns (uint) {\r\n        return balanceOf(address(this));\r\n    }\r\n    \r\n    function needApprove() virtual override public pure returns (bool) {\r\n        return false;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal {\r\n        return ERC20UpgradeSafe._approve(owner, spender, amount);\r\n    }\r\n    \r\n    function _sendFrom(address from, uint volume) virtual override internal {\r\n        transferFrom(from, address(this), volume);\r\n    }\r\n\r\n    function _receive(address to, uint256 volume) virtual override internal {\r\n        _transfer(address(this), to, volume);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\ncontract MappingToken is Permit, ERC20CappedUpgradeSafe, MappingBase {\r\n\tfunction __MappingToken_init(address factory_, uint mainChainId_, address token_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) external initializer {\r\n        __Context_init_unchained();\r\n\t\t__ERC20_init_unchained(name_, symbol_);\r\n\t\t_setupDecimals(decimals_);\r\n\t\t__ERC20Capped_init_unchained(cap_);\r\n\t\t__MappingToken_init_unchained(factory_, mainChainId_, token_, deployer_);\r\n\t}\r\n\t\r\n\tfunction __MappingToken_init_unchained(address factory_, uint mainChainId_, address token_, address deployer_) public initializer {\r\n        factory = factory_;\r\n        mainChainId = mainChainId_;\r\n        token = token_;\r\n        deployer = (token_ == address(0)) ? deployer_ : address(0);\r\n        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));\r\n\t}\r\n\t\r\n    function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32) {\r\n        return MappingBase.DOMAIN_SEPARATOR();\r\n    }\r\n    \r\n    function cap() virtual override(ERC20CappedUpgradeSafe, MappingBase) public view returns (uint) {\r\n        return ERC20CappedUpgradeSafe.cap();\r\n    }\r\n    \r\n    //function setCap(uint cap_) external {\r\n    //    require(_msgSender() == Factory(factory).governor());\r\n    //    _cap = cap_;\r\n    //}\r\n    \r\n    function needApprove() virtual override public pure returns (bool) {\r\n        return false;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal {\r\n        return ERC20UpgradeSafe._approve(owner, spender, amount);\r\n    }\r\n    \r\n    function _sendFrom(address from, uint volume) virtual override internal {\r\n        _burn(from, volume);\r\n        if(from != _msgSender() && allowance(from, _msgSender()) != uint(-1))\r\n            _approve(from, _msgSender(), allowance(from, _msgSender()).sub(volume, \"ERC20: transfer volume exceeds allowance\"));\r\n    }\r\n\r\n    function _receive(address to, uint256 volume) virtual override internal {\r\n        _mint(to, volume);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\ncontract MappingTokenProxy is ProductProxy, Constants {\r\n    constructor(address factory_, uint mainChainId_, address token_, address deployer_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) public {\r\n        //require(_factory() == address(0));\r\n        assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\r\n        assert(NAME_SLOT    == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1));\r\n        _setFactory(factory_);\r\n        _setName(_MappingToken_);\r\n        (bool success,) = _implementation().delegatecall(abi.encodeWithSignature('__MappingToken_init(address,uint256,address,address,string,string,uint8,uint256)', factory_, mainChainId_, token_, deployer_, name_, symbol_, decimals_, cap_));\r\n        require(success);\r\n    }  \r\n}\r\n\r\n\r\ncontract Factory is ContextUpgradeSafe, Configurable, Constants {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant REGISTER_TYPEHASH   = keccak256(\"RegisterMapping(uint mainChainId,address token,uint[] chainIds,address[] mappingTokenMappeds,address signatory)\");\r\n    bytes32 public constant CREATE_TYPEHASH     = keccak256(\"CreateMappingToken(address deployer,uint mainChainId,address token,string name,string symbol,uint8 decimals,uint cap,address signatory)\");\r\n    bytes32 public constant DOMAIN_TYPEHASH     = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    mapping (bytes32 => address) public productImplementations;\r\n    mapping (address => address) public tokenMappeds;                // token => tokenMapped\r\n    mapping (address => address) public mappableTokens;              // deployer => mappableTokens\r\n    mapping (uint256 => mapping (address => address)) public mappingTokens;     // mainChainId => token or deployer => mappableTokens\r\n    mapping (address => bool) public authorties;\r\n    \r\n    // only on ethereum mainnet\r\n    mapping (address => uint) public authCountOf;                   // signatory => count\r\n    mapping (address => uint256) internal _mainChainIdTokens;       // mappingToken => mainChainId+token\r\n    mapping (address => mapping (uint => address)) public mappingTokenMappeds;  // token => chainId => mappingToken or tokenMapped\r\n    uint[] public supportChainIds;\r\n    mapping (string  => uint256) internal _certifiedTokens;         // symbol => mainChainId+token\r\n    string[] public certifiedSymbols;\r\n    address[] public signatories;\r\n\r\n    function __MappingTokenFactory_init(address _governor, address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) external initializer {\r\n        __Governable_init_unchained(_governor);\r\n        __MappingTokenFactory_init_unchained(_implTokenMapped, _implMappableToken, _implMappingToken, _feeTo);\r\n    }\r\n    \r\n    function __MappingTokenFactory_init_unchained(address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) public governance {\r\n        config[_fee_]                           = 0.005 ether;\r\n        config[_feeCreate_]                     = 0.100 ether;\r\n        config[_feeRegister_]                   = 0.200 ether;\r\n        config[_feeTo_]                         = uint(_feeTo);\r\n        config[_onlyDeployer_]                  = 1;\r\n        config[_minSignatures_]                 = 3;\r\n        config[_initQuotaRatio_]                = 0.100 ether;  // 10%\r\n        config[_autoQuotaRatio_]                = 0.010 ether;  //  1%\r\n        config[_autoQuotaPeriod_]               = 1 days;\r\n        //config[_uniswapRounter_]                = uint(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('MappingTokenFactory')), _chainId(), address(this)));\r\n        upgradeProductImplementationsTo_(_implTokenMapped, _implMappableToken, _implMappingToken);\r\n        emit ProductProxyCodeHash(keccak256(type(InitializableProductProxy).creationCode));\r\n    }\r\n    event ProductProxyCodeHash(bytes32 codeHash);\r\n\r\n    function upgradeProductImplementationsTo_(address _implTokenMapped, address _implMappableToken, address _implMappingToken) public governance {\r\n        productImplementations[_TokenMapped_]   = _implTokenMapped;\r\n        productImplementations[_MappableToken_] = _implMappableToken;\r\n        productImplementations[_MappingToken_]  = _implMappingToken;\r\n    }\r\n    \r\n    function setSignatories(address[] calldata signatories_) virtual external governance {\r\n        signatories = signatories_;\r\n        emit SetSignatories(signatories_);\r\n    }\r\n    event SetSignatories(address[] signatories_);\r\n    \r\n    function setAuthorty_(address authorty, bool enable) virtual external governance {\r\n        authorties[authorty] = enable;\r\n        emit SetAuthorty(authorty, enable);\r\n    }\r\n    event SetAuthorty(address indexed authorty, bool indexed enable);\r\n    \r\n    function setAutoQuota(address mappingTokenMapped, uint ratio, uint period) virtual external governance {\r\n        if(mappingTokenMapped == address(0)) {\r\n            config[_autoQuotaRatio_]  = ratio;\r\n            config[_autoQuotaPeriod_] = period;\r\n        } else\r\n            MappingBase(mappingTokenMapped).setAutoQuota(ratio, period);\r\n    }\r\n    \r\n    modifier onlyAuthorty {\r\n        require(authorties[_msgSender()], 'only authorty');\r\n        _;\r\n    }\r\n    \r\n    function _initAuthQuotas(address mappingTokenMapped, uint cap) internal {\r\n        uint quota = cap.mul(config[_initQuotaRatio_]).div(1e18);\r\n        uint[] memory quotas = new uint[](signatories.length);\r\n        for(uint i=0; i<quotas.length; i++)\r\n            quotas[i] = quota;\r\n        _increaseAuthQuotas(mappingTokenMapped, signatories, quotas);\r\n    }\r\n    \r\n    function _increaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory increments) virtual internal returns (uint[] memory quotas) {\r\n        quotas = MappingBase(mappingTokenMapped).increaseAuthQuotas(signatories_, increments);\r\n        for(uint i=0; i<signatories_.length; i++)\r\n            emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatories_[i], increments[i], quotas[i]);\r\n    }\r\n    function increaseAuthQuotas_(address mappingTokenMapped, uint[] memory increments) virtual external onlyAuthorty returns (uint[] memory quotas) {\r\n        return _increaseAuthQuotas(mappingTokenMapped, signatories, increments);\r\n    }\r\n    function increaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory increments) virtual external onlyAuthorty returns (uint[] memory quotas) {\r\n        return _increaseAuthQuotas(mappingTokenMapped, signatories_, increments);\r\n    }\r\n    \r\n    function increaseAuthQuota(address mappingTokenMapped, address signatory, uint increment) virtual external onlyAuthorty returns (uint quota) {\r\n        quota = MappingBase(mappingTokenMapped).increaseAuthQuota(signatory, increment);\r\n        emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, increment, quota);\r\n    }\r\n    event IncreaseAuthQuota(address indexed authorty, address indexed mappingTokenMapped, address indexed signatory, uint increment, uint quota);\r\n    \r\n    function decreaseAuthQuotas_(address mappingTokenMapped, uint[] memory decrements) virtual external returns (uint[] memory quotas) {\r\n        return decreaseAuthQuotas(mappingTokenMapped, signatories, decrements);\r\n    }\r\n    function decreaseAuthQuotas(address mappingTokenMapped, address[] memory signatories_, uint[] memory decrements) virtual public onlyAuthorty returns (uint[] memory quotas) {\r\n        quotas = MappingBase(mappingTokenMapped).decreaseAuthQuotas(signatories_, decrements);\r\n        for(uint i=0; i<signatories_.length; i++)\r\n            emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatories_[i], decrements[i], quotas[i]);\r\n    }\r\n    \r\n    function decreaseAuthQuota(address mappingTokenMapped, address signatory, uint decrement) virtual external onlyAuthorty returns (uint quota) {\r\n        quota = MappingBase(mappingTokenMapped).decreaseAuthQuota(signatory, decrement);\r\n        emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, decrement, quota);\r\n    }\r\n    event DecreaseAuthQuota(address indexed authorty, address indexed mappingTokenMapped, address indexed signatory, uint decrement, uint quota);\r\n\r\n    function increaseAuthCounts_(uint[] memory increments) virtual external returns (uint[] memory counts) {\r\n        return increaseAuthCounts(signatories, increments);\r\n    }\r\n    function increaseAuthCounts(address[] memory signatories_, uint[] memory increments) virtual public returns (uint[] memory counts) {\r\n        require(signatories_.length == increments.length, 'two array lenth not equal');\r\n        counts = new uint[](signatories_.length);\r\n        for(uint i=0; i<signatories_.length; i++)\r\n            counts[i] = increaseAuthCount(signatories_[i], increments[i]);\r\n    }\r\n    \r\n    function increaseAuthCount(address signatory, uint increment) virtual public onlyAuthorty returns (uint count) {\r\n        count = authCountOf[signatory].add(increment);\r\n        authCountOf[signatory] = count;\r\n        emit IncreaseAuthQuota(_msgSender(), signatory, increment, count);\r\n    }\r\n    event IncreaseAuthQuota(address indexed authorty, address indexed signatory, uint increment, uint quota);\r\n    \r\n    function decreaseAuthCounts_(uint[] memory decrements) virtual external returns (uint[] memory counts) {\r\n        return decreaseAuthCounts(signatories, decrements);\r\n    }\r\n    function decreaseAuthCounts(address[] memory signatories_, uint[] memory decrements) virtual public returns (uint[] memory counts) {\r\n        require(signatories_.length == decrements.length, 'two array lenth not equal');\r\n        counts = new uint[](signatories_.length);\r\n        for(uint i=0; i<signatories_.length; i++)\r\n            counts[i] = decreaseAuthCount(signatories_[i], decrements[i]);\r\n    }\r\n    \r\n    function decreaseAuthCount(address signatory, uint decrement) virtual public onlyAuthorty returns (uint count) {\r\n        count = authCountOf[signatory];\r\n        if(count < decrement)\r\n            decrement = count;\r\n        return _decreaseAuthCount(signatory, decrement);\r\n    }\r\n    \r\n    function _decreaseAuthCount(address signatory, uint decrement) virtual internal returns (uint count) {\r\n        count = authCountOf[signatory].sub(decrement);\r\n        authCountOf[signatory] = count;\r\n        emit DecreaseAuthCount(_msgSender(), signatory, decrement, count);\r\n    }\r\n    event DecreaseAuthCount(address indexed authorty, address indexed signatory, uint decrement, uint count);\r\n\r\n    function supportChainCount() public view returns (uint) {\r\n        return supportChainIds.length;\r\n    }\r\n    \r\n    function mainChainIdTokens(address mappingToken) virtual public view returns(uint mainChainId, address token) {\r\n        uint256 chainIdToken = _mainChainIdTokens[mappingToken];\r\n        mainChainId = chainIdToken >> 160;\r\n        token = address(chainIdToken);\r\n    }\r\n    \r\n    function chainIdMappingTokenMappeds(address tokenOrMappingToken) virtual external view returns (uint[] memory chainIds, address[] memory mappingTokenMappeds_) {\r\n        (, address token) = mainChainIdTokens(tokenOrMappingToken);\r\n        if(token == address(0))\r\n            token = tokenOrMappingToken;\r\n        uint N = 0;\r\n        for(uint i=0; i<supportChainCount(); i++)\r\n            if(mappingTokenMappeds[token][supportChainIds[i]] != address(0))\r\n                N++;\r\n        chainIds = new uint[](N);\r\n        mappingTokenMappeds_ = new address[](N);\r\n        uint j = 0;\r\n        for(uint i=0; i<supportChainCount(); i++) {\r\n            uint chainId = supportChainIds[i];\r\n            address mappingTokenMapped = mappingTokenMappeds[token][chainId];\r\n            if(mappingTokenMapped != address(0)) {\r\n                chainIds[j] = chainId;\r\n                mappingTokenMappeds_[j] = mappingTokenMapped;\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function isSupportChainId(uint chainId) virtual public view returns (bool) {\r\n        for(uint i=0; i<supportChainCount(); i++)\r\n            if(supportChainIds[i] == chainId)\r\n                return true;\r\n        return false;\r\n    }\r\n    \r\n    function registerSupportChainId_(uint chainId_) virtual external governance {\r\n        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\r\n        require(!isSupportChainId(chainId_), 'support chainId already');\r\n        supportChainIds.push(chainId_);\r\n    }\r\n    \r\n    function _registerMapping(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual internal {\r\n        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\r\n        require(chainIds.length == mappingTokenMappeds_.length, 'two array lenth not equal');\r\n        require(isSupportChainId(mainChainId), 'Not support mainChainId');\r\n        for(uint i=0; i<chainIds.length; i++) {\r\n            require(isSupportChainId(chainIds[i]), 'Not support chainId');\r\n            require(token == mappingTokenMappeds_[i] || mappingTokenMappeds_[i] == calcMapping(mainChainId, token) || _msgSender() == governor, 'invalid mappingTokenMapped address');\r\n            //require(_mainChainIdTokens[mappingTokenMappeds_[i]] == 0 || _mainChainIdTokens[mappingTokenMappeds_[i]] == (mainChainId << 160) | uint(token), 'mainChainIdTokens exist already');\r\n            //require(mappingTokenMappeds[token][chainIds[i]] == address(0), 'mappingTokenMappeds exist already');\r\n            //if(_mainChainIdTokens[mappingTokenMappeds_[i]] == 0)\r\n                _mainChainIdTokens[mappingTokenMappeds_[i]] = (mainChainId << 160) | uint(token);\r\n            mappingTokenMappeds[token][chainIds[i]] = mappingTokenMappeds_[i];\r\n            emit RegisterMapping(mainChainId, token, chainIds[i], mappingTokenMappeds_[i]);\r\n        }\r\n    }\r\n    event RegisterMapping(uint mainChainId, address token, uint chainId, address mappingTokenMapped);\r\n    \r\n    function registerMapping_(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual external governance {\r\n        _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);\r\n    }\r\n    \r\n    function registerMapping(uint mainChainId, address token, uint nonce, uint[] memory chainIds, address[] memory mappingTokenMappeds_, Signature[] memory signatures) virtual external payable {\r\n        _chargeFee(config[_feeRegister_]);\r\n        require(config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer');\r\n        uint N = signatures.length;\r\n        require(N >= getConfig(_minSignatures_), 'too few signatures');\r\n        for(uint i=0; i<N; i++) {\r\n            for(uint j=0; j<i; j++)\r\n                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\r\n            bytes32 structHash = keccak256(abi.encode(REGISTER_TYPEHASH, mainChainId, token, keccak256(abi.encodePacked(chainIds)), keccak256(abi.encodePacked(mappingTokenMappeds_)), signatures[i].signatory));\r\n            bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\r\n            address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s);\r\n            require(signatory != address(0), \"invalid signature\");\r\n            require(signatory == signatures[i].signatory, \"unauthorized\");\r\n            _decreaseAuthCount(signatures[i].signatory, 1);\r\n            emit AuthorizeRegister(mainChainId, token, signatory);\r\n        }\r\n        _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);\r\n    }\r\n    event AuthorizeRegister(uint indexed mainChainId, address indexed token, address indexed signatory);\r\n\r\n    function certifiedCount() external view returns (uint) {\r\n        return certifiedSymbols.length;\r\n    }\r\n    \r\n    function certifiedTokens(string memory symbol) public view returns (uint mainChainId, address token) {\r\n        uint256 chainIdToken = _certifiedTokens[symbol];\r\n        mainChainId = chainIdToken >> 160;\r\n        token = address(chainIdToken);\r\n    }\r\n    \r\n    function allCertifiedTokens() external view returns (string[] memory symbols, uint[] memory chainIds, address[] memory tokens) {\r\n        symbols = certifiedSymbols;\r\n        uint N = certifiedSymbols.length;\r\n        chainIds = new uint[](N);\r\n        tokens = new address[](N);\r\n        for(uint i=0; i<N; i++)\r\n            (chainIds[i], tokens[i]) = certifiedTokens(certifiedSymbols[i]);\r\n    }\r\n\r\n    function registerCertified_(string memory symbol, uint mainChainId, address token) external governance {\r\n        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\r\n        require(isSupportChainId(mainChainId), 'Not support mainChainId');\r\n        require(_certifiedTokens[symbol] == 0, 'Certified added already');\r\n        if(mainChainId == _chainId())\r\n            require(keccak256(bytes(symbol)) == keccak256(bytes(ERC20UpgradeSafe(token).symbol())), 'symbol different');\r\n        _certifiedTokens[symbol] = (mainChainId << 160) | uint(token);\r\n        certifiedSymbols.push(symbol);\r\n        emit RegisterCertified(symbol, mainChainId, token);\r\n    }\r\n    event RegisterCertified(string indexed symbol, uint indexed mainChainId, address indexed token);\r\n    \r\n    //function updateCertified_(string memory symbol, uint mainChainId, address token) external governance {\r\n    //    require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\r\n    //    require(isSupportChainId(mainChainId), 'Not support mainChainId');\r\n    //    //require(_certifiedTokens[symbol] == 0, 'Certified added already');\r\n    //    if(mainChainId == _chainId())\r\n    //        require(keccak256(bytes(symbol)) == keccak256(bytes(ERC20UpgradeSafe(token).symbol())), 'symbol different');\r\n    //    _certifiedTokens[symbol] = (mainChainId << 160) | uint(token);\r\n    //    //certifiedSymbols.push(symbol);\r\n    //    emit UpdateCertified(symbol, mainChainId, token);\r\n    //}\r\n    //event UpdateCertified(string indexed symbol, uint indexed mainChainId, address indexed token);\r\n    \r\n    function calcContract(address deployer, uint nonce) public pure returns (address) {\r\n        bytes[] memory list = new bytes[](2);\r\n        list[0] = RLPEncode.encodeAddress(deployer);\r\n        list[1] = RLPEncode.encodeUint(nonce);\r\n        return address(uint(keccak256(RLPEncode.encodeList(list))));\r\n    }\r\n    \r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function calcMapping(uint mainChainId, address tokenOrdeployer) public view returns (address) {\r\n        return address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                address(this),\r\n                keccak256(abi.encodePacked(mainChainId, tokenOrdeployer)),\r\n\t\t\t\tkeccak256(type(InitializableProductProxy).creationCode)                    //hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    function createTokenMapped(address token, uint nonce) external payable returns (address tokenMapped) {\r\n        if(_msgSender() != governor) {\r\n            _chargeFee(config[_feeCreate_]);\r\n            require(config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer');\r\n        }\r\n        require(tokenMappeds[token] == address(0), 'TokenMapped created already');\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(_chainId(), token));\r\n\r\n        bytes memory bytecode = type(InitializableProductProxy).creationCode;\r\n        assembly {\r\n            tokenMapped := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableProductProxy(payable(tokenMapped)).__InitializableProductProxy_init(address(this), _TokenMapped_, abi.encodeWithSignature('__TokenMapped_init(address,address)', address(this), token));\r\n        \r\n        tokenMappeds[token] = tokenMapped;\r\n        _initAuthQuotas(tokenMapped, IERC20(token).totalSupply());\r\n        emit CreateTokenMapped(_msgSender(), token, tokenMapped);\r\n    }\r\n    event CreateTokenMapped(address indexed deployer, address indexed token, address indexed tokenMapped);\r\n    \r\n    function createMappableToken(string memory name, string memory symbol, uint8 decimals, uint totalSupply) external payable returns (address mappableToken) {\r\n        if(_msgSender() != governor)\r\n            _chargeFee(config[_feeCreate_]);\r\n        require(mappableTokens[_msgSender()] == address(0), 'MappableToken created already');\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(_chainId(), _msgSender()));\r\n\r\n        bytes memory bytecode = type(InitializableProductProxy).creationCode;\r\n        assembly {\r\n            mappableToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableProductProxy(payable(mappableToken)).__InitializableProductProxy_init(address(this), _MappableToken_, abi.encodeWithSignature('__MappableToken_init(address,address,string,string,uint8,uint256)', address(this), _msgSender(), name, symbol, decimals, totalSupply));\r\n        \r\n        mappableTokens[_msgSender()] = mappableToken;\r\n        _initAuthQuotas(mappableToken, totalSupply);\r\n        emit CreateMappableToken(_msgSender(), name, symbol, decimals, totalSupply, mappableToken);\r\n    }\r\n    event CreateMappableToken(address indexed deployer, string name, string symbol, uint8 decimals, uint totalSupply, address indexed mappableToken);\r\n    \r\n    function _createMappingToken(uint mainChainId, address token, address deployer, string memory name, string memory symbol, uint8 decimals, uint cap) internal returns (address mappingToken) {\r\n        address tokenOrdeployer = (token == address(0)) ? deployer : token;\r\n        require(mappingTokens[mainChainId][tokenOrdeployer] == address(0), 'MappingToken created already');\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(mainChainId, tokenOrdeployer));\r\n\r\n        bytes memory bytecode = type(InitializableProductProxy).creationCode;\r\n        assembly {\r\n            mappingToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableProductProxy(payable(mappingToken)).__InitializableProductProxy_init(address(this), _MappingToken_, abi.encodeWithSignature('__MappingToken_init(address,uint256,address,address,string,string,uint8,uint256)', address(this), mainChainId, token, deployer, name, symbol, decimals, cap));\r\n        \r\n        mappingTokens[mainChainId][tokenOrdeployer] = mappingToken;\r\n        _initAuthQuotas(mappingToken, cap);\r\n        emit CreateMappingToken(mainChainId, token, deployer, name, symbol, decimals, cap, mappingToken);\r\n    }\r\n    event CreateMappingToken(uint mainChainId, address indexed token, address indexed deployer, string name, string symbol, uint8 decimals, uint cap, address indexed mappingToken);\r\n    \r\n    function createMappingToken_(uint mainChainId, address token, address deployer, string memory name, string memory symbol, uint8 decimals, uint cap) public payable governance returns (address mappingToken) {\r\n        return _createMappingToken(mainChainId, token, deployer, name, symbol, decimals, cap);\r\n    }\r\n    \r\n    function createMappingToken(uint mainChainId, address token, uint nonce, string memory name, string memory symbol, uint8 decimals, uint cap, Signature[] memory signatures) public payable returns (address mappingToken) {\r\n        _chargeFee(config[_feeCreate_]);\r\n        require(token == address(0) || config[_onlyDeployer_] == 0 || token == calcContract(_msgSender(), nonce), 'only deployer');\r\n        require(signatures.length >= config[_minSignatures_], 'too few signatures');\r\n        for(uint i=0; i<signatures.length; i++) {\r\n            for(uint j=0; j<i; j++)\r\n                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\r\n            bytes32 hash = keccak256(abi.encode(CREATE_TYPEHASH, _msgSender(), mainChainId, token, keccak256(bytes(name)), keccak256(bytes(symbol)), decimals, cap, signatures[i].signatory));\r\n            hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hash));\r\n            address signatory = ecrecover(hash, signatures[i].v, signatures[i].r, signatures[i].s);\r\n            require(signatory != address(0), \"invalid signature\");\r\n            require(signatory == signatures[i].signatory, \"unauthorized\");\r\n            _decreaseAuthCount(signatures[i].signatory, 1);\r\n            emit AuthorizeCreate(mainChainId, token, _msgSender(), name, symbol, decimals, cap, signatory);\r\n        }\r\n        return _createMappingToken(mainChainId, token, _msgSender(), name, symbol, decimals, cap);\r\n    }\r\n    event AuthorizeCreate(uint mainChainId, address indexed token, address indexed deployer, string name, string symbol, uint8 decimals, uint cap, address indexed signatory);\r\n    \r\n    function _chargeFee(uint fee) virtual internal {\r\n        require(msg.value >= Math.min(fee, 1 ether), 'fee is too low');\r\n        address payable feeTo = address(config[_feeTo_]);\r\n        if(feeTo == address(0))\r\n            feeTo = address(uint160(address(this)));\r\n        feeTo.transfer(msg.value);\r\n        emit ChargeFee(_msgSender(), feeTo, msg.value);\r\n    }\r\n    event ChargeFee(address indexed from, address indexed to, uint value);\r\n\r\n    uint256[49] private __gap;\r\n}", "ABI": "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"__InitializableProductProxy_init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InitializableProductProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x2a2faf37da59c2f45001a37f4a0f32eead375e9f", "SwarmSource": "ipfs://8a83372edb5bd000f176d79a4af74a92896277b28ec799186455f571b908f171"}