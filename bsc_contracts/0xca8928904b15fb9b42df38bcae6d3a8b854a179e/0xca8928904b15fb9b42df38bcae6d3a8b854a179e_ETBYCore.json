{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EBYcore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.20;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\nlibrary SafeMath {\\n    \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n   \\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n   \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n   \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n   \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n   \\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\\ncontract ETBYCore is Initializable,Ownable,ReentrancyGuard {\\n    using SafeMath for uint256;\\n    \\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    address constant public rootAddress = address(0x000000000000000000000000000000000000dEaD);\\n\\n    mapping( address => address[]) firstChilds;\\n    // IUniswapV2Router02 public uniswapV2Router;\\n\\n    mapping(address => uint256) public _dayBuyAmountMap;\\n\\n    address public factory; // \u8bb0\u5f55\u5408\u7ea6\u53d1\u5e03\u8005\u5730\u5740\\n    mapping(address => address[]) public inviteRecords; // \u9080\u8bf7\u8bb0\u5f55  \u9080\u8bf7\u4eba\u5730\u5740 => \u88ab\u9080\u8bf7\u4eba\u5730\u5740\u6570\u7ec4\\n\\n    mapping(address => uint256) public total_pledage;\\n\\n    struct Market{\\n        uint lockDays;\\n        address token;      \\n        // uint worth;\\n        uint amount;        \\n        uint outMultiple;   \\n    }\\n\\n    Market[] public markets;\\n\\n    address public awardToken;\\n    address public usdtToken;\\n    mapping(address => bool) public hasSwap;\\n    address[] private _dayBuyAddressList;\\n\\n    //\u8d28\u62bc\\n    struct Order{\\n        uint lockDays;\\n        uint initTime;\\n        uint updateTimePrincipal;\\n        uint updateTimeProfit;\\n        uint endTime;\\n        uint amount;\\n        uint initAmount;\\n        uint outMultiple;\\n    }\\n\\n    struct Achievement{\\n        uint level;         \\n        uint teamAch;      \\n        uint selfAch;       \\n        // uint regionAch;    \\n        address regionAddress;  \\n        uint lastTierAmount;\\n        uint indexPrincipal;\\n        uint indexProfit;\\n        Order[] orders;\\n    }\\n\\n    mapping(address => Achievement) public achievements;\\n    mapping( address => EnumerableSet.AddressSet) internal validUsers;\\n\\n    struct UserInfo {\\n        uint256 hashRate;         \\n        uint256 tokenAward;  \\n        uint256 tokenDebt;\\n        uint256 firstAward; //\u4e00\u7ea7\u603b\u5956\u52b1\\n        uint256 secondAward; //\u4e8c\u7ea7\u603b\u5956\u52b1\\n        uint256 firstAwardHistory; //\u4e00\u7ea7\u603b\u5956\u52b1\u5386\u53f2\\n        uint256 secondAwardHistory; //\u4e8c\u7ea7\u603b\u5956\u52b1\u5386\u53f2\\n    }\\n\\n    struct PoolInfo {\\n        uint256 lastRewardBlock;    \\n        uint256 accCakePerShare; \\n        uint256 totalHashRate;          \\n    }   \\n\\n    PoolInfo[] public poolInfos;\\n    mapping (uint => mapping(address => UserInfo)) public userInfos;\\n\\n    uint constant public STATIC_INDEX = 0;\\n    uint constant public DYNAMIC_INDEX = 1;\\n\\n    IERC20 public token;\\n    uint256 public DAY = 86400;\\n\\n    struct Or {\\n        address referrals; \\n        uint256 ETBYamount;\\n        uint256 lockDays;\\n        uint256 ShouYiAmount;\\n    }\\n\\n    struct Member {\\n        address sponsor;\\n        Or[] referrals;          // \u76f4\u63a5\u63a8\u8350\u4eba\u5217\u8868\\n        uint256 directReferralCount;\\n        uint256 indirectReferralCount;\\n        uint256 totalPurchases;       //\u8d2d\u4e70\u6570\u91cf\\n        uint256 totalEarnings;\\n\\n    }\\n\\n    mapping(address => Member) public members;\\n\\n    constructor() {\\n        members[rootAddress].sponsor = address(0xdeaddead);\\n        awardToken = address(0xe7B4af67A63961dE390E704Dfc0F4Aaff594e426);\\n        usdtToken = address(0x55d398326f99059fF775485246999027B3197955);\\n        // awardToken = address(0x0Ca5eA2Bdfd3C7766C952b8FfB874c23210Dc536);    //\u6d4b\u8bd5\u7f51;\\n        // usdtToken = address(0x90BE2D7031D723033e7f3CBc0e18Dcf511bb6033);    //\u6d4b\u8bd5\u7f51;\\n        token = IERC20(awardToken);\\n        poolInfos.push(PoolInfo(block.number,0,0) );\\n        poolInfos.push(PoolInfo(block.number,0,0) );\\n\\n        markets.push(Market(1,awardToken,0,101));    //0  1\\n        markets.push(Market(7,awardToken,0,108));    //1  7\\n        markets.push(Market(15,awardToken,0,118));    //2 15\\n        markets.push(Market(30,awardToken,0,138));    //3 30\\n        markets.push(Market(90,awardToken,0,228));    //4 90\\n        markets.push(Market(180,awardToken,0,360));   //5 180\\n    }\\n\\n    function getMarketInfos()external view returns(Market[] memory mks){\\n        uint len = markets.length;\\n\\n        mks = new Market[](len);\\n        for( uint i = 0; i < len; i++ ){\\n            mks[i] = markets[i];\\n            mks[i].amount = mks[i].amount; \\n        }\\n    }\\n\\n    struct NetworkInfo{\\n        uint staticAch;\\n        uint dynamicAch;\\n    }\\n    function getNetworkInfo()external view returns(NetworkInfo memory info){\\n        info.staticAch = poolInfos[STATIC_INDEX].totalHashRate;\\n        info.dynamicAch = poolInfos[DYNAMIC_INDEX].totalHashRate;\\n    }\\n\\n    struct PersonInfo{\\n        uint staticAch;\\n        uint dynamicAch;\\n        uint level;\\n        uint childNum;\\n        uint teamAch;\\n        uint littleAch;\\n    }\\n\\n    function setUser(address owner,uint level) public onlyOwner {\\n        Achievement storage a = achievements[owner];\\n        a.level = level;\\n    }\\n\\n    function getUserInfos(address owner)external view returns(PersonInfo memory info){\\n        info.staticAch = userInfos[STATIC_INDEX][owner].hashRate;\\n        info.dynamicAch = userInfos[DYNAMIC_INDEX][owner].hashRate;\\n        Achievement storage a = achievements[owner];\\n        info.level = a.level;\\n        info.childNum = validUsers[owner].length();\\n        info.teamAch = a.teamAch;\\n        // info.littleAch = a.teamAch.sub(a.regionAch);\\n    }\\n\\n    function pledge(uint index, uint256 _amount) external nonReentrant {\\n        Market storage m = markets[index];\\n        // address parent = members[msg.sender].sponsor;\\n        Member storage mm =  members[msg.sender];\\n        require(_amount >= 100  && _amount <= 1000  ,\\\"100 ~ 1000 \\\");\\n        m.amount = _amount *(1e18) ;\\n\\n        IERC20(awardToken).transferFrom(msg.sender, address(this), m.amount);\\n        members[msg.sender].totalPurchases += m.amount;\\n\\n        _doPledge(msg.sender, m.amount, m.outMultiple, m.lockDays);\\n        uint256 ETBY = m.amount * ( 1 + m.outMultiple/100); \\n        mm.referrals.push(Or(msg.sender,m.amount,m.lockDays,ETBY));\\n        if(_dayBuyAmountMap[msg.sender] == 0) { \\n            _dayBuyAddressList.push(msg.sender);\\n        } \\n        _dayBuyAmountMap[msg.sender] += m.amount;\\n        total_pledage[msg.sender] += m.amount;\\n        pledgeAward(m.amount ,msg.sender);\\n    }\\n\\n    function pledgeAward( uint shareAwardAmount,address Award) public {\\n        address parent = members[Award].sponsor;\\n        if (parent != address(0)) {\\n            uint shareAward = shareAwardAmount * 30 / 100;\\n            if (shareAward > 0) {\\n                UserInfo storage parentUser = userInfos[1][parent];\\n                //\u4e00\u7ea7\u603b\u5956\u52b1\u7d2f\u52a0\\n                parentUser.firstAward += shareAward;\\n                parentUser.firstAwardHistory += shareAward;\\n            }\\n\\n            address secondParent = members[parent].sponsor;\\n            if (secondParent != address(0) ) {\\n                uint secondShareAward = shareAwardAmount * 10 / 100;\\n                if (secondShareAward > 0) {\\n                    UserInfo storage secondParentUser = userInfos[1][secondParent];\\n                    //\u4e8c\u7ea7\u603b\u5956\u52b1\u7d2f\u52a0\\n                    secondParentUser.secondAward += secondShareAward;\\n                    secondParentUser.secondAwardHistory += secondShareAward;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _doPledge(address owner,uint256 _amount,uint outMultiple,uint256 _lockDays)private{\\n        \\n        require(_amount > 0,\\\"invalid\\\");\\n\\n        deposit(STATIC_INDEX,owner, _amount);\\n\\n        Achievement storage ach = achievements[owner];\\n\\n        uint time = getCurrentTime();\\n        ach.orders.push(\\n            Order(\\n                _lockDays,\\n                time,\\n                time,\\n                time,\\n                time + _lockDays * DAY,\\n                _amount * outMultiple / 100,\\n                _amount,\\n                outMultiple \\n            )\\n        );\\n        //\u4e1a\u7ee9\u5237\u65b0\\n        ach.selfAch += _amount;\\n        \\n        //\u66f4\u65b0\u81ea\u8eab\u7b49\u7ea7\\n        _updateLevel(ach);\\n    }\\n\\n\\n    function _updateLevel(Achievement storage ach)private{\\n        uint oldLevel = ach.level;\\n        uint newLevel = _getLevel(ach);\\n        if( newLevel != oldLevel){\\n            ach.level = newLevel;\\n        }\\n    }\\n\\n    function _getLevel(Achievement storage ach)internal view returns(uint){\\n        if( ach.selfAch == 0 ) return 0;\\n\\n        // uint littleRegion = ach.teamAch;\\n        uint selfAch = ach.selfAch;\\n\\n        if( selfAch >= 1000000e18 ){   //\\n            return 5;\\n        }\\n        if( selfAch >= 500000e18 ){   //\\n            return 4;\\n        }\\n        if( selfAch >= 100000e18  ){     //\\n            return 3;\\n        }\\n        if( selfAch >= 50000e18  ){     //\\n            return 2;\\n        }\\n        if( selfAch >= 10000e18 ){     //\\n            return 1;\\n        }\\n        return 0;\\n    }\\n    // \u9886\u53d6\u672c\u91d1\\n    function drawPrincipal()external nonReentrant returns(uint v1,uint v2) {\\n        \\n        Achievement storage user = achievements[msg.sender];\\n\\n        Order[] storage orders = user.orders;\\n        uint index = user.indexPrincipal;\\n\\n        uint time = getCurrentTime();\\n        \\n        uint remHashRate = 0;\\n        for( uint i = index; i < orders.length; i++ ){\\n            Order storage order = orders[i];\\n            require(time > order.endTime,\\\"Not yet\\\");\\n            uint updateTimePrincipal = order.updateTimePrincipal;\\n            uint t = time > order.endTime ? order.endTime : time;\\n            if( t > updateTimePrincipal ){\\n\\n                uint l = t - updateTimePrincipal;\\n\\n                if( l > 0 ){\\n                    v1 += l *( order.amount / (order.lockDays * DAY) ) * 100 / order.outMultiple;\\n                }\\n                updateTimePrincipal = t;\\n\\n                if( updateTimePrincipal >= order.endTime){\\n                    remHashRate += order.initAmount;\\n                    index = i + 1;\\n                }\\n                order.updateTimePrincipal = updateTimePrincipal;\\n            }\\n        }\\n\\n        if( index > user.indexPrincipal ){\\n            user.indexPrincipal = index;\\n        }\\n\\n        v2 = v1;\\n\\n        if( v1 > 0 ){\\n            IERC20(awardToken).transfer(msg.sender, v1);\\n        }\\n\\n    }\\n\\n    function drawProfit()external nonReentrant returns(uint v1,uint v2){\\n\\n        Achievement storage user = achievements[msg.sender];\\n\\n        Order[] storage orders = user.orders;\\n        uint index = user.indexProfit;\\n\\n        uint time = getCurrentTime();\\n        for( uint i = index; i < orders.length; i++ ){\\n            Order storage order = orders[i];\\n\\n            uint updateTimeProfit = order.updateTimeProfit;\\n            uint t = time > order.endTime ? order.endTime : time;\\n            if( t > updateTimeProfit ){\\n\\n                uint l = t - updateTimeProfit;\\n\\n                if( l > 0 ){\\n                    v1 += l *( order.amount / (order.lockDays * DAY) ) * (order.outMultiple.sub(100) ) / order.outMultiple;\\n                }\\n                updateTimeProfit = t;\\n\\n                if( updateTimeProfit >= order.endTime){\\n                    index = i + 1;\\n                }\\n                order.updateTimeProfit = updateTimeProfit;\\n            }\\n        }\\n\\n        if( index > user.indexProfit ){\\n            user.indexProfit = index;\\n        }\\n\\n        if( v1 > 0 ){\\n            v2 = v1;\\n        }\\n\\n        if( v2 > 0 ){\\n            IERC20(awardToken).transfer(msg.sender, v2);\\n        }\\n\\n    }\\n\\n    function getCurrentTime()private view returns(uint){\\n        return block.timestamp + userInfos[0][address(0)].hashRate;\\n    }\\n\\n    function setSwapTokensaddress(address _swapTokens) public onlyOwner {\\n        awardToken = _swapTokens;\\n    }\\n\\n    function addRelationEx(address recommer) external nonReentrant returns (bool) {\\n        require(recommer != msg.sender,\\\"your_self\\\");\\n        require(members[msg.sender].sponsor == address(0x0),\\\"binded\\\");\\n        require(recommer == rootAddress || members[recommer].sponsor != address(0x0),\\\"p_not_bind\\\");\\n\\n        inviteRecords[recommer].push(msg.sender);\\n        \\n        members[msg.sender].sponsor = recommer;\\n        // mm.referrals.push(Or(msg.sender,0,0,0));\\n        members[recommer].directReferralCount++;\\n        updateIndirectReferralCounts(recommer);\\n        return true;\\n    }\\n\\n    function getForefathers(address owner,uint num) private view returns(address[] memory fathers){\\n        fathers = new address[](num);\\n        address parent  = owner;\\n        for( uint i = 0; i < num; i++){\\n            parent = members[parent].sponsor;\\n            if( parent == rootAddress || parent == address(0) ) break;\\n            fathers[i] = parent;\\n        }\\n    }\\n \\n    function _isContract(address a) internal view returns(bool){\\n        uint256 size;\\n        assembly {size := extcodesize(a)}\\n        return size > 0;\\n    }\\n\\n    function updatePool(uint id) internal {\\n        PoolInfo storage poolInfo = poolInfos[id];\\n        uint number = block.number;\\n        uint lastRewardBlock  = poolInfo.lastRewardBlock;\\n        if (number  <= lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = poolInfo.totalHashRate;\\n        if (lpSupply == 0) {\\n            poolInfo.lastRewardBlock = number;\\n            return;\\n        }\\n        uint256 multiplier = number.sub(lastRewardBlock);\\n\\n        poolInfo.accCakePerShare = poolInfo.accCakePerShare.add(multiplier.mul(1e40).div(lpSupply));\\n        poolInfo.lastRewardBlock = number;\\n    }\\n\\n    function deposit(uint id,address owner,uint256 _amount) private {\\n        PoolInfo storage poolInfo = poolInfos[id];\\n        UserInfo storage user = userInfos[id][owner];\\n\\n        updatePool(id);\\n\\n        uint hashRate = user.hashRate;\\n        uint accCakePerShare = poolInfo.accCakePerShare;\\n        if (hashRate > 0) {\\n            uint cake =hashRate *( hashRate / (100 * 86400) ); \\n            uint256 pending = cake.mul(accCakePerShare).div(1e40).sub(user.tokenDebt);\\n            if(pending > 0) {\\n                user.tokenAward += pending;\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.hashRate = hashRate.add(_amount);\\n            poolInfo.totalHashRate += _amount;\\n            hashRate += _amount;\\n            uint cake =hashRate *( hashRate / (100 * 86400) ); \\n            user.tokenDebt = cake.mul(accCakePerShare).div(1e40);\\n        }\\n    }\\n\\n    //\u9080\u8bf7\u63d0\u73b0\\n    function InviteWithdraw() public nonReentrant {\\n        uint256 AwardToken;\\n        uint len = markets.length;\\n        for( uint i = 0; i < len; i++ ){\\n            UserInfo storage user = userInfos[i][msg.sender];\\n            AwardToken += user.firstAward;\\n            AwardToken += user.secondAward;\\n            user.firstAward = 0;\\n            user.secondAward = 0;\\n        }\\n        IERC20(awardToken).transfer(msg.sender,AwardToken);\\n    }\\n\\n    // \u83b7\u53d6\u67d0\u4e2a\u7528\u6237\u7684\u6240\u6709\u76f4\u63a5\u63a8\u8350\u4eba\\n    function getreferrals(address user) public view returns (Or[] memory) {\\n        return members[user].referrals;\\n    }\\n\\n    function getChilds(address myAddress) public  view returns(address[] memory childs){\\n        childs = inviteRecords[myAddress];\\n    }\\n\\n    // \u83b7\u53d6\u6240\u6709\u95f4\u63a5\u63a8\u8350\u4eba\\n    function getInreferrals(address user) public view returns (Or[] memory) {\\n        address[] memory referralsOfReferral = getChilds(user);\\n        uint len = referralsOfReferral.length;\\n        Or[] memory inreferrals = new Or[](len);\\n        for (uint i = 0; i < len; i++) {\\n            Member storage member = members[referralsOfReferral[i]];\\n            inreferrals = member.referrals;\\n        }\\n        return inreferrals;\\n    }\\n\\n    // \u66f4\u65b0\u95f4\u63a5\u63a8\u8350\u4eba\u6570\\n    function updateIndirectReferralCounts(address referrer) private {\\n        address current = referrer;\\n        while (current != address(0)) {\\n            members[current].indirectReferralCount++;\\n            current = members[current].sponsor;// \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u63a8\u8350\u4eba\u5730\u5740;\\n        }\\n    }\\n\\n    // \u83b7\u53d6\u76f4\u63a5\u63a8\u8350\u4eba\\n    function getDirectReferrals(address user) public view returns (Or[] memory) {\\n        return members[user].referrals;\\n    }\\n\\n    // \u83b7\u53d6\u7528\u6237\u7684\u63a8\u8350\u7edf\u8ba1\u6570\u636e\\n    function getReferralStats(address user) public view returns (uint256 directCount, uint256 indirectCount, uint256 totalPurchases, uint256 totalEarnings) {\\n        Member storage member = members[user];\\n        return (member.directReferralCount, member.indirectReferralCount, member.totalPurchases, member.totalEarnings);\\n    }\\n\\n    function getTodayBuyAmount() external view returns(uint256){\\n        uint256 TodayBuyAmount = 0;\\n        address[] memory addressList = _dayBuyAddressList;\\n        for(uint i=0;i<addressList.length;i++){\\n            TodayBuyAmount += _dayBuyAmountMap[addressList[i]];\\n        }\\n        return TodayBuyAmount;\\n    }\\n\\n    function resetDayBuyLimit() public {    \\n        // uint32 today = uint32(block.timestamp/86400); \\n\\n        address[] memory addressList = _dayBuyAddressList;\\n        for(uint i=0;i<addressList.length;i++){\\n            delete _dayBuyAmountMap[addressList[i]];\\n        }\\n        delete _dayBuyAddressList;\\n    }\\n\\n    receive() external payable {}\\n\\n    function rescueToken(address tokenAddress, uint256 tokens) public onlyOwner returns  (bool success) {   \\n        // require(_contractSender == msg.sender);\\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\\n    }\\n\\n    function setDay(uint256 _swapTime) public onlyOwner {\\n        DAY = _swapTime;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DYNAMIC_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InviteWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATIC_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dayBuyAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"achievements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfAch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"regionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTierAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recommer\",\"type\":\"address\"}],\"name\":\"addRelationEx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"v1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"v1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"getChilds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"childs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDirectReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETBYamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ShouYiAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.Or[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInreferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETBYamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ShouYiAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.Or[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outMultiple\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.Market[]\",\"name\":\"mks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staticAch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicAch\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.NetworkInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferralStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"directCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indirectCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getUserInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staticAch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicAch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleAch\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.PersonInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getreferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ETBYamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ShouYiAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETBYCore.Or[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outMultiple\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"directReferralCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indirectReferralCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAwardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Award\",\"type\":\"address\"}],\"name\":\"pledgeAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHashRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDayBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTime\",\"type\":\"uint256\"}],\"name\":\"setDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapTokens\",\"type\":\"address\"}],\"name\":\"setSwapTokensaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_pledage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAwardHistory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondAwardHistory\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETBYCore", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}