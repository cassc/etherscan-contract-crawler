{"SourceCode": "{\"address.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash =\\r\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) =\\r\\n            target.call{value: weiValue}(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"context.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n \\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"FiPiStacking.sol\":{\"content\":\"import \\u0027./safeMath.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./context.sol\\u0027;\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\ncontract FiPiStaking is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        bool withdrawRequested;\\r\\n        uint256 releaseDate;\\r\\n        uint256 fipiTokenCumulatedReward;\\r\\n        uint256 busdCumulatedReward;\\r\\n    }\\r\\n\\r\\n    IERC20 fipiToken;\\r\\n    IERC20 busd;\\r\\n\\r\\n    //it could be different from contract token balance, because rewards has external source added by owner\\r\\n    uint256 public totalTokenStacked; \\r\\n\\r\\n\\r\\n    address public devAddr;\\r\\n    \\r\\n    uint256 public rewardPerBlock;\\r\\n    \\r\\n\\r\\n    //so we have 3 variables current state, all previous rewards, last update date\\r\\n    //so the idea is as follows\\r\\n    //when something is changing in totalTokenStaked, so whenever someone is depositing or withdrawing their tokens\\r\\n    //we need to save cumulated values as lets say checkpoint and the date, current values are used to calculate pending rewards based on current state\\r\\n    \\r\\n\\r\\n    uint256 public fipiTokenCumulatedPerTokenStaked;\\r\\n    uint256 public fipiTokenCumulatedPerTokenStakedUpdateBlock;\\r\\n\\r\\n    uint256 public busdCumulatedPerTokenStaked;\\r\\n    uint256 public withdrawdelay;\\r\\n\\r\\n\\r\\n    mapping (address =\\u003e UserInfo) public userInfo;\\r\\n    \\r\\n    uint256 public startBlock;\\r\\n    uint256 public stakingFinishBlock;\\r\\n    bool public stakingEnabled;\\r\\n\\r\\n    function setStakingEnabled() external onlyOwner {\\r\\n        stakingFinishBlock = block.number;\\r\\n        stakingEnabled = false;\\r\\n    }\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event Claimed(uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _fipiToken,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _withdrawdelay\\r\\n    ) {\\r\\n        fipiToken = _fipiToken;\\r\\n        devAddr = _msgSender();\\r\\n        withdrawdelay = _withdrawdelay;\\r\\n        stakingEnabled = true;\\r\\n        //reward per block need to be multiplied by bignumber to avoid problem with floating shit so it would be initialy 7500 * 10**18 (decimal) * 10**18\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        fipiTokenCumulatedPerTokenStakedUpdateBlock = block.number;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function deposit(uint256 _amount) public {\\r\\n        \\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(stakingEnabled == true, \\\"Staking is disabled\\\");\\r\\n\\r\\n        require(user.withdrawRequested == false, \\\"You can not deposit tokens while withdrawing\\\");\\r\\n        uint256 allowance = fipiToken.allowance(msg.sender, address(this));\\r\\n        require(allowance \\u003e= _amount, \\\"Check the token allowance\\\");\\r\\n        //each time something change in any user/total stacked ratio we need to update fipiTokenCumulatedPerTokenStaked\\r\\n        \\r\\n        if (user.amount == 0)\\r\\n        {\\r\\n            updateRewardPerTokenStaked();\\r\\n            totalTokenStacked = totalTokenStacked.add(_amount);\\r\\n            user.amount = _amount;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            claimAndRestake();\\r\\n            claimBusd();\\r\\n            totalTokenStacked = totalTokenStacked.add(_amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n\\r\\n        user.fipiTokenCumulatedReward = fipiTokenCumulatedPerTokenStaked.mul(user.amount).div(10**18);\\r\\n        user.busdCumulatedReward = busdCumulatedPerTokenStaked.mul(user.amount).div(10**18);\\r\\n\\r\\n        fipiToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n    function claimAndRestake() public  \\r\\n    {\\r\\n        //at the beginning of every interaction lets update the pool info\\r\\n        updateRewardPerTokenStaked();\\r\\n        UserInfo storage user = userInfo[_msgSender()];\\r\\n\\r\\n        require(user.withdrawRequested == false, \\\"You can not claim any rewards when you already initialize a withdraw\\\");\\r\\n\\r\\n        uint256 maxClaim = user.amount.mul(fipiTokenCumulatedPerTokenStaked).div(10**18);\\r\\n        uint256 claimableAmount = maxClaim.sub(user.fipiTokenCumulatedReward);\\r\\n\\r\\n        \\r\\n        user.amount = user.amount.add(claimableAmount);\\r\\n        //everything is claimed so i assign to fipiTokenCumulatedReward everything that is there to be claimed\\r\\n        user.fipiTokenCumulatedReward = user.amount.mul(fipiTokenCumulatedPerTokenStaked).div(10**18);\\r\\n        \\r\\n        totalTokenStacked = totalTokenStacked.add(claimableAmount);\\r\\n        \\r\\n        emit Claimed(claimableAmount);\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    function claimAndWithdraw() public  \\r\\n    {\\r\\n        //at the beginning of every interaction lets update the pool info\\r\\n        updateRewardPerTokenStaked();\\r\\n        UserInfo storage user = userInfo[_msgSender()];\\r\\n        require(user.withdrawRequested == false, \\\"You can not claim any rewards when you already initialize a withdraw\\\");\\r\\n        \\r\\n        uint256 maxClaim = user.amount.mul(fipiTokenCumulatedPerTokenStaked).div(10**18);\\r\\n        uint256 claimableAmount = maxClaim.sub(user.fipiTokenCumulatedReward);\\r\\n\\r\\n        //everything is claimed so i assign to fipiTokenCumulatedReward everything that is there to be claimed\\r\\n        user.fipiTokenCumulatedReward = maxClaim;\\r\\n        fipiToken.transfer(msg.sender, claimableAmount);\\r\\n\\r\\n        emit Claimed(claimableAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function claimBusd() public  \\r\\n    {\\r\\n        if(busdCumulatedPerTokenStaked == 0){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        UserInfo storage user = userInfo[_msgSender()];\\r\\n        require(user.withdrawRequested == false, \\\"You can not claim any rewards when you already initialize a withdraw\\\");\\r\\n        \\r\\n        uint256 maxClaim = user.amount.mul(busdCumulatedPerTokenStaked).div(10**18);\\r\\n        uint256 claimableAmount = maxClaim.sub(user.busdCumulatedReward);\\r\\n\\r\\n        //everything is claimed so i assign to fipiTokenCumulatedReward everything that is there to be claimed\\r\\n        user.busdCumulatedReward = maxClaim;\\r\\n        busd.transfer(msg.sender, claimableAmount);\\r\\n\\r\\n        emit Claimed(claimableAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function pendingRewards(address _user) external view returns (uint256) \\r\\n    {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        \\r\\n        if(user.amount == 0 || user.withdrawRequested == true){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 tokenPerStake = fipiTokenCumulatedPerTokenStaked;\\r\\n        uint256 totalStacked = totalTokenStacked;\\r\\n\\r\\n        uint256 maxBlock = block.number;\\r\\n        if(block.number \\u003e stakingFinishBlock \\u0026\\u0026 stakingEnabled == false){\\r\\n            maxBlock = stakingFinishBlock;\\r\\n        }\\r\\n\\r\\n        if (maxBlock \\u003e fipiTokenCumulatedPerTokenStakedUpdateBlock \\u0026\\u0026 totalStacked != 0) {\\r\\n            uint256 nrOfBlocks = maxBlock.sub(fipiTokenCumulatedPerTokenStakedUpdateBlock);\\r\\n            uint256 reward = nrOfBlocks.mul(rewardPerBlock);\\r\\n            tokenPerStake = tokenPerStake.add(reward.mul(10**18).div(totalStacked));\\r\\n        }\\r\\n\\r\\n        uint256 claimable = user.amount.mul(tokenPerStake).div(10**18).sub(user.fipiTokenCumulatedReward);\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n\\r\\n    function initWithdraw() public{\\r\\n       \\r\\n        claimAndRestake();\\r\\n        claimBusd();\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        uint256 tokensToWithdraw = user.amount;\\r\\n        totalTokenStacked = totalTokenStacked.sub(tokensToWithdraw);\\r\\n\\r\\n        require(user.amount \\u003e= 0, \\\"You have no tokens to withdraw\\\");\\r\\n        require(user.withdrawRequested == false, \\\"You already initialize withdraw\\\");\\r\\n        user.releaseDate = block.timestamp + withdrawdelay;\\r\\n        user.withdrawRequested = true;\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        \\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(user.amount \\u003e0, \\\"You have no tokens to withdraw\\\");\\r\\n        require(user.withdrawRequested == true, \\\"You need to initialize your withdraw first\\\" );\\r\\n        require(block.timestamp \\u003e user.releaseDate, \\\"You can\\u0027t withdraw yet\\\" );\\r\\n        \\r\\n        uint256 tokensToWithdraw = user.amount;\\r\\n\\r\\n        user.withdrawRequested = false;\\r\\n        user.releaseDate = 0;\\r\\n        user.amount = 0;\\r\\n        fipiToken.transfer(msg.sender, tokensToWithdraw);\\r\\n\\r\\n        emit Withdraw(msg.sender, tokensToWithdraw);\\r\\n    }\\r\\n\\r\\n\\r\\n    function emergencyWithdraw() public {\\r\\n        \\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(stakingEnabled == false, \\\"This function is used only when staking is disbaled\\\");\\r\\n        require(user.amount \\u003e0, \\\"You have no tokens to withdraw\\\");\\r\\n        \\r\\n        uint256 tokensToWithdraw = user.amount;\\r\\n\\r\\n        user.withdrawRequested = false;\\r\\n        user.releaseDate = 0;\\r\\n        user.amount = 0;\\r\\n        fipiToken.transfer(msg.sender, tokensToWithdraw);\\r\\n\\r\\n        emit Withdraw(msg.sender, tokensToWithdraw);\\r\\n    }\\r\\n\\r\\n    function distribute(uint _reward) external onlyOwner\\r\\n    {\\r\\n        uint256 allowance = busd.allowance(msg.sender, address(this));\\r\\n        require(allowance \\u003e= _reward, \\\"Check the token allowance\\\");\\r\\n        uint reward = _reward.mul(10**18).div(totalTokenStacked);\\r\\n        busdCumulatedPerTokenStaked = busdCumulatedPerTokenStaked.add(reward);\\r\\n    }\\r\\n\\r\\n    function updateRewardPerTokenStaked() private \\r\\n    {\\r\\n        if(totalTokenStacked \\u003e 0)\\r\\n        {\\r\\n            uint256 maxBlock = block.number;\\r\\n            if(block.number \\u003e stakingFinishBlock \\u0026\\u0026 stakingEnabled == false){\\r\\n                maxBlock = stakingFinishBlock;\\r\\n            }\\r\\n\\r\\n            //if something is staked we need to calculate how much rewards it is pending per one token\\r\\n            uint256 howManyBlocksFromLast = maxBlock.sub(fipiTokenCumulatedPerTokenStakedUpdateBlock);\\r\\n            uint256 rewardToBeDistributed = howManyBlocksFromLast.mul(rewardPerBlock).mul(10**18).div(totalTokenStacked);\\r\\n            fipiTokenCumulatedPerTokenStaked = fipiTokenCumulatedPerTokenStaked.add(rewardToBeDistributed);\\r\\n            fipiTokenCumulatedPerTokenStakedUpdateBlock = maxBlock;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withDrawLeftTokens() external onlyOwner {\\r\\n        fipiToken.transfer(msg.sender, fipiToken.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setFiPiAdress(IERC20 _fipiToken) external onlyOwner {\\r\\n        fipiToken = _fipiToken;\\r\\n    }\\r\\n\\r\\n    function setBusdAdress(IERC20 _busdToken) external onlyOwner {\\r\\n        busd = _busdToken;\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\"},\"safeMath.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fipiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawdelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"busdCumulatedPerTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fipiTokenCumulatedPerTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fipiTokenCumulatedPerTokenStakedUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_busdToken\",\"type\":\"address\"}],\"name\":\"setBusdAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fipiToken\",\"type\":\"address\"}],\"name\":\"setFiPiAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFinishBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawRequested\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fipiTokenCumulatedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdCumulatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawLeftTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawdelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FiPiStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb9524b540a907d3648b15c679437261fc443aa600000000000000000000000000000000000000000000000000000000042c1d800000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3e509980dd0ea397f1956eb739a5100b0d571afee99380f4a1261c1b6e1a7ea"}