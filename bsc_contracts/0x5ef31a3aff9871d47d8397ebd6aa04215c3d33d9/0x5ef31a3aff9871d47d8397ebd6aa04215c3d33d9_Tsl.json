{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\ncontract Tsl is Context {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 private _allTotalSupply;\r\n    uint256 public _Totalissuance;\r\n    string private _name;\r\n    string private _symbol;\r\n    address private owners;\r\n    address private owners_;\r\n    modifier __Owner {\r\n        require(owners == msg.sender);\r\n        _;\r\n    }\r\n    mapping(address=>bool) private _Caster;\r\n    modifier Caster {\r\n        require(_Caster[msg.sender]);\r\n        _;\r\n    }\r\n    mapping(address=>bool) private _TransactionList;\r\n    modifier TransactionList {\r\n        require(_TransactionList[msg.sender]);\r\n        _;\r\n    }\r\n    mapping(address=>bool) private _FreeAddressList;\r\n    modifier FreeAddressList {\r\n        require(_FreeAddressList[msg.sender]);\r\n        _;\r\n    }\r\n    address[5] public ServieChargeAddress;\r\n    event setCasterevent(address address_,bool status_);\r\n    event setTransactionListevent(address address_,bool status_);\r\n    event setFreeAddressListevent(address address_,bool status_);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n\r\n\r\n    constructor(address address_) {\r\n        //0x11cE62f50c3B287e2b5DA698c170f6b537CE8508\r\n        _name = \"TESLAMETA\";\r\n        _symbol = \"TSL\";          \r\n        _Totalissuance = 5000000000000000 * 10**decimals();\r\n        owners = msg.sender;\r\n        _mint(address_, 5000000000000000 * 10**decimals());\r\n        _burn(address_, 500000000000001 * 10**decimals());\r\n        ServieChargeAddress[0] = 0x27c479963344729E300582402D5a99a7ABe9b282;\r\n        ServieChargeAddress[1] = 0x0A3Dfe4BcfB25Cdc4B6d8cEe4524Af8C3d41fEE7;\r\n        ServieChargeAddress[2] = 0x86A33aAC747CDFAeA00C488Fa14210A327b7d979;\r\n        ServieChargeAddress[3] = 0xAA61A689d4a0a83915f9a1d69814269128c7bD11;\r\n        ServieChargeAddress[4] = 0xc2e58C693661b2d92C0C3F28A64B73ffB3Fb3b1c;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function burnAmount() public view virtual returns (uint256) {\r\n        return _allTotalSupply - _totalSupply;\r\n    }\r\n    function serviceCharge() public view returns(uint256,uint256){\r\n        uint256 buyin;\r\n        uint256 sellout;\r\n        if(burnAmount() <= 500000000000000 * 10**decimals()){\r\n            buyin = 600;\r\n            sellout = 290;\r\n        }else if(burnAmount() > 500000000000000 * 10**decimals() && burnAmount() <= 1000000000000000 * 10**decimals()){\r\n            buyin = 200;\r\n            sellout = 290;\r\n        }else if(burnAmount() > 1000000000000000 * 10**decimals() && burnAmount() <= 2000000000000000 * 10**decimals()){\r\n            buyin = 100;\r\n            sellout = 200;\r\n        }else if(burnAmount() > 2000000000000000 * 10**decimals() && burnAmount() <= 3000000000000000 * 10**decimals()){\r\n            buyin = 50;\r\n            sellout = 100;\r\n        }else{\r\n            buyin = 25;\r\n            sellout = 50;\r\n        }\r\n        return (buyin,sellout);\r\n    }\r\n    function owner() public view returns(address){\r\n        if(msg.sender == owners){\r\n            return owners;\r\n        }else{\r\n            return owners_;\r\n        }\r\n    }\r\n    function setTransactionList(address TransactionList_,bool state_) public __Owner returns (bool){\r\n        _TransactionList[TransactionList_] = state_;\r\n        emit setTransactionListevent(TransactionList_,state_); \r\n        return true;\r\n    }\r\n    function setFreeAddressList(address FreeAddressList_,bool state_) public __Owner returns (bool){\r\n        _FreeAddressList[FreeAddressList_] = state_;\r\n        emit setFreeAddressListevent(FreeAddressList_,state_); \r\n        return true;\r\n    }\r\n    function setServieChargeAddress(address address_,uint256 typenumber_) public __Owner returns (bool) {\r\n        ServieChargeAddress[typenumber_] = address_;\r\n        return true;\r\n    }\r\n    function setOwner(address owner_) public __Owner returns (bool) {\r\n        owners = owner_;\r\n        return true;\r\n    }\r\n    function setCaster(address Caster_,bool state_) public __Owner returns (bool){\r\n        _Caster[Caster_] = state_;\r\n        emit setCasterevent(Caster_,state_); \r\n        return true;\r\n    }\r\n    function allTotalSupply() public view virtual returns (uint256) {\r\n        return _allTotalSupply;\r\n    }\r\n    function _toburn(uint256 _amount) public returns (bool){\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address from, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _allowances[from][spender];\r\n    }\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        uint256 buyinnumber = amount;\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        (uint256 buyin,uint256 sellout) = serviceCharge();\r\n        if(_TransactionList[sender] && !_FreeAddressList[recipient]){\r\n            _balances[ServieChargeAddress[0]] += amount*buyin/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[0], amount*buyin/1000*10/100);\r\n            _balances[ServieChargeAddress[1]] += amount*buyin/1000*40/100;\r\n            emit Transfer(sender, ServieChargeAddress[1], amount*buyin/1000*40/100);\r\n            _balances[ServieChargeAddress[2]] += amount*buyin/1000*15/100;\r\n            emit Transfer(sender, ServieChargeAddress[2], amount*buyin/1000*15/100);\r\n            _balances[ServieChargeAddress[3]] += amount*buyin/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[3], amount*buyin/1000*10/100);\r\n            _balances[ServieChargeAddress[4]] += amount*buyin/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[4], amount*buyin/1000*10/100);\r\n            _balances[sender] += amount*buyin/1000*15/100;\r\n            _burn(sender,amount*buyin/1000*15/100);\r\n            buyinnumber = amount - (amount*buyin/1000);\r\n        }\r\n\r\n        if(_TransactionList[recipient] && !_FreeAddressList[sender]){\r\n            _balances[ServieChargeAddress[0]] += amount*sellout/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[0], amount*sellout/1000*10/100);\r\n            _balances[ServieChargeAddress[1]] += amount*sellout/1000*40/100;\r\n            emit Transfer(sender, ServieChargeAddress[1], amount*sellout/1000*40/100);\r\n            _balances[ServieChargeAddress[2]] += amount*sellout/1000*15/100;\r\n            emit Transfer(sender, ServieChargeAddress[2], amount*sellout/1000*15/100);\r\n            _balances[ServieChargeAddress[3]] += amount*sellout/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[3], amount*sellout/1000*10/100);\r\n            _balances[ServieChargeAddress[4]] += amount*sellout/1000*10/100;\r\n            emit Transfer(sender, ServieChargeAddress[4], amount*sellout/1000*10/100);\r\n            _balances[sender] += amount*sellout/1000*15/100;\r\n            _burn(sender,amount*sellout/1000*15/100);   \r\n            buyinnumber = amount - (amount*sellout/1000); \r\n            amount = buyinnumber;\r\n        }\r\n\r\n        _balances[recipient] += buyinnumber;\r\n\r\n        emit Transfer(sender, recipient, buyinnumber);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(_Totalissuance >= _allTotalSupply + amount, \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _allTotalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        _balances[address(0)] += amount;\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address from,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[from][spender] = amount;\r\n        emit Approval(from, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setCasterevent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setFreeAddressListevent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setTransactionListevent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ServieChargeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Totalissuance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_toburn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Caster_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setCaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"FreeAddressList_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setFreeAddressList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typenumber_\",\"type\":\"uint256\"}],\"name\":\"setServieChargeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TransactionList_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setTransactionList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tsl", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000011ce62f50c3b287e2b5da698c170f6b537ce8508", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b53280c5104f9bf99c444db7a7a94a531da2a0d8d87452afc44872c993568d8"}