{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    // ... (other functions from the ERC-20 interface)\r\n}\r\n\r\ncontract Airdrop {\r\n\r\n    address public admin;\r\n    address public tokenAddress;\r\n    bool public isContractEnabled = true;\r\n    mapping(address => bool) public isBlocked;\r\n    mapping(address => uint256) public lockedAmount;\r\n    mapping(address => uint256) public lastWithdrawalTimestamp;\r\n    uint256 public claimablePercentage;\r\n\r\n    event TokensAirdropped(address[] recipients, uint256[] amounts);\r\n    event ContractEnabled(bool enabled);\r\n    event AddressBlocked(address indexed account, bool blocked);\r\n    event Withdrawal(address indexed account, uint256 amount);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier contractIsEnabled() {\r\n        require(isContractEnabled, \"Contract is disabled\");\r\n        _;\r\n    }\r\n\r\n    modifier canWithdraw() {\r\n        require(\r\n            block.timestamp >= lastWithdrawalTimestamp[msg.sender] + 30 days,\r\n            \"Cooldown period not elapsed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        admin = msg.sender;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function setContractEnabled(bool _enabled) public onlyAdmin {\r\n        isContractEnabled = _enabled;\r\n        emit ContractEnabled(_enabled);\r\n    }\r\n\r\n    function setAddressBlocked(address _account, bool _blocked) public onlyAdmin {\r\n        isBlocked[_account] = _blocked;\r\n        emit AddressBlocked(_account, _blocked);\r\n    }\r\n\r\n    function setTokenAddress(address _tokenAddress) public onlyAdmin {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function setClaimablePercentage(uint256 _percentage) public onlyAdmin {\r\n        require(_percentage <= 100, \"Percentage should be between 0 and 100\");\r\n        claimablePercentage = _percentage;\r\n    }\r\n\r\n    // Function to initiate the airdrop\r\n    function distributeTokens(address[] memory recipients, uint256[] memory amounts)\r\n        public\r\n        onlyAdmin\r\n        contractIsEnabled\r\n    {\r\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(!isBlocked[recipients[i]], \"Address is blocked for airdrop\");\r\n            IERC20(tokenAddress).transferFrom(admin, recipients[i], amounts[i]);\r\n            lockedAmount[recipients[i]] += amounts[i];\r\n        }\r\n\r\n        emit TokensAirdropped(recipients, amounts);\r\n    }\r\n\r\n    function withdrawAirdrop() contractIsEnabled canWithdraw public {\r\n        require(!isBlocked[msg.sender], \"Address is blocked for airdrop\");     \r\n        require(lockedAmount[msg.sender] > 0, \"No locked tokens to withdraw\");\r\n\r\n        uint256 claimableAmount = (lockedAmount[msg.sender] * claimablePercentage) / 100;\r\n        lockedAmount[msg.sender] = 0;\r\n\r\n        require(IERC20(tokenAddress).transferFrom(admin, msg.sender, claimableAmount), \"Transfer failed\");\r\n\r\n        lastWithdrawalTimestamp[msg.sender] = block.timestamp;  // Update the last withdrawal timestamp\r\n\r\n        emit Withdrawal(msg.sender, claimableAmount);\r\n    }\r\n\r\n    function recoverTokens(address _tokenAddress, uint256 amount) public onlyAdmin {\r\n        require(_tokenAddress != address(this), \"Cannot recover tokens sent to this contract\");\r\n\r\n        (bool success, ) = _tokenAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", admin, amount));\r\n        require(success, \"Token transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"AddressBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimablePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdrawalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"setAddressBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setClaimablePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setContractEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d1a050d6efb41d3473db0ad1952ae287acbedcb5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17dd3e4e3ba8ca191d0fca8b9686c74a07d84e3e873eea24bbb36c935390db91"}