{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/InfinitUP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: unlicensed\\n\\n/*\\n\\n                        `.....    ............... \\n                        -:::::    ::::::::::::::: \\n                        -:::::    ::::::::::::::: \\n                        `.....    .........-::::: \\n                                           .::::: \\n                        `.....    .....`   .::::: \\n                        -:::::    :::::.   .::::: \\n                        -:::::    :::::.   .::::: \\n                        -:::::    .....`   `..... \\n                        -:::::                    \\n           ``...........::::::.........`   `..... \\n       `.-://////////::::::::::::::::::.   .::::: \\n     .:////////////////::::::::::::::::.   .::::: \\n   `://////:--..........::::::.........`   `..... \\n  `://///-`             -/::::                    \\n `://///.               -///::                    \\n -/////.                -////:                    \\n :////:                 -////:                    \\n :////:                 -////:                    \\n -/////.               `/////-                    \\n `//////.             `:////:`                    \\n  `//////-`         `-/////:.                     \\n   `://////:--...--://////:`                      \\n     .://///////////////:.                        \\n       `-:///////////:-`                          \\n           `.......`                              \\n         \\n\\n      _________\\n      (=========)\\n      |=========|\\n      |====_====|\\n      |== / \\\\ ==|\\n      |= / _ \\\\ =|\\n   _  |=| ( ) |=|\\n  /=\\\\ |=|     |=| /=\\\\\\n  |=| |=| BSC |=| |=|\\n  |=| |=|  _  |=| |=|\\n  |=| |=| | | |=| |=|\\n  |=| |=| | | |=| |=|\\n  |=| |=| | | |=| |=|\\n  |=| |/  | |  \\\\| |=|\\n  |=|/    |_|    \\\\|=|\\n  |=/  INFINITUP  \\\\=|\\n  |(_______________)|\\n  |=| |_|__|__|_| |=|\\n  |=|   ( ) ( )   |=|\\n /===\\\\           /===\\\\\\n|||||||         |||||||\\n-------         -------\\n (~~~)           (~~~)\\n\\n\\nTG: https://t.me/infinitup\\nWebsite: https://infinitup.io/\\n\\n*/\\n\\npragma solidity ^0.7.4;\\n\\ninterface WethLike {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != -1 || a != MIN_INT256);\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n}\\n\\n/**\\n * BEP20 standard interface.\\n */\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address => bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface InterfaceLP {\\n    function sync() external;\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\\n    function setShare(address shareholder, uint256 amount) external;\\n    function deposit() external payable;\\n    function process(uint256 gas) external;\\n}\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    using SafeMath for uint256;\\n\\n    address _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    WethLike WBNBc = WethLike(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n\\n    IBEP20 RWRD = IBEP20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    IDEXRouter router;\\n\\n    address[] shareholders;\\n    mapping (address => uint256) shareholderIndexes;\\n    mapping (address => uint256) shareholderClaims;\\n\\n    mapping (address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\\n\\n    uint256 public minPeriod = 45 * 60;\\n    uint256 public minDistribution = 1 * (10 ** 8);\\n\\n    uint256 currentIndex;\\n\\n    bool initialized;\\n    modifier initialization() {\\n        require(!initialized);\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token); _;\\n    }\\n\\n    constructor (address _router) {\\n        router = _router != address(0)\\n            ? IDEXRouter(_router)\\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        _token = msg.sender;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\\n        if(shares[shareholder].amount > 0){\\n            distributeDividend(shareholder);\\n        }\\n\\n        if(amount > 0 && shares[shareholder].amount == 0){\\n            addShareholder(shareholder);\\n        }else if(amount == 0 && shares[shareholder].amount > 0){\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        /*uint256 balanceBefore = RWRD.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = WBNB;\\n        path[1] = address(RWRD);\\n\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amount = RWRD.balanceOf(address(this)).sub(balanceBefore);*/\\n\\n        WBNBc.deposit{ value: msg.value }();\\n\\n        uint256 amount = RWRD.balanceOf(address(this));\\n\\n        totalDividends = totalDividends.add(amount);\\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if(shareholderCount == 0) { return; }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while(gasUsed < gas && iterations < shareholderCount) {\\n            if(currentIndex >= shareholderCount){\\n                currentIndex = 0;\\n            }\\n\\n            if(shouldDistribute(shareholders[currentIndex])){\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n    \\n    function shouldDistribute(address shareholder) internal view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\\n                && getUnpaidEarnings(shareholder) > minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if(shares[shareholder].amount == 0){ return; }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if(amount > 0){\\n            totalDistributed = totalDistributed.add(amount);\\n            RWRD.transfer(shareholder, amount);\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n        }\\n    }\\n    \\n    function claimDividend() external {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        if(shares[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\\n\\ncontract InfinitUP is IBEP20, Auth {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string constant _name = \\\"InfinitUP\\\";\\n    string constant _symbol = \\\"IUP\\\";\\n    uint8 constant _decimals = 4;\\n\\n\\n    //mapping (address => uint256) _balances;\\n    mapping (address => uint256) _rBalance;\\n    mapping (address => mapping (address => uint256)) _allowances;\\n\\n    mapping (address => bool) public isFeeExempt;\\n    mapping (address => bool) public isTxLimitExempt;\\n    mapping (address => bool) public isTimelockExempt;\\n    mapping (address => bool) public isDividendExempt;\\n\\n    uint256 public liquidityFee    = 2;\\n    uint256 public reflectionFee   = 7;\\n    uint256 public marketingFee    = 4;\\n    uint256 public devFee          = 2;\\n    uint256 public totalFee        = marketingFee + reflectionFee + liquidityFee + devFee;\\n    uint256 public feeDenominator  = 100;\\n\\n    // Anti-Bot v2\\n    uint256 public maxRoomRent = 8000000000;\\n    bool public hotelCaliforniaMode = false;\\n    mapping (address => bool) public isHouseguest;\\n\\n    uint256 public deadBlocks = 2;\\n    uint256 public launchedAt = 0;\\n\\n    uint256 public sellMultiplier  = 100;\\n\\n    address public autoLiquidityReceiver;\\n    address public marketingFeeReceiver;\\n    address public devFeeReceiver;\\n\\n    uint256 targetLiquidity = 20;\\n    uint256 targetLiquidityDenominator = 100;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n    InterfaceLP public pairContract; \\n\\n    bool public tradingOpen = false;\\n\\n    DividendDistributor public distributor;\\n    uint256 distributorGas = 500000;\\n\\n    bool public buyCooldownEnabled = false;\\n    uint8 public cooldownTimerInterval = 5;\\n    mapping (address => uint) private cooldownTimer;\\n\\n    bool public swapEnabled = false;\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n\\n    address public master;\\n    modifier onlyMaster() {\\n        require(msg.sender == master || isOwner(msg.sender));\\n        _;\\n    }\\n\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n    event CaliforniaCheckin(address guest, uint256 rentPaid);\\n\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**_decimals;\\n    uint256 public swapThreshold = rSupply * 10 / 10000;\\n    uint256 public rebase_count = 0;\\n    uint256 public rate;\\n    uint256 public _totalSupply;\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\\n    uint256 private constant rSupply = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    // Max wallet & Transaction\\n    uint256 public _maxTxAmount = rSupply.div(100).mul(2);\\n    uint256 public _maxWalletToken = rSupply.div(100).mul(3);\\n\\n    function rebase_percentage(uint256 _percentage_base1000, bool reduce) public onlyOwner returns (uint256 newSupply){\\n\\n        if(reduce){\\n            newSupply = rebase(0,int(_totalSupply.div(1000).mul(_percentage_base1000)).mul(-1));\\n        } else{\\n            newSupply = rebase(0,int(_totalSupply.div(1000).mul(_percentage_base1000)));\\n        }\\n        \\n    }\\n\\n    // Sauce\\n    function rebase(uint256 epoch, int256 supplyDelta) public onlyMaster returns (uint256) {\\n        rebase_count++;\\n        if(epoch == 0){\\n            epoch = rebase_count;\\n        }\\n\\n        require(!inSwap, \\\"Try again\\\");\\n\\n        if (supplyDelta == 0) {\\n            emit LogRebase(epoch, _totalSupply);\\n            return _totalSupply;\\n        }\\n\\n        if (supplyDelta < 0) {\\n            _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\\n        } else {\\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\\n        }\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        rate = rSupply.div(_totalSupply);\\n        pairContract.sync();\\n\\n        emit LogRebase(epoch, _totalSupply);\\n        return _totalSupply;\\n    }\\n\\n\\n\\n    constructor () Auth(msg.sender) {\\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\\n        _allowances[address(this)][address(router)] = uint256(-1);\\n\\n        \\n        pairContract = InterfaceLP(pair);\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        rate = rSupply.div(_totalSupply);\\n\\n\\n        distributor = new DividendDistributor(address(router));\\n\\n        isFeeExempt[msg.sender] = true;\\n        isTxLimitExempt[msg.sender] = true;\\n\\n        isTimelockExempt[msg.sender] = true;\\n        isTimelockExempt[DEAD] = true;\\n        isTimelockExempt[address(this)] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[DEAD] = true;\\n\\n        autoLiquidityReceiver = msg.sender;\\n        marketingFeeReceiver = 0x06674BfCD2Dc1d25BDB036Dcc020f0F3904A31CC;\\n        devFeeReceiver = 0x011fbD5aa65F609F7C48Aa1C4E6f6DCEf020Bdba;\\n\\n        _rBalance[msg.sender] = rSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    \\n    \\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\n    function name() external pure override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner; }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _rBalance[account].div(rate);\\n    }\\n    \\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    \\n    \\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, uint256(-1));\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != uint256(-1)){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\n\\n        if(!authorizations[sender] && !authorizations[recipient]){\\n            require(tradingOpen,\\\"Trading not open yet\\\");\\n        }\\n\\n        uint256 rAmount = amount.mul(rate);\\n\\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != devFeeReceiver  && recipient != autoLiquidityReceiver){\\n            uint256 heldTokens = balanceOf(recipient);\\n            require((heldTokens + rAmount) <= _maxWalletToken,\\\"Total Holding is currently limited, you can not buy that much.\\\");}\\n        \\n        if (sender == pair &&\\n            buyCooldownEnabled &&\\n            !isTimelockExempt[recipient]) {\\n            require(cooldownTimer[recipient] < block.timestamp,\\\"buy Cooldown exists\\\");\\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\\n        }\\n\\n    // plz ser, dont snipe with a bot\\n        if(hotelCaliforniaMode){\\n            require(!isHouseguest[sender],\\\"Bots cant sell\\\");\\n            if(tx.gasprice > maxRoomRent && sender == pair){\\n                isHouseguest[recipient] = true;\\n                emit CaliforniaCheckin(recipient, tx.gasprice);\\n            }\\n        }\\n\\n        // Checks max transaction limit\\n        checkTxLimit(sender, rAmount);\\n\\n        if(shouldSwapBack()){ swapBack(); }\\n\\n        //Exchange tokens\\n        _rBalance[sender] = _rBalance[sender].sub(rAmount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = (!shouldTakeFee(sender) || !shouldTakeFee(recipient)) ? rAmount : takeFee(sender, rAmount,(recipient == pair));\\n        _rBalance[recipient] = _rBalance[recipient].add(amountReceived);\\n\\n        // Dividend tracker\\n        if(!isDividendExempt[sender]) {\\n            try distributor.setShare(sender, balanceOf(sender)) {} catch {}\\n        }\\n\\n        if(!isDividendExempt[recipient]) {\\n            try distributor.setShare(recipient, balanceOf(recipient)) {} catch {} \\n        }\\n\\n        try distributor.process(distributorGas) {} catch {}\\n\\n        emit Transfer(sender, recipient, amountReceived.div(rate));\\n        return true;\\n    }\\n    \\n    // Changed\\n    \\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        uint256 rAmount = amount.mul(rate);\\n        _rBalance[sender] = _rBalance[sender].sub(rAmount, \\\"Insufficient Balance\\\");\\n        _rBalance[recipient] = _rBalance[recipient].add(rAmount);\\n        emit Transfer(sender, recipient, rAmount.div(rate));\\n        return true;\\n    }\\n\\n    function checkTxLimit(address sender, uint256 rAmount) internal view {\\n        require(rAmount <= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n\\n    function takeFee(address sender, uint256 rAmount, bool isSell) internal returns (uint256) {\\n        \\n        uint256 multiplier = 100;\\n        if(isSell){\\n            multiplier = sellMultiplier;\\n        } \\n\\n        uint256 feeAmount = rAmount.div(feeDenominator * 100).mul(totalFee).mul(multiplier);\\n\\n        if(!isSell && (launchedAt + deadBlocks) > block.number){\\n            feeAmount = rAmount.div(100).mul(99);\\n        }\\n\\n        _rBalance[address(this)] = _rBalance[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount.div(rate));\\n\\n        return rAmount.sub(feeAmount);\\n    }\\n\\n  \\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        && !inSwap\\n        && swapEnabled\\n        && _rBalance[address(this)] >= swapThreshold;\\n    }\\n\\n\\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    \\n    \\n    function clearStuckBalance_sender(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    \\n    \\n    function set_sell_multiplier(uint256 Multiplier) external onlyOwner{\\n        sellMultiplier = Multiplier;        \\n    }\\n\\n    // switch Trading\\n    \\n    function tradingStatus(bool _status, uint256 _deadBlocks) public onlyOwner {\\n        tradingOpen = _status;\\n        if(tradingOpen && launchedAt == 0){\\n            launchedAt = block.number;\\n            deadBlocks = _deadBlocks;\\n        }\\n    }\\n\\n    function launchStatus(uint256 _launchblock) public onlyOwner {\\n        launchedAt = _launchblock;\\n    }\\n\\n    // lobby manager\\n    function enable_hotel_CaliforniaMode(bool _status) public onlyOwner {\\n        hotelCaliforniaMode = _status;\\n    }\\n\\n    function set_max_roomrent(uint256 _rent_withoutdecimal) public onlyOwner {\\n        maxRoomRent = _rent_withoutdecimal * 10**9;\\n    }\\n\\n    function manage_houseguests(address[] calldata addresses, bool status) public onlyOwner {\\n        for (uint256 i; i < addresses.length; ++i) {\\n            isHouseguest[addresses[i]] = status;\\n        }\\n    }\\n\\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\\n        buyCooldownEnabled = _status;\\n        cooldownTimerInterval = _interval;\\n    }\\n\\n    // OK, check 3\\n    function swapBack() internal swapping {\\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\\n        uint256 tokensToSell = swapThreshold.div(rate);\\n\\n        uint256 amountToLiquify = tokensToSell.div(totalFee).mul(dynamicLiquidityFee).div(2);\\n        uint256 amountToSwap = tokensToSell.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WBNB;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\\n\\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\\n        \\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\\n        uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\\n\\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\\\"\\\");\\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountBNBDev, gas: 30000}(\\\"\\\");\\n        \\n        // only to supress warning msg\\n        tmpSuccess = false;\\n\\n        if(amountToLiquify > 0){\\n            router.addLiquidityETH{value: amountBNBLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify.div(rate));\\n        }\\n    }\\n\\n    \\n    \\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\\n        require(holder != address(this) && holder != pair);\\n        isDividendExempt[holder] = exempt;\\n        if(exempt){\\n            distributor.setShare(holder, 0);\\n        }else{\\n            distributor.setShare(holder, balanceOf(holder));\\n        }\\n    }\\n    \\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\\n        isFeeExempt[holder] = exempt;\\n    }\\n    \\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setIsTimelockExempt(address holder, bool exempt) external authorized {\\n        isTimelockExempt[holder] = exempt;\\n    }\\n\\n    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _devFee, uint256 _feeDenominator) external authorized {\\n        liquidityFee = _liquidityFee;\\n        reflectionFee = _reflectionFee;\\n        marketingFee = _marketingFee;\\n        devFee = _devFee;\\n        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(_devFee);\\n        feeDenominator = _feeDenominator;\\n        require(totalFee < feeDenominator/3, \\\"Fees cannot be more than 33%\\\");\\n    }\\n\\n    \\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _devFeeReceiver ) external authorized {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n        devFeeReceiver = _devFeeReceiver;\\n    }\\n\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _percentage_base10000) external authorized {\\n        swapEnabled = _enabled;\\n        swapThreshold = rSupply.div(10000).mul(_percentage_base10000);\\n    }\\n\\n\\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\\n        targetLiquidity = _target;\\n        targetLiquidityDenominator = _denominator;\\n    }\\n\\n    \\n    function manualSync() external {\\n        InterfaceLP(pair).sync();\\n    }\\n    \\n    function setLP(address _address) external onlyOwner {\\n        pairContract = InterfaceLP(_address);\\n        isFeeExempt[_address];\\n    }\\n\\n    \\n    \\n    function setMaster(address _master) external onlyOwner {\\n        master = _master;\\n    }\\n\\n    \\n    function isNotInSwap() external view returns (bool) {\\n        return !inSwap;\\n    }\\n\\n    \\n    \\n    function checkSwapThreshold() external view returns (uint256) {\\n        return swapThreshold.div(rate);\\n    }\\n\\n\\n    \\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\\n    }\\n\\n    \\n    \\n    function setDistributorSettings(uint256 gas) external authorized {\\n        require(gas < 900000);\\n        distributorGas = gas;\\n    }\\n    \\n    \\n    \\n    function rescueToken(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\\n        return IBEP20(tokenAddress).transfer(msg.sender, tokens);\\n    }\\n\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return (rSupply.sub(_rBalance[DEAD]).sub(_rBalance[ZERO])).div(rate);\\n    }\\n\\n\\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\n    }\\n\\n\\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\\n        return getLiquidityBacking(accuracy) > target;\\n    }\\n\\n    function checkMaxWalletToken() external view returns (uint256) {\\n        return _maxWalletToken.div(rate);\\n    }\\n\\n    \\n    function checkMaxTxAmount() external view returns (uint256) {\\n        return _maxTxAmount.div(rate);\\n    }\\n\\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\\n        _maxWalletToken = rSupply.div(1000).mul(maxWallPercent_base1000);\\n    }\\n\\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner() {\\n        _maxTxAmount = rSupply.div(1000).mul(maxTXPercentage_base1000);\\n    }\\n\\n\\n\\n/* Airdrop Begins */\\n\\nfunction multiTransfer(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\\n\\n    require(addresses.length < 801,\\\"GAS Error: max airdrop limit is 500 addresses\\\"); // to prevent overflow\\n    require(addresses.length == tokens.length,\\\"Mismatch between Address and token count\\\");\\n\\n    uint256 SCCC = 0;\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        SCCC = SCCC + tokens[i];\\n    }\\n\\n    require(balanceOf(from) >= SCCC, \\\"Not enough tokens in wallet\\\");\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        _basicTransfer(from,addresses[i],tokens[i]);\\n        if(!isDividendExempt[addresses[i]]) {\\n            try distributor.setShare(addresses[i], balanceOf(addresses[i])) {} catch {} \\n        }\\n    }\\n\\n    // Dividend tracker\\n    if(!isDividendExempt[from]) {\\n        try distributor.setShare(from, balanceOf(from)) {} catch {}\\n    }\\n}\\n\\nfunction multiTransfer_fixed(address from, address[] calldata addresses, uint256 tokens) external onlyOwner {\\n\\n    require(addresses.length < 2001,\\\"GAS Error: max airdrop limit is 2000 addresses\\\"); // to prevent overflow\\n\\n    uint256 SCCC = tokens * addresses.length;\\n\\n    require(balanceOf(from) >= SCCC, \\\"Not enough tokens in wallet\\\");\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        _basicTransfer(from,addresses[i],tokens);\\n        if(!isDividendExempt[addresses[i]]) {\\n            try distributor.setShare(addresses[i], balanceOf(addresses[i])) {} catch {} \\n        }\\n    }\\n\\n    // Dividend tracker\\n    if(!isDividendExempt[from]) {\\n        try distributor.setShare(from, balanceOf(from)) {} catch {}\\n    }\\n}\\n\\nfunction rebase_updatebalance(address[] calldata addresses) external onlyOwner {\\n\\n    require(addresses.length < 5001,\\\"GAS Error: max address allowed is 5000\\\"); // to prevent out of gas & overflow error\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        if(!isDividendExempt[addresses[i]]) {\\n            try distributor.setShare(addresses[i], balanceOf(addresses[i])) {} catch {} \\n        }\\n    }\\n}\\n\\nevent AutoLiquify(uint256 amountBNB, uint256 amountTokens);\\n\\n}\\n// ~by monkey\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rentPaid\",\"type\":\"uint256\"}],\"name\":\"CaliforniaCheckin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance_sender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enable_hotel_CaliforniaMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hotelCaliforniaMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHouseguest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTimelockExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchblock\",\"type\":\"uint256\"}],\"name\":\"launchStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_houseguests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoomRent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"multiTransfer_fixed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage_base1000\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reduce\",\"type\":\"bool\"}],\"name\":\"rebase_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"rebase_updatebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentage_base10000\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rent_withoutdecimal\",\"type\":\"uint256\"}],\"name\":\"set_max_roomrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Multiplier\",\"type\":\"uint256\"}],\"name\":\"set_sell_multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InfinitUP", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}