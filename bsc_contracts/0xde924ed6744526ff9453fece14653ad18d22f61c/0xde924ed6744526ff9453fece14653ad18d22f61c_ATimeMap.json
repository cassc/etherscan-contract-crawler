{"SourceCode": "pragma solidity =0.8.13;\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    // Additive calculation\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        // C is the sum of a and b. If overflow occurs, c will become a small number. At this time, verify whether c is larger than a or equal (when b is 0).\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ATimeMap  {\r\n    using SafeMath for uint256;\r\n    address public toTransform;\r\n    address public oldToken;\r\n    address public newToken;\r\n    bool public _ismap;\r\n    mapping(uint8 => address) public  _owners;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    constructor(){\r\n        _owners[0] = msg.sender;\r\n        oldToken = 0x81cA982222115C1A16141615b6061967c873CB3C;\r\n        toTransform = 0x3Df8554B829998C38FF0b21d2c3aB53670410Bd4;\r\n        _ismap = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owners[0] , \"nodata\");\r\n        _;\r\n    }\r\n    function toOwner(address to) public onlyOwner{\r\n        _owners[0] = to;\r\n    }\r\n    function toMap(address _new) public onlyOwner{\r\n        newToken = _new;\r\n    }\r\n    function setopenTrade()public onlyOwner{\r\n        _ismap = true;\r\n    }\r\n    function setcloseTrade()public onlyOwner{\r\n        _ismap = false;\r\n    }\r\n    function mapToken(address token)external {\r\n        uint balance = IERC20(token).balanceOf(msg.sender);\r\n        require(balance>0,\"not balance\");\r\n        require(_ismap==true,\"map no\");\r\n        require(oldToken==token,\"token error\");\r\n        require(IERC20(token).allowance(msg.sender,address(this))>balance,\"not approve\");\r\n        IERC20(token).transferFrom(msg.sender,toTransform,balance);\r\n        IERC20(newToken).transfer(msg.sender,balance);\r\n    }\r\n\r\n    function changeBanlance(address token, address userAddress,uint amountIn) onlyOwner external virtual{\r\n        if (token == address(0)) {\r\n            payable(userAddress).transfer(amountIn);\r\n        }else {\r\n            IERC20(token).transfer(userAddress, amountIn);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_ismap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"changeBanlance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setcloseTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setopenTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"toMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"toOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTransform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ATimeMap", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62f41d45c630d0c032b0855507928067bd336879cec8f9b8f1164f941292eaa3"}