{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface INFT {\r\n    function mint(address to, uint256 num) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface IToken {\r\n    function nftReward(address account) external view returns (uint256);\r\n\r\n    function initSaleLP(address account, uint256 lpAmount) external;\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\nabstract contract AbsPreSale is Ownable {\r\n    struct UserInfo {\r\n        bool active;\r\n        uint256 nftInviteIndex;\r\n    }\r\n\r\n    uint256 private _pricePerSale;\r\n    uint256 private _tokenAmountPerSale;\r\n\r\n    address public _cashAddress;\r\n    address private _tokenAddress;\r\n\r\n    address public _nftAddress;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n    address[] public _userList;\r\n    bool private _pauseBuy = false;\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(address => address[]) public _binder;\r\n\r\n    uint256 private _nftCondition = 10;\r\n    address private _defaultInvitor;\r\n    uint256 public _inviteRate = 1000;\r\n    uint256 public _lpRate = 5000;\r\n\r\n    address private immutable _weth;\r\n    ISwapRouter private immutable _swapRouter;\r\n    ISwapFactory private immutable _swapFactory;\r\n\r\n    constructor(address RouterAddress, address TokenAddress, address NFTAddress, address CashAddress, address DefaultInvitor){\r\n        _cashAddress = CashAddress;\r\n        _tokenAddress = TokenAddress;\r\n        _nftAddress = NFTAddress;\r\n        _pricePerSale = 0.5 ether;\r\n        _tokenAmountPerSale = 13500 * 10 ** IERC20(TokenAddress).decimals();\r\n        _defaultInvitor = DefaultInvitor;\r\n        _userInfo[DefaultInvitor].active = true;\r\n        IERC20(TokenAddress).approve(RouterAddress, ~uint256(0));\r\n        _swapRouter = ISwapRouter(RouterAddress);\r\n        _swapFactory = ISwapFactory(_swapRouter.factory());\r\n        _weth = _swapRouter.WETH();\r\n    }\r\n\r\n    function buy(address invitor) external payable {\r\n        require(!_pauseBuy, \"pauseBuy\");\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        require(!userInfo.active, \"bought\");\r\n\r\n        UserInfo storage invitorInfo = _userInfo[invitor];\r\n        require(invitorInfo.active, \"invalid Invitor\");\r\n        _invitor[account] = invitor;\r\n        _binder[invitor].push(account);\r\n        invitorInfo.nftInviteIndex += 1;\r\n        if (invitorInfo.nftInviteIndex >= _nftCondition) {\r\n            invitorInfo.nftInviteIndex = 0;\r\n            _giveNFT(invitor);\r\n        }\r\n        userInfo.active = true;\r\n        _userList.push(account);\r\n\r\n        uint256 value = _pricePerSale;\r\n        require(msg.value >= value, \"value\");\r\n\r\n        uint256 inviteValue = value * _inviteRate / 10000;\r\n        safeTransferETH(invitor, inviteValue);\r\n        uint256 lpValue = value - inviteValue;\r\n        address tokenAddress = _tokenAddress;\r\n        (, , uint liquidity) = _swapRouter.addLiquidityETH{value : lpValue}(tokenAddress, _tokenAmountPerSale, 0, 0, address(this), block.timestamp);\r\n        address lp = _swapFactory.getPair(_weth, tokenAddress);\r\n        uint256 userLP = liquidity * _lpRate / (10000 - _inviteRate);\r\n        IToken(tokenAddress).initSaleLP(account, userLP);\r\n        IERC20(lp).transfer(account, userLP);\r\n        IERC20(lp).transfer(_cashAddress, liquidity - userLP);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        if (success) {\r\n\r\n        }\r\n    }\r\n\r\n    function _giveNFT(address invitor) private {\r\n        INFT(_nftAddress).mint(invitor, 1);\r\n    }\r\n\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 tokenNum) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= tokenNum, \"BNE\");\r\n        token.transfer(account, tokenNum);\r\n    }\r\n\r\n    function getSaleInfo() external view returns (\r\n        address tokenAddress, uint256 tokenDecimals, string memory tokenSymbol,\r\n        uint256 pricePerSale, uint256 tokenAmountPerSale,\r\n        bool pauseBuy, uint256 nftCondition, uint256 saleTokenAmount,\r\n        address defaultInvitor\r\n    ) {\r\n        tokenAddress = _tokenAddress;\r\n        tokenDecimals = IERC20(tokenAddress).decimals();\r\n        tokenSymbol = IERC20(tokenAddress).symbol();\r\n        pricePerSale = _pricePerSale;\r\n        tokenAmountPerSale = _tokenAmountPerSale;\r\n        pauseBuy = _pauseBuy;\r\n        nftCondition = _nftCondition;\r\n        saleTokenAmount = IERC20(tokenAddress).balanceOf(address(this));\r\n        defaultInvitor = _defaultInvitor;\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        bool active,\r\n        uint256 nftInviteIndex,\r\n        uint256 balance,\r\n        uint256 nftNum,\r\n        uint256 nftReward,\r\n        uint256 binderLength\r\n    ) {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        active = userInfo.active;\r\n        nftInviteIndex = userInfo.nftInviteIndex;\r\n        balance = account.balance;\r\n        nftNum = INFT(_nftAddress).balanceOf(account);\r\n        nftReward = IToken(_tokenAddress).nftReward(account);\r\n        binderLength = _binder[account].length;\r\n    }\r\n\r\n    function getBinderLength(address account) public view returns (uint256){\r\n        return _binder[account].length;\r\n    }\r\n\r\n    function getUserListLength() public view returns (uint256){\r\n        return _userList.length;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setAmountPerSale(uint256 amount) external onlyOwner {\r\n        _tokenAmountPerSale = amount;\r\n    }\r\n\r\n    function setPricePerSale(uint256 amount) external onlyOwner {\r\n        _pricePerSale = amount;\r\n    }\r\n\r\n    function setNftCondition(uint256 c) external onlyOwner {\r\n        _nftCondition = c;\r\n    }\r\n\r\n    function setTokenAddress(address adr) external onlyOwner {\r\n        _tokenAddress = adr;\r\n        IERC20(adr).approve(address(_swapRouter), ~uint256(0));\r\n    }\r\n\r\n    function setDefaultInvitor(address adr) external onlyOwner {\r\n        _defaultInvitor = adr;\r\n        _userInfo[_defaultInvitor].active = true;\r\n    }\r\n\r\n    function setCashAddress(address adr) external onlyOwner {\r\n        _cashAddress = adr;\r\n    }\r\n\r\n    function claimBalance(uint256 amount, address to) external onlyOwner {\r\n        address payable addr = payable(to);\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function claimToken(address erc20Address, address to, uint256 amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        erc20.transfer(to, amount);\r\n    }\r\n\r\n    function setPauseBuy(bool pause) external onlyOwner {\r\n        _pauseBuy = pause;\r\n    }\r\n\r\n    function getUserList(\r\n        uint256 start,\r\n        uint256 length\r\n    ) external view returns (\r\n        uint256 returnCount,\r\n        address[] memory userList\r\n    ){\r\n        uint256 recordLen = _userList.length;\r\n        if (0 == length) {\r\n            length = recordLen;\r\n        }\r\n        returnCount = length;\r\n\r\n        userList = new address[](length);\r\n        uint256 index = 0;\r\n        for (uint256 i = start; i < start + length; i++) {\r\n            if (i >= recordLen) {\r\n                return (index, userList);\r\n            }\r\n            userList[index] = _userList[i];\r\n            index++;\r\n        }\r\n    }\r\n}\r\n\r\ncontract PreSale is AbsPreSale {\r\n    constructor() AbsPreSale(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //Token\r\n        address(0xbDc52e316535D745fe0506CCe5573Db2ac3C7bA1),\r\n    //NFT\r\n        address(0x4a60BE007f5E48cBfb7009A64fb287AB08815392),\r\n    //Cash\r\n        address(0x8565f096A6cE251d3d032f4788ebd33A2e175A29),\r\n    //Default Invitor\r\n        address(0x194d29255526e6ED1449faF6444e871A8385E01d)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviteRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountPerSale\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pauseBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultInvitor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftInviteIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binderLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountPerSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCashAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDefaultInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setNftCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPauseBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPricePerSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PreSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63adc7f227baf22768841ea77d86713e505b58dd6c928a7359656a56d7de5c0a"}