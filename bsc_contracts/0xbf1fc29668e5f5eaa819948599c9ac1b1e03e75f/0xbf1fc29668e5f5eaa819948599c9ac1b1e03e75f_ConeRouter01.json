{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/periphery/ConeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IWMATIC.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\n\\ncontract ConeRouter01 {\\n  using SafeERC20 for IERC20;\\n\\n  struct Route {\\n    address from;\\n    address to;\\n    bool stable;\\n  }\\n\\n  address public immutable factory;\\n  IWMATIC public immutable wmatic;\\n  uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n  bytes32 immutable pairCodeHash;\\n\\n  modifier ensure(uint deadline) {\\n    require(deadline >= block.timestamp, 'ConeRouter: EXPIRED');\\n    _;\\n  }\\n\\n  constructor(address _factory, address _wmatic) {\\n    factory = _factory;\\n    pairCodeHash = IFactory(_factory).pairCodeHash();\\n    wmatic = IWMATIC(_wmatic);\\n  }\\n\\n  receive() external payable {\\n    // only accept ETH via fallback from the WETH contract\\n    require(msg.sender == address(wmatic), \\\"ConeRouter: NOT_WMATIC\\\");\\n  }\\n\\n  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1) {\\n    return _sortTokens(tokenA, tokenB);\\n  }\\n\\n  function _sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, 'ConeRouter: IDENTICAL_ADDRESSES');\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), 'ConeRouter: ZERO_ADDRESS');\\n  }\\n\\n  function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair) {\\n    return _pairFor(tokenA, tokenB, stable);\\n  }\\n\\n  /// @dev Calculates the CREATE2 address for a pair without making any external calls.\\n  function _pairFor(address tokenA, address tokenB, bool stable) internal view returns (address pair) {\\n    (address token0, address token1) = _sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint(keccak256(abi.encodePacked(\\n        hex'ff',\\n        factory,\\n        keccak256(abi.encodePacked(token0, token1, stable)),\\n        pairCodeHash // init code hash\\n      )))));\\n  }\\n\\n  function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB) {\\n    return _quoteLiquidity(amountA, reserveA, reserveB);\\n  }\\n\\n  /// @dev Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset.\\n  function _quoteLiquidity(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n    require(amountA > 0, 'ConeRouter: INSUFFICIENT_AMOUNT');\\n    require(reserveA > 0 && reserveB > 0, 'ConeRouter: INSUFFICIENT_LIQUIDITY');\\n    amountB = amountA * reserveB / reserveA;\\n  }\\n\\n  function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB) {\\n    return _getReserves(tokenA, tokenB, stable);\\n  }\\n\\n  /// @dev Fetches and sorts the reserves for a pair.\\n  function _getReserves(address tokenA, address tokenB, bool stable) internal view returns (uint reserveA, uint reserveB) {\\n    (address token0,) = _sortTokens(tokenA, tokenB);\\n    (uint reserve0, uint reserve1,) = IPair(_pairFor(tokenA, tokenB, stable)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  /// @dev Performs chained getAmountOut calculations on any number of pairs.\\n  function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable) {\\n    address pair = _pairFor(tokenIn, tokenOut, true);\\n    uint amountStable;\\n    uint amountVolatile;\\n    if (IFactory(factory).isPair(pair)) {\\n      amountStable = IPair(pair).getAmountOut(amountIn, tokenIn);\\n    }\\n    pair = _pairFor(tokenIn, tokenOut, false);\\n    if (IFactory(factory).isPair(pair)) {\\n      amountVolatile = IPair(pair).getAmountOut(amountIn, tokenIn);\\n    }\\n    return amountStable > amountVolatile ? (amountStable, true) : (amountVolatile, false);\\n  }\\n\\n  function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\n    address pair = _pairFor(tokenIn, tokenOut, stable);\\n    if (IFactory(factory).isPair(pair)) {\\n      return IPair(pair).getAmountOut(amountIn, tokenIn);\\n    }\\n    return 0;\\n  }\\n\\n  /// @dev Performs chained getAmountOut calculations on any number of pairs.\\n  function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts) {\\n    return _getAmountsOut(amountIn, routes);\\n  }\\n\\n  function _getAmountsOut(uint amountIn, Route[] memory routes) internal view returns (uint[] memory amounts) {\\n    require(routes.length >= 1, 'ConeRouter: INVALID_PATH');\\n    amounts = new uint[](routes.length + 1);\\n    amounts[0] = amountIn;\\n    for (uint i = 0; i < routes.length; i++) {\\n      address pair = _pairFor(routes[i].from, routes[i].to, routes[i].stable);\\n      if (IFactory(factory).isPair(pair)) {\\n        amounts[i + 1] = IPair(pair).getAmountOut(amounts[i], routes[i].from);\\n      }\\n    }\\n  }\\n\\n  function isPair(address pair) external view returns (bool) {\\n    return IFactory(factory).isPair(pair);\\n  }\\n\\n  function quoteAddLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint amountADesired,\\n    uint amountBDesired\\n  ) external view returns (uint amountA, uint amountB, uint liquidity) {\\n    // create the pair if it doesn't exist yet\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n    (uint reserveA, uint reserveB) = (0, 0);\\n    uint _totalSupply = 0;\\n    if (_pair != address(0)) {\\n      _totalSupply = IERC20(_pair).totalSupply();\\n      (reserveA, reserveB) = _getReserves(tokenA, tokenB, stable);\\n    }\\n    if (reserveA == 0 && reserveB == 0) {\\n      (amountA, amountB) = (amountADesired, amountBDesired);\\n      liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\\n    } else {\\n\\n      uint amountBOptimal = _quoteLiquidity(amountADesired, reserveA, reserveB);\\n      if (amountBOptimal <= amountBDesired) {\\n        (amountA, amountB) = (amountADesired, amountBOptimal);\\n        liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n      } else {\\n        uint amountAOptimal = _quoteLiquidity(amountBDesired, reserveB, reserveA);\\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\\n        liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n      }\\n    }\\n  }\\n\\n  function quoteRemoveLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint liquidity\\n  ) external view returns (uint amountA, uint amountB) {\\n    // create the pair if it doesn't exist yet\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n\\n    if (_pair == address(0)) {\\n      return (0, 0);\\n    }\\n\\n    (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\n    uint _totalSupply = IERC20(_pair).totalSupply();\\n    // using balances ensures pro-rata distribution\\n    amountA = liquidity * reserveA / _totalSupply;\\n    // using balances ensures pro-rata distribution\\n    amountB = liquidity * reserveB / _totalSupply;\\n\\n  }\\n\\n  function _addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin\\n  ) internal returns (uint amountA, uint amountB) {\\n    require(amountADesired >= amountAMin, \\\"ConeRouter: DESIRED_A_AMOUNT\\\");\\n    require(amountBDesired >= amountBMin, \\\"ConeRouter: DESIRED_B_AMOUNT\\\");\\n    // create the pair if it doesn't exist yet\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n    if (_pair == address(0)) {\\n      _pair = IFactory(factory).createPair(tokenA, tokenB, stable);\\n    }\\n    (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\n    if (reserveA == 0 && reserveB == 0) {\\n      (amountA, amountB) = (amountADesired, amountBDesired);\\n    } else {\\n      uint amountBOptimal = _quoteLiquidity(amountADesired, reserveA, reserveB);\\n      if (amountBOptimal <= amountBDesired) {\\n        require(amountBOptimal >= amountBMin, 'ConeRouter: INSUFFICIENT_B_AMOUNT');\\n        (amountA, amountB) = (amountADesired, amountBOptimal);\\n      } else {\\n        uint amountAOptimal = _quoteLiquidity(amountBDesired, reserveB, reserveA);\\n        assert(amountAOptimal <= amountADesired);\\n        require(amountAOptimal >= amountAMin, 'ConeRouter: INSUFFICIENT_A_AMOUNT');\\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\\n      }\\n    }\\n  }\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n    (amountA, amountB) = _addLiquidity(\\n      tokenA,\\n      tokenB,\\n      stable,\\n      amountADesired,\\n      amountBDesired,\\n      amountAMin,\\n      amountBMin\\n    );\\n    address pair = _pairFor(tokenA, tokenB, stable);\\n    SafeERC20.safeTransferFrom(IERC20(tokenA), msg.sender, pair, amountA);\\n    SafeERC20.safeTransferFrom(IERC20(tokenB), msg.sender, pair, amountB);\\n    liquidity = IPair(pair).mint(to);\\n  }\\n\\n  function addLiquidityMATIC(\\n    address token,\\n    bool stable,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountMATICMin,\\n    address to,\\n    uint deadline\\n  ) external payable ensure(deadline) returns (uint amountToken, uint amountMATIC, uint liquidity) {\\n    (amountToken, amountMATIC) = _addLiquidity(\\n      token,\\n      address(wmatic),\\n      stable,\\n      amountTokenDesired,\\n      msg.value,\\n      amountTokenMin,\\n      amountMATICMin\\n    );\\n    address pair = _pairFor(token, address(wmatic), stable);\\n    IERC20(token).safeTransferFrom(msg.sender, pair, amountToken);\\n    wmatic.deposit{value : amountMATIC}();\\n    assert(wmatic.transfer(pair, amountMATIC));\\n    liquidity = IPair(pair).mint(to);\\n    // refund dust eth, if any\\n    if (msg.value > amountMATIC) _safeTransferMATIC(msg.sender, msg.value - amountMATIC);\\n  }\\n\\n  // **** REMOVE LIQUIDITY ****\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB) {\\n    return _removeLiquidity(\\n      tokenA,\\n      tokenB,\\n      stable,\\n      liquidity,\\n      amountAMin,\\n      amountBMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  function _removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) internal ensure(deadline) returns (uint amountA, uint amountB) {\\n    address pair = _pairFor(tokenA, tokenB, stable);\\n    IERC20(pair).safeTransferFrom(msg.sender, pair, liquidity);\\n    // send liquidity to pair\\n    (uint amount0, uint amount1) = IPair(pair).burn(to);\\n    (address token0,) = _sortTokens(tokenA, tokenB);\\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n    require(amountA >= amountAMin, 'ConeRouter: INSUFFICIENT_A_AMOUNT');\\n    require(amountB >= amountBMin, 'ConeRouter: INSUFFICIENT_B_AMOUNT');\\n  }\\n\\n  function removeLiquidityMATIC(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountMATICMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountMATIC) {\\n    return _removeLiquidityMATIC(\\n      token,\\n      stable,\\n      liquidity,\\n      amountTokenMin,\\n      amountMATICMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  function _removeLiquidityMATIC(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountMATICMin,\\n    address to,\\n    uint deadline\\n  ) internal ensure(deadline) returns (uint amountToken, uint amountMATIC) {\\n    (amountToken, amountMATIC) = _removeLiquidity(\\n      token,\\n      address(wmatic),\\n      stable,\\n      liquidity,\\n      amountTokenMin,\\n      amountMATICMin,\\n      address(this),\\n      deadline\\n    );\\n    IERC20(token).safeTransfer(to, amountToken);\\n    wmatic.withdraw(amountMATIC);\\n    _safeTransferMATIC(to, amountMATIC);\\n  }\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountA, uint amountB) {\\n    address pair = _pairFor(tokenA, tokenB, stable);\\n    {\\n      uint value = approveMax ? type(uint).max : liquidity;\\n      IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n    }\\n\\n    (amountA, amountB) = _removeLiquidity(tokenA, tokenB, stable, liquidity, amountAMin, amountBMin, to, deadline);\\n  }\\n\\n  function removeLiquidityMATICWithPermit(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountMATICMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountMATIC) {\\n    address pair = _pairFor(token, address(wmatic), stable);\\n    uint value = approveMax ? type(uint).max : liquidity;\\n    IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n    (amountToken, amountMATIC) = _removeLiquidityMATIC(token, stable, liquidity, amountTokenMin, amountMATICMin, to, deadline);\\n  }\\n\\n  function removeLiquidityMATICSupportingFeeOnTransferTokens(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountFTMMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountFTM) {\\n    return _removeLiquidityMATICSupportingFeeOnTransferTokens(\\n      token,\\n      stable,\\n      liquidity,\\n      amountTokenMin,\\n      amountFTMMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  function _removeLiquidityMATICSupportingFeeOnTransferTokens(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountFTMMin,\\n    address to,\\n    uint deadline\\n  ) internal ensure(deadline) returns (uint amountToken, uint amountFTM) {\\n    (amountToken, amountFTM) = _removeLiquidity(\\n      token,\\n      address(wmatic),\\n      stable,\\n      liquidity,\\n      amountTokenMin,\\n      amountFTMMin,\\n      address(this),\\n      deadline\\n    );\\n    IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\n    wmatic.withdraw(amountFTM);\\n    _safeTransferMATIC(to, amountFTM);\\n  }\\n\\n  function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    bool stable,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountFTMMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountFTM) {\\n    address pair = _pairFor(token, address(wmatic), stable);\\n    uint value = approveMax ? type(uint).max : liquidity;\\n    IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n    (amountToken, amountFTM) = _removeLiquidityMATICSupportingFeeOnTransferTokens(\\n      token, stable, liquidity, amountTokenMin, amountFTMMin, to, deadline\\n    );\\n  }\\n\\n  // **** SWAP ****\\n  // requires the initial amount to have already been sent to the first pair\\n  function _swap(uint[] memory amounts, Route[] memory routes, address _to) internal virtual {\\n    for (uint i = 0; i < routes.length; i++) {\\n      (address token0,) = _sortTokens(routes[i].from, routes[i].to);\\n      uint amountOut = amounts[i + 1];\\n      (uint amount0Out, uint amount1Out) = routes[i].from == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n      address to = i < routes.length - 1 ? _pairFor(routes[i + 1].from, routes[i + 1].to, routes[i + 1].stable) : _to;\\n      IPair(_pairFor(routes[i].from, routes[i].to, routes[i].stable)).swap(\\n        amount0Out, amount1Out, to, new bytes(0)\\n      );\\n    }\\n  }\\n\\n  function _swapSupportingFeeOnTransferTokens(Route[] memory routes, address _to) internal virtual {\\n    for (uint i; i < routes.length; i++) {\\n      (address input, address output) = (routes[i].from, routes[i].to);\\n      (address token0,) = _sortTokens(input, output);\\n      IPair pair = IPair(_pairFor(routes[i].from, routes[i].to, routes[i].stable));\\n      uint amountInput;\\n      uint amountOutput;\\n      {// scope to avoid stack too deep errors\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\n        uint reserveInput = input == token0 ? reserve0 : reserve1;\\n        amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n        //(amountOutput,) = getAmountOut(amountInput, input, output, stable);\\n        amountOutput = pair.getAmountOut(amountInput, input);\\n      }\\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n      address to = i < routes.length - 1 ? _pairFor(routes[i + 1].from, routes[i + 1].to, routes[i + 1].stable) : _to;\\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n  }\\n\\n  function swapExactTokensForTokensSimple(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address tokenFrom,\\n    address tokenTo,\\n    bool stable,\\n    address to,\\n    uint deadline\\n  ) external ensure(deadline) returns (uint[] memory amounts) {\\n    Route[] memory routes = new Route[](1);\\n    routes[0].from = tokenFrom;\\n    routes[0].to = tokenTo;\\n    routes[0].stable = stable;\\n    amounts = _getAmountsOut(amountIn, routes);\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n    IERC20(routes[0].from).safeTransferFrom(\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n    );\\n    _swap(amounts, routes, to);\\n  }\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint deadline\\n  ) external ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = _getAmountsOut(amountIn, routes);\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n    IERC20(routes[0].from).safeTransferFrom(\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n    );\\n    _swap(amounts, routes, to);\\n  }\\n\\n  function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n  external\\n  payable\\n  ensure(deadline)\\n  returns (uint[] memory amounts)\\n  {\\n    require(routes[0].from == address(wmatic), 'ConeRouter: INVALID_PATH');\\n    amounts = _getAmountsOut(msg.value, routes);\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n    wmatic.deposit{value : amounts[0]}();\\n    assert(wmatic.transfer(_pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\\n    _swap(amounts, routes, to);\\n  }\\n\\n  function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n  external\\n  ensure(deadline)\\n  returns (uint[] memory amounts)\\n  {\\n    require(routes[routes.length - 1].to == address(wmatic), 'ConeRouter: INVALID_PATH');\\n    amounts = _getAmountsOut(amountIn, routes);\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n    IERC20(routes[0].from).safeTransferFrom(\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n    );\\n    _swap(amounts, routes, address(this));\\n    wmatic.withdraw(amounts[amounts.length - 1]);\\n    _safeTransferMATIC(to, amounts[amounts.length - 1]);\\n  }\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint deadline\\n  ) external ensure(deadline) {\\n    IERC20(routes[0].from).safeTransferFrom(\\n      msg.sender,\\n      _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n      amountIn\\n    );\\n    uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\n    _swapSupportingFeeOnTransferTokens(routes, to);\\n    require(\\n      IERC20(routes[routes.length - 1].to).balanceOf(to) - balanceBefore >= amountOutMin,\\n      'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n  }\\n\\n  function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint deadline\\n  )\\n  external\\n  payable\\n  ensure(deadline)\\n  {\\n    require(routes[0].from == address(wmatic), 'ConeRouter: INVALID_PATH');\\n    uint amountIn = msg.value;\\n    wmatic.deposit{value : amountIn}();\\n    assert(wmatic.transfer(_pairFor(routes[0].from, routes[0].to, routes[0].stable), amountIn));\\n    uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\n    _swapSupportingFeeOnTransferTokens(routes, to);\\n    require(\\n      IERC20(routes[routes.length - 1].to).balanceOf(to) - balanceBefore >= amountOutMin,\\n      'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n  }\\n\\n  function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint deadline\\n  )\\n  external\\n  ensure(deadline)\\n  {\\n    require(routes[routes.length - 1].to == address(wmatic), 'ConeRouter: INVALID_PATH');\\n    IERC20(routes[0].from).safeTransferFrom(\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amountIn\\n    );\\n    _swapSupportingFeeOnTransferTokens(routes, address(this));\\n    uint amountOut = IERC20(address(wmatic)).balanceOf(address(this));\\n    require(amountOut >= amountOutMin, 'ConeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n    wmatic.withdraw(amountOut);\\n    _safeTransferMATIC(to, amountOut);\\n  }\\n\\n  function UNSAFE_swapExactTokensForTokens(\\n    uint[] memory amounts,\\n    Route[] calldata routes,\\n    address to,\\n    uint deadline\\n  ) external ensure(deadline) returns (uint[] memory) {\\n    IERC20(routes[0].from).safeTransferFrom(msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]);\\n    _swap(amounts, routes, to);\\n    return amounts;\\n  }\\n\\n  function _safeTransferMATIC(address to, uint value) internal {\\n    (bool success,) = to.call{value : value}(new bytes(0));\\n    require(success, 'ConeRouter: ETH_TRANSFER_FAILED');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary Math {\\n\\n  function max(uint a, uint b) internal pure returns (uint) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\n    if (a > b) {\\n      if (a - b <= target) {\\n        return true;\\n      }\\n    } else {\\n      if (b - a <= target) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint value\\n  ) internal {\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IWMATIC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IWMATIC {\\n  function name() external view returns (string memory);\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function transfer(address dst, uint256 wad) external returns (bool);\\n\\n  function deposit() external payable;\\n\\n  function allowance(address, address) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IPair {\\n\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\n  struct Observation {\\n    uint timestamp;\\n    uint reserve0Cumulative;\\n    uint reserve1Cumulative;\\n  }\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n  function getAmountOut(uint, address) external view returns (uint);\\n\\n  function claimFees() external returns (uint, uint);\\n\\n  function tokens() external view returns (address, address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function stable() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IFactory {\\n\\n  function isPair(address pair) external view returns (bool);\\n\\n  function getInitializable() external view returns (address, address, bool);\\n\\n  function isPaused() external view returns (bool);\\n\\n  function pairCodeHash() external pure returns (bytes32);\\n\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\n\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmatic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"UNSAFE_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quoteLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMATICSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMATICWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMATICForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMATICForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMATIC\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMATICSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSimple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ConeRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"contract IWMATIC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConeRouter01", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000efc2d2d054383462f2cd72ea2526ef7687e1016000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}