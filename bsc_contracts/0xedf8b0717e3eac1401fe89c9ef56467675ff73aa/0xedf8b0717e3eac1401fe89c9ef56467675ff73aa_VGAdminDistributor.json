{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DEFI/VILOCITY/adminDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\ncontract VGAdminDistributor {\\n\\n    address[] private holders;\\n    uint[] private shares;\\n    mapping(address => bool) public admins;\\n\\n    modifier onlyOwner() {\\n        require(admins[msg.sender], \\\"Not allowed\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        admins[msg.sender] = true;\\n    }\\n    \\n    receive() external payable {}\\n\\n    event NewDistribution(uint amount);\\n    event NewHolderAdded(address holder, uint share);\\n    event NewHolderRemoved(address holder);\\n\\n    function distributeFunds() external onlyOwner {\\n        uint256 contractBal = contractBalance();\\n        require(contractBal > 0, \\\"No funds in contract\\\");\\n        \\n        //Check if total share is 100% before proceeding\\n        uint totalSharePercent = 0;\\n        for(uint8 i=0; i < shares.length; i++) {\\n            totalSharePercent += shares[i];\\n        }\\n        require(totalSharePercent == 10000, \\\"All shares do not add up to 100%\\\");\\n\\n        //Distribute\\n        for(uint8 i=0; i < holders.length; i++) {\\n            payable(holders[i]).transfer(contractBal*shares[i]/10000);\\n        }\\n\\n        emit NewDistribution(contractBal);\\n    }\\n\\n    //Add holders\\n    function addHolders(address[] calldata _holders, uint[] calldata _shares) public onlyOwner {\\n        require(_holders.length == _shares.length, \\\"Mismatch arrays\\\");\\n        \\n        for(uint8 i=0; i < _holders.length; i++) {\\n            holders.push(_holders[i]);\\n            shares.push(_shares[i]);\\n            emit NewHolderAdded(holders[i], _shares[i]);\\n        }\\n\\n    }\\n    \\n    //remove holder\\n    function removeHolders(uint[] calldata _holderIndex) external onlyOwner {\\n        for(uint8 i=0; i < _holderIndex.length; i++) {\\n            require(_holderIndex[i] < holders.length, \\\"Invalid holder index\\\");\\n            emit NewHolderRemoved(holders[_holderIndex[i]]);\\n            holders[_holderIndex[i]] = holders[holders.length-1];\\n            holders.pop();\\n            shares[_holderIndex[i]] = shares[shares.length-1];\\n            shares.pop();\\n        }\\n    }\\n\\n    function deleteAllHolders() public onlyOwner {\\n        holders = new address[](0);\\n        shares = new uint[](0);\\n    }\\n\\n    function updateAdmin(address _admin, bool _status) external onlyOwner {\\n        admins[_admin] = _status;\\n    }\\n\\n    function contractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function showHolders() public view returns (address[] memory) {\\n        return holders;\\n    }\\n\\n    function showShares() public view returns (uint[] memory) {\\n        return shares;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"NewHolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"NewHolderRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"addHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAllHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_holderIndex\",\"type\":\"uint256[]\"}],\"name\":\"removeHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VGAdminDistributor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}