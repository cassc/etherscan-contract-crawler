{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n// File: openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n     \r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: MTD/IDO.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface BestLogic {\r\n    function setUpline(address _sender,address _upline) external;\r\n    function getIsUser(address _addr) external view returns (bool);\r\n    function getTeams(address _addr) external view returns(address[] memory);\r\n    function getVIP(address _addr) external view  returns(uint8);\r\n    function getUpline(address _addr) external view returns(address);\r\n    function getPartnerInfoOne(uint256 _PartnerID) external  view returns(address,uint256,bool);\r\n    function getPartnerID() external view returns(uint);\r\n    event SetUplineLog(address indexed  _addr, address indexed _upline,uint256 lastime);\r\n}\r\ninterface FoundationWallect {\r\n    function withdraw()external ;\r\n}\r\n\r\n\r\ninterface FundUnionCreate {\r\n    function withdraw()external ;\r\n}\r\n\r\ninterface Team {\r\n        function iSTeamUser(address _addr) external view returns(bool);    \r\n}\r\n\r\n\r\ninterface olIDOO {\r\n    struct Deposit {\r\n        uint8 tarif;\r\n        uint256 time;\r\n    }\r\n    function getUserInfo(address _addr) external  view returns(\r\n        uint8 _ID,\r\n        bool _reflow,\r\n        uint256 _reflowUSDT,\r\n        uint256 _InvestmentUSDTotal,\r\n        uint256 _PromotionUSDTAmount,\r\n        uint256 _BuyMTDTotal,\r\n        uint8 _IID\r\n        );\r\n\r\n    function checkMyInfo(address _addr) external view returns(\r\n        bool isPartner,\r\n        uint8 _ID,\r\n        uint8 _IID,\r\n        uint256 _investmentFundNum,\r\n        uint256 _team\r\n        );\r\n\r\n   function getdep(address _addr) external view returns (Deposit[] memory deps);\r\n   function getUserPromotion(address _addr) external view returns(uint256 _performance);\r\n}\r\n\r\ninterface InvestmentFundAssociation {\r\n    function isPartnerExists(address partner) external view returns(bool);\r\n    function isAllowedExists(address _contraceAddress) external view returns(bool);\r\n    function createPartner(address _partner) external;\r\n}\r\n\r\ncontract IDO is Ownable,Pausable, ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    BestLogic private bestLogic;\r\n    FoundationWallect private foundationWallectContract;\r\n    // CommunityAlliance private CommunityAllianceContract;\r\n    uint256 private startTime;\r\n    uint8 private DAYS; \r\n    uint256 private MTDPrice; \r\n    uint256 private usdt; \r\n    bool public START = true;\r\n    uint256 private USDTotal;\r\n    uint256 private MTDTotal;\r\n    address private FoundationWallet; \r\n    olIDOO private oldIDO; \r\n    uint256 private foundationWallectContractBalanceOfMax = 2000000000000000000; \r\n    uint constant DAY_IN_SECONDS = 86400; //86400\r\n  \r\n    uint256 private refOne = 5; \r\n    uint256 private refTwo = 5;\r\n    uint256 private refThree = 5; \r\n    uint256 private reFour = 5; \r\n  \r\n    uint8 public generationNumber = 20; \r\n    uint256 private UnionDividend = 70; \r\n \r\n    uint256 public Totalusers;\r\n    FundUnionCreate private fundUnionCreate; \r\n    uint8 public dividingLine = 10; \r\n    uint256 public userInvestmentFundMin = 1000000000000000000000;\r\n    uint256 private investmentFundUnionDividend = 75;\r\n    uint256 public investmentFund;\r\n    InvestmentFundAssociation private investmentFundAssociation; \r\n    uint8 private FundAllianceDiv = 10; \r\n\r\n\r\n    address private teamAddress;\r\n    address public USDT; //USDT Binance-Peg BUSD Token\r\n    struct Tarif {\r\n        \r\n        uint256 MaxPeople;\r\n      \r\n        uint256 MinimumInvestment; \r\n    }\r\n\r\n    struct Deposit {\r\n        uint8 tarif; \r\n        uint256 time;\r\n    }\r\n    struct User {  \r\n        uint8 ID; //1\u30012\u3001\u30014\u30015\u30016\u30017\u30018\u30019\r\n        bool reflow; \r\n        uint256 reflowUSDT;\r\n        uint256 InvestmentUSDTotal; \r\n        uint256 PromotionUSDTAmount; \r\n        uint256 performance; \r\n        uint256 BuyMTDTotal;\r\n        Deposit[] deposits;\r\n        uint8 IID; \r\n        uint256 investmentFundNum;\r\n    } \r\n\r\n    mapping(address => User) public users;\r\n\r\n    Tarif[] public tarifs; \r\n  \r\n    event DepositLog(uint8 _tarif,address indexed _addr, address indexed _upline, uint256 _USDTAmount, uint256 lastTime);\r\n    event updateIDLog(address indexed  _addr,uint8 _tarif);\r\n\r\n    constructor(\r\n        address _USDT,\r\n        BestLogic _bestLogic,\r\n        FoundationWallect _foundationWallectContract,\r\n        address  _FoundationWallet,\r\n        // CommunityAlliance _CommunityAllianceContract,\r\n        FundUnionCreate _fundUnionCreate,\r\n        InvestmentFundAssociation _investmentFundAssociation,\r\n        olIDOO _olIDOO\r\n       \r\n        ) {\r\n        startTime = block.timestamp;\r\n        DAYS = 90;\r\n        MTDPrice = 100;\r\n        fundUnionCreate = _fundUnionCreate;\r\n        USDT = _USDT;\r\n        bestLogic = _bestLogic;\r\n        foundationWallectContract = _foundationWallectContract;\r\n        FoundationWallet = _FoundationWallet;\r\n        // CommunityAllianceContract = _CommunityAllianceContract;\r\n        investmentFundAssociation = _investmentFundAssociation;\r\n        oldIDO = _olIDOO;\r\n        \r\n        //\u6295\u8d44\u5206\u7c7b\r\n        tarifs.push(Tarif(0, 100000000000000000000000));//100000\r\n        tarifs.push(Tarif(0,50000000000000000000000));//50000\r\n        tarifs.push(Tarif(0, 30000000000000000000000));//30000\r\n        tarifs.push(Tarif(0,10000000000000000000000));//10000\r\n        tarifs.push(Tarif(3, 1000000000000000000000));//1000\r\n        tarifs.push(Tarif(97,500000000000000000000));//500\r\n        tarifs.push(Tarif(495, 300000000000000000000));//300\r\n        tarifs.push(Tarif(1107, 100000000000000000000));//100\r\n        tarifs.push(Tarif(9999755,30000000000000000000));//30\r\n        tarifs.push(Tarif(0,30000000000000000000));//30\r\n        //\u57fa\u91d1\r\n        tarifs.push(Tarif(500,300000000000000000000));//300\r\n        tarifs.push(Tarif(273,1000000000000000000000));//1000\r\n        tarifs.push(Tarif(100,3000000000000000000000));//3000\r\n        tarifs.push(Tarif(30,5000000000000000000000));//5000\r\n        tarifs.push(Tarif(4,10000000000000000000000));//10000\r\n        tarifs.push(Tarif(1,100000000000000000000000));//100000\r\n\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n\r\n   \r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    function deposit(uint8 _tarif,address _upline,uint256 _USDTAmount) public payable nonReentrant whenNotPaused  { \r\n        require(START,\"project not started\");\r\n        uint256 _tarifLength = tarifs.length;\r\n        require(_tarif <= _tarifLength,\"Product does not exist\");\r\n        address _addr = msg.sender; \r\n        require(_addr != address(0) &&  _upline != address(0),\"Invalid address entered\");                   \r\n        uint256 _over = tarifs[_tarif].MaxPeople;\r\n        require(_over != 0,\"no seats\");\r\n        uint256 _mininv = tarifs[_tarif].MinimumInvestment;\r\n        require(_USDTAmount >=_mininv,\"Less Then the min investment\");\r\n        uint256 allowanceAmount = IERC20(USDT).allowance(msg.sender, address(this));\r\n        require(allowanceAmount >= _USDTAmount,\"Check the token allowance\");            \r\n        uint256 balance = IERC20(USDT).balanceOf(_addr);\r\n        require(balance >= _USDTAmount,\"Insufficient USDT balance\");    \r\n        if (_tarif < dividingLine) { \r\n            if( getUpline(_addr) == address(0)){\r\n                 if(getIsUser(_upline)) {\r\n                     setUpline(_addr,_upline);\r\n                     _updataReferralIncome(_addr, _USDTAmount);                \r\n                     users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                      _updataID(_addr, _tarif);\r\n                      _updataMTD(_addr, _USDTAmount);\r\n                     _updataUSDT(_addr, _USDTAmount);\r\n                     _updatePerformance(_addr,_USDTAmount);\r\n                     setPeople(_tarif);\r\n                     Totalusers++;\r\n                   \r\n\r\n                 }else{              \r\n                     setUpline(_addr,owner());          \r\n                     _updataReferralIncome(_addr, _USDTAmount);   \r\n                     users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                      _updataID(_addr, _tarif);\r\n                     _updataMTD(_addr, _USDTAmount);\r\n                     _updataUSDT(_addr, _USDTAmount);\r\n                    _updatePerformance(_addr,_USDTAmount);\r\n                     setPeople(_tarif);\r\n                   \r\n                 }\r\n            }else {\r\n                     _updataReferralIncome(_addr, _USDTAmount);                    \r\n                     users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                      _updataID(_addr, _tarif);\r\n                     _updataMTD(_addr, _USDTAmount);\r\n                     _updataUSDT(_addr, _USDTAmount);\r\n                     _updatePerformance(_addr,_USDTAmount); \r\n                     setPeople(_tarif);\r\n\r\n            }\r\n\r\n        }else if (_tarif >= dividingLine) { \r\n        \r\n       \r\n            if( getUpline(_addr) == address(0)){\r\n                if(getIsUser(_upline)) {\r\n                     setUpline(_addr,_upline);\r\n\r\n                     _updataReferralIncomeInvestmentFund(_addr, _USDTAmount);     \r\n                     users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                    \r\n                     _updataMTD(_addr, _USDTAmount);\r\n                    Totalusers++;\r\n                     setPeople(_tarif);\r\n                     _updateIID(_addr,_tarif);\r\n                    _updatePerformance(_addr,_USDTAmount);\r\n                     isInvestmentFund(_addr,_USDTAmount); \r\n                    \r\n\r\n                }else{              \r\n                     setUpline(_addr,owner());   \r\n\r\n                      _updataReferralIncomeInvestmentFund(_addr, _USDTAmount);   \r\n                     users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                   \r\n                    _updataMTD(_addr, _USDTAmount);\r\n                     _updatePerformance(_addr,_USDTAmount);\r\n                    setPeople(_tarif);\r\n                    _updateIID(_addr,_tarif);\r\n                     isInvestmentFund(_addr,_USDTAmount); \r\n                     \r\n                }\r\n            }else {\r\n\r\n                    _updataReferralIncomeInvestmentFund(_addr, _USDTAmount);  \r\n\r\n                    users[_addr].deposits.push(Deposit({\r\n                         tarif: _tarif,\r\n                         time :block.timestamp\r\n                     }));\r\n                  \r\n                    _updataMTD(_addr, _USDTAmount);\r\n                 \r\n                    setPeople(_tarif);\r\n                    _updateIID(_addr,_tarif);\r\n                    _updatePerformance(_addr,_USDTAmount); \r\n                    isInvestmentFund(_addr,_USDTAmount); \r\n                  \r\n                    \r\n\r\n            }\r\n        }\r\n        \r\n   \r\n           uint256 foundationWallectContractBalanceOf = ERC20(USDT).balanceOf(address(foundationWallectContract)); \r\n            if(foundationWallectContractBalanceOf >= foundationWallectContractBalanceOfMax){\r\n                foundationWallectContract.withdraw();\r\n            }       \r\n            uint256 fundUnionCreateBalanceOf = ERC20(USDT).balanceOf(address(fundUnionCreate));        \r\n            if (fundUnionCreateBalanceOf > foundationWallectContractBalanceOfMax) {\r\n                fundUnionCreate.withdraw();\r\n            }          \r\n        \r\n\r\n        emit DepositLog(_tarif,_addr,_upline,_USDTAmount,block.timestamp);\r\n        \r\n    }\r\n\r\n    function getFromcontractToLP(address _to,uint256 _amount) public  onlyOwner {\r\n        require(_to != address(0),\"Address cannot be empty\");\r\n        IERC20(USDT).transfer(_to,_amount);\r\n    }\r\n\r\n  \r\n    function _updateIID(address _addr,uint8 _tarif) private {\r\n           if (users[_addr].IID == 0) {\r\n                users[_addr].IID = _tarif;\r\n           }else if (users[_addr].IID > _tarif) {\r\n                users[_addr].IID = _tarif;\r\n           }\r\n    }\r\n\r\n\r\n    function _updatePerformance(address _addr,uint256 _amount) private {\r\n        address _upline = getUpline(_addr);\r\n        uint8 i = 0;\r\n        uint8 teamUserCount = 0;\r\n        while (_upline != address(0) && i < generationNumber) {\r\n           // genealogy[current].performance += performance;\r\n           if(Team(teamAddress).iSTeamUser(_upline)) {\r\n                teamUserCount++;\r\n                if(teamUserCount == 2) {\r\n                    break;\r\n                }   \r\n           }\r\n            users[_upline].performance += _amount;\r\n            _upline = getUpline(_upline);\r\n            i++;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    function isInvestmentFund(address _addr, uint256 _amount) private  {\r\n       address _upline = getUpline(_addr);\r\n       uint256 _uplineIID = users[_upline].IID;\r\n       uint256 _uplineTeamLength = getTeams(_upline).length;\r\n      \r\n        if (_amount >= userInvestmentFundMin) {\r\n            users[_upline].investmentFundNum += 1;\r\n        }\r\n\r\n       uint256 _uplineinvestmentFundNum = users[_upline].investmentFundNum;\r\n\r\n       uint256 _IID = users[_addr].IID;\r\n       uint256 _addrTeamLength = getTeams(_addr).length;\r\n       uint256 _addrinvestmentFundNum = users[_addr].investmentFundNum;             \r\n    \r\n        if(!investmentFundAssociation.isPartnerExists(_addr) ){\r\n           if (_IID >= dividingLine + 1 && _addrinvestmentFundNum >=2   ) {\r\n                 investmentFundAssociation.createPartner(_addr);\r\n            }else if (_IID >= dividingLine + 1 && _addrTeamLength >= 19) {\r\n                investmentFundAssociation.createPartner(_addr);\r\n            }\r\n        }\r\n        if(!investmentFundAssociation.isPartnerExists(_upline) ){\r\n            if (_uplineIID >= dividingLine + 1 && _uplineinvestmentFundNum >=2 ) {\r\n                 investmentFundAssociation.createPartner(_upline);\r\n            }else if (_uplineIID >= dividingLine + 1 && _uplineTeamLength >= 19) {\r\n                investmentFundAssociation.createPartner(_upline);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function _updataID(address _addr, uint8 _tarif) private {     \r\n       \r\n        uint _ID = users[_addr].ID;      \r\n            \r\n        if(_ID == 0){ \r\n            users[_addr].ID = _tarif + 1;\r\n            emit updateIDLog(_addr, _tarif);   \r\n        }else if( _tarif <= _ID - 1 ) {\r\n            users[_addr].ID = _tarif + 1;\r\n            emit updateIDLog(_addr, _tarif);  \r\n        \r\n        }\r\n        \r\n    }\r\n  \r\n    function _updataUSDT(address _addr,uint256 _USDT) private {\r\n         users[_addr].InvestmentUSDTotal += _USDT ;\r\n         USDTotal += _USDT;\r\n\r\n    }\r\n\r\n  \r\n    function _updataMTD(address _addr,uint256 _USDT) private {\r\n        uint256 _amount = _USDT * MTDPrice;\r\n        users[_addr].BuyMTDTotal += _amount ;\r\n        MTDTotal += _amount;\r\n    }\r\n \r\n\r\n    function _updataReferralIncome(address _addr,uint256 _USDT) private {\r\n       address _upline = getUpline(_addr);\r\n       uint256 _uplineVip = getVIP(_upline);\r\n      \r\n       if (_uplineVip <= 1) {         \r\n            if(users[_upline].reflow) { \r\n                _divreflow(refOne,_USDT,_upline,FoundationWallet);   \r\n            }else {\r\n                _div(refOne,_USDT,_upline,FoundationWallet); \r\n            }\r\n       }else if(_uplineVip == 2) {\r\n            if(users[_upline].reflow) { \r\n                  _divreflow(refTwo,_USDT,_upline,FoundationWallet);    \r\n            }else {\r\n                _div(refTwo,_USDT,_upline,FoundationWallet);        \r\n            }\r\n       }else {\r\n            if(users[_upline].reflow) {             \r\n                _divreflow(refThree,_USDT,_upline,FoundationWallet);            \r\n            }else {   \r\n              _div(refThree,_USDT,_upline,FoundationWallet);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function _updataReferralIncomeInvestmentFund(address _addr,uint256 _USDT) private {\r\n        address _upline = getUpline(_addr);\r\n        uint256 _userAmount = _USDT.mul(reFour).div(100);\r\n        uint256 _FundAllianceAmount = _USDT.mul(FundAllianceDiv).div(100); \r\n        uint256 _fundUnionCreateAmount = _USDT.mul(investmentFundUnionDividend).div(100) - _userAmount - _FundAllianceAmount; \r\n      \r\n        IERC20(USDT).transferFrom(msg.sender,address(this),_USDT); \r\n        IERC20(USDT).transfer(_upline,_userAmount);\r\n        IERC20(USDT).transfer(address(investmentFundAssociation),_FundAllianceAmount);\r\n        IERC20(USDT).transfer(address(fundUnionCreate),_fundUnionCreateAmount); \r\n        _updatePromotionUSDTAmount(_upline,_userAmount); \r\n        _updateInvestmentFund(_addr,_USDT); \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function setInvestmentFund(FundUnionCreate _fundUnionCreate,uint8 _dividingLine,uint256 _userInvestmentFundMin,uint256 _investmentFundUnionDividend,uint256 _investmentFund, InvestmentFundAssociation _investmentFundAssociation,uint8 _FundAllianceDiv) public onlyOwner {\r\n        fundUnionCreate = _fundUnionCreate;\r\n        dividingLine = _dividingLine; \r\n        userInvestmentFundMin = _userInvestmentFundMin;\r\n        investmentFundUnionDividend = _investmentFundUnionDividend;\r\n        investmentFund = _investmentFund;\r\n        investmentFundAssociation = _investmentFundAssociation; \r\n        FundAllianceDiv = _FundAllianceDiv; \r\n    }\r\n   \r\n    function _div(uint256 _refNumber,uint256 _USDT,address _upline,address _FoundationWallet) private {\r\n                uint256 _userAmount = _USDT.mul(_refNumber).div(100);      \r\n                uint256 _FoundationWalletAmount = _USDT.mul(UnionDividend).div(100) - _userAmount; \r\n                IERC20(USDT).transferFrom(msg.sender,address(this),_USDT); \r\n                IERC20(USDT).transfer(_upline,_userAmount);\r\n                IERC20(USDT).transfer(_FoundationWallet,_FoundationWalletAmount); \r\n                _updatePromotionUSDTAmount(_upline,_userAmount);   \r\n    }                \r\n\r\n    function _divreflow(uint256 _refNumber,uint256 _USDT,address _upline,address _FoundationWallet) private {\r\n                uint256 _rate = _refNumber / 2;\r\n                uint256 _userAmount = _USDT.mul(_rate).div(100);           \r\n                uint256 _FoundationWalletAmount = _USDT.mul(UnionDividend).div(100) - _userAmount - _userAmount; \r\n                IERC20(USDT).transferFrom(msg.sender,address(this),_USDT);\r\n                IERC20(USDT).transfer(_upline,_userAmount);\r\n                IERC20(USDT).transfer(_FoundationWallet,_FoundationWalletAmount);\r\n                _updatePromotionUSDTAmount(_upline,_userAmount);\r\n                _updatereflowUSDT(_upline,_userAmount); \r\n                     \r\n    }\r\n    \r\n\r\n    function _updatePromotionUSDTAmount( address _addr,uint256 _amount) private  {\r\n        users[_addr].PromotionUSDTAmount += _amount;\r\n    }\r\n\r\n    function _updateInvestmentFund(address _addr,uint256 _amount) private {\r\n        users[_addr].InvestmentUSDTotal += _amount ;\r\n        investmentFund +=  _amount;\r\n    }\r\n\r\n   \r\n    function _updatereflowUSDT( address _addr,uint256 _amount) private  {\r\n        users[_addr].reflowUSDT += _amount;\r\n    }\r\n  \r\n    function setPeople(uint8 _index) private  {\r\n        require(tarifs[_index].MaxPeople >0,\"no remaining\");\r\n        tarifs[_index].MaxPeople -= 1;\r\n    }\r\n\r\n\r\n    function setFoundationWallet(address _FoundationWallet) public  onlyOwner {      \r\n        FoundationWallet = _FoundationWallet;\r\n    }\r\n\r\n    function setBestLogic(BestLogic _addr) public  onlyOwner {      \r\n        bestLogic = _addr;\r\n    }\r\n    function setTarif(uint256 _index,uint256 _MaxPeople, uint256 _MinimumInvestment ) public onlyOwner {\r\n        tarifs[_index].MaxPeople = _MaxPeople ;\r\n        tarifs[_index].MinimumInvestment = _MinimumInvestment;\r\n    }\r\n\r\n\r\n    function addLiquidity(uint256 _USDTAnount, address _LPAddress) public onlyOwner {\r\n        IERC20(USDT).transfer(_LPAddress,_USDTAnount);\r\n    }\r\n\r\n    function setFoundationWallect(FoundationWallect _addr) public  onlyOwner {      \r\n        foundationWallectContract = _addr;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setUSDTAddress(address _addr) public  onlyOwner {      \r\n        USDT = _addr;\r\n    }\r\n  \r\n     function setWallectContractBalanceOfMax(uint256 _max) public  onlyOwner {      \r\n        foundationWallectContractBalanceOfMax = _max;\r\n    }   \r\n \r\n  \r\n    function setUserInfo(\r\n        address _addr,\r\n         uint8 _ID,\r\n         bool _reflow,\r\n         uint256 _reflowUSDT,\r\n         uint256 _InvestmentUSDTotal,\r\n         uint256 _PromotionUSDTAmount,\r\n         uint256 _BuyMTDTotal,\r\n         uint8 _IID,\r\n         uint256 _investmentFundNum,\r\n         uint256 _performance\r\n     ) public  onlyOwner {\r\n        users[_addr].ID = _ID;\r\n        users[_addr].reflow = _reflow;\r\n        users[_addr].reflowUSDT = _reflowUSDT;\r\n        users[_addr].InvestmentUSDTotal = _InvestmentUSDTotal;\r\n        users[_addr].PromotionUSDTAmount = _PromotionUSDTAmount;\r\n        users[_addr].BuyMTDTotal = _BuyMTDTotal;\r\n        users[_addr].IID = _IID;\r\n        users[_addr].investmentFundNum = _investmentFundNum;\r\n        users[_addr].performance = _performance;\r\n\r\n    }\r\n\r\n    function setUserDep(address _addr, uint8 _tarif, uint256 depTimes) public onlyOwner {\r\n        users[_addr].deposits.push(Deposit({\r\n                    tarif: _tarif,\r\n                    time : depTimes\r\n                }));\r\n    }\r\n\r\n\r\n    function setUpline(address _addr, address _upline) private  {\r\n        bestLogic.setUpline(_addr,_upline);\r\n    }\r\n\r\n\r\n    function setStartTime(uint256 _startTime) public onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setDay(uint8 _day) public onlyOwner {\r\n        require(_day > 0,\"must be greater than 0\");\r\n        DAYS = _day;\r\n    }\r\n   \r\n    function setStart(bool _startStatus) public onlyOwner {\r\n        START = _startStatus;\r\n    }\r\n  \r\n    function setU(uint256 _U) external onlyOwner {\r\n        require(_U >= 0,\"must be greater than 0\");\r\n        usdt = _U;\r\n    }\r\n  \r\n    function setMTDPrice(uint256 _MTDPrice) public onlyOwner {\r\n        MTDPrice = _MTDPrice;\r\n    }\r\n\r\n    function setTeam(address _teamAddress) public onlyOwner {\r\n        teamAddress = _teamAddress;\r\n    }\r\n \r\n    function setUnionDividend(uint256 _UnionDividend) public onlyOwner {\r\n    \tUnionDividend = _UnionDividend;\r\n    }\r\n\r\n    \r\n    function setrefRate(uint256 _refOne,uint256 _refTwo,uint256 _refThree,uint256 _reFour) public onlyOwner {\r\n        refOne = _refOne;\r\n        refTwo = _refTwo;\r\n        refThree = _refThree;\r\n        reFour = _reFour;\r\n    }\r\n\r\n   \r\n    function getUpline(address _addr) public view returns(address) {\r\n        require(_addr != address(0),\"Address cannot be empty\");\r\n        return bestLogic.getUpline(_addr);\r\n    }\r\n\r\n   \r\n    function getUSDTBalance() public view returns(uint256) {\r\n        return IERC20(USDT).balanceOf(msg.sender);\r\n    }\r\n  \r\n    function getTeams(address _addr) public view returns(address[] memory) {      \r\n        require(_addr != address(0),\"Invalid address entered\");\r\n        return bestLogic.getTeams(_addr);      \r\n    }\r\n   \r\n    function getVIP(address _addr) public view  returns(uint8) {\r\n        require(_addr != address(0),\"Invalid address entered\");      \r\n        return bestLogic.getVIP(_addr);\r\n    }\r\n \r\n    function getIsUser(address _addr) public view returns (bool) {\r\n        require(_addr != address(0),\"Invalid address entered\");\r\n        return bestLogic.getIsUser(_addr);\r\n    }\r\n\r\n    \r\n    function getUSDTDeposit(address _addr) public view returns(uint256) {\r\n        require(_addr != address(0));\r\n      //  require(getIsUser(_addr),\"address not registered\");\r\n        return users[_addr].InvestmentUSDTotal;\r\n    }\r\n    \r\n    function getdep(address _addr) public view returns (Deposit[] memory deps) {\r\n        User memory user = users[_addr];\r\n        return user.deposits;     \r\n    }\r\n\r\n    function getIDOUSDT() public view returns(uint256) {\r\n        return USDTotal + usdt + investmentFund;\r\n    }\r\n\r\n\r\n    function decimals() private pure  returns (uint8) {\r\n        return 18;\r\n    }\r\n  \r\n    function getEndTime() public view returns (uint256) {\r\n        uint256 endTime = startTime + DAYS * DAY_IN_SECONDS;\r\n        return  endTime - block.timestamp ;\r\n    }\r\n    \r\n    function getMTDPrice() public view returns(uint256) {\r\n        return MTDPrice;\r\n    }\r\n\r\n   \r\n    function getRemainingPlaces(uint8 _tarif) public  view  returns(uint256,uint256){\r\n        return (tarifs[_tarif].MaxPeople,tarifs[_tarif].MinimumInvestment);\r\n    }\r\n   \r\n    function getUserInfo(address _addr) public  view returns(\r\n        uint8 _ID,\r\n        bool _reflow,\r\n        uint256 _reflowUSDT,\r\n        uint256 _InvestmentUSDTotal,\r\n        uint256 _PromotionUSDTAmount,\r\n        uint256 _BuyMTDTotal,\r\n        uint8 _IID\r\n        // uint256 _investmentFundNum\r\n       \r\n        ) {\r\n      \r\n        return(  \r\n            users[_addr].ID,\r\n            users[_addr].reflow,\r\n            users[_addr].reflowUSDT,\r\n            users[_addr].InvestmentUSDTotal,\r\n            users[_addr].PromotionUSDTAmount,\r\n            users[_addr].BuyMTDTotal,\r\n            users[_addr].IID\r\n            // users[_addr].investmentFundNum\r\n            );\r\n    }\r\n\r\n    function getUserPromotion(address _addr) public view returns(uint256 _performance){\r\n        return  users[_addr].performance;\r\n    }\r\n\r\n    function checkMyInfo(address _addr) public view returns(bool isPartner,uint8 _ID,uint8 _IID,uint256 _investmentFundNum,uint256 _team){\r\n        return(    \r\n            investmentFundAssociation.isPartnerExists(_addr),\r\n            users[_addr].ID,\r\n            users[_addr].IID,\r\n            users[_addr].investmentFundNum,\r\n            getTeams(_addr).length\r\n        );\r\n    }\r\n\r\n    //sync userInfo databases\r\n    function syncDatabaseAll(address[] memory  _UserAddress) public  onlyOwner {\r\n        for(uint8 i = 0;i < _UserAddress.length;i++ ) {\r\n            User storage user = users[_UserAddress[i]];\r\n\r\n            (uint8 _ID,bool _reflow,uint256 _reflowUSDT,uint256 _InvestmentUSDTotal,uint256 _PromotionUSDTAmount,uint256 _BuyMTDTotal, uint8 _IID) = oldIDO.getUserInfo(_UserAddress[i]);\r\n            (,,,uint256 _investmentFundNum,) = oldIDO.checkMyInfo(_UserAddress[i]);\r\n            uint256 _performance = oldIDO.getUserPromotion(_UserAddress[i]);\r\n            user.ID = _ID;\r\n            user.reflow = _reflow;\r\n            user.reflowUSDT =  _reflowUSDT;\r\n            user.InvestmentUSDTotal = _InvestmentUSDTotal;\r\n            user.PromotionUSDTAmount = _PromotionUSDTAmount;\r\n            user.BuyMTDTotal = _BuyMTDTotal;\r\n            user.IID = _IID;\r\n            user.investmentFundNum = _investmentFundNum;\r\n            user.performance = _performance;\r\n        }\r\n        migrateDepA(_UserAddress);\r\n    }\r\n\r\n    function migrateDepA(address[] memory  _UserAddress) private  {\r\n        \r\n       for(uint256 i = 0;i < _UserAddress.length;i++ ) {    \r\n            olIDOO.Deposit[]  memory deposits = oldIDO.getdep(_UserAddress[i]);\r\n\r\n       \r\n            for (uint256 j = 0; j < deposits.length; j++) {\r\n                users[_UserAddress[i]].deposits.push(Deposit({\r\n                tarif:deposits[j].tarif,\r\n                time :deposits[j].time\r\n                }));\r\n            }\r\n        }\r\n    } \r\n\r\n    function setOld(olIDOO _addr) public onlyOwner {      \r\n        oldIDO = _addr;\r\n    }\r\n\r\n    function setgenerationNumber(uint8 _generationNumber) public onlyOwner {\r\n        generationNumber = _generationNumber;\r\n    }\r\n\r\n    function setTotalusers(uint256 _Totalusers)public onlyOwner {\r\n        Totalusers = _Totalusers;\r\n    }   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"contract BestLogic\",\"name\":\"_bestLogic\",\"type\":\"address\"},{\"internalType\":\"contract FoundationWallect\",\"name\":\"_foundationWallectContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FoundationWallet\",\"type\":\"address\"},{\"internalType\":\"contract FundUnionCreate\",\"name\":\"_fundUnionCreate\",\"type\":\"address\"},{\"internalType\":\"contract InvestmentFundAssociation\",\"name\":\"_investmentFundAssociation\",\"type\":\"address\"},{\"internalType\":\"contract olIDOO\",\"name\":\"_olIDOO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"}],\"name\":\"DepositLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"}],\"name\":\"updateIDLog\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Totalusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAnount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_LPAddress\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkMyInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPartner\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_ID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_IID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_investmentFundNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_team\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividingLine\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationNumber\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFromcontractToLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIDOUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getIsUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMTDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"}],\"name\":\"getRemainingPlaces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTeams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUSDTDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_ID\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_reflow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_reflowUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_InvestmentUSDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PromotionUSDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BuyMTDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_IID\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_performance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVIP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getdep\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tarif\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IDO.Deposit[]\",\"name\":\"deps\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BestLogic\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBestLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FoundationWallect\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFoundationWallect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FoundationWallet\",\"type\":\"address\"}],\"name\":\"setFoundationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FundUnionCreate\",\"name\":\"_fundUnionCreate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_dividingLine\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_userInvestmentFundMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentFundUnionDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentFund\",\"type\":\"uint256\"},{\"internalType\":\"contract InvestmentFundAssociation\",\"name\":\"_investmentFundAssociation\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_FundAllianceDiv\",\"type\":\"uint8\"}],\"name\":\"setInvestmentFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MTDPrice\",\"type\":\"uint256\"}],\"name\":\"setMTDPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract olIDOO\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_startStatus\",\"type\":\"bool\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPeople\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MinimumInvestment\",\"type\":\"uint256\"}],\"name\":\"setTarif\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Totalusers\",\"type\":\"uint256\"}],\"name\":\"setTotalusers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_U\",\"type\":\"uint256\"}],\"name\":\"setU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setUSDTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_UnionDividend\",\"type\":\"uint256\"}],\"name\":\"setUnionDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depTimes\",\"type\":\"uint256\"}],\"name\":\"setUserDep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_ID\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_reflow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_reflowUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_InvestmentUSDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PromotionUSDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BuyMTDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_IID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_investmentFundNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performance\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setWallectContractBalanceOfMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_generationNumber\",\"type\":\"uint8\"}],\"name\":\"setgenerationNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reFour\",\"type\":\"uint256\"}],\"name\":\"setrefRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_UserAddress\",\"type\":\"address[]\"}],\"name\":\"syncDatabaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MaxPeople\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MinimumInvestment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userInvestmentFundMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"ID\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"reflow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reflowUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"InvestmentUSDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PromotionUSDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyMTDTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"IID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"investmentFundNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IDO", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000078993c8b0b897784eb717e32d57cb3beee6895440000000000000000000000002a9b1982dad165f18a19d0fe24ef064655bf0d4d0000000000000000000000002a9b1982dad165f18a19d0fe24ef064655bf0d4d0000000000000000000000005a3a8ff9cbc9ccd818979d5fab274a1122a473130000000000000000000000008b63e4e6eb34423cce93e23c9a451c24e9412eca000000000000000000000000f5b334783417994b0e93362a78e6f83edcd7505c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1b84728de4ff10361f4fc56c6165ac43bf76f4d5cdee683958f2de4e06c362e"}