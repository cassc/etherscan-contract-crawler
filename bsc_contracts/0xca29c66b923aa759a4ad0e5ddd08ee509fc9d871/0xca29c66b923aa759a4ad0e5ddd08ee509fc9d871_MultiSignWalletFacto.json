{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IMultiSignWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IMultiSignWalletFactory {\\n    function getWalletImpl() external view returns(address) ;\\n}\"},\"MultiSignWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./SafeMath256.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./SignMessage.sol\\\";\\n\\ncontract WalletOwner {\\n    uint16  constant MIN_REQUIRED = 1;\\n    uint256 required;\\n    mapping(address =\\u003e uint256) activeOwners;\\n    address[] owners;\\n    mapping(address =\\u003e uint256) exceptionTokens;\\n\\n    event OwnerRemoval(address indexed owner);\\n    event OwnerAddition(address indexed owner);\\n    event SignRequirementChanged(uint256 required);\\n\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    function getOwnerRequiredParam() public view returns (uint256) {\\n        return required;\\n    }\\n\\n    function isOwner(address addr) public view returns (bool) {\\n        return activeOwners[addr] \\u003e 0;\\n    }\\n}\\n\\ncontract WalletSecurity {\\n    uint256 constant MIN_INACTIVE_INTERVAL = 3 days; // 3days;\\n    uint256 constant securityInterval = 3 days;\\n    bool initialized;\\n    bool securitySwitch = false;\\n    uint256 deactivatedInterval = 0;\\n    uint256 lastActivatedTime = 0;\\n\\n    mapping(bytes32 =\\u003e uint256) transactions;\\n    event SecuritySwitchChange(bool swithOn, uint256 interval);\\n\\n    modifier onlyNotInitialized() {\\n        require(!initialized, \\\"the wallet already initialized\\\");\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(initialized, \\\"the wallet not init yet\\\");\\n        _;\\n    }\\n\\n    function isSecuritySwitchOn() public view returns (bool) {\\n        return securitySwitch;\\n    }\\n\\n    function getDeactivatedInterval() public view returns (uint256) {\\n        return deactivatedInterval;\\n    }\\n\\n    function getLastActivatedTime() public view returns (uint256) {\\n        return lastActivatedTime;\\n    }\\n\\n}\\n\\ncontract MultiSignWallet is WalletOwner, WalletSecurity {\\n    using SafeMath256 for uint256;\\n\\n    event Deposit(address indexed from, uint256 value);\\n    event Transfer(address indexed token, address indexed to, uint256 value);\\n    event ExecuteWithData(address indexed token, uint256 value);\\n    event ExceptionTokenRemove(address indexed token);\\n    event ExceptionTokenAdd(address indexed token);\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline \\u003e= block.timestamp, \\\"the wallet operation is expired\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.value \\u003e 0) {\\n            emit Deposit(msg.sender, msg.value);\\n        }\\n    }\\n\\n    function initialize(address[] memory _owners, uint256 _required, bool _switchOn, uint256 _deactivatedInterval, address[] memory _exceptionTokens) external onlyNotInitialized returns(bool) {\\n        require(_required \\u003e= MIN_REQUIRED, \\\"the signed owner count must than 1\\\");\\n        if (_switchOn) {\\n            require(_deactivatedInterval \\u003e= MIN_INACTIVE_INTERVAL, \\\"inactive interval must more than 3days\\\");\\n            securitySwitch = _switchOn;\\n            deactivatedInterval = _deactivatedInterval;\\n            emit SecuritySwitchChange(securitySwitch, deactivatedInterval);\\n        }\\n\\n        for (uint256 i = 0; i \\u003c _owners.length; i++) {\\n            if (_owners[i] == address(0x0)) {\\n                revert(\\\"the address can\\u0027t be 0x\\\");\\n            }\\n\\n            if (activeOwners[_owners[i]] \\u003e 0 ) {\\n                revert(\\\"the owners must be distinct\\\");\\n            }\\n\\n            activeOwners[_owners[i]] = block.timestamp;\\n            emit OwnerAddition(_owners[i]);\\n        }\\n\\n        require(_owners.length \\u003e= _required, \\\"wallet owners must more than the required.\\\");\\n        required = _required;\\n        emit SignRequirementChanged(required);\\n        owners = _owners;\\n        _updateActivatedTime();\\n\\n        if (_exceptionTokens.length \\u003e 0) {\\n            return _addExceptionToken(_exceptionTokens);\\n        }\\n\\n        return true;\\n    }\\n\\n    function addOwner(address[] memory _newOwners, uint256 _required, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(_validOwnerAddParams(_newOwners, _required), \\\"invalid params\\\");\\n        bytes32 message = SignMessage.ownerModifyMessage(address(this), getChainID(), _newOwners, _required, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        address[] memory _oldOwners;\\n        return _updateOwners(_oldOwners, _newOwners, _required);\\n    }\\n\\n    function removeOwner(address[] memory _oldOwners, uint256 _required, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(_validOwnerRemoveParams(_oldOwners, _required), \\\"invalid params\\\");\\n        bytes32 message = SignMessage.ownerModifyMessage(address(this), getChainID(), _oldOwners, _required, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.timestamp;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        address[] memory _newOwners;\\n        return _updateOwners(_oldOwners, _newOwners, _required);\\n    }\\n\\n    function replaceOwner(address[] memory _oldOwners, address[] memory _newOwners, uint256 _required, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(_validOwnerReplaceParams(_oldOwners, _newOwners, _required), \\\"invalid params\\\");\\n        bytes32 message = SignMessage.ownerReplaceMessage(address(this), getChainID(), _oldOwners, _newOwners, _required, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        return _updateOwners(_oldOwners, _newOwners, _required);\\n    }\\n\\n    function changeOwnerRequirement(uint256 _required, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(_required \\u003e= MIN_REQUIRED, \\\"the signed owner count must than 1\\\");\\n        require(owners.length \\u003e= _required, \\\"the owners must more than the required\\\");\\n        bytes32 message = SignMessage.ownerRequiredMessage(address(this), getChainID(), _required, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        required = _required;\\n        emit SignRequirementChanged(required);\\n\\n        return true;\\n    }\\n\\n    function changeSecurityParams(bool _switchOn, uint256 _deactivatedInterval, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        bytes32 message = SignMessage.securitySwitchMessage(address(this), getChainID(), _switchOn, _deactivatedInterval, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n\\n        if (_switchOn) {\\n            securitySwitch = true;\\n            require(_deactivatedInterval \\u003e= MIN_INACTIVE_INTERVAL, \\\"inactive interval must more than 3days\\\");\\n            deactivatedInterval = _deactivatedInterval;\\n        } else {\\n            securitySwitch = false;\\n            deactivatedInterval = 0;\\n        }\\n\\n        emit SecuritySwitchChange(_switchOn, deactivatedInterval);\\n\\n        return true;\\n    }\\n\\n    function transfer(address tokenAddress, address payable to, uint256 value, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        if(tokenAddress == address(0x0)) {\\n            return _transferNativeToken(to, value, salt, vs, rs, ss);\\n        }\\n        return _transferContractToken(tokenAddress, to, value, salt, vs, rs, ss);\\n    }\\n\\n    function execute(address contractAddress, uint256 value, bytes memory data, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(contractAddress != address(this), \\\"not allow transfer to yourself\\\");\\n        bytes32 message = SignMessage.executeWithDataMessage(address(this), getChainID(), contractAddress, value, salt, data);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        (bool success,) = contractAddress.call{value: value}(data);\\n        require(success, \\\"contract execution Failed\\\");\\n        emit ExecuteWithData(contractAddress, value);\\n        return true;\\n    }\\n\\n    function batchTransfer(address tokenAddress, address[] memory recipients, uint256[] memory amounts, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(recipients.length \\u003e 0 \\u0026\\u0026 recipients.length == amounts.length, \\\"parameters invalid\\\");\\n        bytes32 message = SignMessage.batchTransferMessage(address(this), getChainID(), tokenAddress, recipients, amounts, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n\\n        for(uint256 i = 0; i \\u003c recipients.length; i++) {\\n            _transfer(tokenAddress, recipients[i], amounts[i]);\\n            emit Transfer(tokenAddress, recipients[i], amounts[i]);\\n        }\\n        return true;\\n    }\\n\\n    function addExceptionToken(address[] memory tokens, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(tokens.length \\u003e 0, \\\"input tokens empty\\\");\\n        bytes32 message = SignMessage.modifyExceptionTokenMessage(address(this), getChainID(), tokens, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n\\n        return _addExceptionToken(tokens);\\n    }\\n\\n    function removeExceptionToken(address[] memory tokens, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss, uint256 deadline) public onlyInitialized ensure(deadline) returns (bool) {\\n        require(tokens.length \\u003e 0, \\\"input tokens empty\\\");\\n        bytes32 message = SignMessage.modifyExceptionTokenMessage(address(this), getChainID(), tokens, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n\\n        return _removeExceptionToken(tokens);\\n    }\\n\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function getRequired() public view returns (uint256) {\\n        if(!securitySwitch) {\\n            return required;\\n        }\\n\\n        uint256 _deactivate = block.timestamp;\\n        if (_deactivate \\u003c= lastActivatedTime + deactivatedInterval) {\\n            return required;\\n        }\\n\\n        _deactivate = _deactivate.sub(lastActivatedTime).sub(deactivatedInterval).div(securityInterval);\\n        if (required \\u003e _deactivate) {\\n            return required.sub(_deactivate);\\n        }\\n\\n        return MIN_REQUIRED;\\n    }\\n\\n    function getTransactionMessage(bytes32 message) public view returns (uint256) {\\n        return transactions[message];\\n    }\\n\\n    function isExceptionToken(address token) public view returns (bool) {\\n        return exceptionTokens[token] != 0;\\n    }\\n\\n    function _transferContractToken(address tokenAddress, address to, uint256 value, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) internal returns (bool) {\\n        require(to != address(this), \\\"not allow transfer to yourself\\\");\\n        require(value \\u003e 0, \\\"transfer value must more than 0\\\");\\n        bytes32 message = SignMessage.transferMessage(address(this), getChainID(), tokenAddress, to, value, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        _safeTransfer(tokenAddress, to, value);\\n        emit Transfer(tokenAddress, to, value);\\n        return true;\\n    }\\n\\n    function _transferNativeToken(address payable to, uint256 value, bytes32 salt, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) internal returns (bool) {\\n        require(to != address(this), \\\"not allow transfer to yourself\\\");\\n        require(value \\u003e 0, \\\"transfer value must more than 0\\\");\\n        require(address(this).balance \\u003e= value, \\\"balance not enough\\\");\\n        bytes32 message = SignMessage.transferMessage(address(this), getChainID(), address(0x0), to, value, salt);\\n        require(getTransactionMessage(message) == 0, \\\"transaction may has been excuted\\\");\\n        transactions[message] = block.number;\\n        require(_validSignature(message, vs, rs, ss), \\\"invalid signatures\\\");\\n        _safeTransferNative(to, value);\\n        emit Transfer(address(0x0), to, value);\\n        return true;\\n    }\\n\\n    function _transfer(address tokenAddress, address recipient, uint256 value) internal {\\n        require(value \\u003e 0, \\\"transfer value must more than 0\\\");\\n        require(recipient != address(this), \\\"not allow transfer to yourself\\\");\\n        if (tokenAddress == address(0x0)) {\\n            _safeTransferNative(recipient, value);\\n            return;\\n        }\\n        _safeTransfer(tokenAddress, recipient, value);\\n    }\\n\\n    function _updateActivatedTime() internal {\\n        lastActivatedTime = block.timestamp;\\n    }\\n\\n    function _addExceptionToken(address[] memory tokens) internal returns(bool) {\\n        for(uint256 i = 0; i \\u003c tokens.length; i++) {\\n            if(!isExceptionToken(tokens[i])) {\\n                require(tokens[i] != address(0x0), \\\"the token address can\\u0027t be 0x\\\");\\n                exceptionTokens[tokens[i]] = block.number;\\n                emit ExceptionTokenAdd(tokens[i]);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _removeExceptionToken(address[] memory tokens) internal returns(bool) {\\n        for(uint256 i = 0; i \\u003c tokens.length; i++) {\\n            if(isExceptionToken(tokens[i])) {\\n                require(tokens[i] != address(0x0), \\\"the token address can\\u0027t be 0x\\\");\\n                exceptionTokens[tokens[i]] = 0;\\n                emit ExceptionTokenRemove(tokens[i]);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _validOwnerAddParams(address[] memory _owners, uint256 _required) private view returns (bool) {\\n        require(_owners.length \\u003e 0, \\\"the new owners list can\\u0027t be emtpy\\\");\\n        require(_required \\u003e= MIN_REQUIRED, \\\"the signed owner count must than 1\\\");\\n        uint256 ownerCount = _owners.length;\\n        ownerCount = ownerCount.add(owners.length);\\n        require(ownerCount \\u003e= _required, \\\"the owner count must more than the required\\\");\\n        return _distinctAddOwners(_owners);\\n    }\\n\\n    function _validOwnerRemoveParams(address[] memory _owners, uint256 _required) private view returns (bool) {\\n        require(_owners.length \\u003e 0 \\u0026\\u0026 _required \\u003e= MIN_REQUIRED, \\\"invalid parameters\\\");\\n        uint256 ownerCount = owners.length;\\n        ownerCount = ownerCount.sub(_owners.length);\\n        require(ownerCount \\u003e= _required, \\\"the owners must more than the required\\\");\\n        return _distinctRemoveOwners(_owners);\\n    }\\n\\n    function _validOwnerReplaceParams(address[] memory _oldOwners, address[] memory _newOwners, uint256 _required) private view returns (bool) {\\n        require(_oldOwners.length \\u003e0 || _newOwners.length \\u003e 0, \\\"the two input owner list can\\u0027t both be empty\\\");\\n        require(_required \\u003e= MIN_REQUIRED, \\\"the signed owner\\u0027s count must than 1\\\");\\n        _distinctRemoveOwners(_oldOwners);\\n        _distinctAddOwners(_newOwners);\\n        uint256 ownerCount = owners.length;\\n        ownerCount = ownerCount.add(_newOwners.length).sub(_oldOwners.length);\\n        require(ownerCount \\u003e= _required, \\\"the owner\\u0027s count must more than the required\\\");\\n        return true;\\n    }\\n\\n    function _distinctRemoveOwners(address[] memory _owners) private view returns (bool) {\\n        for(uint256 i = 0; i \\u003c _owners.length; i++) {\\n            if (_owners[i] == address(0x0)) {\\n                revert(\\\"the remove address can\\u0027t be 0x.\\\");\\n            }\\n\\n            if(activeOwners[_owners[i]] == 0) {\\n                revert(\\\"the remove address must be a owner.\\\");\\n            }\\n\\n            for(uint256 j = 0; j \\u003c i; j++) {\\n                if(_owners[j] == _owners[i]) {\\n                    revert(\\\"the remove address must be distinct\\\");\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _distinctAddOwners(address[] memory _owners) private view returns (bool) {\\n        for(uint256 i = 0; i \\u003c _owners.length; i++) {\\n            if (_owners[i] == address(0x0)) {\\n                revert(\\\"the new address can\\u0027t be 0x.\\\");\\n            }\\n\\n            if (activeOwners[_owners[i]] != 0) {\\n                revert(\\\"the new address is already a owner\\\");\\n            }\\n\\n            for(uint256 j = 0; j \\u003c i; j++) {\\n                if(_owners[j] == _owners[i]) {\\n                    revert(\\\"the new address must be distinct\\\");\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _validSignature(bytes32 recoverMsg, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) private returns (bool) {\\n        require(vs.length == rs.length);\\n        require(rs.length == ss.length);\\n        require(vs.length \\u003c= owners.length);\\n        require(vs.length \\u003e= getRequired());\\n\\n        address[] memory signedAddresses = new address[](vs.length);\\n        for (uint256 i = 0; i \\u003c vs.length; i++) {\\n            signedAddresses[i] = ecrecover(recoverMsg, vs[i]+27, rs[i], ss[i]);\\n        }\\n\\n        require(_distinctSignedOwners(signedAddresses), \\\"signed owner must be distinct\\\");\\n        _updateActiveOwners(signedAddresses);\\n        _updateActivatedTime();\\n        return true;\\n    }\\n\\n    function _updateOwners(address[] memory _oldOwners, address[] memory _newOwners, uint256 _required) private returns (bool) {\\n        for(uint256 i = 0; i \\u003c _oldOwners.length; i++) {\\n            for (uint256 j = 0; j \\u003c owners.length; j++) {\\n                if (owners[j] == _oldOwners[i]) {\\n                    activeOwners[owners[j]] = 0;\\n                    owners[j] = owners[owners.length - 1];\\n                    owners.pop();\\n                    emit OwnerRemoval(_oldOwners[i]);\\n                    break;\\n                }\\n            }\\n        }\\n\\n        for(uint256 i = 0; i \\u003c _newOwners.length; i++) {\\n            owners.push(_newOwners[i]);\\n            activeOwners[_newOwners[i]] = block.timestamp;\\n            emit OwnerAddition(_newOwners[i]);\\n        }\\n\\n        require(owners.length \\u003e= _required, \\\"the owners must more than the required\\\");\\n        required = _required;\\n        emit SignRequirementChanged(required);\\n\\n        return true;\\n    }\\n\\n    function _updateActiveOwners(address[] memory _owners) private returns (bool){\\n        for (uint256 i = 0; i \\u003c _owners.length; i++) {\\n            activeOwners[_owners[i]] = block.timestamp;\\n        }\\n        return true;\\n    }\\n\\n    function _distinctSignedOwners(address[] memory _owners) private view returns (bool) {\\n        if (_owners.length \\u003e owners.length) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i \\u003c _owners.length; i++) {\\n            if(activeOwners[_owners[i]] == 0) {\\n                return false;\\n            }\\n\\n            for (uint256 j = 0; j \\u003c i; j++) {\\n                if(_owners[j] == _owners[i]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _safeTransfer(address token, address recipient, uint256 value) internal {\\n        if(isExceptionToken(token)) {\\n            (bool success, ) = token.call(abi.encodeWithSelector(IERC20(token).transfer.selector, recipient, value));\\n            require(success, \\\"ERC20 transfer failed\\\");\\n            return;\\n        }\\n        SafeERC20.safeTransfer(IERC20(token), recipient, value);\\n    }\\n\\n    function _safeTransferNative(address recipient, uint256 value) internal {\\n        (bool success,) = recipient.call{value:value}(new bytes(0));\\n        require(success, \\\"transfer native failed\\\");\\n    }\\n}\"},\"MultiSignWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./MultiSignWalletProxy.sol\\\";\\nimport \\\"./IMultiSignWalletFactory.sol\\\";\\n\\n\\ncontract MultiSignWalletFactory is IMultiSignWalletFactory {\\n    address payable immutable private walletImpl;\\n    event NewWallet(address indexed wallet);\\n    bytes4 internal constant _INITIALIZE = bytes4(keccak256(bytes(\\\"initialize(address[],uint256,bool,uint256,address[])\\\")));\\n    constructor(address payable _walletImpl) {\\n        walletImpl = _walletImpl;\\n    }\\n\\n    function create(address[] calldata _owners, uint _required, bytes32 salt, bool _securitySwitch, uint _inactiveInterval, address[] calldata _execptionTokens) public returns (address) {\\n        MultiSignWalletProxy wallet = new MultiSignWalletProxy{salt: salt}();\\n        (bool success, bytes memory data) = address(wallet).call(abi.encodeWithSelector(_INITIALIZE, _owners, _required, _securitySwitch, _inactiveInterval, _execptionTokens));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"create wallet failed\\\");\\n        emit NewWallet(address(wallet));\\n        return address(wallet);\\n    }\\n\\n    function getWalletImpl() external override view returns(address) {\\n        return walletImpl;\\n    }\\n}\\n\"},\"MultiSignWalletProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./MultiSignWallet.sol\\\";\\nimport \\\"./IMultiSignWalletFactory.sol\\\";\\n\\ncontract MultiSignWalletProxy {\\n    address immutable private walletFactory;\\n\\n    constructor() {\\n        walletFactory = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external {\\n        address impl = IMultiSignWalletFactory(walletFactory).getWalletImpl();\\n        assembly {\\n            let ptr := mload(0x40)\\n            let size := calldatasize()\\n            calldatacopy(ptr, 0, size)\\n            let result := delegatecall(gas(), impl, ptr, size, 0, 0)\\n            size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n\\n            switch result\\n                case 0 {\\n                    revert(ptr, size)\\n                }\\n                default {\\n                    return(ptr, size)\\n                }\\n        }\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nlibrary SafeMath256 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SignMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nlibrary SignMessage {\\n    function transferMessage(address wallet, uint256 chainID, address tokenAddress, address to, uint256 value, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, tokenAddress, to, value, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function executeWithDataMessage(address wallet, uint256 chainID, address contractAddress, uint256 value, bytes32 salt, bytes memory data) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, contractAddress, value, salt, data));\\n        return messageToSign(message);\\n    }\\n\\n    function batchTransferMessage(address wallet, uint256 chainID, address tokenAddress, address[] memory recipients, uint256[] memory amounts, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, tokenAddress, recipients, amounts, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function ownerReplaceMessage(address wallet, uint256 chainID, address[] memory _oldOwners, address[] memory _newOwners, uint256 _required, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, _oldOwners, _newOwners, _required, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function ownerModifyMessage(address wallet, uint256 chainID, address[] memory _owners, uint256 _required, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, _owners, _required, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function ownerRequiredMessage(address wallet, uint256 chainID, uint256 _required, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, _required, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function securitySwitchMessage(address wallet, uint256 chainID, bool swithOn, uint256 _deactivatedInterval, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, swithOn, _deactivatedInterval, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function modifyExceptionTokenMessage(address wallet, uint256 chainID, address[] memory _tokens, bytes32 salt) internal pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(wallet, chainID, _tokens, salt));\\n        return messageToSign(message);\\n    }\\n\\n    function messageToSign(bytes32 message) internal pure returns (bytes32) {\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        return keccak256(abi.encodePacked(prefix, message));\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"NewWallet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_securitySwitch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_inactiveInterval\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_execptionTokens\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiSignWalletFactory", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000A5d33afa06dCE3b2A9243759DF76e65E7812b30", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://127a66ea1fb914b2421d4b092408b4ca81317e9d00b3e401c9a34e77c228ebf5"}