{"SourceCode": "pragma solidity ^0.8.5;\r\n// SPDX-License-Identifier: MIT\r\n// Developed by: jawadklair\r\n\r\ninterface IBEP20 {\r\n\r\n    /**  \r\n     * @dev Returns the total tokens supply  \r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data; // msg.data is used to handle array, bytes, string \r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Koda Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Koda Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Koda Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Koda Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Koda Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Koda Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract LockOwnable is Ownable {\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"KODA: You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"KODA: Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n        _previousOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface ISummitSwapFactory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISummitSwapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ncontract KODA is Context, IBEP20, LockOwnable { // change contract name\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned; // reflected owned tokens\r\n    mapping (address => uint256) private _tOwned; // total Owned tokens\r\n    mapping (address => mapping (address => uint256)) private _allowances; // allowed allowance for spender\r\n\r\n    mapping (address => bool) public _isExcludedFromFee; // excluded address from all fee\r\n    \r\n    mapping (address => bool) public _isExcludedFromReflection; // address excluded from reflection\r\n\r\n    address payable public _kodaLiquidityProviderAddress = payable(0x0000000000000000000000000000000000000000); // kapex liquidity address\r\n\r\n    string private _name = \"Koda Cryptocurrency\"; // token name\r\n    string private _symbol = \"KODA\"; // token symbol\r\n    uint8 private _decimals = 9; // token decimals(1 token can be divided into 1e_decimals parts)\r\n\r\n    uint256 private constant MAX = ~uint256(0); // maximum possible number uint256 decimal value\r\n    uint256 private _tTotal = 33000 * 10**6 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal)); // maximum _rTotal value after subtracting _tTotal remainder\r\n\r\n    uint256 private _tSupply = _tTotal;\r\n    uint256 private _rSupply = _rTotal;\r\n\r\n    bool public buyFeeReduced = false; //reduce buy fee to do promotion\r\n    \r\n    uint256 public buyFeeReductionPercentage = 0;\r\n    uint256 public buyFeeReducedEndTime = 0 minutes;\r\n    \r\n    // All fees are with one decimal value. so if you want 0.5 set value to 5, for 10 set 100. so on...\r\n\r\n    // Below Fees to be deducted and sent as tokens\r\n    uint256 public _feeReflection = 200; //reflection fee 2%\r\n    uint256 private _previousReflectionFee = _feeReflection; //reflection fee\r\n\r\n    // Below Fees to be deducted and sent as BNB/BUSD/or Kapex\r\n    uint256 public _feeTotalBNBDeductible = 800; // 8% all liquidity + dev + marketing fee on each transaction\r\n    uint256 private _previousBNBdeDuctibleFee = _feeTotalBNBDeductible; // restore old deductible fee\r\n\r\n    address public summitSwapPair; // for creating WETH pair with our token\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal; // assigning the max reflection token to owner's address  \r\n        \r\n        ISummitSwapRouter01 _summitSwapRouter = ISummitSwapRouter01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a summitswap pair for this new token\r\n        summitSwapPair = ISummitSwapFactory(_summitSwapRouter.factory())\r\n            .createPair(address(this), _summitSwapRouter.WETH());    \r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()]             = true;\r\n        _isExcludedFromFee[address(this)]       = true;\r\n        _isExcludedFromFee[_kodaLiquidityProviderAddress]   = true;\r\n\r\n\r\n        //Exclude dead address from reflection\r\n        _isExcludedFromReflection[address(0)] = true;\r\n        _isExcludedFromReflection[0x000000000000000000000000000000000000dEaD] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReflection[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    /**  \r\n     * @dev approves allowance of a spender\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**  \r\n     * @dev transfers from a sender to recipient with subtracting spenders allowance with each successful transfer\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"KODA: transfer amount exceeds allowance\"));\r\n         return true;\r\n    }\r\n\r\n    /**  \r\n     * @dev approves allowance of a spender should set it to zero first than increase\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**  \r\n     * @dev decrease allowance of spender that it can spend on behalf of owner\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"KODA: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**  \r\n     * @dev gives reflected tokens to caller\r\n     */\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcludedFromReflection[sender], \"KODA: Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rSupply = _rSupply - rAmount;\r\n    }\r\n\r\n    /**  \r\n     * @dev return's reflected amount of an address from given token amount with/without fee deduction\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"KODA: Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**  \r\n     * @dev get's exact total tokens of an address from reflected amount\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rSupply, \"KODA: Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    /**  \r\n     * @dev excludes an address from reflection reward can only be set by owner\r\n     */\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        // require(account != 0x10ED43C718714eb63d5aA57B78B54704E256024E, 'We can not exclude summitswap router.');\r\n        require(!_isExcludedFromReflection[account], \"KODA: Account is already excluded\");\r\n        uint256 rBalance = _rOwned[account];\r\n        if(rBalance > 0) {\r\n            uint256 rTokens = tokenFromReflection(rBalance);\r\n            _tOwned[account] = rTokens;\r\n            _rSupply -= rBalance;\r\n            _tSupply -= rTokens;\r\n        }\r\n        _isExcludedFromReflection[account] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev includes an address for reflection reward which was excluded before\r\n     */\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcludedFromReflection[account], \"KODA: Account is already included\");\r\n        uint256 tOwned = _tOwned[account];\r\n        uint256 rAmount = reflectionFromToken(tOwned, false);\r\n\r\n        _tSupply += tOwned;\r\n        _rSupply += rAmount;\r\n\r\n        _rOwned[account] = rAmount;\r\n        _tOwned[account] = 0;\r\n\r\n        _isExcludedFromReflection[account] = false;\r\n    }\r\n    \r\n    /**  \r\n     * @dev exclude an address from fee\r\n     */\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    /**  \r\n     * @dev include an address for fee\r\n     */\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's reflection fee percentage\r\n     */\r\n    function setReflectFeePercent(uint256 Fee) external onlyOwner {\r\n        require(_feeTotalBNBDeductible.add(Fee) <= 1000, \"KODA: Total Deductable fee should be less then or equal to 10%\");\r\n        _feeReflection = Fee;\r\n    }\r\n    \r\n    /**  \r\n     * @dev set's BNB deductible fee percentage\r\n     */\r\n    function setTotalBNBDeductibleFeePercent(uint256 Fee) external onlyOwner {\r\n        require(_feeReflection.add(Fee) <= 1000, \"KODA: Total Deductible fee should be less then or equal to 10%\");\r\n        _feeTotalBNBDeductible = Fee;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's koda liquidity provider address\r\n     */\r\n    function setKodaLiquidityProviderAddress(address payable kodaLiquidityAddress) external onlyOwner {\r\n        _kodaLiquidityProviderAddress = kodaLiquidityAddress;\r\n        _isExcludedFromFee[_kodaLiquidityProviderAddress] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev reduce buy fee for a certain amount of time\r\n     */\r\n    function reduceBuyFee(uint256 reductionDuration, uint256 reductionPercentage) external onlyOwner {\r\n        require(reductionPercentage <= 10000, \"Buy fee reduction percentage value should be less than equal to 10000\");\r\n        buyFeeReducedEndTime = block.timestamp.add(reductionDuration * 1 minutes);\r\n        buyFeeReductionPercentage = reductionPercentage;\r\n        buyFeeReduced = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev reflects to all holders, fee deducted from each transaction\r\n     */\r\n    function _reflectFee(uint256 rFee) private {\r\n        _rSupply    = _rSupply.sub(rFee);\r\n        // _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    /**  \r\n     * @dev get/calculates all values e.g taxfee, \r\n     * liquidity fee, actual transfer amount to receiver, \r\n     * deduction amount from sender\r\n     * amount with reward to all holders\r\n     * amount without reward to all holders\r\n     */\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rLiquidity) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, rLiquidity, tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    /**  \r\n     * @dev get/calculates taxfee, liquidity fee\r\n     * without reward amount\r\n     */\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateReflectionFee(tAmount);\r\n        uint256 tLiquidity = calculateDeductibleFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    /**  \r\n     * @dev amount with reward, reflection from transaction\r\n     * total deduction amount from sender with reward\r\n     */\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee, rLiquidity);\r\n    }\r\n\r\n    /**  \r\n     * @dev gets current reflection rate\r\n     */\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    /**  \r\n     * @dev gets total supply with/without deducted \r\n     * exclude caller's total owned and reflection owned \r\n     */\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        // _tSupply is 0 when every token is held by excluded wallet.\r\n        uint256 tSupply = _tSupply;\r\n        if(tSupply == 0) return (_rTotal, _tTotal);\r\n        return (_rSupply, tSupply);\r\n    }\r\n    \r\n    /**  \r\n     * @dev take's liquidity fee tokens from transaction and send to liquidity provider contract\r\n     */\r\n    function _takeLiquidity(address sender, uint256 tLiquidity, uint256 rLiquidity) private {\r\n        if(_isExcludedFromReflection[_kodaLiquidityProviderAddress]) {\r\n            _tOwned[_kodaLiquidityProviderAddress] = _tOwned[_kodaLiquidityProviderAddress].add(tLiquidity);\r\n            _rSupply -= rLiquidity;\r\n            _tSupply -= tLiquidity;\r\n        } else {\r\n            _rOwned[_kodaLiquidityProviderAddress] = _rOwned[_kodaLiquidityProviderAddress].add(rLiquidity);\r\n        }\r\n        emit Transfer(sender, _kodaLiquidityProviderAddress, tLiquidity);\r\n    }\r\n\r\n    /**  \r\n     * @dev calculates reflection fee tokens to be deducted\r\n     */\r\n    function calculateReflectionFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_feeReflection).div(\r\n            10**4\r\n        );\r\n    }\r\n\r\n    /**  \r\n     * @dev calculates deductible fee tokens to be deducted\r\n     */\r\n    function calculateDeductibleFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_feeTotalBNBDeductible).div(\r\n            10**4\r\n        );\r\n    }\r\n    \r\n    /**  \r\n     * @dev removes all fee from transaction if takefee is set to false\r\n     */\r\n    function removeAllFee() private {\r\n        if(_feeTotalBNBDeductible == 0 && _feeReflection == 0) return;\r\n        \r\n        _previousReflectionFee = _feeReflection;\r\n        _previousBNBdeDuctibleFee = _feeTotalBNBDeductible;\r\n        \r\n        _feeReflection = 0;\r\n        _feeTotalBNBDeductible = 0;\r\n    }\r\n\r\n    /**  \r\n     * @dev removes all fee from transaction if takefee is set to false\r\n     */\r\n    function adjustBuyFee() private {\r\n        _previousReflectionFee = _feeReflection;\r\n        _previousBNBdeDuctibleFee = _feeTotalBNBDeductible;\r\n        \r\n        _feeReflection = _feeReflection.mul(buyFeeReductionPercentage).div(10000);\r\n        _feeTotalBNBDeductible = _feeTotalBNBDeductible.mul(buyFeeReductionPercentage).div(10000);\r\n    }\r\n    \r\n    /**  \r\n     * @dev restores all fee after exclude fee transaction completes\r\n     */\r\n    function restoreAllFee() private {\r\n        _feeReflection = _previousReflectionFee;\r\n        _feeTotalBNBDeductible = _previousBNBdeDuctibleFee;\r\n    }\r\n\r\n    /**  \r\n     * @dev approves amount of token spender can spend on behalf of an owner\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"KODA: approve from the zero address\");\r\n        require(spender != address(0), \"KODA: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**  \r\n     * @dev transfers token from sender to recipient also auto \r\n     * send collected fee to kodaLiquidityProvider address(contract).\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0) && to != address(0), \"KODA: transfer from/to the Zero address\");\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if(buyFeeReduced && block.timestamp >= buyFeeReducedEndTime)\r\n            buyFeeReduced = false;\r\n\r\n        bool buyFeeReductionCheck = buyFeeReduced;\r\n        if(buyFeeReductionCheck && from != summitSwapPair)\r\n            buyFeeReductionCheck = false;\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee,buyFeeReductionCheck);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool reducedBuyFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        if(reducedBuyFee && takeFee)\r\n            adjustBuyFee();\r\n        \r\n        if (!_isExcludedFromReflection[sender] && !_isExcludedFromReflection[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcludedFromReflection[sender] && !_isExcludedFromReflection[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReflection[sender] && _isExcludedFromReflection[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee || reducedBuyFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    /**  \r\n     * @dev deduct's balance from sender and \r\n     * add to recipient with reward for recipient only\r\n     */\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        require(tAmount <=_tOwned[sender],\"KODA: transfer amount exceeds Balance\");\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _rSupply = _rSupply.add(rAmount);\r\n        _tSupply = _tSupply.add(tAmount);\r\n\r\n        _takeLiquidity(sender, tLiquidity, rLiquidity);\r\n        _reflectFee(rFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**  \r\n     * @dev deduct's balance from sender and \r\n     * add to recipient with reward for sender only\r\n     */\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        require(rAmount <=_rOwned[sender],\"KODA: transfer amount exceeds Balance\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rSupply = _rSupply.sub(rTransferAmount);\r\n        _tSupply = _tSupply.sub(tTransferAmount);\r\n\r\n        _takeLiquidity(sender, tLiquidity, rLiquidity);\r\n        _reflectFee(rFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**  \r\n     * @dev deduct's balance from sender and \r\n     * add to recipient with reward for both addresses\r\n     */\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        require(rAmount <=_rOwned[sender],\"KODA: transfer amount exceeds Balance\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _takeLiquidity(sender, tLiquidity, rLiquidity);\r\n        _reflectFee(rFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    /**  \r\n     * @dev Transfer tokens to sender and receiver address with both excluded from reward\r\n     */\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        require(tAmount <=_tOwned[sender],\"KODA: transfer amount exceeds Balance\");\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        \r\n        _rSupply = _rSupply.add(rAmount.sub(rTransferAmount));\r\n        _tSupply = _tSupply.add(tAmount.sub(tTransferAmount));\r\n\r\n        _takeLiquidity(sender, tLiquidity, rLiquidity);\r\n        _reflectFee(rFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**  \r\n     * @dev recovers any tokens stuck in Contract's balance\r\n     * NOTE! if ownership is renounced then it will not work\r\n     * NOTE! Contract's Address and Owner's address MUST NOT\r\n     * be excluded from reflection reward\r\n     */\r\n    function recoverTokens(address tokenAddress, address recipient, uint256 amountToRecover, uint256 recoverFeePercentage) public onlyOwner\r\n    {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        require(balance >= amountToRecover, \"KODA: Not Enough Tokens in contract to recover\");\r\n\r\n        address feeRecipient = _msgSender();\r\n        uint256 feeAmount = amountToRecover.mul(recoverFeePercentage).div(10000);\r\n        amountToRecover = amountToRecover.sub(feeAmount);\r\n        if(feeAmount > 0)\r\n            token.transfer(feeRecipient, feeAmount);\r\n        if(amountToRecover > 0)\r\n            token.transfer(recipient, amountToRecover);\r\n    }\r\n    \r\n    //set New swap Pair address!\r\n    function setPairAddress(address newPair) public onlyOwner {\r\n        require(newPair != summitSwapPair, \"This pair address is already set\");\r\n        summitSwapPair = newPair;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_feeReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeTotalBNBDeductible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_kodaLiquidityProviderAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeReduced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeReducedEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeReductionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverFeePercentage\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reductionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reductionPercentage\",\"type\":\"uint256\"}],\"name\":\"reduceBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"kodaLiquidityAddress\",\"type\":\"address\"}],\"name\":\"setKodaLiquidityProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setReflectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setTotalBNBDeductibleFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summitSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KODA", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65882c7a25e96cfb6b597ff76aa93135040cde936804dab6e4c3bd55de78cc3e"}