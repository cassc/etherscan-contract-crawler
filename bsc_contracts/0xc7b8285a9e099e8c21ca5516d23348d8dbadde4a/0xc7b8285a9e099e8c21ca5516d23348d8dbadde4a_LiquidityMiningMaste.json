{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/base/DAOToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../interfaces/IDAOToken.sol\\\";\\r\\n\\r\\n// DAOToken with Governance.\\r\\ncontract DAOToken is IDAOToken, ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping(address => address) public override delegates;\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal override {\\r\\n        super._mint(to, amount);\\r\\n        _moveDelegates(address(0), delegates[to], amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 amount) internal override {\\r\\n        super._burn(from, amount);\\r\\n        _moveDelegates(delegates[from], address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) external override {\\r\\n        return _delegate(_msgSender(), delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n        );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            signatory != address(0),\\r\\n            \\\"DAOToken::delegateBySig: Invalid signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            nonce == nonces[signatory]++,\\r\\n            \\\"DAOToken::delegateBySig: Invalid nonce\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= expiry,\\r\\n            \\\"DAOToken::delegateBySig: Signature expired\\\"\\r\\n        );\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return\\r\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            blockNumber < block.number,\\r\\n            \\\"DAOToken::getPriorVotes: Not yet determined\\\"\\r\\n        );\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint256 delegatorBalance = balanceOf(delegator);\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `to`\\r\\n     * @param to The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), to, amount);\\r\\n        _moveDelegates(delegates[_msgSender()], delegates[to], amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `from` to `to`\\r\\n     * @param from The address of the source account\\r\\n     * @param to The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(from, to, amount);\\r\\n        _approve(\\r\\n            from,\\r\\n            _msgSender(),\\r\\n            allowance(from, _msgSender()).sub(\\r\\n                amount,\\r\\n                \\\"DAOToken::transferFrom: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _moveDelegates(delegates[from], delegates[to], amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(\\r\\n        address srcRep,\\r\\n        address dstRep,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum > 0\\r\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld = dstRepNum > 0\\r\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    ) internal {\\r\\n        uint32 blockNumber = safe32(\\r\\n            block.number,\\r\\n            \\\"DAOToken::_writeCheckpoint: Block number exceeds 32 bits\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            nCheckpoints > 0 &&\\r\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\r\\n                blockNumber,\\r\\n                newVotes\\r\\n            );\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPermissions.sol\\\";\\r\\nimport \\\"../interfaces/IXMSToken.sol\\\";\\r\\nimport \\\"../interfaces/IUSDMToken.sol\\\";\\r\\n\\r\\n/// @title Core Interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICore is IPermissions {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event XMSSupportRatioUpdate(uint256 _xmsSupportRatio);\\r\\n    event USDMUpdate(address indexed _usdm);\\r\\n    event XMSUpdate(address indexed _xms);\\r\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\r\\n    event TokenAllocation(address indexed _to, uint256 _amount);\\r\\n    event TokenApprove(address indexed _to, uint256 _amount);\\r\\n    event GenesisPeriodComplete(uint256 _timestamp);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setXMSSupportRatio(uint256 _xmsSupportRatio) external;\\r\\n\\r\\n    function setUSDM(address token) external;\\r\\n\\r\\n    function setXMS(address token) external;\\r\\n\\r\\n    function setGenesisGroup(address _genesisGroup) external;\\r\\n\\r\\n    function allocateXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function allocateToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function approveXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function approveToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    function removeApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    // ----------- Genesis Group only state changing api -----------\\r\\n\\r\\n    function completeGenesisGroup() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function getApprovedPairsLength() external view returns (uint256);\\r\\n\\r\\n    function getApprovedContractsLength(address _pair)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approvedPairs(uint256 idx) external view returns (address);\\r\\n\\r\\n    function approvedPairExisted(address pair) external view returns (bool);\\r\\n\\r\\n    function approvedContracts(address pair, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function approvedContractExisted(address pair, address _contract)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function xmsSupportRatio() external view returns (uint256);\\r\\n\\r\\n    function xmsSupportRatioPrecision() external view returns (uint256);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function genesisGroup() external view returns (address);\\r\\n\\r\\n    function hasGenesisGroupCompleted() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICore.sol\\\";\\r\\n\\r\\n/// @title CoreRef interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICoreRef {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event CoreUpdate(address indexed _core);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setCore(address core_) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function core() external view returns (ICore);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function usdmBalance() external view returns (uint256);\\r\\n\\r\\n    function xmsBalance() external view returns (uint256);\\r\\n\\r\\n    function getUSDMAmountGovernance() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IDAOToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IDAOToken {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function delegates(address delegator) external view returns (address);\\r\\n\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint256);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ILiquidityMiningMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILiquidityMiningMaster {\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of XMS\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accXMSPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accXMSPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. XMS to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that XMS distribution occurs.\\r\\n        uint256 accXMSPerShare; // Accumulated XMS per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event UpdateEmissionRate(address indexed user, uint256 xmsPerBlock);\\r\\n    event UpdateEndBlock(address indexed user, uint256 endBlock);\\r\\n    event UpdateVestingMaster(address indexed user, address vestingMaster);\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function massUpdatePools() external;\\r\\n\\r\\n    function updatePool(uint256 pid) external;\\r\\n\\r\\n    function deposit(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external;\\r\\n\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function addPool(\\r\\n        uint256 allocPoint,\\r\\n        IERC20 lpToken,\\r\\n        bool withUpdate\\r\\n    ) external;\\r\\n\\r\\n    function setPool(\\r\\n        uint256 pid,\\r\\n        uint256 allocPoint,\\r\\n        bool withUpdate\\r\\n    ) external;\\r\\n\\r\\n    function updateXmsPerBlock(uint256 _xmsPerBlock) external;\\r\\n\\r\\n    function updateEndBlock(uint256 _endBlock) external;\\r\\n\\r\\n    function updateVestingMaster(address _vestingMaster) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function pair2Pid(address pair) external view returns (uint256);\\r\\n\\r\\n    function pendingXMS(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function poolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IERC20 lpToken,\\r\\n            uint256 allocPoint,\\r\\n            uint256 lastRewardBlock,\\r\\n            uint256 accXMSPerShare\\r\\n        );\\r\\n\\r\\n    function userInfo(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function poolExistence(IERC20 lp) external view returns (bool);\\r\\n\\r\\n    function xmsPerBlock() external view returns (uint256);\\r\\n\\r\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function endBlock() external view returns (uint256);\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function getMultiplier(uint256 from, uint256 to)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Permissions interface\\r\\n/// @author USDM Protocol\\r\\ninterface IPermissions {\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n    function grantMinter(address minter) external;\\r\\n\\r\\n    function grantBurner(address burner) external;\\r\\n\\r\\n    function grantPCVController(address pcvController) external;\\r\\n\\r\\n    function grantGovernor(address governor) external;\\r\\n\\r\\n    function grantGuardian(address guardian) external;\\r\\n\\r\\n    function revokeMinter(address minter) external;\\r\\n\\r\\n    function revokeBurner(address burner) external;\\r\\n\\r\\n    function revokePCVController(address pcvController) external;\\r\\n\\r\\n    function revokeGovernor(address governor) external;\\r\\n\\r\\n    function revokeGuardian(address guardian) external;\\r\\n\\r\\n    // ----------- Revoker only state changing api -----------\\r\\n\\r\\n    function revokeOverride(bytes32 role, address account) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function isBurner(address _address) external view returns (bool);\\r\\n\\r\\n    function isMinter(address _address) external view returns (bool);\\r\\n\\r\\n    function isGovernor(address _address) external view returns (bool);\\r\\n\\r\\n    function isGuardian(address _address) external view returns (bool);\\r\\n\\r\\n    function isPCVController(address _address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IUSDMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IUSDMToken is IERC20 {\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- Burner State changing api -----------\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function burn(uint256 _amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IVestingMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IVestingMaster {\\r\\n    struct LockedReward {\\r\\n        uint256 locked;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event Lock(address indexed user, uint256 amount);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n\\r\\n    // ----------- Farms only State changing api -----------\\r\\n\\r\\n    function lock(address, uint256) external;\\r\\n\\r\\n    // ----------- state changing API -----------\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function period() external view returns (uint256);\\r\\n\\r\\n    function lockedPeriodAmount() external view returns (uint256);\\r\\n\\r\\n    function vestingToken() external view returns (IERC20);\\r\\n\\r\\n    function userLockedRewards(address account, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function totalLockedRewards() external view returns (uint256);\\r\\n\\r\\n    function getVestingAmount() external view returns (uint256, uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IXMSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IXMSToken is IERC20 {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function delegates(address delegator) external view returns (address);\\r\\n\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint96);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/liquidity/LiquidityMiningMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/ILiquidityMiningMaster.sol\\\";\\r\\nimport \\\"../interfaces/IVestingMaster.sol\\\";\\r\\nimport \\\"../refs/CoreRef.sol\\\";\\r\\nimport \\\"../base/DAOToken.sol\\\";\\r\\n\\r\\n// Earn XMS\\r\\ncontract LiquidityMiningMaster is\\r\\n    ILiquidityMiningMaster,\\r\\n    ReentrancyGuard,\\r\\n    CoreRef,\\r\\n    DAOToken\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IVestingMaster public vestingMaster;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public override poolInfo;\\r\\n\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public override userInfo;\\r\\n\\r\\n    // Pair corresponding pid\\r\\n    mapping(address => uint256) public override pair2Pid;\\r\\n    mapping(IERC20 => bool) public override poolExistence;\\r\\n\\r\\n    // XMS tokens created per block.\\r\\n    uint256 public override xmsPerBlock;\\r\\n\\r\\n    // Bonus muliplier for early XMS makers.\\r\\n    uint256 public constant override BONUS_MULTIPLIER = 1;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public override totalAllocPoint = 0;\\r\\n\\r\\n    // The block number when XMS mining starts.\\r\\n    uint256 public override startBlock;\\r\\n\\r\\n    // The block number when XMS mining ends.\\r\\n    uint256 public override endBlock;\\r\\n\\r\\n    constructor(\\r\\n        address _core,\\r\\n        address _vestingMaster,\\r\\n        uint256 _xmsPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock\\r\\n    ) CoreRef(_core) DAOToken(\\\"Mars Farms Seed Token\\\", \\\"MSEED\\\") {\\r\\n        require(\\r\\n            _startBlock < _endBlock,\\r\\n            \\\"LiquidityMiningMaster::constructor: End less than start\\\"\\r\\n        );\\r\\n        vestingMaster = IVestingMaster(_vestingMaster);\\r\\n        xmsPerBlock = _xmsPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n        endBlock = _endBlock;\\r\\n    }\\r\\n\\r\\n    modifier nonDuplicated(IERC20 _lpToken) {\\r\\n        require(\\r\\n            !poolExistence[_lpToken],\\r\\n            \\\"LiquidityMiningMaster::nonDuplicated: Duplicated\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validatePid(uint256 _pid) {\\r\\n        require(\\r\\n            _pid < poolInfo.length,\\r\\n            \\\"LiquidityMiningMaster::validatePid: Not exist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function poolLength() public view override returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the governor.\\r\\n    function addPool(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        bool _withUpdate\\r\\n    ) public override onlyGuardianOrGovernor nonDuplicated(_lpToken) {\\r\\n        require(\\r\\n            block.number < endBlock,\\r\\n            \\\"LiquidityMiningMaster::addPool: Exceed endblock\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock\\r\\n            ? block.number\\r\\n            : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolExistence[_lpToken] = true;\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accXMSPerShare: 0\\r\\n            })\\r\\n        );\\r\\n        pair2Pid[address(_lpToken)] = poolLength() - 1;\\r\\n    }\\r\\n\\r\\n    // Update the given pool's XMS allocation point and deposit fee. Can only be called by the governor.\\r\\n    function setPool(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) public override validatePid(_pid) onlyGuardianOrGovernor {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\r\\n            _allocPoint\\r\\n        );\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    function getXMSReward(uint256 _pid)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 xmsReward)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(\\r\\n            pool.lastRewardBlock < block.number,\\r\\n            \\\"LiquidityMiningMaster::getXMSReward: Must little than the current block number\\\"\\r\\n        );\\r\\n        uint256 multiplier = getMultiplier(\\r\\n            pool.lastRewardBlock,\\r\\n            block.number >= endBlock ? endBlock : block.number\\r\\n        );\\r\\n        xmsReward = multiplier.mul(xmsPerBlock).mul(pool.allocPoint).div(\\r\\n            totalAllocPoint\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // View function to see pending XMS on frontend.\\r\\n    function pendingXMS(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        validatePid(_pid)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accXMSPerShare = pool.accXMSPerShare;\\r\\n        uint256 lpSupply = address(xms()) == address(pool.lpToken)\\r\\n            ? totalSupply()\\r\\n            : pool.lpToken.balanceOf(address(this));\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 shareReward = getXMSReward(_pid);\\r\\n            accXMSPerShare = accXMSPerShare.add(\\r\\n                shareReward.mul(1e12).div(lpSupply)\\r\\n            );\\r\\n        }\\r\\n        return user.amount.mul(accXMSPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public override {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public override validatePid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if (pool.lastRewardBlock >= endBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = address(xms()) == address(pool.lpToken)\\r\\n            ? totalSupply()\\r\\n            : pool.lpToken.balanceOf(address(this));\\r\\n        uint256 lastRewardBlock = block.number >= endBlock\\r\\n            ? endBlock\\r\\n            : block.number;\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = lastRewardBlock;\\r\\n            return;\\r\\n        }\\r\\n        uint256 shareReward = getXMSReward(_pid);\\r\\n        pool.accXMSPerShare = pool.accXMSPerShare.add(\\r\\n            shareReward.mul(1e12).div(lpSupply)\\r\\n        );\\r\\n        pool.lastRewardBlock = lastRewardBlock;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to LiquidityMiningMaster for XMS allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        override\\r\\n        validatePid(_pid)\\r\\n        nonReentrant\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = user\\r\\n                .amount\\r\\n                .mul(pool.accXMSPerShare)\\r\\n                .div(1e12)\\r\\n                .sub(user.rewardDebt);\\r\\n            if (pending > 0) {\\r\\n                uint256 locked;\\r\\n                if (address(vestingMaster) != address(0)) {\\r\\n                    locked = pending\\r\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\r\\n                        .mul(vestingMaster.lockedPeriodAmount());\\r\\n                }\\r\\n                safeXMSTransfer(msg.sender, pending.sub(locked));\\r\\n                if (locked > 0) {\\r\\n                    uint256 actualAmount = safeXMSTransfer(\\r\\n                        address(vestingMaster),\\r\\n                        locked\\r\\n                    );\\r\\n                    vestingMaster.lock(msg.sender, actualAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(\\r\\n                address(msg.sender),\\r\\n                address(this),\\r\\n                _amount\\r\\n            );\\r\\n            if (address(xms()) == address(pool.lpToken)) {\\r\\n                _mint(msg.sender, _amount);\\r\\n            }\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accXMSPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from LiquidityMiningMaster.\\r\\n    function withdraw(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        override\\r\\n        validatePid(_pid)\\r\\n        nonReentrant\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(\\r\\n            user.amount >= _amount,\\r\\n            \\\"LiquidityMiningMaster::withdraw: Not good\\\"\\r\\n        );\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = user\\r\\n                .amount\\r\\n                .mul(pool.accXMSPerShare)\\r\\n                .div(1e12)\\r\\n                .sub(user.rewardDebt);\\r\\n            if (pending > 0) {\\r\\n                uint256 locked;\\r\\n                if (address(vestingMaster) != address(0)) {\\r\\n                    locked = pending\\r\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\r\\n                        .mul(vestingMaster.lockedPeriodAmount());\\r\\n                }\\r\\n                safeXMSTransfer(msg.sender, pending.sub(locked));\\r\\n                if (locked > 0) {\\r\\n                    uint256 actualAmount = safeXMSTransfer(\\r\\n                        address(vestingMaster),\\r\\n                        locked\\r\\n                    );\\r\\n                    vestingMaster.lock(msg.sender, actualAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            if (address(xms()) == address(pool.lpToken)) {\\r\\n                _burn(msg.sender, _amount);\\r\\n            }\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accXMSPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid)\\r\\n        public\\r\\n        override\\r\\n        validatePid(_pid)\\r\\n        nonReentrant\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        if (address(xms()) == address(pool.lpToken)) {\\r\\n            _burn(msg.sender, amount);\\r\\n        }\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Safe XMS transfer function, just in case if rounding error causes pool to not have enough XMS.\\r\\n    function safeXMSTransfer(address _to, uint256 _amount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = xmsBalance();\\r\\n        uint256 amount;\\r\\n        uint256 floorAmount = totalSupply();\\r\\n        if (balance > floorAmount) {\\r\\n            if (_amount > balance.sub(floorAmount)) {\\r\\n                amount = balance.sub(floorAmount);\\r\\n            } else {\\r\\n                amount = _amount;\\r\\n            }\\r\\n        }\\r\\n        require(\\r\\n            xms().transfer(_to, amount),\\r\\n            \\\"LiquidityMiningMaster::safeXMSTransfer: Transfer failed\\\"\\r\\n        );\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function updateXmsPerBlock(uint256 _xmsPerBlock)\\r\\n        public\\r\\n        override\\r\\n        onlyGuardianOrGovernor\\r\\n    {\\r\\n        massUpdatePools();\\r\\n        xmsPerBlock = _xmsPerBlock;\\r\\n        emit UpdateEmissionRate(msg.sender, _xmsPerBlock);\\r\\n    }\\r\\n\\r\\n    function updateEndBlock(uint256 _endBlock)\\r\\n        public\\r\\n        override\\r\\n        onlyGuardianOrGovernor\\r\\n    {\\r\\n        require(\\r\\n            _endBlock > startBlock,\\r\\n            \\\"LiquidityMiningMaster::updateEndBlock: Less\\\"\\r\\n        );\\r\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\r\\n            require(\\r\\n                _endBlock > poolInfo[pid].lastRewardBlock,\\r\\n                \\\"LiquidityMiningMaster::updateEndBlock: Less\\\"\\r\\n            );\\r\\n        }\\r\\n        massUpdatePools();\\r\\n        endBlock = _endBlock;\\r\\n        emit UpdateEndBlock(msg.sender, _endBlock);\\r\\n    }\\r\\n\\r\\n    function updateVestingMaster(address _vestingMaster)\\r\\n        public\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        vestingMaster = IVestingMaster(_vestingMaster);\\r\\n        emit UpdateVestingMaster(msg.sender, _vestingMaster);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/refs/CoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/ICoreRef.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/// @title A Reference to Core\\r\\n/// @author USDM Protocol\\r\\n/// @notice Defines some modifiers and utilities around interacting with Core\\r\\nabstract contract CoreRef is ICoreRef, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ICore private _core;\\r\\n\\r\\n    /// @notice CoreRef constructor\\r\\n    /// @param core_ USDM Core to reference\\r\\n    constructor(address core_) {\\r\\n        _core = ICore(core_);\\r\\n    }\\r\\n\\r\\n    modifier ifMinterSelf() {\\r\\n        if (_core.isMinter(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier ifBurnerSelf() {\\r\\n        if (_core.isBurner(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            _core.isMinter(msg.sender),\\r\\n            \\\"CoreRef::onlyMinter: Caller is not a minter\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(\\r\\n            _core.isBurner(msg.sender),\\r\\n            \\\"CoreRef::onlyBurner: Caller is not a burner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPCVController() {\\r\\n        require(\\r\\n            _core.isPCVController(msg.sender),\\r\\n            \\\"CoreRef::onlyPCVController: Caller is not a PCV controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender),\\r\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardianOrGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\r\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyUSDM() {\\r\\n        require(\\r\\n            msg.sender == address(usdm()),\\r\\n            \\\"CoreRef::onlyUSDM: Caller is not USDM\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGenesisGroup() {\\r\\n        require(\\r\\n            msg.sender == _core.genesisGroup(),\\r\\n            \\\"CoreRef::onlyGenesisGroup: Caller is not GenesisGroup\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier postGenesis() {\\r\\n        require(\\r\\n            _core.hasGenesisGroupCompleted(),\\r\\n            \\\"CoreRef::postGenesis: Still in genesis period\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonContract() {\\r\\n        require(\\r\\n            !Address.isContract(msg.sender),\\r\\n            \\\"CoreRef::nonContract: Caller is a contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set new Core reference address\\r\\n    /// @param core_ The new core address\\r\\n    function setCore(address core_) external override onlyGovernor {\\r\\n        _core = ICore(core_);\\r\\n        emit CoreUpdate(core_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to paused\\r\\n    function pause() public override onlyGuardianOrGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to unpaused\\r\\n    function unpause() public override onlyGuardianOrGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the Core contract referenced\\r\\n    /// @return ICore implementation address\\r\\n    function core() public view override returns (ICore) {\\r\\n        return _core;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the USDM contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function usdm() public view override returns (IUSDMToken) {\\r\\n        return _core.usdm();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the XMS contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function xms() public view override returns (IXMSToken) {\\r\\n        return _core.xms();\\r\\n    }\\r\\n\\r\\n    /// @notice USDM balance of contract\\r\\n    /// @return USDM amount held\\r\\n    function usdmBalance() public view override returns (uint256) {\\r\\n        return usdm().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice XMS balance of contract\\r\\n    /// @return XMS amount held\\r\\n    function xmsBalance() public view override returns (uint256) {\\r\\n        return xms().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the usdm amount of governance\\r\\n    function getUSDMAmountGovernance()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 usdmAmount)\\r\\n    {\\r\\n        address pair;\\r\\n        address _contract;\\r\\n        for (uint256 i; i < core().getApprovedPairsLength(); i++) {\\r\\n            pair = core().approvedPairs(i);\\r\\n            for (uint256 j; j < core().getApprovedContractsLength(pair); j++) {\\r\\n                _contract = core().approvedContracts(pair, j);\\r\\n                usdmAmount = usdmAmount.add(\\r\\n                    core()\\r\\n                        .usdm()\\r\\n                        .balanceOf(pair)\\r\\n                        .mul(IERC20(pair).balanceOf(_contract))\\r\\n                        .div(IERC20(pair).totalSupply())\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _burnUSDMHeld() internal {\\r\\n        usdm().burn(usdmBalance());\\r\\n    }\\r\\n\\r\\n    function _mintUSDM(uint256 amount) internal {\\r\\n        usdm().mint(address(this), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_xmsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xmsPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingMaster\",\"type\":\"address\"}],\"name\":\"UpdateVestingMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDMAmountGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdmAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair2Pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingXMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accXMSPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"}],\"name\":\"updateVestingMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xmsPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateXmsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"contract IUSDMToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdmBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingMaster\",\"outputs\":[{\"internalType\":\"contract IVestingMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xms\",\"outputs\":[{\"internalType\":\"contract IXMSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityMiningMaster", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000789cfb69499c65ac9a3a68fb4917c9b4fca2a7000000000000000000000000381facb9282770a5e3ac6c8637096b442039c3db0000000000000000000000000000000000000000000000004064976a8dd000000000000000000000000000000000000000000000000000000000000000a0c61c0000000000000000000000000000000000000000000000000000000001dd2e1c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}