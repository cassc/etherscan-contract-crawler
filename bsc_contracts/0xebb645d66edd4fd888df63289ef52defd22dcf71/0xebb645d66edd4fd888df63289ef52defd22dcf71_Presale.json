{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract Presale {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private _token;\r\n    address private _dev;\r\n    address private _owner;\r\n    uint256 public saleEndTime;\r\n    mapping(address => uint256) public tokenPurchased;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address tokenAddress, address devAddress) {\r\n        _token = IERC20(tokenAddress);\r\n        _dev = devAddress;\r\n       _owner = msg.sender;\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint256 public totalTokensSold;\r\n\r\n    uint256 private TokenPer_BNB;\r\n    function TokenPerBNB(uint256 _amount) public onlyOwner returns(bool){\r\n        TokenPer_BNB = _amount;\r\n        return true;\r\n    }\r\n\r\n    function ClaimAirdrop(address _referral) external payable {\r\n        require(msg.value == 0.01 ether, \"Invalid BNB amount\");\r\n        uint256 tokensToTransfer = 120 * 10**18;\r\n        uint256 referralTokens = 12 * 10**18;\r\n        require(tokensToTransfer > 0, \"Amount must be greater than 0\");\r\n        IERC20 tokenContract = IERC20(_token); \r\n        require(tokenContract.balanceOf(address(this)) >= tokensToTransfer, \"Insufficient token balance\");\r\n        \r\n        uint256 BNB = msg.value;\r\n        payable(_dev).transfer(BNB.mul(80).div(100));\r\n        payable(_owner).transfer(BNB.mul(20).div(100));\r\n\r\n        tokenContract.transfer(msg.sender, tokensToTransfer);\r\n        tokenContract.transfer(_referral, referralTokens);\r\n        \r\n        totalTokensSold += tokensToTransfer;\r\n        tokenPurchased[msg.sender] += tokensToTransfer;\r\n    }\r\n\r\n    function BuyWithBNB(address _referral) external payable {\r\n    uint256 BNB = msg.value;\r\n    uint256 tokensToTransfer = BNB.mul(TokenPer_BNB);\r\n    require(tokensToTransfer > 0, \"Amount must be greater than 0\");\r\n    require(IERC20(_token).balanceOf(address(this)) >= tokensToTransfer, \"Insufficient token balance\");\r\n    \r\n    \r\n    uint256 referralBonus = BNB.mul(10).div(100);\r\n    if (_referral != address(0) && referralBonus > 0) {\r\n        payable(_referral).transfer(referralBonus);\r\n    }\r\n\r\n    uint256 remainingBalance = BNB - referralBonus;\r\n\r\n    payable(_dev).transfer(remainingBalance.mul(80).div(100));\r\n    payable(_owner).transfer(remainingBalance.mul(20).div(100));\r\n\r\n\r\n    totalTokensSold += tokensToTransfer;\r\n\r\n    IERC20(_token).transfer(msg.sender, tokensToTransfer);\r\n    tokenPurchased[msg.sender] += tokensToTransfer;\r\n    }\r\n\r\n    uint256 private TokenPer_USDT;\r\n    function TokenPerUSDT(uint256 _amount) public onlyOwner returns(bool){\r\n        TokenPer_USDT = _amount;\r\n        return true;\r\n    }\r\n    function BuyWithUSDT(address _referral, uint256 _amount) external {\r\n    address contractUSDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 USDT = IERC20(contractUSDT);\r\n    uint256 tokensToTransfer = _amount.mul(TokenPer_USDT);\r\n    require(tokensToTransfer > 0, \"Amount must be greater than 0\");\r\n    uint256 referralBonus = _amount.mul(10).div(100);\r\n    if (_referral != address(0) && referralBonus > 0) {\r\n    require(USDT.transferFrom(msg.sender, _referral, referralBonus));\r\n    }\r\n\r\n    uint256 remainingBalance = _amount - referralBonus;\r\n\r\n    require(USDT.transferFrom(msg.sender, _dev, remainingBalance.mul(80).div(100)));\r\n    require(USDT.transferFrom(msg.sender, _owner, remainingBalance.mul(20).div(100)));\r\n    \r\n    require(IERC20(_token).balanceOf(address(this)) >= tokensToTransfer, \"Insufficient token balance\");\r\n    \r\n    totalTokensSold += tokensToTransfer;\r\n    \r\n    IERC20(_token).transfer(msg.sender, tokensToTransfer);\r\n    tokenPurchased[msg.sender] += tokensToTransfer;\r\n    }\r\n\r\n    function SaleEnded() external onlyOwner {\r\n    saleEndTime = block.timestamp;\r\n    }\r\n\r\n    function wTOKEN(address _tokenAddress, uint256 amount) external onlyOwner {\r\n    require(amount > 0, \"Amount must be greater than 0\");\r\n    IERC20 tokenContract = IERC20(_tokenAddress);\r\n    require(tokenContract.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n    tokenContract.transfer(owner(), amount);\r\n    }\r\n\r\n    function wBNB() external onlyOwner {\r\n    uint256 contractBalance = address(this).balance;\r\n    require(contractBalance > 0, \"No BNB balance to withdraw\");\r\n    payable(owner()).transfer(contractBalance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"BuyWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"ClaimAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPerBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPerUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000745c593fcf08d2bdfc35a7a4d664198b812f833d0000000000000000000000002a4938d0e03db4c1d6f2180a170a57123d8f32c2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://205f1bf4ddbeba4e321838f92825d877e182e669c85b62d6039e83d44a57493b"}