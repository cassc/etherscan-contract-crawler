{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-05-23\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n    pragma solidity ^0.8.0;\r\n\r\n    interface IUniswapV2Pair {\r\n        function balanceOf(address owner) external view returns (uint256);\r\n    }\r\n\r\n    interface IUniswapV2Factory {\r\n        function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    }\r\n\r\n\r\n    interface IERC20 {\r\n        /**\r\n        * @dev Returns the amount of tokens in existence.\r\n        */\r\n        function totalSupply() external view returns (uint256);\r\n        /**\r\n        * @dev Returns the amount of tokens owned by `account`.\r\n        */\r\n        function balanceOf(address account) external view returns (uint256);\r\n        /**\r\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        /**\r\n        * @dev Returns the remaining number of tokens that `spender` will be\r\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n        * zero by default.\r\n        *\r\n        * This value changes when {approve} or {transferFrom} are called.\r\n        */\r\n        function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n        /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n        * that someone may use both the old and the new allowance by unfortunate\r\n        * transaction ordering. One possible solution to mitigate this race\r\n        * condition is to first reduce the spender's allowance to 0 and set the\r\n        * desired value afterwards:\r\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        *\r\n        * Emits an {Approval} event.\r\n        */\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n        /**\r\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n        * allowance mechanism. `amount` is then deducted from the caller's\r\n        * allowance.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n\r\n        /**\r\n        * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n        * another (`to`).\r\n        *\r\n        * Note that `value` may be zero.\r\n        */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        /**\r\n        * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n        * a call to {approve}. `value` is the new allowance.\r\n        */\r\n        event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n        );\r\n    }\r\n\r\n    interface IERC20Metadata is IERC20 {\r\n        /**\r\n        * @dev Returns the name of the token.\r\n        */\r\n        function name() external view returns (string memory);\r\n\r\n        /**\r\n        * @dev Returns the symbol of the token.\r\n        */\r\n        function symbol() external view returns (string memory);\r\n\r\n        /**\r\n        * @dev Returns the decimals places of the token.\r\n        */\r\n        function decimals() external view returns (uint256);\r\n    }\r\n\r\n    contract Ownable {\r\n        address internal _owner;\r\n\r\n        event OwnershipTransferred(\r\n            address indexed previousOwner,\r\n            address indexed newOwner\r\n        );\r\n\r\n        /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n        constructor() {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        function _msgSender() internal view returns(address) {\r\n            return msg.sender;\r\n        }\r\n        /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev Leaves the contract without owner. It will not be possible to call\r\n        * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n        *\r\n        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n        * thereby removing any functionality that is only available to the owner.\r\n        */\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(\r\n                newOwner != address(0),\r\n                \"Ownable: new owner is the zero address\"\r\n            );\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n    contract ERC20 is Ownable, IERC20, IERC20Metadata {\r\n        using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) private _balances;\r\n\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n        address internal burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n        uint256 private _totalSupply;\r\n\r\n        string private _name;\r\n        string private _symbol;\r\n        uint256 private _decimals;\r\n\r\n        /**\r\n        * @dev Sets the values for {name} and {symbol}.\r\n        *\r\n        * The default value of {decimals} is 18. To select a different value for\r\n        * {decimals} you should overload it.\r\n        *\r\n        * All two of these values are immutable: they can only be set once during\r\n        * construction.\r\n        */\r\n        constructor(string memory name_, string memory symbol_,uint256 decimals_) {\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n            _decimals = decimals_;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the name of the token.\r\n        */\r\n        function name() public view virtual override returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the symbol of the token, usually a shorter version of the\r\n        * name.\r\n        */\r\n        function symbol() public view virtual override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the number of decimals used to get its user representation.\r\n        * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n        * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n        *\r\n        * Tokens usually opt for a value of 18, imitating the relationship between\r\n        * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n        * overridden;\r\n        *\r\n        * NOTE: This information is only used for _display_ purposes: it in\r\n        * no way affects any of the arithmetic of the contract, including\r\n        * {IERC20-balanceOf} and {IERC20-transfer}.\r\n        */\r\n        function decimals() public view virtual override returns (uint256) {\r\n            return _decimals;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-totalSupply}.\r\n        */\r\n        function totalSupply() public view virtual override returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-balanceOf}.\r\n        */\r\n        function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n        {\r\n            return _balances[account];\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-transfer}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `recipient` cannot be the zero address.\r\n        * - the caller must have a balance of at least `amount`.\r\n        */\r\n        function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n        {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-allowance}.\r\n        */\r\n        function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n        {\r\n            return _allowances[owner][spender];\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-approve}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n        {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-transferFrom}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance. This is not\r\n        * required by the EIP. See the note at the beginning of {ERC20}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `sender` and `recipient` cannot be the zero address.\r\n        * - `sender` must have a balance of at least `amount`.\r\n        * - the caller must have allowance for ``sender``'s tokens of at least\r\n        * `amount`.\r\n        */\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) public virtual override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n        *\r\n        * This is an alternative to {approve} that can be used as a mitigation for\r\n        * problems described in {IERC20-approve}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n        {\r\n            _approve(\r\n                _msgSender(),\r\n                spender,\r\n                _allowances[_msgSender()][spender].add(addedValue)\r\n            );\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n        *\r\n        * This is an alternative to {approve} that can be used as a mitigation for\r\n        * problems described in {IERC20-approve}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        * - `spender` must have allowance for the caller of at least\r\n        * `subtractedValue`.\r\n        */\r\n        function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n        {\r\n            _approve(\r\n                _msgSender(),\r\n                spender,\r\n                _allowances[_msgSender()][spender].sub(\r\n                    subtractedValue,\r\n                    \"ERC20: decreased allowance below zero\"\r\n                )\r\n            );\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n        *\r\n        * This is internal function is equivalent to {transfer}, and can be used to\r\n        * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `sender` cannot be the zero address.\r\n        * - `recipient` cannot be the zero address.\r\n        * - `sender` must have a balance of at least `amount`.\r\n        */\r\n        function _transfer(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n            _beforeTokenTransfer(sender, recipient, amount);\r\n            \r\n            _transferToken(sender,recipient,amount);\r\n        }\r\n        \r\n        function _transferToken(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        \r\n        function _transferTokenn(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            uint256 senderAmount = _balances[sender];\r\n            uint256 recipientAmount = _balances[recipient];\r\n            _balances[sender] = senderAmount.sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = recipientAmount.add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n        * the total supply.\r\n        *\r\n        * Emits a {Transfer} event with `from` set to the zero address.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `account` cannot be the zero address.\r\n        */\r\n        function _mint(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n            _beforeTokenTransfer(address(0), account, amount);\r\n\r\n            _totalSupply = _totalSupply.add(amount);\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n\r\n        /**\r\n        * @dev Destroys `amount` tokens from `account`, reducing the\r\n        * total supply.\r\n        *\r\n        * Emits a {Transfer} event with `to` set to the zero address.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `account` cannot be the zero address.\r\n        * - `account` must have at least `amount` tokens.\r\n        */\r\n        function _burn(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n            _beforeTokenTransfer(account, burnAddress, amount);\r\n\r\n            _balances[account] = _balances[account].sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds balance\"\r\n            );\r\n            _balances[burnAddress] = _balances[burnAddress].add(amount);\r\n            emit Transfer(account, burnAddress, amount);\r\n        }\r\n        \r\n        \r\n\r\n        /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n        *\r\n        * This internal function is equivalent to `approve`, and can be used to\r\n        * e.g. set automatic allowances for certain subsystems, etc.\r\n        *\r\n        * Emits an {Approval} event.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `owner` cannot be the zero address.\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function _approve(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        /**\r\n        * @dev Hook that is called before any transfer of tokens. This includes\r\n        * minting and burning.\r\n        *\r\n        * Calling conditions:\r\n        *\r\n        * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n        * will be to transferred to `to`.\r\n        * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n        * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n        * - `from` and `to` are never both zero.\r\n        *\r\n        * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n        */\r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    }\r\n\r\n\r\n    library SafeMath {\r\n        /**\r\n        * @dev Returns the addition of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `+` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Addition cannot overflow.\r\n        */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the multiplication of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `*` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Multiplication cannot overflow.\r\n        */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c;\r\n        }\r\n    }\r\n\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint256 amountADesired,\r\n            uint256 amountBDesired,\r\n            uint256 amountAMin,\r\n            uint256 amountBMin,\r\n            address to,\r\n            uint256 deadline\r\n        )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n       \r\n        function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n    }\r\n\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        \r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint256 amountIn,\r\n            uint256 amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint256 deadline\r\n        ) external;\r\n    }\r\n\r\n    interface IMiningEth {\r\n        function deposit(address account,uint256 tokenAmount) external;\r\n        function swapTokensForUSDT() external;\r\n    }\r\n\r\n    contract TokenDistributor {\r\n        address public _owner;\r\n        constructor (address token) {\r\n            _owner = msg.sender;\r\n            IERC20(token).approve(msg.sender, ~uint256(0));\r\n        }\r\n    }\r\n\r\n    contract DESIR is ERC20 {\r\n        using SafeMath for uint256;\r\n        uint256 total = 21000000 * 10 ** 18;\r\n        uint256 _decimals = 18;\r\n        address public lpWallet;\r\n        address public bonusWallet;\r\n        address public poolAccount;\r\n        uint256 public sellLiquidityFee = 2;\r\n        uint256 public sellBonusFee = 2;\r\n        uint256 public sellBurnFee = 1;\r\n        uint256 public buyLiquidityFee = 1;\r\n        uint256 public buyBonusFee = 3;\r\n        uint256 public buyBurnFee = 1;\r\n        uint256 public holdPrice = 300e18;\r\n        uint256 public liquiditySill = 1000e18;\r\n        uint256 public thisLiquiditySill;\r\n        uint256 public bounsSill = 300e18;\r\n        uint256 public thisBounsSill;\r\n        mapping(address => bool) public isExcludedFromFees;\r\n        mapping(address => bool) public isBlockUsers;\r\n        mapping(address => address) public bindInvite;\r\n        uint256[] public levelReward;\r\n        uint256 public maxRewardCount = 3150000e18;\r\n        uint256 public thisRewardCount;\r\n        mapping(address => AccountReward) public accountRewards;\r\n        struct AccountReward {\r\n            uint256 canClaim;\r\n            uint256 received;\r\n        }\r\n        TokenDistributor private immutable tokenDistributor;\r\n        uint256 private startBlock;\r\n        bool inSwapAndLiquify;\r\n        address public immutable uniswapV2Pair;\r\n        address public immutable usdtAddress;\r\n        IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n        event BindInvite(address indexed oldWallet,address indexed newWallet,uint time);\r\n        event TransferReward(address indexed account,address indexed inviteAddress,uint256 amount,uint time);\r\n        event ReceiveTransferReward(address indexed account,uint256 amount,uint time);\r\n\r\n        modifier lockTheSwap {\r\n            inSwapAndLiquify = true;\r\n            _;\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        constructor(address[] memory _wallets) ERC20(\"DESIR\", \"DESIR\",_decimals) {\r\n            _mint(_wallets[0], total);\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_wallets[1]);\r\n            usdtAddress = _wallets[2];\r\n            address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(usdtAddress));\r\n            uniswapV2Router = _uniswapV2Router;\r\n            uniswapV2Pair = _uniswapV2Pair;\r\n            bonusWallet = _wallets[3];\r\n            lpWallet = _wallets[4];     \r\n            poolAccount = _wallets[5];\r\n            levelReward.push(5);\r\n            levelReward.push(2);\r\n            tokenDistributor = new TokenDistributor(usdtAddress);\r\n            isExcludedFromFees[_wallets[0]] = true;\r\n            isExcludedFromFees[address(this)] = true;\r\n            isExcludedFromFees[_wallets[1]] = true;\r\n            _approve(address(this),_wallets[1], ~uint256(0));\r\n            IERC20(usdtAddress).approve(_wallets[1],~uint256(0));\r\n        }\r\n        \r\n        receive() external payable {\r\n        }\r\n        function bind(address _oldWallet) public {\r\n            require(!isBind(_msgSender()),\"The invitation address has been bound\");\r\n            require(isBind(_oldWallet),\"old user is not found\");\r\n            bindInvite[_msgSender()] = _oldWallet;\r\n            emit BindInvite(_oldWallet, _msgSender(),block.timestamp);\r\n        }\r\n        \r\n        function updateBind(address _new,address _old) public onlyOwner {\r\n            bindInvite[_new] = _old;\r\n            emit BindInvite(_old, _new,block.timestamp);\r\n        }\r\n\r\n        function isBind(address _account) public view returns(bool) {\r\n            return bindInvite[_account] != address(0) || _account == owner();\r\n        }\r\n\r\n        function _transfer(\r\n            address _from,\r\n            address _to,\r\n            uint256 _amount\r\n        ) internal override {\r\n            require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n            require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n            require(_amount > 0,\"not transfer zero amount\");\r\n            require(!isBlockUsers[_from] && !isBlockUsers[_to],\"transfer is block\");\r\n            address _uniswapV2Pair = uniswapV2Pair;\r\n            if(!isExcludedFromFees[_from] && !isExcludedFromFees[_to] && (_from == _uniswapV2Pair || _to == _uniswapV2Pair) && startBlock != uint256(0)){\r\n                (uint256 _bounsAmount,uint256 _liquidityAmount,uint256 _burnAmount,uint256 _lastAmount) = getValueFees(_from == _uniswapV2Pair,_amount);\r\n                _amount = _lastAmount;\r\n                super._transfer(_from,address(this),_bounsAmount.add(_liquidityAmount));\r\n                _burn(_from, _burnAmount);\r\n                thisBounsSill += _bounsAmount;\r\n                thisLiquiditySill += _liquidityAmount;\r\n                if(_from == _uniswapV2Pair){\r\n                    transferReward(_to,_amount);\r\n                }\r\n\r\n                if( _to == _uniswapV2Pair){\r\n                    if(!inSwapAndLiquify && thisBounsSill >= bounsSill){\r\n                        swapTokensForUSDT(getPath(usdtAddress),thisBounsSill,bonusWallet);\r\n                        thisBounsSill = 0;\r\n                    }\r\n                    if(!inSwapAndLiquify && thisLiquiditySill >= liquiditySill) {\r\n                        swapAndLiquify(thisLiquiditySill);\r\n                        thisLiquiditySill = 0;\r\n                    }\r\n                }\r\n            }\r\n            super._transfer(_from,_to,_amount);\r\n            if((_from == _uniswapV2Pair || _to == _uniswapV2Pair) && startBlock == uint256(0)){\r\n                startBlock = block.timestamp;\r\n            }\r\n        }\r\n\r\n        function transferReward(address _account,uint256 _amount) private {\r\n            uint256 _residueReward = maxRewardCount.sub(thisRewardCount);\r\n            if(_residueReward <= uint256(0) || _residueReward < calculateFee(_amount,levelReward[0].add(levelReward[1]))) {\r\n                return;\r\n            }\r\n            address[] memory _parents = getParents(_account);\r\n            for(uint256 i = 0;i < _parents.length;i++){\r\n                if(_parents[i] != address(0) && balanceOf(_parents[i]) > 0){\r\n                    if (getAccountHoldPrice(_parents[i]) > holdPrice){\r\n                        uint256 _addAmount = calculateFee(_amount,levelReward[i]);\r\n                        updateAccountReward(_parents[i],_addAmount);\r\n                        emit TransferReward(_account,_parents[i],_addAmount,block.timestamp);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateAccountReward(address _account,uint256 _addAmount) private{\r\n            AccountReward storage _accountReward = accountRewards[_account];\r\n            _accountReward.canClaim = _accountReward.canClaim.add(_addAmount);\r\n            thisRewardCount = thisRewardCount.add(_addAmount);\r\n        }\r\n        \r\n        function getParents(address _account) private view returns(address[] memory){\r\n            address[] memory _parents = new address[](2);\r\n            _parents[0] = bindInvite[_account];\r\n            _parents[1] = bindInvite[_parents[0]];\r\n            return _parents;\r\n        }\r\n\r\n        function claimTransferReward() external {\r\n            AccountReward storage _reward = accountRewards[_msgSender()];\r\n            uint256 _canClaim = _reward.canClaim;\r\n            require(_canClaim > uint256(0),\"There is nothing to claim\");\r\n            _reward.canClaim = uint256(0);\r\n            _reward.received = _reward.received.add(_canClaim);\r\n            super._transfer(poolAccount,_msgSender(),_canClaim);\r\n            emit ReceiveTransferReward(_msgSender(),_canClaim,block.timestamp);\r\n        }\r\n\r\n        function getValueFees(bool _isBuy,uint256 _amount) private view returns(uint256 _bounsAmount,uint256 _liquidityAmount,uint256 _burnAmount,uint256 _lastAmount){\r\n            uint256 _bounsFee = buyBonusFee;\r\n            uint256 _burnFee = buyBurnFee;\r\n            uint256 _liquidityFee = buyLiquidityFee;\r\n            if(!_isBuy) {\r\n                _bounsFee = sellBonusFee;\r\n                _burnFee = sellBurnFee;\r\n                _liquidityFee = sellLiquidityFee;\r\n            }\r\n            _bounsAmount = calculateFee(_amount,_bounsFee);\r\n            _burnAmount = calculateFee(_amount,_burnFee);\r\n            _liquidityAmount = calculateFee(_amount,_liquidityFee);\r\n            _lastAmount = _amount.sub(_bounsAmount).sub(_liquidityAmount).sub(_burnAmount);\r\n        }\r\n\r\n        function getTokenPrice() public view returns(uint256) {\r\n            uint256[] memory _amountOut = uniswapV2Router.getAmountsOut(1e18,getPath(usdtAddress));\r\n            return _amountOut[1];\r\n        }\r\n\r\n        function getPath(address _token1) private view returns(address[] memory){\r\n            address[] memory _path = new address[](2);\r\n            _path[0] = address(this);\r\n            _path[1] = _token1;\r\n            return _path;\r\n        }\r\n\r\n        function getAccountHoldPrice(address _account) public view returns(uint256) {\r\n            uint256[] memory _amountOut = uniswapV2Router.getAmountsOut(balanceOf(_account),getPath(usdtAddress));\r\n            return _amountOut[1];\r\n        }\r\n        \r\n        function swapAndLiquify(uint256 _amount) private lockTheSwap{\r\n            uint256 _swapToUsdtAmount = _amount.div(2);\r\n            uint256 _otherAmount = _amount.sub(_swapToUsdtAmount);\r\n            address[] memory _path = getPath(usdtAddress);\r\n            swapTokensForUSDT(_path,_swapToUsdtAmount,address(tokenDistributor));\r\n            uint256 _usdtAmount = IERC20(usdtAddress).balanceOf(address(tokenDistributor));\r\n            IERC20(usdtAddress).transferFrom(address(tokenDistributor),address(this),_usdtAmount);\r\n            addLiquidityUseUsdt(_path,_otherAmount,_usdtAmount);\r\n        }\r\n        \r\n        function swapTokensForUSDT(address[] memory _path,uint256 _tokenAmount,address _to) internal { \r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                _tokenAmount,\r\n                0,\r\n                _path,\r\n                _to,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        function addLiquidityUseUsdt(address[] memory _path,uint256 _tokenAmount,uint256 _usdtAmount) private {\r\n            uniswapV2Router.addLiquidity(\r\n                _path[0],\r\n                _path[1],\r\n                _tokenAmount,\r\n                _usdtAmount,\r\n                0,\r\n                0,\r\n                lpWallet,\r\n                block.timestamp\r\n            );\r\n        }\r\n        function calculateFee(uint256 _amount,uint256 _fee) internal pure returns(uint256){\r\n            return _amount.mul(_fee).div(10**2);\r\n        }\r\n\r\n        function setLPWallet(address _account) public onlyOwner {\r\n            lpWallet = _account;\r\n        }\r\n\r\n        function setBonusWallet(address _account) public onlyOwner {\r\n            bonusWallet = _account;\r\n        }\r\n\r\n        function batchExcludeFromFees(address[] calldata _accounts, bool _select) public onlyOwner {\r\n            for (uint i; i < _accounts.length; i++) {\r\n                isExcludedFromFees[_accounts[i]] = _select;\r\n            }\r\n        }\r\n\r\n        function batchBlock(address[] calldata _accounts, bool _select) public onlyOwner {\r\n            for (uint i; i < _accounts.length; i++) {\r\n                isBlockUsers[_accounts[i]] = _select;\r\n            }\r\n        }\r\n\r\n        function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n        \r\n        function setHoldPrice(uint256 _holdPrice) public onlyOwner {\r\n            holdPrice = _holdPrice;\r\n        }\r\n        \r\n        function setBounsSill(uint256 _bounsSill) public onlyOwner {\r\n            bounsSill = _bounsSill;\r\n        }\r\n\r\n        function setLiquiditySill(uint256 _liquiditySill) public onlyOwner {\r\n            liquiditySill = _liquiditySill;\r\n        }\r\n         \r\n        function setMaxRewardCount(uint256 _maxRewardCount) public onlyOwner {\r\n            maxRewardCount = _maxRewardCount;\r\n        }\r\n        \r\n        function setPoolAccount(address _poolAccount) public onlyOwner {\r\n            poolAccount = _poolAccount;\r\n        }\r\n\r\n        function setBuyBounsFee(uint256 _value) public onlyOwner {\r\n            buyBonusFee = _value;\r\n        }\r\n\r\n        function setBuyBurnFee(uint256 _value) public onlyOwner {\r\n            buyBurnFee = _value;\r\n        }\r\n\r\n        function setBuyLiquidityFee(uint256 _value) public onlyOwner {\r\n            buyLiquidityFee = _value;\r\n        }\r\n\r\n        function setSellBounsFee(uint256 _value) public onlyOwner {\r\n            sellBonusFee = _value;\r\n        }\r\n\r\n        function setSellBurnFee(uint256 _value) public onlyOwner {\r\n            sellBurnFee = _value;\r\n        }\r\n\r\n        function setSellLiquidityFee(uint256 _value) public onlyOwner {\r\n            sellLiquidityFee = _value;\r\n        }\r\n\r\n        function setLevelReward(uint256 _index,uint256 _rewardRale) public onlyOwner {\r\n            levelReward[_index] = _rewardRale;\r\n        }\r\n        \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BindInvite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReceiveTransferReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviteAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TransferReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_select\",\"type\":\"bool\"}],\"name\":\"batchBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_select\",\"type\":\"bool\"}],\"name\":\"batchExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldWallet\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bindInvite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounsSill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBonusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTransferReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountHoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlockUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBonusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setBonusWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bounsSill\",\"type\":\"uint256\"}],\"name\":\"setBounsSill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBuyBounsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBuyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBuyLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdPrice\",\"type\":\"uint256\"}],\"name\":\"setHoldPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setLPWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRale\",\"type\":\"uint256\"}],\"name\":\"setLevelReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquiditySill\",\"type\":\"uint256\"}],\"name\":\"setLiquiditySill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRewardCount\",\"type\":\"uint256\"}],\"name\":\"setMaxRewardCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAccount\",\"type\":\"address\"}],\"name\":\"setPoolAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSellBounsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSellLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisBounsSill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisLiquiditySill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"updateBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DESIR", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000a4e1816166c96caa3a565bb9de96bb31d2e3ae1a00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000fd77b6708cbafaf77c1ff8ea8101885c7fead81e000000000000000000000000f38978fb1a34687c028669ef8d3c1293a9e5472b000000000000000000000000fab6eb3f6c32bc1d69933f290a208fc4e4449b23", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://68839f533b164ab2475a2820a1782c9d7ab30f7b47e8d104d13a92bf13a3e2c3"}