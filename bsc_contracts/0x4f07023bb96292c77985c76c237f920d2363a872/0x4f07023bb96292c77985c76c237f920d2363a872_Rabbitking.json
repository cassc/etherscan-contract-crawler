{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract usdtReceiver {\r\n    address private usdt = 0x55d398326f99059fF775485246999027B3197955;//\u6539\u4e3a\u4e3b\u7f51USDT\u5730\u5740\r\n    constructor() {\r\n        IBEP20(usdt).approve(msg.sender,~uint256(0));\r\n    }\r\n}\r\ncontract Rabbitking is Ownable, IBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 internal _totalSupply;\r\n\r\n    uint256 public buyFeeToWallet1 = 3;\r\n    uint256 public buyFeeToWallet2 = 0;\r\n    uint256 public buyFeeToInviter = 0;\r\n    uint256 public buyFeeToLpDifidend = 0;\r\n    uint256 public buyFeeToHolders = 0;\r\n    uint256 public buyFeeToPool = 0;\r\n\r\n    uint256 public sellFeeToWallet1 = 2;\r\n    uint256 public sellFeeToWallet2 = 0;\r\n    uint256 public sellFeeToInviter = 0;\r\n    uint256 public sellFeeToLpDifidend = 5;\r\n    uint256 public sellFeeToHolders = 0;\r\n    uint256 public sellFeeToPool = 0;\r\n\r\n    uint256 public feeToWallet1;\r\n    uint256 public feeToWallet2;\r\n    uint256 public feeToLpDifidend;\r\n    uint256 public feeToHolders;\r\n    uint256 public feeToPool;\r\n\r\n    uint256 public minAmountToSwapForWallet = 10;  //\u5206\u7ed9\u94b1\u5305\u7684\u624b\u7eed\u8d39\u7d2f\u79ef\u5230\u8fd9\u4e2a\u503c\u65f6\uff0c\u5151\u6362\u6210USDT\u8f6c\u5230\u94b1\u5305\uff0c\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba410USDT\r\n    uint256 public minAmountToLpDifidend = 100; //\u540c\u4e0a\uff0c\u7d2f\u79ef\u5230\u9ed8\u8ba4\u4ef7\u503c1000USDT\u7684\u5e01\u91cf\u65f6\uff0c\u7ed9LP\u6301\u6709\u8005\u5206\u7ea2USDT\uff0c\u53ef\u8bbe\u7f6e\r\n    uint256 public minAmountToHolders = 1000; //\u540c\u4e0a\uff0c\u7d2f\u79ef\u5230\u9ed8\u8ba4\u4ef7\u503c1000USDT\u7684\u5e01\u91cf\u65f6\uff0c\u6301\u5e01\u8005\u5206\u7ea2USDT\uff0c\u53ef\u8bbe\u7f6e\r\n    uint256 public minAmountToHoldersDifidend = 100;  //\u6301\u5e01\u5206\u7ea2USDT\u7684\u6700\u4f4e\u6301\u5e01\u6570\u91cf\uff0c\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a100\r\n    uint256 public minAmountToPool = 100;//\u540c\u4e0a\uff0c\u7d2f\u79ef\u5230\u9ed8\u8ba4\u4ef7\u503c100USDT\u7684\u5e01\u91cf\u65f6\uff0c\u6dfb\u52a0\u6d41\u52a8\u6027\uff0c\u53ef\u8bbe\u7f6e\r\n\r\n    bool private isLiquidityAdded;\r\n    address private pancakeRouterAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;  //\u6539\u6210\u4e3b\u7f51\u8def\u7531\u5730\u5740\r\n    address private usdt = 0x55d398326f99059fF775485246999027B3197955;   //\u6539\u6210\u4e3b\u7f51usdt\u5730\u5740\r\n    address public wallet1 = 0x0CCE2435a2775D24a36B414139EbF4eA82D7786D; // \u94b1\u53051\r\n    address public wallet2 = 0x0CCE2435a2775D24a36B414139EbF4eA82D7786D; // \u94b1\u53052\r\n    address public marketing = 0x720Af67a5339e48e2543936b580EB7861AEA976f;  // \u8425\u9500\u5730\u5740\r\n    address private pair;\r\n    address private lastPotentialLPHolder;\r\n    address[] public tokenHolders;\r\n    address[] public lpHolders;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    mapping (address => bool) private _holderIsExist;\r\n    mapping (address => address) public inviter;\r\n    mapping (address => bool) public _isLPHolderExist;\r\n    mapping (address => bool) public isBlackList;\r\n    mapping (address => bool) public exemptFee;\r\n    IPancakeRouter02 private _router;\r\n    usdtReceiver private _usdtReceiver;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    constructor() {\r\n        _name = \"Rabbitking\";\r\n        _symbol = \"Rabbitking\";\r\n        _decimals = 18;\r\n        _totalSupply = 2023 * (1e18); \r\n\t    _balances[msg.sender] = _totalSupply;\r\n        tokenHolders.push(msg.sender);\r\n        _holderIsExist[msg.sender] = true;\r\n        exemptFee[msg.sender] = true;\r\n        exemptFee[marketing] = true;\r\n        exemptFee[address(this)] = true;\r\n        _router = IPancakeRouter02(pancakeRouterAddr);\r\n        pair = IPancakeFactory(_router.factory()).createPair(\r\n            address(usdt),\r\n            address(this)\r\n        );\r\n        _usdtReceiver = new usdtReceiver();\r\n        _approve(address(this), address(pancakeRouterAddr), ~uint256(0));\r\n\t    emit Transfer(address(0), msg.sender, _totalSupply);  \r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override  returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address towner, address spender) public view override returns (uint256) {\r\n        return _allowances[towner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance.sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBlackList[sender], \"blacklist users\");\r\n        if(sender != pair && recipient != pair && _balances[recipient] == 0 && inviter[recipient] == address(0)) {\r\n            inviter[recipient] = sender;\r\n        }\r\n        if(!isLiquidityAdded && recipient == pair) {\r\n            isLiquidityAdded = true;\r\n            lpHolders.push(sender);\r\n            _isLPHolderExist[sender] = true;\r\n        }\r\n        if(!recipient.isContract() && recipient != address(0) && !_holderIsExist[recipient]) {\r\n            tokenHolders.push(recipient);\r\n            _holderIsExist[recipient] = true;\r\n        }\r\n\r\n        uint256 price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToWallet1.mul(price).div(1e18) > minAmountToSwapForWallet*(1e18)) {\r\n            swapUSDTForWallet(wallet1);\r\n        }\r\n        price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToWallet2.mul(price).div(1e18) > minAmountToSwapForWallet*(1e18)) {\r\n            swapUSDTForWallet(wallet2);\r\n        }\r\n        price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToLpDifidend.mul(price).div(1e18) > minAmountToLpDifidend*(1e18)) {\r\n            difidendToLPHolders();\r\n        }\r\n        price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToHolders.mul(price).div(1e18) > minAmountToHolders*(1e18)) {\r\n            difidendToHolders();\r\n        }\r\n        price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToPool.mul(price).div(1e18) > minAmountToPool*(1e18)) {\r\n            swapAndLiquify();\r\n        }\r\n        \r\n        uint256 fixFee;\r\n        uint256 unfixFee;\r\n        if(!exemptFee[sender] && !exemptFee[recipient]) {\r\n            if(sender == pair) { // buy\r\n                if(buyFeeToWallet1 > 0) {\r\n                    uint256 feeWallet1 = amount.div(100).mul(buyFeeToWallet1);\r\n                    fixFee = fixFee.add(feeWallet1);\r\n                    feeToWallet1 = feeToWallet1.add(feeWallet1);\r\n                }\r\n                if(buyFeeToWallet2 > 0) {\r\n                    uint256 feeWallet2 = amount.div(100).mul(buyFeeToWallet2);\r\n                    fixFee = fixFee.add(feeWallet2);\r\n                    feeToWallet2 = feeToWallet2.add(feeWallet2);\r\n                }\r\n                if(fixFee > 0) {\r\n                    _balances[address(this)] = _balances[address(this)].add(fixFee);\r\n                    emit Transfer(sender, address(this), fixFee);\r\n                }\r\n                unfixFee = processFee(sender, recipient, amount, buyFeeToInviter, buyFeeToLpDifidend, buyFeeToHolders, buyFeeToPool);\r\n            } else if(recipient == pair) { // sell or addLiquidity\r\n                if(sellFeeToWallet1 > 0) {\r\n                    uint256 feeWallet1 = amount.div(100).mul(sellFeeToWallet1);\r\n                    fixFee = fixFee.add(feeWallet1);\r\n                    feeToWallet1 = feeToWallet1.add(feeWallet1);\r\n                }\r\n                if(sellFeeToWallet2 > 0) {\r\n                    uint256 feeWallet2 = amount.div(100).mul(sellFeeToWallet2);\r\n                    fixFee = fixFee.add(feeWallet2);\r\n                    feeToWallet2 = feeToWallet2.add(feeWallet2);\r\n                }\r\n                if(fixFee > 0) {\r\n                    _balances[address(this)] = _balances[address(this)].add(fixFee);\r\n                    emit Transfer(sender, address(this), fixFee);\r\n                }\r\n                unfixFee = processFee(sender, recipient, amount, sellFeeToInviter, sellFeeToLpDifidend, sellFeeToHolders, sellFeeToPool);\r\n            }\r\n        }   \r\n        uint256 finalAmount = amount.sub(fixFee).sub(unfixFee);\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        if(lastPotentialLPHolder != address(0) && !_isLPHolderExist[lastPotentialLPHolder]) {\r\n            uint256 lpAmount = IBEP20(pair).balanceOf(lastPotentialLPHolder);\r\n            if(lpAmount > 0) {\r\n                lpHolders.push(lastPotentialLPHolder);\r\n                _isLPHolderExist[lastPotentialLPHolder] = true;\r\n            }\r\n        }\r\n        if(recipient == pair) {\r\n            lastPotentialLPHolder = sender;\r\n        }\r\n\r\n        \r\n        emit Transfer(sender, recipient, finalAmount);\r\n    }\r\n    function tokenPrice() private view returns(uint256){\r\n        uint256 tokenAmount = _balances[pair];\r\n        if(tokenAmount == 0) return 0;\r\n        uint256 USDTAmount = IBEP20(usdt).balanceOf(pair);\r\n        return USDTAmount.mul(1e18).div(tokenAmount);\r\n\r\n    }\r\n    function processFee(address sender,address recipient,uint256 amount,uint256 feeToInviterPencent,uint256 feeToLpDifidendPencent,uint256 feeToHoldersPencent,uint256 feeToPoolPencent) private returns(uint256) {\r\n        uint256 totalFee;\r\n        if(feeToInviterPencent > 0) {\r\n            uint256 feeAmount = amount.mul(feeToInviterPencent).div(100);\r\n            address cur;\r\n            address to;\r\n            if(sender == pair) {\r\n                cur = recipient;\r\n            } else {\r\n                cur = sender;\r\n            }\r\n            if(inviter[cur] != address(0)) {\r\n                to = inviter[cur];\r\n            } else {\r\n                to = marketing;\r\n            }\r\n            _balances[to] = _balances[to].add(feeAmount);\r\n            totalFee = totalFee.add(feeAmount);\r\n            emit Transfer(sender, to, feeAmount);\r\n        }\r\n        if(feeToLpDifidendPencent > 0) {\r\n            uint256 feeAmount = amount.mul(feeToLpDifidendPencent).div(100);\r\n            feeToLpDifidend = feeToLpDifidend.add(feeAmount);\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            totalFee = totalFee.add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        if(feeToHoldersPencent > 0) {\r\n            uint256 feeAmount = amount.mul(feeToHoldersPencent).div(100);\r\n            feeToHolders = feeToHolders.add(feeAmount);\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            totalFee = totalFee.add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        if(feeToPoolPencent > 0) {\r\n            uint256 feeAmount = amount.mul(feeToPoolPencent).div(100);\r\n            feeToPool = feeToPool.add(feeAmount);\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            totalFee = totalFee.add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        return totalFee;\r\n    }\r\n    function swapUSDTForWallet(address wallet) private lock{\r\n        uint256 amount;\r\n        if(wallet == wallet1) {\r\n            amount = feeToWallet1;\r\n        } else {\r\n            amount = feeToWallet2;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            wallet,\r\n            block.timestamp\r\n        );\r\n        if(wallet == wallet1) {\r\n            feeToWallet1 = 0;\r\n        } else {\r\n            feeToWallet2 = 0;\r\n        }\r\n    }\r\n    function swapUSDTForThis(bool flag) private returns (uint256){ //flag\u4e3atrue\u65f6\u5206\u7ea2\u7ed9LP Holders,\u4e3afalse\u65f6\u5206\u7ed9\u6301\u5e01\u4eba\r\n        uint256 amount;\r\n        if(flag) {\r\n            amount = feeToLpDifidend;\r\n        } else {\r\n            amount = feeToHolders;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        uint256 presentBalance = IBEP20(usdt).balanceOf(address(_usdtReceiver));\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(_usdtReceiver),\r\n            block.timestamp\r\n        );\r\n        if(flag) {\r\n            feeToLpDifidend = 0;\r\n        } else {\r\n            feeToHolders = 0;\r\n        }\r\n        uint256 receivedUSDT = (IBEP20(usdt).balanceOf(address(_usdtReceiver))).sub(presentBalance);\r\n        return receivedUSDT;\r\n    }\r\n    function difidendToLPHolders() private lock {\r\n        uint256 totalLPAmount = IBEP20(pair).totalSupply() - 1000;\r\n        uint256 totalReward = swapUSDTForThis(true);\r\n        for(uint256 i = 0; i < lpHolders.length; i++){\r\n            uint256 LPAmount = IBEP20(pair).balanceOf(lpHolders[i]);\r\n            if( LPAmount > 0) {\r\n                uint256 reward = totalReward.mul(LPAmount).div(totalLPAmount);\r\n                if(reward < 0) continue;\r\n                IBEP20(usdt).transferFrom(address(_usdtReceiver),lpHolders[i], reward);\r\n            }\r\n        }\r\n    }\r\n    function difidendToHolders() private lock {\r\n        uint256 totalReward = swapUSDTForThis(false);\r\n        for(uint256 i = 0; i < tokenHolders.length; i++){\r\n            uint256 holdersAmount = _balances[tokenHolders[i]];\r\n            if( holdersAmount > minAmountToHoldersDifidend) {\r\n                uint256 reward = totalReward.mul(holdersAmount).div(_totalSupply);\r\n                if(reward < 0) continue;\r\n                IBEP20(usdt).transferFrom(address(_usdtReceiver),tokenHolders[i], reward);\r\n            }\r\n        }\r\n    }\r\n    function swapAndLiquify() private lock {\r\n        uint256 half = feeToPool.div(2);\r\n        uint256 otherHalf = feeToPool.sub(half);\r\n        uint256 initialBalance = IBEP20(usdt).balanceOf(address(_usdtReceiver));\r\n        swapTokensForLiquidity(half); \r\n        uint256 newBalance = (IBEP20(usdt).balanceOf(address(_usdtReceiver))).sub(initialBalance);\r\n        IBEP20(usdt).transferFrom(address(_usdtReceiver),address(this), newBalance);\r\n        IBEP20(usdt).approve(pancakeRouterAddr,~uint256(0));\r\n        _router.addLiquidity(address(this), usdt, otherHalf, newBalance, 0, 0, marketing, block.timestamp);\r\n        feeToPool = 0;\r\n    }\r\n    function swapTokensForLiquidity(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(_usdtReceiver),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function claimLeftUSDT() external onlyOwner { //\u5982\u679c\u5408\u7ea6\u8eab\u4e0a\u6709\u5269\u4f59\u7684USDT\uff0c\u63d0\u53d6\u5230\u8425\u9500\u5730\u5740\r\n        uint256 left = IBEP20(usdt).balanceOf(address(_usdtReceiver));\r\n        IBEP20(usdt).transferFrom(address(_usdtReceiver), marketing, left);\r\n    }\r\n    function setMinAmountToSwapForWallet(uint256 value) external onlyOwner() { \r\n        //\u5206\u7ed9\u94b1\u5305\u7684\u624b\u7eed\u8d39\u7d2f\u79ef\u5230\u8fd9\u4e2a\u503c\u65f6\uff0c\u5151\u6362\u6210USDT\u8f6c\u5230\u94b1\u5305\uff0c\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba410USDT,\u5355\u4f4d\u4e3aUSDT,\u4e0d\u898118\u4e2a0\uff0c\u4f8b\u5982\u8bbe\u7f6e20USDT\u624d\u5206\uff0c\u5219value\u4f20\u516520\uff0c\u4e0b\u9762\u7684\u7c7b\u4f3c\r\n        minAmountToSwapForWallet = value;\r\n    }\r\n    function setMinAmountToLpDifidend(uint256 value) external onlyOwner() { \r\n        minAmountToLpDifidend = value;\r\n    }\r\n    function setMinAmountToHolders(uint256 value) external onlyOwner() { \r\n        minAmountToHolders = value;\r\n    }\r\n    function setMinAmountToHoldersDifidend(uint256 value) external onlyOwner() { \r\n        minAmountToHoldersDifidend = value;\r\n    }\r\n    function setMinAmountToPool(uint256 value) external onlyOwner() { \r\n        minAmountToPool = value;\r\n    }\r\n    function setBuyFeeToInviter(uint256 value) external onlyOwner() { \r\n        buyFeeToInviter = value;\r\n    }\r\n    function setBuyFeeToLpDifidend(uint256 value) external onlyOwner() { \r\n        buyFeeToLpDifidend = value;\r\n    }\r\n    function setBuyFeeToHolders(uint256 value) external onlyOwner() { \r\n        buyFeeToHolders = value;\r\n    }\r\n    function setBuyFeeToPool(uint256 value) external onlyOwner() { \r\n        buyFeeToPool = value;\r\n    }\r\n    function setSellFeeToInviter(uint256 value) external onlyOwner() { \r\n        sellFeeToInviter = value;\r\n    }\r\n    function setSellFeeToLpDifidend(uint256 value) external onlyOwner() { \r\n        sellFeeToLpDifidend = value;\r\n    }\r\n    function setSellFeeToHolders(uint256 value) external onlyOwner() { \r\n        sellFeeToHolders = value;\r\n    }\r\n    function setSellFeeToPool(uint256 value) external onlyOwner() { \r\n        sellFeeToPool = value;\r\n    }\r\n    function addBlackList(address account, bool flag) external onlyOwner() { //\u52a0\u5165\u9ed1\u540d\u5355\r\n        isBlackList[account] = flag;\r\n    }\r\n    function setExemptFee(address account, bool flag) external onlyOwner() { //\u8bbe\u7f6e\u514d\u624b\u7eed\u8d39\r\n        exemptFee[account] = flag;\r\n    }\r\n    function setNewWallet1(address account) external onlyOwner() { //\u8bbe\u7f6e\u94b1\u53051\u7684\u65b0\u5730\u5740\r\n        wallet1 = account;\r\n    }\r\n    function setNewWallet2(address account) external onlyOwner() { //\u8bbe\u7f6e\u94b1\u53052\u7684\u65b0\u5730\u5740\r\n        wallet2 = account;\r\n    }\r\n    function setBuyFeeToWallet1(uint256 value) external onlyOwner() { //\u8bbe\u7f6e\u5230\u94b1\u53051\u7684\u4e70\u5165\u624b\u7eed\u8d39\r\n        buyFeeToWallet1 = value;\r\n    }\r\n    function setBuyFeeToWallet2(uint256 value) external onlyOwner() { //\u8bbe\u7f6e\u5230\u94b1\u53052\u7684\u4e70\u5165\u624b\u7eed\u8d39\r\n        buyFeeToWallet2 = value;\r\n    }\r\n    function setSellFeeToWallet1(uint256 value) external onlyOwner() { //\u8bbe\u7f6e\u5230\u94b1\u53051\u7684\u5356\u51fa\u624b\u7eed\u8d39\r\n        sellFeeToWallet1 = value;\r\n    }\r\n    function setSellFeeToWallet2(uint256 value) external onlyOwner() { //\u8bbe\u7f6e\u5230\u94b1\u53052\u7684\u5356\u51fa\u624b\u7eed\u8d39\r\n        sellFeeToWallet2 = value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLPHolderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"towner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToInviter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLeftUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToHoldersDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToSwapForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToInviter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToHoldersDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToSwapForWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setNewWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setNewWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Rabbitking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1f3c3e6cd02827682957c731aa2cb5b45715e0753422c83ea82a9717a3ebeea"}