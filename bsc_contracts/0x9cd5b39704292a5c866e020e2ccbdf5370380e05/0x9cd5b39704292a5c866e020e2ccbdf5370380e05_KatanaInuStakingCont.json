{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/KatanaInuStakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @notice\\n * A stake struct is used to represent the way we store stakes,\\n * A Stake will contain the users address, the duration (0 for imediate withdrawal or 1 / 2 / 3 years), the amount staked and a timestamp,\\n * Since which is when the stake was made\\n * _stakeCheckPointIndex: The index in the checkpoints array of the current stake\\n */\\nstruct Stake {\\n    uint256 _amount;\\n    uint256 _since;\\n    IERC20 _stakingToken;\\n    uint256 _stakaAmount;\\n    uint256 _estimatedReward;\\n    APY _estimatedAPY;\\n    uint256 _rewardStartDate; //This date will change as the amount staked increases\\n    bool _exists;\\n}\\n\\n/***@notice Struct to store Staking Contract Parameters */\\nstruct StakingContractParameters {\\n    uint256 _minimumStake;\\n    uint256 _maxSupply;\\n    uint256 _totalReward;\\n    IERC20 _stakingToken;\\n    uint256 _stakingDuration;\\n    uint256 _maximumStake;\\n    //staking starting parameters\\n    uint256 _minimumNumberStakeHoldersBeforeStart;\\n    uint256 _minimumTotalStakeBeforeStart;\\n    uint256 _startDate;\\n    uint256 _endDate;\\n    //vesting parameters\\n    Percentage _immediateRewardPercentage;\\n    uint256 _cliffDuration;\\n    Percentage _cliffRewardPercentage;\\n    uint256 _linearDuration;\\n}\\n\\nstruct Percentage {\\n    uint256 _percentage;\\n    uint256 _percentageBase;\\n}\\n\\nstruct StakingContractParametersUpdate {\\n    uint256 _minimumStake;\\n    uint256 _maxSupply;\\n    uint256 _totalReward;\\n    IERC20 _stakingToken;\\n    uint256 _stakingDuration;\\n    uint256 _maximumStake;\\n    uint256 _minimumNumberStakeHoldersBeforeStart;\\n    uint256 _minimumTotalStakeBeforeStart;\\n    Percentage _immediateRewardPercentage;\\n    uint256 _cliffDuration;\\n    Percentage _cliffRewardPercentage;\\n    uint256 _linearDuration;\\n}\\n\\nstruct APY {\\n    uint256 _apy;\\n    uint256 _base;\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n */\\ncontract KatanaInuStakingContract is\\n    ERC20(\\\"STAKA Token\\\", \\\"STAKA\\\"),\\n    Ownable,\\n    Pausable\\n{\\n    using SafeMath for uint256;\\n\\n    ///////////// Events ///////////////////\\n    /**\\n     * @dev Emitted when a user stakes tokens\\n     */\\n    event Staked(\\n        address indexed stakeholder,\\n        uint256 amountStaked,\\n        IERC20 stakingToken,\\n        uint256 xKataAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when a user withdraw stake\\n     */\\n    event Withdrawn(\\n        address indexed stakeholder,\\n        uint256 amountStaked,\\n        uint256 amountReceived,\\n        IERC20 stakingToken\\n    );\\n\\n    /**\\n     * @dev Emitted when a user withdraw stake\\n     */\\n    event EmergencyWithdraw(\\n        address indexed stakeholder,\\n        uint256 amountSKataBurned,\\n        uint256 amountReceived\\n    );\\n\\n    ///////////////////////////////////////\\n\\n    ///// Fields //////////\\n    /*** @notice Stakes by stakeholder address */\\n    mapping(address => Stake) public _stakeholdersMapping;\\n    uint256 _currentNumberOfStakeholders;\\n\\n    /*** @notice Staking contract parameters */\\n    StakingContractParameters private _stakingParameters;\\n\\n    /***@notice Total Kata Staked */\\n    uint256 private _totalKataStaked;\\n\\n    /***@notice Total Kata rewards claimed */\\n    uint256 private _totalKataRewardsClaimed;\\n\\n    bool private _stakingStarted;\\n\\n    ////////////////////////////////////////\\n\\n    constructor(address stakingTokenAddress) {\\n        _stakingParameters._stakingToken = IERC20(stakingTokenAddress);\\n        _stakingParameters._minimumNumberStakeHoldersBeforeStart = 1;\\n    }\\n\\n    /***@notice Update Staking Parameters: _startDate can't be updated, it is automatically set when the first stake is created */\\n    function updateStakingParameters(\\n        StakingContractParametersUpdate calldata stakingParameters\\n    ) external onlyOwner {\\n        _stakingParameters._minimumStake = stakingParameters._minimumStake;\\n        _stakingParameters._maxSupply = stakingParameters._maxSupply;\\n        _stakingParameters._totalReward = stakingParameters._totalReward;\\n        _stakingParameters._stakingToken = IERC20(\\n            stakingParameters._stakingToken\\n        );\\n        _stakingParameters._stakingDuration = stakingParameters\\n            ._stakingDuration;\\n        if (_stakingStarted) {\\n            _stakingParameters._endDate =\\n                _stakingParameters._startDate +\\n                _stakingParameters._stakingDuration;\\n        }\\n        if (!_stakingStarted) {\\n            // No need to update these paraeter if the staking has already started\\n            _stakingParameters\\n                ._minimumNumberStakeHoldersBeforeStart = stakingParameters\\n                ._minimumNumberStakeHoldersBeforeStart;\\n            _stakingParameters._minimumTotalStakeBeforeStart = stakingParameters\\n                ._minimumTotalStakeBeforeStart;\\n            if (\\n                (_stakingParameters._minimumTotalStakeBeforeStart == 0 ||\\n                    _totalKataStaked >=\\n                    _stakingParameters._minimumTotalStakeBeforeStart) &&\\n                (_stakingParameters._minimumNumberStakeHoldersBeforeStart ==\\n                    0 ||\\n                    _currentNumberOfStakeholders >=\\n                    _stakingParameters._minimumNumberStakeHoldersBeforeStart)\\n            ) {\\n                _stakingStarted = true;\\n                _stakingParameters._startDate = block.timestamp;\\n                _stakingParameters._endDate =\\n                    _stakingParameters._startDate +\\n                    _stakingParameters._stakingDuration;\\n            }\\n        }\\n        _stakingParameters._maximumStake = stakingParameters._maximumStake;\\n\\n        //Update reward schedule array\\n        _stakingParameters._immediateRewardPercentage = stakingParameters\\n            ._immediateRewardPercentage;\\n        _stakingParameters._cliffDuration = stakingParameters._cliffDuration;\\n        _stakingParameters._cliffRewardPercentage = stakingParameters\\n            ._cliffRewardPercentage;\\n        _stakingParameters._linearDuration = stakingParameters._linearDuration;\\n    }\\n\\n    /***@notice Stake Kata coins in exchange for xKata coins to earn a share of the rewards */\\n    function stake(uint256 amount) external onlyUser whenNotPaused {\\n        //Check the amount is >= _minimumStake\\n        require(\\n            amount >= _stakingParameters._minimumStake,\\n            \\\"Amount below the minimum stake\\\"\\n        );\\n        //Check the amount is <= _maximumStake\\n        require(\\n            _stakingParameters._maximumStake == 0 ||\\n                amount <= _stakingParameters._maximumStake,\\n            \\\"amount exceeds maximum stake\\\"\\n        );\\n        //Check if the new stake will exceed the maximum supply for this pool\\n        require(\\n            (_totalKataStaked + amount) <= _stakingParameters._maxSupply,\\n            \\\"You can not exceeed maximum supply for staking\\\"\\n        );\\n\\n        require(\\n            !_stakingStarted || block.timestamp < _stakingParameters._endDate,\\n            \\\"The staking period has ended\\\"\\n        );\\n        //Check if the totalReward have been already claimed, in theory this should always be true,\\n        //but added the extra check for additional safety\\n        require(\\n            _totalKataRewardsClaimed < _stakingParameters._totalReward,\\n            \\\"All rewards have been distributed\\\"\\n        );\\n\\n        Stake memory newStake = createStake(amount);\\n        _totalKataStaked += amount;\\n        if (!_stakeholdersMapping[msg.sender]._exists) {\\n            _currentNumberOfStakeholders += 1;\\n        }\\n        //Check if the staking period did not end\\n        if (\\n            !_stakingStarted &&\\n            (_stakingParameters._minimumTotalStakeBeforeStart == 0 ||\\n                _totalKataStaked >=\\n                _stakingParameters._minimumTotalStakeBeforeStart) &&\\n            (_stakingParameters._minimumNumberStakeHoldersBeforeStart == 0 ||\\n                _currentNumberOfStakeholders >=\\n                _stakingParameters._minimumNumberStakeHoldersBeforeStart)\\n        ) {\\n            _stakingStarted = true;\\n            _stakingParameters._startDate = block.timestamp;\\n            _stakingParameters._endDate =\\n                _stakingParameters._startDate +\\n                _stakingParameters._stakingDuration;\\n        }\\n        //Transfer amount to contract (this)\\n        if (\\n            !_stakingParameters._stakingToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            )\\n        ) {\\n            revert(\\\"couldn 't transfer tokens from sender to contract\\\");\\n        }\\n\\n        _mint(msg.sender, newStake._stakaAmount);\\n\\n        //Update stakeholders\\n\\n        if (!_stakeholdersMapping[msg.sender]._exists) {\\n            _stakeholdersMapping[msg.sender] = newStake;\\n            _stakeholdersMapping[msg.sender]._exists = true;\\n        } else {\\n            _stakeholdersMapping[msg.sender]\\n                ._rewardStartDate = calculateNewRewardStartDate(\\n                _stakeholdersMapping[msg.sender],\\n                newStake\\n            );\\n            _stakeholdersMapping[msg.sender]._amount += newStake._amount;\\n            _stakeholdersMapping[msg.sender]._stakaAmount += newStake\\n                ._stakaAmount;\\n        }\\n        //Emit event\\n        emit Staked(\\n            msg.sender,\\n            amount,\\n            _stakingParameters._stakingToken,\\n            newStake._stakaAmount\\n        );\\n    }\\n\\n    function calculateNewRewardStartDate(\\n        Stake memory existingStake,\\n        Stake memory newStake\\n    ) private pure returns (uint256) {\\n        uint256 multiplier = (\\n            existingStake._rewardStartDate.mul(existingStake._stakaAmount)\\n        ).add(newStake._rewardStartDate.mul(newStake._stakaAmount));\\n        uint256 divider = existingStake._stakaAmount.add(newStake._stakaAmount);\\n        return multiplier.div(divider);\\n    }\\n\\n    /*** @notice Withdraw stake and get initial amount staked + share of the reward */\\n    function withdrawStake(uint256 amount) external onlyUser whenNotPaused {\\n        require(\\n            _stakeholdersMapping[msg.sender]._exists,\\n            \\\"Can not find stake for sender\\\"\\n        );\\n        require(\\n            _stakeholdersMapping[msg.sender]._amount >= amount,\\n            \\\"Can not withdraw more than actual stake\\\"\\n        );\\n        Stake memory stakeToWithdraw = _stakeholdersMapping[msg.sender];\\n        require(stakeToWithdraw._amount > 0, \\\"Stake alreday withdrawn\\\");\\n        //Reward proportional to amount withdrawn\\n        uint256 reward = (\\n            computeRewardForStake(block.timestamp, stakeToWithdraw, true).mul(\\n                amount\\n            )\\n        ).div(stakeToWithdraw._amount);\\n        //Check if there is enough reward tokens, this is to avoid paying rewards with other stakeholders stake\\n        uint256 currentRewardBalance = getRewardBalance();\\n        require(\\n            reward <= currentRewardBalance,\\n            \\\"The contract does not have enough reward tokens\\\"\\n        );\\n        uint256 totalAmoutToWithdraw = reward + amount;\\n        //Calculate nb STAKA to burn:\\n        uint256 nbStakaToBurn = (stakeToWithdraw._stakaAmount.mul(amount)).div(\\n            stakeToWithdraw._amount\\n        );\\n\\n        _stakeholdersMapping[msg.sender]._amount -= amount;\\n        _stakeholdersMapping[msg.sender]._stakaAmount -= nbStakaToBurn;\\n\\n        _totalKataStaked = _totalKataStaked - amount;\\n        _totalKataRewardsClaimed += reward;\\n        //Transfer amount to contract (this)\\n        if (\\n            !stakeToWithdraw._stakingToken.transfer(\\n                msg.sender,\\n                totalAmoutToWithdraw\\n            )\\n        ) {\\n            revert(\\\"couldn 't transfer tokens from sender to contract\\\");\\n        }\\n        _burn(msg.sender, nbStakaToBurn);\\n        emit Withdrawn(\\n            msg.sender,\\n            stakeToWithdraw._amount,\\n            totalAmoutToWithdraw,\\n            stakeToWithdraw._stakingToken\\n        );\\n    }\\n\\n    /***@notice withdraw all stakes of a given user without including rewards */\\n    function emergencyWithdraw(address stakeHolderAddress) external onlyOwner {\\n        require(\\n            _stakeholdersMapping[stakeHolderAddress]._exists,\\n            \\\"Can not find stake for sender\\\"\\n        );\\n        require(\\n            _stakeholdersMapping[stakeHolderAddress]._amount > 0,\\n            \\\"Can not any stake for supplied address\\\"\\n        );\\n\\n        uint256 totalAmoutTowithdraw;\\n        uint256 totalSKataToBurn;\\n        totalAmoutTowithdraw = _stakeholdersMapping[stakeHolderAddress]._amount;\\n        totalSKataToBurn = _stakeholdersMapping[stakeHolderAddress]\\n            ._stakaAmount;\\n        if (\\n            !_stakeholdersMapping[stakeHolderAddress]._stakingToken.transfer(\\n                stakeHolderAddress,\\n                _stakeholdersMapping[stakeHolderAddress]._amount\\n            )\\n        ) {\\n            revert(\\\"couldn 't transfer tokens from sender to contract\\\");\\n        }\\n        _stakeholdersMapping[stakeHolderAddress]._amount = 0;\\n        _stakeholdersMapping[stakeHolderAddress]._exists = false;\\n        _stakeholdersMapping[stakeHolderAddress]._stakaAmount = 0;\\n\\n        _totalKataStaked = _totalKataStaked - totalAmoutTowithdraw;\\n        _burn(stakeHolderAddress, totalSKataToBurn);\\n        emit EmergencyWithdraw(\\n            stakeHolderAddress,\\n            totalSKataToBurn,\\n            totalAmoutTowithdraw\\n        );\\n    }\\n\\n    /***@notice Get an estimate of the reward  */\\n    function getStakeReward(uint256 targetTime)\\n        external\\n        view\\n        onlyUser\\n        returns (uint256)\\n    {\\n        require(\\n            _stakeholdersMapping[msg.sender]._exists,\\n            \\\"Can not find stake for sender\\\"\\n        );\\n        Stake memory targetStake = _stakeholdersMapping[msg.sender];\\n        return computeRewardForStake(targetTime, targetStake, true);\\n    }\\n\\n    /***@notice Get an estimate of the reward  */\\n    function getEstimationOfReward(uint256 targetTime, uint256 amountToStake)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        Stake memory targetStake = createStake(amountToStake);\\n        return computeRewardForStake(targetTime, targetStake, false);\\n    }\\n\\n    function getAPY() external view returns (APY memory) {\\n        if (\\n            !_stakingStarted ||\\n            _stakingParameters._endDate == _stakingParameters._startDate ||\\n            _totalKataStaked == 0\\n        ) return APY(0, 1);\\n\\n        uint256 targetTime = 365 days;\\n        if (\\n            _stakingParameters._immediateRewardPercentage._percentage == 0 &&\\n            _stakingParameters._cliffRewardPercentage._percentage == 0 &&\\n            _stakingParameters._cliffDuration == 0 &&\\n            _stakingParameters._linearDuration == 0\\n        ) {\\n            uint256 reward = _stakingParameters\\n                ._totalReward\\n                .mul(targetTime)\\n                .div(\\n                    _stakingParameters._endDate.sub(\\n                        _stakingParameters._startDate\\n                    )\\n                );\\n            return APY(reward.mul(100000).div(_totalKataStaked), 100000);\\n        }\\n        return getAPYWithVesting();\\n    }\\n\\n    function getAPYWithVesting() private view returns (APY memory) {\\n        uint256 targetTime = 365 days;\\n        Stake memory syntheticStake = Stake(\\n            _totalKataStaked,\\n            block.timestamp,\\n            _stakingParameters._stakingToken,\\n            totalSupply(),\\n            0,\\n            APY(0, 1),\\n            block.timestamp,\\n            true\\n        );\\n        uint256 reward = computeRewardForStakeWithVesting(\\n            block.timestamp + targetTime,\\n            syntheticStake,\\n            true\\n        );\\n        return APY(reward.mul(100000).div(_totalKataStaked), 100000);\\n    }\\n\\n    /***@notice Create a new stake by taking into account accrued rewards when estimating the number of xKata tokens in exchange for Kata tokens */\\n    function createStake(uint256 amount) private view returns (Stake memory) {\\n        uint256 xKataAmountToMint;\\n        uint256 currentTimeStanp = block.timestamp;\\n        if (_totalKataStaked == 0 || totalSupply() == 0) {\\n            xKataAmountToMint = amount;\\n        } else {\\n            //Add multiplication by 1 + time to maturity ratio\\n            uint256 multiplier = amount\\n                .mul(\\n                    _stakingParameters._endDate.sub(\\n                        _stakingParameters._startDate\\n                    )\\n                )\\n                .div(\\n                    _stakingParameters._endDate.add(currentTimeStanp).sub(\\n                        2 * _stakingParameters._startDate\\n                    )\\n                );\\n            xKataAmountToMint = multiplier.mul(totalSupply()).div(\\n                _totalKataStaked\\n            );\\n        }\\n        return\\n            Stake(\\n                amount,\\n                currentTimeStanp,\\n                _stakingParameters._stakingToken,\\n                xKataAmountToMint,\\n                0,\\n                APY(0, 1),\\n                currentTimeStanp,\\n                true\\n            );\\n    }\\n\\n    /*** Stats functions */\\n\\n    /***@notice returns the amount of Kata tokens available for rewards */\\n    function getRewardBalance() public view returns (uint256) {\\n        uint256 stakingTokenBalance = _stakingParameters\\n            ._stakingToken\\n            .balanceOf(address(this));\\n        uint256 rewardBalance = stakingTokenBalance.sub(_totalKataStaked);\\n        return rewardBalance;\\n    }\\n\\n    /***@notice returns the amount of Kata tokens withdrawn as rewards */\\n    function getTotalRewardsClaimed() public view returns (uint256) {\\n        return _totalKataRewardsClaimed;\\n    }\\n\\n    function getRequiredRewardAmountForPerdiod(uint256 endPeriod)\\n        external\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return caluclateRequiredRewardAmountForPerdiod(endPeriod);\\n    }\\n\\n    function getRequiredRewardAmount() external view returns (uint256) {\\n        return caluclateRequiredRewardAmountForPerdiod(block.timestamp);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////\\n\\n    function caluclateRequiredRewardAmountForPerdiod(uint256 endPeriod)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        if (\\n            !_stakingStarted ||\\n            _stakingParameters._endDate == _stakingParameters._startDate ||\\n            _totalKataStaked == 0\\n        ) return 0;\\n        uint256 requiredReward = _stakingParameters\\n            ._totalReward\\n            .mul(endPeriod.sub(_stakingParameters._startDate))\\n            .div(_stakingParameters._endDate.sub(_stakingParameters._startDate))\\n            .sub(_totalKataRewardsClaimed);\\n        return requiredReward;\\n    }\\n\\n    /***@notice Calculate the reward for a give stake if withdrawn at 'targetTime' */\\n    function computeRewardForStake(\\n        uint256 targetTime,\\n        Stake memory targetStake,\\n        bool existingStake\\n    ) private view returns (uint256) {\\n        if (\\n            _stakingParameters._immediateRewardPercentage._percentage == 0 &&\\n            _stakingParameters._cliffRewardPercentage._percentage == 0 &&\\n            _stakingParameters._cliffDuration == 0 &&\\n            _stakingParameters._linearDuration == 0\\n        ) {\\n            return\\n                computeReward(\\n                    _stakingParameters._totalReward,\\n                    targetTime,\\n                    targetStake._stakaAmount,\\n                    targetStake._rewardStartDate,\\n                    existingStake\\n                );\\n        }\\n        return\\n            computeRewardForStakeWithVesting(\\n                targetTime,\\n                targetStake,\\n                existingStake\\n            );\\n    }\\n\\n    function computeRewardForStakeWithVesting(\\n        uint256 targetTime,\\n        Stake memory targetStake,\\n        bool existingStake\\n    ) private view returns (uint256) {\\n        uint256 accumulatedReward;\\n        uint256 currentStartTime = targetStake._rewardStartDate;\\n        uint256 currentTotalRewardAmount = (\\n            _stakingParameters._totalReward.mul(\\n                _stakingParameters._immediateRewardPercentage._percentage\\n            )\\n        ).div(_stakingParameters._immediateRewardPercentage._percentageBase);\\n\\n        if (\\n            (currentStartTime + _stakingParameters._cliffDuration) >= targetTime\\n        ) {\\n            return\\n                computeReward(\\n                    currentTotalRewardAmount,\\n                    targetTime,\\n                    targetStake._stakaAmount,\\n                    currentStartTime,\\n                    existingStake\\n                );\\n        }\\n\\n        accumulatedReward += computeReward(\\n            currentTotalRewardAmount,\\n            currentStartTime + _stakingParameters._cliffDuration,\\n            targetStake._stakaAmount,\\n            currentStartTime,\\n            existingStake\\n        );\\n\\n        currentStartTime = currentStartTime + _stakingParameters._cliffDuration;\\n        currentTotalRewardAmount += (\\n            _stakingParameters._totalReward.mul(\\n                _stakingParameters._cliffRewardPercentage._percentage\\n            )\\n        ).div(_stakingParameters._cliffRewardPercentage._percentageBase);\\n\\n        if (\\n            _stakingParameters._linearDuration == 0 ||\\n            (currentStartTime + _stakingParameters._linearDuration) <=\\n            targetTime\\n        ) {\\n            // 100% percent of the reward vested\\n            currentTotalRewardAmount = _stakingParameters._totalReward;\\n\\n            return (\\n                accumulatedReward.add(\\n                    computeReward(\\n                        currentTotalRewardAmount,\\n                        targetTime,\\n                        targetStake._stakaAmount,\\n                        currentStartTime,\\n                        existingStake\\n                    )\\n                )\\n            );\\n        }\\n        // immediate + cliff + linear proportion of the reward\\n        currentTotalRewardAmount += (\\n            _stakingParameters._totalReward.sub(currentTotalRewardAmount)\\n        ).mul(targetTime - currentStartTime).div(\\n                _stakingParameters._linearDuration\\n            );\\n        accumulatedReward += computeReward(\\n            currentTotalRewardAmount,\\n            targetTime,\\n            targetStake._stakaAmount,\\n            currentStartTime,\\n            existingStake\\n        );\\n        return accumulatedReward;\\n    }\\n\\n    /***@notice Calculate the reward for a give stake if withdrawn at 'targetTime' */\\n    function computeReward(\\n        uint256 applicableReward,\\n        uint256 targetTime,\\n        uint256 stakaAmount,\\n        uint256 rewardStartDate,\\n        bool existingStake\\n    ) private view returns (uint256) {\\n        uint256 mulltiplier = stakaAmount\\n            .mul(applicableReward)\\n            .mul(targetTime.sub(rewardStartDate))\\n            .div(\\n                _stakingParameters._endDate.sub(_stakingParameters._startDate)\\n            );\\n\\n        uint256 divider = existingStake\\n            ? totalSupply()\\n            : totalSupply().add(stakaAmount);\\n        return mulltiplier.div(divider);\\n    }\\n\\n    /**\\n     * @notice\\n     * Update Staking Token\\n     */\\n    function setStakingToken(address stakingTokenAddress) external onlyOwner {\\n        _stakingParameters._stakingToken = IERC20(stakingTokenAddress);\\n    }\\n\\n    /*** @notice Withdraw reward */\\n    function withdrawFromReward(uint256 amount) external onlyOwner {\\n        //Check if there is enough reward tokens, this is to avoid paying rewards with other stakeholders stake\\n        require(\\n            amount <= getRewardBalance(),\\n            \\\"The contract does not have enough reward tokens\\\"\\n        );\\n        //Transfer amount to contract (this)\\n        if (!_stakingParameters._stakingToken.transfer(msg.sender, amount)) {\\n            revert(\\\"couldn 't transfer tokens from sender to contract\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * Return the total amount staked\\n     */\\n    function getTotalStaked() external view returns (uint256) {\\n        return _totalKataStaked;\\n    }\\n\\n    /**\\n     * @notice\\n     * Return the value of the penalty for early exit\\n     */\\n    function getContractParameters()\\n        external\\n        view\\n        returns (StakingContractParameters memory)\\n    {\\n        return _stakingParameters;\\n    }\\n\\n    /**\\n     * @notice\\n     * Return stakes for msg.sender\\n     */\\n    function getStake() external view returns (Stake memory) {\\n        Stake memory currentStake = _stakeholdersMapping[msg.sender];\\n        if (!currentStake._exists) {\\n            // Return empty stake\\n            return\\n                Stake(\\n                    0,\\n                    0,\\n                    _stakingParameters._stakingToken,\\n                    0,\\n                    0,\\n                    APY(0, 1),\\n                    0,\\n                    false\\n                );\\n        }\\n        if (_stakingStarted) {\\n            currentStake._estimatedReward = computeRewardForStake(\\n                block.timestamp,\\n                currentStake,\\n                true\\n            );\\n            currentStake._estimatedAPY = APY(\\n                computeRewardForStake(\\n                    currentStake._rewardStartDate + 365 days,\\n                    currentStake,\\n                    true\\n                ).mul(100000).div(currentStake._amount),\\n                100000\\n            );\\n        }\\n        return currentStake;\\n    }\\n\\n    function shouldStartContract(\\n        uint256 newTotalKataStaked,\\n        uint256 newCurrentNumberOfStakeHolders\\n    ) private view returns (bool) {\\n        if (\\n            _stakingParameters._minimumTotalStakeBeforeStart > 0 &&\\n            newTotalKataStaked <\\n            _stakingParameters._minimumTotalStakeBeforeStart\\n        ) {\\n            return false;\\n        }\\n        if (\\n            _stakingParameters._minimumNumberStakeHoldersBeforeStart > 0 &&\\n            newCurrentNumberOfStakeHolders <\\n            _stakingParameters._minimumNumberStakeHoldersBeforeStart\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        if (from == address(0))\\n            //Nothing to do when _mint is called\\n            return;\\n        if (to == address(0))\\n            //Nothing to do when _burn is called\\n            return;\\n\\n        Stake memory fromStake = _stakeholdersMapping[from];\\n        uint256 amountOfKataToTransfer = (\\n            _stakeholdersMapping[from]._amount.mul(amount)\\n        ).div(_stakeholdersMapping[from]._stakaAmount);\\n\\n        fromStake._exists = true;\\n        fromStake._stakaAmount = amount;\\n        fromStake._amount = amountOfKataToTransfer;\\n        if (!_stakeholdersMapping[to]._exists) {\\n            _stakeholdersMapping[to] = fromStake;\\n            _stakeholdersMapping[from]._stakaAmount -= amount;\\n            _stakeholdersMapping[from]._amount -= amountOfKataToTransfer;\\n        } else {\\n            _stakeholdersMapping[to]\\n                ._rewardStartDate = calculateNewRewardStartDate(\\n                _stakeholdersMapping[to],\\n                fromStake\\n            );\\n            _stakeholdersMapping[to]._stakaAmount += amount;\\n            _stakeholdersMapping[to]._amount += amountOfKataToTransfer;\\n            _stakeholdersMapping[from]._stakaAmount -= amount;\\n            _stakeholdersMapping[from]._amount -= amountOfKataToTransfer;\\n        }\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * onlyUser\\n     * @dev guard contracts from calling method\\n     **/\\n    modifier onlyUser() {\\n        require(msg.sender == tx.origin);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Ownable\\n * @dev Ownable has an owner address to simplify \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address payable public owner;\\n\\n  /**\\n   * Ownable\\n   * @dev Ownable constructor sets the `owner` of the contract to sender\\n   */\\n  constructor() {  owner = payable(msg.sender);  }\\n\\n  /**\\n   * ownerOnly\\n   * @dev Throws an error if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * transferOwnership\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address payable newOwner) public onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSKataBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xKataAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakeholdersMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_since\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedReward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"internalType\":\"struct APY\",\"name\":\"_estimatedAPY\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolderAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"internalType\":\"struct APY\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumNumberStakeHoldersBeforeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTotalStakeBeforeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBase\",\"type\":\"uint256\"}],\"internalType\":\"struct Percentage\",\"name\":\"_immediateRewardPercentage\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBase\",\"type\":\"uint256\"}],\"internalType\":\"struct Percentage\",\"name\":\"_cliffRewardPercentage\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_linearDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingContractParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"getEstimationOfReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endPeriod\",\"type\":\"uint256\"}],\"name\":\"getRequiredRewardAmountForPerdiod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_since\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedReward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"internalType\":\"struct APY\",\"name\":\"_estimatedAPY\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetTime\",\"type\":\"uint256\"}],\"name\":\"getStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumNumberStakeHoldersBeforeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTotalStakeBeforeStart\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBase\",\"type\":\"uint256\"}],\"internalType\":\"struct Percentage\",\"name\":\"_immediateRewardPercentage\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBase\",\"type\":\"uint256\"}],\"internalType\":\"struct Percentage\",\"name\":\"_cliffRewardPercentage\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_linearDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingContractParametersUpdate\",\"name\":\"stakingParameters\",\"type\":\"tuple\"}],\"name\":\"updateStakingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KatanaInuStakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006d6ba21e4c4b29ca7bfa1c344ba1e35b8dae7205", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}