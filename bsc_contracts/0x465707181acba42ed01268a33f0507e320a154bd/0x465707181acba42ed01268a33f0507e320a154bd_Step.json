{"SourceCode": "// File: contracts/IDEX.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IDexFactory {\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n\r\n  function swapExactTokensForETH(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\nabstract contract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  constructor(address newOwner) {\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(address(0), newOwner);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  function owner() internal view returns (address) {\r\n    return _owner;\r\n  }\r\n}\r\n\r\n// File: contracts/IBEP20.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/BEP20.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\ncontract BEP20 is IBEP20, Ownable {\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  string private constant NAME = \"Step\";\r\n  string private constant SYMBOL = \"STEP\";\r\n  uint8 private constant DECIMALS = 18;\r\n  uint256 private constant TOTAL_SUPPLY = 10**9 * 10**DECIMALS;\r\n\r\n  constructor(address owner, address recipient) Ownable(owner) {\r\n    _balances[recipient] = TOTAL_SUPPLY;\r\n    emit Transfer(address(0), recipient, TOTAL_SUPPLY);\r\n  }\r\n\r\n  function getOwner() public view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function decimals() public pure returns (uint8) {\r\n    return DECIMALS;\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  function name() external pure returns (string memory) {\r\n    return NAME;\r\n  }\r\n\r\n  function totalSupply() external pure returns (uint256) {\r\n    return TOTAL_SUPPLY;\r\n  }\r\n\r\n  function balanceOf(address account) public view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][msg.sender];\r\n    require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n\r\n    _approve(sender, msg.sender, currentAllowance - amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    uint256 currentAllowance = _allowances[msg.sender][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n    _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[sender] = senderBalance - amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/Step.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\ncontract Step is BEP20 {\r\n  IDexRouter public constant ROUTER = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n  address public immutable pair;\r\n\r\n  address public marketingWallet;\r\n  address public rewardWallet;\r\n\r\n  uint256 public swapThreshold = 150000 * 10**18;\r\n  bool public swapEnabled = true;\r\n\r\n  bool dumpProtectionEnabled = true;\r\n  bool sniperTax = true;\r\n  bool tradingEnabled;\r\n  bool inSwap;\r\n\r\n  uint256 public buyTax = 1000;\r\n  uint256 public sellTax = 1000;\r\n  uint256 public transferTax = 0;\r\n  uint256 public rewardShare = 250;\r\n  uint256 public liquidityShare = 200;\r\n  uint256 public marketingShare = 550;\r\n  uint256 totalShares = 1000;\r\n  uint256 constant TAX_DENOMINATOR = 10000;\r\n\r\n  uint256 public transferGas = 25000;\r\n  uint256 public launchTime;\r\n\r\n  mapping (address => bool) public isWhitelisted;\r\n  mapping (address => bool) public isCEX;\r\n  mapping (address => bool) public isMarketMaker;\r\n\r\n  event DisableDumpProtection();\r\n  event EnableTrading();\r\n  event TriggerSwapBack();\r\n  event RecoverBNB(uint256 amount);\r\n  event RecoverBEP20(address indexed token, uint256 amount);\r\n  event SetWhitelisted(address indexed account, bool indexed status);\r\n  event SetCEX(address indexed account, bool indexed exempt);\r\n  event SetMarketMaker(address indexed account, bool indexed isMM);\r\n  event SetTaxes(uint256 reward, uint256 liquidity, uint256 marketing);\r\n  event SetShares(uint256 rewardShare, uint256 liquidityShare, uint256 marketingShare);\r\n  event SetSwapBackSettings(bool enabled, uint256 amount);\r\n  event SetTransferGas(uint256 newGas, uint256 oldGas);\r\n  event SetMarketingWallet(address newWallet, address oldWallet);\r\n  event SetRewardWallet(address newAddress, address oldAddress);\r\n  event AutoLiquidity(uint256 pair, uint256 tokens);\r\n  event DepositMarketing(address indexed wallet, uint256 amount);\r\n  event DepositRewards(address indexed wallet, uint256 amount);\r\n\r\n  modifier swapping() { \r\n    inSwap = true;\r\n    _;\r\n    inSwap = false;\r\n  }\r\n\r\n  constructor(address owner, address marketing, address rewards) BEP20(owner, marketing) {\r\n    pair = IDexFactory(ROUTER.factory()).createPair(ROUTER.WETH(), address(this));\r\n    _approve(address(this), address(ROUTER), type(uint256).max);\r\n    isMarketMaker[pair] = true;\r\n\r\n    rewardWallet = rewards;\r\n    marketingWallet = marketing;\r\n    isWhitelisted[marketingWallet] = true;\r\n  }\r\n\r\n  // Override\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n    if (isWhitelisted[sender] || isWhitelisted[recipient] || inSwap) {\r\n      super._transfer(sender, recipient, amount);\r\n      return;\r\n    }\r\n    require(tradingEnabled, \"Trading is disabled\");\r\n\r\n    if (_shouldSwapBack(recipient)) { _swapBack(); }\r\n    uint256 amountAfterTaxes = _takeTax(sender, recipient, amount);\r\n\r\n    super._transfer(sender, recipient, amountAfterTaxes);\r\n  }\r\n\r\n  // Public\r\n\r\n  function getDynamicSellTax() public view returns (uint256) {\r\n    uint256 endingTime = launchTime + 1 days;\r\n\r\n    if (endingTime > block.timestamp) {\r\n      uint256 remainingTime = endingTime - block.timestamp;\r\n      return sellTax + sellTax * remainingTime / 1 days;\r\n    } else {\r\n      return sellTax;\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  // Private\r\n\r\n  function _takeTax(address sender, address recipient, uint256 amount) private returns (uint256) {\r\n    if (amount == 0) { return amount; }\r\n\r\n    uint256 taxAmount = amount * _getTotalTax(sender, recipient) / TAX_DENOMINATOR;\r\n    if (taxAmount > 0) { super._transfer(sender, address(this), taxAmount); }\r\n\r\n    return amount - taxAmount;\r\n  }\r\n\r\n  function _getTotalTax(address sender, address recipient) private view returns (uint256) {\r\n    if (sniperTax) { return TAX_DENOMINATOR - 100; }\r\n    if (isCEX[recipient]) { return 0; }\r\n    if (isCEX[sender]) { return buyTax; }\r\n\r\n    if (isMarketMaker[sender]) {\r\n      return buyTax;\r\n    } else if (isMarketMaker[recipient]) {\r\n      return dumpProtectionEnabled ? getDynamicSellTax() : sellTax;\r\n    } else {\r\n      return transferTax;\r\n    }\r\n  }\r\n\r\n  function _shouldSwapBack(address recipient) private view returns (bool) {\r\n    return isMarketMaker[recipient] && swapEnabled && balanceOf(address(this)) >= swapThreshold;\r\n  }\r\n\r\n  function _swapBack() private swapping {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = ROUTER.WETH();\r\n\r\n    uint256 liquidityTokens = swapThreshold * liquidityShare / totalShares / 2;\r\n    uint256 amountToSwap = swapThreshold - liquidityTokens;\r\n    uint256 balanceBefore = address(this).balance;\r\n\r\n    ROUTER.swapExactTokensForETH(\r\n      amountToSwap,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 amountBNB = address(this).balance - balanceBefore;\r\n    uint256 totalBNBShares = totalShares - liquidityShare / 2;\r\n\r\n    uint256 amountBNBLiquidity = amountBNB * liquidityShare / totalBNBShares / 2;\r\n    uint256 amountBNBMarketing = amountBNB * marketingShare / totalBNBShares;\r\n    uint256 amountBNBRewards = amountBNB * rewardShare / totalBNBShares;\r\n\r\n    (bool marketingSuccess,) = payable(marketingWallet).call{value: amountBNBMarketing, gas: transferGas}(\"\");\r\n    if (marketingSuccess) { emit DepositMarketing(marketingWallet, amountBNBMarketing); }\r\n    (bool rewardSuccess,) = payable(rewardWallet).call{value: amountBNBRewards, gas: transferGas}(\"\");\r\n    if (rewardSuccess) { emit DepositRewards(rewardWallet, amountBNBRewards); }\r\n\r\n    if (liquidityTokens > 0) {\r\n      ROUTER.addLiquidityETH{value: amountBNBLiquidity}(\r\n        address(this),\r\n        liquidityTokens,\r\n        0,\r\n        0,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n\r\n      emit AutoLiquidity(amountBNBLiquidity, liquidityTokens);\r\n    }\r\n  }\r\n\r\n  // Owner\r\n\r\n  function disableDumpProtection() external onlyOwner {\r\n    dumpProtectionEnabled = false;\r\n    emit DisableDumpProtection();\r\n  }\r\n\r\n  function removeSniperTax() external onlyOwner {\r\n    sniperTax = false;\r\n  }\r\n\r\n  function enableTrading() external onlyOwner {\r\n    tradingEnabled = true;\r\n    launchTime = block.timestamp;\r\n    emit EnableTrading();\r\n  }\r\n\r\n  function triggerSwapBack() external onlyOwner {\r\n    _swapBack();\r\n    emit TriggerSwapBack();\r\n  }\r\n\r\n  function recoverBNB() external onlyOwner {\r\n    uint256 amount = address(this).balance;\r\n    (bool sent,) = payable(marketingWallet).call{value: amount, gas: transferGas}(\"\");\r\n    require(sent, \"Tx failed\");\r\n    emit RecoverBNB(amount);\r\n  }\r\n\r\n  function recoverBEP20(IBEP20 token, address recipient) external onlyOwner {\r\n    require(address(token) != address(this), \"Can't withdraw Step\");\r\n    uint256 amount = token.balanceOf(address(this));\r\n    token.transfer(recipient, amount);\r\n    emit RecoverBEP20(address(token), amount);\r\n  }\r\n\r\n  function setIsWhitelisted(address account, bool value) external onlyOwner {\r\n    isWhitelisted[account] = value;\r\n    emit SetWhitelisted(account, value);\r\n  }\r\n\r\n  function setIsCEX(address account, bool value) external onlyOwner {\r\n    isCEX[account] = value;\r\n    emit SetCEX(account, value);\r\n  }\r\n\r\n  function setIsMarketMaker(address account, bool value) external onlyOwner {\r\n    require(account != pair, \"Can't modify pair\");\r\n    isMarketMaker[account] = value;\r\n    emit SetMarketMaker(account, value);\r\n  }\r\n\r\n  function setTaxes(uint256 newBuyTax, uint256 newSellTax, uint256 newTransferTax) external onlyOwner {\r\n    require(newBuyTax <= 1500 && newSellTax <= 1500 && newTransferTax <= 1500, \"Too high taxes\");\r\n    buyTax = newBuyTax;\r\n    sellTax = newSellTax;\r\n    transferTax = newTransferTax;\r\n    emit SetTaxes(buyTax, sellTax, transferTax);\r\n  }\r\n\r\n  function setShares(uint256 newRewardShare, uint256 newLiquidityShare, uint256 newMarketingShare) external onlyOwner {\r\n    rewardShare = newRewardShare;\r\n    liquidityShare = newLiquidityShare;\r\n    marketingShare = newMarketingShare;\r\n    totalShares = rewardShare + liquidityShare + marketingShare;\r\n    emit SetShares(rewardShare, liquidityShare, marketingShare);\r\n  }\r\n\r\n  function setSwapBackSettings(bool enabled, uint256 amount) external onlyOwner {\r\n    uint256 tokenAmount = amount * 10**decimals();\r\n    swapEnabled = enabled;\r\n    swapThreshold = tokenAmount;\r\n    emit SetSwapBackSettings(enabled, amount);\r\n  }\r\n\r\n  function setTransferGas(uint256 newGas) external onlyOwner {\r\n    require(newGas >= 21000 && newGas <= 50000, \"Invalid gas parameter\");\r\n    emit SetTransferGas(newGas, transferGas);\r\n    transferGas = newGas;\r\n  }\r\n\r\n  function setMarketingWallet(address newWallet) external onlyOwner {\r\n    require(newWallet != address(0), \"New marketing wallet is the zero address\");\r\n    emit SetMarketingWallet(newWallet, marketingWallet);\r\n    marketingWallet = newWallet;\r\n  }\r\n\r\n  function setRewardWallet(address newAddress) external onlyOwner {\r\n    require(newAddress != address(0), \"New reward pool is the zero address\");\r\n    emit SetRewardWallet(newAddress, rewardWallet);\r\n    rewardWallet = newAddress;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableDumpProtection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverBEP20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"SetCEX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isMM\",\"type\":\"bool\"}],\"name\":\"SetMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"SetRewardWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingShare\",\"type\":\"uint256\"}],\"name\":\"SetShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGas\",\"type\":\"uint256\"}],\"name\":\"SetTransferGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerSwapBack\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDumpProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCEX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeSniperTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsCEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"}],\"name\":\"setShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTransferTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"setTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Step", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000bbd2cf295ab343c2a33992d0d80c4959221f8c40000000000000000000000007aa0a4d5ee74fe38646a96ca2d77aaabe815a16a0000000000000000000000009a00ed0acd962c7cb0deab866d107deba51b5aeb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd0ebb6f2051bb1168a369c4d80fe5efb15a9f63b726070aec922ca1904699f8"}