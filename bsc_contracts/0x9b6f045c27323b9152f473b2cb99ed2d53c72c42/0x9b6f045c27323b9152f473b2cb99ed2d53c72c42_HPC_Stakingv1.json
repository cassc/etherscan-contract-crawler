{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: HPCStakingv1.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HPC_Stakingv1 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC20 private stakingContract; \r\n    IERC20 private rewardToken;  \r\n    address public owner;\r\n    mapping(address => uint256) public stakedAmount;\r\n    mapping(address => uint256) public rewardAmount;\r\n    mapping(address => uint256) public lastClaimTime; \r\n    mapping(address => uint256) public totalRewardsReceived;\r\n    mapping(address => uint256) private previousStakedAmount;\r\n    uint256 private previousContractBalance;\r\n    uint256 private totalRewards;\r\n    uint256 private totalStakes;\r\n    uint256 private managementVaultBalance;\r\n    uint256 private claimInterval; \r\n    uint256 private lastRewardsUpdateBlock;\r\n    uint256 private Man_Percentage;\r\n    uint256 private Stakers_Percentage;\r\n    uint256 private currentAPY;\r\n    uint256 private currentRewardPerStaker;\r\n    address[] public stakerAddresses;\r\n    address private manAddress; \r\n\r\n    // Events\r\n    event UnstakingError(string message);\r\n    event StakingError(string message);\r\n    event ClaimRewardsError(string message);\r\n    event CompoundRewardsError(string message);\r\n    event ClaimManError(string message);\r\n    event DistributeRewardsError(string message);\r\n    event AmountStaked(address indexed user, uint256 amount);\r\n    event AmountUnstaked(address indexed user, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 amount);\r\n    event RewardCompounded(address indexed user, uint256 amount);\r\n    event ManRewardClaimed(address indexed user, uint256 amount);\r\n    event RewardDistributed(address indexed user, uint256 amount);\r\n    \r\n\r\n    constructor(address _stakingContractAddress, address  _rewardTokenAddress, address _manAddress) {\r\n        stakingContract = IERC20(_stakingContractAddress);\r\n        rewardToken = IERC20(_rewardTokenAddress);\r\n        manAddress = _manAddress;\r\n        owner = msg.sender;\r\n        claimInterval = 300;\r\n        Man_Percentage = 90;\r\n        Stakers_Percentage = 10;\r\n    }\r\n\r\n    // Modifier to onlyOwner\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Function to allow users to stake tokens\r\n    function stake(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n\r\n        // re-implement HPC rewardToken transfer fee mechanism.\r\n        uint256 deductions = _amount.mul(18).div(1000); // fixed 1.8% transfer fee.\r\n\r\n        // Determine the net amount to stake (deduct the fee)\r\n        uint256 netAmount = _amount.sub(deductions);\r\n\r\n        stakingContract.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Update stakedAmount for the user.\r\n        stakedAmount[msg.sender] = stakedAmount[msg.sender].add(netAmount);\r\n\r\n        // Update StakedTokens stats.\r\n        totalStakes = totalStakes.add(netAmount);\r\n        \r\n         // If the user is not in the stakerAddresses array, add them.\r\n        if (stakedAmount[msg.sender] > 0 && !isStaker(msg.sender)) {\r\n            stakerAddresses.push(msg.sender);\r\n        }\r\n        \r\n        // Call autodistribute.\r\n        autoDistributeRewards();\r\n\r\n        emit AmountStaked(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    // Function to allow users to claim their staked tokens\r\n    function unstake(uint256 amountToUnstake) external {\r\n        uint256 stakes = stakedAmount[msg.sender];\r\n        require(stakes > 0, \"No staked tokens to claim\");\r\n        require(amountToUnstake > 0 && amountToUnstake <= stakes, \"Invalid unstake amount\");\r\n\r\n        // Update stakedAmount.\r\n        stakedAmount[msg.sender] = stakedAmount[msg.sender].sub(amountToUnstake);\r\n\r\n        // Transfer staked tokens to the user\r\n        stakingContract.safeTransfer(msg.sender, amountToUnstake);\r\n\r\n        // Update totalStakes\r\n        totalStakes = totalStakes.sub(amountToUnstake);\r\n\r\n        // Update endtime session of staker.\r\n        if (stakedAmount[msg.sender] == 0 && isStaker(msg.sender)) {\r\n        removeStakerAddress(msg.sender);\r\n        }\r\n\r\n        // Update totalStakes.\r\n        if (getStakedAmount() == 0 && getTotalStakes() == 0) {\r\n        totalStakes = 0;\r\n        }\r\n        \r\n        // Update previousContractBalance\r\n        if (getRewardAmount() == 0 && getStakedAmount() ==0 ){\r\n            previousContractBalance = 0;\r\n            currentRewardPerStaker = 0;\r\n            currentAPY = 0;\r\n        }\r\n\r\n        // Call autodistribute.\r\n        autoDistributeRewards();\r\n\r\n        emit AmountUnstaked(msg.sender, amountToUnstake);\r\n    }\r\n\r\n    // Function to allow users to claim their accrued rewards\r\n    function claimRewards() external {\r\n        uint256 reward  = rewardAmount[msg.sender];\r\n        require(reward > 0,\"No available rewards to claim\");\r\n\r\n        // Ensure enough time has passed since the last claim\r\n        require(block.timestamp > lastClaimTime[msg.sender] + claimInterval,\"Claim interval not yet reached\");\r\n\r\n        // Update user's reward.\r\n        rewardAmount[msg.sender] = 0;\r\n\r\n        // Transfer rewards to the user\r\n        rewardToken.safeTransfer(msg.sender, reward);\r\n\r\n        // Update the total rewards claimed from the contract\r\n        totalRewards = totalRewards.sub(reward);\r\n\r\n        // Update total rewards received by the staker\r\n        totalRewardsReceived[msg.sender] = totalRewardsReceived[msg.sender].add(reward); \r\n\r\n        // Update the last claim time for the user\r\n        lastClaimTime[msg.sender] = block.timestamp;\r\n\r\n        \r\n        // Update previousContractBalance\r\n        if (getRewardAmount() == 0 && getStakedAmount() == 0 ){\r\n            previousContractBalance = 0;\r\n            currentRewardPerStaker = 0;\r\n            currentAPY = 0;\r\n        }\r\n\r\n        // Call autodistribute.\r\n        autoDistributeRewards();\r\n\r\n        emit RewardClaimed(msg.sender, reward);\r\n    }\r\n\r\n    // Function to allow users to claim their accrued rewards\r\n    function compoundRewards() external {\r\n        uint256 _reward = rewardAmount[msg.sender];\r\n        require(_reward > 0,\"No available rewards to claim\");\r\n\r\n        // Ensure enough time has passed since the last claim\r\n        require(block.timestamp > lastClaimTime[msg.sender] + claimInterval,\"Claim interval not yet reached\");\r\n\r\n        // Update user's reward.\r\n        rewardAmount[msg.sender] = 0;\r\n\r\n        // Update the user's stakes directly.\r\n        stakedAmount[msg.sender] = stakedAmount[msg.sender].add(_reward);\r\n\r\n        // Update the last claim time for the user\r\n        lastClaimTime[msg.sender] = block.timestamp;\r\n\r\n        // Update totalStakes.\r\n        totalStakes = totalStakes.add(_reward);\r\n        \r\n        // Update the total rewards claimed from the contract\r\n        totalRewards = totalRewards.sub(_reward);\r\n\r\n        // Update total rewards received by the staker\r\n        totalRewardsReceived[msg.sender] = totalRewardsReceived[msg.sender].add(_reward); \r\n\r\n        // Call autodistribute.\r\n        autoDistributeRewards();\r\n\r\n        emit RewardCompounded(msg.sender, _reward);\r\n    }\r\n\r\n    // Function to allow the owner to claim management rewards and send them to the manAddress\r\n    function claimManReward() external onlyOwner {\r\n        uint256 _amount = managementVaultBalance;\r\n        require(_amount > 0, \"Insufficient vault balance\");\r\n\r\n        // Ensure that the user cannot re-claim the rewards again.\r\n        managementVaultBalance = 0;\r\n\r\n        // Transfer rewards to the manAddress\r\n        rewardToken.safeTransfer(manAddress, _amount);\r\n\r\n        // Update totalRewards stats.\r\n        totalRewards = totalRewards.sub(_amount);\r\n\r\n        emit ManRewardClaimed(manAddress, _amount);\r\n    }\r\n\r\n     // Function to calculate potential rewards for a specific staker\r\n    function calculateRewardByAddress(address _staker) external view returns (uint256) {\r\n        // Retrieve the staked amount for the specific staker\r\n        uint256 userStake = stakedAmount[_staker];\r\n\r\n        if (userStake == 0) {\r\n            return 0; // The staker has no staked amount, so the reward is 0.\r\n        } else {\r\n            // Calculate the potential rewards based on staked amount and current reward per staked token\r\n            uint256 rewardPerTokenStakedLocal = rewardAmount[_staker].mul(1e8).div(userStake);\r\n            return userStake.mul(rewardPerTokenStakedLocal).div(1e8);\r\n        }\r\n    }\r\n\r\n    // Function to calculate potential rewards for the current epoch time.\r\n    function calculateMyReward() external view returns (uint256) {\r\n        // Retrieve the staked amount of msg.sender.\r\n        uint256 userStake = stakedAmount[msg.sender];\r\n\r\n        if (userStake == 0) {\r\n            return 0; // The staker has no staked amount, so the reward is 0.\r\n        } else {\r\n            // Calculate the potential rewards based on staked amount and current reward per staked token\r\n            uint256 rewardPerTokenStakedLocal = rewardAmount[msg.sender].mul(1e8).div(userStake);\r\n            return userStake.mul(rewardPerTokenStakedLocal).div(1e8);\r\n        }\r\n    }\r\n\r\n    // Function to calculate potential rewards based on a specified staked amount\r\n    function rewardCalculator(uint256 _stakedAmount) external view returns (uint256) {\r\n        uint256 totalS = getStakedAmount();\r\n        uint256 totalR = getRewardAmount();\r\n\r\n        if (totalS == 0 || totalR == 0) {\r\n            return 0;\r\n        } else {\r\n            // Calculate potential rewards based on the total staked amount and current reward per staked token\r\n            uint256 rewardPerTokenStakedLocal = totalR.mul(1e8).div(totalS);\r\n            return _stakedAmount.mul(rewardPerTokenStakedLocal).div(1e8);\r\n        }\r\n    }\r\n\r\n    // View total rewards received by the staker\r\n    function getMyTotalRewardsReceived() external view returns (uint256) {\r\n        return totalRewardsReceived[msg.sender];\r\n    }\r\n\r\n    // View totaRewards stats\r\n    function getTotalRewards() public view returns (uint256) {\r\n        return totalRewards;\r\n    }\r\n\r\n    // Function to calculate the reward for a staker based on staking duration and reward per staked token\r\n    function getMyRewards() external view returns (uint256) {\r\n        uint256 myrewards  = rewardAmount[msg.sender];\r\n        return myrewards;\r\n    }\r\n\r\n    // View my StakedTokens\r\n    function getMyStakes() external view returns(uint256){\r\n        uint256 mystaked = stakedAmount[msg.sender];\r\n        return mystaked;\r\n    }\r\n\r\n    // Function to get the number of stakers\r\n    function getNumberOfStakers() external view returns (uint256) {\r\n        return stakerAddresses.length;\r\n    }\r\n\r\n    // Function to view the reward per staked token\r\n    function getCurrentRewardPerStaker() public view returns (uint256) {\r\n        return currentRewardPerStaker;\r\n    }\r\n\r\n    // Function to distribute rewards proportionally to staked tokens\r\n    function autoDistributeRewards() internal {\r\n        uint256 newBalance = rewardToken.balanceOf(address(this));\r\n        uint256 totalBalance = combinedBalances();\r\n        uint256 stakedToken = getTotalStakes();\r\n\r\n        if (stakedToken == 0 || newBalance <= totalBalance) {\r\n            emit DistributeRewardsError(\"No new reward or no staked tokens yet.\");\r\n            return; // Do nothing.\r\n        }\r\n\r\n        uint256 availableBalance = newBalance.sub(totalBalance);\r\n\r\n        // If the block number is greater than the last rewards update block\r\n        if (block.number > lastRewardsUpdateBlock) {\r\n            // Update the last rewards update block\r\n            lastRewardsUpdateBlock = block.number;\r\n\r\n            // Calculate management and holders shares based on new rewards only\r\n            uint256 newRewards = availableBalance;\r\n            uint256 managementShare = newRewards.mul(Man_Percentage).div(100);\r\n            uint256 holdersShare = newRewards.mul(Stakers_Percentage).div(100);\r\n\r\n            // Add the management share to the management balance\r\n            managementVaultBalance = managementVaultBalance.add(managementShare);\r\n\r\n            uint256 rewardPerTokenStakedLocal = holdersShare.mul(1e8).div(stakedToken);\r\n\r\n            // Distribute rewards proportionally to staked tokens\r\n            for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n                address stakerAddress = stakerAddresses[i];\r\n                uint256 userStake = stakedAmount[stakerAddress];\r\n                if (userStake > 0) {\r\n                    uint256 stakerReward = userStake.mul(rewardPerTokenStakedLocal).div(1e8);\r\n                    rewardAmount[stakerAddress] = rewardAmount[stakerAddress].add(stakerReward);\r\n\r\n                      // Update currentRewardPerStaker\r\n                    currentRewardPerStaker = stakerReward;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update totalRewards stats.\r\n        totalRewards = totalRewards.add(availableBalance);\r\n\r\n        // Update newRewards\r\n        previousContractBalance = newBalance;\r\n\r\n        // Update APY\r\n        updateCurrentAPY();\r\n\r\n        emit RewardDistributed(msg.sender, availableBalance);\r\n    }\r\n\r\n    // Function to distribute rewards proportionally to staked tokens\r\n    function manualDistributeRewards() external {\r\n        uint256 newBalance = rewardToken.balanceOf(address(this));\r\n        uint256 totalBalance = combinedBalances();\r\n        uint256 stakedToken = getTotalStakes();\r\n\r\n        if (stakedToken == 0 || newBalance <= totalBalance) {\r\n            emit DistributeRewardsError(\"No new reward or no staked tokens yet.\");\r\n            return; // Do nothing.\r\n        }\r\n\r\n        uint256 availableBalance = newBalance.sub(totalBalance);\r\n\r\n        // If the block number is greater than the last rewards update block\r\n        if (block.number > lastRewardsUpdateBlock) {\r\n            // Update the last rewards update block\r\n            lastRewardsUpdateBlock = block.number;\r\n\r\n            // Calculate management and holders shares based on new rewards only\r\n            uint256 newRewards = availableBalance;\r\n            uint256 managementShare = newRewards.mul(Man_Percentage).div(100);\r\n            uint256 holdersShare = newRewards.mul(Stakers_Percentage).div(100);\r\n\r\n            // Add the management share to the management balance\r\n            managementVaultBalance = managementVaultBalance.add(managementShare);\r\n\r\n            uint256 rewardPerTokenStakedLocal = holdersShare.mul(1e8).div(stakedToken);\r\n\r\n            // Distribute rewards proportionally to staked tokens\r\n            for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n                address stakerAddress = stakerAddresses[i];\r\n                uint256 userStake = stakedAmount[stakerAddress];\r\n                if (userStake > 0) {\r\n                    uint256 stakerReward = userStake.mul(rewardPerTokenStakedLocal).div(1e8);\r\n                    rewardAmount[stakerAddress] = rewardAmount[stakerAddress].add(stakerReward);\r\n\r\n                      // Update currentRewardPerStaker\r\n                    currentRewardPerStaker = stakerReward;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update totalRewards stats.\r\n        totalRewards = totalRewards.add(availableBalance);\r\n\r\n        // Update newRewards\r\n        previousContractBalance = newBalance;\r\n\r\n        // Update APY\r\n        updateCurrentAPY();\r\n\r\n        emit RewardDistributed(msg.sender, availableBalance);\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 contractTokenBalance = rewardToken.balanceOf(address(this));\r\n        if (contractTokenBalance > 0){\r\n            // Call autodistribute.\r\n            autoDistributeRewards();\r\n        }\r\n    }\r\n\r\n    // Function to update the management address\r\n    function updateManAddress(address _newManAddress) external onlyOwner {\r\n        manAddress = _newManAddress;\r\n    }\r\n\r\n    // Function to update the claim interval (only callable by the owner)\r\n    function setClaimInterval(uint256 _newInterval) external onlyOwner {\r\n        require(_newInterval > 0, \"Interval must be greater than zero\");\r\n        claimInterval = _newInterval;\r\n    }\r\n\r\n    // Function to view the claim interval. \r\n    function getClaimInterval() external view returns(uint256){\r\n        return claimInterval;\r\n    }\r\n\r\n     // Update Man_percentage and Stakers Percentages.\r\n    function updatePercentages(uint256 _newManPercentage, uint256 _newStakersPercentage) external onlyOwner {\r\n    require(_newManPercentage + _newStakersPercentage == 100, \"Both percentages must equal to 100%\");\r\n    Man_Percentage = _newManPercentage;\r\n    Stakers_Percentage = _newStakersPercentage;\r\n    }\r\n\r\n    // Update rewardToken address.\r\n    function updateStakingContractAddress(address _newStakingContract) external onlyOwner{\r\n        stakingContract = IERC20(_newStakingContract);\r\n    }\r\n\r\n     // Update rewardToken address.\r\n    function updateRewardTokenAddress(address _newRewardToken) external onlyOwner{\r\n        rewardToken = IERC20(_newRewardToken);\r\n    }\r\n\r\n    // Calculate combined balances on struct.\r\n    function calculateAllBalances() internal view returns (uint256) {\r\n        uint256 totalBalances = getStakedAmount() + getRewardAmount();\r\n        return totalBalances;\r\n    }\r\n\r\n    // Calculate combined balances on struct.\r\n    function combinedBalances() internal view returns (uint256) {\r\n        uint256 totalBalances = totalStakes + totalRewards;\r\n        return totalBalances;\r\n    }\r\n\r\n    // Calculate the sum of contract balance.\r\n    function getAllBalances() external view returns (uint256) {\r\n        return calculateAllBalances();\r\n    }\r\n\r\n    // Total rewardtoken balances\r\n    function totalContractBalance() external view returns (uint256){\r\n        return rewardToken.balanceOf(address(this));\r\n    }\r\n\r\n    // View totalStakes stats\r\n    function getTotalStakes() public view returns(uint256){\r\n        return totalStakes;\r\n    }\r\n\r\n    // Function to calculate the total sum of staked amounts across all stakers\r\n    function getStakedAmount() public view returns (uint256) {\r\n        uint256 stakes = 0;\r\n        for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n            stakes += stakedAmount[stakerAddresses[i]];\r\n        }\r\n        return stakes;\r\n    }\r\n\r\n    // Function to calculate the total sum of reward amounts across all stakers\r\n    function getRewardAmount() public view returns (uint256) {\r\n        uint256 rewards = 0;\r\n        for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n            rewards += rewardAmount[stakerAddresses[i]];\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    // View ManPercentages.\r\n    function getManPercentage() external view returns(uint256){\r\n        return Man_Percentage;\r\n    }\r\n\r\n    // View StakersPercentages.\r\n    function getStakersPercentage() external view returns(uint256){\r\n        return Stakers_Percentage;\r\n    }\r\n\r\n\r\n    // View Man_vault balance.\r\n    function manVaultBalance() public view returns(uint256) {\r\n        return managementVaultBalance;\r\n    }\r\n\r\n    // View staking address \r\n    function stakingContractAddress() external view returns(address){\r\n        return address(stakingContract);\r\n    }\r\n\r\n    // View manAddress.\r\n    function getManAddress() external view returns(address){\r\n        return manAddress;\r\n    }\r\n\r\n    // View snapshot of the previous balance.\r\n    function getPreviousBalance() external view returns(uint256){\r\n        return previousContractBalance;\r\n    }\r\n\r\n    // View reward address \r\n    function rewardTokenAddress() external view returns(address){\r\n        return address(rewardToken);\r\n    }\r\n\r\n    // View currentAPY\r\n    function getCurrentAPY() external view returns(uint256){\r\n        return currentAPY;\r\n    }\r\n\r\n    // View eth contract eth balance.\r\n    function getEthBalance() external view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Function to withdraw ETH balance by the owner\r\n    function rescueEth() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        (bool sent, ) = msg.sender.call{value: balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    // Function to withdraw ERC20 tokens by the owner, except for rewardToken\r\n    function rescueERC20Tokens(address tokenAddress) external onlyOwner {\r\n        require(tokenAddress != address(rewardToken),\"RewardToken is not withdrawable\");\r\n        \r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        require(tokenBalance > 0, \"No tokens to withdraw\");\r\n        \r\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n\r\n    // Function to calculate and update the current APY\r\n    function updateCurrentAPY() internal {\r\n        uint256 rewards = totalRewards;\r\n        uint256 stakes = totalStakes;\r\n        uint256 dailyRate;\r\n        uint256 currentRate;\r\n\r\n        // Check if there are stakers and total staked tokens are not zero\r\n        if (stakes > 0 && rewards > 0) {\r\n            dailyRate = rewards.mul(1e8).div(365); // Divide rewards by 1e8 and 365 days to get the daily reward.\r\n            currentRate = dailyRate.mul(1e8).div(stakes);  // Daily rewards divided by the total staked.\r\n\r\n            // Set the APY directly as the annual interest rate\r\n            currentAPY = currentRate.mul(10000); // result with 2 decimal places.\r\n        } else {\r\n            // If there are no stakers or total staked tokens are zero, set APY to 0\r\n            currentAPY = 0;\r\n        }\r\n    }\r\n\r\n    // remove stakers from staker array\r\n    function removeStakerAddress(address staker) internal {\r\n        for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n            if (stakerAddresses[i] == staker) {\r\n                // Move the last element to the position to be removed\r\n                stakerAddresses[i] = stakerAddresses[stakerAddresses.length - 1];\r\n                // Shorten the array by one\r\n                stakerAddresses.pop();\r\n                break; // Exit the loop once removed\r\n                }\r\n            }\r\n    }\r\n\r\n    // Function to check if an address is a staker\r\n    function isStaker(address _address) internal view returns (bool) {\r\n        for (uint256 i = 0; i < stakerAddresses.length; i++) {\r\n            if (stakerAddresses[i] == _address) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ClaimManError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ClaimRewardsError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CompoundRewardsError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DistributeRewardsError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"StakingError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UnstakingError\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateMyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"calculateRewardByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimManReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardPerStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTotalRewardsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDistributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"setClaimInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToUnstake\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManAddress\",\"type\":\"address\"}],\"name\":\"updateManAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newManPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"updateRewardTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakingContract\",\"type\":\"address\"}],\"name\":\"updateStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HPC_Stakingv1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000057f532ecfd238241e023e2067d92e51a3361fa5500000000000000000000000057f532ecfd238241e023e2067d92e51a3361fa55000000000000000000000000897eb20a2c518a4a2cd05d6b93f63e3fcc454794", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://259f21a919c13bb4309ee607519ad93d2fcad9ce8243fa68ff4b7098d5ef77f3"}