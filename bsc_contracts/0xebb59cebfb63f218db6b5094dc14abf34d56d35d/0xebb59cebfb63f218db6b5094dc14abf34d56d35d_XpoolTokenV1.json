{"SourceCode": "// Sources flattened with hardhat v2.1.2 https://hardhat.org\r\n\r\n// File contracts/open-zeppelin/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/open-zeppelin/SafeMath.sol\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/open-zeppelin/Address.sol\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/open-zeppelin/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITransferHook.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface ITransferHook {\r\n    function onTransfer(address from, address to, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/utils/VersionedInitializable.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n */\r\nabstract contract VersionedInitializable {\r\n    /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n    uint256 internal lastInitializedRevision = 0;\r\n\r\n   /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(revision > lastInitializedRevision, \"Contract instance has already been initialized\");\r\n\r\n        lastInitializedRevision = revision;\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal pure virtual returns(uint256);\r\n\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IGovernancePowerDelegationToken.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IGovernancePowerDelegationToken {\r\n  \r\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\r\n\r\n  /**\r\n   * @dev emitted when a user delegates to another\r\n   * @param delegator the delegator\r\n   * @param delegatee the delegatee\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  event DelegateChanged(\r\n    address indexed delegator,\r\n    address indexed delegatee,\r\n    DelegationType delegationType\r\n  );\r\n\r\n  /**\r\n   * @dev emitted when an action changes the delegated power of a user\r\n   * @param user the user which delegated power has changed\r\n   * @param amount the amount of delegated power for the user\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\r\n\r\n  /**\r\n   * @dev delegates the specific power to a delegatee\r\n   * @param delegatee the user which delegated power has changed\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\r\n  /**\r\n   * @dev delegates all the powers to a specific user\r\n   * @param delegatee the user to which the power will be delegated\r\n   **/\r\n  function delegate(address delegatee) external virtual;\r\n  /**\r\n   * @dev returns the delegatee of an user\r\n   * @param delegator the address of the delegator\r\n   **/\r\n  function getDelegateeByType(address delegator, DelegationType delegationType)\r\n    external\r\n    virtual\r\n    view\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev returns the current delegated power of a user. The current power is the\r\n   * power delegated at the time of the last snapshot\r\n   * @param user the user\r\n   **/\r\n  function getPowerCurrent(address user, DelegationType delegationType)\r\n    external\r\n    virtual\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev returns the delegated power of a user at a certain block\r\n   * @param user the user\r\n   **/\r\n  function getPowerAtBlock(\r\n    address user,\r\n    uint256 blockNumber,\r\n    DelegationType delegationType\r\n  ) external virtual view returns (uint256);\r\n \r\n  /**\r\n  * @dev returns the total supply at a certain block number\r\n  **/\r\n  function totalSupplyAt(uint256 blockNumber) external virtual view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/token/base/GovernancePowerDelegationERC20.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @notice implementation of the Xpool token contract\r\n * @author Xpool\r\n */\r\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\r\n  using SafeMath for uint256;\r\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\r\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\r\n  );\r\n\r\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\r\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\r\n  );\r\n\r\n  /// @dev snapshot of a value on a specific block, used for votes\r\n  struct Snapshot {\r\n    uint128 blockNumber;\r\n    uint128 value;\r\n  }\r\n\r\n  /**\r\n   * @dev delegates one specific power to a delegatee\r\n   * @param delegatee the user which delegated power has changed\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\r\n    _delegateByType(msg.sender, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @dev delegates all the powers to a specific user\r\n   * @param delegatee the user to which the power will be delegated\r\n   **/\r\n  function delegate(address delegatee) external override {\r\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\r\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the delegatee of an user\r\n   * @param delegator the address of the delegator\r\n   **/\r\n  function getDelegateeByType(address delegator, DelegationType delegationType)\r\n    external\r\n    override\r\n    view\r\n    returns (address)\r\n  {\r\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\r\n\r\n    return _getDelegatee(delegator, delegates);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the current delegated power of a user. The current power is the\r\n   * power delegated at the time of the last snapshot\r\n   * @param user the user\r\n   **/\r\n  function getPowerCurrent(address user, DelegationType delegationType)\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the delegated power of a user at a certain block\r\n   * @param user the user\r\n   **/\r\n  function getPowerAtBlock(\r\n    address user,\r\n    uint256 blockNumber,\r\n    DelegationType delegationType\r\n  ) external override view returns (uint256) {\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the total supply at a certain block number\r\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\r\n   * In this initial implementation with no XPO minting, simply returns the current supply\r\n   * A snapshots mapping will need to be added in case a mint function is added to the XPO token in the future\r\n   **/\r\n  function totalSupplyAt(uint256 blockNumber) external override view returns (uint256) {\r\n    return super.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * @dev delegates the specific power to a delegatee\r\n   * @param delegatee the user which delegated power has changed\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  function _delegateByType(\r\n    address delegator,\r\n    address delegatee,\r\n    DelegationType delegationType\r\n  ) internal {\r\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\r\n\r\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\r\n\r\n    uint256 delegatorBalance = balanceOf(delegator);\r\n\r\n    address previousDelegatee = _getDelegatee(delegator, delegates);\r\n\r\n    delegates[delegator] = delegatee;\r\n\r\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\r\n    emit DelegateChanged(delegator, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @dev moves delegated power from one user to another\r\n   * @param from the user from which delegated power is moved\r\n   * @param to the user that will receive the delegated power\r\n   * @param amount the amount of delegated power to be moved\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   **/\r\n  function _moveDelegatesByType(\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    DelegationType delegationType\r\n  ) internal {\r\n    if (from == to) {\r\n      return;\r\n    }\r\n\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    if (from != address(0)) {\r\n      uint256 previous = 0;\r\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\r\n\r\n      if (fromSnapshotsCount != 0) {\r\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\r\n      } else {\r\n        previous = balanceOf(from);\r\n      }\r\n\r\n      _writeSnapshot(\r\n        snapshots,\r\n        snapshotsCounts,\r\n        from,\r\n        uint128(previous),\r\n        uint128(previous.sub(amount))\r\n      );\r\n\r\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\r\n    }\r\n    if (to != address(0)) {\r\n      uint256 previous = 0;\r\n      uint256 toSnapshotsCount = snapshotsCounts[to];\r\n      if (toSnapshotsCount != 0) {\r\n        previous = snapshots[to][toSnapshotsCount - 1].value;\r\n      } else {\r\n        previous = balanceOf(to);\r\n      }\r\n\r\n      _writeSnapshot(\r\n        snapshots,\r\n        snapshotsCounts,\r\n        to,\r\n        uint128(previous),\r\n        uint128(previous.add(amount))\r\n      );\r\n\r\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev searches a snapshot by block number. Uses binary search.\r\n   * @param snapshots the snapshots mapping\r\n   * @param snapshotsCounts the number of snapshots\r\n   * @param user the user for which the snapshot is being searched\r\n   * @param blockNumber the block number being searched\r\n   **/\r\n  function _searchByBlockNumber(\r\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n    mapping(address => uint256) storage snapshotsCounts,\r\n    address user,\r\n    uint256 blockNumber\r\n  ) internal view returns (uint256) {\r\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\r\n\r\n    uint256 snapshotsCount = snapshotsCounts[user];\r\n\r\n    if (snapshotsCount == 0) {\r\n      return balanceOf(user);\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\r\n      return snapshots[user][snapshotsCount - 1].value;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (snapshots[user][0].blockNumber > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 lower = 0;\r\n    uint256 upper = snapshotsCount - 1;\r\n    while (upper > lower) {\r\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n      Snapshot memory snapshot = snapshots[user][center];\r\n      if (snapshot.blockNumber == blockNumber) {\r\n        return snapshot.value;\r\n      } else if (snapshot.blockNumber < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return snapshots[user][lower].value;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\r\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\r\n   * the XPO token and StakeToken already include a mapping for the snapshots, so we require contracts\r\n   * who inherit from this to provide access to the delegation data by overriding this method.\r\n   * @param delegationType the type of delegation\r\n   **/\r\n  function _getDelegationDataByType(DelegationType delegationType)\r\n    internal\r\n    virtual\r\n    view\r\n    returns (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\r\n      mapping(address => uint256) storage, //snapshots count\r\n      mapping(address => address) storage //delegatees list\r\n    );\r\n\r\n  /**\r\n   * @dev Writes a snapshot for an owner of tokens\r\n   * @param owner The owner of the tokens\r\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\r\n   * @param newValue The value after the operation\r\n   */\r\n  function _writeSnapshot(\r\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n    mapping(address => uint256) storage snapshotsCounts,\r\n    address owner,\r\n    uint128 oldValue,\r\n    uint128 newValue\r\n  ) internal {\r\n    uint128 currentBlock = uint128(block.number);\r\n\r\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\r\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\r\n\r\n    // Doing multiple operations in the same block\r\n    if (\r\n      ownerSnapshotsCount != 0 &&\r\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\r\n    ) {\r\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\r\n    } else {\r\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\r\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev returns the user delegatee. If a user never performed any delegation,\r\n   * his delegated address will be 0x0. In that case we simply return the user itself\r\n   * @param delegator the address of the user for which return the delegatee\r\n   * @param delegates the array of delegates for a particular type of delegation\r\n   **/\r\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    address previousDelegatee = delegates[delegator];\r\n\r\n    if (previousDelegatee == address(0)) {\r\n      return delegator;\r\n    }\r\n\r\n    return previousDelegatee;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/token/XpoolTokenV1.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice implementation of the Xpool token contract\r\n * @author Xpool\r\n */\r\ncontract XpoolTokenV1 is GovernancePowerDelegationERC20, VersionedInitializable {\r\n  using SafeMath for uint256;\r\n\r\n  string internal constant NAME = 'Xpool';\r\n  string internal constant SYMBOL = 'XPO';\r\n  uint8 internal constant DECIMALS = 18;\r\n\r\n  uint256 public constant REVISION = 1;\r\n\r\n  address public owner = 0x0B29814cf0d28b3F89C58FBEb3667fD1FF797de8;\r\n\r\n  /// @dev owner => next valid nonce to submit with permit()\r\n  mapping(address => uint256) public _nonces;\r\n\r\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\r\n\r\n  mapping(address => uint256) public _votingSnapshotsCounts;\r\n\r\n  /// @dev reference to the Xpool governance contract to call (if initialized) on _beforeTokenTransfer\r\n  /// !!! IMPORTANT The Xppol governance is considered a trustable contract, being its responsibility\r\n  /// to control all potential reentrancies by calling back the XpoolToken\r\n  ITransferHook public _xpoolGovernance;\r\n\r\n  bytes32 public DOMAIN_SEPARATOR;\r\n  bytes public constant EIP712_REVISION = bytes('1');\r\n  bytes32 internal constant EIP712_DOMAIN = keccak256(\r\n    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\r\n  );\r\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\r\n    'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\r\n  );\r\n\r\n  uint256 internal constant MINTED_AMOUNT = 210000000 ether;\r\n\r\n  mapping(address => address) internal _votingDelegates;\r\n\r\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\r\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\r\n\r\n  mapping(address => address) internal _propositionPowerDelegates;\r\n\r\n  constructor() public ERC20(NAME, SYMBOL) {}\r\n\r\n  /**\r\n   * @dev initializes the contract upon assignment to the InitializableAdminUpgradeabilityProxy\r\n   */\r\n  function initialize(\r\n    ITransferHook xpoolGovernance\r\n  ) external initializer {\r\n    uint256 chainId;\r\n\r\n    //solium-disable-next-line\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n\r\n    DOMAIN_SEPARATOR = keccak256(\r\n      abi.encode(\r\n        EIP712_DOMAIN,\r\n        keccak256(bytes(NAME)),\r\n        keccak256(EIP712_REVISION),\r\n        chainId,\r\n        address(this)\r\n      )\r\n    );\r\n    _name = NAME;\r\n    _symbol = SYMBOL;\r\n    _setupDecimals(DECIMALS);\r\n    _xpoolGovernance = xpoolGovernance;\r\n    _mint(msg.sender, MINTED_AMOUNT);\r\n  }\r\n\r\n  /**\r\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\r\n   * @param owner the owner of the funds\r\n   * @param spender the spender\r\n   * @param value the amount\r\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\r\n   * @param v signature param\r\n   * @param s signature param\r\n   * @param r signature param\r\n   */\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    require(owner != address(0), 'INVALID_OWNER');\r\n    //solium-disable-next-line\r\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\r\n    uint256 currentValidNonce = _nonces[owner];\r\n    bytes32 digest = keccak256(\r\n      abi.encodePacked(\r\n        '\\x19\\x01',\r\n        DOMAIN_SEPARATOR,\r\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\r\n      )\r\n    );\r\n\r\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\r\n    _nonces[owner] = currentValidNonce.add(1);\r\n    _approve(owner, spender, value);\r\n  }\r\n\r\n  /// @notice External function called by the Xpool governance to set or replace sources of assets\r\n  /// @param gov The addresses of the gorvernance\r\n  function setNewGorvernance(ITransferHook gov)\r\n    external\r\n  {\r\n    require(address(msg.sender) == owner, 'INVALID_ACTION');\r\n    _xpoolGovernance = gov;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the revision of the implementation contract\r\n   */\r\n  function getRevision() internal override pure returns (uint256) {\r\n    return REVISION;\r\n  }\r\n\r\n  /**\r\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\r\n   * - On _transfer, it writes snapshots for both \"from\" and \"to\"\r\n   * - On _mint, only for _to\r\n   * - On _burn, only for _from\r\n   * @param from the from address\r\n   * @param to the to address\r\n   * @param amount the amount to transfer\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal override {\r\n    address votingFromDelegatee = _getDelegatee(from, _votingDelegates);\r\n    address votingToDelegatee = _getDelegatee(to, _votingDelegates);\r\n\r\n    _moveDelegatesByType(\r\n      votingFromDelegatee,\r\n      votingToDelegatee,\r\n      amount,\r\n      DelegationType.VOTING_POWER\r\n    );\r\n\r\n    address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates);\r\n    address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates);\r\n\r\n    _moveDelegatesByType(\r\n      propPowerFromDelegatee,\r\n      propPowerToDelegatee,\r\n      amount,\r\n      DelegationType.PROPOSITION_POWER\r\n    );\r\n\r\n    // caching the xpool governance address to avoid multiple state loads\r\n    ITransferHook xpoolGovernance = _xpoolGovernance;\r\n    if (xpoolGovernance != ITransferHook(0)) {\r\n      xpoolGovernance.onTransfer(from, to, amount);\r\n    }\r\n  }\r\n\r\n  function _getDelegationDataByType(DelegationType delegationType)\r\n    internal\r\n    override\r\n    view\r\n    returns (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\r\n      mapping(address => uint256) storage, //snapshots count\r\n      mapping(address => address) storage //delegatees list\r\n    )\r\n  {\r\n    if (delegationType == DelegationType.VOTING_POWER) {\r\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\r\n    } else {\r\n      return (\r\n        _propositionPowerSnapshots,\r\n        _propositionPowerSnapshotsCounts,\r\n        _propositionPowerDelegates\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates power from signatory to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\r\n   * @param nonce The contract state required to match the signature\r\n   * @param expiry The time at which to expire the signature\r\n   * @param v The recovery byte of the signature\r\n   * @param r Half of the ECDSA signature pair\r\n   * @param s Half of the ECDSA signature pair\r\n   */\r\n  function delegateByTypeBySig(\r\n    address delegatee,\r\n    DelegationType delegationType,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public {\r\n    bytes32 structHash = keccak256(\r\n      abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\r\n    );\r\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), 'INVALID_SIGNATURE');\r\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\r\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\r\n    _delegateByType(signatory, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates power from signatory to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   * @param nonce The contract state required to match the signature\r\n   * @param expiry The time at which to expire the signature\r\n   * @param v The recovery byte of the signature\r\n   * @param r Half of the ECDSA signature pair\r\n   * @param s Half of the ECDSA signature pair\r\n   */\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public {\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\r\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), 'INVALID_SIGNATURE');\r\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\r\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\r\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\r\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_xpoolGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"xpoolGovernance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"setNewGorvernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XpoolTokenV1", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://435e76546b3be871221394d16f95a0be7bcb91cd6170054f11f78ec77003a019"}