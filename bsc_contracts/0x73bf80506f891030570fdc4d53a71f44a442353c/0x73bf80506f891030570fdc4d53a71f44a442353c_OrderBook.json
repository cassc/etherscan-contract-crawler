{"SourceCode": "// Sources flattened with hardhat v2.12.0 https://hardhat.org\r\n\r\n// File contracts/tokens/interfaces/IWETH.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IRouter.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRouter {\r\n    function addPlugin(address _plugin) external;\r\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\r\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/token/IERC20.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/ReentrancyGuard.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/Address.sol\r\n\r\n \r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/SafeERC20.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IOrderBook.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IOrderBook {\r\n\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address path0, \r\n        address path1,\r\n        address path2,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address purchaseToken, \r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function executeSwapOrder(address, uint256, address payable) external;\r\n    function executeDecreaseOrder(address, uint256, address payable) external;\r\n    function executeIncreaseOrder(address, uint256, address payable) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVaultUtils.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVaultUtils {\r\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\r\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\r\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\r\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\r\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\r\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVault.sol\r\n\r\n \r\n\r\npragma solidity 0.6.12;\r\ninterface IVault {\r\n    function isInitialized() external view returns (bool);\r\n    function isSwapEnabled() external view returns (bool);\r\n    function isLeverageEnabled() external view returns (bool);\r\n\r\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\r\n    function setError(uint256 _errorCode, string calldata _error) external;\r\n\r\n    function router() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function gov() external view returns (address);\r\n\r\n    function whitelistedTokenCount() external view returns (uint256);\r\n    function maxLeverage() external view returns (uint256);\r\n\r\n    function minProfitTime() external view returns (uint256);\r\n    function hasDynamicFees() external view returns (bool);\r\n    function fundingInterval() external view returns (uint256);\r\n    function totalTokenWeights() external view returns (uint256);\r\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\r\n\r\n    function inManagerMode() external view returns (bool);\r\n    function inPrivateLiquidationMode() external view returns (bool);\r\n\r\n    function maxGasPrice() external view returns (uint256);\r\n\r\n    function approvedRouters(address _account, address _router) external view returns (bool);\r\n    function isLiquidator(address _account) external view returns (bool);\r\n    function isManager(address _account) external view returns (bool);\r\n\r\n    function minProfitBasisPoints(address _token) external view returns (uint256);\r\n    function tokenBalances(address _token) external view returns (uint256);\r\n    function lastFundingTimes(address _token) external view returns (uint256);\r\n\r\n    function setMaxLeverage(uint256 _maxLeverage) external;\r\n    function setInManagerMode(bool _inManagerMode) external;\r\n    function setManager(address _manager, bool _isManager) external;\r\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\r\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\r\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\r\n    function setUsdgAmount(address _token, uint256 _amount) external;\r\n    function setBufferAmount(address _token, uint256 _amount) external;\r\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\r\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\r\n    function setLiquidator(address _liquidator, bool _isActive) external;\r\n\r\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\r\n\r\n    function setFees(\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _liquidationFeeUsd,\r\n        uint256 _minProfitTime,\r\n        bool _hasDynamicFees\r\n    ) external;\r\n\r\n    function setTokenConfig(\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _redemptionBps,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external;\r\n\r\n    function setPriceFeed(address _priceFeed) external;\r\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\r\n\r\n    function directPoolDeposit(address _token) external;\r\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\r\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\r\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\r\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\r\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\r\n\r\n    function priceFeed() external view returns (address);\r\n    function fundingRateFactor() external view returns (uint256);\r\n    function stableFundingRateFactor() external view returns (uint256);\r\n    function cumulativeFundingRates(address _token) external view returns (uint256);\r\n    function getNextFundingRate(address _token) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n\r\n    function liquidationFeeUsd() external view returns (uint256);\r\n    function taxBasisPoints() external view returns (uint256);\r\n    function stableTaxBasisPoints() external view returns (uint256);\r\n    function mintBurnFeeBasisPoints() external view returns (uint256);\r\n    function swapFeeBasisPoints() external view returns (uint256);\r\n    function stableSwapFeeBasisPoints() external view returns (uint256);\r\n    function marginFeeBasisPoints() external view returns (uint256);\r\n\r\n    function allWhitelistedTokensLength() external view returns (uint256);\r\n    function allWhitelistedTokens(uint256) external view returns (address);\r\n    function whitelistedTokens(address _token) external view returns (bool);\r\n    function stableTokens(address _token) external view returns (bool);\r\n    function shortableTokens(address _token) external view returns (bool);\r\n    function feeReserves(address _token) external view returns (uint256);\r\n    function globalShortSizes(address _token) external view returns (uint256);\r\n    function globalShortAveragePrices(address _token) external view returns (uint256);\r\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\r\n    function tokenDecimals(address _token) external view returns (uint256);\r\n    function tokenWeights(address _token) external view returns (uint256);\r\n    function guaranteedUsd(address _token) external view returns (uint256);\r\n    function poolAmounts(address _token) external view returns (uint256);\r\n    function bufferAmounts(address _token) external view returns (uint256);\r\n    function reservedAmounts(address _token) external view returns (uint256);\r\n    function usdgAmounts(address _token) external view returns (uint256);\r\n    function maxUsdgAmounts(address _token) external view returns (uint256);\r\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getMaxPrice(address _token) external view returns (uint256);\r\n    function getMinPrice(address _token) external view returns (uint256);\r\n\r\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\r\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\r\n}\r\n\r\n\r\n// File contracts/core/OrderBook.sol\r\n\r\n \r\n\r\npragma solidity ^0.6.0;\r\ncontract OrderBook is ReentrancyGuard, IOrderBook {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    uint256 public constant PRICE_PRECISION = 1e30;\r\n    uint256 public constant USDG_PRECISION = 1e18;\r\n\r\n    struct IncreaseOrder {\r\n        address account;\r\n        address purchaseToken;\r\n        uint256 purchaseTokenAmount;\r\n        address collateralToken;\r\n        address indexToken;\r\n        uint256 sizeDelta;\r\n        bool isLong;\r\n        uint256 triggerPrice;\r\n        bool triggerAboveThreshold;\r\n        uint256 executionFee;\r\n    }\r\n    struct DecreaseOrder {\r\n        address account;\r\n        address collateralToken;\r\n        uint256 collateralDelta;\r\n        address indexToken;\r\n        uint256 sizeDelta;\r\n        bool isLong;\r\n        uint256 triggerPrice;\r\n        bool triggerAboveThreshold;\r\n        uint256 executionFee;\r\n    }\r\n    struct SwapOrder {\r\n        address account;\r\n        address[] path;\r\n        uint256 amountIn;\r\n        uint256 minOut;\r\n        uint256 triggerRatio;\r\n        bool triggerAboveThreshold;\r\n        bool shouldUnwrap;\r\n        uint256 executionFee;\r\n    }\r\n\r\n    mapping (address => mapping(uint256 => IncreaseOrder)) public increaseOrders;\r\n    mapping (address => uint256) public increaseOrdersIndex;\r\n    mapping (address => mapping(uint256 => DecreaseOrder)) public decreaseOrders;\r\n    mapping (address => uint256) public decreaseOrdersIndex;\r\n    mapping (address => mapping(uint256 => SwapOrder)) public swapOrders;\r\n    mapping (address => uint256) public swapOrdersIndex;\r\n\r\n    address public gov;\r\n    address public weth;\r\n    address public usdg;\r\n    address public router;\r\n    address public vault;\r\n    uint256 public minExecutionFee;\r\n    uint256 public minPurchaseTokenAmountUsd;\r\n    bool public isInitialized = false;\r\n\r\n    event CreateIncreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address purchaseToken,\r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n    event CancelIncreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address purchaseToken,\r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n    event ExecuteIncreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address purchaseToken,\r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee,\r\n        uint256 executionPrice\r\n    );\r\n    event UpdateIncreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address collateralToken,\r\n        address indexToken,\r\n        bool isLong,\r\n        uint256 sizeDelta,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold\r\n    );\r\n    event CreateDecreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n    event CancelDecreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n    event ExecuteDecreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee,\r\n        uint256 executionPrice\r\n    );\r\n    event UpdateDecreaseOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold\r\n    );\r\n    event CreateSwapOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address[] path,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n    event CancelSwapOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address[] path,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n    event UpdateSwapOrder(\r\n        address indexed account,\r\n        uint256 ordexIndex,\r\n        address[] path,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n    event ExecuteSwapOrder(\r\n        address indexed account,\r\n        uint256 orderIndex,\r\n        address[] path,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 amountOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n\r\n    event Initialize(\r\n        address router,\r\n        address vault,\r\n        address weth,\r\n        address usdg,\r\n        uint256 minExecutionFee,\r\n        uint256 minPurchaseTokenAmountUsd\r\n    );\r\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\r\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\r\n    event UpdateGov(address gov);\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"OrderBook: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    function initialize(\r\n        address _router,\r\n        address _vault,\r\n        address _weth,\r\n        address _usdg,\r\n        uint256 _minExecutionFee,\r\n        uint256 _minPurchaseTokenAmountUsd\r\n    ) external onlyGov {\r\n        require(!isInitialized, \"OrderBook: already initialized\");\r\n        isInitialized = true;\r\n\r\n        router = _router;\r\n        vault = _vault;\r\n        weth = _weth;\r\n        usdg = _usdg;\r\n        minExecutionFee = _minExecutionFee;\r\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\r\n\r\n        emit Initialize(_router, _vault, _weth, _usdg, _minExecutionFee, _minPurchaseTokenAmountUsd);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == weth, \"OrderBook: invalid sender\");\r\n    }\r\n\r\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyGov {\r\n        minExecutionFee = _minExecutionFee;\r\n\r\n        emit UpdateMinExecutionFee(_minExecutionFee);\r\n    }\r\n\r\n    function setMinPurchaseTokenAmountUsd(uint256 _minPurchaseTokenAmountUsd) external onlyGov {\r\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\r\n\r\n        emit UpdateMinPurchaseTokenAmountUsd(_minPurchaseTokenAmountUsd);\r\n    }\r\n\r\n    function setGov(address _gov) external onlyGov {\r\n        gov = _gov;\r\n\r\n        emit UpdateGov(_gov);\r\n    }\r\n\r\n    function getSwapOrder(address _account, uint256 _orderIndex) override public view returns (\r\n        address path0,\r\n        address path1,\r\n        address path2,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    ) {\r\n        SwapOrder memory order = swapOrders[_account][_orderIndex];\r\n        return (\r\n            order.path.length > 0 ? order.path[0] : address(0),\r\n            order.path.length > 1 ? order.path[1] : address(0),\r\n            order.path.length > 2 ? order.path[2] : address(0),\r\n            order.amountIn,\r\n            order.minOut,\r\n            order.triggerRatio,\r\n            order.triggerAboveThreshold,\r\n            order.shouldUnwrap,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function createSwapOrder(\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        uint256 _minOut,\r\n        uint256 _triggerRatio, // tokenB / tokenA\r\n        bool _triggerAboveThreshold,\r\n        uint256 _executionFee,\r\n        bool _shouldWrap,\r\n        bool _shouldUnwrap\r\n    ) external payable nonReentrant {\r\n        require(_path.length == 2 || _path.length == 3, \"OrderBook: invalid _path.length\");\r\n        require(_path[0] != _path[_path.length - 1], \"OrderBook: invalid _path\");\r\n        require(_amountIn > 0, \"OrderBook: invalid _amountIn\");\r\n        require(_executionFee >= minExecutionFee, \"OrderBook: insufficient execution fee\");\r\n\r\n        // always need this call because of mandatory executionFee user has to transfer in ETH\r\n        _transferInETH();\r\n\r\n        if (_shouldWrap) {\r\n            require(_path[0] == weth, \"OrderBook: only weth could be wrapped\");\r\n            require(msg.value == _executionFee.add(_amountIn), \"OrderBook: incorrect value transferred\");\r\n        } else {\r\n            require(msg.value == _executionFee, \"OrderBook: incorrect execution fee transferred\");\r\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\r\n        }\r\n\r\n        _createSwapOrder(msg.sender, _path, _amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, _shouldUnwrap, _executionFee);\r\n    }\r\n\r\n    function _createSwapOrder(\r\n        address _account,\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        uint256 _minOut,\r\n        uint256 _triggerRatio,\r\n        bool _triggerAboveThreshold,\r\n        bool _shouldUnwrap,\r\n        uint256 _executionFee\r\n    ) private {\r\n        uint256 _orderIndex = swapOrdersIndex[_account];\r\n        SwapOrder memory order = SwapOrder(\r\n            _account,\r\n            _path,\r\n            _amountIn,\r\n            _minOut,\r\n            _triggerRatio,\r\n            _triggerAboveThreshold,\r\n            _shouldUnwrap,\r\n            _executionFee\r\n        );\r\n        swapOrdersIndex[_account] = _orderIndex.add(1);\r\n        swapOrders[_account][_orderIndex] = order;\r\n\r\n        emit CreateSwapOrder(\r\n            _account,\r\n            _orderIndex,\r\n            _path,\r\n            _amountIn,\r\n            _minOut,\r\n            _triggerRatio,\r\n            _triggerAboveThreshold,\r\n            _shouldUnwrap,\r\n            _executionFee\r\n        );\r\n    }\r\n\r\n    function cancelMultiple(\r\n        uint256[] memory _swapOrderIndexes,\r\n        uint256[] memory _increaseOrderIndexes,\r\n        uint256[] memory _decreaseOrderIndexes\r\n    ) external {\r\n        for (uint256 i = 0; i < _swapOrderIndexes.length; i++) {\r\n            cancelSwapOrder(_swapOrderIndexes[i]);\r\n        }\r\n        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\r\n            cancelIncreaseOrder(_increaseOrderIndexes[i]);\r\n        }\r\n        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\r\n            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\r\n        }\r\n    }\r\n\r\n    function cancelSwapOrder(uint256 _orderIndex) public nonReentrant {\r\n        SwapOrder memory order = swapOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        delete swapOrders[msg.sender][_orderIndex];\r\n\r\n        if (order.path[0] == weth) {\r\n            _transferOutETH(order.executionFee.add(order.amountIn), msg.sender);\r\n        } else {\r\n            IERC20(order.path[0]).safeTransfer(msg.sender, order.amountIn);\r\n            _transferOutETH(order.executionFee, msg.sender);\r\n        }\r\n\r\n        emit CancelSwapOrder(\r\n            msg.sender,\r\n            _orderIndex,\r\n            order.path,\r\n            order.amountIn,\r\n            order.minOut,\r\n            order.triggerRatio,\r\n            order.triggerAboveThreshold,\r\n            order.shouldUnwrap,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function getUsdgMinPrice(address _otherToken) public view returns (uint256) {\r\n        // USDG_PRECISION is the same as 1 USDG\r\n        uint256 redemptionAmount = IVault(vault).getRedemptionAmount(_otherToken, USDG_PRECISION);\r\n        uint256 otherTokenPrice = IVault(vault).getMinPrice(_otherToken);\r\n\r\n        uint256 otherTokenDecimals = IVault(vault).tokenDecimals(_otherToken);\r\n        return redemptionAmount.mul(otherTokenPrice).div(10 ** otherTokenDecimals);\r\n    }\r\n\r\n    function validateSwapOrderPriceWithTriggerAboveThreshold(\r\n        address[] memory _path,\r\n        uint256 _triggerRatio\r\n    ) public view returns (bool) {\r\n        require(_path.length == 2 || _path.length == 3, \"OrderBook: invalid _path.length\");\r\n\r\n        // limit orders don't need this validation because minOut is enough\r\n        // so this validation handles scenarios for stop orders only\r\n        // when a user wants to swap when a price of tokenB increases relative to tokenA\r\n        address tokenA = _path[0];\r\n        address tokenB = _path[_path.length - 1];\r\n        uint256 tokenAPrice;\r\n        uint256 tokenBPrice;\r\n\r\n        // 1. USDG doesn't have a price feed so we need to calculate it based on redepmtion amount of a specific token\r\n        // That's why USDG price in USD can vary depending on the redepmtion token\r\n        // 2. In complex scenarios with path=[USDG, BNB, BTC] we need to know how much BNB we'll get for provided USDG\r\n        // to know how much BTC will be received\r\n        // That's why in such scenario BNB should be used to determine price of USDG\r\n        if (tokenA == usdg) {\r\n            // with both _path.length == 2 or 3 we need usdg price against _path[1]\r\n            tokenAPrice = getUsdgMinPrice(_path[1]);\r\n        } else {\r\n            tokenAPrice = IVault(vault).getMinPrice(tokenA);\r\n        }\r\n\r\n        if (tokenB == usdg) {\r\n            tokenBPrice = PRICE_PRECISION;\r\n        } else {\r\n            tokenBPrice = IVault(vault).getMaxPrice(tokenB);\r\n        }\r\n\r\n        uint256 currentRatio = tokenBPrice.mul(PRICE_PRECISION).div(tokenAPrice);\r\n\r\n        bool isValid = currentRatio > _triggerRatio;\r\n        return isValid;\r\n    }\r\n\r\n    function updateSwapOrder(uint256 _orderIndex, uint256 _minOut, uint256 _triggerRatio, bool _triggerAboveThreshold) external nonReentrant {\r\n        SwapOrder storage order = swapOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        order.minOut = _minOut;\r\n        order.triggerRatio = _triggerRatio;\r\n        order.triggerAboveThreshold = _triggerAboveThreshold;\r\n\r\n        emit UpdateSwapOrder(\r\n            msg.sender,\r\n            _orderIndex,\r\n            order.path,\r\n            order.amountIn,\r\n            _minOut,\r\n            _triggerRatio,\r\n            _triggerAboveThreshold,\r\n            order.shouldUnwrap,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\r\n        SwapOrder memory order = swapOrders[_account][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        if (order.triggerAboveThreshold) {\r\n            // gas optimisation\r\n            // order.minAmount should prevent wrong price execution in case of simple limit order\r\n            require(\r\n                validateSwapOrderPriceWithTriggerAboveThreshold(order.path, order.triggerRatio),\r\n                \"OrderBook: invalid price for execution\"\r\n            );\r\n        }\r\n\r\n        delete swapOrders[_account][_orderIndex];\r\n\r\n        IERC20(order.path[0]).safeTransfer(vault, order.amountIn);\r\n\r\n        uint256 _amountOut;\r\n        if (order.path[order.path.length - 1] == weth && order.shouldUnwrap) {\r\n            _amountOut = _swap(order.path, order.minOut, address(this));\r\n            _transferOutETH(_amountOut, payable(order.account));\r\n        } else {\r\n            _amountOut = _swap(order.path, order.minOut, order.account);\r\n        }\r\n\r\n        // pay executor\r\n        _transferOutETH(order.executionFee, _feeReceiver);\r\n\r\n        emit ExecuteSwapOrder(\r\n            _account,\r\n            _orderIndex,\r\n            order.path,\r\n            order.amountIn,\r\n            order.minOut,\r\n            _amountOut,\r\n            order.triggerRatio,\r\n            order.triggerAboveThreshold,\r\n            order.shouldUnwrap,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function validatePositionOrderPrice(\r\n        bool _triggerAboveThreshold,\r\n        uint256 _triggerPrice,\r\n        address _indexToken,\r\n        bool _maximizePrice,\r\n        bool _raise\r\n    ) public view returns (uint256, bool) {\r\n        uint256 currentPrice = _maximizePrice\r\n            ? IVault(vault).getMaxPrice(_indexToken) : IVault(vault).getMinPrice(_indexToken);\r\n        bool isPriceValid = _triggerAboveThreshold ? currentPrice > _triggerPrice : currentPrice < _triggerPrice;\r\n        if (_raise) {\r\n            require(isPriceValid, \"OrderBook: invalid price for execution\");\r\n        }\r\n        return (currentPrice, isPriceValid);\r\n    }\r\n\r\n    function getDecreaseOrder(address _account, uint256 _orderIndex) override public view returns (\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    ) {\r\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\r\n        return (\r\n            order.collateralToken,\r\n            order.collateralDelta,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function getIncreaseOrder(address _account, uint256 _orderIndex) override public view returns (\r\n        address purchaseToken,\r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    ) {\r\n        IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\r\n        return (\r\n            order.purchaseToken,\r\n            order.purchaseTokenAmount,\r\n            order.collateralToken,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function createIncreaseOrder(\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        address _indexToken,\r\n        uint256 _minOut,\r\n        uint256 _sizeDelta,\r\n        address _collateralToken,\r\n        bool _isLong,\r\n        uint256 _triggerPrice,\r\n        bool _triggerAboveThreshold,\r\n        uint256 _executionFee,\r\n        bool _shouldWrap\r\n    ) external payable nonReentrant {\r\n        // always need this call because of mandatory executionFee user has to transfer in ETH\r\n        _transferInETH();\r\n\r\n        require(_executionFee >= minExecutionFee, \"OrderBook: insufficient execution fee\");\r\n        if (_shouldWrap) {\r\n            require(_path[0] == weth, \"OrderBook: only weth could be wrapped\");\r\n            require(msg.value == _executionFee.add(_amountIn), \"OrderBook: incorrect value transferred\");\r\n        } else {\r\n            require(msg.value == _executionFee, \"OrderBook: incorrect execution fee transferred\");\r\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\r\n        }\r\n\r\n        address _purchaseToken = _path[_path.length - 1];\r\n        uint256 _purchaseTokenAmount;\r\n        if (_path.length > 1) {\r\n            require(_path[0] != _purchaseToken, \"OrderBook: invalid _path\");\r\n            IERC20(_path[0]).safeTransfer(vault, _amountIn);\r\n            _purchaseTokenAmount = _swap(_path, _minOut, address(this));\r\n        } else {\r\n            _purchaseTokenAmount = _amountIn;\r\n        }\r\n\r\n        {\r\n            uint256 _purchaseTokenAmountUsd = IVault(vault).tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\r\n            require(_purchaseTokenAmountUsd >= minPurchaseTokenAmountUsd, \"OrderBook: insufficient collateral\");\r\n        }\r\n\r\n        _createIncreaseOrder(\r\n            msg.sender,\r\n            _purchaseToken,\r\n            _purchaseTokenAmount,\r\n            _collateralToken,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold,\r\n            _executionFee\r\n        );\r\n    }\r\n\r\n    function _createIncreaseOrder(\r\n        address _account,\r\n        address _purchaseToken,\r\n        uint256 _purchaseTokenAmount,\r\n        address _collateralToken,\r\n        address _indexToken,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _triggerPrice,\r\n        bool _triggerAboveThreshold,\r\n        uint256 _executionFee\r\n    ) private {\r\n        uint256 _orderIndex = increaseOrdersIndex[msg.sender];\r\n        IncreaseOrder memory order = IncreaseOrder(\r\n            _account,\r\n            _purchaseToken,\r\n            _purchaseTokenAmount,\r\n            _collateralToken,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold,\r\n            _executionFee\r\n        );\r\n        increaseOrdersIndex[_account] = _orderIndex.add(1);\r\n        increaseOrders[_account][_orderIndex] = order;\r\n\r\n        emit CreateIncreaseOrder(\r\n            _account,\r\n            _orderIndex,\r\n            _purchaseToken,\r\n            _purchaseTokenAmount,\r\n            _collateralToken,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold,\r\n            _executionFee\r\n        );\r\n    }\r\n\r\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\r\n        IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        order.triggerPrice = _triggerPrice;\r\n        order.triggerAboveThreshold = _triggerAboveThreshold;\r\n        order.sizeDelta = _sizeDelta;\r\n\r\n        emit UpdateIncreaseOrder(\r\n            msg.sender,\r\n            _orderIndex,\r\n            order.collateralToken,\r\n            order.indexToken,\r\n            order.isLong,\r\n            _sizeDelta,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold\r\n        );\r\n    }\r\n\r\n    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\r\n        IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        delete increaseOrders[msg.sender][_orderIndex];\r\n\r\n        if (order.purchaseToken == weth) {\r\n            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\r\n        } else {\r\n            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\r\n            _transferOutETH(order.executionFee, msg.sender);\r\n        }\r\n\r\n        emit CancelIncreaseOrder(\r\n            order.account,\r\n            _orderIndex,\r\n            order.purchaseToken,\r\n            order.purchaseTokenAmount,\r\n            order.collateralToken,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\r\n        IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        // increase long should use max price\r\n        // increase short should use min price\r\n        (uint256 currentPrice, ) = validatePositionOrderPrice(\r\n            order.triggerAboveThreshold,\r\n            order.triggerPrice,\r\n            order.indexToken,\r\n            order.isLong,\r\n            true\r\n        );\r\n\r\n        delete increaseOrders[_address][_orderIndex];\r\n\r\n        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\r\n\r\n        if (order.purchaseToken != order.collateralToken) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = order.purchaseToken;\r\n            path[1] = order.collateralToken;\r\n\r\n            uint256 amountOut = _swap(path, 0, address(this));\r\n            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\r\n        }\r\n\r\n        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\r\n\r\n        // pay executor\r\n        _transferOutETH(order.executionFee, _feeReceiver);\r\n\r\n        emit ExecuteIncreaseOrder(\r\n            order.account,\r\n            _orderIndex,\r\n            order.purchaseToken,\r\n            order.purchaseTokenAmount,\r\n            order.collateralToken,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee,\r\n            currentPrice\r\n        );\r\n    }\r\n\r\n    function createDecreaseOrder(\r\n        address _indexToken,\r\n        uint256 _sizeDelta,\r\n        address _collateralToken,\r\n        uint256 _collateralDelta,\r\n        bool _isLong,\r\n        uint256 _triggerPrice,\r\n        bool _triggerAboveThreshold\r\n    ) external payable nonReentrant {\r\n        _transferInETH();\r\n\r\n        require(msg.value > minExecutionFee, \"OrderBook: insufficient execution fee\");\r\n\r\n        _createDecreaseOrder(\r\n            msg.sender,\r\n            _collateralToken,\r\n            _collateralDelta,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold\r\n        );\r\n    }\r\n\r\n    function _createDecreaseOrder(\r\n        address _account,\r\n        address _collateralToken,\r\n        uint256 _collateralDelta,\r\n        address _indexToken,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _triggerPrice,\r\n        bool _triggerAboveThreshold\r\n    ) private {\r\n        uint256 _orderIndex = decreaseOrdersIndex[_account];\r\n        DecreaseOrder memory order = DecreaseOrder(\r\n            _account,\r\n            _collateralToken,\r\n            _collateralDelta,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold,\r\n            msg.value\r\n        );\r\n        decreaseOrdersIndex[_account] = _orderIndex.add(1);\r\n        decreaseOrders[_account][_orderIndex] = order;\r\n\r\n        emit CreateDecreaseOrder(\r\n            _account,\r\n            _orderIndex,\r\n            _collateralToken,\r\n            _collateralDelta,\r\n            _indexToken,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\r\n        DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        // decrease long should use min price\r\n        // decrease short should use max price\r\n        (uint256 currentPrice, ) = validatePositionOrderPrice(\r\n            order.triggerAboveThreshold,\r\n            order.triggerPrice,\r\n            order.indexToken,\r\n            !order.isLong,\r\n            true\r\n        );\r\n\r\n        delete decreaseOrders[_address][_orderIndex];\r\n\r\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(\r\n            order.account,\r\n            order.collateralToken,\r\n            order.indexToken,\r\n            order.collateralDelta,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            address(this)\r\n        );\r\n\r\n        // transfer released collateral to user\r\n        if (order.collateralToken == weth) {\r\n            _transferOutETH(amountOut, payable(order.account));\r\n        } else {\r\n            IERC20(order.collateralToken).safeTransfer(order.account, amountOut);\r\n        }\r\n\r\n        // pay executor\r\n        _transferOutETH(order.executionFee, _feeReceiver);\r\n\r\n        emit ExecuteDecreaseOrder(\r\n            order.account,\r\n            _orderIndex,\r\n            order.collateralToken,\r\n            order.collateralDelta,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee,\r\n            currentPrice\r\n        );\r\n    }\r\n\r\n    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\r\n        DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        delete decreaseOrders[msg.sender][_orderIndex];\r\n        _transferOutETH(order.executionFee, msg.sender);\r\n\r\n        emit CancelDecreaseOrder(\r\n            order.account,\r\n            _orderIndex,\r\n            order.collateralToken,\r\n            order.collateralDelta,\r\n            order.indexToken,\r\n            order.sizeDelta,\r\n            order.isLong,\r\n            order.triggerPrice,\r\n            order.triggerAboveThreshold,\r\n            order.executionFee\r\n        );\r\n    }\r\n\r\n    function updateDecreaseOrder(\r\n        uint256 _orderIndex,\r\n        uint256 _collateralDelta,\r\n        uint256 _sizeDelta,\r\n        uint256 _triggerPrice,\r\n        bool _triggerAboveThreshold\r\n    ) external nonReentrant {\r\n        DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\r\n        require(order.account != address(0), \"OrderBook: non-existent order\");\r\n\r\n        order.triggerPrice = _triggerPrice;\r\n        order.triggerAboveThreshold = _triggerAboveThreshold;\r\n        order.sizeDelta = _sizeDelta;\r\n        order.collateralDelta = _collateralDelta;\r\n\r\n        emit UpdateDecreaseOrder(\r\n            msg.sender,\r\n            _orderIndex,\r\n            order.collateralToken,\r\n            _collateralDelta,\r\n            order.indexToken,\r\n            _sizeDelta,\r\n            order.isLong,\r\n            _triggerPrice,\r\n            _triggerAboveThreshold\r\n        );\r\n    }\r\n\r\n    function _transferInETH() private {\r\n        if (msg.value != 0) {\r\n            IWETH(weth).deposit{value: msg.value}();\r\n        }\r\n    }\r\n\r\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\r\n        IWETH(weth).withdraw(_amountOut);\r\n        _receiver.sendValue(_amountOut);\r\n    }\r\n\r\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) private returns (uint256) {\r\n        if (_path.length == 2) {\r\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\r\n        }\r\n        if (_path.length == 3) {\r\n            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\r\n            IERC20(_path[1]).safeTransfer(vault, midOut);\r\n            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\r\n        }\r\n\r\n        revert(\"OrderBook: invalid _path.length\");\r\n    }\r\n\r\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) private returns (uint256) {\r\n        uint256 amountOut;\r\n\r\n        if (_tokenOut == usdg) { // buyUSDG\r\n            amountOut = IVault(vault).buyUSDG(_tokenIn, _receiver);\r\n        } else if (_tokenIn == usdg) { // sellUSDG\r\n            amountOut = IVault(vault).sellUSDG(_tokenOut, _receiver);\r\n        } else { // swap\r\n            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\r\n        }\r\n\r\n        require(amountOut >= _minOut, \"OrderBook: insufficient amountOut\");\r\n        return amountOut;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CancelDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CancelIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CancelSwapOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CreateDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CreateIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"CreateSwapOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionPrice\",\"type\":\"uint256\"}],\"name\":\"ExecuteDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionPrice\",\"type\":\"uint256\"}],\"name\":\"ExecuteIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"ExecuteSwapOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExecutionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"UpdateDecreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"UpdateGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"UpdateIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinExecutionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"UpdateMinPurchaseTokenAmountUsd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ordexIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapOrder\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_swapOrderIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_increaseOrderIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"createDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldWrap\",\"type\":\"bool\"}],\"name\":\"createIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldWrap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldUnwrap\",\"type\":\"bool\"}],\"name\":\"createSwapOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getSwapOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"path0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"path1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"path2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"getUsdgMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchaseTokenAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseTokenAmountUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximizePrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validatePositionOrderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_triggerRatio\",\"type\":\"uint256\"}],\"name\":\"validateSwapOrderPriceWithTriggerAboveThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OrderBook", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5192d5adb273615b87c0c741fbc807fbb37d7e8b65eda05284ec6d6c7f6b0cbb"}