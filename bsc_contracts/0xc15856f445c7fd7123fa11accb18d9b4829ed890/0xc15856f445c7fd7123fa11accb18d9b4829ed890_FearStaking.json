{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/deployed/FearStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface for contract which allows to pause and unpause the contract.\\r\\n */\\r\\ninterface IPausable {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n    * @dev Pauses the contract.\\r\\n    */\\r\\n    function pause() external;\\r\\n\\r\\n    /**\\r\\n    * @dev Unpauses the contract.\\r\\n    */\\r\\n    function unpause() external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of a contract containing identifier for Pauser role.\\r\\n */\\r\\ninterface IRoleContainerPauser {\\r\\n    /**\\r\\n    * @dev Returns Pauser role identifier.\\r\\n    */\\r\\n    function PAUSER_ROLE() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of a contract containing identifier for Root role.\\r\\n */\\r\\ninterface IRoleContainerRoot {\\r\\n    /**\\r\\n    * @dev Returns Root role identifier.\\r\\n    */\\r\\n    function ROOT_ROLE() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of a contract containing identifier for Admin role.\\r\\n */\\r\\ninterface IRoleContainerAdmin {\\r\\n    /**\\r\\n    * @dev Returns Admin role identifier.\\r\\n    */\\r\\n    function ADMIN_ROLE() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via _msgSender() and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toString(bytes32 value) internal pure returns (string memory) {\\r\\n        uint8 i = 0;\\r\\n        while(i < 32 && value[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && value[i] != 0; i++) {\\r\\n            bytesArray[i] = value[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Storage based implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165Storage is ERC165 {\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId] || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, _msgSender()));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n */\\r\\nabstract contract AccessControl is Context, ERC165Storage, IAccessControl, IRoleContainerAdmin {\\r\\n    /**\\r\\n    * @dev Root Admin role identifier.\\r\\n    */\\r\\n    bytes32 public constant ROOT_ROLE = \\\"Root\\\";\\r\\n\\r\\n    /**\\r\\n    * @dev Admin role identifier.\\r\\n    */\\r\\n    bytes32 public constant ADMIN_ROLE = \\\"Admin\\\";\\r\\n\\r\\n    /**\\r\\n    * @dev Manager role identifier.\\r\\n    */\\r\\n    bytes32 public constant MANAGER_ROLE = \\\"Manager\\\";\\r\\n\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(type(IAccessControl).interfaceId);\\r\\n\\r\\n        _setupRole(ROOT_ROLE, _msgSender());\\r\\n        _setRoleAdmin(ADMIN_ROLE, ROOT_ROLE);\\r\\n        _setRoleAdmin(MANAGER_ROLE, ROOT_ROLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role, _msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toString(role)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) private {\\r\\n        _grantRole(role, account);\\r\\n        _setRoleAdmin(role, ROOT_ROLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\ncontract Pausable is AccessControl, IPausable, IRoleContainerPauser {\\r\\n    /**\\r\\n    * @dev Pauser role identifier.\\r\\n    */\\r\\n    bytes32 public constant PAUSER_ROLE = \\\"Pauser\\\";\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _registerInterface(type(IPausable).interfaceId);\\r\\n\\r\\n        _setRoleAdmin(PAUSER_ROLE, ROOT_ROLE);\\r\\n\\r\\n        _paused = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n    * @dev This function is called before pausing the contract.\\r\\n    * Override to add custom pausing conditions or actions.\\r\\n    */\\r\\n    function _beforePause() internal virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function is called before unpausing the contract.\\r\\n    * Override to add custom unpausing conditions or actions.\\r\\n    */\\r\\n    function _beforeUnpause() internal virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Pauses the contract.\\r\\n    * Requirements:\\r\\n    * - Caller must have 'PAUSER_ROLE';\\r\\n    * - Contract must be unpaused.\\r\\n    */\\r\\n    function pause() external onlyRole(PAUSER_ROLE) whenNotPaused {\\r\\n        _beforePause();\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Unpauses the contract.\\r\\n    * Requirements:\\r\\n    * - Caller must have 'PAUSER_ROLE';\\r\\n    * - Contract must be unpaused;\\r\\n    */\\r\\n    function unpause() external onlyRole(PAUSER_ROLE) whenPaused {\\r\\n        _beforeUnpause();\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows to perform basic checks on arguments.\\r\\n */\\r\\nabstract contract RequirementsChecker {\\r\\n    uint256 internal constant inf = type(uint256).max;\\r\\n\\r\\n    function _requireNonZeroAddress(address _address, string memory paramName) internal pure {\\r\\n        require(_address != address(0), string(abi.encodePacked(paramName, \\\": cannot use zero address\\\")));\\r\\n    }\\r\\n\\r\\n    function _requireArrayData(address[] memory _array, string memory paramName) internal pure {\\r\\n        require(_array.length != 0, string(abi.encodePacked(paramName, \\\": cannot be empty\\\")));\\r\\n    }\\r\\n\\r\\n    function _requireArrayData(uint256[] memory _array, string memory paramName) internal pure {\\r\\n        require(_array.length != 0, string(abi.encodePacked(paramName, \\\": cannot be empty\\\")));\\r\\n    }\\r\\n\\r\\n    function _requireStringData(string memory _string, string memory paramName) internal pure {\\r\\n        require(bytes(_string).length != 0, string(abi.encodePacked(paramName, \\\": cannot be empty\\\")));\\r\\n    }\\r\\n\\r\\n    function _requireSameLengthArrays(address[] memory _array1, uint256[] memory _array2, string memory paramName1, string memory paramName2) internal pure {\\r\\n        require(_array1.length == _array2.length, string(abi.encodePacked(paramName1, \\\", \\\", paramName2, \\\": lengths must be equal\\\")));\\r\\n    }\\r\\n\\r\\n    function _requireInRange(uint256 value, uint256 minValue, uint256 maxValue, string memory paramName) internal pure {\\r\\n        string memory maxValueString = maxValue == inf ? \\\"inf\\\" : Strings.toString(maxValue);\\r\\n        require(minValue <= value && (maxValue == inf || value <= maxValue), string(abi.encodePacked(paramName, \\\": must be in [\\\", Strings.toString(minValue), \\\"..\\\", maxValueString, \\\"] range\\\")));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of a contract module which allows to withdraw assets.\\r\\n */\\r\\ninterface IWithdrawable {\\r\\n    /**\\r\\n     * @dev Emitted when network main currency withdrawal occurs.\\r\\n     */\\r\\n    event Withdrawal(address to, string reason);\\r\\n    /**\\r\\n     * @dev Emitted when ERC20 asset withdrawal occurs.\\r\\n     */\\r\\n    event WithdrawalERC20(address asset, address to, string reason);\\r\\n    /**\\r\\n     * @dev Emitted when ERC721 asset withdrawal occurs.\\r\\n     */\\r\\n    event WithdrawalERC721(address asset, uint256[] ids, address to, string reason);\\r\\n    /**\\r\\n     * @dev Emitted when ERC1155 asset withdrawal occurs.\\r\\n     */\\r\\n    event WithdrawalERC1155(address asset, uint256[] ids, address to, string reason);\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balance of the network main currency.\\r\\n    * Emits a {Withdrawal} event.\\r\\n    */\\r\\n    function withdraw(address payable to, string calldata reason) external;\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balance of specified ERC20 asset.\\r\\n    * Emits a {WithdrawalERC20} event.\\r\\n    */\\r\\n    function withdrawERC20(address asset, address to, string calldata reason) external;\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all of specified ERC721 asset with ids.\\r\\n    * Emits a {WithdrawalERC721} event.\\r\\n    */\\r\\n    function withdrawERC721(address asset, uint256[] calldata ids, address to, string calldata reason) external;\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balances of specified ERC1155 asset with ids.\\r\\n    * Emits a {WithdrawalERC1155} event.\\r\\n    */\\r\\n    function withdrawERC1155(address asset, uint256[] calldata ids, address to, string calldata reason) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver is IERC165 {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC721Receiver} interface.\\r\\n */\\r\\nabstract contract ERC721Holder is ERC165Storage, IERC721Receiver {\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(type(IERC721Receiver).interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of extension of {IERC165} that allows to handle receipts on receiving {IERC1155} assets.\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. _msgSender())\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. _msgSender())\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\r\\n *\\r\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be stuck.\\r\\n */\\r\\ncontract ERC1155Holder is ERC165Storage, IERC1155Receiver {\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(type(IERC1155Receiver).interfaceId);\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory,\\r\\n        uint256[] memory,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows authorized account to withdraw assets in case of emergency.\\r\\n */\\r\\nabstract contract Withdrawable is AccessControl, RequirementsChecker, ERC721Holder, ERC1155Holder, IWithdrawable {\\r\\n\\r\\n    constructor () {\\r\\n        _registerInterface(type(IWithdrawable).interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balance of the network main currency.\\r\\n    * Emits a {Withdrawal} event.\\r\\n    */\\r\\n    function withdraw(address payable to, string calldata reason) external onlyRole(ADMIN_ROLE) {\\r\\n        _requireNonZeroAddress(to, \\\"to\\\");\\r\\n        _requireStringData(reason, \\\"reason\\\");\\r\\n        _beforeWithdrawal(to);\\r\\n\\r\\n        (bool success,) = to.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Withdraw failed\\\");\\r\\n        emit Withdrawal(to, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balance of specified ERC20 asset.\\r\\n    * Emits a {WithdrawalERC20} event.\\r\\n    */\\r\\n    function withdrawERC20(address asset, address to, string calldata reason) external onlyRole(ADMIN_ROLE) {\\r\\n        _requireNonZeroAddress(asset, \\\"asset\\\");\\r\\n        _requireNonZeroAddress(to, \\\"to\\\");\\r\\n        _requireStringData(reason, \\\"reason\\\");\\r\\n        _beforeWithdrawalERC20(asset, to);\\r\\n\\r\\n        IERC20 token = IERC20(asset);        \\r\\n        token.transfer(to, token.balanceOf(address(this)));\\r\\n        emit WithdrawalERC20(asset, to, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all of specified ERC721 asset with ids.\\r\\n    * Emits a {WithdrawalERC721} event.\\r\\n    */\\r\\n    function withdrawERC721(address asset, uint256[] calldata ids, address to, string calldata reason) external onlyRole(ADMIN_ROLE) {\\r\\n        _requireNonZeroAddress(asset, \\\"asset\\\");\\r\\n        _requireNonZeroAddress(to, \\\"to\\\");\\r\\n        _requireArrayData(ids, \\\"ids\\\");\\r\\n        _requireStringData(reason, \\\"reason\\\");\\r\\n        _beforeWithdrawalERC721(asset, ids, to);\\r\\n\\r\\n        IERC721 token = IERC721(asset);\\r\\n        for(uint i = 0; i < ids.length; i++)\\r\\n            token.safeTransferFrom(address(this), to, ids[i], \\\"\\\");\\r\\n        emit WithdrawalERC721(asset, ids, to, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Withdraws all balances of specified ERC1155 asset with ids.\\r\\n    * Emits a {WithdrawalERC1155} event.\\r\\n    */\\r\\n    function withdrawERC1155(address asset, uint256[] calldata ids, address to, string calldata reason) external onlyRole(ADMIN_ROLE) {\\r\\n        _requireNonZeroAddress(asset, \\\"asset\\\");\\r\\n        _requireNonZeroAddress(to, \\\"to\\\");\\r\\n        _requireArrayData(ids, \\\"ids\\\");\\r\\n        _requireStringData(reason, \\\"reason\\\");\\r\\n        _beforeWithdrawalERC1155(asset, ids, to);\\r\\n\\r\\n        IERC1155 token = IERC1155(asset);\\r\\n\\r\\n        address[] memory addresses = new address[](ids.length);\\r\\n        for(uint i = 0; i < ids.length; i++)\\r\\n            addresses[i] = address(this); // actually only this one, but multiple times to call balanceOfBatch\\r\\n\\r\\n        uint256[] memory balances = token.balanceOfBatch(addresses, ids);\\r\\n        token.safeBatchTransferFrom(address(this), to, ids, balances, \\\"\\\");\\r\\n        emit WithdrawalERC1155(asset, ids, to, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function is called before withdrawal takes place.\\r\\n    * Override to add custom conditions or actions.\\r\\n    */\\r\\n    function _beforeWithdrawal(address to) internal virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function is called before ERC20 withdrawal takes place.\\r\\n    * Override to add custom conditions or actions.\\r\\n    */\\r\\n    function _beforeWithdrawalERC20(address asset, address to) internal virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function is called before ERC721 withdrawal takes place.\\r\\n    * Override to add custom conditions or actions.\\r\\n    */\\r\\n    function _beforeWithdrawalERC721(address asset, uint256[] calldata ids, address to) internal virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function is called before ERC1155 withdrawal takes place.\\r\\n    * Override to add custom conditions or actions.\\r\\n    */\\r\\n    function _beforeWithdrawalERC1155(address asset, uint256[] calldata ids, address to) internal virtual {\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract for staking FEAR in exchange of FEAR reward.\\r\\n * Multiple staking is possible.\\r\\n * Partial unstaking is possible.\\r\\n * Reward can be claimed any moment.\\r\\n * After unstaking deposit is splitted to several equal parts that become available for withdrawing back after equal periods of time.\\r\\n * Instant unstaking (without locking) is possible, but requires paying a fee.\\r\\n */\\r\\ncontract FearStaking is AccessControl, Pausable, Withdrawable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when caller stakes FEAR.\\r\\n     */\\r\\n    event Staked(address indexed caller, uint256 amount, uint256 epochId);\\r\\n    /**\\r\\n     * @dev Emitted when caller unstakes FEAR.\\r\\n     */\\r\\n    event Unstaked(address indexed caller, uint256 amount, uint256 reward);\\r\\n    /**\\r\\n     * @dev Emitted when caller unstakes FEAR instantly.\\r\\n     */\\r\\n    event UnstakedInstantly(address indexed caller, uint256 amount, uint256 reward, uint256 fee);\\r\\n    /**\\r\\n     * @dev Emitted when caller claims the reward.\\r\\n     */\\r\\n    event RewardClaimed(address indexed caller, uint256 amount);\\r\\n    /**\\r\\n     * @dev Emitted when caller withdraws unlocked FEAR.\\r\\n     */\\r\\n    event Withdrawn(address indexed caller, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev FEAR token contract interface (ERC20).\\r\\n     */\\r\\n    IERC20 public fearContract;\\r\\n\\r\\n    /**\\r\\n     * @dev Structure describing staking epoch.\\r\\n     */\\r\\n    struct StakingEpoch {\\r\\n        uint256 id;             // id\\r\\n        uint256 start;          // start timestamp\\r\\n        uint256 end;            // end timestamp\\r\\n        uint256 apr;            // APR (annual percentage rate) in 1/100 of percent, e.g. 1234 means 12.34%\\r\\n        uint256 lockParts;      // number of parts the stake is splitted for locking on unstake\\r\\n        uint256 lockPeriod;     // time interval between locked parts become available to withdraw\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Structure describing stake.\\r\\n     */\\r\\n    struct Stake {\\r\\n        uint256 epochId;        // id of epoch the staking was done\\r\\n        uint256 amount;         // amount of FEAR that was staked\\r\\n        uint256 stakingDate;    // date of staking\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Structure describing locked tokens.\\r\\n     */\\r\\n    struct LockedTokens {\\r\\n        uint256 amount;         // amount of FEAR locked\\r\\n        uint256 unlockDate;     // date when withdrawal will be available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fee percentage for instant unstaking (in 1/100 of percent, default is 20%)\\r\\n     */\\r\\n    uint256 public instantUnstakeFeePercentage = 2000;\\r\\n\\r\\n    uint256 private percentageDivider = 10000;\\r\\n    uint256 private nextEpochId = 1;\\r\\n    address private instantUnstakeFeeReciever;\\r\\n\\r\\n\\r\\n    uint256[] private epochIds; // array of timewise sorted epoch ids\\r\\n    mapping (uint256 => StakingEpoch) private epochs;\\r\\n    mapping (address => Stake[]) private stakes;\\r\\n    mapping (address => LockedTokens[]) private locks;\\r\\n\\r\\n\\r\\n    uint256 public totalSentToDaoAmount;\\r\\n    uint256 private totalStakedAmount;\\r\\n    uint256 private totalLockedAmount;\\r\\n    EnumerableSet.AddressSet private fearStakers;\\r\\n    EnumerableSet.AddressSet private fearLockers;\\r\\n\\r\\n\\r\\n    constructor(address fearContractAddress) {\\r\\n        fearContract = IERC20(fearContractAddress);\\r\\n        instantUnstakeFeeReciever = _msgSender();\\r\\n    }\\r\\n\\r\\n\\r\\n    //// PRIVATE SERVICE FUNCITONS\\r\\n\\r\\n    function _epochAt(uint i) private view returns (StakingEpoch memory) {\\r\\n        return epochs[epochIds[i]];\\r\\n    }\\r\\n\\r\\n    function _getCurrentEpochId() private view returns (uint256) {\\r\\n        if (epochIds.length == 0)\\r\\n            return 0;\\r\\n\\r\\n        for (uint i = epochIds.length - 1; i >= 0; i--) {\\r\\n            if (_epochAt(i).start <= block.timestamp && block.timestamp <= _epochAt(i).end) // timestamp inside competition start/end\\r\\n                return epochIds[i];\\r\\n            if (_epochAt(i).end < block.timestamp) // sorted lookup cutoff - no need to iterate further (everything else will have earlier start/end)\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _createEpoch(uint256 id, uint256 start, uint256 end, uint256 apr, uint256 lockParts, uint256 lockPeriod) private {\\r\\n        epochs[id] = StakingEpoch(id, start, end, apr, lockParts, lockPeriod);\\r\\n\\r\\n        // adding new index and rebuilding sorted indices (pushing new one down to its position)\\r\\n        epochIds.push(id);\\r\\n        for (uint i = epochIds.length - 1; i >= 1; i--) {\\r\\n            if (_epochAt(i).start < _epochAt(i - 1).end)\\r\\n                (epochIds[i], epochIds[i - 1]) = (epochIds[i - 1], epochIds[i]);\\r\\n            else\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _cleanStakes() private {\\r\\n        address user = _msgSender();\\r\\n\\r\\n        uint stakesLength = stakes[user].length;\\r\\n\\r\\n        if (stakes[user][stakesLength - 1].amount == 0) {\\r\\n            for (uint i = stakesLength - 1; i >= 0 ; i--) {\\r\\n                delete stakes[user][i];\\r\\n                stakes[user].pop();\\r\\n                if (i == 0) break;\\r\\n            }\\r\\n\\r\\n            fearStakers.remove(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _cleanLocks() private {\\r\\n        address user = _msgSender();\\r\\n\\r\\n        uint locksLength = locks[user].length;\\r\\n        bool canClean = true;\\r\\n\\r\\n        for (uint i = 0; i < locksLength; i++) {\\r\\n            if (locks[user][i].amount != 0) {\\r\\n                canClean = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (canClean) {\\r\\n            for (uint i = locksLength - 1; i >= 0 ; i--) {\\r\\n                delete locks[user][i];\\r\\n                locks[user].pop();\\r\\n                if (i == 0) break;\\r\\n            }\\r\\n\\r\\n            fearLockers.remove(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getUserStakeAmount(address user) private view returns (uint256) {\\r\\n        Stake[] storage userStakes = stakes[user];\\r\\n\\r\\n        uint256 totalAmount;\\r\\n        \\r\\n        for (uint i = 0; i < userStakes.length; i++)\\r\\n            totalAmount = totalAmount.add(userStakes[i].amount);\\r\\n\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function _getUserRewardAmount(address user) private view returns (uint256) {\\r\\n        Stake[] storage userStakes = stakes[user];\\r\\n\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n        uint256 totalAmount;\\r\\n\\r\\n        for (uint i = 0; i < userStakes.length; i++)  {\\r\\n            Stake memory iStake = userStakes[i];\\r\\n            StakingEpoch memory epoch = epochs[iStake.epochId];\\r\\n            uint256 stakingEnd = curTimestamp < epoch.end ? curTimestamp : epoch.end;\\r\\n            totalAmount = totalAmount.add(iStake.amount.mul(stakingEnd - iStake.stakingDate).mul(epoch.apr).div(percentageDivider).div(365).div(1 days));\\r\\n        }\\r\\n\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function _getUserLockedAmount(address user) private view returns (uint256) {\\r\\n        LockedTokens[] storage userLocks = locks[user];\\r\\n\\r\\n        uint256 totalAmount;\\r\\n\\r\\n        for (uint i = 0; i < userLocks.length; i++)\\r\\n            if (userLocks[i].unlockDate > block.timestamp)\\r\\n                totalAmount = totalAmount.add(userLocks[i].amount);\\r\\n\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function _getUserWithdrawableAmount(address user) private view returns (uint256) {\\r\\n        LockedTokens[] storage userLocks = locks[user];\\r\\n\\r\\n        uint256 totalAmount;\\r\\n\\r\\n        for (uint i = 0; i < userLocks.length; i++)\\r\\n            if (userLocks[i].unlockDate <= block.timestamp)\\r\\n                totalAmount = totalAmount.add(userLocks[i].amount);\\r\\n\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function _checkBalance(uint256 threshold) private view {\\r\\n        uint256 balance = fearContract.balanceOf(address(this));\\r\\n        require(balance >= threshold, \\\"Contract balance is not enough\\\");\\r\\n    }\\r\\n\\r\\n    function _getAllUserStakes(address user) private view returns (Stake[] memory) {\\r\\n        uint256 counter;\\r\\n        for (uint i = 0; i < stakes[user].length; i++)\\r\\n            if (stakes[user][i].amount != 0)\\r\\n                counter++;\\r\\n\\r\\n        Stake[] memory result = new Stake[](counter);\\r\\n\\r\\n        counter = 0;\\r\\n        for (uint i = 0; i < stakes[user].length; i++)\\r\\n            if (stakes[user][i].amount != 0) {\\r\\n                result[counter] = stakes[user][i];\\r\\n                counter++;\\r\\n            }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _getAllUserLocks(address user) private view returns (LockedTokens[] memory) {\\r\\n        uint256 counter;\\r\\n        for (uint i = 0; i < locks[user].length; i++)\\r\\n            if (locks[user][i].amount != 0)\\r\\n                counter++;\\r\\n\\r\\n        LockedTokens[] memory result = new LockedTokens[](counter);\\r\\n\\r\\n        counter = 0;\\r\\n        for (uint i = 0; i < locks[user].length; i++)\\r\\n            if (locks[user][i].amount != 0) {\\r\\n                result[counter] = locks[user][i];\\r\\n                counter++;\\r\\n            }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //// PUBLIC FUNCITONS\\r\\n\\r\\n    /** \\r\\n     * @dev Returns current staking epoch.\\r\\n     */\\r\\n    function getCurrentStakingEpoch() external view returns (StakingEpoch memory) {\\r\\n        return epochs[_getCurrentEpochId()];\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns total count of stakers.\\r\\n     */\\r\\n    function getStakersCount() external view returns (uint256) {\\r\\n        return fearStakers.length();\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns total amount of FEAR staked.\\r\\n     */\\r\\n    function getTotalStakedAmount() external view returns (uint256) {\\r\\n        return totalStakedAmount;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns caller's stake amount.\\r\\n     */\\r\\n    function getMyStakeAmount() public view returns (uint256) {\\r\\n        return _getUserStakeAmount(_msgSender());\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns caller's reward amount for current moment.\\r\\n     */\\r\\n    function getMyRewardAmount() external view returns (uint256) {\\r\\n        return _getUserRewardAmount(_msgSender());\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns caller's locked tokens amount.\\r\\n     */\\r\\n    function getMyLockedAmount() external view returns (uint256) {\\r\\n        return _getUserLockedAmount(_msgSender());\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns caller's withdrawable (unlocked) tokens amount.\\r\\n     */\\r\\n    function getMyWithdrawableAmount() external view returns (uint256) {\\r\\n        return _getUserWithdrawableAmount(_msgSender());\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns all caller's stakes.\\r\\n     */\\r\\n    function getAllMyStakes() external view returns (Stake[] memory) {\\r\\n        return _getAllUserStakes(_msgSender());\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Returns all caller's locked tokens info.\\r\\n     */\\r\\n    function getAllMyLocks() external view returns (LockedTokens[] memory) {\\r\\n        return _getAllUserLocks(_msgSender());\\r\\n    }\\r\\n\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to stake FEAR.\\r\\n     * @param amount Amount of FEAR to stake.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused;\\r\\n     * - There must be active staking epoch;\\r\\n     * - Caller must have not less FEAR tokens than staking amount;\\r\\n     * - Caller must allow the contract to operate their FEAR tokens (not less than staking amount).\\r\\n     * Emits {Staked} event on success.\\r\\n     */\\r\\n    function stake(uint256 amount) external whenNotPaused nonReentrant {\\r\\n        require(amount > 0, \\\"Cannot stake zero\\\");\\r\\n\\r\\n        uint256 epochId = _getCurrentEpochId();\\r\\n        require(epochId > 0, \\\"No active epoch\\\");\\r\\n\\r\\n        address user = _msgSender();\\r\\n\\r\\n        uint256 userBalance = fearContract.balanceOf(user);\\r\\n        require(userBalance >= amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        uint256 contractAllowance = fearContract.allowance(user, address(this));\\r\\n        require(contractAllowance >= amount, \\\"Insufficient allowance\\\");\\r\\n\\r\\n        Stake memory newStake = Stake(epochId, amount, block.timestamp);\\r\\n\\r\\n        Stake[] storage userStakes = stakes[user];\\r\\n        userStakes.push(newStake);\\r\\n\\r\\n        fearStakers.add(user);\\r\\n        totalStakedAmount = totalStakedAmount.add(amount);\\r\\n\\r\\n        fearContract.transferFrom(user, address(this), amount);\\r\\n\\r\\n        emit Staked(user, amount, epochId);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to stake back FEAR that has been unstaken but still stays at the contract.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused;\\r\\n     * - There must be active staking epoch;\\r\\n     * - There must be some unstaken user's FEAR at the contract (locked or available to withdraw);\\r\\n     * Emits {Staked} event on success.\\r\\n     */\\r\\n    function stakeBack() external whenNotPaused nonReentrant {\\r\\n        uint256 epochId = _getCurrentEpochId();\\r\\n        require(epochId > 0, \\\"No active epoch\\\");\\r\\n\\r\\n        address user = _msgSender();\\r\\n\\r\\n        LockedTokens[] storage userLocks = locks[user];\\r\\n        require(userLocks.length > 0, \\\"No user's FEAR at the contract\\\");\\r\\n\\r\\n        uint256 amount;\\r\\n        for (uint i = 0; i < userLocks.length; i++) {\\r\\n            amount = amount.add(userLocks[i].amount);\\r\\n            userLocks[i].amount = 0;\\r\\n        }\\r\\n\\r\\n        Stake memory newStake = Stake(epochId, amount, block.timestamp);\\r\\n\\r\\n        Stake[] storage userStakes = stakes[user];\\r\\n        userStakes.push(newStake);\\r\\n\\r\\n        fearStakers.add(user);\\r\\n        totalStakedAmount = totalStakedAmount.add(amount);\\r\\n        totalLockedAmount = totalLockedAmount.sub(amount);\\r\\n        _cleanLocks();\\r\\n\\r\\n        emit Staked(user, amount, epochId);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to unstake FEAR.\\r\\n     * Reward is transferred to caller's address immediately.\\r\\n     * Unstaked tokens are locked according to staking epoch settings.\\r\\n     * @param amount Amount of FEAR to unstake.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused;\\r\\n     * - Amount to unstake must be less or qeual to caller's total staked amount.\\r\\n     * Emits {RewardClaimed} and {Unstaked} events on success.\\r\\n     */\\r\\n    function unstake(uint256 amount) external whenNotPaused nonReentrant {\\r\\n        require(amount > 0, \\\"Cannot unstake zero\\\");\\r\\n        require(amount <= getMyStakeAmount(), \\\"Amount exceeds total stake\\\");\\r\\n\\r\\n        address user = _msgSender();\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n        uint256 leftToUnstake = amount;\\r\\n        uint256 totalReward;\\r\\n\\r\\n        uint256 prevLockParts;\\r\\n        uint256 prevLockPeriod;\\r\\n        LockedTokens[] memory locksBuffer = new LockedTokens[](0);\\r\\n\\r\\n        for (uint i = 0; i < stakes[user].length; i++) {\\r\\n            Stake storage iStake = stakes[user][i];\\r\\n\\r\\n            if (iStake.amount > 0) {\\r\\n                StakingEpoch memory epoch = epochs[iStake.epochId];\\r\\n\\r\\n                if (prevLockParts != epoch.lockParts || prevLockPeriod != epoch.lockPeriod) {\\r\\n\\r\\n                    // flushing locks buffer\\r\\n                    uint bufferLength = locksBuffer.length;\\r\\n\\r\\n                    if (bufferLength > 0) {\\r\\n                        for (uint k = 0; k < bufferLength; k++)\\r\\n                            locks[user].push(locksBuffer[k]);\\r\\n\\r\\n                        for (uint k = bufferLength - 1; k >= 0 ; k--)\\r\\n                            delete locksBuffer[k];\\r\\n                    }\\r\\n                    \\r\\n                    locksBuffer = new LockedTokens[](epoch.lockParts);\\r\\n\\r\\n                    for (uint k = 0; k < epoch.lockParts; k++)\\r\\n                        locksBuffer[k] = LockedTokens(0, curTimestamp + (k + 1) * epoch.lockPeriod);\\r\\n\\r\\n                    prevLockParts = epoch.lockParts;\\r\\n                    prevLockPeriod = epoch.lockPeriod;\\r\\n                }\\r\\n\\r\\n                uint256 unstakeAmount = leftToUnstake < iStake.amount ? leftToUnstake : iStake.amount;\\r\\n                uint256 stakingEnd = curTimestamp < epoch.end ? curTimestamp : epoch.end;\\r\\n                \\r\\n                for (uint j = 0; j < epoch.lockParts; j++)\\r\\n                    locksBuffer[j].amount = locksBuffer[j].amount.add(unstakeAmount / epoch.lockParts);\\r\\n\\r\\n                iStake.amount = iStake.amount.sub(unstakeAmount);\\r\\n                leftToUnstake = leftToUnstake.sub(unstakeAmount);\\r\\n                totalReward = totalReward.add(unstakeAmount.mul(stakingEnd - iStake.stakingDate).mul(epoch.apr).div(percentageDivider).div(365).div(1 days));\\r\\n\\r\\n                if (leftToUnstake == 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint k = 0; k < locksBuffer.length; k++)\\r\\n            locks[user].push(locksBuffer[k]);\\r\\n\\r\\n        fearLockers.add(user);\\r\\n        totalStakedAmount = totalStakedAmount.sub(amount);\\r\\n        totalLockedAmount = totalLockedAmount.add(amount);\\r\\n        _cleanStakes();\\r\\n        _checkBalance(totalReward);\\r\\n\\r\\n        if (totalReward > 0) {\\r\\n            fearContract.transfer(user, totalReward);\\r\\n            emit RewardClaimed(user, totalReward);\\r\\n        }\\r\\n\\r\\n        emit Unstaked(user, amount, totalReward);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to unstake FEAR without locking.\\r\\n     * Reward is transferred to caller's address immediately.\\r\\n     * Unstaked tokens minus instant unstake fee are transferred to caller's address immediately.\\r\\n     * Instant unstaking fee is transferred to fee collector's address.\\r\\n     * @param amount Amount of FEAR to unstake.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused;\\r\\n     * - Amount to unstake must be less or qeual to caller's total staked amount.\\r\\n     * Emits {RewardClaimed} and {UnstakedInstantly} events on success.\\r\\n     */\\r\\n    function instantUnstake(uint256 amount) external whenNotPaused nonReentrant {\\r\\n        require(amount > 0, \\\"Cannot unstake zero\\\");\\r\\n        require(amount <= getMyStakeAmount(), \\\"Amount exceeds total stake\\\");\\r\\n\\r\\n        address user = _msgSender();\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n        uint256 leftToUnstake = amount;\\r\\n        uint256 totalReward;\\r\\n\\r\\n        for (uint i = 0; i < stakes[user].length; i++) {\\r\\n            Stake storage iStake = stakes[user][i];\\r\\n\\r\\n            if (iStake.amount > 0) {\\r\\n                StakingEpoch memory epoch = epochs[iStake.epochId];\\r\\n\\r\\n                uint256 unstakeAmount = leftToUnstake < iStake.amount ? leftToUnstake : iStake.amount;\\r\\n                uint256 stakingEnd = curTimestamp < epoch.end ? curTimestamp : epoch.end;\\r\\n                \\r\\n                iStake.amount = iStake.amount.sub(unstakeAmount);\\r\\n                leftToUnstake = leftToUnstake.sub(unstakeAmount);\\r\\n                totalReward = totalReward.add(unstakeAmount.mul(stakingEnd - iStake.stakingDate).mul(epoch.apr).div(percentageDivider).div(365).div(1 days));\\r\\n\\r\\n                if (leftToUnstake == 0)\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 instantUnstakeFee = amount.mul(instantUnstakeFeePercentage).div(percentageDivider);\\r\\n        uint256 amountMinusFee = amount.sub(instantUnstakeFee);\\r\\n\\r\\n        totalStakedAmount = totalStakedAmount.sub(amount);\\r\\n        totalSentToDaoAmount = totalSentToDaoAmount.add(instantUnstakeFee);\\r\\n        _cleanStakes();\\r\\n        _checkBalance(totalReward + amount);\\r\\n\\r\\n        if (totalReward > 0) {\\r\\n            fearContract.transfer(user, totalReward);\\r\\n            emit RewardClaimed(user, totalReward);\\r\\n        }\\r\\n\\r\\n        fearContract.transfer(user, amountMinusFee);\\r\\n        fearContract.transfer(instantUnstakeFeeReciever, instantUnstakeFee);\\r\\n\\r\\n        emit UnstakedInstantly(user, amount, totalReward, instantUnstakeFee);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to claim the reward caller gets at the current moment.\\r\\n     * Reward is transferred to caller's address immediately.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused.\\r\\n     * Emits {RewardClaimed} event on success.\\r\\n     */\\r\\n    function claimReward() external whenNotPaused nonReentrant {\\r\\n        address user = _msgSender();\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n        uint256 totalReward;\\r\\n\\r\\n        require(_getUserStakeAmount(user) > 0, \\\"Nothing is staked\\\");\\r\\n\\r\\n        for (uint i = 0; i < stakes[user].length; i++) {\\r\\n            Stake storage iStake = stakes[user][i];\\r\\n\\r\\n            if (iStake.amount > 0) {\\r\\n                StakingEpoch memory epoch = epochs[iStake.epochId];\\r\\n                uint256 newStakingDate = curTimestamp < epoch.end ? curTimestamp : epoch.end;\\r\\n                totalReward = totalReward.add(iStake.amount.mul(newStakingDate - iStake.stakingDate).mul(epoch.apr).div(percentageDivider).div(365).div(1 days));\\r\\n\\r\\n                iStake.stakingDate = newStakingDate; // reward is claimed until the current date, new staking date = now\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _checkBalance(totalReward);\\r\\n\\r\\n        if (totalReward > 0) {\\r\\n            fearContract.transfer(user, totalReward);\\r\\n            emit RewardClaimed(user, totalReward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Allows to withdraw unlocked tokens.\\r\\n     * Requirements:\\r\\n     * - Contract must be unpaused.\\r\\n     * Emits {Withdrawn} event on success.\\r\\n     */\\r\\n    function withdrawUnlocked() external whenNotPaused nonReentrant {\\r\\n        address user = _msgSender();\\r\\n        LockedTokens[] storage userLocks = locks[user];\\r\\n\\r\\n        require(_getUserWithdrawableAmount(user) > 0, \\\"Nothing to withdraw\\\");\\r\\n\\r\\n        uint256 totalAmount;\\r\\n\\r\\n        for (uint i = 0; i < userLocks.length; i++)\\r\\n            if (userLocks[i].unlockDate <= block.timestamp) {\\r\\n                totalAmount = totalAmount.add(userLocks[i].amount);\\r\\n                userLocks[i].amount = 0;\\r\\n            }\\r\\n\\r\\n        totalLockedAmount = totalLockedAmount.sub(totalAmount);\\r\\n        _cleanLocks();\\r\\n        _checkBalance(totalAmount);\\r\\n\\r\\n        if (totalAmount > 0)\\r\\n            fearContract.transfer(user, totalAmount);\\r\\n\\r\\n        emit Withdrawn(user, totalAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //// ADMIN FUNCTIONS\\r\\n   \\r\\n    function addStakingEpoch(uint256 start, uint256 end, uint256 apr, uint256 lockParts, uint256 lockPeriod) external onlyRole(ADMIN_ROLE) {\\r\\n        require(start < end, \\\"start must be less than end\\\");\\r\\n        require(end > block.timestamp, \\\"cannot add passed epoch\\\");\\r\\n        require(apr > 0, \\\"apr must be greater than zero\\\");\\r\\n\\r\\n        if (epochIds.length > 0) {\\r\\n            for (uint i = epochIds.length - 1; i >= 0; i--) {\\r\\n                if ((_epochAt(i).start <= start && start <= _epochAt(i).end)\\r\\n                    || (_epochAt(i).start <= end && end <= _epochAt(i).end)\\r\\n                    || (_epochAt(i).start >= start && _epochAt(i).end <= end)) // new competition covers existing one\\r\\n                    revert(\\\"Intersecting start/end found\\\");\\r\\n                if (_epochAt(i).end < start) // sorted lookup cutoff\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _createEpoch(nextEpochId, start, end, apr, lockParts, lockPeriod);\\r\\n        nextEpochId++;\\r\\n    }\\r\\n\\r\\n    function removeStakingEpoch(uint256 id) external onlyRole(ADMIN_ROLE) {\\r\\n        require(epochs[id].id > 0, \\\"Epoch not found\\\");\\r\\n        require(epochs[id].start > block.timestamp, \\\"Epoch is active or passed\\\");\\r\\n\\r\\n        uint epochIdIndex;\\r\\n        for (uint i = epochIds.length - 1; i >= 1; i--) {\\r\\n            if (epochIds[i] == id) {\\r\\n                epochIdIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i = epochIdIndex; i < epochIds.length - 1; i++) {\\r\\n            epochIds[i] = epochIds[i + 1];\\r\\n        }\\r\\n\\r\\n        epochIds.pop();\\r\\n        delete epochs[id];\\r\\n    }\\r\\n\\r\\n    function getStakingEpochIds() external view onlyRole(ADMIN_ROLE) returns (uint256[] memory) {\\r\\n        return epochIds;\\r\\n    }\\r\\n\\r\\n    function getStakingEpoch(uint256 id) external view onlyRole(ADMIN_ROLE) returns (StakingEpoch memory) {\\r\\n        return epochs[id];\\r\\n    }\\r\\n\\r\\n    function setInstantUnstakeParams(uint256 feePercentage, address feeReciever) external onlyRole(ADMIN_ROLE) {\\r\\n        require(feeReciever != address(0), \\\"Cannot use zero address\\\");\\r\\n\\r\\n        instantUnstakeFeePercentage = feePercentage;\\r\\n        instantUnstakeFeeReciever = feeReciever;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getFearStakers() external view onlyRole(MANAGER_ROLE) returns (address[] memory) {\\r\\n        address[] memory stakers = new address[](fearStakers.length());\\r\\n\\r\\n        for (uint i = 0; i < stakers.length; i++)\\r\\n            stakers[i] = fearStakers.at(i);\\r\\n\\r\\n        return stakers;\\r\\n    }\\r\\n\\r\\n    function getFearLockers() external view onlyRole(MANAGER_ROLE) returns (address[] memory) {\\r\\n        address[] memory lockers = new address[](fearLockers.length());\\r\\n\\r\\n        for (uint i = 0; i < lockers.length; i++)\\r\\n            lockers[i] = fearLockers.at(i);\\r\\n\\r\\n        return lockers;\\r\\n    }\\r\\n\\r\\n    function getUserStakeAmount(address user) external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        return _getUserStakeAmount(user);\\r\\n    }\\r\\n\\r\\n    function getUserRewardAmount(address user) external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        return _getUserRewardAmount(user);\\r\\n    }\\r\\n\\r\\n    function getUserLockedAmount(address user) external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        return _getUserLockedAmount(user);\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawableAmount(address user) external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        return _getUserWithdrawableAmount(user);\\r\\n    }\\r\\n\\r\\n    function getAllUserStakes(address user) external view onlyRole(MANAGER_ROLE) returns (Stake[] memory) {\\r\\n        return _getAllUserStakes(user);\\r\\n    }\\r\\n\\r\\n    function getAllUserLocks(address user) external view onlyRole(MANAGER_ROLE) returns (LockedTokens[] memory) {\\r\\n        return _getAllUserLocks(user);\\r\\n    }\\r\\n\\r\\n    function getTotalLockedAmount() external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        return totalLockedAmount;\\r\\n    }\\r\\n\\r\\n    function getTotalRewardAmount() external view onlyRole(MANAGER_ROLE) returns (uint256) {\\r\\n        uint256 totalReward;\\r\\n        for (uint i = 0; i < fearStakers.length(); i++)\\r\\n            totalReward = totalReward.add(_getUserRewardAmount(fearStakers.at(i)));\\r\\n        \\r\\n        return totalReward;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fearContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UnstakedInstantly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"WithdrawalERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"WithdrawalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"WithdrawalERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockParts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"addStakingEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fearContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMyLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.LockedTokens[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMyStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllUserLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.LockedTokens[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStakingEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockParts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.StakingEpoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFearLockers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFearStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockParts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct FearStaking.StakingEpoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingEpochIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"instantUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantUnstakeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeStakingEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"}],\"name\":\"setInstantUnstakeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSentToDaoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FearStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ba6a67a6f3b21705a46b380a1b97373a33da311", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}