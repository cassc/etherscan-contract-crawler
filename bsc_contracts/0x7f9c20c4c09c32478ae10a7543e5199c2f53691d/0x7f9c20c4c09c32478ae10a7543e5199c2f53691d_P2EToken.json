{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\n\\nabstract contract Random is Context, SafeOwnable {\\n    using SafeMath for uint256;\\n    \\n    uint private requestId = 0;\\n    mapping(bytes32 => bool) internal randomRequest;\\n    mapping(bytes32 => uint) internal randomResult;\\n    address public linkAccessor;\\n\\n    event RequestRandom(bytes32 requestId, uint256 seed);\\n    event FulfillRandom(bytes32 requestId, uint256 randomness);\\n    event NewLinkAccessor(address oldLinkAccessor, address newLinkAccessor);\\n\\n    constructor(address _linkAccessor) {\\n        require(_linkAccessor != address(0), \\\"_linkAccessor is zero\\\");\\n        linkAccessor = _linkAccessor;\\n        emit NewLinkAccessor(address(0), linkAccessor);\\n    }\\n\\n    function setLinkAccessor(address _linkAccessor) external onlyOwner {\\n        require(_linkAccessor != address(0), \\\"_linkAccessor is zero\\\");\\n        emit NewLinkAccessor(linkAccessor, _linkAccessor);\\n        linkAccessor = _linkAccessor; \\n    }\\n\\n    function _requestRandom(uint256 _seed) internal returns (bytes32) {\\n        bytes32 _requestId = bytes32(requestId);\\n        emit RequestRandom(_requestId, _seed);\\n        randomRequest[_requestId] = true;\\n        requestId = requestId.add(1);\\n        return _requestId;\\n    }\\n\\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomness) external {\\n        require(_msgSender() == address(linkAccessor), \\\"Only linkAccessor can call\\\");\\n        _randomness = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin, block.coinbase, block.number, _randomness)));\\n        randomResult[_requestId] = _randomness; \\n        delete randomRequest[bytes32(requestId)];\\n        emit FulfillRandom(_requestId, _randomness);\\n        finishRandom(_requestId);\\n    }\\n\\n    function finishRandom(bytes32 _requestId) internal virtual {\\n        delete randomResult[_requestId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/SafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * This is a contract copied from 'Ownable.sol'\\n * It has the same fundation of Ownable, besides it accept pendingOwner for mor Safe Use\\n */\\nabstract contract SafeOwnable is Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event ChangePendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor (address _ownerAddress) {\\n        if (_ownerAddress == address(0)) {\\n            _ownerAddress = _msgSender();\\n        }\\n        _owner = _ownerAddress;\\n        emit OwnershipTransferred(address(0), _ownerAddress);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(pendingOwner() == _msgSender(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        if (_pendingOwner != address(0)) {\\n            emit ChangePendingOwner(_pendingOwner, address(0));\\n            _pendingOwner = address(0);\\n        }\\n    }\\n\\n    function setPendingOwner(address pendingOwner_) public virtual onlyOwner {\\n        require(pendingOwner_ != address(0), \\\"Ownable: pendingOwner is the zero address\\\");\\n        emit ChangePendingOwner(_pendingOwner, pendingOwner_);\\n        _pendingOwner = pendingOwner_;\\n    }\\n\\n    function acceptOwner() public virtual onlyPendingOwner {\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        emit ChangePendingOwner(_pendingOwner, address(0));\\n        _pendingOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/nft/RoomExtention.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\nimport '../core/Random.sol';\\n\\ncontract RoomExtention is SafeOwnable {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    event NewRoomExtention(address roomManager, uint rid, bytes32 roomId, bytes32 name, string rules, string logo, uint position, bool display);\\n\\n    struct RoomInfo {\\n        uint256 rid;\\n        bytes32 roomId;\\n        bytes32 name;\\n        string rules;\\n        string logo;\\n        uint position;\\n        bool display;\\n    }\\n\\n    mapping(uint256 => RoomInfo) public roomInfo;\\n    address public roomManager;\\n\\n    constructor(address _roomManager) SafeOwnable(msg.sender) {\\n        roomManager = _roomManager;\\n    }\\n\\n    function addOrSetRoomInfo(\\n        uint rid, bytes32 roomId, bytes32 name, string memory rules, string memory logo, uint position, bool display\\n    ) external onlyOwner {\\n        RoomInfo storage room = roomInfo[rid];\\n        room.rid = rid;\\n        room.roomId = roomId;\\n        room.name = name;\\n        room.rules = rules;\\n        room.logo = logo;\\n        room.position = position;\\n        room.display = display;\\n        emit NewRoomExtention(roomManager, rid, roomId, name, rules, logo, position, display);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swapmining/SwapMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport \\\"../interfaces/IP2EFactory.sol\\\";\\nimport \\\"../libraries/P2ELibrary.sol\\\";\\nimport \\\"../interfaces/IP2EPair.sol\\\";\\nimport '../interfaces/IOracle.sol';\\nimport '../token/TokenLocker.sol';\\nimport \\\"../core/SafeOwnable.sol\\\";\\nimport '../token/P2EToken.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract SwapMining is SafeOwnable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private _whitelist;\\n\\n    event NewTokenLocker(TokenLocker oldTokenLocker, TokenLocker newTokenLocker);\\n\\n    // P2E tokens created per block\\n    uint256 public rewardPerBlock;\\n    // The block number when P2E mining starts.\\n    uint256 public startBlock;\\n    // How many blocks are halved\\n    uint256 public halvingPeriod = 5256000;\\n    // Total allocation points\\n    uint256 public totalAllocPoint = 0;\\n    IOracle public oracle;\\n    // router address\\n    address public router;\\n    // factory address\\n    IP2EFactory public factory;\\n    // token address\\n    P2EToken public rewardToken;\\n    // Calculate price based on BUSD\\n    address public targetToken;\\n    // pair corresponding pid\\n    mapping(address => uint256) public pairOfPid;\\n    TokenLocker public tokenLocker;\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    constructor(\\n        P2EToken _rewardToken,\\n        IP2EFactory _factory,\\n        IOracle _oracle,\\n        address _router,\\n        address _targetToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock\\n    ) SafeOwnable(msg.sender) {\\n        require(address(_rewardToken) != address(0), \\\"illegal address\\\");\\n        rewardToken = _rewardToken;\\n        require(address(_factory) != address(0), \\\"illegal address\\\");\\n        factory = _factory;\\n        require(address(_oracle) != address(0), \\\"illegal address\\\");\\n        oracle = _oracle;\\n        require(_router != address(0), \\\"illegal address\\\");\\n        router = _router;\\n        targetToken = _targetToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 quantity;       // How many LP tokens the user has provided\\n        uint256 blockNumber;    // Last transaction block\\n    }\\n\\n    struct PoolInfo {\\n        address pair;           // Trading pairs that can be mined\\n        uint256 quantity;       // Current amount of LPs\\n        uint256 totalQuantity;  // All quantity\\n        uint256 allocPoint;     // How many allocation points assigned to this pool\\n        uint256 allocP2EAmount; // How many P2Es\\n        uint256 lastRewardBlock;// Last transaction block\\n    }\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n\\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n\\n    function addPair(uint256 _allocPoint, address _pair, bool _withUpdate) public onlyOwner {\\n        require(_pair != address(0), \\\"_pair is the zero address\\\");\\n        if (_withUpdate) {\\n            massMintPools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(PoolInfo({\\n        pair : _pair,\\n        quantity : 0,\\n        totalQuantity : 0,\\n        allocPoint : _allocPoint,\\n        allocP2EAmount : 0,\\n        lastRewardBlock : lastRewardBlock\\n        }));\\n        pairOfPid[_pair] = poolLength() - 1;\\n    }\\n\\n    // Update the allocPoint of the pool\\n    function setPair(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massMintPools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Set the number of token produced by each block\\n    function setP2EPerBlock(uint256 _newPerBlock) public onlyOwner {\\n        massMintPools();\\n        rewardPerBlock = _newPerBlock;\\n    }\\n\\n    // Only tokens in the whitelist can be mined P2E\\n    function addWhitelist(address _addToken) public onlyOwner returns (bool) {\\n        require(_addToken != address(0), \\\"SwapMining: token is the zero address\\\");\\n        return EnumerableSet.add(_whitelist, _addToken);\\n    }\\n\\n    function delWhitelist(address _delToken) public onlyOwner returns (bool) {\\n        require(_delToken != address(0), \\\"SwapMining: token is the zero address\\\");\\n        return EnumerableSet.remove(_whitelist, _delToken);\\n    }\\n\\n    function getWhitelistLength() public view returns (uint256) {\\n        return EnumerableSet.length(_whitelist);\\n    }\\n\\n    function isWhitelist(address _token) public view returns (bool) {\\n        return EnumerableSet.contains(_whitelist, _token);\\n    }\\n\\n    function getWhitelist(uint256 _index) public view returns (address){\\n        require(_index <= getWhitelistLength() - 1, \\\"SwapMining: index out of bounds\\\");\\n        return EnumerableSet.at(_whitelist, _index);\\n    }\\n\\n    function setHalvingPeriod(uint256 _block) public onlyOwner {\\n        halvingPeriod = _block;\\n    }\\n\\n    function setRouter(address newRouter) public onlyOwner {\\n        require(newRouter != address(0), \\\"SwapMining: new router is the zero address\\\");\\n        router = newRouter;\\n    }\\n\\n    function setOracle(IOracle _oracle) public onlyOwner {\\n        require(address(_oracle) != address(0), \\\"SwapMining: new oracle is the zero address\\\");\\n        oracle = _oracle;\\n    }\\n\\n    // At what phase\\n    function phase(uint256 blockNumber) public view returns (uint256) {\\n        if (halvingPeriod == 0) {\\n            return 0;\\n        }\\n        if (blockNumber > startBlock) {\\n            return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\\n        }\\n        return 0;\\n    }\\n\\n    function phase() public view returns (uint256) {\\n        return phase(block.number);\\n    }\\n\\n    function reward(uint256 blockNumber) public view returns (uint256) {\\n        uint256 _phase = phase(blockNumber);\\n        return rewardPerBlock.div(2 ** _phase);\\n    }\\n\\n    function reward() public view returns (uint256) {\\n        return reward(block.number);\\n    }\\n\\n    // Rewards for the current block\\n    function getP2EReward(uint256 _lastRewardBlock) public view returns (uint256) {\\n        require(_lastRewardBlock <= block.number, \\\"SwapMining: must little than the current block number\\\");\\n        uint256 blockReward = 0;\\n        uint256 n = phase(_lastRewardBlock);\\n        uint256 m = phase(block.number);\\n        // If it crosses the cycle\\n        while (n < m) {\\n            n++;\\n            // Get the last block of the previous cycle\\n            uint256 r = n.mul(halvingPeriod).add(startBlock);\\n            // Get rewards from previous periods\\n            blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(reward(r)));\\n            _lastRewardBlock = r;\\n        }\\n        blockReward = blockReward.add((block.number.sub(_lastRewardBlock)).mul(reward(block.number)));\\n        return blockReward;\\n    }\\n\\n    // Update all pools Called when updating allocPoint and setting new blocks\\n    function massMintPools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            mint(pid);\\n        }\\n    }\\n\\n    function mint(uint256 _pid) public returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return false;\\n        }\\n        uint256 blockReward = getP2EReward(pool.lastRewardBlock);\\n        if (blockReward <= 0) {\\n            return false;\\n        }\\n        // Calculate the rewards obtained by the pool based on the allocPoint\\n        uint256 gibxReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\n        // Increase the number of tokens in the current pool\\n        pool.allocP2EAmount = pool.allocP2EAmount.add(gibxReward);\\n        pool.lastRewardBlock = block.number;\\n        rewardToken.mint(address(this), gibxReward);\\n        return true;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"SwapMining: caller is not the router\\\");\\n        _;\\n    }\\n\\n    // swapMining only router\\n    function swap(address account, address input, address output, uint256 amount) public onlyRouter returns (bool) {\\n        require(account != address(0), \\\"SwapMining: taker swap account is the zero address\\\");\\n        require(input != address(0), \\\"SwapMining: taker swap input is the zero address\\\");\\n        require(output != address(0), \\\"SwapMining: taker swap output is the zero address\\\");\\n\\n        if (poolLength() <= 0) {\\n            return false;\\n        }\\n\\n        if (!isWhitelist(input) || !isWhitelist(output)) {\\n            return false;\\n        }\\n\\n        address pair = P2ELibrary.pairFor(address(factory), input, output);\\n        PoolInfo storage pool = poolInfo[pairOfPid[pair]];\\n        // If it does not exist or the allocPoint is 0 then return\\n        if (pool.pair != pair || pool.allocPoint <= 0) {\\n            return false;\\n        }\\n\\n        uint256 quantity = getQuantity(output, amount, targetToken);\\n        if (quantity <= 0) {\\n            return false;\\n        }\\n\\n        mint(pairOfPid[pair]);\\n\\n        pool.quantity = pool.quantity.add(quantity);\\n        pool.totalQuantity = pool.totalQuantity.add(quantity);\\n        UserInfo storage user = userInfo[pairOfPid[pair]][account];\\n        user.quantity = user.quantity.add(quantity);\\n        user.blockNumber = block.number;\\n        return true;\\n    }\\n\\n    function getQuantity(address outputToken, uint256 outputAmount, address anchorToken) public view returns (uint256) {\\n        uint256 quantity = 0;\\n        if (outputToken == anchorToken) {\\n            quantity = outputAmount;\\n        } else if (IP2EFactory(factory).getPair(outputToken, anchorToken) != address(0)) {\\n            quantity = IOracle(oracle).consult(outputToken, outputAmount, anchorToken);\\n        } else {\\n            uint256 length = getWhitelistLength();\\n            for (uint256 index = 0; index < length; index++) {\\n                address intermediate = getWhitelist(index);\\n                if (factory.getPair(outputToken, intermediate) != address(0) && factory.getPair(intermediate, anchorToken) != address(0)) {\\n                    uint256 interQuantity = IOracle(oracle).consult(outputToken, outputAmount, intermediate);\\n                    quantity = IOracle(oracle).consult(intermediate, interQuantity, anchorToken);\\n                    break;\\n                }\\n            }\\n        }\\n        return quantity;\\n    }\\n\\n    // The user withdraws all the transaction rewards of the pool\\n    function takerWithdraw() public {\\n        uint256 userSub;\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            UserInfo storage user = userInfo[pid][msg.sender];\\n            if (user.quantity > 0) {\\n                mint(pid);\\n                // The reward held by the user in this pool\\n                uint256 userReward = pool.allocP2EAmount.mul(user.quantity).div(pool.quantity);\\n                pool.quantity = pool.quantity.sub(user.quantity);\\n                pool.allocP2EAmount = pool.allocP2EAmount.sub(userReward);\\n                user.quantity = 0;\\n                user.blockNumber = block.number;\\n                userSub = userSub.add(userReward);\\n            }\\n        }\\n        if (userSub <= 0) {\\n            return;\\n        }\\n        //rewardToken.transfer(msg.sender, userSub);\\n        if (address(tokenLocker) == address(0)) {\\n            safeP2ETransfer(msg.sender, userSub);\\n        } else {\\n            rewardToken.approve(address(tokenLocker), userSub);\\n            tokenLocker.addReceiver(msg.sender, userSub);\\n        }\\n    }\\n\\n    // Get rewards from users in the current pool\\n    function getUserReward(uint256 _pid, address _user) public view returns (uint256, uint256){\\n        require(_pid <= poolInfo.length - 1, \\\"SwapMining: Not find this pool\\\");\\n        uint256 userSub;\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        if (user.quantity > 0) {\\n            uint256 blockReward = getP2EReward(pool.lastRewardBlock);\\n            uint256 gibxReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            userSub = userSub.add((pool.allocP2EAmount.add(gibxReward)).mul(user.quantity).div(pool.quantity));\\n        }\\n        //P2E available to users, User transaction amount\\n        return (userSub, user.quantity);\\n    }\\n\\n    // Get details of the pool\\n    function getPoolInfo(uint256 _pid) public view returns (address, address, uint256, uint256, uint256, uint256){\\n        require(_pid <= poolInfo.length - 1, \\\"SwapMining: Not find this pool\\\");\\n        PoolInfo memory pool = poolInfo[_pid];\\n        address token0 = IP2EPair(pool.pair).token0();\\n        address token1 = IP2EPair(pool.pair).token1();\\n        uint256 gibxAmount = pool.allocP2EAmount;\\n        uint256 blockReward = getP2EReward(pool.lastRewardBlock);\\n        uint256 gibxReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);\\n        gibxAmount = gibxAmount.add(gibxReward);\\n        //token0,token1,Pool remaining reward,Total /Current transaction volume of the pool\\n        return (token0, token1, gibxAmount, pool.totalQuantity, pool.quantity, pool.allocPoint);\\n    }\\n\\n    function ownerWithdraw(address _to, uint256 _amount) public onlyOwner {\\n        safeP2ETransfer(_to, _amount);\\n    }\\n\\n    function safeP2ETransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n        rewardToken.transfer(_to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2EFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2EFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function expectPairFor(address token0, address token1) external view returns (address);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/P2ELibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/IP2EPair.sol';\\nimport '../interfaces/IP2EFactory.sol';\\n\\nlibrary P2ELibrary {\\n    using SafeMath for uint;\\n\\n    uint256 constant SWAP_FEE = 3;\\n    uint256 constant SWAP_FEE_BASE = 1000;\\n    uint256 constant SWAP_FEE_LP = 3;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'P2ELibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'P2ELibrary: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                IP2EFactory(factory).INIT_CODE_PAIR_HASH()\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IP2EPair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'P2ELibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'P2ELibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'P2ELibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'P2ELibrary: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(SWAP_FEE_BASE.sub(SWAP_FEE));\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(SWAP_FEE_BASE).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'P2ELibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'P2ELibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(SWAP_FEE_BASE);\\n        uint denominator = reserveOut.sub(amountOut).mul(SWAP_FEE_BASE.sub(SWAP_FEE));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'P2ELibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'P2ELibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2EPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2EPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IOracle {\\n    function update(address tokenA, address tokenB) external;\\n\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/token/TokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/IP2EToken.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract TokenLocker is ERC20, SafeOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event NewReceiver(address receiver, uint sendAmount, uint totalReleaseAmount, uint lastReleaseAt);\\n    event ReleaseToken(address receiver, uint releaseAmount, uint nextReleaseAmount, uint nextReleaseBlockNum);\\n\\n    uint256 public immutable FIRST_LOCK_SECONDS;\\n    uint256 public immutable LOCK_PERIOD;\\n    uint256 public immutable LOCK_PERIOD_NUM;\\n\\n    IERC20 public immutable token;\\n    uint256 public totalLockAmount;\\n\\n    struct ReleaseInfo {\\n        address receiver;               //who will receive the release token\\n        uint256 totalReleaseAmount;     //the amount of the token total released for the receiver;\\n        bool firstUnlock;               //first unlock already done\\n        uint256 lastReleaseAt;          //the last seconds the the receiver get the released token\\n        uint256 alreadyReleasedAmount;  //the amount the token already released for the reciever\\n    }\\n    mapping(address => ReleaseInfo) public receivers;\\n    mapping(address => uint) public userPending;\\n\\n    constructor(\\n        address _owner, string memory _name, string memory _symbol, IERC20 _token, uint256 _firstLockSeconds, uint256 _lockPeriod, uint256 _lockPeriodNum\\n    ) ERC20(_name, _symbol) SafeOwnable(_owner) {\\n        require(address(_token) != address(0), \\\"token address is zero\\\");\\n        token = _token;\\n        FIRST_LOCK_SECONDS = _firstLockSeconds;\\n        LOCK_PERIOD = _lockPeriod;\\n        LOCK_PERIOD_NUM = _lockPeriodNum;\\n    }\\n\\n    uint public constant MAX_CLAIM_NUM = 100;\\n\\n    function addReceiver(address _receiver, uint256 _amount) external onlyOwner {\\n        for (uint i = 0; i < MAX_CLAIM_NUM; i ++) {\\n            if (claimInternal(_receiver) == 0) {\\n                break;\\n            }\\n        }\\n        require(_receiver != address(0), \\\"receiver address is zero\\\");\\n        require(_amount > 0, \\\"release amount is zero\\\");\\n        totalLockAmount = totalLockAmount.add(_amount);\\n        ReleaseInfo storage receiver = receivers[_receiver];\\n        uint totalReleaseAmount = receiver.totalReleaseAmount.sub(receiver.alreadyReleasedAmount).add(_amount);\\n        receiver.receiver = _receiver;\\n        receiver.totalReleaseAmount = totalReleaseAmount;\\n        receiver.firstUnlock = false;\\n        receiver.lastReleaseAt = block.timestamp;\\n        receiver.alreadyReleasedAmount = 0;\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        _mint(_receiver, _amount);\\n        emit NewReceiver(_receiver, _amount, totalReleaseAmount, receiver.lastReleaseAt);\\n    }\\n\\n    function pending(address _receiver) public view returns (uint256, uint256, uint256) {\\n        ReleaseInfo storage receiver = receivers[_receiver];\\n        if (_receiver != receiver.receiver) {\\n            return (0, 0, 0);\\n        }\\n        uint current = block.timestamp;\\n        uint lastClaim = receiver.lastReleaseAt;\\n        bool firstUnlock = receiver.firstUnlock;\\n        uint pendingAmount = 0;\\n        while (true) {\\n            if (!firstUnlock) {\\n                lastClaim = lastClaim + FIRST_LOCK_SECONDS;\\n                firstUnlock = true;\\n            } else {\\n                lastClaim = lastClaim + LOCK_PERIOD;\\n            }\\n            if (current >= lastClaim) {\\n                uint currentPending = receiver.totalReleaseAmount.div(LOCK_PERIOD_NUM);\\n                if (receiver.totalReleaseAmount.sub(receiver.alreadyReleasedAmount) > currentPending.add(pendingAmount)) {\\n                    pendingAmount = pendingAmount + currentPending;\\n                } else {\\n                    pendingAmount = pendingAmount + receiver.totalReleaseAmount.sub(receiver.alreadyReleasedAmount);\\n                    break;\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n        uint remain = receiver.totalReleaseAmount.sub(receiver.alreadyReleasedAmount).sub(pendingAmount);\\n        pendingAmount = pendingAmount + userPending[_receiver];\\n        return (lastClaim, pendingAmount, remain);\\n    }\\n\\n    //response1: the timestamp for next release\\n    //response2: the amount for next release\\n    //response3: the total amount already released\\n    //response4: the remain amount for the receiver to release\\n    function getReleaseInfo(address _receiver) public view returns (uint256 nextReleaseAt, uint256 nextReleaseAmount, uint256 alreadyReleaseAmount, uint256 remainReleaseAmount) {\\n        ReleaseInfo storage receiver = receivers[_receiver];\\n        require(_receiver != address(0), \\\"receiver not exist\\\");\\n        if (_receiver != receiver.receiver) {\\n            return (0, 0, 0, 0);\\n        }\\n        if (!receiver.firstUnlock) {\\n            nextReleaseAt = receiver.lastReleaseAt + FIRST_LOCK_SECONDS;\\n        } else {\\n            nextReleaseAt = receiver.lastReleaseAt + LOCK_PERIOD;\\n        }\\n        nextReleaseAmount = receiver.totalReleaseAmount.div(LOCK_PERIOD_NUM);\\n        alreadyReleaseAmount = receiver.alreadyReleasedAmount;\\n        remainReleaseAmount = receiver.totalReleaseAmount.sub(receiver.alreadyReleasedAmount);\\n        if (nextReleaseAmount > remainReleaseAmount) {\\n            nextReleaseAmount = remainReleaseAmount;\\n        }\\n    }\\n\\n    function claimInternal(address _receiver) internal returns(uint) {\\n        (uint nextReleaseSeconds, uint nextReleaseAmount, , ) = getReleaseInfo(_receiver);\\n        if (block.timestamp < nextReleaseSeconds || nextReleaseAmount <= 0) {\\n            return 0;\\n        }\\n        ReleaseInfo storage receiver = receivers[_receiver];\\n        if (!receiver.firstUnlock) {\\n            receiver.firstUnlock = true; \\n        }\\n        receiver.lastReleaseAt = nextReleaseSeconds;\\n        receiver.alreadyReleasedAmount = receiver.alreadyReleasedAmount.add(nextReleaseAmount);\\n        totalLockAmount = totalLockAmount.sub(nextReleaseAmount);\\n        userPending[_receiver] = userPending[_receiver].add(nextReleaseAmount);\\n        (uint nextNextReleaseSeconds, uint nextNextReleaseAmount, , ) = getReleaseInfo(_receiver);\\n        emit ReleaseToken(_receiver, nextReleaseAmount, nextNextReleaseSeconds, nextNextReleaseAmount);\\n        return nextReleaseAmount;\\n    }\\n\\n    function claim(address _receiver) external {\\n        for (uint i = 0; i < MAX_CLAIM_NUM; i ++) {\\n            if (claimInternal(_receiver) == 0) {\\n                break;\\n            }\\n        }\\n        if (userPending[_receiver] > 0) {\\n            uint _userPending = userPending[_receiver];\\n            userPending[_receiver] = 0;\\n            _burn(_receiver, _userPending);\\n            token.safeTransfer(_receiver, _userPending);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/P2EToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Capped.sol';\\nimport '../core/SafeOwnable.sol';\\n\\ncontract P2EToken is ERC20Capped, SafeOwnable {\\n    using SafeMath for uint256;\\n\\n    event MinterChanged(address indexed minter, uint maxAmount);\\n\\n    uint256 public constant MAX_SUPPLY = 10 * 10 ** 8 * 10 ** 18;\\n    mapping(address => uint) public minters;\\n\\n    constructor() ERC20Capped(MAX_SUPPLY) ERC20(\\\"P2E Token\\\", \\\"P2E\\\") SafeOwnable(msg.sender) {\\n        addMinter(msg.sender, uint(-1));\\n    }\\n\\n    function addMinter(address _minter, uint _maxAmount) public onlyOwner {\\n        require(_minter != address(0), \\\"illegal minter\\\");\\n        require(minters[_minter] == 0, \\\"already minter\\\");\\n        minters[_minter] = _maxAmount;\\n        emit MinterChanged(_minter, _maxAmount);\\n    }\\n\\n    function delMinter(address _minter) public onlyOwner {\\n        require(_minter != address(0), \\\"illegal minter\\\");\\n        require(minters[_minter] > 0, \\\"not minter\\\");\\n        delete minters[_minter];\\n        emit MinterChanged(_minter, 0);\\n    }\\n\\n    modifier onlyMinter(uint _amount) {\\n        require(minters[msg.sender] >= _amount, \\\"caller is not minter or not enough\\\");\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyMinter(amount) returns (uint) {\\n        if (amount > MAX_SUPPLY.sub(totalSupply())) {\\n            return 0;\\n        }\\n        if (minters[msg.sender] < amount) {\\n            amount = minters[msg.sender];\\n        }\\n        minters[msg.sender] = minters[msg.sender].sub(amount);\\n        _mint(to, amount);\\n        return amount; \\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2EToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IP2EToken is IERC20 {\\n\\n    function mint(address to, uint256 amount) external returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\nimport \\\"../token/P2EToken.sol\\\";\\nimport \\\"./P2EBar.sol\\\";\\n\\ncontract PoolChef is SafeOwnable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 rewardDebt; \\n    }\\n\\n    struct PoolInfo {\\n        IERC20 token;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. CAKEs to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that CAKEs distribution occurs.\\n        uint256 accP2EPerShare; // Accumulated CAKEs per share, times 1e12. See below.\\n    }\\n\\n    P2EToken public rewardToken;\\n    P2EBar public bar;\\n    uint256 public rewardPerBlock;\\n    uint256 public BONUS_MULTIPLIER = 1;\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(address => uint256) public pidOfToken;\\n    mapping(address => bool) public existToken;\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public startBlock;\\n    TokenLocker public tokenLocker;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event NewRewardPerBlock(uint oldReward, uint newReward);\\n    event NewMultiplier(uint oldMultiplier, uint newMultiplier);\\n    event NewTokenLocker(TokenLocker oldTokenLocker, TokenLocker newTokenLocker);\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require (_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    constructor(\\n        P2EToken _rewardToken,\\n        P2EBar _bar,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock\\n    ) SafeOwnable(msg.sender) {\\n        rewardToken = _rewardToken;\\n        bar = _bar;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber, bool withUpdate) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewMultiplier(BONUS_MULTIPLIER, multiplierNumber);\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function updateRewardPerBlock(uint256 _rewardPerBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewRewardPerBlock(rewardPerBlock, _rewardPerBlock);\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _token, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        require(address(_token) != address(bar), \\\"can not add bar\\\");\\n        require(!existToken[address(_token)], \\\"token not exist\\\");\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        pidOfToken[address(_token)] = poolInfo.length;\\n        poolInfo.push(PoolInfo({\\n            token: _token,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accP2EPerShare: 0\\n        }));\\n        existToken[address(_token)] = true;\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external validatePoolByPid(_pid) onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function pendingP2E(uint256 _pid, address _user) external validatePoolByPid(_pid) view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accP2EPerShare = pool.accP2EPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && tokenSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accP2EPerShare = accP2EPerShare.add(reward.mul(1e12).div(tokenSupply));\\n        }\\n        return user.amount.mul(accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        reward = rewardToken.mint(address(bar), reward);\\n        pool.accP2EPerShare = pool.accP2EPerShare.add(reward.mul(1e12).div(tokenSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function safeP2ETransfer(address _to, uint256 _amount) internal {\\n        bar.safeP2ETransfer(_to, _amount);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) external validatePoolByPid(_pid) nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pending > 0) {\\n                if (address(tokenLocker) == address(0)) {\\n                    safeP2ETransfer(msg.sender, pending);\\n                } else {\\n                    safeP2ETransfer(address(this), pending);\\n                    rewardToken.approve(address(tokenLocker), pending);\\n                    tokenLocker.addReceiver(msg.sender, pending);\\n                }\\n            }\\n        }\\n        if (_amount > 0) {\\n            uint balanceBefore = pool.token.balanceOf(address(this));\\n            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            uint balanceAfter = pool.token.balanceOf(address(this));\\n            _amount = balanceAfter.sub(balanceBefore);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accP2EPerShare).div(1e12);\\n        if (pool.token == rewardToken) {\\n            bar.mint(msg.sender, _amount);\\n        }\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external validatePoolByPid(_pid) nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            if (address(tokenLocker) == address(0)) {\\n                safeP2ETransfer(msg.sender, pending);\\n            } else {\\n                safeP2ETransfer(address(this), pending);\\n                rewardToken.approve(address(tokenLocker), pending);\\n                tokenLocker.addReceiver(msg.sender, pending);\\n            }\\n        }\\n        if(_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accP2EPerShare).div(1e12);\\n        if (pool.token == rewardToken) {\\n            bar.burn(msg.sender, _amount);\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid) external validatePoolByPid(_pid) nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(address(msg.sender), amount);\\n        if (pool.token == rewardToken) {\\n            bar.burn(msg.sender, amount);\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/P2EBar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"../token/P2EToken.sol\\\";\\n\\ncontract P2EBar is ERC20('P2EBar Token', 'FBAR'), Ownable {\\n    using SafeMath for uint256;\\n\\n    P2EToken public gibx;\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from ,uint256 _amount) external onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    constructor(P2EToken _gibx) {\\n        require(address(_gibx) != address(0), \\\"illegal gibx\\\");\\n        gibx = _gibx;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        _moveDelegates(from, to, amount);\\n    }\\n\\n    function safeP2ETransfer(address _to, uint256 _amount) external onlyOwner {\\n        uint256 gibxBal = gibx.balanceOf(address(this));\\n        if (_amount > gibxBal) {\\n            gibx.transfer(_to, gibxBal);\\n        } else {\\n            gibx.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    mapping (address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n      /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    function delegates(address delegator)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _delegates[delegator];\\n    }\\n\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"CAKE::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"CAKE::delegateBySig: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"CAKE::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    function getCurrentVotes(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    function getPriorVotes(address account, uint blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(blockNumber < block.number, \\\"CAKE::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee)\\n        internal\\n    {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying CAKEs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    )\\n        internal\\n    {\\n        uint32 blockNumber = safe32(block.number, \\\"CAKE::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolChefTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../core/Timelock.sol';\\nimport './PoolChef.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract PoolChefTimelock is Timelock {\\n\\n    mapping(address => bool) public existsPools;\\n    mapping(address => uint) public pidOfPool;\\n    mapping(uint256 => bool) public isExcludedPidUpdate;\\n    PoolChef poolChef;\\n\\n    struct SetPendingOwnerData {\\n        address pendingOwner;\\n        uint timestamp;\\n        bool exists;\\n    }\\n    SetPendingOwnerData setPendingOwnerData;\\n\\n    constructor(PoolChef poolChef_, address admin_, uint delay_) Timelock(admin_, delay_) {\\n        require(address(poolChef_) != address(0), \\\"illegal poolChef address\\\");\\n        require(admin_ != address(0), \\\"illegal admin address\\\");\\n        poolChef = poolChef_;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n        _;\\n    }\\n\\n    function excludedPidUpdate(uint256 _pid) external onlyAdmin{\\n        isExcludedPidUpdate[_pid] = true;\\n    }\\n    \\n    function includePidUpdate(uint256 _pid) external onlyAdmin{\\n        isExcludedPidUpdate[_pid] = false;\\n    }\\n    \\n\\n    function addExistsPools(address pool, uint pid) external onlyAdmin {\\n        require(existsPools[pool] == false, \\\"Timelock:: pair already exists\\\");\\n        existsPools[pool] = true;\\n        pidOfPool[pool] = pid;\\n    }\\n\\n    function delExistsPools(address pool) external onlyAdmin {\\n        require(existsPools[pool] == true, \\\"Timelock:: pair not exists\\\");\\n        delete existsPools[pool];\\n        delete pidOfPool[pool];\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyAdmin {\\n        require(address(_lpToken) != address(0), \\\"_lpToken address cannot be 0\\\");\\n        require(existsPools[address(_lpToken)] == false, \\\"Timelock:: pair already exists\\\");\\n        _lpToken.balanceOf(msg.sender); //check if is a legal pair\\n        uint pid = poolChef.poolLength();\\n        poolChef.add(_allocPoint, _lpToken, false);\\n        if(_withUpdate){\\n            massUpdatePools();\\n        }\\n        pidOfPool[address(_lpToken)] = pid;\\n        existsPools[address(_lpToken)] = true;\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyAdmin {\\n        require(_pid < poolChef.poolLength(), 'Pool does not exist');\\n\\n        poolChef.set(_pid, _allocPoint, false);\\n        if(_withUpdate){\\n            massUpdatePools();\\n        }\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = poolChef.poolLength();\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if(!isExcludedPidUpdate[pid]){\\n                poolChef.updatePool(pid);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\\n// Copyright 2020 Compound Labs, Inc.\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n//\\n// Ctrl+f for XXX to see all the modifications.\\n\\n// XXX: pragma solidity ^0.5.16;\\npragma solidity ^0.7.6;\\n\\n// XXX: import \\\"./SafeMath.sol\\\";\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/ISafeOwnable.sol';\\n\\ncontract Timelock {\\n    using SafeMath for uint;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 6 hours;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n    bool public admin_initialized;\\n\\n    mapping (bytes32 => bool) public queuedTransactions;\\n\\n\\n    constructor(address admin_, uint delay_) {\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::constructor: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::constructor: Delay must not exceed maximum delay.\\\");\\n\\n        admin = admin_;\\n        delay = delay_;\\n        admin_initialized = false;\\n    }\\n\\n    // XXX: function() external payable { }\\n    receive() external payable { }\\n\\n    function setDelay(uint delay_) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        // allows one time setting of admin for deployment purposes\\n        if (admin_initialized) {\\n            require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Timelock::setPendingAdmin: First call must come from admin.\\\");\\n            admin_initialized = true;\\n        }\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n\\n    function acceptOwner(ISafeOwnable target) external {\\n        require(msg.sender == admin, \\\"Timelock::acceptAdmin: Call must come from admin.\\\");\\n        target.acceptOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ISafeOwnable {\\n    function acceptOwner() external;\\n}\\n\"\r\n    },\r\n    \"contracts/farm/MasterChefTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../core/Timelock.sol';\\nimport './MasterChef.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract MasterChefTimelock is Timelock {\\n\\n    mapping(address => bool) public existsPools;\\n    mapping(address => uint) public pidOfPool;\\n    mapping(uint256 => bool) public isExcludedPidUpdate;\\n    MasterChef masterChef;\\n\\n    struct SetPendingOwnerData {\\n        address pendingOwner;\\n        uint timestamp;\\n        bool exists;\\n    }\\n    SetPendingOwnerData setPendingOwnerData;\\n\\n    constructor(MasterChef masterChef_, address admin_, uint delay_) Timelock(admin_, delay_) {\\n        require(address(masterChef_) != address(0), \\\"illegal masterChef address\\\");\\n        require(admin_ != address(0), \\\"illegal admin address\\\");\\n        masterChef = masterChef_;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n        _;\\n    }\\n\\n    function excludedPidUpdate(uint256 _pid) external onlyAdmin{\\n        isExcludedPidUpdate[_pid] = true;\\n    }\\n    \\n    function includePidUpdate(uint256 _pid) external onlyAdmin{\\n        isExcludedPidUpdate[_pid] = false;\\n    }\\n    \\n\\n    function addExistsPools(address pool, uint pid) external onlyAdmin {\\n        require(existsPools[pool] == false, \\\"Timelock:: pair already exists\\\");\\n        existsPools[pool] = true;\\n        pidOfPool[pool] = pid;\\n    }\\n\\n    function delExistsPools(address pool) external onlyAdmin {\\n        require(existsPools[pool] == true, \\\"Timelock:: pair not exists\\\");\\n        delete existsPools[pool];\\n        delete pidOfPool[pool];\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyAdmin {\\n        require(address(_lpToken) != address(0), \\\"_lpToken address cannot be 0\\\");\\n        require(existsPools[address(_lpToken)] == false, \\\"Timelock:: pair already exists\\\");\\n        _lpToken.balanceOf(msg.sender); //check if is a legal pair\\n        uint pid = masterChef.poolLength();\\n        masterChef.add(_allocPoint, _lpToken, false);\\n        if(_withUpdate){\\n            massUpdatePools();\\n        }\\n        pidOfPool[address(_lpToken)] = pid;\\n        existsPools[address(_lpToken)] = true;\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyAdmin {\\n        require(_pid < masterChef.poolLength(), 'Pool does not exist');\\n\\n        masterChef.set(_pid, _allocPoint, false);\\n        if(_withUpdate){\\n            massUpdatePools();\\n        }\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = masterChef.poolLength();\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if(!isExcludedPidUpdate[pid]){\\n                masterChef.updatePool(pid);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\nimport \\\"../token/P2EToken.sol\\\";\\n\\ncontract MasterChef is SafeOwnable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 rewardDebt; \\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken;           \\n        uint256 allocPoint;       \\n        uint256 lastRewardBlock;  \\n        uint256 accP2EPerShare; \\n    }\\n\\n    P2EToken public rewardToken;\\n    uint256 public rewardPerBlock;\\n    uint256 public BONUS_MULTIPLIER;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(address => uint256) public pidOfLP;\\n    mapping(address => bool) public existsLP;\\n    // Info of each user that stakes LP tokens.\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when CAKE mining starts.\\n    uint256 public startBlock;\\n    TokenLocker public tokenLocker;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event NewRewardPerBlock(uint oldReward, uint newReward);\\n    event NewMultiplier(uint oldMultiplier, uint newMultiplier);\\n    event NewPool(uint pid, address lpToken, uint allocPoint, uint totalPoint);\\n    event NewTokenLocker(TokenLocker oldTokenLocker, TokenLocker newTokenLocker);\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require (_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    constructor(\\n        P2EToken _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock\\n    ) SafeOwnable(msg.sender) {\\n        require(address(_rewardToken) != address(0), \\\"illegal rewardToken\\\");\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        BONUS_MULTIPLIER = 1;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber, bool withUpdate) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewMultiplier(BONUS_MULTIPLIER, multiplierNumber);\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function updateP2EPerBlock(uint256 _rewardPerBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewRewardPerBlock(rewardPerBlock, _rewardPerBlock);\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyOwner {\\n        require(address(_lpToken) != address(rewardToken), \\\"can not add reward\\\");\\n        require(!existsLP[address(_lpToken)], \\\"lp already exist\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        pidOfLP[address(_lpToken)] = poolInfo.length;\\n        existsLP[address(_lpToken)] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken: _lpToken,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accP2EPerShare: 0\\n        }));\\n        emit NewPool(poolInfo.length - 1, address(_lpToken), _allocPoint, totalAllocPoint);\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner validatePoolByPid(_pid) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n        emit NewPool(_pid, address(poolInfo[_pid].lpToken), _allocPoint, totalAllocPoint);\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function pendingP2E(uint256 _pid, address _user) external validatePoolByPid(_pid) view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accP2EPerShare = pool.accP2EPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accP2EPerShare = accP2EPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        rewardReward = rewardToken.mint(address(this), rewardReward);\\n        pool.accP2EPerShare = pool.accP2EPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pending > 0) {\\n                if (address(tokenLocker) == address(0)) {\\n                    safeP2ETransfer(msg.sender, pending);\\n                } else {\\n                    rewardToken.approve(address(tokenLocker), pending);\\n                    tokenLocker.addReceiver(msg.sender, pending);\\n                }\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accP2EPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accP2EPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            if (address(tokenLocker) == address(0)) {\\n                safeP2ETransfer(msg.sender, pending);\\n            } else {\\n                rewardToken.approve(address(tokenLocker), pending);\\n                tokenLocker.addReceiver(msg.sender, pending);\\n            }\\n        }\\n        if(_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accP2EPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    function safeP2ETransfer(address _to, uint256 _amount) internal {\\n        uint currentBalance = IERC20(rewardToken).balanceOf(address(this));\\n        if (currentBalance < _amount) {\\n            _amount = currentBalance;\\n        }\\n        IERC20(rewardToken).safeTransfer(_to, _amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/swap/P2ESwapFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '../interfaces/IP2EFactory.sol';\\nimport '../interfaces/IP2ERouter.sol';\\nimport '../libraries/P2ELibrary.sol';\\nimport '../interfaces/IP2EPair.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract P2ESwapFee is SafeOwnable {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event NewBoardroomReceiver(address oldReceiver, address newReceiver);\\n    event NewReceiver(address receiver, uint percent);\\n    event NewCaller(address oldCaller, address newCaller);\\n    event NewSupportToken(address token);\\n    event DelSupportToken(address token);\\n    event NewDestroyPercent(uint oldPercent, uint newPercent);\\n\\n    IP2EFactory public immutable factory;\\n    IP2ERouter public immutable router;\\n    address public immutable middleToken;\\n    address[] public supportTokenList;\\n    mapping(address => bool) public supportToken;\\n\\n    address public constant hole = 0x000000000000000000000000000000000000dEaD;  //destroy address\\n    address[] public receivers;\\n    mapping(address => uint) public receiverFees;\\n    uint public totalPercent;\\n    uint public constant FEE_BASE = 1e6;\\n    address public immutable ownerReceiver;                                               //any token can be got by this address\\n\\n    address public caller;\\n    address public immutable destroyToken;\\n    uint public destroyPercent;\\n\\n    function addSupportToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"token address is zero\\\");\\n        for (uint i = 0; i < supportTokenList.length; i ++) {\\n            require(supportTokenList[i] != _token, \\\"token already exist\\\");\\n        }\\n        //require(!supportToken[_token], \\\"token already supported\\\");\\n        supportTokenList.push(_token);\\n        supportToken[_token] = true;\\n        emit NewSupportToken(_token);\\n    }\\n\\n    function delSupportToken(address _token) external onlyOwner {\\n        uint currentId = 0;\\n        for (; currentId < supportTokenList.length; currentId ++) {\\n            if (supportTokenList[currentId] == _token) {\\n                break;\\n            }\\n        }\\n        require(currentId < supportTokenList.length, \\\"receiver not exist\\\");\\n        delete supportToken[_token];\\n        supportTokenList[currentId] = supportTokenList[supportTokenList.length - 1];\\n        supportTokenList.pop();\\n        emit DelSupportToken(_token);\\n    }\\n\\n    function addReceiver(address _receiver, uint _percent) external onlyOwner {\\n        require(_receiver != address(0), \\\"receiver address is zero\\\");\\n        require(_percent <= FEE_BASE, \\\"illegal percent\\\");\\n        for (uint i = 0; i < receivers.length; i ++) {\\n            require(receivers[i] != _receiver, \\\"receiver already exist\\\");\\n        }\\n        require(totalPercent <= FEE_BASE.sub(_percent), \\\"illegal percent\\\");\\n        totalPercent = totalPercent.add(_percent);\\n        receivers.push(_receiver);\\n        receiverFees[_receiver] = _percent;\\n        emit NewReceiver(_receiver, _percent);\\n    }\\n\\n    function delReceiver(address _receiver) external onlyOwner {\\n        uint currentId = 0;\\n        for (; currentId < receivers.length; currentId ++) {\\n            if (receivers[currentId] == _receiver) {\\n                break;\\n            }\\n        }\\n        require(currentId < receivers.length, \\\"receiver not exist\\\");\\n        totalPercent = totalPercent.sub(receiverFees[_receiver]);\\n        delete receiverFees[_receiver];\\n        receivers[currentId] = receivers[receivers.length - 1];\\n        receivers.pop();\\n        emit NewReceiver(_receiver, 0);\\n    }\\n\\n    function setCaller(address _caller) external onlyOwner {\\n        emit NewCaller(caller, _caller);\\n        caller = _caller; \\n    }\\n\\n    function setDestroyPercent(uint _percent) external onlyOwner {\\n        require(_percent <= FEE_BASE, \\\"illegam percent\\\");\\n        emit NewDestroyPercent(destroyPercent, _percent);\\n        destroyPercent = _percent;\\n    }\\n\\n    modifier onlyOwnerOrCaller() {\\n        require(owner() == _msgSender() || caller == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(IP2EFactory _factory, IP2ERouter _router, address _middleToken, address _destroyToken, address _ownerReceiver) SafeOwnable(msg.sender) {\\n        require(address(_factory) != address(0), \\\"factory address is zero\\\");\\n        factory = _factory;\\n        require(address(_router) != address(0), \\\"router address is zero\\\");\\n        router = _router;\\n        require(_middleToken != address(0), \\\"middleToken address is zero\\\");\\n        middleToken = _middleToken;\\n        require(_destroyToken != address(0), \\\"destroyToken address is zero\\\");\\n        destroyToken = _destroyToken;\\n        require(_ownerReceiver != address(0), \\\"ownerReceiver address is zero\\\");\\n        ownerReceiver = _ownerReceiver;\\n    }\\n\\n    function canRemove(IP2EPair pair) internal view returns (bool) {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        uint balance0 = IERC20(token0).balanceOf(address(pair));\\n        uint balance1 = IERC20(token1).balanceOf(address(pair));\\n        uint totalSupply = pair.totalSupply();\\n        if (totalSupply == 0) {\\n            return false;\\n        }\\n        uint liquidity = pair.balanceOf(address(this));\\n        uint amount0 = liquidity.mul(balance0) / totalSupply; // using balances ensures pro-rata distribution\\n        uint amount1 = liquidity.mul(balance1) / totalSupply; // using balances ensures pro-rata distribution\\n        if (amount0 == 0 || amount1 == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function doHardwork(address[] calldata pairs, uint minAmount) external onlyOwnerOrCaller {\\n        for (uint i = 0; i < pairs.length; i ++) {\\n            IP2EPair pair = IP2EPair(pairs[i]);\\n            if (!supportToken[pair.token0()] && !supportToken[pair.token1()]) {\\n                continue;\\n            }\\n            uint balance = pair.balanceOf(address(this));\\n            if (balance == 0) {\\n                continue;\\n            }\\n            if (balance < minAmount) {\\n                continue;\\n            }\\n            if (!canRemove(pair)) {\\n                continue;\\n            }\\n            pair.approve(address(router), balance);\\n            router.removeLiquidity(\\n                pair.token0(),\\n                pair.token1(),\\n                balance,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp\\n            );\\n            address swapToken = supportToken[pair.token0()] ? pair.token1() : pair.token0();\\n            address targetToken = supportToken[pair.token0()] ? pair.token0() : pair.token1();\\n            address[] memory path = new address[](2);\\n            path[0] = swapToken; path[1] = targetToken;\\n            balance = IERC20(swapToken).balanceOf(address(this));\\n            IERC20(swapToken).approve(address(router), balance);\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                balance,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function destroyAll() external onlyOwner {\\n        address[] memory path = new address[](2);\\n        uint balance = 0;\\n        for (uint i = 0; i < supportTokenList.length; i ++) {\\n            IERC20 token = IERC20(supportTokenList[i]);\\n            balance = token.balanceOf(address(this));\\n            if (balance == 0) {\\n                continue;\\n            }\\n            if (address(token) != middleToken) {\\n                path[0] = address(token);path[1] = middleToken;\\n                IERC20(token).approve(address(router), balance);\\n                router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    balance,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            }\\n        }\\n        balance = IERC20(middleToken).balanceOf(address(this));\\n        uint feeAmount = balance.mul(FEE_BASE.sub(destroyPercent)).div(FEE_BASE);\\n        for (uint i = 0; i < receivers.length; i ++) {\\n            uint amount = feeAmount.mul(receiverFees[receivers[i]]).div(FEE_BASE);\\n            if (amount > 0) {\\n                IERC20(middleToken).safeTransfer(receivers[i], amount);\\n            }\\n        }\\n        uint destroyAmount = balance.sub(feeAmount);\\n        path[0] = middleToken;path[1] = destroyToken;\\n        IERC20(middleToken).approve(address(router), destroyAmount);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            destroyAmount,\\n            0,\\n            path,\\n            hole,\\n            block.timestamp\\n        );\\n    }\\n\\n    function transferOut(address token, uint amount) external onlyOwner {\\n        IERC20 erc20 = IERC20(token);\\n        uint balance = erc20.balanceOf(address(this));\\n        if (balance < amount) {\\n            amount = balance;\\n        }\\n        require(ownerReceiver != address(0), \\\"ownerReceiver is zero\\\");\\n        SafeERC20.safeTransfer(erc20, ownerReceiver, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2ERouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2ERouter {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/swapmining/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../libraries/OracleLibrary.sol\\\";\\nimport \\\"../interfaces/IP2EFactory.sol\\\";\\nimport \\\"../libraries/P2ELibrary.sol\\\";\\nimport '../libraries/FixedPoint.sol';\\nimport \\\"../interfaces/IP2EPair.sol\\\";\\n\\ncontract Oracle {\\n    using FixedPoint for *;\\n    using SafeMath for uint;\\n\\n    struct Observation {\\n        uint timestamp;\\n        uint price0Cumulative;\\n        uint price1Cumulative;\\n    }\\n\\n    address public immutable factory;\\n    uint public constant CYCLE = 30 minutes;\\n\\n    // mapping from pair address to a list of price observations of that pair\\n    mapping(address => Observation) public pairObservations;\\n\\n    constructor(address factory_) {\\n        factory = factory_;\\n    }\\n\\n\\n    function update(address tokenA, address tokenB) external {\\n        if (IP2EFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            return;\\n        }\\n        address pair = IP2EFactory(factory).expectPairFor(tokenA, tokenB);\\n\\n        Observation storage observation = pairObservations[pair];\\n        uint timeElapsed = block.timestamp - observation.timestamp;\\n        require(timeElapsed >= CYCLE, 'Oracle: PERIOD_NOT_ELAPSED');\\n        (uint price0Cumulative, uint price1Cumulative,) = OracleLibrary.currentCumulativePrices(pair);\\n        observation.timestamp = block.timestamp;\\n        observation.price0Cumulative = price0Cumulative;\\n        observation.price1Cumulative = price1Cumulative;\\n    }\\n\\n\\n    function computeAmountOut(\\n        uint priceCumulativeStart, uint priceCumulativeEnd,\\n        uint timeElapsed, uint amountIn\\n    ) private pure returns (uint amountOut) {\\n        // overflow is desired.\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\\n            uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\\n        );\\n        amountOut = priceAverage.mul(amountIn).decode144();\\n    }\\n\\n\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut) {\\n        address pair = IP2EFactory(factory).expectPairFor(tokenIn, tokenOut);\\n        Observation storage observation = pairObservations[pair];\\n        uint timeElapsed = block.timestamp - observation.timestamp;\\n        (uint price0Cumulative, uint price1Cumulative,) = OracleLibrary.currentCumulativePrices(pair);\\n        (address token0,) = P2ELibrary.sortTokens(tokenIn, tokenOut);\\n\\n        if (token0 == tokenIn) {\\n            return computeAmountOut(observation.price0Cumulative, price0Cumulative, timeElapsed, amountIn);\\n        } else {\\n            return computeAmountOut(observation.price1Cumulative, price1Cumulative, timeElapsed, amountIn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OracleLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity 0.7.6;\\n\\nimport '../interfaces/IP2EPair.sol';\\nimport './FixedPoint.sol';\\n\\nlibrary OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IP2EPair(pair).price0CumulativeLast();\\n        price1Cumulative = IP2EPair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IP2EPair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity 0.7.6;\\n\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/P2ERouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport \\\"../core/SafeOwnable.sol\\\";\\nimport '../libraries/TransferHelper.sol';\\nimport '../interfaces/ISwapMining.sol';\\nimport '../interfaces/IP2EFactory.sol';\\nimport '../interfaces/IP2ERouter.sol';\\nimport '../libraries/P2ELibrary.sol';\\nimport '../interfaces/IWETH.sol';\\n\\ncontract P2ERouter is IP2ERouter, SafeOwnable {\\n    using SafeMath for uint;\\n\\n    address public immutable override factory;\\n    address public immutable override WETH;\\n    address public swapMining;\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'P2ERouter: EXPIRED');\\n        _;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    function setSwapMining(address _swapMining) public onlyOwner {\\n        swapMining = _swapMining;\\n    }\\n\\n    constructor(address _factory, address _WETH) SafeOwnable(msg.sender) {\\n        require(_factory != address(0), \\\"illegal address\\\");\\n        require(_WETH != address(0), \\\"illegal WETH\\\");\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal virtual returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IP2EFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IP2EFactory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint reserveA, uint reserveB) = P2ELibrary.getReserves(factory, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = P2ELibrary.quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'P2ERouter: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = P2ELibrary.quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'P2ERouter: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = P2ELibrary.pairFor(factory, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = IP2EPair(pair).mint(to);\\n    }\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = P2ELibrary.pairFor(factory, token, WETH);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n        liquidity = IP2EPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = P2ELibrary.pairFor(factory, tokenA, tokenB);\\n        IP2EPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n        (uint amount0, uint amount1) = IP2EPair(pair).burn(to);\\n        (address token0,) = P2ELibrary.sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'P2ERouter: INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'P2ERouter: INSUFFICIENT_B_AMOUNT');\\n    }\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override returns (uint amountA, uint amountB) {\\n        address pair = P2ELibrary.pairFor(factory, tokenA, tokenB);\\n        uint value = approveMax ? uint(-1) : liquidity;\\n        IP2EPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n    }\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override returns (uint amountToken, uint amountETH) {\\n        address pair = P2ELibrary.pairFor(factory, token, WETH);\\n        uint value = approveMax ? uint(-1) : liquidity;\\n        IP2EPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\\n        (, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override returns (uint amountETH) {\\n        address pair = P2ELibrary.pairFor(factory, token, WETH);\\n        uint value = approveMax ? uint(-1) : liquidity;\\n        IP2EPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = P2ELibrary.sortTokens(input, output);\\n            uint amountOut = amounts[i + 1];\\n            if (swapMining != address(0)) {\\n                ISwapMining(swapMining).swap(msg.sender, input, output, amountOut);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n            address to = i < path.length - 2 ? P2ELibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            IP2EPair(P2ELibrary.pairFor(factory, input, output)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n    }\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = P2ELibrary.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = P2ELibrary.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, 'P2ERouter: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, 'P2ERouter: INVALID_PATH');\\n        amounts = P2ELibrary.getAmountsOut(factory, msg.value, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n    }\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, 'P2ERouter: INVALID_PATH');\\n        amounts = P2ELibrary.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, 'P2ERouter: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, 'P2ERouter: INVALID_PATH');\\n        amounts = P2ELibrary.getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, 'P2ERouter: INVALID_PATH');\\n        amounts = P2ELibrary.getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= msg.value, 'P2ERouter: EXCESSIVE_INPUT_AMOUNT');\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(P2ELibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = P2ELibrary.sortTokens(input, output);\\n            IP2EPair pair = IP2EPair(P2ELibrary.pairFor(factory, input, output));\\n            uint amountInput;\\n            uint amountOutput;\\n            { // scope to avoid stack too deep errors\\n            (uint reserve0, uint reserve1,) = pair.getReserves();\\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n            amountOutput = P2ELibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            if (swapMining != address(0)) {\\n                ISwapMining(swapMining).swap(msg.sender, input, output, amountOutput);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < path.length - 2 ? P2ELibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amountIn\\n        );\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n    {\\n        require(path[0] == WETH, 'P2ERouter: INVALID_PATH');\\n        uint amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        assert(IWETH(WETH).transfer(P2ELibrary.pairFor(factory, path[0], path[1]), amountIn));\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n    {\\n        require(path[path.length - 1] == WETH, 'P2ERouter: INVALID_PATH');\\n        TransferHelper.safeTransferFrom(\\n            path[0], msg.sender, P2ELibrary.pairFor(factory, path[0], path[1]), amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, 'P2ERouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    // **** LIBRARY FUNCTIONS ****\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\n        return P2ELibrary.quote(amountA, reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (uint amountOut)\\n    {\\n        return P2ELibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (uint amountIn)\\n    {\\n        return P2ELibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountsOut(uint amountIn, address[] memory path)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint[] memory amounts)\\n    {\\n        return P2ELibrary.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    function getAmountsIn(uint amountOut, address[] memory path)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint[] memory amounts)\\n    {\\n        return P2ELibrary.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        SafeERC20.safeApprove(IERC20(token), to, value);\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        SafeERC20.safeTransfer(IERC20(token), to, value);\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        SafeERC20.safeTransferFrom(IERC20(token), from, to, value);\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ISwapMining {\\n    function swap(address account, address input, address output, uint256 amount) external returns (bool);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/nft/CollectRoomManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../libraries/TransferHelper.sol';\\nimport '../interfaces/IP2EERC1155.sol';\\nimport '../interfaces/IInvite.sol';\\nimport '../interfaces/IWETH.sol';\\nimport '../core/SafeOwnable.sol';\\nimport '../core/Random.sol';\\nimport 'hardhat/console.sol';\\n\\n\\ncontract CollectRoomManager is SafeOwnable, Random {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event NewCollectRoom(uint rid, IERC20 rewardToken, uint rewardAmount, uint startSeconds, uint endSeconds);\\n    event RoomValue(uint rid, IERC20 valueToken, uint valueAmount);\\n    event RoomRange(uint rid, uint nftType, uint nftID, uint startIndex, uint endIndex);\\n    event NFTCreated(IP2EERC1155 nftToken, uint rid, uint[] ids, uint[] types, uint[] values);\\n    event BuyBlindBox(uint rid, address user, IERC20 token, uint num, uint payAmount, uint payFee, bytes32 requestId);\\n    event OpenBlindBox(uint rid, address to, uint rangeIndex, uint num, bytes32 requestId);\\n    event Claim(uint rid, address to, uint num, uint reward);\\n    event NewMaxOpenNum(uint256 oldMaxOpenNum, uint256 newMaxOpenNum);\\n    event RewardPoolDeposit(uint rid, address from, IERC20 token, uint256 amount);\\n    event RewardPoolWithdraw(uint rid, address to, IERC20 token, uint256 amount);\\n\\n    event NewTokenReceiver(address oldReceiver, address newReceiver);\\n    event NewFeeReceiver(address oldReceiver, address newReceiver);\\n    event NewRewardReceiver(address oldReceiver, address newReceiver);\\n    event TokenWithdraw(IERC20 token, uint amount);\\n    event FeeWithdraw(IERC20 token, uint amount);\\n    event RewardWithdraw(uint rid, IERC20 token, uint amount);\\n\\n    uint256 constant MAX_END_INDEX = 1000000;\\n    uint256 constant VALUE_FEE_BASE = 10000;\\n    address immutable WETH;\\n    uint256 constant MAX_INVITE_HEIGHT = 3;\\n    function getInvitePercent(uint height) internal pure returns (uint) {\\n        if (height == 0) {\\n            return 2000;\\n        } else if (height == 1) {\\n            return 1000;\\n        } else if (height == 2) {\\n            return 500;\\n        } else {\\n            return 0;\\n        }\\n    }\\n    uint256 constant PERCENT_BASE = 10000;\\n\\n    struct RoomInfo {\\n        IERC20 rewardToken;\\n        uint256 rewardAmount;\\n        uint256 startSeconds;\\n        uint256 endSeconds;\\n        uint256 rewardPool;\\n        uint256 valueFee;\\n        uint256 maxOpenNum;\\n    }\\n\\n    struct RangeInfo {\\n        uint256 nftType;\\n        uint256 nftId;\\n        uint256 startIndex;\\n        uint256 endIndex;\\n    }\\n\\n    struct RandomInfo {\\n        address to;\\n        uint256 rid;\\n        uint256 num;\\n    }\\n\\n    RoomInfo[] public roomInfo;\\n    mapping(uint256 => IERC20[]) public valueTokenList;\\n    mapping(uint256 => mapping(IERC20 => bool)) public valueTokens;\\n    mapping(uint256 => mapping(IERC20 => uint256)) public valueAmount;\\n    mapping(uint256 => RangeInfo[]) public rangeInfo;\\n    IInvite public invite;\\n    IP2EERC1155 public nftToken;\\n\\n    address public tokenReceiver;\\n    address public feeReceiver;\\n    address public rewardReceiver;\\n    mapping(IERC20 => uint) public totalTokenAmount;\\n    mapping(IERC20 => uint) public totalFeeAmount;\\n\\n    mapping(bytes32 => RandomInfo) public randomInfo;\\n    mapping(uint256 => mapping(address => uint256)) public blindBoxNum;\\n\\n    function setTokenReceiver(address _tokenReceiver) external onlyOwner {\\n        require(_tokenReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        emit NewTokenReceiver(tokenReceiver, _tokenReceiver);\\n        tokenReceiver = _tokenReceiver;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        require(_feeReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        emit NewFeeReceiver(feeReceiver, _feeReceiver);\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function setRewardReceiver(address _rewardReceiver) external onlyOwner {\\n        require(_rewardReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        emit NewRewardReceiver(_rewardReceiver, rewardReceiver);\\n        rewardReceiver = _rewardReceiver;\\n    }\\n\\n    function tokenTransfer(IERC20 _token, address _to, uint _amount) internal returns (uint) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        if (address(_token) == WETH) {\\n            IWETH(address(_token)).withdraw(_amount);\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    function tokenWithdraw(IERC20 _token, uint _amount) external onlyOwner {\\n        if (_amount > totalTokenAmount[_token]) {\\n            _amount = totalTokenAmount[_token];\\n        }\\n        totalTokenAmount[_token] = totalTokenAmount[_token].sub(_amount);\\n        require(tokenReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        tokenTransfer(_token, tokenReceiver, _amount);\\n        emit TokenWithdraw(_token, _amount);\\n    }\\n\\n    function feeWithdraw(IERC20 _token, uint _amount) external onlyOwner {\\n        if (_amount > totalFeeAmount[_token]) {\\n            _amount = totalFeeAmount[_token];\\n        }\\n        totalFeeAmount[_token] = totalFeeAmount[_token].sub(_amount);\\n        require(feeReceiver != address(0), \\\"feeReceiver is zero\\\");\\n        tokenTransfer(_token, feeReceiver, _amount);\\n        emit FeeWithdraw(_token, _amount);\\n    }\\n\\n    function roomInfoLength() external view returns (uint256) {\\n        return roomInfo.length;\\n    }\\n\\n    function valueInfoLength(uint256 rid) external view returns (uint256) {\\n        return valueTokenList[rid].length;\\n    }\\n\\n    function rangeInfoLength(uint256 rid) external view returns (uint256) {\\n        return rangeInfo[rid].length;\\n    }\\n\\n    function setMaxOpenNum(uint rid, uint256 newOpenNum) external onlyOwner {\\n        require(rid < roomInfo.length, \\\"illegal rid\\\");\\n        emit NewMaxOpenNum(roomInfo[rid].maxOpenNum, newOpenNum);\\n        roomInfo[rid].maxOpenNum = newOpenNum;\\n    }\\n\\n    function setRoomTime(uint rid, uint _startSeconds, uint _endSeconds) external RoomNotBegin(rid) {\\n        require(msg.sender == owner(), \\\"Caller not owner\\\");\\n        require(_endSeconds > _startSeconds, \\\"illegal time\\\");\\n        roomInfo[rid].startSeconds = _startSeconds;\\n        roomInfo[rid].endSeconds = _endSeconds;\\n    }\\n\\n    constructor(address _WETH, IInvite _invite, IP2EERC1155 _nftToken, address _tokenReceiver, address _feeReceiver, address _rewardReceiver, address _linkAccessor) Random(_linkAccessor) SafeOwnable(msg.sender) {\\n        require(_WETH != address(0), \\\"WETH is zero\\\");\\n        WETH = _WETH;\\n        require(address(_invite) != address(0), \\\"invite address is zero\\\");\\n        invite = _invite;\\n        require(address(_nftToken) != address(0), \\\"nftToken is zero\\\");\\n        nftToken = _nftToken;\\n        require(_tokenReceiver != address(0), \\\"receiver is zero\\\");\\n        tokenReceiver = _tokenReceiver;\\n        emit NewTokenReceiver(address(0), tokenReceiver);\\n        require(_feeReceiver != address(0), \\\"fee reciever is zero\\\");\\n        feeReceiver = _feeReceiver;\\n        emit NewFeeReceiver(address(0), feeReceiver);\\n        require(_rewardReceiver != address(0), \\\"rewardReceiver is zero\\\");\\n        rewardReceiver = _rewardReceiver;\\n        emit NewRewardReceiver(address(0), rewardReceiver);\\n    }\\n\\n    modifier RoomNotBegin(uint rid) {\\n        require(rid < roomInfo.length, \\\"illegal rid\\\");\\n        require(block.timestamp < roomInfo[rid].startSeconds || block.timestamp > roomInfo[rid].endSeconds, \\\"Room Already Begin\\\");\\n        _;\\n    }\\n\\n    modifier RoomBegin(uint rid) {\\n        require(block.timestamp >= roomInfo[rid].startSeconds && block.timestamp <= roomInfo[rid].endSeconds, \\\"Room Already Finish\\\");\\n        _;\\n    }\\n\\n    function add(\\n        IERC20 _rewardToken, uint256 _rewardAmount, uint256 _startSeconds, uint256 _endSeconds, uint256 _valueFee, \\n        IERC20[] memory _tokens, uint256[] memory _amounts, uint256[] memory _nftTypes, uint256[] memory _nftValues, uint256[] memory _nftPercents\\n    ) external onlyOwner {\\n        require(address(_rewardToken) != address(0), \\\"rewardToken is zero address\\\");\\n        require(_endSeconds > _startSeconds, \\\"illegal time\\\");\\n        roomInfo.push(RoomInfo({\\n            rewardToken: _rewardToken,\\n            rewardAmount: _rewardAmount,\\n            startSeconds: _startSeconds,\\n            endSeconds: _endSeconds,\\n            rewardPool: 0,\\n            valueFee: _valueFee,\\n            maxOpenNum: 5\\n        }));\\n        uint rid = roomInfo.length - 1;\\n        emit NewCollectRoom(rid, _rewardToken, _rewardAmount, _startSeconds, _endSeconds);\\n        require(_nftTypes.length == _nftPercents.length && _nftTypes.length > 0, \\\"illegal type percent info\\\");\\n        uint lastEndIndex = 0;\\n        for (uint i = 0; i < rangeInfo[rid].length; i ++) {\\n            lastEndIndex = rangeInfo[rid][i].endIndex;\\n        }\\n        uint[] memory nftIDs = nftToken.createBatchDefault(_nftTypes, _nftValues);\\n        emit NFTCreated(nftToken, rid, nftIDs, _nftTypes, _nftValues);\\n        for (uint i = 0; i < _nftTypes.length; i ++) {\\n            rangeInfo[rid].push(RangeInfo({\\n                nftType : _nftTypes[i],\\n                startIndex: lastEndIndex,\\n                endIndex: lastEndIndex.add(_nftPercents[i]),\\n                nftId: nftIDs[i]\\n            }));\\n            lastEndIndex = lastEndIndex.add(_nftPercents[i]);\\n        }\\n        require(lastEndIndex == MAX_END_INDEX, \\\"illegal percent info\\\");\\n        require(_tokens.length == _amounts.length && _tokens.length > 0, \\\"illegal token amount info\\\");\\n        for (uint i = 0; i < _tokens.length; i ++) {\\n            require(address(_tokens[i]) != address(0), \\\"token address is zero\\\");\\n            require(_amounts[i] > 0, \\\"illegal amount value\\\");\\n            require(!valueTokens[rid][_tokens[i]], \\\"token already exists\\\");\\n            valueTokens[rid][_tokens[i]] = true;\\n            valueTokenList[rid].push(_tokens[i]);\\n            valueAmount[rid][_tokens[i]] = _amounts[i];\\n            emit RoomValue(rid, _tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function doRandom() internal returns (bytes32){\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin, block.coinbase, block.number)));\\n        bytes32 requestId = _requestRandom(seed);\\n        require(randomInfo[requestId].to == address(0), \\\"random already exists\\\");\\n        return requestId;\\n    }\\n\\n    function buyBlindBox(uint256 _rid, IERC20 _token, uint256 _num, address _to) external payable {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_num <= roomInfo[_rid].maxOpenNum, \\\"illegal open num\\\");\\n        require(block.timestamp >= room.startSeconds && block.timestamp <= room.endSeconds, \\\"room not begin or already finish\\\");\\n        require(valueTokens[_rid][_token], \\\"token not support\\\");\\n        uint payAmount = valueAmount[_rid][_token].mul(_num);\\n        uint payFee = payAmount.mul(room.valueFee).div(VALUE_FEE_BASE);\\n\\n        address[] memory inviters = invite.inviterTree(_to, MAX_INVITE_HEIGHT);\\n        uint[] memory amounts = new uint[](inviters.length);\\n        uint totalInviterAmount = 0;\\n        for (uint i = 0; i < inviters.length; i ++) {\\n            uint percent = getInvitePercent(i);\\n            amounts[i] = payAmount.mul(percent).div(PERCENT_BASE);\\n            totalInviterAmount = totalInviterAmount.add(amounts[i]);\\n        }\\n        if (address(_token) == WETH) {\\n            require(msg.value == payAmount.add(payFee), \\\"illegal ETH amount\\\");\\n            IWETH(WETH).deposit{value: payAmount.add(payFee)}();\\n        } else {\\n            SafeERC20.safeTransferFrom(_token, msg.sender, address(this), payAmount.add(payFee));\\n        }\\n        _token.safeTransfer(address(invite), totalInviterAmount);\\n        uint remainAmount = invite.sendReward(_to, _token, amounts);\\n        payAmount = payAmount.sub(totalInviterAmount.sub(remainAmount));\\n        totalTokenAmount[_token] = totalTokenAmount[_token].add(payAmount);\\n        totalFeeAmount[_token] = totalFeeAmount[_token].add(payFee);\\n\\n        bytes32 requestId = doRandom();\\n        randomInfo[requestId] = RandomInfo({\\n            to: _to,\\n            rid: _rid,\\n            num: _num\\n        });\\n        blindBoxNum[_rid][_to] = blindBoxNum[_rid][_to].add(_num);\\n\\n        emit BuyBlindBox(_rid, _to, _token, _num, payAmount.add(totalInviterAmount.sub(remainAmount)), payFee, requestId);\\n    }\\n\\n    function finishRandom(bytes32 _requestId) internal override {\\n        RandomInfo storage random = randomInfo[_requestId];\\n        require(random.to != address(0), \\\"requestId not exists\\\");\\n        uint seed = randomResult[_requestId];\\n        for (uint i = 0; i < random.num; i ++) {\\n            seed = uint256(keccak256(abi.encodePacked(seed, i)));\\n            uint nftRange = seed.mod(MAX_END_INDEX);\\n            uint rangeIndex = 0;\\n            for (; rangeIndex < rangeInfo[random.rid].length; rangeIndex ++) {\\n                if (nftRange >= rangeInfo[random.rid][rangeIndex].startIndex && nftRange < rangeInfo[random.rid][rangeIndex].endIndex) {\\n                    RangeInfo storage range = rangeInfo[random.rid][rangeIndex]; \\n                    nftToken.mint(random.to, range.nftId, 1, \\\"0x\\\");\\n                    emit OpenBlindBox(random.rid, random.to, rangeIndex, 1, _requestId);\\n                    break;\\n                }\\n            }\\n            require(rangeIndex < rangeInfo[random.rid].length, \\\"rangeInfo error\\\");\\n        }\\n        blindBoxNum[random.rid][random.to] = blindBoxNum[random.rid][random.to].sub(random.num);\\n        delete randomInfo[_requestId];\\n\\n        super.finishRandom(_requestId);\\n    }\\n\\n    function claim(uint256 rid, address to) external {\\n        require(rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[rid];\\n        uint256 nftNum = rangeInfo[rid].length;\\n        address[] memory accounts = new address[](nftNum);\\n        uint256[] memory ids = new uint256[](nftNum);\\n        for (uint i = 0; i < nftNum; i ++) {\\n            accounts[i] = to; \\n            ids[i] = rangeInfo[rid][i].nftId;\\n        }\\n        uint256[] memory balances = nftToken.balanceOfBatch(accounts, ids);\\n        uint minNum = uint(-1);\\n        for (uint i = 0; i < balances.length; i ++) {\\n            if (balances[i] < minNum) {\\n                minNum = balances[i];\\n            }\\n        }\\n        if (minNum <= 0) {\\n            return; \\n        }\\n        uint reward = room.rewardAmount.mul(minNum);\\n        require(room.rewardPool >= reward, \\\"reward pool not enough\\\");\\n        room.rewardPool = room.rewardPool.sub(reward);\\n        for (uint i = 0; i < balances.length; i ++) {\\n            balances[i] = minNum;\\n        }\\n        nftToken.burnBatch(to, ids, balances);\\n        SafeERC20.safeTransfer(room.rewardToken, to, reward);\\n        emit Claim(rid, to, minNum, reward);\\n    }\\n\\n    function roomDeposit(uint rid, uint amount) external {\\n        require(rid < roomInfo.length, \\\"rid not exist\\\");  \\n        RoomInfo storage room = roomInfo[rid];\\n        uint balanceBefore = room.rewardToken.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(room.rewardToken, msg.sender, address(this), amount);\\n        uint balanceAfter = room.rewardToken.balanceOf(address(this));\\n        require(balanceAfter > balanceBefore, \\\"token transfer error\\\");\\n        room.rewardPool = room.rewardPool.add(balanceAfter.sub(balanceBefore));\\n        emit RewardPoolDeposit(rid, msg.sender, room.rewardToken, balanceAfter.sub(balanceBefore));\\n    }\\n\\n    function roomWithdraw(uint rid, uint amount) external RoomNotBegin(rid) {\\n        require(msg.sender == owner(), \\\"Caller not owner\\\");\\n        RoomInfo storage room = roomInfo[rid];\\n        if (block.timestamp > room.endSeconds) {\\n            require(block.timestamp > room.endSeconds.add(60 * 60 * 24 * 7), \\\"the reward can be withdrawed only after 1 week\\\");\\n        }\\n        if (room.rewardPool < amount) {\\n            amount = room.rewardPool;\\n        }\\n        room.rewardPool = room.rewardPool.sub(amount);\\n        tokenTransfer(room.rewardToken, rewardReceiver, amount);\\n        emit RewardPoolWithdraw(rid, rewardReceiver, room.rewardToken, amount);\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2EERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2EERC1155 {\\n\\n    function create(\\n        uint256 _maxSupply,\\n        uint256 _initialSupply,\\n        uint256 _type,\\n        bytes calldata _data\\n    ) external returns (uint256 tokenId);\\n\\n    function createBatch(\\n        uint256 _maxSupply,\\n        uint256 _initialSupply,\\n        uint256[] calldata _types,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (uint256[] calldata tokenIds);\\n\\n    function createBatchDefault(uint256[] calldata _types, uint256[] calldata _values) external returns (uint256[] calldata tokenIds);\\n\\n    function mint(address to, uint256 _id, uint256 _quantity, bytes calldata _data) external;\\n\\n    function burn(address _account, uint256 _id, uint256 _amount) external;\\n\\n    function burnBatch(address account, uint256[] calldata ids, uint256[] calldata amounts) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function totalBalance(address account, uint256[] calldata ids) external view returns (uint256, uint256[] calldata);\\n\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] calldata);\\n\\n    function disableTokenTransfer(uint _id) external;\\n\\n    function enableTokenTransfer(uint _id) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInvite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IInvite {\\n\\n    function inviterTree(address _user, uint _height) external view returns (address[] memory);\\n\\n    function sendReward(address _user, IERC20 _token, uint[] memory amounts) external returns (uint);\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/nft/GameRoomManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../interfaces/IP2EERC1155.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\nimport '../core/Random.sol';\\nimport '../interfaces/IInvite.sol';\\n\\ncontract GameRoomManager is SafeOwnable, Random {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    event NewGameRoom(uint rid, IERC20 token, uint value, uint valueFee, uint odds);\\n    event RoomRange(uint rid, uint nftType, uint startIndex, uint endIndex);\\n    event BuyBlindBox(uint rid, address user, uint256 loop, uint num, uint payAmount, uint payFee, bytes32 requestId);\\n    event OpenBlindBox(uint rid, uint loop, address to, uint rangeIndex, bytes32 requestId);\\n    event Claim(uint rid, uint loop, address to, uint num, uint reward);\\n    event RewardPoolDeposit(uint rid, address from, IERC20 token, uint256 amount);\\n    event RewardPoolWithdraw(uint rid, address to, IERC20 token, uint256 amount);\\n    event NewReceiver(address oldReceiver, address newReceiver);\\n    event NewRewardReceiver(address oldRewardReceiver, address newRewardReceiver);\\n    event NewMaxOpenNum(uint256 oldMaxOpenNum, uint256 newMaxOpenNum);\\n\\n    uint256 constant MAX_END_INDEX = 1000000;\\n    uint256 constant VALUE_FEE_BASE = 10000;\\n    uint256 constant MAX_INVITE_HEIGHT = 3;\\n    function getInvitePercent(uint height) internal pure returns (uint) {\\n        if (height == 0) {\\n            return 2000;\\n        } else if (height == 1) {\\n            return 1000;\\n        } else if (height == 2) {\\n            return 500;\\n        } else {\\n            return 0;\\n        }\\n    }\\n    uint256 constant PERCENT_BASE = 10000;\\n\\n    struct RoomInfo {\\n        IERC20 token;\\n        uint256 value;\\n        uint256 currentLoop;\\n        uint256 loopBeginAt;\\n        uint256 loopFinishAt;\\n        uint256 loopInterval;\\n        bool loopFinish;\\n        uint256 valueFee;\\n        uint256 rewardAmount;\\n        uint256 odds;\\n        uint256 maxOpenNum;\\n    }\\n\\n    struct RangeInfo {\\n        uint256 nftType;\\n        uint256 startIndex;\\n        uint256 endIndex;\\n    }\\n\\n    struct RandomInfo {\\n        address to;\\n        uint256 rid;\\n        uint256 num;\\n        uint256 loop;\\n    }\\n\\n    RoomInfo[] public roomInfo;\\n    mapping(uint256 => RangeInfo[]) public rangeInfo;\\n    mapping(bytes32 => RandomInfo) public randomInfo;\\n    mapping(uint256 => uint256[]) nftTypes;\\n    mapping(uint256 => mapping(uint256 => uint256[])) public nftIDs;\\n    mapping(uint256 => mapping(uint256 => uint256)) public loopResult;\\n    mapping(uint256 => mapping(address => uint256)) public blindBoxNum;\\n\\n    IInvite public invite;\\n    IP2EERC1155 public nftToken;\\n    address public receiver;\\n    address public rewardReceiver;\\n\\n    function roomInfoLength() external view returns (uint256) {\\n        return roomInfo.length;\\n    }\\n\\n    function loopNFT(uint _rid, uint _loop) external view returns (uint256[] memory) {\\n        return nftIDs[_rid][_loop];\\n    }\\n    \\n    function rangeInfoLength(uint256 rid) external view returns (uint256) {\\n        return rangeInfo[rid].length;\\n    }\\n\\n    function setMaxOpenNum(uint rid, uint256 newOpenNum) external onlyOwner {\\n        require(rid < roomInfo.length, \\\"illegal rid\\\");\\n        emit NewMaxOpenNum(roomInfo[rid].maxOpenNum, newOpenNum);\\n        roomInfo[rid].maxOpenNum = newOpenNum;\\n    }\\n\\n    function setReceiver(address _receiver) external onlyOwner {\\n        require(_receiver != address(0), \\\"receiver is zero\\\");\\n        emit NewReceiver(receiver, _receiver);\\n        receiver = _receiver;\\n    }\\n\\n    function setRewardReceiver(address _rewardReceiver) external onlyOwner {\\n        require(_rewardReceiver != address(0), \\\"rewardReceiver is zero\\\");\\n        emit NewRewardReceiver(rewardReceiver, _rewardReceiver);\\n        rewardReceiver = _rewardReceiver;\\n    }\\n\\n    function beginLoop(uint _rid, uint _startAt) public {\\n        if (_rid >= roomInfo.length) {\\n            return;\\n        }\\n        RoomInfo storage room = roomInfo[_rid];\\n        if (block.timestamp <= room.loopFinishAt || block.timestamp > _startAt) {\\n            return;\\n        }\\n        room.currentLoop = room.currentLoop + 1;\\n        room.loopBeginAt = _startAt;\\n        room.loopFinishAt = _startAt.add(room.loopInterval);\\n        room.loopFinish = false;\\n        uint[] memory nftValues = new uint[](nftTypes[_rid].length);\\n        nftIDs[_rid][room.currentLoop] = nftToken.createBatchDefault(nftTypes[_rid], nftValues);\\n    }\\n\\n    function finishLoop(uint _rid, uint _loop) public {\\n        if (_rid >= roomInfo.length) {\\n            return;\\n        }\\n        RoomInfo storage room = roomInfo[_rid];\\n        if (_loop != room.currentLoop || room.loopFinish || block.timestamp < room.loopFinishAt) {\\n            return;\\n        }\\n        room.loopFinish = true;\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin, block.coinbase, block.number)));\\n        bytes32 requestId = _requestRandom(seed);\\n        require(randomInfo[requestId].to == address(0), \\\"random already exists\\\");\\n        randomInfo[requestId] = RandomInfo({\\n            to: address(this),\\n            rid: _rid,\\n            num: 1,\\n            loop: _loop\\n        });\\n        emit BuyBlindBox(_rid, address(this), _loop, 1, 0, 0, requestId);\\n    }\\n\\n    constructor(IInvite _invite, IP2EERC1155 _nftToken, address _receiver, address _rewardReceiver, address _linkAccessor) Random(_linkAccessor) SafeOwnable(msg.sender) {\\n        require(address(_invite) != address(0), \\\"invite address is zero\\\");\\n        invite = _invite;\\n        require(address(_nftToken) != address(0), \\\"nftToken is zero\\\");\\n        nftToken = _nftToken;\\n        require(_receiver != address(0), \\\"receiver is zero\\\");\\n        receiver = _receiver;\\n        emit NewReceiver(address(0), receiver);\\n        require(_rewardReceiver != address(0), \\\"rewardReceiver is zero\\\");\\n        rewardReceiver = _rewardReceiver;\\n        emit NewRewardReceiver(address(0), rewardReceiver);\\n    }\\n\\n    function add(\\n        IERC20 _token, uint256 _value, uint256 _valueFee, uint256 _loopInterval, uint256 _odds, uint256[] memory _nftTypes, uint256[] memory _nftPercents\\n    ) external onlyOwner {\\n        require(address(_token) != address(0), \\\"rewardToken is zero address\\\");\\n        roomInfo.push(RoomInfo({\\n            token: _token,\\n            value: _value,\\n            currentLoop: 0,\\n            loopBeginAt: 0,\\n            loopFinishAt: 0,\\n            loopFinish: false,\\n            loopInterval: _loopInterval,\\n            valueFee: _valueFee,\\n            rewardAmount: 0,\\n            odds: _odds,\\n            maxOpenNum: 1\\n        }));\\n        uint rid = roomInfo.length - 1;\\n        emit NewGameRoom(rid, _token, _value, _valueFee, _odds);\\n        require(_nftTypes.length == _nftPercents.length && _nftTypes.length > 0, \\\"illegal type percent info\\\");\\n        uint lastEndIndex = 0;\\n        for (uint i = 0; i < rangeInfo[rid].length; i ++) {\\n            lastEndIndex = rangeInfo[rid][i].endIndex;\\n        }\\n        for (uint i = 0; i < _nftTypes.length; i ++) {\\n            rangeInfo[rid].push(RangeInfo({\\n                nftType : _nftTypes[i],\\n                startIndex: lastEndIndex,\\n                endIndex: lastEndIndex.add(_nftPercents[i])\\n            }));\\n            nftTypes[rid].push(_nftTypes[i]);\\n            emit RoomRange(rid, _nftTypes[i], lastEndIndex, lastEndIndex.add(_nftPercents[i]));\\n            lastEndIndex = lastEndIndex.add(_nftPercents[i]);\\n        }\\n        require(lastEndIndex == MAX_END_INDEX, \\\"illegal percent info\\\");\\n        beginLoop(rid, block.timestamp);\\n    }\\n\\n    function buyBlindBox(uint256 _rid, uint256 _num, address _to) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_num <= roomInfo[_rid].maxOpenNum, \\\"illegal open num\\\");\\n        require(block.timestamp >= room.loopBeginAt && block.timestamp <= room.loopFinishAt, \\\"room not begin or already finish\\\");\\n        uint payAmount = room.value.mul(_num);\\n        uint payFee = payAmount.mul(room.valueFee).div(VALUE_FEE_BASE);\\n\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin, block.coinbase, block.number)));\\n        bytes32 requestId = _requestRandom(seed);\\n        require(randomInfo[requestId].to == address(0), \\\"random already exists\\\");\\n        randomInfo[requestId] = RandomInfo({\\n            to: _to,\\n            rid: _rid,\\n            num: _num,\\n            loop: room.currentLoop\\n        });\\n        blindBoxNum[_rid][_to] = blindBoxNum[_rid][_to].add(_num);\\n\\n        address[] memory inviters = invite.inviterTree(_to, MAX_INVITE_HEIGHT);\\n        uint[] memory amounts = new uint[](inviters.length);\\n        uint totalInviterAmount = 0;\\n        for (uint i = 0; i < inviters.length; i ++) {\\n            uint percent = getInvitePercent(i);\\n            amounts[i] = payAmount.mul(percent).div(PERCENT_BASE); \\n            totalInviterAmount = totalInviterAmount.add(amounts[i]);\\n        }\\n        SafeERC20.safeTransferFrom(room.token, msg.sender, address(invite), totalInviterAmount);\\n        //uint remainAmount = invite.sendReward(_to, room.token, amounts);\\n        invite.sendReward(_to, room.token, amounts);\\n        SafeERC20.safeTransferFrom(room.token, msg.sender, address(this), payAmount.sub(totalInviterAmount));\\n        if (payFee > 0) {\\n            SafeERC20.safeTransferFrom(room.token, msg.sender, receiver, payFee);\\n        }\\n        emit BuyBlindBox(_rid, _to, room.currentLoop, _num, payAmount, payFee, requestId);\\n    }\\n\\n    function finishRandom(bytes32 _requestId) internal override {\\n        RandomInfo storage random = randomInfo[_requestId];\\n        require(random.to != address(0), \\\"requestId not exists\\\");\\n        uint seed = randomResult[_requestId];\\n        for (uint i = 0; i < random.num; i ++) {\\n            seed = uint256(keccak256(abi.encodePacked(seed, i)));\\n            uint nftRange = seed.mod(MAX_END_INDEX);\\n            uint rangeIndex = 0;\\n            for (; rangeIndex < rangeInfo[random.rid].length; rangeIndex ++) {\\n                if (nftRange >= rangeInfo[random.rid][rangeIndex].startIndex && nftRange < rangeInfo[random.rid][rangeIndex].endIndex) {\\n                    uint nftId = nftIDs[random.rid][random.loop][rangeIndex];\\n                    nftToken.mint(random.to, nftId, 1, \\\"0x\\\");\\n                    emit OpenBlindBox(random.rid, random.loop, random.to, rangeIndex, _requestId);\\n                    if (random.to == address(this)) {\\n                        loopResult[random.rid][random.loop] = nftId;\\n                    }\\n                    break;\\n                }\\n            }\\n            require(rangeIndex < rangeInfo[random.rid].length, \\\"rangeInfo error\\\");\\n        }\\n        blindBoxNum[random.rid][random.to] = blindBoxNum[random.rid][random.to].sub(random.num);\\n        delete randomInfo[_requestId];\\n\\n        super.finishRandom(_requestId);\\n    }\\n\\n    function claim(uint256 _rid, uint256 _loop, address _to) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_loop < room.currentLoop || (_loop == room.currentLoop && room.loopFinish), \\\"loop not finish\\\");\\n        uint resultNftId = loopResult[_rid][_loop];\\n        uint balance = nftToken.balanceOf(_to, resultNftId);\\n        uint reward = room.value.mul(balance).mul(room.odds);\\n        require(reward > 0, \\\"user not win\\\");\\n        require(room.rewardAmount >= reward, \\\"reward token not enough\\\");\\n        room.rewardAmount = room.rewardAmount.sub(reward);\\n        nftToken.burn(_to, resultNftId, balance);\\n        SafeERC20.safeTransfer(room.token, _to, reward);\\n        emit Claim(_rid, _loop, _to, balance, reward);\\n    }\\n\\n    function roomDeposit(uint _rid, uint _amount) external {\\n        require(_rid < roomInfo.length, \\\"rid not exist\\\");  \\n        RoomInfo storage room = roomInfo[_rid];\\n        uint balanceBefore = room.token.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(room.token, msg.sender, address(this), _amount);\\n        uint balanceAfter = room.token.balanceOf(address(this));\\n        require(balanceAfter > balanceBefore, \\\"token transfer error\\\");\\n        room.rewardAmount = room.rewardAmount.add(balanceAfter.sub(balanceBefore));\\n        emit RewardPoolDeposit(_rid, msg.sender, room.token, balanceAfter.sub(balanceBefore));\\n    }\\n\\n    function roomWithdraw(uint _rid, uint _amount) external {\\n        require(msg.sender == owner(), \\\"Caller not owner\\\");\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\");\\n        RoomInfo storage room = roomInfo[_rid];\\n        require(block.timestamp > room.loopFinishAt + 60 * 60 * 24 * 7, \\\"the reward can be withdrawed only after 1 week\\\");\\n        if (room.rewardAmount < _amount) {\\n            _amount = room.rewardAmount;\\n        }\\n        room.rewardAmount = room.rewardAmount.sub(_amount);\\n        SafeERC20.safeTransfer(room.token, rewardReceiver, _amount);\\n        emit RewardPoolWithdraw(_rid, rewardReceiver, room.token, _amount);\\n    }\\n\\n    function userRecord(uint _rid, uint[] memory loops, address user) external view returns (uint[] memory){\\n        RoomInfo storage room = roomInfo[_rid];\\n        uint[] memory res = new uint[](loops.length);\\n        for (uint i = 0; i < loops.length; i ++) {\\n            if (loops[i] > room.currentLoop) {\\n                res[i] = 0;\\n            }\\n            uint resultNftId = loopResult[_rid][loops[i]];\\n            uint balance = nftToken.balanceOf(user, resultNftId);\\n            res[i] = balance.mul(room.odds);\\n        }\\n        return res;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/BurnRoomManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../libraries/TransferHelper.sol';\\nimport '../interfaces/IP2EERC1155.sol';\\nimport '../interfaces/IInvite.sol';\\nimport '../interfaces/IWETH.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\nimport '../core/Random.sol';\\n\\ncontract BurnRoomManager is SafeOwnable, Random {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event NewBurnRoom(uint rid, IERC20 token, uint totalLoop, uint totalNum);\\n    event RoomRange(uint rid, uint nftType, uint startIndex, uint endIndex);\\n    event BuyBlindBox(uint rid, uint loop, address user, uint num, uint payAmount, uint payFee, bytes32 requestId);\\n    event OpenBlindBox(uint rid, uint loop, address to, uint rangeIndex, uint num, bytes32 requestId);\\n    event Claim(uint rid, uint loop, address to, uint reward);\\n    event NewReceiver(address oldReceiver, address newReceiver);\\n    event NewFeeReceiver(address oldReceiver, address newReceiver);\\n    event NewRewardReceiver(address oldReceiver, address newReceiver);\\n    event FeeWithdraw(IERC20 token, uint amount);\\n    event LoopBegin(uint rid, uint loop);\\n    event LoopFinish(uint rid, uint loop);\\n    event Winner(uint rid, uint loop, address to);\\n    event NFTCreated(IP2EERC1155 nftToken, uint rid, uint loop, uint[] ids, uint[] types, uint[] values);\\n\\n    uint256 constant MAX_END_INDEX = 1000000;\\n    uint256 constant VALUE_FEE_BASE = 10000;\\n    address immutable WETH;\\n    uint256 constant MAX_INVITE_HEIGHT = 3;\\n    function getInvitePercent(uint height) internal pure returns (uint) {\\n        if (height == 0) {\\n            return 2000;\\n        } else if (height == 1) {\\n            return 1000;\\n        } else if (height == 2) {\\n            return 500;\\n        } else {\\n            return 0;\\n        }\\n    }\\n    uint256 constant PERCENT_BASE = 10000;\\n\\n    struct RoomInfo {\\n        IERC20 token;\\n        uint256 value;\\n        uint256 currentLoop;\\n        uint256 totalLoop;\\n        uint256 openNum;\\n        uint256 totalNum;\\n        uint256 valueFee;\\n        uint256 maxOpenNum;\\n        uint256 maxBurnNum;\\n    }\\n    struct RangeInfo {\\n        uint256 nftType;\\n        uint256 startIndex;\\n        uint256 endIndex;\\n    }\\n\\n    struct RandomInfo {\\n        address to;\\n        uint256 rid;\\n        uint256 loop;\\n        uint256 num;\\n    }\\n\\n    function setMaxOpenNum(uint _rid, uint _num) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\");\\n        roomInfo[_rid].maxOpenNum = _num;\\n    }\\n\\n    function setMaxBurnNum(uint _rid, uint _num) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\");\\n        roomInfo[_rid].maxBurnNum = _num;\\n    }\\n\\n    RoomInfo[] public roomInfo;\\n    mapping(uint256 => uint256[]) nftTypes;\\n    mapping(uint256 => RangeInfo[]) public rangeInfo;\\n    mapping(uint256 => mapping(uint256 => uint256[])) public nftIDs;\\n    mapping(uint256 => mapping(uint256 => uint256)) public roomReward;\\n    mapping(uint256 => mapping(uint256 => uint256)) public claimedReward;\\n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public winers;\\n    mapping(uint256 => mapping(uint256 => uint256)) public winerNum;\\n    mapping(bytes32 => RandomInfo) public randomInfo;\\n    mapping(uint256 => mapping(address => uint256)) public blindBoxNum;\\n\\n    IInvite immutable public invite;\\n    IP2EERC1155 public nftToken;\\n\\n    address public feeReceiver;\\n    address public rewardReceiver;\\n    mapping(IERC20 => uint) public totalFeeAmount;\\n\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        require(_feeReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        emit NewFeeReceiver(feeReceiver, _feeReceiver);\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function setRewardReceiver(address _rewardReceiver) external onlyOwner {\\n        require(_rewardReceiver != address(0), \\\"tokenReceiver is zero\\\");\\n        emit NewRewardReceiver(_rewardReceiver, rewardReceiver);\\n        rewardReceiver = _rewardReceiver;\\n    }\\n\\n    function tokenTransfer(IERC20 _token, address _to, uint _amount) internal returns (uint) {\\n        if (address(_token) == WETH) {\\n            IWETH(address(_token)).withdraw(_amount);\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    function feeWithdraw(IERC20 _token, uint _amount) external onlyOwner {\\n        if (_amount > totalFeeAmount[_token]) {\\n            _amount = totalFeeAmount[_token];\\n        }\\n        totalFeeAmount[_token] = totalFeeAmount[_token].sub(_amount);\\n        require(feeReceiver != address(0), \\\"feeReceiver is zero\\\");\\n        tokenTransfer(_token, feeReceiver, _amount);\\n        emit FeeWithdraw(_token, _amount);\\n    }\\n\\n    function roomInfoLength() external view returns (uint256) {\\n        return roomInfo.length;\\n    }\\n\\n    function rangeInfoLength(uint256 rid) external view returns (uint256) {\\n        return rangeInfo[rid].length;\\n    }\\n\\n    function loopNFT(uint _rid, uint _loop) external view returns (uint256[] memory) {\\n        return nftIDs[_rid][_loop];\\n    }\\n\\n    constructor(address _WETH, IInvite _invite, IP2EERC1155 _nftToken, address _feeReceiver, address _rewardReceiver, address _linkAccessor) Random(_linkAccessor) SafeOwnable(msg.sender) {\\n        require(_WETH != address(0), \\\"WETH is zero\\\");\\n        WETH = _WETH;\\n        require(address(_invite) != address(0), \\\"invite address is zero\\\");\\n        invite = _invite;\\n        require(address(_nftToken) != address(0), \\\"nftToken is zero\\\");\\n        nftToken = _nftToken;\\n        require(_feeReceiver != address(0), \\\"feeReceiver is zero\\\");\\n        feeReceiver = _feeReceiver;\\n        emit NewFeeReceiver(address(0), feeReceiver);\\n        require(_rewardReceiver != address(0), \\\"rewardReceiver is zero\\\");\\n        rewardReceiver = _rewardReceiver;\\n        emit NewRewardReceiver(address(0), rewardReceiver);\\n    }\\n\\n    function beginLoop(uint _rid) public {\\n        if (_rid >= roomInfo.length) {\\n            return;\\n        }\\n        RoomInfo storage room = roomInfo[_rid];\\n        if (room.currentLoop > room.totalLoop) {\\n            return;\\n        }\\n        if (room.currentLoop > 0 && room.openNum != room.totalNum) {\\n            return;\\n        }\\n        emit LoopFinish(_rid, room.currentLoop);\\n        room.currentLoop = room.currentLoop + 1;\\n        uint256[] memory nftValues = new uint256[](nftTypes[_rid].length);\\n        emit LoopBegin(_rid, room.currentLoop);\\n        nftIDs[_rid][room.currentLoop] = nftToken.createBatchDefault(nftTypes[_rid], nftValues);\\n        emit NFTCreated(nftToken, _rid, room.currentLoop, nftIDs[_rid][room.currentLoop], nftTypes[_rid], nftValues);\\n        room.openNum = 0;\\n    }\\n\\n    function add(\\n        IERC20 _token, uint256 _value, uint256 _totalLoop, uint256 _totalNum, uint256 _valueFee, uint256[] memory _nftTypes, uint256[] memory _nftPercents\\n    ) external onlyOwner {\\n        require(address(_token) != address(0), \\\"token is zero address\\\");\\n        roomInfo.push(RoomInfo({\\n            token: _token,\\n            value: _value,\\n            currentLoop: 0,\\n            totalLoop: _totalLoop,\\n            openNum: 0,\\n            totalNum: _totalNum,\\n            valueFee: _valueFee,\\n            maxOpenNum: 1,\\n            maxBurnNum: 1\\n        }));\\n        uint rid = roomInfo.length - 1;\\n        emit NewBurnRoom(rid, _token, _totalLoop, _totalNum);\\n\\n        require(_nftTypes.length == _nftPercents.length && _nftTypes.length > 0, \\\"illegal type percent info\\\");\\n        uint lastEndIndex = 0;\\n        for (uint i = 0; i < _nftTypes.length; i ++) {\\n            rangeInfo[rid].push(RangeInfo({\\n                nftType : _nftTypes[i],\\n                startIndex: lastEndIndex,\\n                endIndex: lastEndIndex.add(_nftPercents[i])\\n            }));\\n            nftTypes[rid].push(_nftTypes[i]);\\n            emit RoomRange(rid, _nftTypes[i], lastEndIndex, lastEndIndex.add(_nftPercents[i]));\\n            lastEndIndex = lastEndIndex.add(_nftPercents[i]);\\n        }\\n        require(lastEndIndex == MAX_END_INDEX, \\\"illegal percent info\\\");\\n        beginLoop(rid);\\n    }\\n\\n    function doRandom() internal returns (bytes32){\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin, block.coinbase, block.number)));\\n        bytes32 requestId = _requestRandom(seed);\\n        require(randomInfo[requestId].to == address(0), \\\"random already exists\\\");\\n        return requestId;\\n    }\\n\\n    function tokenNotFull(uint _rid, uint _loop, address _user) internal view returns(bool) {\\n        (uint256 totalBalance, ) = nftToken.totalBalance(_user, nftIDs[_rid][_loop]);\\n        return totalBalance.add(blindBoxNum[_rid][_user]) > rangeInfo[_rid].length;\\n    }\\n\\n    function buyBlindBox(uint256 _rid, uint256 _loop, uint256 _num, address _to) external payable {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_loop > 0 && _loop == room.currentLoop, \\\"loop illegal\\\");\\n        require(room.totalNum.sub(_num) >= room.openNum, \\\"loop already finish\\\");\\n        require(_num <= room.maxOpenNum, \\\"illegal num\\\");\\n        uint payAmount = room.value.mul(_num);\\n        uint payFee = payAmount.mul(room.valueFee).div(VALUE_FEE_BASE);\\n        address[] memory inviters = invite.inviterTree(_to, MAX_INVITE_HEIGHT);\\n        uint[] memory amounts = new uint[](inviters.length);\\n        uint totalInviterAmount = 0;\\n        for (uint i = 0; i < inviters.length; i ++) {\\n            uint percent = getInvitePercent(i);\\n            amounts[i] = payAmount.mul(percent).div(PERCENT_BASE); \\n            totalInviterAmount = totalInviterAmount.add(amounts[i]);\\n        }\\n        if (address(room.token) == WETH) {\\n            require(msg.value == payAmount.add(payFee), \\\"illegal ETH amount\\\");\\n            IWETH(WETH).deposit{value: payAmount.add(payFee)}();\\n        } else {\\n            SafeERC20.safeTransferFrom(room.token, msg.sender, address(this), payAmount.add(payFee));\\n        }\\n        room.token.safeTransfer(address(invite), totalInviterAmount);\\n        uint remainAmount = invite.sendReward(_to, room.token, amounts);\\n        payAmount = payAmount.sub(totalInviterAmount.sub(remainAmount));\\n        roomReward[_rid][_loop] = roomReward[_rid][_loop].add(payAmount);\\n        totalFeeAmount[room.token] = totalFeeAmount[room.token].add(payFee);\\n        bytes32 requestId = doRandom();\\n        randomInfo[requestId] = RandomInfo({\\n            to: _to,\\n            rid: _rid,\\n            num: _num,\\n            loop: _loop\\n        });\\n\\n        blindBoxNum[_rid][_to] = blindBoxNum[_rid][_to].add(_num);\\n        room.openNum = room.openNum + _num;\\n\\n        require(tokenNotFull(_rid, _loop, _to), \\\"token alrady full\\\");\\n\\n        beginLoop(_rid);\\n        emit BuyBlindBox(_rid, _loop, _to, _num, payAmount, payFee, requestId);\\n    }\\n\\n    function finishRandom(bytes32 _requestId) internal override {\\n        RandomInfo storage random = randomInfo[_requestId];\\n        require(random.to != address(0), \\\"requestId not exists\\\");\\n        uint seed = randomResult[_requestId];\\n        for (uint i = 0; i < random.num; i ++) {\\n            seed = uint256(keccak256(abi.encodePacked(seed, i)));\\n            uint nftRange = seed.mod(MAX_END_INDEX);\\n            uint rangeIndex = 0;\\n            for (; rangeIndex < rangeInfo[random.rid].length; rangeIndex ++) {\\n                if (nftRange >= rangeInfo[random.rid][rangeIndex].startIndex && nftRange < rangeInfo[random.rid][rangeIndex].endIndex) {\\n                    uint nftId = nftIDs[random.rid][random.loop][rangeIndex];\\n                    nftToken.mint(random.to, nftId, 1, \\\"0x\\\");\\n                    emit OpenBlindBox(random.rid, random.loop, random.to, rangeIndex, 1, _requestId);\\n                    break;\\n                }\\n            }\\n            require(rangeIndex < rangeInfo[random.rid].length, \\\"rangeInfo error\\\");\\n        }\\n        (uint256 totalBalance, uint256[] memory balances) = nftToken.totalBalance(random.to, nftIDs[random.rid][random.loop]);\\n        bool win = true;\\n        if (totalBalance == rangeInfo[random.rid].length) {\\n            for (uint i = 0; i < balances.length; i ++) {\\n                if (balances[i] != 1) {\\n                    win = false;\\n                    break;\\n                }\\n            }\\n        } else {\\n            win = false;\\n        }\\n        if (win) {\\n            winers[random.rid][random.loop][random.to] = win;    \\n            winerNum[random.rid][random.loop] = winerNum[random.rid][random.loop].add(1);\\n        }\\n        blindBoxNum[random.rid][random.to] = blindBoxNum[random.rid][random.to].sub(random.num);\\n        delete randomInfo[_requestId];\\n\\n        super.finishRandom(_requestId);\\n    }\\n\\n    function burnToken(uint _rid, uint _loop, uint _rangeIndex, uint _num) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_loop > 0 && _loop == room.currentLoop, \\\"loop illegal\\\");\\n        require(room.totalNum != room.openNum, \\\"loop alrady finish\\\");\\n        require(_num > 0 && _num <= room.maxBurnNum, \\\"illegal num\\\");\\n        require(_rangeIndex < rangeInfo[_rid].length, \\\"illegal rangeInfo\\\");\\n        (, uint[] memory balances) = nftToken.totalBalance(msg.sender, nftIDs[_rid][_loop]);\\n        require(balances[_rangeIndex] > _num, \\\"illegal balance\\\");\\n        uint[] memory ids = new uint[](1);\\n        ids[0] = nftIDs[_rid][_loop][_rangeIndex];\\n        uint[] memory nums = new uint[](1);\\n        nums[0] = _num;\\n        nftToken.burnBatch(msg.sender, ids, nums);\\n    }\\n\\n    function claim(uint256 _rid, uint256 _loop, address _to) external {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(_loop < room.currentLoop || room.openNum == room.totalNum, \\\"loop not finish\\\");\\n        require(winers[_rid][_loop][_to] == true, \\\"not the winner\\\");\\n        uint reward = roomReward[_rid][_loop].div(winerNum[_rid][_loop]);\\n\\n        claimedReward[_rid][_loop] = claimedReward[_rid][_loop].add(reward);\\n        delete winers[_rid][_loop][_to];\\n        uint[] memory balances = new uint256[](rangeInfo[_rid].length);\\n        for (uint i = 0; i < balances.length; i ++) {\\n            balances[i] = 1;\\n        }\\n        nftToken.burnBatch(_to, nftIDs[_rid][_loop], balances);\\n\\n        tokenTransfer(room.token, _to, reward);\\n        emit Claim(_rid, _loop, _to, reward);\\n    }\\n\\n    function ownerClaim(uint _rid, uint256 _loop) external onlyOwner {\\n        require(_rid < roomInfo.length, \\\"illegal rid\\\"); \\n        RoomInfo storage room = roomInfo[_rid];\\n        require(room.openNum == room.totalNum, \\\"loop not finish\\\");\\n        require(_loop < room.currentLoop || room.openNum == room.totalNum, \\\"loop not finish\\\");\\n        require(winerNum[_rid][_loop] == 0 && roomReward[_rid][_loop] > 0, \\\"already have winner\\\");\\n        uint amount = roomReward[_rid][_loop];\\n        delete winerNum[_rid][_loop];\\n        tokenTransfer(room.token, rewardReceiver, amount);\\n    }\\n\\n    function userRecord(uint _rid, address user) external view returns (bool[] memory){\\n        RoomInfo storage room = roomInfo[_rid];\\n        bool[] memory res = new bool[](room.totalLoop);\\n        for (uint i = 1; i <= room.totalLoop; i ++) {\\n            res[i - 1] = winers[_rid][i][user];\\n        }\\n        return res;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/P2EPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '../interfaces/IP2EFactory.sol';\\nimport '../interfaces/IP2ECallee.sol';\\nimport '../libraries/UQ112x112.sol';\\nimport '../libraries/P2ELibrary.sol';\\nimport '../interfaces/IP2EPair.sol';\\nimport '../libraries/SqrtMath.sol';\\nimport '../token/P2EERC20.sol';\\n\\ncontract P2EPair is P2EERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'P2E: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'P2E: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'P2E: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'P2E: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IP2EFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = SqrtMath.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = SqrtMath.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(P2ELibrary.SWAP_FEE_LP.sub(1)).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = SqrtMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'P2E: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        require(_totalSupply != 0, \\\"influence balance\\\");\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'P2E: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'P2E: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'P2E: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'P2E: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IP2ECallee(to).gibxCall(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'P2E: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(P2ELibrary.SWAP_FEE));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(P2ELibrary.SWAP_FEE));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'P2E: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2ECallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2ECallee {\\n    function gibxCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UQ112x112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SqrtMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary SqrtMath {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/P2EERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/IP2EERC20.sol';\\n\\ncontract P2EERC20 is IP2EERC20 {\\n    using SafeMath for uint256;\\n\\n    string public override constant name = 'P2E LPs';\\n    string public override constant symbol = 'P2E-LP';\\n    uint8 public override constant decimals = 18;\\n    uint  public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    bytes32 public override constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    mapping(address => uint) public override nonces;\\n\\n    constructor() {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'P2E: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'P2E: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IP2EERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IP2EERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/SmartChefInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/proxy/Initializable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\n\\ncontract SmartChefInitializable is SafeOwnable, ReentrancyGuard, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The address of the smart chef factory\\n    address public SMART_CHEF_FACTORY;\\n\\n    // Whether a limit is set for users\\n    bool public hasUserLimit;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block number when CAKE mining ends.\\n    uint256 public bonusEndBlock;\\n\\n    // The block number when CAKE mining starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastRewardBlock;\\n\\n    // The pool limit (0 if none)\\n    uint256 public poolLimitPerUser;\\n\\n    // CAKE tokens created per block.\\n    uint256 public rewardPerBlock;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // The reward token\\n    IERC20 public rewardToken;\\n\\n    // The staked token\\n    IERC20 public stakedToken;\\n\\n    TokenLocker public tokenLocker;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many staked tokens the user has provided\\n        uint256 rewardDebt; // Reward debt\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event NewPoolLimit(uint256 poolLimitPerUser);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    constructor() SafeOwnable(msg.sender) {\\n        SMART_CHEF_FACTORY = msg.sender;\\n    }\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        //emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    /*\\n     * @notice Initialize the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _bonusEndBlock: end block\\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\n     * @param _admin: admin address with ownership\\n     */\\n    function initialize(\\n        IERC20 _stakedToken,\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock,\\n        uint256 _poolLimitPerUser,\\n        address _admin\\n    ) external initializer {\\n        require(msg.sender == SMART_CHEF_FACTORY, \\\"Not factory\\\");\\n\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n\\n        if (_poolLimitPerUser > 0) {\\n            hasUserLimit = true;\\n            poolLimitPerUser = _poolLimitPerUser;\\n        }\\n\\n        uint256 decimalsRewardToken = uint256(ERC20(address(rewardToken)).decimals());\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = startBlock;\\n\\n        // Transfer ownership to the admin address who becomes owner of the contract\\n        setPendingOwner(_admin);\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (hasUserLimit) {\\n            require(_amount.add(user.amount) <= poolLimitPerUser, \\\"User amount above limit\\\");\\n        }\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                if (address(tokenLocker) == address(0) || rewardToken != tokenLocker.token()) {\\n                    rewardToken.safeTransfer(address(msg.sender), pending);\\n                } else {\\n                    rewardToken.approve(address(tokenLocker), pending);\\n                    tokenLocker.addReceiver(msg.sender, pending);\\n                }\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            uint balanceBefore = stakedToken.balanceOf(address(this));\\n            stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            uint balanceAfter = stakedToken.balanceOf(address(this));\\n            _amount = balanceAfter.sub(balanceBefore);\\n            user.amount = user.amount.add(_amount);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n\\n        _updatePool();\\n\\n        uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            stakedToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n\\n        if (pending > 0) {\\n            //rewardToken.safeTransfer(address(msg.sender), pending);\\n            if (address(tokenLocker) == address(0) || rewardToken != tokenLocker.token()) {\\n                rewardToken.safeTransfer(address(msg.sender), pending);\\n            } else {\\n                rewardToken.approve(address(tokenLocker), pending);\\n                tokenLocker.addReceiver(msg.sender, pending);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        if (amountToTransfer > 0) {\\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, amountToTransfer);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner. Needs to be for emergency.\\n     */\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        require(_tokenAddress != address(stakedToken), \\\"Cannot be staked token\\\");\\n        require(_tokenAddress != address(rewardToken), \\\"Cannot be reward token\\\");\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        require(startBlock < block.number, \\\"Pool is not started\\\"); \\n        require(block.number <= bonusEndBlock, \\\"Pool has ended\\\");\\n        bonusEndBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update pool limit per user\\n     * @dev Only callable by owner.\\n     * @param _hasUserLimit: whether the limit remains forced\\n     * @param _poolLimitPerUser: new pool limit per user\\n     */\\n    function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\\n        require(hasUserLimit, \\\"Must be set\\\");\\n        if (_hasUserLimit) {\\n            require(_poolLimitPerUser > poolLimitPerUser, \\\"New limit must be higher\\\");\\n            poolLimitPerUser = _poolLimitPerUser;\\n        } else {\\n            hasUserLimit = _hasUserLimit;\\n            poolLimitPerUser = 0;\\n        }\\n        emit NewPoolLimit(poolLimitPerUser);\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(_startBlock < _bonusEndBlock, \\\"New startBlock must be lower than new endBlock\\\");\\n        require(block.number < _startBlock, \\\"New startBlock must be higher than current block\\\");\\n\\n        startBlock = _startBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n            uint256 reward = multiplier.mul(rewardPerBlock);\\n            uint256 adjustedTokenPerShare =\\n                accTokenPerShare.add(reward.mul(PRECISION_FACTOR).div(stakedTokenSupply));\\n            return user.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\\n        } else {\\n            return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n        uint256 reward = multiplier.mul(rewardPerBlock);\\n        accTokenPerShare = accTokenPerShare.add(reward.mul(PRECISION_FACTOR).div(stakedTokenSupply));\\n        lastRewardBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= bonusEndBlock) {\\n            return 0;\\n        } else {\\n            return bonusEndBlock.sub(_from);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/NftFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/INftOracle.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\nimport \\\"../token/P2EToken.sol\\\";\\n\\ncontract NftFarm is SafeOwnable, ReentrancyGuard, ERC1155, ERC1155Holder {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    enum NftType {ERC721, ERC1155}\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 rewardDebt; \\n    }\\n\\n    struct PoolInfo {\\n        address nftContract;\\n        NftType nftType;\\n        address priceOracle;\\n        uint256 allocPoint;       \\n        uint256 lastRewardBlock;  \\n        uint256 accPerShare; \\n        uint256 totalAmount;\\n    }\\n\\n    P2EToken public rewardToken;\\n    uint256 public rewardPerBlock;\\n    uint256 public BONUS_MULTIPLIER;\\n    \\n    PoolInfo[] public poolInfo;\\n    mapping(address => uint256) public pidOfContract;\\n    mapping(address => bool) public existsContract;\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public startBlock;\\n    TokenLocker public tokenLocker;\\n    mapping(address => mapping(uint => uint)) nftIds;\\n    uint currentNftId;\\n\\n    function getNftId(address _nftContract, uint _nftId) internal returns (uint) {\\n        uint currentId = nftIds[_nftContract][_nftId];\\n        if (currentId == 0) {\\n            currentId = currentNftId + 1;\\n            currentNftId = currentNftId + 1;\\n            nftIds[_nftContract][_nftId] = currentId;\\n        }\\n        return currentId;\\n    }\\n    \\n    event Deposit(address indexed user, uint256 indexed pid, uint256[] ids, uint256[] amounts);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256[] ids, uint256[] amounts);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256[] _ids, uint256 amount);\\n    event NewRewardPerBlock(uint oldReward, uint newReward);\\n    event NewMultiplier(uint oldMultiplier, uint newMultiplier);\\n    event NewPool(uint pid, NftType nftType, address nftContract, address priceOracle, uint allocPoint, uint totalPoint);\\n    event NewTokenLocker(TokenLocker oldTokenLocker, TokenLocker newTokenLocker);\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require (_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    )\\n        internal\\n        view\\n        override\\n    {\\n        require(from == address(0) || to == address(0), \\\"NFT CAN ONLY MINT OR BURN\\\");\\n        require(operator == address(this), \\\"NFT OPERATOR CAN ONLY BE THIS\\\");\\n    }\\n\\n    constructor(\\n        P2EToken _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock\\n    ) SafeOwnable(msg.sender) ERC1155(\\\"\\\") {\\n        require(address(_rewardToken) != address(0), \\\"illegal rewardToken\\\");\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        BONUS_MULTIPLIER = 1;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber, bool withUpdate) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewMultiplier(BONUS_MULTIPLIER, multiplierNumber);\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function updateRewardPerBlock(uint256 _rewardPerBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewRewardPerBlock(rewardPerBlock, _rewardPerBlock);\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(uint256 _allocPoint, NftType _nftType, address _nftContract, address _priceOracle, bool _withUpdate) external onlyOwner {\\n        require(_nftContract != address(0), \\\"nftContract address is zero\\\");\\n        require(address(_nftContract) != address(rewardToken), \\\"can not add reward\\\");\\n        require(!existsContract[_nftContract], \\\"nftContract already exist\\\");\\n        //check it is a legal nftContract\\n        if (_priceOracle == address(0)) {\\n            INftOracle(_nftContract).values(0); \\n        } else {\\n            INftOracle(_priceOracle).valuesOf(_nftContract, 0);\\n        }\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        pidOfContract[_nftContract] = poolInfo.length;\\n        existsContract[_nftContract] = true;\\n        poolInfo.push(PoolInfo({\\n            nftContract: _nftContract,\\n            nftType: _nftType,\\n            priceOracle: _priceOracle,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accPerShare: 0,\\n            totalAmount: 0\\n        }));\\n\\n        emit NewPool(poolInfo.length - 1, _nftType, _nftContract, _priceOracle, _allocPoint, totalAllocPoint);\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner validatePoolByPid(_pid) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n        emit NewPool(_pid, poolInfo[_pid].nftType, poolInfo[_pid].nftContract, poolInfo[_pid].priceOracle, _allocPoint, totalAllocPoint);\\n    }\\n\\n    function pendingReward(uint256 _pid, address _user) external validatePoolByPid(_pid) view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accPerShare = pool.accPerShare;\\n        uint256 lpSupply = pool.totalAmount;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accPerShare = accPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n    \\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalAmount;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        rewardReward = rewardToken.mint(address(this), rewardReward);\\n        pool.accPerShare = pool.accPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function getNftValue(PoolInfo storage pool, uint id) internal view returns (uint) {\\n        if (pool.priceOracle == address(0)) {\\n            return INftOracle(pool.nftContract).values(id); \\n        } else {\\n            return INftOracle(pool.priceOracle).valuesOf(pool.nftContract, id);\\n        }\\n    }\\n    \\n    function deposit(uint256 _pid, uint[] memory _ids, uint[] memory _amounts) external nonReentrant validatePoolByPid(_pid) {\\n        require(_ids.length == _amounts.length, \\\"illegal id num\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pending > 0) {\\n                if (address(tokenLocker) == address(0)) {\\n                    safeRewardTransfer(msg.sender, pending);\\n                } else {\\n                    rewardToken.approve(address(tokenLocker), pending);\\n                    tokenLocker.addReceiver(msg.sender, pending);\\n                }\\n            }\\n        }\\n        if (_ids.length > 0) {\\n            uint totalValues = 0;\\n            uint[] memory innerNftIds = new uint[](_ids.length);\\n            for (uint i = 0; i < _ids.length; i ++) {\\n                uint value = getNftValue(pool, _ids[i]);\\n                totalValues = totalValues.add(value);\\n                if (pool.nftType == NftType.ERC721) {\\n                    require(_amounts[i] == 1, \\\"NFT721 CAN ONLY TRANSFER ONE BY ONE\\\");\\n                    IERC721(pool.nftContract).safeTransferFrom(msg.sender, address(this), _ids[i]);\\n                }\\n                innerNftIds[i] = getNftId(pool.nftContract, _ids[i]);\\n            }\\n            if (pool.nftType == NftType.ERC1155) {\\n                IERC1155(pool.nftContract).safeBatchTransferFrom(msg.sender, address(this), _ids, _amounts, new bytes(0));\\n            }\\n            _mintBatch(msg.sender, innerNftIds, _amounts, new bytes(0));\\n\\n            if (totalValues > 0) {\\n                user.amount = user.amount.add(totalValues);\\n                pool.totalAmount = pool.totalAmount.add(totalValues);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _ids, _amounts);\\n    }\\n\\n    function withdraw(uint256 _pid, uint[] memory _ids, uint[] memory _amounts) external nonReentrant validatePoolByPid(_pid) {\\n        require(_ids.length == _amounts.length, \\\"illegal id num\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            if (address(tokenLocker) == address(0)) {\\n                safeRewardTransfer(msg.sender, pending);\\n            } else {\\n                rewardToken.approve(address(tokenLocker), pending);\\n                tokenLocker.addReceiver(msg.sender, pending);\\n            }\\n        }\\n        if (_ids.length > 0) {\\n            uint totalValues = 0;\\n            uint[] memory innerNftIds = new uint[](_ids.length);\\n            for (uint i = 0; i < _ids.length; i ++) {\\n                uint value = getNftValue(pool, _ids[i]);\\n                totalValues = totalValues.add(value);\\n                if (pool.nftType == NftType.ERC721) {\\n                    require(_amounts[i] == 1, \\\"NFT721 CAN ONLY TRANSFER ONE BY ONE\\\");\\n                    IERC721(pool.nftContract).safeTransferFrom(address(this), msg.sender, _ids[i]);\\n                }\\n                innerNftIds[i] = nftIds[pool.nftContract][_ids[i]];\\n                require(innerNftIds[i] != 0, \\\"nftContract Id Not exists\\\");\\n            }\\n            if (pool.nftType == NftType.ERC1155) {\\n                IERC1155(pool.nftContract).safeBatchTransferFrom(address(this), msg.sender, _ids, _amounts, new bytes(0));\\n            }\\n            _burnBatch(msg.sender, innerNftIds, _amounts);\\n\\n            require(user.amount >= totalValues, \\\"withdraw: not good\\\");\\n            if(totalValues > 0) {\\n                user.amount = user.amount.sub(totalValues);\\n                pool.totalAmount = pool.totalAmount.sub(totalValues);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _ids, _amounts);\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid, uint[] memory _ids) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        if (_ids.length > 0) {\\n            address[] memory accounts = new address[](_ids.length);\\n            uint[] memory innerNftIds = new uint[](_ids.length);\\n            uint[] memory amounts = new uint[](_ids.length);\\n            for (uint i = 0; i < _ids.length; i ++) {\\n                if (pool.nftType == NftType.ERC721) {\\n                    IERC721(pool.nftContract).safeTransferFrom(address(this), msg.sender, _ids[i]);\\n                    amounts[i] = 1;\\n                }\\n                innerNftIds[i] = nftIds[pool.nftContract][_ids[i]];\\n                require(innerNftIds[i] != 0, \\\"nftContract Id Not exists\\\");\\n                accounts[i] = msg.sender;\\n            }\\n            if (pool.nftType == NftType.ERC1155) {\\n                amounts = IERC1155(pool.nftContract).balanceOfBatch(accounts, innerNftIds);\\n                IERC1155(pool.nftContract).safeBatchTransferFrom(address(this), msg.sender, _ids, amounts, new bytes(0));\\n            }\\n            _burnBatch(msg.sender, innerNftIds, amounts);\\n        }\\n\\n        uint amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        emit EmergencyWithdraw(msg.sender, _pid, _ids, amount);\\n    }\\n\\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\\n        uint currentBalance = IERC20(rewardToken).balanceOf(address(this));\\n        if (currentBalance < _amount) {\\n            _amount = currentBalance;\\n        }\\n        IERC20(rewardToken).safeTransfer(_to, _amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface INftOracle {\\n\\n    function values(uint256 nftId) external view returns (uint256);\\n\\n    function valuesOf(address nftContract, uint256 nftId) external view returns (uint256);\\n\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/nft/P2EERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../core/SafeOwnable.sol';\\n\\ncontract P2EERC1155 is ERC1155, SafeOwnable {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    uint256 private _currentTokenID = 0;\\n    mapping(uint256 => uint256) public tokenSupply;\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\n    mapping(uint256 => address) public creators;\\n    mapping(uint256 => uint256) public types;\\n    mapping(uint256 => uint256) public values;\\n    mapping(uint256 => bool) public disableTransfer;\\n    string public name;\\n    string public symbol;\\n    mapping(uint256 => string) private uris;\\n    string public baseMetadataURI;\\n\\n    modifier onlyOwnerOrCreator(uint256 id) {\\n        require(msg.sender == owner() || msg.sender == creators[id], \\\"only owner or creator can do this\\\");\\n        _;\\n    }\\n\\n    function disableTokenTransfer(uint _id) external onlyOwnerOrCreator(_id) {\\n        disableTransfer[_id] = true;\\n    }\\n\\n    function enableTokenTransfer(uint _id) external onlyOwnerOrCreator(_id) {\\n        disableTransfer[_id] = false;\\n    }\\n\\n    constructor(string memory _uri, string memory name_, string memory symbol_) ERC1155(_uri) SafeOwnable(msg.sender) {\\n        name = name_;\\n        symbol = symbol_;\\n        baseMetadataURI = _uri;\\n    }\\n\\n    function setURI(string memory newuri) external {\\n        baseMetadataURI = newuri;\\n    }\\n\\n    function uri(uint256 _id) public override view returns (string memory) {\\n        require(_exists(_id), \\\"ERC1155#uri: NONEXISTENT_TOKEN\\\");\\n\\n        if(bytes(uris[_id]).length > 0){\\n            return uris[_id];\\n        }\\n        if (types[_id] > 0) {\\n            return string(abi.encodePacked(baseMetadataURI, \\\"?type=\\\", types[_id].toString()));\\n        } else {\\n            return string(abi.encodePacked(baseMetadataURI, \\\"/\\\", _id.toString()));\\n        }\\n    }\\n\\n    function _exists(uint256 _id) internal view returns (bool) {\\n        return creators[_id] != address(0);\\n    }\\n\\n    function updateUri(uint256 _id, string memory _uri) external onlyOwnerOrCreator(_id) {\\n        if (bytes(_uri).length > 0) {\\n            uris[_id] = _uri;\\n            emit URI(_uri, _id);\\n        }\\n        else{\\n            delete uris[_id];\\n            emit URI(string(abi.encodePacked(baseMetadataURI, _id.toString(), \\\".json\\\")), _id);\\n        }\\n    }\\n\\n    function create(\\n        uint256 _maxSupply,\\n        uint256 _initialSupply,\\n        uint256 _type,\\n        bytes memory _data\\n    ) external returns (uint256 tokenId) {\\n        require(_initialSupply <= _maxSupply, \\\"Initial supply cannot be more than max supply\\\");\\n        uint256 _id = _getNextTokenID();\\n        _incrementTokenTypeId();\\n        creators[_id] = msg.sender;\\n        types[_id] = _type;\\n        emit URI(string(abi.encodePacked(baseMetadataURI, \\\"?type=\\\", _id.toString())), _id);\\n\\n        if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\\n        tokenSupply[_id] = _initialSupply;\\n        tokenMaxSupply[_id] = _maxSupply;\\n        return _id;\\n    }\\n\\n    function createBatch(\\n        uint256 _maxSupply,\\n        uint256 _initialSupply,\\n        uint256[] memory _types,\\n        uint256[] memory _values,\\n        bytes memory _data\\n    ) public returns (uint256[] memory tokenIds) {\\n        require(_types.length > 0 && _types.length == _values.length, \\\"illegal type length\\\");\\n        require(_initialSupply <= _maxSupply, \\\"Initial supply cannot be more than max supply\\\");\\n        require(_types.length > 0, \\\"illegal type length\\\");\\n        tokenIds = new uint[](_types.length);\\n        for (uint i = 0; i < _types.length; i ++) {\\n            uint id = _currentTokenID.add(i + 1);\\n            tokenIds[i] = id;\\n            creators[id] = msg.sender;\\n            types[id] = _types[i];\\n            values[id] = _values[i];\\n            if (_initialSupply != 0) _mint(msg.sender, id, _initialSupply, _data);\\n            tokenSupply[id] = _initialSupply;\\n            tokenMaxSupply[id] = _maxSupply;\\n        }\\n        _currentTokenID= _currentTokenID.add(_types.length);\\n    }\\n\\n    function createBatchDefault(uint256[] memory _types, uint256[] memory _values) external returns (uint256[] memory tokenIds) {\\n        return createBatch(uint(-1), 0, _types, _values, new bytes(0));\\n    }\\n\\n    function _getNextTokenID() private view returns (uint256) {\\n        return _currentTokenID.add(1);\\n    }\\n\\n    function _incrementTokenTypeId() private {\\n        _currentTokenID++;\\n    }\\n    \\n    function mint(address to, uint256 _id, uint256 _quantity, bytes memory _data) public onlyOwnerOrCreator(_id) {\\n        uint256 tokenId = _id;\\n        require(tokenSupply[tokenId].add(_quantity) <= tokenMaxSupply[tokenId], \\\"Max supply reached\\\");\\n        _mint(to, _id, _quantity, _data);\\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\\n    }\\n\\n    function burn(address _account, uint256 _id, uint256 _amount) external onlyOwnerOrCreator(_id) {\\n        _burn(_account, _id, _amount);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) external {\\n        for (uint i = 0; i < ids.length; i ++) {\\n            require(msg.sender == owner() || msg.sender == creators[ids[i]], \\\"only owner or creator can do this\\\");\\n        }\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    function multiSafeTransferFrom(address from, address[] memory tos, uint256 id, uint256[] memory amounts, bytes memory data) external {\\n        require(tos.length == amounts.length, \\\"illegal num\\\");\\n        for (uint i = 0; i < tos.length; i ++) {\\n            safeTransferFrom(from, tos[i], id, amounts[i], data);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory\\n    )\\n        internal\\n        view\\n        override\\n    { \\n        if (from != address(0) && to != address(0)) {\\n            for (uint i = 0; i < ids.length; i ++) {\\n                require(amounts[i] == 0 || !disableTransfer[ids[i]], \\\"Token Transfer Disabled\\\");\\n            }\\n        }\\n    }\\n\\n    function totalBalance (\\n        address account,\\n        uint256[] memory ids\\n    )\\n        external\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        uint256[] memory batchBalances = new uint256[](ids.length);\\n        uint256 _totalBalance = 0;\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            batchBalances[i] = balanceOf(account, ids[i]);\\n            _totalBalance = _totalBalance.add(batchBalances[i]);\\n        }\\n\\n        return (_totalBalance, batchBalances);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/invite/Invite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../libraries/TransferHelper.sol';\\nimport '../interfaces/IP2EERC1155.sol';\\nimport '../interfaces/IWETH.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\nimport '../core/Random.sol';\\n\\ncontract Invite {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InviteUser(address user, address inviter);\\n    event InviterReward(address user, IERC20 _token, address invitee, uint relation, uint amount);\\n    event ClaimReward(address user, IERC20 token, uint amount);\\n\\n    uint public constant MAX_HEIGHT = 5;\\n\\n    address public immutable rootInviter;\\n    address public immutable WETH;\\n    mapping(address => address) inviter;\\n    mapping(address => mapping(IERC20 => uint256[])) inviterReward;\\n    mapping(IERC20 => uint) lastBalance;\\n\\n    constructor(address _WETH, address _rootInviter) {\\n        require(_WETH != address(0), \\\"WETH address is zero\\\");\\n        WETH = _WETH;\\n        rootInviter = _rootInviter;\\n        inviter[_rootInviter] = address(this);\\n        emit InviteUser(_rootInviter, address(this));\\n    }\\n\\n    function registeInviter(address _inviter) external {\\n        require(inviter[msg.sender] == address(0), \\\"user already have inviter\\\");\\n        require(inviter[_inviter] != address(0), \\\"inviter have no inviter\\\");\\n        inviter[msg.sender] = _inviter;\\n        emit InviteUser(msg.sender, _inviter);\\n    }\\n\\n    function inviterTree(address _user, uint _height) external view returns (address[] memory) {\\n        require(_height < MAX_HEIGHT, \\\"height too much\\\");\\n        address[] memory inviters = new address[](_height);\\n        address lastUser = _user;\\n        for (uint i = 0; i < _height; i ++) {\\n            lastUser = inviter[lastUser];\\n            if(lastUser == address(0)){\\n                break; \\n            }\\n            inviters[i] = lastUser;\\n        }\\n        return inviters;\\n    }\\n\\n    function sendReward(address _user, IERC20 _token, uint[] memory amounts) external returns (uint) {\\n        address lastUser = _user;\\n        uint totalAmount = 0;\\n        for (uint i = 0; i < amounts.length; i ++) {\\n            lastUser = inviter[lastUser];\\n            if (lastUser == address(0)) {\\n                break;\\n            }\\n            uint[] storage reward = inviterReward[lastUser][_token];\\n            while (reward.length <= i) {\\n                reward.push(0); \\n            }\\n            reward[i] = reward[i].add(amounts[i]);\\n            totalAmount = totalAmount.add(amounts[i]);\\n            emit InviterReward(lastUser, _token, _user, i, amounts[i]);\\n        }\\n        uint currentBalance = _token.balanceOf(address(this));\\n        uint tokenLastBalance = lastBalance[_token];\\n        require(currentBalance.sub(tokenLastBalance) >= totalAmount, \\\"amount not enough\\\");\\n        lastBalance[_token] = lastBalance[_token].add(totalAmount);\\n        if (currentBalance.sub(tokenLastBalance) > totalAmount) {\\n            _token.safeTransfer(msg.sender, currentBalance.sub(tokenLastBalance).sub(totalAmount));\\n        }\\n        return currentBalance.sub(tokenLastBalance).sub(totalAmount);\\n    }\\n\\n    function pending(address _user, IERC20[] memory _tokens) public view returns (uint[] memory) {\\n        uint[] memory userAmounts = new uint[](_tokens.length);\\n        for (uint i = 0; i < _tokens.length; i ++) {\\n            uint[] storage amounts = inviterReward[_user][_tokens[i]];\\n            for (uint j = 0; j < amounts.length; j ++) {\\n                userAmounts[i] = userAmounts[i].add(amounts[j]);\\n            }\\n        }\\n        return userAmounts;\\n    }\\n\\n    function tokenTransfer(IERC20 _token, address _to, uint _amount) internal returns (uint) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        if (address(_token) == WETH) {\\n            IWETH(address(_token)).withdraw(_amount);\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    function claim(address _user, IERC20[] memory _tokens) external {\\n        uint[] memory amounts = pending(_user, _tokens);\\n        for (uint i = 0; i < amounts.length; i ++) {\\n            if (amounts[i] > 0) {\\n                for (uint j = 0; j < inviterReward[_user][_tokens[i]].length; j ++) {\\n                    inviterReward[_user][_tokens[i]][j] = 0;\\n                }\\n                lastBalance[_tokens[i]] = lastBalance[_tokens[i]].sub(amounts[i]);\\n            }\\n        }\\n        for (uint i = 0; i < amounts.length; i ++) {\\n            tokenTransfer(_tokens[i], _user, amounts[i]);\\n            emit ClaimReward(_user, _tokens[i], amounts[i]);\\n        }\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mock/MockToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport '../core/SafeOwnable.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MockToken is ERC20 {\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\\n        if (decimals_ != 18) {\\n            _setupDecimals(decimals_);\\n        }\\n    }\\n\\n    function mint (address to_, uint amount_) external {\\n        _mint(to_, amount_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ico/P2EIco.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '../interfaces/IP2EToken.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract P2EIco {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event NewReceiver(address receiver, uint sendAmount, uint lastReleaseAt);\\n    event ReleaseToken(address receiver, uint releaseAmount, uint nextReleaseAmount, uint nextReleaseBlockNum);\\n\\n    uint256 public constant PRICE_BASE = 1e6;\\n    ERC20 public immutable sendToken;\\n    address public immutable sendTokenReceiver;\\n    IP2EToken public immutable receiveToken;\\n    uint public immutable icoPrice;\\n    TokenLocker public tokenLocker;\\n    uint256 public immutable totalAmount;\\n    uint256 public remainRelease;\\n\\n    uint256 public totalReceived;\\n    uint256 public totalRelease;\\n\\n    constructor(\\n        ERC20 _sendToken, address _sendTokenReceiver, IP2EToken _receiveToken, uint _icoPrice, uint256 _totalAmount\\n    ) {\\n        require(address(_sendToken) != address(0), \\\"ilelgal send token\\\");\\n        sendToken = _sendToken;\\n        //require(_sendTokenReceiver != address(0), \\\"send token receiver is zero\\\");\\n        //zero address is ok, so no one can retrive the sendToken\\n        sendTokenReceiver = _sendTokenReceiver;\\n        require(address(_receiveToken) != address(0), \\\"illegal token\\\");\\n        receiveToken = _receiveToken;\\n        require(address(_sendToken) != address(_receiveToken), \\\"sendToken and receiveToken is the same\\\");\\n        require(_icoPrice > 0, \\\"illegal icoPrice\\\");\\n        icoPrice = _icoPrice;\\n        remainRelease = totalAmount = _totalAmount;\\n    }\\n\\n    function initTokenLocker(TokenLocker _tokenLocker) external {\\n        require(address(tokenLocker) == address(0), \\\"tokenLocker already setted\\\");\\n        tokenLocker = _tokenLocker;\\n    }\\n\\n    function deposit(address _receiver, uint256 _amount) external {\\n        uint balanceBefore = sendToken.balanceOf(address(this));\\n        sendToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint balanceAfter = sendToken.balanceOf(address(this));\\n        _amount = balanceAfter.sub(balanceBefore);\\n        require(_receiver != address(0), \\\"receiver address is zero\\\");\\n        require(_amount > 0, \\\"release amount is zero\\\");\\n\\n        uint sendTokenMisDecimal = uint(18).sub(sendToken.decimals());\\n        uint receiveTokenMisDecimal = uint(18).sub(ERC20(address(receiveToken)).decimals());\\n        uint receiveAmount = _amount.mul(uint(10) ** (sendTokenMisDecimal)).mul(PRICE_BASE).div(icoPrice).div(uint(10) ** (receiveTokenMisDecimal));\\n        require(remainRelease >= receiveAmount, \\\"release amount is bigger than reaminRelease\\\");\\n        totalReceived = totalReceived.add(_amount);\\n        remainRelease = remainRelease.sub(receiveAmount);\\n        totalRelease = totalRelease.add(receiveAmount);\\n        receiveToken.mint(address(this), receiveAmount);\\n        receiveToken.approve(address(tokenLocker), receiveAmount);\\n        tokenLocker.addReceiver(_receiver, receiveAmount);\\n        emit NewReceiver(_receiver, _amount, block.timestamp);\\n    }\\n\\n    function claim(address _receiver) external {\\n        tokenLocker.claim(_receiver); \\n    }\\n\\n    function totalLockAmount() external view returns (uint256) {\\n        return tokenLocker.totalLockAmount();\\n    }\\n\\n\\n    //response1: the timestamp for next release\\n    //response2: the amount for next release\\n    //response3: the total amount already released\\n    //response4: the remain amount for the receiver to release\\n    function getReleaseInfo(address _receiver) public view returns (uint256 nextReleaseAt, uint256 nextReleaseAmount, uint256 alreadyReleaseAmount, uint256 remainReleaseAmount) {\\n        if (false) {\\n            alreadyReleaseAmount = 0;\\n        }\\n        (nextReleaseAt, nextReleaseAmount, remainReleaseAmount) = tokenLocker.pending(_receiver);\\n    }\\n\\n    function withdraw(uint amount) external {\\n        uint balance = sendToken.balanceOf(address(this));\\n        if (amount > balance) {\\n            amount = balance;\\n        }\\n        if (amount > 0) {\\n            sendToken.safeTransfer(sendTokenReceiver, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ilo/ILO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '../token/TokenLocker.sol';\\nimport '../core/SafeOwnable.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract ILO is SafeOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 lastTime;\\n    }\\n    struct PoolInfo {\\n        IERC20 lpToken;           \\n        uint256 allocPoint;       \\n        uint256 totalAmount;\\n    }\\n\\n    event NewStartSeconds(uint oldSeconds, uint newSeconds);\\n    event NewEndSeconds(uint oldSeconds, uint newSeconds);\\n    event OwnerDeposit(address user, uint256 amount, uint totalAmount);\\n    event OwnerWithdraw(address user, uint256 amount);\\n    event NewPool(IERC20 lpToken, uint allocPoint, uint totalAllocPoint);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\\n    event NewTokenLocker(TokenLocker oldTokenLocker, TokenLocker newTokenLocker);\\n\\n\\n    PoolInfo[] public poolInfo;\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    uint256 public totalAllocPoint = 0;\\n\\n    IERC20 immutable public rewardToken;\\n    uint256 public rewardAmount;\\n    uint256 public startSeconds;\\n    uint256 public endSeconds;\\n    uint256 constant public FINISH_WAIT = 7 days;\\n    TokenLocker public tokenLocker;\\n\\n    modifier notBegin() {\\n        require(block.timestamp < startSeconds, \\\"ILO already begin\\\");\\n        _;\\n    }\\n\\n    modifier alreadyFinish() {\\n        require(block.timestamp > endSeconds + FINISH_WAIT, \\\"ILO not finish\\\");\\n        _;\\n    }\\n\\n    modifier notProcessing() {\\n        require(block.timestamp < startSeconds || block.timestamp > endSeconds + FINISH_WAIT, \\\"ILO in processing\\\");\\n        _;\\n    }\\n\\n    function setTokenLocker(TokenLocker _tokenLocker) external onlyOwner {\\n        //require(_tokenLocker != address(0), \\\"token locker address is zero\\\"); \\n        emit NewTokenLocker(tokenLocker, _tokenLocker);\\n        tokenLocker = _tokenLocker;\\n    }\\n    /*\\n    function setStartSeconds(uint256 _startSeconds) external onlyOwner notProcessing {\\n        emit NewStartSeconds(startSeconds, _startSeconds);\\n        startSeconds = _startSeconds;\\n    }\\n\\n    function setEndSeconds(uint256 _endSeconds) external onlyOwner notProcessing {\\n        emit NewEndSeconds(endSeconds, _endSeconds);\\n        endSeconds = _endSeconds;\\n    }\\n    */\\n    constructor(\\n        IERC20 _rewardToken,\\n        uint256 _startSeconds,\\n        uint256 _endSeconds\\n    ) SafeOwnable(msg.sender) {\\n        rewardToken = _rewardToken;\\n        startSeconds = _startSeconds;\\n        emit NewStartSeconds(0, _startSeconds);\\n        endSeconds = _endSeconds;\\n        emit NewEndSeconds(0, _endSeconds);\\n    }\\n\\n    function ownerDeposit(uint amount) external notProcessing {\\n        rewardAmount = rewardAmount.add(amount);     \\n        SafeERC20.safeTransferFrom(rewardToken, msg.sender, address(this), amount);\\n        emit OwnerDeposit(msg.sender, amount, rewardAmount);\\n    }\\n\\n    function ownerWithdraw(uint amount) external notProcessing onlyOwner {\\n        uint balance = rewardToken.balanceOf(address(this));\\n        if (amount > balance) {\\n            amount = balance;\\n        }\\n        rewardAmount = rewardAmount.sub(amount);     \\n        SafeERC20.safeTransfer(rewardToken, owner(), amount);\\n        emit OwnerWithdraw(owner(), amount);\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken) external notBegin onlyOwner {\\n        _lpToken.balanceOf(address(this)); //ensure this is a token\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(PoolInfo({\\n            lpToken: _lpToken,\\n            allocPoint: _allocPoint,\\n            totalAmount: 0\\n        }));\\n        emit NewPool(_lpToken, _allocPoint, totalAllocPoint);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        require(_pid < poolInfo.length, \\\"illegal pid\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(block.timestamp >= startSeconds && block.timestamp <= endSeconds, \\\"ILO not in processing\\\");\\n        require(_amount > 0, \\\"illegal amount\\\");\\n\\n        user.amount = user.amount.add(_amount);\\n        user.lastTime = block.timestamp;\\n        pool.totalAmount = pool.totalAmount.add(_amount);\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    function pending(uint256 _pid, address _user) public view returns (uint256) {\\n        require(_pid < poolInfo.length, \\\"illegal pid\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 poolBalance = rewardAmount.mul(pool.allocPoint).div(totalAllocPoint);\\n        if (pool.totalAmount == 0) {\\n            return 0;\\n        }\\n        return poolBalance.mul(user.amount).div(pool.totalAmount);\\n    }\\n\\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n        rewardToken.safeTransfer(_to, _amount);\\n    }\\n\\n\\n    function withdraw(uint256 _pid) external {\\n        require(block.timestamp > endSeconds, \\\"Can not withdraw now\\\");\\n        require(_pid < poolInfo.length, \\\"illegal pid\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 pendingAmount = pending(_pid, msg.sender);\\n        if (pendingAmount > 0) {\\n            if (address(tokenLocker) == address(0)) {\\n                safeRewardTransfer(msg.sender, pendingAmount);\\n            } else {\\n                rewardToken.approve(address(tokenLocker), pendingAmount);\\n                tokenLocker.addReceiver(msg.sender, pendingAmount);\\n            }\\n            emit Claim(msg.sender, _pid, pendingAmount);\\n        }\\n        if (user.amount > 0) {\\n            uint _amount = user.amount;\\n            user.amount = 0;\\n            user.lastTime = block.timestamp;\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            emit Withdraw(msg.sender, _pid, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './SmartChefInitializable.sol';\\n\\ncontract PoolFactory is SafeOwnable {\\n    event NewSmartChefContract(address indexed smartChef);\\n\\n    address[] public allPools;\\n\\n    function poolLength() external view returns (uint) {\\n        return allPools.length;\\n    }\\n\\n    constructor() SafeOwnable(msg.sender) {\\n    }\\n\\n    function deployPool(\\n        IERC20 _stakedToken,\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock,\\n        uint256 _poolLimitPerUser,\\n        address _admin\\n    ) external onlyOwner {\\n        require(_stakedToken.totalSupply() >= 0);\\n        require(_rewardToken.totalSupply() >= 0);\\n        require(_stakedToken != _rewardToken, \\\"Tokens must be be different\\\");\\n\\n        bytes memory bytecode = type(SmartChefInitializable).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _startBlock));\\n        address smartChefAddress;\\n\\n        assembly {\\n            smartChefAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        SmartChefInitializable(smartChefAddress).initialize(\\n            _stakedToken,\\n            _rewardToken,\\n            _rewardPerBlock,\\n            _startBlock,\\n            _bonusEndBlock,\\n            _poolLimitPerUser,\\n            _admin\\n        );\\n        allPools.push(smartChefAddress);\\n        emit NewSmartChefContract(smartChefAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/P2EFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../libraries/P2ELibrary.sol';\\nimport './P2EPair.sol';\\n\\ncontract P2EFactory {\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(P2EPair).creationCode));\\n\\n    address public feeTo;\\n    address public feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function expectPairFor(address token0, address token1) public view returns (address) {\\n        return P2ELibrary.pairFor(address(this), token0, token1);\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'P2E: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'P2E: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'P2E: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(P2EPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IP2EPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'P2E: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'P2E: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"ChangePendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"delMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "P2EToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c07ab56c0a26b582d48e58e77e1f37d6484071e5ec247c68c8e46ecae23e3810"}