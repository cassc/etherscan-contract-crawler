{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Quest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror AlreadyCheckedIn();\\nerror NotQuestTime();\\nerror QuestStarted();\\nerror QuestEnded();\\nerror InvalidTime();\\nerror TransferFailed();\\n\\n/**\\n * @title Quest\\n * @dev Quest contract to do quest\\n */\\ncontract Quest is Ownable {\\n    uint256 constant CHECKIN_INTERVAL = 1 days;\\n\\n    mapping(address => uint256[]) private checkIns;\\n    /// @dev The start time of the quest\\n    uint256 public startTime;\\n    /// @dev The end time of the quest\\n    uint256 public endTime;\\n    /// @dev The reward amount of the quest\\n    uint256 public rewardAmount;\\n    /// @dev The reward token of the quest\\n    IERC20 public rewardToken;\\n\\n\\n    /// @dev Event to emit when the start time is change\\n    event StartTimeChange(uint256 timestamp);\\n    /// @dev Event to emit when the end time is change\\n    event EndTimeChange(uint256 timestamp);\\n    /// @dev Event to emit when someone checked in\\n    event CheckedIn(address indexed user, uint256 times, uint256 timestamp);\\n    /// @dev Event to emit when the reward amount is change\\n    event RewardAmountChanged(uint256 newRewardAmount);\\n    /// @dev Event to emit when the reward token is change\\n    event RewardTokenChanged(address newTokenAddress);\\n\\n\\n    /**\\n     * @dev Constructor\\n     * @param _tokenAddress The address of the ERC20 token used for rewards\\n     * @param _startTime The start time of the quest\\n     * @param _endTime The end time of the quest\\n     */\\n    constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) {\\n        rewardAmount = 5 * 10 ** 18; // 5 tokens as the default reward amount\\n        rewardToken = IERC20(_tokenAddress);\\n\\n        if (_endTime == 0) {\\n            _endTime = type(uint256).max;\\n        }\\n        if (_startTime == 0) {\\n            _startTime = block.timestamp;\\n        }\\n        if (_startTime > _endTime || _startTime < block.timestamp) {\\n            revert InvalidTime();\\n        }\\n\\n        startTime = _startTime;\\n        emit StartTimeChange(_startTime);\\n\\n        endTime = _endTime;\\n        emit EndTimeChange(_endTime);\\n    }\\n\\n    /**\\n     * @dev get check in times of the user\\n     * @param _user The address of the user\\n     */\\n    function getCheckInTimes(address _user) public view returns (uint256) {\\n        return checkIns[_user].length;\\n    }\\n\\n    /**\\n     * @dev get check in history of the user\\n     * @param _user The address of the user\\n     */\\n    function getCheckInHistory(\\n        address _user\\n    ) public view returns (uint256[] memory) {\\n        return checkIns[_user];\\n    }\\n\\n    /**\\n     * @dev get last check in time of the user\\n     * @param _user The address of the user\\n     */\\n    function getLastCheckInTime(address _user) public view returns (uint256) {\\n        return checkIns[_user][checkIns[_user].length - 1];\\n    }\\n\\n    /**\\n     * @dev Set the start time of the quest\\n     * @param _startTime The start time of the quest\\n     */\\n    function setStartTime(uint256 _startTime) public onlyOwner {\\n        if (block.timestamp > startTime) {\\n            revert QuestStarted();\\n        }\\n\\n        if (_startTime > endTime || _startTime < block.timestamp) {\\n            revert InvalidTime();\\n        }\\n\\n        startTime = _startTime;\\n        emit StartTimeChange(_startTime);\\n    }\\n\\n    /**\\n     * @dev Set the end time of the quest\\n     * @param _endTime The end time of the quest\\n     */\\n    function setEndTime(uint256 _endTime) public onlyOwner {\\n        if (startTime > _endTime || _endTime < block.timestamp) {\\n            revert InvalidTime();\\n        }\\n\\n        endTime = _endTime;\\n        emit EndTimeChange(_endTime);\\n    }\\n\\n    /**\\n     * @dev Start the quest\\n     */\\n    function start() public onlyOwner {\\n        if (block.timestamp > startTime) {\\n            revert QuestStarted();\\n        }\\n\\n        startTime = block.timestamp;\\n        emit StartTimeChange(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev End the quest\\n     */\\n    function end() public onlyOwner {\\n        if (block.timestamp < startTime) {\\n            revert NotQuestTime();\\n        }\\n\\n        if (block.timestamp > endTime) {\\n            revert QuestEnded();\\n        }\\n\\n        endTime = block.timestamp;\\n        emit EndTimeChange(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Set the reward amount of the quest\\n     * @param _rewardAmount The reward amount of the quest\\n     */\\n    function setRewardAmount(uint256 _rewardAmount) public onlyOwner {\\n        rewardAmount = _rewardAmount;\\n        emit RewardAmountChanged(_rewardAmount);\\n    }\\n\\n    /**\\n     * @dev Update the reward token address\\n     * @param _newTokenAddress The new ERC20 token address\\n     */\\n    function updateRewardToken(address _newTokenAddress) public onlyOwner {\\n        require(_newTokenAddress != address(0), \\\"Token address cannot be zero address.\\\");\\n\\n        // Updating reward token to new token address\\n        rewardToken = IERC20(_newTokenAddress);\\n        emit RewardTokenChanged(_newTokenAddress);\\n    }\\n\\n\\n    /**\\n     * @dev Check in to the quest\\n     */\\n    function checkIn() public {\\n        if (block.timestamp < startTime || block.timestamp > endTime) {\\n            revert NotQuestTime();\\n        }\\n\\n        uint256[] memory checkInInfo = checkIns[msg.sender];\\n\\n        if (\\n            checkInInfo.length > 0 &&\\n            checkInInfo[checkInInfo.length - 1] + CHECKIN_INTERVAL >\\n            block.timestamp\\n        ) {\\n            revert AlreadyCheckedIn();\\n        }\\n\\n        checkIns[msg.sender].push(block.timestamp);\\n\\n        // Transfer the reward to the user\\n        bool sent = rewardToken.transfer(msg.sender, rewardAmount);\\n        if (!sent) {\\n            revert TransferFailed();\\n        }\\n\\n        emit CheckedIn(msg.sender, checkInInfo.length, block.timestamp);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyCheckedIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotQuestTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EndTimeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"RewardTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimeChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCheckInHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCheckInTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLastCheckInTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Quest", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002b30f2038fd8b817b95cfdb08daf0adcd1d48f0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}