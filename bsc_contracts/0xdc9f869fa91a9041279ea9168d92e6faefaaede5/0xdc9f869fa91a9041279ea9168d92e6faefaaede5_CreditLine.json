{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/@jarvis-network/synthereum-contracts/contracts/common/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Context} from '../../../../@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    virtual\\n    returns (bool);\\n\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address sender)\\n  {\\n    if (isTrustedForwarder(msg.sender)) {\\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\\n      assembly {\\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return super._msgSender();\\n    }\\n  }\\n\\n  function _msgData() internal view virtual override returns (bytes calldata) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      return msg.data[0:msg.data.length - 20];\\n    } else {\\n      return super._msgData();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {ICreditLine} from './interfaces/ICreditLine.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  SafeERC20\\n} from '../../../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {CreditLineLib} from './CreditLineLib.sol';\\nimport {\\n  ERC2771Context\\n} from '../../../@jarvis-network/synthereum-contracts/contracts/common/ERC2771Context.sol';\\nimport {Initializable} from '../../base/utils/Initializable.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/**\\n * @title\\n * @notice\\n */\\ncontract CreditLine is\\n  ICreditLine,\\n  ICreditLineStorage,\\n  ERC2771Context,\\n  Initializable,\\n  ReentrancyGuard\\n{\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IMintableBurnableERC20;\\n  using CreditLineLib for PositionData;\\n  using CreditLineLib for PositionManagerData;\\n\\n  //----------------------------------------\\n  // Constants\\n  //----------------------------------------\\n\\n  string public constant override typology = 'SELF-MINTING';\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\n  mapping(address => PositionData) internal positions;\\n  // uint256 tokenSponsorsCount; // each new token sponsor will be identified with an incremental uint\\n\\n  GlobalPositionData internal globalPositionData;\\n\\n  PositionManagerData internal positionManagerData;\\n\\n  FeeStatus internal feeStatus;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount\\n  );\\n  event EmergencyShutdown(\\n    address indexed caller,\\n    uint256 settlementPrice,\\n    uint256 shutdowntimestamp\\n  );\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n  event Liquidation(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    uint256 liquidatedTokens,\\n    uint256 liquidatedCollateral,\\n    uint256 collateralReward,\\n    uint256 liquidationTime\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier notEmergencyShutdown() {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp == 0,\\n      'Contract emergency shutdown'\\n    );\\n    _;\\n  }\\n\\n  modifier isEmergencyShutdown() {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp != 0,\\n      'Contract not emergency shutdown'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyCollateralisedPosition(address sponsor) {\\n    require(\\n      positions[sponsor].rawCollateral.isGreaterThan(0),\\n      'Position has no collateral'\\n    );\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  //----------------------------------------\\n  // Initialization\\n  //----------------------------------------\\n\\n  function initialize(PositionManagerParams memory _positionManagerData)\\n    external\\n    override\\n    initializer\\n    nonReentrant\\n  {\\n    positionManagerData.initialize(\\n      _positionManagerData.synthereumFinder,\\n      _positionManagerData.collateralToken,\\n      _positionManagerData.syntheticToken,\\n      _positionManagerData.priceFeedIdentifier,\\n      _positionManagerData.minSponsorTokens,\\n      _positionManagerData.excessTokenBeneficiary,\\n      _positionManagerData.version\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  function deposit(uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    positionData.depositTo(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      _msgSender(),\\n      _msgSender()\\n    );\\n  }\\n\\n  function depositTo(address sponsor, uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n  {\\n    PositionData storage positionData = _getPositionData(sponsor);\\n\\n    positionData.depositTo(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      sponsor,\\n      _msgSender()\\n    );\\n  }\\n\\n  function withdraw(uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 amountWithdrawn)\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    amountWithdrawn = positionData\\n      .withdraw(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function create(uint256 collateralAmount, uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 feeAmount)\\n  {\\n    PositionData storage positionData = positions[_msgSender()];\\n    feeAmount = positionData\\n      .create(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      FixedPoint.Unsigned(numTokens),\\n      feeStatus,\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function redeem(uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 amountWithdrawn)\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    amountWithdrawn = positionData\\n      .redeem(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(numTokens),\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function repay(uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n    positionData.repay(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(numTokens),\\n      _msgSender()\\n    );\\n  }\\n\\n  function liquidate(address sponsor, uint256 maxTokensToLiquidate)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (\\n      uint256 tokensLiquidated,\\n      uint256 collateralLiquidated,\\n      uint256 collateralReward\\n    )\\n  {\\n    // Retrieve Position data for sponsor\\n    PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n    // try to liquidate it - reverts if is properly collateralised\\n    (\\n      collateralLiquidated,\\n      tokensLiquidated,\\n      collateralReward\\n    ) = positionToLiquidate.liquidate(\\n      positionManagerData,\\n      globalPositionData,\\n      FixedPoint.Unsigned(maxTokensToLiquidate),\\n      _msgSender()\\n    );\\n\\n    emit Liquidation(\\n      sponsor,\\n      _msgSender(),\\n      tokensLiquidated,\\n      collateralLiquidated,\\n      collateralReward,\\n      block.timestamp\\n    );\\n  }\\n\\n  function settleEmergencyShutdown()\\n    external\\n    override\\n    isEmergencyShutdown()\\n    nonReentrant\\n    returns (uint256 amountWithdrawn)\\n  {\\n    PositionData storage positionData = positions[_msgSender()];\\n    amountWithdrawn = positionData\\n      .settleEmergencyShutdown(\\n      globalPositionData,\\n      positionManagerData,\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function emergencyShutdown()\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 timestamp, uint256 price)\\n  {\\n    return positionManagerData.emergencyShutdown();\\n  }\\n\\n  function claimFee()\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 feeClaimed)\\n  {\\n    feeClaimed = positionManagerData.claimFee(feeStatus, _msgSender());\\n  }\\n\\n  function trimExcess(IERC20 token)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 amount)\\n  {\\n    amount = positionManagerData\\n      .trimExcess(globalPositionData, feeStatus, token)\\n      .rawValue;\\n  }\\n\\n  function deleteSponsorPosition(address sponsor) external override {\\n    require(\\n      _msgSender() == address(this),\\n      'Only the contract can invoke this function'\\n    );\\n    delete positions[sponsor];\\n  }\\n\\n  function minSponsorTokens() external view override returns (uint256 amount) {\\n    amount = positionManagerData.minSponsorTokens.rawValue;\\n  }\\n\\n  function excessTokensBeneficiary()\\n    external\\n    view\\n    override\\n    returns (address beneficiary)\\n  {\\n    beneficiary = positionManagerData.excessTokenBeneficiary;\\n  }\\n\\n  function capMintAmount() external view override returns (uint256 capMint) {\\n    capMint = positionManagerData.capMintAmount().rawValue;\\n  }\\n\\n  function feeInfo() external view override returns (Fee memory fee) {\\n    fee = positionManagerData.feeInfo();\\n  }\\n\\n  function totalFeeAmount() external view override returns (uint256 totalFee) {\\n    totalFee = feeStatus.totalFeeAmount.rawValue;\\n  }\\n\\n  function userFeeGained(address feeGainer)\\n    external\\n    view\\n    override\\n    returns (uint256 feeGained)\\n  {\\n    feeGained = feeStatus.feeGained[feeGainer].rawValue;\\n  }\\n\\n  function liquidationReward()\\n    external\\n    view\\n    override\\n    returns (uint256 rewardPct)\\n  {\\n    rewardPct = positionManagerData.liquidationRewardPercentage().rawValue;\\n  }\\n\\n  function collateralRequirement()\\n    external\\n    view\\n    override\\n    returns (uint256 collReq)\\n  {\\n    collReq = positionManagerData.collateralRequirement().rawValue;\\n  }\\n\\n  function getPositionData(address sponsor)\\n    external\\n    view\\n    override\\n    returns (uint256 collateralAmount, uint256 tokensAmount)\\n  {\\n    return (\\n      positions[sponsor].rawCollateral.rawValue,\\n      positions[sponsor].tokensOutstanding.rawValue\\n    );\\n  }\\n\\n  function getGlobalPositionData()\\n    external\\n    view\\n    override\\n    returns (uint256 totCollateral, uint256 totTokensOutstanding)\\n  {\\n    totCollateral = globalPositionData.rawTotalPositionCollateral.rawValue;\\n    totTokensOutstanding = globalPositionData.totalTokensOutstanding.rawValue;\\n  }\\n\\n  function collateralCoverage(address sponsor)\\n    external\\n    view\\n    override\\n    returns (bool, uint256)\\n  {\\n    return positionManagerData.collateralCoverage(positions[sponsor]);\\n  }\\n\\n  function liquidationPrice(address sponsor)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return positionManagerData.liquidationPrice(positions[sponsor]);\\n  }\\n\\n  function synthereumFinder()\\n    external\\n    view\\n    override\\n    returns (ISynthereumFinder finder)\\n  {\\n    finder = positionManagerData.synthereumFinder;\\n  }\\n\\n  function syntheticToken() external view override returns (IERC20 synthToken) {\\n    synthToken = positionManagerData.tokenCurrency;\\n  }\\n\\n  function collateralToken() public view override returns (IERC20 collateral) {\\n    collateral = positionManagerData.collateralToken;\\n  }\\n\\n  function syntheticTokenSymbol()\\n    external\\n    view\\n    override\\n    returns (string memory symbol)\\n  {\\n    symbol = IStandardERC20(address(positionManagerData.tokenCurrency))\\n      .symbol();\\n  }\\n\\n  function version() external view override returns (uint8 contractVersion) {\\n    contractVersion = positionManagerData.version;\\n  }\\n\\n  function priceIdentifier()\\n    external\\n    view\\n    override\\n    returns (bytes32 identifier)\\n  {\\n    identifier = positionManagerData.priceIdentifier;\\n  }\\n\\n  function emergencyShutdownPrice()\\n    external\\n    view\\n    override\\n    isEmergencyShutdown()\\n    returns (uint256 price)\\n  {\\n    price = positionManagerData.emergencyShutdownPrice.rawValue;\\n  }\\n\\n  function emergencyShutdownTime()\\n    external\\n    view\\n    override\\n    isEmergencyShutdown()\\n    returns (uint256 time)\\n  {\\n    time = positionManagerData.emergencyShutdownTimestamp;\\n  }\\n\\n  /**\\n   * @notice Check if an address is the trusted forwarder\\n   * @param  forwarder Address to check\\n   * @return True is the input address is the trusted forwarder, otherwise false\\n   */\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    try\\n      positionManagerData.synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.TrustedForwarder\\n      )\\n    returns (address trustedForwarder) {\\n      if (forwarder == trustedForwarder) {\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n  function _getPositionData(address sponsor)\\n    internal\\n    view\\n    onlyCollateralisedPosition(sponsor)\\n    returns (PositionData storage)\\n  {\\n    return positions[sponsor];\\n  }\\n\\n  function _msgSender()\\n    internal\\n    view\\n    override(ERC2771Context)\\n    returns (address sender)\\n  {\\n    return ERC2771Context._msgSender();\\n  }\\n\\n  function _msgData()\\n    internal\\n    view\\n    override(ERC2771Context)\\n    returns (bytes calldata)\\n  {\\n    return ERC2771Context._msgData();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLineStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {IStandardERC20} from '../../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ninterface ICreditLineStorage {\\n  // Describe fee structure\\n  struct Fee {\\n    // Fees charged when a user mints, redeem and exchanges tokens\\n    uint256 feePercentage;\\n    // Recipient receiving fees\\n    address[] feeRecipients;\\n    // Proportion for each recipient\\n    uint32[] feeProportions;\\n    // Used with individual proportions to scale values\\n    uint256 totalFeeProportions;\\n  }\\n\\n  struct FeeStatus {\\n    // Track the fee gained to be withdrawn by an address\\n    mapping(address => FixedPoint.Unsigned) feeGained;\\n    // Total amount of fees to be withdrawn\\n    FixedPoint.Unsigned totalFeeAmount;\\n  }\\n\\n  // Represents a single sponsor's position. All collateral is held by this contract.\\n  // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\n  struct PositionData {\\n    FixedPoint.Unsigned tokensOutstanding;\\n    FixedPoint.Unsigned rawCollateral;\\n  }\\n\\n  struct GlobalPositionData {\\n    // Keep track of the total collateral and tokens across all positions\\n    FixedPoint.Unsigned totalTokensOutstanding;\\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\\n    //_getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\\n    FixedPoint.Unsigned rawTotalPositionCollateral;\\n  }\\n\\n  struct PositionManagerData {\\n    // SynthereumFinder contract\\n    ISynthereumFinder synthereumFinder;\\n    // Collateral token\\n    IStandardERC20 collateralToken;\\n    // Synthetic token created by this contract.\\n    IMintableBurnableERC20 tokenCurrency;\\n    // Unique identifier for DVM price feed ticker.\\n    bytes32 priceIdentifier;\\n    // Minimum number of tokens in a sponsor's position.\\n    FixedPoint.Unsigned minSponsorTokens;\\n    // Expiry price pulled from Chainlink in the case of an emergency shutdown.\\n    FixedPoint.Unsigned emergencyShutdownPrice;\\n    // Timestamp used in case of emergency shutdown.\\n    uint256 emergencyShutdownTimestamp;\\n    // The excessTokenBeneficiary of any excess tokens added to the contract.\\n    address excessTokenBeneficiary;\\n    // Version of the self-minting derivative\\n    uint8 version;\\n  }\\n\\n  /**\\n   * @notice Construct the PerpetualPositionManager.\\n   * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\n   * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\n   * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\n   * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\n   * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\n   * total supply is 0 prior to construction of this contract.\\n   * @param collateralAddress ERC20 token used as collateral for all positions.\\n   * @param tokenAddress ERC20 token used as synthetic token.\\n   * @param priceFeedIdentifier registered in the ChainLink Oracle for the synthetic.\\n   * @param minSponsorTokens minimum amount of collateral that must exist at any time in a position.\\n   * @param timerAddress Contract that stores the current time in a testing environment. Set to 0x0 for production.\\n   * @param excessTokenBeneficiary Beneficiary to send all excess token balances that accrue in the contract.\\n   * @param version Version of the self-minting derivative\\n   * @param synthereumFinder The SynthereumFinder contract\\n   */\\n  struct PositionManagerParams {\\n    IStandardERC20 collateralToken;\\n    IMintableBurnableERC20 syntheticToken;\\n    bytes32 priceFeedIdentifier;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    address excessTokenBeneficiary;\\n    uint8 version;\\n    ISynthereumFinder synthereumFinder;\\n  }\\n\\n  struct LiquidationData {\\n    address sponsor;\\n    address liquidator;\\n    uint256 liquidationTime;\\n    uint256 numTokensBurnt;\\n    uint256 liquidatedCollateral;\\n  }\\n\\n  struct ExecuteLiquidationData {\\n    FixedPoint.Unsigned tokensToLiquidate;\\n    FixedPoint.Unsigned collateralValueLiquidatedTokens;\\n    FixedPoint.Unsigned collateralLiquidated;\\n    FixedPoint.Unsigned liquidatorReward;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/interfaces/IStandardERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStandardERC20 is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\ninterface IMintableBurnableERC20 is IERC20 {\\n  /**\\n   * @notice Burns a specific amount of the caller's tokens.\\n   * @dev This method should be permissioned to only allow designated parties to burn tokens.\\n   */\\n  function burn(uint256 value) external;\\n\\n  /**\\n   * @notice Mints tokens and adds them to the balance of the `to` address.\\n   * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n   */\\n  function mint(address to, uint256 value) external returns (bool);\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provides addresses of the contracts implementing certain interfaces.\\n */\\ninterface ISynthereumFinder {\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the deployed contract that implements the interface.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {\\n  IStandardERC20,\\n  IERC20\\n} from '../../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  ISynthereumDeployment\\n} from '../../../common/interfaces/IDeployment.sol';\\nimport {\\n  IEmergencyShutdown\\n} from '../../../common/interfaces/IEmergencyShutdown.sol';\\nimport {ICreditLineStorage} from './ICreditLineStorage.sol';\\nimport {ITypology} from '../../../common/interfaces/ITypology.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ninterface ICreditLine is ITypology, IEmergencyShutdown, ISynthereumDeployment {\\n  /**\\n   * @notice Initialize creditLine\\n   * @param _positionManagerData Params used for initialization (see PositionManagerParams struct)\\n   */\\n  function initialize(\\n    ICreditLineStorage.PositionManagerParams memory _positionManagerData\\n  ) external;\\n\\n  /**\\n   * @notice Transfers `collateralAmount` into the caller's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of collateral token\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function deposit(uint256 collateralAmount) external;\\n\\n  /**\\n   * @notice Transfers `collateralAmount` into the specified sponsor's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of collateralCurrency.\\n   * @param sponsor the sponsor to credit the deposit to.\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function depositTo(address sponsor, uint256 collateralAmount) external;\\n\\n  /**\\n   * @notice Transfers `collateralAmount` from the sponsor's position to the sponsor.\\n   * @dev Reverts if the withdrawal puts this position's collateralization ratio below the collateral requirement\\n   * @param collateralAmount is the amount of collateral to withdraw.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function withdraw(uint256 collateralAmount)\\n    external\\n    returns (uint256 amountWithdrawn);\\n\\n  /**\\n   * @notice Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\n   * Mints new debt tokens by creating a new position or by augmenting an existing position.\\n   * @dev Can only be called by a token sponsor. This contract must be approved to spend at least `collateralAmount` of\\n   * `collateralCurrency`.\\n   * @param collateralAmount is the number of collateral tokens to collateralize the position with\\n   * @param numTokens is the number of debt tokens to mint to sponsor.\\n   */\\n  function create(uint256 collateralAmount, uint256 numTokens)\\n    external\\n    returns (uint256 feeAmount);\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of collateral\\n   * @dev Can only be called by a token sponsor- This contract must be approved to spend at least `numTokens` of\\n   * `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function redeem(uint256 numTokens) external returns (uint256 amountWithdrawn);\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back collateral.\\n   * This is done by a sponsor to increase position CR.\\n   * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt.\\n   */\\n  function repay(uint256 numTokens) external;\\n\\n  /**\\n   * @notice Liquidate sponsor position for an amount of synthetic tokens undercollateralized\\n   * @notice Revert if position is not undercollateralized\\n   * @param sponsor Address of sponsor to be liquidated.\\n   * @param maxTokensToLiquidate Max number of synthetic tokens to be liquidated\\n   * @return tokensLiquidated Amount of debt tokens burned\\n   * @return collateralLiquidated Amount of received collateral equal to the value of tokens liquidated\\n   * @return collateralReward Amount of received collateral as reward for the liquidation\\n   */\\n  function liquidate(address sponsor, uint256 maxTokensToLiquidate)\\n    external\\n    returns (\\n      uint256 tokensLiquidated,\\n      uint256 collateralLiquidated,\\n      uint256 collateralReward\\n    );\\n\\n  /**\\n   * @notice When in emergency shutdown state all token holders and sponsor can redeem their tokens and\\n   * remaining collateral at the prevailing price defined by the on-chain oracle\\n   * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of\\n   * collateral. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\n   * @dev This contract must have the Burner role for the `tokenCurrency`.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function settleEmergencyShutdown() external returns (uint256 amountWithdrawn);\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee() external returns (uint256 feeClaimed);\\n\\n  /**\\n   * @notice trim any excess funds in the contract to the excessTokenBeneficiary address\\n   * @return amount the amount of tokens trimmed\\n   */\\n  function trimExcess(IERC20 token) external returns (uint256 amount);\\n\\n  /**\\n   * @notice Delete a TokenSponsor position. This function can only be called by the contract itself.\\n   * @param sponsor address of the TokenSponsor.\\n   */\\n  function deleteSponsorPosition(address sponsor) external;\\n\\n  /**\\n   * @notice Returns the minimum amount of tokens a sponsor must mint\\n   * @return amount the value\\n   */\\n  function minSponsorTokens() external view returns (uint256 amount);\\n\\n  /**\\n   * @notice Returns the address of the trim excess tokens receiver\\n   * @return beneficiary the addess\\n   */\\n  function excessTokensBeneficiary()\\n    external\\n    view\\n    returns (address beneficiary);\\n\\n  /**\\n   * @notice Returns the cap mint amount of the derivative contract\\n   * @return capMint cap mint amount\\n   */\\n  function capMintAmount() external view returns (uint256 capMint);\\n\\n  /**\\n   * @notice Returns the fee parameters of the derivative contract\\n   * @return fee Fee struct\\n   */\\n  function feeInfo() external view returns (ICreditLineStorage.Fee memory fee);\\n\\n  /**\\n   * @notice Returns the total fee produced by the contract\\n   * @return totalFee total amount of fees\\n   */\\n  function totalFeeAmount() external view returns (uint256 totalFee);\\n\\n  /**\\n   * @notice Returns the total fee gained by the input address\\n   * @param feeGainer address to check claimable fees\\n   * @return feeGained amount of fess claimable by feeGainer\\n   */\\n  function userFeeGained(address feeGainer)\\n    external\\n    view\\n    returns (uint256 feeGained);\\n\\n  /**\\n   * @notice Returns the liquidation rewrd percentage of the derivative contract\\n   * @return rewardPct liquidator reward percentage\\n   */\\n  function liquidationReward() external view returns (uint256 rewardPct);\\n\\n  /**\\n   * @notice Returns the over collateralization percentage of the derivative contract\\n   * @return collReq percentage of overcollateralization\\n   */\\n  function collateralRequirement() external view returns (uint256 collReq);\\n\\n  /**\\n   * @notice Accessor method for a sponsor's position.\\n   * @param sponsor address whose position data is retrieved.\\n   * @return collateralAmount amount of collateral of the sponsor's position.\\n   * @return tokensAmount amount of outstanding tokens of the sponsor's position.\\n   */\\n  function getPositionData(address sponsor)\\n    external\\n    view\\n    returns (uint256 collateralAmount, uint256 tokensAmount);\\n\\n  /**\\n   * @notice Accessor method for contract's global position (aggregate).\\n   * @return totCollateral total amount of collateral deposited by lps\\n   * @return totTokensOutstanding total amount of outstanding tokens.\\n   */\\n  function getGlobalPositionData()\\n    external\\n    view\\n    returns (uint256 totCollateral, uint256 totTokensOutstanding);\\n\\n  /**\\n   * @notice Returns if sponsor position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage(address sponsor)\\n    external\\n    view\\n    returns (bool, uint256);\\n\\n  /**\\n   * @notice Returns liquidation price of a position\\n   * @param sponsor address whose liquidation price is calculated.\\n   * @return liquidationPrice\\n   */\\n  function liquidationPrice(address sponsor)\\n    external\\n    view\\n    returns (uint256 liquidationPrice);\\n\\n  /**\\n   * @notice Get synthetic token price identifier as represented by the oracle interface\\n   * @return identifier Synthetic token price identifier\\n   */\\n  function priceIdentifier() external view returns (bytes32 identifier);\\n\\n  /**\\n   * @notice Get the price of synthetic token set by DVM after emergencyShutdown call\\n   * @return price Price of synthetic token\\n   */\\n  function emergencyShutdownPrice() external view returns (uint256 price);\\n\\n  /**\\n   * @notice Get the block number when the emergency shutdown was called\\n   * @return time Block time\\n   */\\n  function emergencyShutdownTime() external view returns (uint256 time);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Stores common interface names used throughout Synthereum.\\n */\\nlibrary SynthereumInterfaces {\\n  bytes32 public constant Deployer = 'Deployer';\\n  bytes32 public constant FactoryVersioning = 'FactoryVersioning';\\n  bytes32 public constant TokenFactory = 'TokenFactory';\\n  bytes32 public constant PoolRegistry = 'PoolRegistry';\\n  bytes32 public constant SelfMintingRegistry = 'SelfMintingRegistry';\\n  bytes32 public constant FixedRateRegistry = 'FixedRateRegistry';\\n  bytes32 public constant PriceFeed = 'PriceFeed';\\n  bytes32 public constant Manager = 'Manager';\\n  bytes32 public constant CreditLineController = 'CreditLineController';\\n  bytes32 public constant CollateralWhitelist = 'CollateralWhitelist';\\n  bytes32 public constant IdentifierWhitelist = 'IdentifierWhitelist';\\n  bytes32 public constant TrustedForwarder = 'TrustedForwarder';\\n  bytes32 public constant MoneyMarketManager = 'MoneyMarketManager';\\n  bytes32 public constant JarvisBrrrrr = 'JarvisBrrrrr';\\n  bytes32 public constant LendingManager = 'LendingManager';\\n  bytes32 public constant LendingStorageManager = 'LendingStorageManager';\\n  bytes32 public constant CommissionReceiver = 'CommissionReceiver';\\n  bytes32 public constant BuybackProgramReceiver = 'BuybackProgramReceiver';\\n  bytes32 public constant LendingRewardsReceiver = 'LendingRewardsReceiver';\\n  bytes32 public constant JarvisToken = 'JarvisToken';\\n  bytes32 public constant DebtTokenFactory = 'DebtTokenFactory';\\n}\\n\\nlibrary FactoryInterfaces {\\n  bytes32 public constant PoolFactory = 'PoolFactory';\\n  bytes32 public constant SelfMintingFactory = 'SelfMintingFactory';\\n  bytes32 public constant FixedRateFactory = 'FixedRateFactory';\\n}\\n\"\r\n    },\r\n    \"deploy/@uma/core/contracts/common/implementation/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../../../@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ICreditLineController} from './interfaces/ICreditLineController.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumPriceFeed\\n} from '../../oracle/common/interfaces/IPriceFeed.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  SafeERC20\\n} from '../../../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {CreditLine} from './CreditLine.sol';\\n\\nlibrary CreditLineLib {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IStandardERC20;\\n  using SafeERC20 for IMintableBurnableERC20;\\n  using CreditLineLib for ICreditLineStorage.PositionData;\\n  using CreditLineLib for ICreditLineStorage.PositionManagerData;\\n  using CreditLineLib for ICreditLineStorage.FeeStatus;\\n  using CreditLineLib for FixedPoint.Unsigned;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n\\n  event ClaimFee(\\n    address indexed claimer,\\n    uint256 feeAmount,\\n    uint256 totalRemainingFees\\n  );\\n\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount\\n  );\\n  event EmergencyShutdown(\\n    address indexed caller,\\n    uint256 settlementPrice,\\n    uint256 shutdownTimestamp\\n  );\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n\\n  event SetFeePercentage(uint256 feePercentage);\\n  event SetFeeRecipients(address[] feeRecipients, uint32[] feeProportions);\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  function initialize(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ISynthereumFinder _finder,\\n    IStandardERC20 _collateralToken,\\n    IMintableBurnableERC20 _tokenCurrency,\\n    bytes32 _priceIdentifier,\\n    FixedPoint.Unsigned memory _minSponsorTokens,\\n    address _excessTokenBeneficiary,\\n    uint8 _version\\n  ) external {\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        _finder.getImplementationAddress(SynthereumInterfaces.PriceFeed)\\n      );\\n\\n    require(\\n      priceFeed.isPriceSupported(_priceIdentifier),\\n      'Price identifier not supported'\\n    );\\n    require(\\n      _collateralToken.decimals() <= 18,\\n      'Collateral has more than 18 decimals'\\n    );\\n    require(\\n      _tokenCurrency.decimals() == 18,\\n      'Synthetic token has more or less than 18 decimals'\\n    );\\n    self.priceIdentifier = _priceIdentifier;\\n    self.synthereumFinder = _finder;\\n    self.collateralToken = _collateralToken;\\n    self.tokenCurrency = _tokenCurrency;\\n    self.minSponsorTokens = _minSponsorTokens;\\n    self.excessTokenBeneficiary = _excessTokenBeneficiary;\\n    self.version = _version;\\n  }\\n\\n  function depositTo(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    address sponsor,\\n    address msgSender\\n  ) external {\\n    require(collateralAmount.rawValue > 0, 'Invalid collateral amount');\\n\\n    // Increase the position and global collateral balance by collateral amount.\\n    positionData._incrementCollateralBalances(\\n      globalPositionData,\\n      collateralAmount\\n    );\\n\\n    emit Deposit(sponsor, collateralAmount.rawValue);\\n\\n    positionManagerData.collateralToken.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      collateralAmount.rawValue\\n    );\\n  }\\n\\n  function withdraw(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory) {\\n    require(collateralAmount.rawValue > 0, 'Invalid collateral amount');\\n\\n    // Decrement the sponsor's collateral and global collateral amounts.\\n    // Reverts if the resulting position is not properly collateralized\\n    _decrementCollateralBalancesCheckCR(\\n      positionData,\\n      globalPositionData,\\n      positionManagerData,\\n      collateralAmount\\n    );\\n\\n    emit Withdrawal(msgSender, collateralAmount.rawValue);\\n\\n    // Move collateral currency from contract to sender.\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      collateralAmount.rawValue\\n    );\\n\\n    return collateralAmount;\\n  }\\n\\n  function create(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory feeAmount) {\\n    // Update fees status - percentage is retrieved from Credit Line Controller\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n    uint8 collateralDecimals =\\n      getCollateralDecimals(positionManagerData.collateralToken);\\n    feeAmount = calculateCollateralAmount(\\n      numTokens,\\n      priceRate,\\n      collateralDecimals\\n    )\\n      .mul(\\n      FixedPoint.Unsigned(positionManagerData._getFeeInfo().feePercentage)\\n    );\\n    positionManagerData.updateFees(feeStatus, feeAmount);\\n\\n    if (positionData.tokensOutstanding.isEqual(0)) {\\n      require(\\n        _checkCollateralization(\\n          positionManagerData,\\n          collateralAmount.sub(feeAmount),\\n          numTokens,\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        'Insufficient Collateral'\\n      );\\n      require(\\n        numTokens.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n        'Below minimum sponsor position'\\n      );\\n      emit NewSponsor(msgSender);\\n    } else {\\n      require(\\n        _checkCollateralization(\\n          positionManagerData,\\n          positionData.rawCollateral.add(collateralAmount).sub(feeAmount),\\n          positionData.tokensOutstanding.add(numTokens),\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        'Insufficient Collateral'\\n      );\\n    }\\n\\n    // Increase or decrease the position and global collateral balance by collateral amount or fee amount.\\n    collateralAmount.isGreaterThanOrEqual(feeAmount)\\n      ? positionData._incrementCollateralBalances(\\n        globalPositionData,\\n        collateralAmount.sub(feeAmount)\\n      )\\n      : positionData._decrementCollateralBalances(\\n        globalPositionData,\\n        feeAmount.sub(collateralAmount)\\n      );\\n\\n    // Add the number of tokens created to the position's outstanding tokens and global.\\n    positionData.tokensOutstanding = positionData.tokensOutstanding.add(\\n      numTokens\\n    );\\n\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .add(numTokens);\\n\\n    checkMintLimit(globalPositionData, positionManagerData);\\n\\n    if (collateralAmount.rawValue > 0) {\\n      // pull collateral\\n      IERC20 collateralCurrency = positionManagerData.collateralToken;\\n\\n      // Transfer tokens into the contract from caller\\n      collateralCurrency.safeTransferFrom(\\n        msgSender,\\n        address(this),\\n        (collateralAmount).rawValue\\n      );\\n    }\\n\\n    // mint corresponding synthetic tokens to the caller's address.\\n    positionManagerData.tokenCurrency.mint(msgSender, numTokens.rawValue);\\n\\n    emit PositionCreated(\\n      msgSender,\\n      collateralAmount.rawValue,\\n      numTokens.rawValue,\\n      feeAmount.rawValue\\n    );\\n  }\\n\\n  function redeem(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens,\\n    address sponsor\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    amountWithdrawn = positionData.rawCollateral.mul(numTokens).div(\\n      positionData.tokensOutstanding\\n    );\\n\\n    // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\n    if (positionData.tokensOutstanding.isEqual(numTokens)) {\\n      positionData._deleteSponsorPosition(globalPositionData, sponsor);\\n    } else {\\n      // Decrement the sponsor's collateral and global collateral amounts.\\n      positionData._decrementCollateralBalances(\\n        globalPositionData,\\n        amountWithdrawn\\n      );\\n\\n      // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n      FixedPoint.Unsigned memory newTokenCount =\\n        positionData.tokensOutstanding.sub(numTokens);\\n      require(\\n        newTokenCount.isGreaterThanOrEqual(\\n          positionManagerData.minSponsorTokens\\n        ),\\n        'Below minimum sponsor position'\\n      );\\n      positionData.tokensOutstanding = newTokenCount;\\n      // Update the totalTokensOutstanding after redemption.\\n      globalPositionData.totalTokensOutstanding = globalPositionData\\n        .totalTokensOutstanding\\n        .sub(numTokens);\\n    }\\n\\n    // transfer collateral to user\\n    IERC20 collateralCurrency = positionManagerData.collateralToken;\\n\\n    {\\n      collateralCurrency.safeTransfer(sponsor, amountWithdrawn.rawValue);\\n\\n      // Pull and burn callers synthetic tokens.\\n      positionManagerData.tokenCurrency.safeTransferFrom(\\n        sponsor,\\n        address(this),\\n        numTokens.rawValue\\n      );\\n      positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    emit Redeem(sponsor, amountWithdrawn.rawValue, numTokens.rawValue);\\n  }\\n\\n  function repay(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens,\\n    address msgSender\\n  ) external {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n    FixedPoint.Unsigned memory newTokenCount =\\n      positionData.tokensOutstanding.sub(numTokens);\\n    require(\\n      newTokenCount.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n      'Below minimum sponsor position'\\n    );\\n\\n    // update position\\n    positionData.tokensOutstanding = newTokenCount;\\n\\n    // Update the totalTokensOutstanding after redemption.\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(numTokens);\\n\\n    // Transfer the tokens back from the sponsor and burn them.\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      numTokens.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n\\n    emit Repay(msgSender, numTokens.rawValue, newTokenCount.rawValue);\\n  }\\n\\n  function liquidate(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned calldata numSynthTokens,\\n    address msgSender\\n  )\\n    external\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // to avoid stack too deep\\n    ICreditLineStorage.ExecuteLiquidationData memory executeLiquidationData;\\n    uint8 collateralDecimals =\\n      getCollateralDecimals(positionManagerData.collateralToken);\\n\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n\\n    // make sure position is undercollateralised\\n    require(\\n      !positionManagerData._checkCollateralization(\\n        positionToLiquidate.rawCollateral,\\n        positionToLiquidate.tokensOutstanding,\\n        priceRate,\\n        collateralDecimals\\n      ),\\n      'Position is properly collateralised'\\n    );\\n\\n    // calculate tokens to liquidate\\n    executeLiquidationData.tokensToLiquidate.rawValue = positionToLiquidate\\n      .tokensOutstanding\\n      .isGreaterThan(numSynthTokens)\\n      ? numSynthTokens.rawValue\\n      : positionToLiquidate.tokensOutstanding.rawValue;\\n\\n    // calculate collateral value of those tokens\\n    executeLiquidationData\\n      .collateralValueLiquidatedTokens = calculateCollateralAmount(\\n      executeLiquidationData.tokensToLiquidate,\\n      priceRate,\\n      collateralDecimals\\n    );\\n\\n    // calculate proportion of collateral liquidated from position\\n    executeLiquidationData.collateralLiquidated = executeLiquidationData\\n      .tokensToLiquidate\\n      .div(positionToLiquidate.tokensOutstanding)\\n      .mul(positionToLiquidate.rawCollateral);\\n\\n    // compute final liquidation outcome\\n    if (\\n      executeLiquidationData.collateralLiquidated.isGreaterThan(\\n        executeLiquidationData.collateralValueLiquidatedTokens\\n      )\\n    ) {\\n      // position is still capitalised - liquidator profits\\n      executeLiquidationData.liquidatorReward = (\\n        executeLiquidationData.collateralLiquidated.sub(\\n          executeLiquidationData.collateralValueLiquidatedTokens\\n        )\\n      )\\n        .mul(positionManagerData._getLiquidationReward());\\n      executeLiquidationData.collateralLiquidated = executeLiquidationData\\n        .collateralValueLiquidatedTokens\\n        .add(executeLiquidationData.liquidatorReward);\\n    }\\n\\n    // reduce position\\n    positionToLiquidate._reducePosition(\\n      globalPositionData,\\n      executeLiquidationData.tokensToLiquidate,\\n      executeLiquidationData.collateralLiquidated\\n    );\\n\\n    // transfer tokens from liquidator to here and burn them\\n    _burnLiquidatedTokens(\\n      positionManagerData,\\n      msgSender,\\n      executeLiquidationData.tokensToLiquidate.rawValue\\n    );\\n\\n    // pay sender with collateral unlocked + rewards\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      executeLiquidationData.collateralLiquidated.rawValue\\n    );\\n\\n    // return values\\n    return (\\n      executeLiquidationData.collateralLiquidated.rawValue,\\n      executeLiquidationData.tokensToLiquidate.rawValue,\\n      executeLiquidationData.liquidatorReward.rawValue\\n    );\\n  }\\n\\n  function emergencyShutdown(\\n    ICreditLineStorage.PositionManagerData storage self\\n  ) external returns (uint256 timestamp, uint256 price) {\\n    require(\\n      msg.sender ==\\n        self.synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.Manager\\n        ),\\n      'Caller must be a Synthereum manager'\\n    );\\n\\n    timestamp = block.timestamp;\\n    FixedPoint.Unsigned memory _price = self._getOraclePrice();\\n\\n    // store timestamp and last price\\n    self.emergencyShutdownTimestamp = timestamp;\\n    self.emergencyShutdownPrice = _price;\\n\\n    price = _price.rawValue;\\n\\n    emit EmergencyShutdown(msg.sender, price, timestamp);\\n  }\\n\\n  function settleEmergencyShutdown(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    // copy value\\n    FixedPoint.Unsigned memory emergencyShutdownPrice =\\n      positionManagerData.emergencyShutdownPrice;\\n    IMintableBurnableERC20 tokenCurrency = positionManagerData.tokenCurrency;\\n    FixedPoint.Unsigned memory rawCollateral = positionData.rawCollateral;\\n    FixedPoint.Unsigned memory totalCollateral =\\n      globalPositionData.rawTotalPositionCollateral;\\n\\n    // Get caller's tokens balance\\n    FixedPoint.Unsigned memory tokensToRedeem =\\n      FixedPoint.Unsigned(tokenCurrency.balanceOf(msgSender));\\n\\n    // calculate amount of underlying collateral entitled to them, with oracle emergency price\\n    FixedPoint.Unsigned memory totalRedeemableCollateral =\\n      tokensToRedeem.mul(emergencyShutdownPrice);\\n\\n    // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\n    if (rawCollateral.rawValue > 0) {\\n      // Calculate the underlying entitled to a token sponsor. This is collateral - debt\\n      FixedPoint.Unsigned memory tokenDebtValueInCollateral =\\n        positionData.tokensOutstanding.mul(emergencyShutdownPrice);\\n\\n      // accrued to withdrawable collateral eventual excess collateral after debt\\n      if (tokenDebtValueInCollateral.isLessThan(rawCollateral)) {\\n        totalRedeemableCollateral = totalRedeemableCollateral.add(\\n          rawCollateral.sub(tokenDebtValueInCollateral)\\n        );\\n      }\\n\\n      CreditLine(address(this)).deleteSponsorPosition(msgSender);\\n      emit EndedSponsorPosition(msgSender);\\n    }\\n\\n    // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\n    // the caller will get as much collateral as the contract can pay out.\\n    amountWithdrawn = FixedPoint.min(\\n      totalCollateral,\\n      totalRedeemableCollateral\\n    );\\n\\n    // Decrement total contract collateral and outstanding debt.\\n    globalPositionData.rawTotalPositionCollateral = totalCollateral.sub(\\n      amountWithdrawn\\n    );\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToRedeem);\\n\\n    emit SettleEmergencyShutdown(\\n      msgSender,\\n      amountWithdrawn.rawValue,\\n      tokensToRedeem.rawValue\\n    );\\n\\n    // Transfer tokens & collateral and burn the redeemed tokens.\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      amountWithdrawn.rawValue\\n    );\\n    tokenCurrency.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      tokensToRedeem.rawValue\\n    );\\n    tokenCurrency.burn(tokensToRedeem.rawValue);\\n  }\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @param self Data type the library is attached to\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address msgSender\\n  ) external returns (uint256 feeClaimed) {\\n    // Fee to claim\\n    FixedPoint.Unsigned memory _feeClaimed = feeStatus.feeGained[msgSender];\\n\\n    // Check that fee is available\\n    require(_feeClaimed.rawValue > 0, 'No fee to claim');\\n\\n    // Update fee status\\n    delete feeStatus.feeGained[msgSender];\\n\\n    FixedPoint.Unsigned memory _totalRemainingFees =\\n      feeStatus.totalFeeAmount.sub(_feeClaimed);\\n\\n    feeStatus.totalFeeAmount = _totalRemainingFees;\\n\\n    // Transfer amount to the sender\\n    feeClaimed = _feeClaimed.rawValue;\\n\\n    self.collateralToken.safeTransfer(msgSender, _feeClaimed.rawValue);\\n\\n    emit ClaimFee(msgSender, feeClaimed, _totalRemainingFees.rawValue);\\n  }\\n\\n  function trimExcess(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    IERC20 token\\n  ) external returns (FixedPoint.Unsigned memory amount) {\\n    FixedPoint.Unsigned memory balance =\\n      FixedPoint.Unsigned(token.balanceOf(address(this)));\\n    if (address(token) == address(positionManagerData.collateralToken)) {\\n      FixedPoint.Unsigned memory rawTotalPositionCollateral =\\n        globalPositionData.rawTotalPositionCollateral;\\n      FixedPoint.Unsigned memory totalFeeAmount = feeStatus.totalFeeAmount;\\n      // If it is the collateral currency, send only the amount that the contract is not tracking (ie minus fees and positions)\\n      balance.isGreaterThan(rawTotalPositionCollateral.add(totalFeeAmount))\\n        ? amount = balance.sub(rawTotalPositionCollateral).sub(totalFeeAmount)\\n        : amount = FixedPoint.Unsigned(0);\\n    } else {\\n      // If it's not the collateral currency, send the entire balance.\\n      amount = balance;\\n    }\\n    token.safeTransfer(\\n      positionManagerData.excessTokenBeneficiary,\\n      amount.rawValue\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns if position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @param self Data type the library is attached to\\n   * @param positionData Position of the LP\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ICreditLineStorage.PositionData storage positionData\\n  ) external view returns (bool, uint256) {\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(self);\\n    uint8 collateralDecimals = getCollateralDecimals(self.collateralToken);\\n    FixedPoint.Unsigned memory positionCollateral = positionData.rawCollateral;\\n    FixedPoint.Unsigned memory positionTokens = positionData.tokensOutstanding;\\n    bool _isOverCollateralised =\\n      _checkCollateralization(\\n        self,\\n        positionCollateral,\\n        positionTokens,\\n        priceRate,\\n        collateralDecimals\\n      );\\n\\n    FixedPoint.Unsigned memory collateralRequirementPrc =\\n      self._getCollateralRequirement();\\n\\n    FixedPoint.Unsigned memory overCollateralValue =\\n      getOverCollateralizationLimit(\\n        calculateCollateralAmount(\\n          positionData.tokensOutstanding,\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        collateralRequirementPrc\\n      );\\n\\n    FixedPoint.Unsigned memory coverageRatio =\\n      positionCollateral.div(overCollateralValue);\\n\\n    FixedPoint.Unsigned memory _collateralCoverage =\\n      collateralRequirementPrc.mul(coverageRatio);\\n\\n    return (_isOverCollateralised, _collateralCoverage.rawValue);\\n  }\\n\\n  function liquidationPrice(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ICreditLineStorage.PositionData storage positionData\\n  ) external view returns (uint256 liqPrice) {\\n    // liquidationPrice occurs when totalCollateral is entirely occupied in the position value * collateral requirement\\n    // positionCollateral = positionTokensOut * liqPrice * collRequirement\\n    uint8 collateralDecimals = getCollateralDecimals(self.collateralToken);\\n    liqPrice = positionData\\n      .rawCollateral\\n      .div(self._getCollateralRequirement())\\n      .mul(10**(18 - collateralDecimals))\\n      .div(positionData.tokensOutstanding)\\n      .rawValue;\\n  }\\n\\n  //Calls to the CreditLine controller\\n  function capMintAmount(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory capMint) {\\n    capMint = positionManagerData._getCapMintAmount();\\n  }\\n\\n  function liquidationRewardPercentage(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory liqRewardPercentage) {\\n    liqRewardPercentage = positionManagerData._getLiquidationReward();\\n  }\\n\\n  function feeInfo(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (ICreditLineStorage.Fee memory fee) {\\n    fee = positionManagerData._getFeeInfo();\\n  }\\n\\n  function collateralRequirement(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory) {\\n    return positionManagerData._getCollateralRequirement();\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n  /**\\n   * @notice Update fee gained by the fee recipients\\n   * @param feeStatus Actual status of fee gained to be withdrawn\\n   * @param feeAmount Collateral fee charged\\n   */\\n  function updateFees(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned memory feeAmount\\n  ) internal {\\n    FixedPoint.Unsigned memory feeCharged;\\n\\n    ICreditLineStorage.Fee memory feeStruct = positionManagerData._getFeeInfo();\\n    address[] memory feeRecipients = feeStruct.feeRecipients;\\n    uint32[] memory feeProportions = feeStruct.feeProportions;\\n    uint256 totalFeeProportions = feeStruct.totalFeeProportions;\\n    uint256 numberOfRecipients = feeRecipients.length;\\n    mapping(address => FixedPoint.Unsigned) storage feeGained =\\n      feeStatus.feeGained;\\n\\n    for (uint256 i = 0; i < numberOfRecipients - 1; i++) {\\n      address feeRecipient = feeRecipients[i];\\n      FixedPoint.Unsigned memory feeReceived =\\n        FixedPoint.Unsigned(\\n          (feeAmount.rawValue * feeProportions[i]) / totalFeeProportions\\n        );\\n      feeGained[feeRecipient] = feeGained[feeRecipient].add(feeReceived);\\n      feeCharged = feeCharged.add(feeReceived);\\n    }\\n\\n    address lastRecipient = feeRecipients[numberOfRecipients - 1];\\n\\n    feeGained[lastRecipient] = feeGained[lastRecipient].add(feeAmount).sub(\\n      feeCharged\\n    );\\n\\n    feeStatus.totalFeeAmount = feeStatus.totalFeeAmount.add(feeAmount);\\n  }\\n\\n  function _burnLiquidatedTokens(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    address liquidator,\\n    uint256 amount\\n  ) internal {\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      liquidator,\\n      address(this),\\n      amount\\n    );\\n    positionManagerData.tokenCurrency.burn(amount);\\n  }\\n\\n  function _incrementCollateralBalances(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    positionData.rawCollateral = positionData.rawCollateral.add(\\n      collateralAmount\\n    );\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .add(collateralAmount);\\n  }\\n\\n  function _decrementCollateralBalances(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    positionData.rawCollateral = positionData.rawCollateral.sub(\\n      collateralAmount\\n    );\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralAmount);\\n  }\\n\\n  //remove the withdrawn collateral from the position and then check its CR\\n  function _decrementCollateralBalancesCheckCR(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    FixedPoint.Unsigned memory newRawCollateral =\\n      positionData.rawCollateral.sub(collateralAmount);\\n\\n    positionData.rawCollateral = newRawCollateral;\\n\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralAmount);\\n\\n    require(\\n      _checkCollateralization(\\n        positionManagerData,\\n        newRawCollateral,\\n        positionData.tokensOutstanding,\\n        _getOraclePrice(positionManagerData),\\n        getCollateralDecimals(positionManagerData.collateralToken)\\n      ),\\n      'CR is not sufficiently high after the withdraw - try less amount'\\n    );\\n  }\\n\\n  // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\n  function _deleteSponsorPosition(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    address sponsor\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    // Remove the collateral and outstanding from the overall total position.\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(positionToLiquidate.rawCollateral);\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(positionToLiquidate.tokensOutstanding);\\n\\n    // delete position entry from storage\\n    CreditLine(address(this)).deleteSponsorPosition(sponsor);\\n\\n    emit EndedSponsorPosition(sponsor);\\n\\n    // Return unlocked amount of collateral\\n    return positionToLiquidate.rawCollateral;\\n  }\\n\\n  function _reducePosition(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory tokensToLiquidate,\\n    FixedPoint.Unsigned memory collateralToLiquidate\\n  ) internal {\\n    // reduce position\\n    positionToLiquidate.tokensOutstanding = positionToLiquidate\\n      .tokensOutstanding\\n      .sub(tokensToLiquidate);\\n    positionToLiquidate.rawCollateral = positionToLiquidate.rawCollateral.sub(\\n      collateralToLiquidate\\n    );\\n\\n    // update global position data\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToLiquidate);\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralToLiquidate);\\n  }\\n\\n  function _checkCollateralization(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory numTokens,\\n    FixedPoint.Unsigned memory oraclePrice,\\n    uint8 collateralDecimals\\n  ) internal view returns (bool) {\\n    // calculate the min collateral of numTokens with chainlink\\n    FixedPoint.Unsigned memory thresholdValue =\\n      numTokens.mul(oraclePrice).div(10**(18 - collateralDecimals));\\n\\n    thresholdValue = getOverCollateralizationLimit(\\n      thresholdValue,\\n      positionManagerData._getCollateralRequirement()\\n    );\\n\\n    return collateral.isGreaterThanOrEqual(thresholdValue);\\n  }\\n\\n  // Check new total number of tokens does not overcome mint limit\\n  function checkMintLimit(\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view {\\n    require(\\n      globalPositionData.totalTokensOutstanding.isLessThanOrEqual(\\n        positionManagerData._getCapMintAmount()\\n      ),\\n      'Total amount minted overcomes mint limit'\\n    );\\n  }\\n\\n  /**\\n   * @notice Retrun the on-chain oracle price for a pair\\n   * @return priceRate Latest rate of the pair\\n   */\\n  function _getOraclePrice(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory priceRate) {\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        positionManagerData.synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.PriceFeed\\n        )\\n      );\\n    priceRate = FixedPoint.Unsigned(\\n      priceFeed.getLatestPrice(positionManagerData.priceIdentifier)\\n    );\\n  }\\n\\n  /// @notice calls CreditLineController to retrieve liquidation reward percentage\\n  function _getLiquidationReward(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory liqRewardPercentage) {\\n    liqRewardPercentage = FixedPoint.Unsigned(\\n      positionManagerData\\n        .getCreditLineController()\\n        .getLiquidationRewardPercentage(address(this))\\n    );\\n  }\\n\\n  function _getFeeInfo(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (ICreditLineStorage.Fee memory fee) {\\n    fee = positionManagerData.getCreditLineController().getFeeInfo(\\n      address(this)\\n    );\\n  }\\n\\n  function _getCollateralRequirement(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory) {\\n    return\\n      FixedPoint.Unsigned(\\n        positionManagerData.getCreditLineController().getCollateralRequirement(\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  // Get mint amount limit from CreditLineController\\n  function _getCapMintAmount(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory capMint) {\\n    capMint = FixedPoint.Unsigned(\\n      positionManagerData.getCreditLineController().getCapMintAmount(\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  // Get self-minting controller instance\\n  function getCreditLineController(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (ICreditLineController creditLineController) {\\n    creditLineController = ICreditLineController(\\n      positionManagerData.synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.CreditLineController\\n      )\\n    );\\n  }\\n\\n  function getCollateralDecimals(IStandardERC20 collateralToken)\\n    internal\\n    view\\n    returns (uint8 decimals)\\n  {\\n    decimals = collateralToken.decimals();\\n  }\\n\\n  /**\\n   * @notice Calculate collateral amount starting from an amount of synthtic token\\n   * @param numTokens Amount of synthetic tokens from which you want to calculate collateral amount\\n   * @param priceRate On-chain price rate\\n   * @return collateralAmount Amount of collateral after on-chain oracle conversion\\n   */\\n  function calculateCollateralAmount(\\n    FixedPoint.Unsigned memory numTokens,\\n    FixedPoint.Unsigned memory priceRate,\\n    uint256 collateraDecimals\\n  ) internal pure returns (FixedPoint.Unsigned memory collateralAmount) {\\n    collateralAmount = numTokens.mul(priceRate).div(\\n      10**(18 - collateraDecimals)\\n    );\\n  }\\n\\n  function getOverCollateralizationLimit(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory collateralRequirementPrc\\n  ) internal pure returns (FixedPoint.Unsigned memory) {\\n    return collateral.mul(collateralRequirementPrc);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\n   */\\n  modifier initializer() {\\n    require(\\n      _initializing || !_initialized,\\n      'Initializable: contract is already initialized'\\n    );\\n\\n    bool isTopLevelCall = !_initializing;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n      _initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, 'Initializable: contract is initializing');\\n    if (!_initialized) {\\n      _initialized = true;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/IDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\n\\n/**\\n * @title Interface that a pool MUST have in order to be included in the deployer\\n */\\ninterface ISynthereumDeployment {\\n  /**\\n   * @notice Get Synthereum finder of the pool/self-minting derivative\\n   * @return finder Returns finder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /**\\n   * @notice Get Synthereum version\\n   * @return contractVersion Returns the version of this pool/self-minting derivative\\n   */\\n  function version() external view returns (uint8 contractVersion);\\n\\n  /**\\n   * @notice Get the collateral token of this pool/self-minting derivative\\n   * @return collateralCurrency The ERC20 collateral token\\n   */\\n  function collateralToken() external view returns (IERC20 collateralCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token associated to this pool/self-minting derivative\\n   * @return syntheticCurrency The ERC20 synthetic token\\n   */\\n  function syntheticToken() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token symbol associated to this pool/self-minting derivative\\n   * @return symbol The ERC20 synthetic token symbol\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/IEmergencyShutdown.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IEmergencyShutdown {\\n  /**\\n   * @notice Shutdown the pool or self-minting-derivative in case of emergency\\n   * @notice Only Synthereum manager contract can call this function\\n   * @return timestamp Timestamp of emergency shutdown transaction\\n   * @return price Price of the pair at the moment of shutdown execution\\n   */\\n  function emergencyShutdown()\\n    external\\n    returns (uint256 timestamp, uint256 price);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/ITypology.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface ITypology {\\n  /**\\n   * @notice Return typology of the contract\\n   */\\n  function typology() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLineController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ICreditLineStorage} from './ICreditLineStorage.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\n/** @title Interface for interacting with the SelfMintingController\\n */\\ninterface ICreditLineController {\\n  /**\\n   * @notice Allow to set collateralRequirement percentage on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param collateralRequirements Over collateralization percentage for self-minting derivatives\\n   */\\n  function setCollateralRequirement(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata collateralRequirements\\n  ) external;\\n\\n  /**\\n   * @notice Allow to set capMintAmount on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param capMintAmounts Mint cap amounts for self-minting derivatives\\n   */\\n  function setCapMintAmount(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata capMintAmounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to set fee percentages on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param feePercentages fee percentages for self-minting derivatives\\n   */\\n  function setFeePercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata feePercentages\\n  ) external;\\n\\n  /**\\n   * @notice Update the addresses and weight of recipients for generated fees\\n   * @param selfMintingDerivatives Derivatives to update\\n   * @param feeRecipients A two-dimension array containing for each derivative the addresses of fee recipients\\n   * @param feeProportions An array of the proportions of fees generated each recipient will receive\\n   */\\n  function setFeeRecipients(\\n    address[] calldata selfMintingDerivatives,\\n    address[][] calldata feeRecipients,\\n    uint32[][] calldata feeProportions\\n  ) external;\\n\\n  /**\\n   * @notice Update the liquidation reward percentage\\n   * @param selfMintingDerivatives Derivatives to update\\n   * @param _liquidationRewards Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function setLiquidationRewardPercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata _liquidationRewards\\n  ) external;\\n\\n  /**\\n   * @notice Gets the over collateralization percentage of a self-minting derivative\\n   * @param selfMintingDerivative Derivative to read value of\\n   * @return the collateralRequirement percentage\\n   */\\n  function getCollateralRequirement(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Gets the set liquidtion reward percentage of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return liquidation Reward percentage\\n   */\\n  function getLiquidationRewardPercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Gets the set CapMintAmount of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return capMintAmount Limit amount for minting\\n   */\\n  function getCapMintAmount(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 capMintAmount);\\n\\n  /**\\n   * @notice Gets the fee params of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return fee fee info (percent + recipient + proportions)\\n   */\\n  function getFeeInfo(address selfMintingDerivative)\\n    external\\n    view\\n    returns (ICreditLineStorage.Fee memory fee);\\n\\n  /**\\n   * @notice Gets the fee percentage of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return feePercentage value\\n   */\\n  function feePercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns fee recipients info\\n   * @return Addresses, weigths and total of weigtht\\n   */\\n  function feeRecipientsInfo(address selfMintingDerivative)\\n    external\\n    view\\n    returns (\\n      address[] memory,\\n      uint32[] memory,\\n      uint256\\n    );\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/oracle/common/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface ISynthereumPriceFeed {\\n  /**\\n   * @notice Get last chainlink oracle price for a given price identifier\\n   * @param _priceIdentifier Price feed identifier\\n   * @return price Oracle price\\n   */\\n  function getLatestPrice(bytes32 _priceIdentifier)\\n    external\\n    view\\n    returns (uint256 price);\\n\\n  /**\\n   * @notice Return if price identifier is supported\\n   * @param _priceIdentifier Price feed identifier\\n   * @return isSupported True if price is supported otherwise false\\n   */\\n  function isPriceSupported(bytes32 _priceIdentifier)\\n    external\\n    view\\n    returns (bool isSupported);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  IDeploymentSignature\\n} from '../../core/interfaces/IDeploymentSignature.sol';\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from '../../core/interfaces/ICollateralWhitelist.sol';\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from '../../core/interfaces/IIdentifierWhitelist.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {CreditLineCreator} from './CreditLineCreator.sol';\\nimport {CreditLine} from './CreditLine.sol';\\nimport {FactoryConditions} from '../../common/FactoryConditions.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/** @title Contract factory of self-minting derivatives\\n */\\ncontract CreditLineFactory is\\n  IDeploymentSignature,\\n  ReentrancyGuard,\\n  FactoryConditions,\\n  CreditLineCreator\\n{\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  bytes4 public immutable override deploymentSignature;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the CreditLineFactory contract\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   * @param _creditLineImplementation CreditLine implementation address\\n   */\\n  constructor(address _synthereumFinder, address _creditLineImplementation)\\n    CreditLineCreator(_synthereumFinder, _creditLineImplementation)\\n  {\\n    deploymentSignature = this.createSelfMintingDerivative.selector;\\n  }\\n\\n  /**\\n   * @notice Check if the sender is the deployer and deploy a new creditLine contract\\n   * @param params is a `ConstructorParams` object from creditLine.\\n   * @return creditLine address of the deployed contract.\\n   */\\n  function createSelfMintingDerivative(Params calldata params)\\n    public\\n    override\\n    onlyDeployer(synthereumFinder)\\n    nonReentrant\\n    returns (CreditLine creditLine)\\n  {\\n    checkDeploymentConditions(\\n      synthereumFinder,\\n      params.collateralToken,\\n      params.priceFeedIdentifier\\n    );\\n    creditLine = super.createSelfMintingDerivative(params);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeploymentSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provides signature of function for deployment\\n */\\ninterface IDeploymentSignature {\\n  /**\\n   * @notice Returns the bytes4 signature of the function used for the deployment of a contract in a factory\\n   * @return signature returns signature of the deployment function\\n   */\\n  function deploymentSignature() external view returns (bytes4 signature);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/ICollateralWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title An interface to track a whitelist of addresses.\\n */\\ninterface ISynthereumCollateralWhitelist {\\n  /**\\n   * @notice Adds an address to the whitelist.\\n   * @param newCollateral the new address to add.\\n   */\\n  function addToWhitelist(address newCollateral) external;\\n\\n  /**\\n   * @notice Removes an address from the whitelist.\\n   * @param collateralToRemove The existing address to remove.\\n   */\\n  function removeFromWhitelist(address collateralToRemove) external;\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param collateralToCheck The address to check.\\n   * @return True if `collateralToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(address collateralToCheck)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @notice Gets all addresses that are currently included in the whitelist.\\n   * @return The list of addresses on the whitelist.\\n   */\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IIdentifierWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title An interface to track a whitelist of identifiers.\\n */\\ninterface ISynthereumIdentifierWhitelist {\\n  /**\\n   * @notice Adds an identifier to the whitelist.\\n   * @param newIdentifier the new identifier to add.\\n   */\\n  function addToWhitelist(bytes32 newIdentifier) external;\\n\\n  /**\\n   * @notice Removes an identifier from the whitelist.\\n   * @param identifierToRemove The existing identifier to remove.\\n   */\\n  function removeFromWhitelist(bytes32 identifierToRemove) external;\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param identifierToCheck The address to check.\\n   * @return True if `identifierToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(bytes32 identifierToCheck)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @notice Gets all identifiers that are currently included in the whitelist.\\n   * @return The list of identifiers on the whitelist.\\n   */\\n  function getWhitelist() external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {ICreditLineController} from './interfaces/ICreditLineController.sol';\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../tokens/BaseControlledMintableBurnableERC20.sol';\\nimport {CreditLineLib} from './CreditLineLib.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {CreditLine} from './CreditLine.sol';\\nimport {Clones} from '../../../@openzeppelin/contracts/proxy/Clones.sol';\\n\\n/**\\n * @title Self-Minting Contract creator.\\n * @notice Factory contract to create new self-minting derivative\\n */\\ncontract CreditLineCreator {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using Clones for address;\\n\\n  struct Params {\\n    IStandardERC20 collateralToken;\\n    bytes32 priceFeedIdentifier;\\n    string syntheticName;\\n    string syntheticSymbol;\\n    address syntheticToken;\\n    ICreditLineStorage.Fee fee;\\n    uint256 liquidationPercentage;\\n    uint256 capMintAmount;\\n    uint256 collateralRequirement;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    address excessTokenBeneficiary;\\n    uint8 version;\\n  }\\n\\n  // Address of Synthereum Finder\\n  ISynthereumFinder public immutable synthereumFinder;\\n  address public immutable creditLineImplementation;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the Perpetual contract.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   */\\n  constructor(address _synthereumFinder, address _creditLineImplementation) {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n    creditLineImplementation = _creditLineImplementation;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Creates an instance of creditLine\\n   * @param params is a `ConstructorParams` object from creditLine.\\n   * @return creditLine address of the deployed contract.\\n   */\\n  function createSelfMintingDerivative(Params calldata params)\\n    public\\n    virtual\\n    returns (CreditLine creditLine)\\n  {\\n    // Create a new synthetic token using the params.\\n    require(bytes(params.syntheticName).length != 0, 'Missing synthetic name');\\n    require(\\n      bytes(params.syntheticSymbol).length != 0,\\n      'Missing synthetic symbol'\\n    );\\n    require(\\n      params.syntheticToken != address(0),\\n      'Synthetic token address cannot be 0x00'\\n    );\\n\\n    BaseControlledMintableBurnableERC20 tokenCurrency =\\n      BaseControlledMintableBurnableERC20(params.syntheticToken);\\n    require(\\n      keccak256(abi.encodePacked(tokenCurrency.name())) ==\\n        keccak256(abi.encodePacked(params.syntheticName)),\\n      'Wrong synthetic token name'\\n    );\\n    require(\\n      keccak256(abi.encodePacked(tokenCurrency.symbol())) ==\\n        keccak256(abi.encodePacked(params.syntheticSymbol)),\\n      'Wrong synthetic token symbol'\\n    );\\n\\n    creditLine = CreditLine(creditLineImplementation.clone());\\n    creditLine.initialize(_convertParams(params));\\n\\n    _setControllerValues(\\n      address(creditLine),\\n      params.fee,\\n      params.liquidationPercentage,\\n      params.capMintAmount,\\n      params.collateralRequirement\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Converts createPerpetual params to constructor params.\\n  function _convertParams(Params calldata params)\\n    internal\\n    view\\n    returns (CreditLine.PositionManagerParams memory constructorParams)\\n  {\\n    constructorParams.synthereumFinder = synthereumFinder;\\n\\n    require(\\n      params.excessTokenBeneficiary != address(0),\\n      'Token Beneficiary cannot be 0x00'\\n    );\\n\\n    constructorParams.syntheticToken = IMintableBurnableERC20(\\n      address(params.syntheticToken)\\n    );\\n    constructorParams.collateralToken = params.collateralToken;\\n    constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\\n    constructorParams.minSponsorTokens = params.minSponsorTokens;\\n    constructorParams.excessTokenBeneficiary = params.excessTokenBeneficiary;\\n    constructorParams.version = params.version;\\n  }\\n\\n  /** @notice Sets the controller values for a self-minting derivative\\n   * @param derivative Address of the derivative to set controller values\\n   * @param feeStruct The fee config params\\n   * @param capMintAmount Cap on mint amount. How much synthetic tokens can be minted through a self-minting derivative.\\n   * This value is updatable\\n   */\\n  function _setControllerValues(\\n    address derivative,\\n    ICreditLineStorage.Fee memory feeStruct,\\n    uint256 liquidationRewardPercentage,\\n    uint256 capMintAmount,\\n    uint256 collateralRequirement\\n  ) internal {\\n    ICreditLineController creditLineController =\\n      ICreditLineController(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.CreditLineController\\n        )\\n      );\\n\\n    // prepare function calls args\\n    address[] memory derivatives = new address[](1);\\n    derivatives[0] = derivative;\\n\\n    uint256[] memory capMintAmounts = new uint256[](1);\\n    capMintAmounts[0] = capMintAmount;\\n\\n    uint256[] memory collateralRequirements = new uint256[](1);\\n    collateralRequirements[0] = collateralRequirement;\\n\\n    uint256[] memory feePercentages = new uint256[](1);\\n    feePercentages[0] = feeStruct.feePercentage;\\n\\n    uint256[] memory liqPercentages = new uint256[](1);\\n    liqPercentages[0] = liquidationRewardPercentage;\\n\\n    address[][] memory feeRecipients = new address[][](1);\\n    feeRecipients[0] = feeStruct.feeRecipients;\\n\\n    uint32[][] memory feeProportions = new uint32[][](1);\\n    feeProportions[0] = feeStruct.feeProportions;\\n\\n    // set the derivative over collateralization percentage\\n    creditLineController.setCollateralRequirement(\\n      derivatives,\\n      collateralRequirements\\n    );\\n\\n    // set the derivative fee configuration\\n    creditLineController.setFeePercentage(derivatives, feePercentages);\\n    creditLineController.setFeeRecipients(\\n      derivatives,\\n      feeRecipients,\\n      feeProportions\\n    );\\n\\n    // set the derivative cap mint amount\\n    creditLineController.setCapMintAmount(derivatives, capMintAmounts);\\n\\n    // set the derivative liquidation reward percentage\\n    creditLineController.setLiquidationRewardPercentage(\\n      derivatives,\\n      liqPercentages\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/FactoryConditions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {IStandardERC20} from '../base/interfaces/IStandardERC20.sol';\\nimport {ISynthereumFinder} from '../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from '../core/interfaces/ICollateralWhitelist.sol';\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from '../core/interfaces/IIdentifierWhitelist.sol';\\nimport {SynthereumInterfaces} from '../core/Constants.sol';\\n\\n/** @title Contract to use iniside factories for checking deployment data\\n */\\ncontract FactoryConditions {\\n  /**\\n   * @notice Check if the sender is the deployer\\n   */\\n  modifier onlyDeployer(ISynthereumFinder _synthereumFinder) {\\n    address deployer =\\n      _synthereumFinder.getImplementationAddress(SynthereumInterfaces.Deployer);\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Check if the sender is the deployer and if identifier and collateral are supported\\n   * @param _synthereumFinder Synthereum finder\\n   * @param _collateralToken Collateral token to check if it's in the whithelist\\n   * @param _priceFeedIdentifier Identifier to check if it's in the whithelist\\n   */\\n  function checkDeploymentConditions(\\n    ISynthereumFinder _synthereumFinder,\\n    IStandardERC20 _collateralToken,\\n    bytes32 _priceFeedIdentifier\\n  ) internal view {\\n    address deployer =\\n      _synthereumFinder.getImplementationAddress(SynthereumInterfaces.Deployer);\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    ISynthereumCollateralWhitelist collateralWhitelist =\\n      ISynthereumCollateralWhitelist(\\n        _synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.CollateralWhitelist\\n        )\\n      );\\n    require(\\n      collateralWhitelist.isOnWhitelist(address(_collateralToken)),\\n      'Collateral not supported'\\n    );\\n    ISynthereumIdentifierWhitelist identifierWhitelist =\\n      ISynthereumIdentifierWhitelist(\\n        _synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.IdentifierWhitelist\\n        )\\n      );\\n    require(\\n      identifierWhitelist.isOnWhitelist(_priceFeedIdentifier),\\n      'Identifier not supported'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/BaseControlledMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from '../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IMintableBurnableERC20} from './interfaces/IMintableBurnableERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\nabstract contract BaseControlledMintableBurnableERC20 is\\n  IMintableBurnableERC20,\\n  ERC20\\n{\\n  uint8 private _decimals;\\n\\n  /**\\n   * @notice Constructs the ERC20 token contract\\n   * @param _tokenName Name of the token\\n   * @param _tokenSymbol Token symbol\\n   * @param _tokenDecimals Number of decimals for token\\n   */\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint8 _tokenDecimals\\n  ) ERC20(_tokenName, _tokenSymbol) {\\n    _setupDecimals(_tokenDecimals);\\n  }\\n\\n  /**\\n   * @notice Add Minter role to an account\\n   * @param account Address to which Minter role will be added\\n   */\\n  function addMinter(address account) external virtual;\\n\\n  /**\\n   * @notice Add Burner role to an account\\n   * @param account Address to which Burner role will be added\\n   */\\n  function addBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin role to an account\\n   * @param account Address to which Admin role will be added\\n   */\\n  function addAdmin(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  function addAdminAndMinterAndBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() external virtual;\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals()\\n    public\\n    view\\n    virtual\\n    override(ERC20, IMintableBurnableERC20)\\n    returns (uint8)\\n  {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of contracts implementing certain interfaces.\\n */\\ncontract SynthereumFinder is ISynthereumFinder, AccessControlEnumerable {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n    bytes32 indexed interfaceName,\\n    address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External view\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the implementation contract.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the defined interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    address implementationAddress = interfacesImplemented[interfaceName];\\n    require(implementationAddress != address(0x0), 'Implementation not found');\\n    return implementationAddress;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/FactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {\\n  EnumerableMap\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ncontract SynthereumFactoryVersioning is\\n  ISynthereumFactoryVersioning,\\n  AccessControlEnumerable\\n{\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) private factories;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event AddFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event SetFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event RemoveFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external override onlyMaintainer {\\n    require(factory != address(0), 'Factory cannot be address 0');\\n    bool isNewVersion = factories[factoryType].set(version, factory);\\n    if (isNewVersion) {\\n      emit AddFactory(factoryType, version, factory);\\n    } else {\\n      emit SetFactory(factoryType, version, factory);\\n    }\\n  }\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    EnumerableMap.UintToAddressMap storage selectedFactories =\\n      factories[factoryType];\\n    address factoryToRemove = selectedFactories.get(version);\\n    selectedFactories.remove(version);\\n    emit RemoveFactory(factoryType, version, factoryToRemove);\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    override\\n    returns (address factory)\\n  {\\n    factory = factories[factoryType].get(version);\\n  }\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    override\\n    returns (uint8 numberOfVersions)\\n  {\\n    numberOfVersions = uint8(factories[factoryType].length());\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ninterface ISynthereumFactoryVersioning {\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external;\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version) external;\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    returns (address factory);\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    returns (uint8 numberOfVersions);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"deploy/contracts/self-minting/v2/CreditLineLib.sol\": {\r\n        \"CreditLineLib\": \"0xf844826e986a2ad77bf24a491fe1d8b9ef2d3b03\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shutdowntimestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"EndedSponsorPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationTime\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"NewSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numTokensRepaid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTokenCount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"SettleEmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"collateralCoverage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collReq\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"deleteSponsorPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessTokensBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"feeProportions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeProportions\",\"type\":\"uint256\"}],\"internalType\":\"struct ICreditLineStorage.Fee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalPositionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totTokensOutstanding\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getPositionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStandardERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedIdentifier\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minSponsorTokens\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"excessTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"synthereumFinder\",\"type\":\"address\"}],\"internalType\":\"struct ICreditLineStorage.PositionManagerParams\",\"name\":\"_positionManagerData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensToLiquidate\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"liquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSponsorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleEmergencyShutdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthereumFinder\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"finder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"synthToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"trimExcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typology\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeGainer\",\"type\":\"address\"}],\"name\":\"userFeeGained\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeGained\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"contractVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CreditLine", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}