{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) =\\r\\n            target.call{value: value}(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"BEP20Token.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract BEP20Token is Context, IBEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint8 private _decimals;\\r\\n    string private _symbol;\\r\\n    string private _name;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        uint256 totalSupply_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n\\r\\n        _mint(_msgSender(), totalSupply_);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router =\\r\\n            IUniswapV2Router02(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\\r\\n        // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"BEP20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"BEP20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `msg.sender` must be the token owner\\r\\n     */\\r\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"BEP20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\\"BEP20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(\\r\\n            account,\\r\\n            _msgSender(),\\r\\n            _allowances[account][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"BEP20: burn amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"CappedCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title CappedCrowdsale\\r\\n * @dev Crowdsale with a limit for total contributions.\\r\\n */\\r\\nabstract contract CappedCrowdsale is Crowdsale {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _cap;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\\r\\n     * @param cap_ Max amount of wei to be contributed\\r\\n     */\\r\\n    constructor(uint256 cap_) {\\r\\n        require(cap_ \\u003e 0, \\\"CappedCrowdsale: cap is 0\\\");\\r\\n        _cap = cap_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the cap of the crowdsale.\\r\\n     */\\r\\n    function cap() public view returns (uint256) {\\r\\n        return _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether the cap has been reached.\\r\\n     * @return Whether the cap was reached\\r\\n     */\\r\\n    function capReached() public view returns (bool) {\\r\\n        return weiRaised() \\u003e= _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        super._preValidatePurchase(beneficiary, weiAmount);\\r\\n        require(\\r\\n            weiRaised().add(weiAmount) \\u003c= _cap,\\r\\n            \\\"CappedCrowdsale: cap exceeded\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"CapperRole.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\ncontract CapperRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event CapperAdded(address indexed account);\\r\\n    event CapperRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _cappers;\\r\\n\\r\\n    constructor() {\\r\\n        _addCapper(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyCapper() {\\r\\n        require(\\r\\n            isCapper(_msgSender()),\\r\\n            \\\"CapperRole: caller does not have the Capper role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isCapper(address account) public view returns (bool) {\\r\\n        return _cappers.has(account);\\r\\n    }\\r\\n\\r\\n    function addCapper(address account) public onlyCapper {\\r\\n        _addCapper(account);\\r\\n    }\\r\\n\\r\\n    function renounceCapper() public {\\r\\n        _removeCapper(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addCapper(address account) internal {\\r\\n        _cappers.add(account);\\r\\n        emit CapperAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeCapper(address account) internal {\\r\\n        _cappers.remove(account);\\r\\n        emit CapperRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Crowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeBEP20.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Crowdsale\\r\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\r\\n * allowing investors to purchase tokens with ether. This contract implements\\r\\n * such functionality in its most fundamental form and can be extended to provide additional\\r\\n * functionality and/or custom behavior.\\r\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\r\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\r\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\r\\n * the methods to add functionality. Consider using \\u0027super\\u0027 where appropriate to concatenate\\r\\n * behavior.\\r\\n */\\r\\ncontract Crowdsale is Context, ReentrancyGuard, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    // The token being sold\\r\\n    IBEP20 private _token;\\r\\n\\r\\n    // Address where funds are collected\\r\\n    address payable private _wallet;\\r\\n\\r\\n    //Agent struct\\r\\n    struct Agent {\\r\\n        address _agency_address;\\r\\n        address _brother_agent_address;\\r\\n    }\\r\\n\\r\\n    //list of agents\\r\\n    mapping(address =\\u003e Agent) public agents;\\r\\n\\r\\n    // How many token units a buyer gets per wei.\\r\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\r\\n    // So, if you are using a rate of 1 with a BEP20Detailed token with 3 decimals called TOK\\r\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n    uint256 private _rate;\\r\\n\\r\\n    // Amount of wei raised\\r\\n    uint256 private _weiRaised;\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param agent_address wallet address of registred agent\\r\\n     * @param brother_agent_address wallet address of brother agent\\r\\n     * @param agency_address wallet address of relationed agency\\r\\n     */\\r\\n    event AgentRegistred(\\r\\n        address indexed agent_address,\\r\\n        address indexed brother_agent_address,\\r\\n        address indexed agency_address\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param purchaser who paid for the tokens\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param value weis paid for purchase\\r\\n     * @param amount amount of tokens purchased\\r\\n     */\\r\\n    event TokensPurchased(\\r\\n        address indexed purchaser,\\r\\n        address indexed beneficiary,\\r\\n        uint256 value,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param purchaser who paid for the tokens\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param amount amount of tokens purchased\\r\\n     */\\r\\n    event TokensIndicationDistributed(\\r\\n        address indexed purchaser,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @param rate_ Number of token units a buyer gets per wei\\r\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\r\\n     * token unit. So, if you are using a rate of 1 with a BEP20Detailed token\\r\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n     * @param wallet_ Address where collected funds will be forwarded to\\r\\n     * @param token_ Address of the token being sold\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 rate_,\\r\\n        address payable wallet_,\\r\\n        IBEP20 token_\\r\\n    ) {\\r\\n        require(rate_ \\u003e 0, \\\"Crowdsale: rate is 0\\\");\\r\\n        require(wallet_ != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\r\\n        require(\\r\\n            address(token_) != address(0),\\r\\n            \\\"Crowdsale: token is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        _rate = rate_;\\r\\n        _wallet = wallet_;\\r\\n        _token = token_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev fallback function ***DO NOT OVERRIDE***\\r\\n     * Note that other contracts will transfer funds with a base gas stipend\\r\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\r\\n     * buyTokens directly when purchasing tokens from a contract.\\r\\n     */\\r\\n    receive() external payable {\\r\\n        buyTokens(_msgSender(), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param agent_address Agent Wallet Addres\\r\\n     * @param agency_address Agency Wallet Addres\\r\\n     * @return bool\\r\\n     */\\r\\n    function newAgent(\\r\\n        address agent_address,\\r\\n        address brother_agent_address,\\r\\n        address agency_address\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        agents[agent_address]._brother_agent_address = brother_agent_address;\\r\\n        agents[agent_address]._agency_address = agency_address;\\r\\n        emit AgentRegistred(\\r\\n            agent_address,\\r\\n            brother_agent_address,\\r\\n            agency_address\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the token being sold.\\r\\n     */\\r\\n    function token() public view returns (IBEP20) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address where funds are collected.\\r\\n     */\\r\\n    function wallet() public view returns (address payable) {\\r\\n        return _wallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of token units a buyer gets per wei.\\r\\n     */\\r\\n    function rate() public view returns (uint256) {\\r\\n        return _rate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount of wei raised.\\r\\n     */\\r\\n    function weiRaised() public view returns (uint256) {\\r\\n        return _weiRaised;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override to extend the way in which ether is converted to tokens.\\r\\n     * @param weiAmount Value in wei to be converted into tokens\\r\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return weiAmount.mul(_rate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\r\\n     * This function has a non-reentrancy guard, so it shouldn\\u0027t be called by\\r\\n     * another `nonReentrant` function.\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param agent_address Recipient of the token purchase bonus indication\\r\\n     */\\r\\n    function buyTokens(address beneficiary, address agent_address)\\r\\n        public\\r\\n        payable\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 weiAmount = msg.value;\\r\\n        _preValidatePurchase(beneficiary, weiAmount);\\r\\n\\r\\n        // calculate token amount to be created\\r\\n        uint256 tokens = _getTokenAmount(weiAmount);\\r\\n\\r\\n        // update state\\r\\n        _weiRaised = _weiRaised.add(weiAmount);\\r\\n\\r\\n        _processPurchase(beneficiary, tokens);\\r\\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\r\\n\\r\\n        _updatePurchasingState(beneficiary, weiAmount);\\r\\n\\r\\n        _forwardFunds();\\r\\n        _postValidatePurchase(beneficiary, weiAmount);\\r\\n\\r\\n        _payIndicationBonus(agent_address, tokens);\\r\\n    }\\r\\n\\r\\n    function _payIndicationBonus(address agent_address, uint256 tokens)\\r\\n        internal\\r\\n    {\\r\\n        require(\\r\\n            agent_address != address(0),\\r\\n            \\\"Crowdsale: beneficiary of bonus indication is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        Agent storage agent = agents[agent_address];\\r\\n        if (agent._agency_address != address(0x0)) {\\r\\n            uint256 agentTokens = tokens.mul(10).div(100);\\r\\n            uint256 agencyTokens = tokens.mul(5).div(100);\\r\\n            if (agent._brother_agent_address != address(0x0)) {\\r\\n                agencyTokens = tokens.mul(25).div(10).div(100);\\r\\n                uint256 agentBrotherTokens = agencyTokens;\\r\\n                _processPurchase(\\r\\n                    agent._brother_agent_address,\\r\\n                    agentBrotherTokens\\r\\n                );\\r\\n\\r\\n                emit TokensIndicationDistributed(\\r\\n                    _msgSender(),\\r\\n                    agent._brother_agent_address,\\r\\n                    agentBrotherTokens\\r\\n                );\\r\\n            }\\r\\n\\r\\n            _processPurchase(agent_address, agentTokens);\\r\\n            _processPurchase(agent._agency_address, agencyTokens);\\r\\n            emit TokensIndicationDistributed(\\r\\n                _msgSender(),\\r\\n                agent_address,\\r\\n                agentTokens\\r\\n            );\\r\\n            emit TokensIndicationDistributed(\\r\\n                _msgSender(),\\r\\n                agent._agency_address,\\r\\n                agencyTokens\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\r\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\r\\n     * Example from CappedCrowdsale.sol\\u0027s _preValidatePurchase method:\\r\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\r\\n     *     require(weiRaised().add(weiAmount) \\u003c= cap);\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            beneficiary != address(0),\\r\\n            \\\"Crowdsale: beneficiary is the zero address\\\"\\r\\n        );\\r\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\r\\n     * conditions are not met.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\r\\n     * its tokens.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param tokenAmount Number of tokens to be emitted\\r\\n     */\\r\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\r\\n        _token.safeTransfer(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn\\u0027t necessarily emit/send\\r\\n     * tokens.\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param tokenAmount Number of tokens to be purchased\\r\\n     */\\r\\n    function _processPurchase(address beneficiary, uint256 tokenAmount)\\r\\n        internal\\r\\n    {\\r\\n        _deliverTokens(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\r\\n     * etc.)\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines how BNB is stored/forwarded on purchases.\\r\\n     */\\r\\n    function _forwardFunds() internal {\\r\\n        _wallet.transfer(msg.value);\\r\\n    }\\r\\n}\\r\\n\"},\"IBEP20.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"IncreasingPriceCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./TimedCrowdsale.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IncreasingPriceCrowdsale\\r\\n * @dev Extension of Crowdsale contract that increases the price of tokens linearly in time.\\r\\n * Note that what should be provided to the constructor is the initial and final _rates_, that is,\\r\\n * the amount of tokens per wei contributed. Thus, the initial rate must be greater than the final rate.\\r\\n */\\r\\nabstract contract IncreasingPriceCrowdsale is TimedCrowdsale {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _initialRate;\\r\\n    uint256 private _finalRate;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor, takes initial and final rates of tokens received per wei contributed.\\r\\n     * @param initialRate_ Number of tokens a buyer gets per wei at the start of the crowdsale\\r\\n     * @param finalRate_ Number of tokens a buyer gets per wei at the end of the crowdsale\\r\\n     */\\r\\n    constructor(uint256 initialRate_, uint256 finalRate_) {\\r\\n        require(finalRate_ \\u003e 0, \\\"IncreasingPriceCrowdsale: final rate is 0\\\");\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            initialRate_ \\u003e finalRate_,\\r\\n            \\\"IncreasingPriceCrowdsale: initial rate is not greater than final rate\\\"\\r\\n        );\\r\\n        _initialRate = initialRate_;\\r\\n        _finalRate = finalRate_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the initial rate of the crowdsale.\\r\\n     */\\r\\n    function initialRate() public view returns (uint256) {\\r\\n        return _initialRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the final rate of the crowdsale.\\r\\n     */\\r\\n    function finalRate() public view returns (uint256) {\\r\\n        return _finalRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rate of tokens per wei at the present time.\\r\\n     * Note that, as price _increases_ with time, the rate _decreases_.\\r\\n     * @return The number of tokens a buyer gets per wei at a given time\\r\\n     */\\r\\n    function getCurrentRate() public view returns (uint256) {\\r\\n        if (!isOpen()) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        uint256 elapsedTime = block.timestamp.sub(openingTime());\\r\\n        uint256 timeRange = closingTime().sub(openingTime());\\r\\n        uint256 rateRange = _initialRate.sub(_finalRate);\\r\\n        return _initialRate.sub(elapsedTime.mul(rateRange).div(timeRange));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overrides parent method taking into account variable rate.\\r\\n     * @param weiAmount The value in wei to be converted into tokens\\r\\n     * @return The number of tokens _weiAmount wei will buy at present time\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 currentRate = getCurrentRate();\\r\\n        return currentRate.mul(weiAmount);\\r\\n    }\\r\\n}\\r\\n\"},\"IndividuallyCappedCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\nimport \\\"./CapperRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IndividuallyCappedCrowdsale\\r\\n * @dev Crowdsale with per-beneficiary caps.\\r\\n */\\r\\nabstract contract IndividuallyCappedCrowdsale is Crowdsale, CapperRole {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _maxCap;\\r\\n\\r\\n    mapping(address =\\u003e uint256) internal _contributions;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a specific beneficiary\\u0027s maximum contribution.\\r\\n     * @param cap Wei limit for individual contribution\\r\\n     */\\r\\n    function setCap(uint256 cap) external onlyCapper {\\r\\n        _maxCap = cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the cap of a specific beneficiary.\\r\\n     * @return Current cap for individual beneficiary\\r\\n     */\\r\\n    function getCap() public view returns (uint256) {\\r\\n        return _maxCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount contributed so far by a specific beneficiary.\\r\\n     * @param beneficiary Address of contributor\\r\\n     * @return Beneficiary contribution so far\\r\\n     */\\r\\n    function getContribution(address beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _contributions[beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior requiring purchase to respect the beneficiary\\u0027s funding cap.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        super._preValidatePurchase(beneficiary, weiAmount);\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _contributions[beneficiary].add(weiAmount) \\u003c= _maxCap,\\r\\n            \\\"IndividuallyCappedCrowdsale: beneficiary\\u0027s cap exceeded\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior to update beneficiary contributions.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        super._updatePurchasingState(beneficiary, weiAmount);\\r\\n        _contributions[beneficiary] = _contributions[beneficiary].add(\\r\\n            weiAmount\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Router01.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"},\"NortPrivateSale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\nimport \\\"./CappedCrowdsale.sol\\\";\\r\\nimport \\\"./TimedCrowdsale.sol\\\";\\r\\nimport \\\"./IndividuallyCappedCrowdsale.sol\\\";\\r\\nimport \\\"./IncreasingPriceCrowdsale.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract NortPrivateSale is\\r\\n    Crowdsale,\\r\\n    CappedCrowdsale,\\r\\n    TimedCrowdsale,\\r\\n    IncreasingPriceCrowdsale,\\r\\n    IndividuallyCappedCrowdsale\\r\\n{\\r\\n    uint8 constant DECIMALS = 18;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    constructor(\\r\\n        uint256 rate, // rate, in Nortbits\\r\\n        uint256 finalRate, // finalRate, in Nortbits\\r\\n        address payable wallet, // wallet to send BNB\\r\\n        IBEP20 token, // the token\\r\\n        uint256 cap, // total cap, in number\\r\\n        uint256 openingTime, // opening time in unix epoch seconds\\r\\n        uint256 closingTime // closing time in unix epoch seconds\\r\\n    )\\r\\n        CappedCrowdsale(cap * 10**uint256(DECIMALS))\\r\\n        TimedCrowdsale(openingTime, closingTime)\\r\\n        Crowdsale(rate, wallet, token)\\r\\n        IncreasingPriceCrowdsale(rate, finalRate)\\r\\n    {\\r\\n        // nice, we just created a crowdsale that\\u0027s only open\\r\\n        // for a certain amount of time\\r\\n        // and stops accepting contributions once it reaches `cap`\\r\\n        // with a individual max cap\\r\\n        // and incrising the price\\r\\n    }\\r\\n\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        override(\\r\\n            Crowdsale,\\r\\n            CappedCrowdsale,\\r\\n            TimedCrowdsale,\\r\\n            IndividuallyCappedCrowdsale\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            beneficiary != address(0),\\r\\n            \\\"Crowdsale: beneficiary is the zero address\\\"\\r\\n        );\\r\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\r\\n\\r\\n        require(\\r\\n            weiRaised() + weiAmount \\u003c= cap(),\\r\\n            \\\"CappedCrowdsale: cap exceeded\\\"\\r\\n        );\\r\\n        require(\\r\\n            _contributions[beneficiary] + weiAmount \\u003c= getCap(),\\r\\n            \\\"IndividuallyCappedCrowdsale: beneficiary\\u0027s cap exceeded\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overrides parent method taking into account variable rate.\\r\\n     * @param weiAmount The value in wei to be converted into tokens\\r\\n     * @return The number of tokens _weiAmount wei will buy at present time\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        override(Crowdsale, IncreasingPriceCrowdsale)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 currentRate = getCurrentRate();\\r\\n        return currentRate.mul(weiAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior to update beneficiary contributions.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        virtual\\r\\n        override(IndividuallyCappedCrowdsale, Crowdsale)\\r\\n    {\\r\\n        super._updatePurchasingState(beneficiary, weiAmount);\\r\\n        _contributions[beneficiary] = _contributions[beneficiary] + weiAmount;\\r\\n    }\\r\\n}\\r\\n\"},\"NortToken.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BEP20Token.sol\\\";\\r\\n\\r\\ncontract NortToken is BEP20Token {\\r\\n    uint8 constant DECIMALS = 18;\\r\\n    uint256 constant TOTAL_SUPPLY = 100_000_000 * 10**uint256(DECIMALS);\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_)\\r\\n        BEP20Token(name_, symbol_, DECIMALS, TOTAL_SUPPLY)\\r\\n    {\\r\\n        require(_msgSender() != address(0));\\r\\n    }\\r\\n\\r\\n    //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./PauserRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context, PauserRole {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause, triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"},\"PausableCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PausableCrowdsale\\r\\n * @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.\\r\\n */\\r\\nabstract contract PausableCrowdsale is Crowdsale, Pausable {\\r\\n    /**\\r\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\r\\n     * Use super to concatenate validations.\\r\\n     * Adds the validation that the crowdsale must not be paused.\\r\\n     * @param _beneficiary Address performing the token purchase\\r\\n     * @param _weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        whenNotPaused\\r\\n    {\\r\\n        return super._preValidatePurchase(_beneficiary, _weiAmount);\\r\\n    }\\r\\n}\\r\\n\"},\"PauserRole.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\ncontract PauserRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    constructor() {\\r\\n        _addPauser(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(\\r\\n            isPauser(_msgSender()),\\r\\n            \\\"PauserRole: caller does not have the Pauser role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyPauser {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"},\"Roles.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping(address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account\\u0027s access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\"},\"SafeBEP20.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\n\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance =\\r\\n            token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance =\\r\\n            token.allowance(address(this), spender).sub(\\r\\n                value,\\r\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\r\\n            );\\r\\n        callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"},\"TimedCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TimedCrowdsale\\r\\n * @dev Crowdsale accepting contributions only within a time frame.\\r\\n */\\r\\nabstract contract TimedCrowdsale is Crowdsale {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _openingTime;\\r\\n    uint256 private _closingTime;\\r\\n\\r\\n    /**\\r\\n     * Event for crowdsale extending\\r\\n     * @param newClosingTime new closing time\\r\\n     * @param prevClosingTime old closing time\\r\\n     */\\r\\n    event TimedCrowdsaleExtended(\\r\\n        uint256 prevClosingTime,\\r\\n        uint256 newClosingTime\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if not in crowdsale time range.\\r\\n     */\\r\\n    modifier onlyWhileOpen {\\r\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor, takes crowdsale opening and closing times.\\r\\n     * @param openingTime_ Crowdsale opening time\\r\\n     * @param closingTime_ Crowdsale closing time\\r\\n     */\\r\\n    constructor(uint256 openingTime_, uint256 closingTime_) {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(\\r\\n            openingTime_ \\u003e= block.timestamp,\\r\\n            \\\"TimedCrowdsale: opening time is before current time\\\"\\r\\n        );\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            closingTime_ \\u003e openingTime_,\\r\\n            \\\"TimedCrowdsale: opening time is not before closing time\\\"\\r\\n        );\\r\\n\\r\\n        _openingTime = openingTime_;\\r\\n        _closingTime = closingTime_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the crowdsale opening time.\\r\\n     */\\r\\n    function openingTime() public view returns (uint256) {\\r\\n        return _openingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the crowdsale closing time.\\r\\n     */\\r\\n    function closingTime() public view returns (uint256) {\\r\\n        return _closingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if the crowdsale is open, false otherwise.\\r\\n     */\\r\\n    function isOpen() public view returns (bool) {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        return\\r\\n            block.timestamp \\u003e= _openingTime \\u0026\\u0026 block.timestamp \\u003c= _closingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\r\\n     * @return Whether crowdsale period has elapsed\\r\\n     */\\r\\n    function hasClosed() public view returns (bool) {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        return block.timestamp \\u003e _closingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior requiring to be within contributing period.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        onlyWhileOpen\\r\\n    {\\r\\n        super._preValidatePurchase(beneficiary, weiAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend crowdsale.\\r\\n     * @param newClosingTime Crowdsale closing time\\r\\n     */\\r\\n    function _extendTime(uint256 newClosingTime) internal {\\r\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            newClosingTime \\u003e _closingTime,\\r\\n            \\\"TimedCrowdsale: new closing time is before current closing time\\\"\\r\\n        );\\r\\n\\r\\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\\r\\n        _closingTime = newClosingTime;\\r\\n    }\\r\\n}\\r\\n\"},\"WhitelistAdminRole.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WhitelistAdminRole\\r\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\r\\n */\\r\\ncontract WhitelistAdminRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event WhitelistAdminAdded(address indexed account);\\r\\n    event WhitelistAdminRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _whitelistAdmins;\\r\\n\\r\\n    constructor() {\\r\\n        _addWhitelistAdmin(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelistAdmin() {\\r\\n        require(\\r\\n            isWhitelistAdmin(_msgSender()),\\r\\n            \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\r\\n        return _whitelistAdmins.has(account);\\r\\n    }\\r\\n\\r\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\r\\n        _addWhitelistAdmin(account);\\r\\n    }\\r\\n\\r\\n    function renounceWhitelistAdmin() public {\\r\\n        _removeWhitelistAdmin(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.add(account);\\r\\n        emit WhitelistAdminAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.remove(account);\\r\\n        emit WhitelistAdminRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"WhitelistCrowdsale.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\nimport \\\"./WhitelistedRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WhitelistCrowdsale\\r\\n * @dev Crowdsale in which only whitelisted users can contribute.\\r\\n */\\r\\nabstract contract WhitelistCrowdsale is WhitelistedRole, Crowdsale {\\r\\n    /**\\r\\n     * @dev Extend parent behavior requiring beneficiary to be whitelisted. Note that no\\r\\n     * restriction is imposed on the account sending the transaction.\\r\\n     * @param _beneficiary Token beneficiary\\r\\n     * @param _weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n    {\\r\\n        require(\\r\\n            isWhitelisted(_beneficiary),\\r\\n            \\\"WhitelistCrowdsale: beneficiary doesn\\u0027t have the Whitelisted role\\\"\\r\\n        );\\r\\n        super._preValidatePurchase(_beneficiary, _weiAmount);\\r\\n    }\\r\\n}\\r\\n\"},\"WhitelistedRole.sol\":{\"content\":\"/**SPDX-License-Identifier: MIT */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./WhitelistAdminRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WhitelistedRole\\r\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\r\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\r\\n * it), and not Whitelisteds themselves.\\r\\n */\\r\\ncontract WhitelistedRole is Context, WhitelistAdminRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event WhitelistedAdded(address indexed account);\\r\\n    event WhitelistedRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _whitelisteds;\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        require(\\r\\n            isWhitelisted(_msgSender()),\\r\\n            \\\"WhitelistedRole: caller does not have the Whitelisted role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address account) public view returns (bool) {\\r\\n        return _whitelisteds.has(account);\\r\\n    }\\r\\n\\r\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\r\\n        _addWhitelisted(account);\\r\\n    }\\r\\n\\r\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\r\\n        _removeWhitelisted(account);\\r\\n    }\\r\\n\\r\\n    function renounceWhitelisted() public {\\r\\n        _removeWhitelisted(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addWhitelisted(address account) internal {\\r\\n        _whitelisteds.add(account);\\r\\n        emit WhitelistedAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeWhitelisted(address account) internal {\\r\\n        _whitelisteds.remove(account);\\r\\n        emit WhitelistedRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NortToken", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a4e6f727420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024e54000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c68c8aeacaa842f762885b27a6528d35dec305d31df8eefda1ca9f6dda254f5"}