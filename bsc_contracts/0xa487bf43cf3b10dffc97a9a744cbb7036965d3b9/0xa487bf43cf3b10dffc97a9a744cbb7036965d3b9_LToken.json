{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/LToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/ILToken.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"../math/UnsignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol liquidity provider token implementation\\r\\n */\\r\\ncontract LToken is IERC20, ILToken, ERC20 {\\r\\n\\r\\n    using UnsignedSafeMath for uint256;\\r\\n\\r\\n    // Pool address this LToken associated with\\r\\n    address private _pool;\\r\\n\\r\\n    modifier _pool_() {\\r\\n        require(msg.sender == _pool, \\\"LToken: called by non-associative pool, probably the original pool has been migrated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_, address pool_) ERC20(name_, symbol_) {\\r\\n        require(pool_ != address(0), \\\"LToken: construct with 0 address pool\\\");\\r\\n        _pool = pool_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ILToken}.{setPool}\\r\\n     */\\r\\n    function setPool(address newPool) public override {\\r\\n        require(newPool != address(0), \\\"LToken: setPool to 0 address\\\");\\r\\n        require(msg.sender == _pool, \\\"LToken: setPool caller is not current pool\\\");\\r\\n        _pool = newPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ILToken}.{pool}\\r\\n     */\\r\\n    function pool() public view override returns (address) {\\r\\n        return _pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ILToken}.{mint}\\r\\n     */\\r\\n    function mint(address account, uint256 amount) public override _pool_ {\\r\\n        require(account != address(0), \\\"LToken: mint to 0 address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ILToken}.{burn}\\r\\n     */\\r\\n    function burn(address account, uint256 amount) public override _pool_ {\\r\\n        require(account != address(0), \\\"LToken: burn from 0 address\\\");\\r\\n        require(_balances[account] >= amount, \\\"LToken: burn amount exceeds balance\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `amount` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `amount` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `amount` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\r\\n     * `amount` is then deducted from the caller's allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ILToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol liquidity provider token interface\\r\\n */\\r\\ninterface ILToken is IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Set the pool address of this LToken\\r\\n     * pool is the only controller of this contract\\r\\n     * can only be called by current pool\\r\\n     */\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of pool\\r\\n     */\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Mint LToken to `account` of `amount`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `account` cannot be zero address\\r\\n     */\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Burn `amount` LToken of `account`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `account` cannot be zero address\\r\\n     * `account` must owns at least `amount` LToken\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../math/UnsignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 Implementation\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n\\r\\n    using UnsignedSafeMath for uint256;\\r\\n\\r\\n    string _name;\\r\\n    string _symbol;\\r\\n    uint8 _decimals = 18;\\r\\n    uint256 _totalSupply;\\r\\n\\r\\n    mapping (address => uint256) _balances;\\r\\n    mapping (address => mapping (address => uint256)) _allowances;\\r\\n\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{name}\\r\\n     */\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{symbol}\\r\\n     */\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{decimals}\\r\\n     */\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{totalSupply}\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{balanceOf}\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{allowance}\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{approve}\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        require(spender != address(0), \\\"ERC20: approve to 0 address\\\");\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{transfer}\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\r\\n        require(to != address(0), \\\"ERC20: transfer to 0 address\\\");\\r\\n        require(_balances[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20}.{transferFrom}\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\r\\n        require(to != address(0), \\\"ERC20: transferFrom to 0 address\\\");\\r\\n        if (_allowances[from][msg.sender] != uint256(-1)) {\\r\\n            require(_allowances[from][msg.sender] >= amount, \\\"ERC20: transferFrom not approved\\\");\\r\\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(amount);\\r\\n        }\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`.\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Parameters check should be carried out before calling this function.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `from` to `to`.\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Parameters check should be carried out before calling this function.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 amount) internal {\\r\\n        _balances[from] = _balances[from].sub(amount);\\r\\n        _balances[to] = _balances[to].add(amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/math/UnsignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Unsigned safe math\\r\\n */\\r\\nlibrary UnsignedSafeMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Addition of unsigned integers, counterpart to `+`\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"UnsignedSafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction of unsigned integers, counterpart to `-`\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(a >= b, \\\"UnsignedSafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication of unsigned integers, counterpart to `*`\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"UnsignedSafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of unsigned integers, counterpart to `/`\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modulo of unsigned integers, counterpart to `%`\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: modulo by zero\\\");\\r\\n        uint256 c = a % b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000243ac79261bd9308567936070df2ba3b1777495d000000000000000000000000000000000000000000000000000000000000001444657269204c697175696469747920546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000003444c540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}