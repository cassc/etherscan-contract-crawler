{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-02\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n//\r\n// SAFUU PROTOCOL COPYRIGHT (C) 2022\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeSwapRouter{\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nabstract contract Manage{\r\n\r\n    mapping(address=>bool) internal _manageGroup;\r\n    address internal _manageAddress;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        if(_manageAddress!=address(0)){\r\n            require(_manageGroup[msg.sender], \"Ownable: caller is not the owner\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function checkManage(address addr)public view returns(bool){\r\n        return _manageGroup[addr];\r\n    }\r\n\r\n    function setOperator(address addr)public onlyOwner{\r\n        if(_manageAddress==address(0)){\r\n            _manageAddress=addr;\r\n        }\r\n        _manageGroup[addr]=true;\r\n    }\r\n\r\n    function removeOperator(address addr)public onlyOwner{\r\n        require(_manageAddress!=addr);\r\n        _manageGroup[addr]=false;\r\n    }\r\n\r\n}\r\n\r\ninterface IVoucher {\r\n    function reduce(address account, uint256 amount) external;\r\n\r\n    function produce(address account, uint256 amount) external;\r\n}\r\n\r\ninterface IWorNFT {\r\n    function setPartnerReward(uint256 amount) external;\r\n    function process() external;\r\n}\r\n\r\ninterface IWorIDO {\r\n    function referrerByAddr(address owner) external view returns (address);\r\n}\r\n\r\npragma abicoder v2;\r\n\r\ncontract Token is ERC20Detailed, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n    string public _name = \"WorkOut Protocol\";\r\n    string public _symbol = \"WOR\";\r\n    uint8 public _decimals = 8;\r\n\r\n    IVoucher public _voucher;\r\n    IWorNFT public _worNFT;\r\n    IWorIDO public _worIDO;\r\n\r\n    mapping(address => bool) _isFeeExempt;\r\n    mapping(address => bool) _whiteList;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    uint256 public constant DECIMALS = 8;\r\n    uint256 public constant MAX_UINT256 = ~uint256(0);\r\n    uint8 public constant RATE_DECIMALS = 8;\r\n\r\n\r\n    uint256 public liquidityFee = 30; //3% \r\n    uint256 public marketingFee = 20;//2% \r\n    uint256 public tokenRewardFee = 70;//7% \r\n    uint256 public burnFee = 10;//1% \r\n    uint256 public foundationFee = 20;//2% \r\n    uint256 public feeDenominator = 1000;\r\n    uint256 public totalInviteAmount = 0;\r\n\r\n    AutoSwap public _autoSwap;\r\n    AutoSwap public _marketHolder;\r\n    AutoSwap public _lpHolder;\r\n    address public _marketingWallet;\r\n\r\n    uint256 public txFee = 150;\r\n\r\n    uint256 public gasForProcessing = 300000;\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    uint256 currentIndex;\r\n    mapping(address => bool) private _updated;\r\n\r\n    mapping (address => uint256) lasetSellTimes;\r\n    uint256 disabledRewardTime = 24 hours;\r\n\r\n    mapping (address => uint256) lasetRewardTimes;\r\n    uint256 claimWait = 1 hours;\r\n\r\n    mapping (address => bool) public dividendExclude;\r\n\r\n\r\n    uint256 public minimumTokenBalanceForDividends = 1000*10**DECIMALS;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public autoLiquidityReceiver;\r\n\r\n    bool public swapEnabled = true;\r\n    IPancakeSwapRouter public router;\r\n    address public pair;\r\n    address public usdtAddress;\r\n    address public rewardToken;\r\n\r\n    bool inSwap = false;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    bool inRebase = false;\r\n    modifier rebasing() {\r\n        inRebase = true;\r\n        _;\r\n        inRebase = false;\r\n    }\r\n\r\n    uint256 private TOTAL_GONS;\r\n\r\n    uint256 public MAX_SUPPLY = 210 * 10**8 * 10**DECIMALS;\r\n\r\n    bool public _autoRebase;\r\n    bool public _autoSwapBack;\r\n    bool public _autoAddLiquidity;\r\n    uint256 public _lastRebasedTime;\r\n    uint256 public _lastAddLiquidityTime;\r\n    uint256 public _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    // uint256 public pairBalance;\r\n    mapping (address => uint256) public pairBalances;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    address public freeDaoAddress;\r\n    uint256 public startTradingTime;\r\n    uint256 public autoLiquidityInterval;\r\n\r\n    uint256 public swapMinTokens = 10000 * 10**DECIMALS;\r\n    bool public dynamicSwapTokens = true;\r\n\r\n    address private _owner;\r\n\r\n    uint8 public _transferSwitch; //1 all 2 white 3 nill\r\n\r\n    constructor() ERC20Detailed(_name,_symbol, uint8(DECIMALS)) {\r\n\r\n        uint chainId; \r\n        assembly { chainId := chainid() }\r\n        \r\n        _owner = 0xf95FEe55D523Ced5E1A8Dda07479E51fDcCA4394;\r\n\r\n        if (chainId == 56) {\r\n            router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n            rewardToken = usdtAddress;\r\n        } else {\r\n            router = IPancakeSwapRouter(0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0);\r\n            usdtAddress = 0x7afd064DaE94d73ee37d19ff2D264f5A2903bBB0;\r\n            rewardToken = usdtAddress;\r\n            _owner = msg.sender;\r\n        }\r\n\r\n        _marketingWallet = 0x596334345ccb10C9Aa16Ea1466AC0D0201d5961F;\r\n        \r\n        // setOperator(msg.sender);\r\n        setTransferSwitch(2);\r\n\r\n        pair = IPancakeSwapFactory(router.factory()).createPair(\r\n            usdtAddress,\r\n            address(this)\r\n        );\r\n        uint256 _initSupply = 2100 * 10**4;\r\n        uint256 _startTradingTime = 0;\r\n\r\n        _totalSupply = _initSupply*10**DECIMALS;\r\n        TOTAL_GONS =\r\n        MAX_UINT256/1e10 - (MAX_UINT256/1e10 % _totalSupply);\r\n        autoLiquidityReceiver = address(8);\r\n\r\n         _gonBalances[_owner] = TOTAL_GONS;\r\n        \r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        //_lastRebasedTime = block.timestamp;\r\n        _autoRebase = true;\r\n        _autoSwapBack = true;\r\n        _autoAddLiquidity = true;\r\n        \r\n        setStartTradingTime(_startTradingTime);\r\n        autoLiquidityInterval = 10 minutes;\r\n\r\n        _autoSwap = new AutoSwap(address(this));\r\n        _marketHolder = new AutoSwap(address(this));\r\n        _lpHolder = new AutoSwap(address(this));\r\n\r\n        dividendExclude[address(this)] = true;\r\n        dividendExclude[address(pair)] = true;\r\n        dividendExclude[address(router)] = true;\r\n        dividendExclude[address(_marketHolder)] = true;\r\n        dividendExclude[address(_lpHolder)] = true;\r\n        dividendExclude[DEAD] = true;\r\n\r\n        _isFeeExempt[_owner] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[freeDaoAddress] = true;\r\n        _isFeeExempt[address(_marketHolder)] = true;\r\n        _isFeeExempt[address(_lpHolder)] = true;\r\n\r\n        _whiteList[msg.sender] = true;\r\n        _whiteList[_owner] = true;\r\n        _whiteList[address(this)] = true;\r\n\r\n        emit Transfer(address(0x0), _owner, _totalSupply);\r\n    }\r\n\r\n    function setVoucher(address _addr) public onlyOwner {\r\n        _voucher = IVoucher(_addr);\r\n    }\r\n\r\n    function setWorNFT(address _addr) public onlyOwner {\r\n        _worNFT = IWorNFT(_addr);\r\n    }\r\n\r\n    function setWorIDO(address _addr) public onlyOwner {\r\n        _worIDO = IWorIDO(_addr);\r\n    }\r\n\r\n    function updateDynamicSwapTokens(bool enabled) public onlyOwner {\r\n        dynamicSwapTokens = enabled;\r\n    }\r\n\r\n    function updateSwapMinTokens(uint256 value) public onlyOwner {\r\n        swapMinTokens = value;\r\n    }\r\n\r\n    function updateSwapEnabled(bool enabled) public onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateMarketingWallet(address account) public onlyOwner {\r\n        _marketingWallet = account;\r\n    }\r\n\r\n    function updateClaimWait(uint256 value) public onlyOwner {\r\n        claimWait = value;\r\n    }\r\n\r\n    function setTransferSwitch(uint8 transferSwitch_) public virtual onlyOwner {\r\n        _transferSwitch=transferSwitch_;\r\n    }\r\n\r\n    function setTXFee(uint256 _fee) public onlyOwner {\r\n        txFee = _fee;\r\n    }\r\n\r\n    function manualRebase() external{\r\n        require(shouldRebase(),\"rebase not required\");\r\n        if (inRebase) {\r\n            return;\r\n        }\r\n        rebase();\r\n    }\r\n    uint256 public _thresholdTime = 0;\r\n    uint256 public _rebaseRate = 7000;\r\n    function getRebaseRate() public view returns (uint256, bool) {\r\n        return (_rebaseRate, _thresholdTime.add(30 days) <= block.timestamp);\r\n    }\r\n\r\n    function rebase() internal rebasing {\r\n\r\n        if ( inSwap ) return;\r\n        \r\n        if (_thresholdTime == 0) {\r\n            _thresholdTime = _lastRebasedTime;\r\n        }\r\n        (uint256 rebaseRate, bool reduce) = getRebaseRate();\r\n        if (reduce) {\r\n            rebaseRate = rebaseRate.div(2);\r\n            _thresholdTime = _thresholdTime.add(30 days);\r\n            if (_rebaseRate <= 350) {\r\n                _autoRebase = false;\r\n            }\r\n        }\r\n        // uint256 rebaseRate = 70;\r\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\r\n        uint256 times = deltaTime.div(3);\r\n        uint256 epoch = times.mul(3);\r\n        \r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        \r\n        uint256 RATE_DECIMALS2 = 10**10;\r\n\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            if (gasUsed >= gasForProcessing) {\r\n                break;\r\n            }\r\n            _totalSupply = _totalSupply\r\n            .mul((RATE_DECIMALS2).add(rebaseRate))\r\n            .div(RATE_DECIMALS2);\r\n            \r\n            _lastRebasedTime = _lastRebasedTime.add(3);\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        // _lastRebasedTime = block.timestamp;//_lastRebasedTime.add(times.mul(15 minutes));\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n    }\r\n    function setStartTradingTime(uint256 _time) public onlyOwner{\r\n        startTradingTime = _time;\r\n        if (_time>0){\r\n            _lastAddLiquidityTime = _time;\r\n            if (_lastRebasedTime==0){\r\n                _lastRebasedTime = _time;\r\n            }\r\n        }\r\n    }\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    override\r\n    validRecipient(to)\r\n    returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n            msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bool senderPair,\r\n        bool recipientPair\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        if (senderPair){\r\n            // pairBalance = pairBalance.sub(amount);\r\n            pairBalances[from] = pairBalances[from].sub(amount);\r\n        }else{\r\n            _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        }\r\n        if (recipientPair){\r\n            // pairBalance = pairBalance.add(amount);\r\n            pairBalances[to] = pairBalances[to].add(amount);\r\n        }else{\r\n            _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        }\r\n        setShare(from);\r\n        setShare(to);\r\n        return true;\r\n    }\r\n\r\n    function isPair(\r\n        address sender,\r\n        address recipient,\r\n        address token\r\n    ) public view returns (bool senderPair, bool recipientPair) {\r\n        if (isContract(sender)) {\r\n            try IPancakeSwapPair(sender).token0() returns (address token0) {\r\n                if (token0 == token) {\r\n                    senderPair = true;\r\n                }\r\n            } catch {}\r\n            if (!senderPair) {\r\n                try IPancakeSwapPair(sender).token1() returns (address token1) {\r\n                    if (token1 == token) {\r\n                        senderPair = true;\r\n                    }\r\n                } catch {}\r\n            }\r\n        }\r\n\r\n        if (isContract(recipient)) {\r\n            try IPancakeSwapPair(recipient).token0() returns (address token0) {\r\n                if (token0 == token) {\r\n                    recipientPair = true;\r\n                }\r\n            } catch {}\r\n            if (!recipientPair) {\r\n                try IPancakeSwapPair(recipient).token1() returns (\r\n                    address token1\r\n                ) {\r\n                    if (token1 == token) {\r\n                        recipientPair = true;\r\n                    }\r\n                } catch {}\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n\r\n        (bool senderPair, bool recipientPair) = isPair(sender, recipient, address(this));\r\n\r\n        if(_transferSwitch==3){\r\n            require(false, \"ERC20: transfer amount exceeds balance\");\r\n        }else if(_transferSwitch==2){\r\n            if(senderPair){\r\n                require(_whiteList[recipient],\"ERC20: transfer temporarily closed\");\r\n            }else if(recipientPair){\r\n                require(_whiteList[sender],\"ERC20: transfer temporarily closed\");\r\n            }else{\r\n                require(_whiteList[msg.sender],\"ERC20: transfer temporarily closed\");\r\n            }\r\n        }\r\n\r\n        if (sender == address(this) || recipient == address(this)) {\r\n            return _basicTransfer(sender, recipient, amount, senderPair, recipientPair);\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount, senderPair, recipientPair);\r\n        }\r\n\r\n        if (_lastRebasedTime > 0 && shouldRebase()) {\r\n            rebase();\r\n        }\r\n\r\n        if (!senderPair && !recipientPair) {\r\n            if (shouldTakeFee(sender, recipient) && txFee > 0) {\r\n                uint256 lpAmount = amount.div(feeDenominator).mul(txFee);\r\n                emit Transfer(\r\n                    sender,\r\n                    address(_lpHolder),\r\n                    lpAmount\r\n                );\r\n                _basicTransfer(sender, address(_lpHolder), lpAmount, senderPair, recipientPair);   \r\n                amount = amount.sub(lpAmount);\r\n            }\r\n            emit Transfer(\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n            return _basicTransfer(sender, recipient, amount, senderPair, recipientPair);\r\n        }\r\n\r\n        if (sender != pair && swapEnabled && !inSwap) {\r\n            _swap();\r\n        } \r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (sender == pair){\r\n            _voucher.produce(recipient, amount*5);\r\n            // pairBalance = pairBalance.sub(amount);\r\n            pairBalances[sender] = pairBalances[sender].sub(amount);\r\n            \r\n        }else{\r\n            if (_isFeeExempt[sender]==false&&_isFeeExempt[recipient]==false){\r\n                //only can sell 99% of balance\r\n                if (gonAmount>=_gonBalances[sender].div(1000).mul(990)){\r\n                    gonAmount = _gonBalances[sender].div(1000).mul(990);\r\n                }\r\n            }\r\n            _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n            \r\n        }\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n        ? takeFee(sender, recipient, gonAmount, senderPair, recipientPair)\r\n        : gonAmount;\r\n\r\n        if (recipientPair){\r\n            if (shouldTakeFee(sender, recipient)) {\r\n                _voucher.reduce(sender, amount);\r\n            }\r\n            \r\n            // pairBalance = pairBalance.add(gonAmountReceived.div(_gonsPerFragment));\r\n            pairBalances[recipient] = pairBalances[recipient].add(gonAmountReceived.div(_gonsPerFragment));\r\n            lasetSellTimes[sender] = block.timestamp;\r\n            \r\n        }else{\r\n            _gonBalances[recipient] = _gonBalances[recipient].add(\r\n                gonAmountReceived\r\n            );\r\n        }\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n        \r\n        _worNFT.process();\r\n\r\n        setShare(sender);\r\n        setShare(recipient);\r\n\r\n        process(gasForProcessing);\r\n\r\n        return true;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount,\r\n        bool senderPair, \r\n        bool recipientPair\r\n    ) internal  returns (uint256) {\r\n        uint256 _totalFee = 0;\r\n        // uint256 public liquidityFee = 30; //3% \r\n        // uint256 public marketingFee = 20;//2% \r\n        // uint256 public tokenRewardFee = 70;//7% \r\n        // uint256 public burnFee = 10;//1% \r\n        // uint256 public foundationFee = 20;//2% \r\n        uint256 burnTokens = 0;\r\n        uint256 martketTokens = 0;\r\n        if (senderPair) {\r\n            _totalFee = 50;\r\n            // buy reward 5%\r\n            _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n                gonAmount.div(feeDenominator).mul(50)\r\n            );\r\n        } else if (recipientPair) {\r\n            _totalFee = 100;\r\n            // sell 15%\r\n            // sell reward 5%\r\n            _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n                gonAmount.div(feeDenominator).mul(50)\r\n            );\r\n            // marketing 3%\r\n            martketTokens = gonAmount.div(feeDenominator).mul(30);\r\n            _gonBalances[address(_marketHolder)] = _gonBalances[address(_marketHolder)].add(\r\n                martketTokens\r\n            );\r\n            emit Transfer(sender, address(_marketHolder), martketTokens.div(_gonsPerFragment));\r\n            \r\n            // burn 2%\r\n            burnTokens = gonAmount.div(feeDenominator).mul(20);\r\n            _gonBalances[address(DEAD)] = _gonBalances[address(DEAD)].add(\r\n                burnTokens\r\n            );\r\n            emit Transfer(sender, address(DEAD), burnTokens.div(_gonsPerFragment));\r\n\r\n            // nft reward 5%\r\n            _gonBalances[address(_worNFT)] = _gonBalances[address(_worNFT)].add(\r\n                gonAmount.div(feeDenominator).mul(50)\r\n            );\r\n            \r\n            _worNFT.setPartnerReward(balanceOf(address(_worNFT)));\r\n\r\n        }\r\n         \r\n        if (startTradingTime == 0) {\r\n            startTradingTime = block.timestamp;\r\n            _lastRebasedTime = block.timestamp;\r\n        }\r\n\r\n        uint256 feeAmount = gonAmount.div(feeDenominator).mul(_totalFee);\r\n\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount).sub(burnTokens).sub(martketTokens);\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbanance = IERC20(rewardToken).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n        //   uint256 amount = nowbanance.mul(balanceOf(shareholders[currentIndex])).div(totalSupply());\r\n        uint256 amount = nowbanance.div(shareholderCount);\r\n         if( amount == 0 || block.timestamp.sub(lasetRewardTimes[shareholders[currentIndex]]) < claimWait) {\r\n             currentIndex++;\r\n             iterations++;\r\n             return;\r\n         }\r\n         if(IERC20(rewardToken).balanceOf(address(this)) < amount )return;\r\n            distributeDividend(shareholders[currentIndex],amount);\r\n            \r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n   \r\n\r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n        \r\n        IERC20(rewardToken).transfer(shareholder, amount.div(2));\r\n        lasetRewardTimes[shareholder] = block.timestamp;\r\n\r\n        address taxer = shareholder;\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            taxer = _worIDO.referrerByAddr(taxer);\r\n            uint256 taxAmount = 0;\r\n            if (i == 0) {\r\n                taxAmount = amount.div(10).mul(3);\r\n            } else {\r\n                taxAmount = amount.div(5);\r\n            }\r\n            if (taxer == address(0)) {\r\n                taxer = _marketingWallet;\r\n            } else if (balanceOf(taxer) < totalSupply().div(10000)) {\r\n                taxer = _marketingWallet;\r\n            }\r\n            IERC20(rewardToken).transfer(taxer, taxAmount);\r\n        }\r\n    }\r\n    function setShare(address shareholder) private {\r\n        if (dividendExclude[shareholder]) return;\r\n           if(_updated[shareholder] ){      \r\n                if(balanceOf(shareholder) < totalSupply().div(10000)) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(balanceOf(shareholder) < totalSupply().div(10000)) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n          \r\n    }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n      }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function shareholdersLength() public view returns (uint256) {\r\n        return shareholders.length;\r\n    }\r\n    struct WorInfo {\r\n        uint256 price;\r\n        uint256 betterHoldNum;\r\n        uint256 totalSupply;\r\n        uint256 totalActive;\r\n        uint256 shareholders;\r\n        uint256 totalBurn;\r\n        uint256 totalPairW;\r\n        uint256 totalPairU;\r\n        uint256 totalUSDT;\r\n    }\r\n    uint256 public totalUSDT;\r\n    function worInfo() public view returns (WorInfo memory) {\r\n        uint256 _p = IERC20(usdtAddress).balanceOf(address(pair)) > 0 && balanceOf(address(pair)) > 0 ? IERC20(usdtAddress).balanceOf(address(pair)).div(balanceOf(address(pair))) : 0;\r\n        return WorInfo({\r\n            price: _p,\r\n            betterHoldNum: totalSupply().div(10000),\r\n            totalSupply: totalSupply(),\r\n            totalActive: totalSupply().sub(balanceOf(DEAD)),\r\n            shareholders: shareholders.length,\r\n            totalBurn: balanceOf(DEAD),\r\n            totalPairW: balanceOf(address(pair)),\r\n            totalPairU: IERC20(usdtAddress).balanceOf(address(pair)),\r\n            totalUSDT: totalUSDT\r\n        });\r\n        \r\n    }\r\n\r\n    function swapAll() public {\r\n        if (!inSwap) {\r\n            _swap();\r\n        }\r\n        \r\n    }\r\n\r\n    function _swap() internal swapping {\r\n        _swapNormal();\r\n        _swapMarket();\r\n        _swapLP();\r\n    }\r\n\r\n    function _swapNormal() internal {\r\n        uint256 tokens = balanceOf(address(this));\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        uint256 tmpTokens = balanceOf(address(this));\r\n        if (dynamicSwapTokens) {\r\n            if (balanceOf(pair).div(1000) > tokens) return;\r\n        } else {\r\n            if (tokens <= swapMinTokens) return;\r\n        }\r\n        \r\n        // uint256 public liquidityFee = 30; //3% \r\n        // uint256 public marketingFee = 20;//2% \r\n        // uint256 public tokenRewardFee = 70;//7% \r\n        // uint256 public burnFee = 10;//1% \r\n        // uint256 public foundationFee = 20;//2% \r\n\r\n\r\n        uint256 rewardTokens = tmpTokens;\r\n        swapTokensForReward(rewardTokens, address(_autoSwap));\r\n        totalUSDT = totalUSDT.add(IERC20(rewardToken).balanceOf(address(_autoSwap)));\r\n        _autoSwap.withdraw(rewardToken, address(this));\r\n    }\r\n\r\n    function _swapMarket() internal {\r\n        uint256 tokens = balanceOf(address(_marketHolder));\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        if (dynamicSwapTokens) {\r\n            if (balanceOf(pair).div(1000) > tokens) return;\r\n        } else {\r\n            if (tokens <= swapMinTokens) return;\r\n        }\r\n        _transferFrom(address(_marketHolder), address(this), tokens);\r\n        swapTokensForTokenB(tokens, address(_marketingWallet));\r\n    }\r\n\r\n    function _swapLP() internal {\r\n        uint256 tokens = balanceOf(address(_lpHolder));\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        if (dynamicSwapTokens) {\r\n            if (balanceOf(pair).div(1000) > tokens) return;\r\n        } else {\r\n            if (tokens <= swapMinTokens) return;\r\n        }\r\n        _transferFrom(address(_lpHolder), address(this), tokens);\r\n        swapAndLiquify(tokens);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        address receiver = address(this);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = IERC20(usdtAddress).balanceOf(receiver);\r\n\r\n        // swap tokens for TokenB\r\n        swapTokensForTokenB(half, address(_autoSwap)); // <- this breaks the USDT -> HATE swap when swap+liquify is triggered\r\n        _autoSwap.withdraw(usdtAddress);\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = IERC20(usdtAddress).balanceOf(receiver).sub(\r\n            initialBalance\r\n        );\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityForTokenB(otherHalf, newBalance);\r\n    }\r\n\r\n    function addLiquidityForTokenB(uint256 amountA, uint256 amountB) private {\r\n        if (amountA == 0 || amountB == 0) return;\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), amountA);\r\n        IERC20(usdtAddress).approve(address(router), amountB);\r\n        // add the liquidity\r\n        router.addLiquidity(\r\n            address(this),\r\n            address(usdtAddress),\r\n            amountA,\r\n            amountB,\r\n            0,\r\n            0,\r\n            address(_marketingWallet),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForTokenB(uint256 tokenAmount, address recipient)\r\n        private\r\n    {\r\n        if (tokenAmount == 0) return;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdtAddress);\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp+3\r\n        );\r\n    }\r\n\r\n    function swapTokensForReward(uint256 tokenAmount, address recipient)\r\n        private\r\n    {\r\n        if (tokenAmount == 0) return;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path;\r\n        if (rewardToken == usdtAddress) {\r\n            path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(rewardToken);\r\n        } else {\r\n            path = new address[](4);\r\n            path[0] = address(this);\r\n            path[1] = address(usdtAddress);\r\n            path[2] = address(router.WETH());\r\n            path[3] = address(rewardToken);\r\n        }\r\n        \r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp+3\r\n        );\r\n    }\r\n\r\n\r\n    function shouldTakeFee(address from, address to)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return\r\n       // (pair == from || pair == to) &&\r\n        !_isFeeExempt[from]&&!_isFeeExempt[to];\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n        _autoRebase &&\r\n        !inRebase &&\r\n        (_totalSupply < MAX_SUPPLY) &&\r\n        msg.sender != pair  &&\r\n        !inSwap &&\r\n        block.timestamp >= (_lastRebasedTime + 3);\r\n    }\r\n\r\n    function shouldAddLiquidity() internal view returns (bool) {\r\n        return\r\n        _autoAddLiquidity &&\r\n        !inSwap &&\r\n        msg.sender != pair &&\r\n        _lastAddLiquidityTime>0 &&\r\n        block.timestamp >= (_lastAddLiquidityTime + autoLiquidityInterval);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n        _autoSwapBack&&!inSwap &&\r\n        msg.sender != pair  ;\r\n    }\r\n\r\n    function setAutoRebase(bool _flag) external onlyOwner {\r\n        if (_flag) {\r\n            _autoRebase = _flag;\r\n            _lastRebasedTime = block.timestamp;\r\n        } else {\r\n            _autoRebase = _flag;\r\n        }\r\n    }\r\n\r\n    function setAutoSwapBack(bool _flag) external onlyOwner {\r\n\r\n        _autoSwapBack = _flag;\r\n\r\n    }\r\n    function setAutoLiquidityInterval(uint256 _minutes) external onlyOwner{\r\n        require(_minutes>0,\"invalid time\");\r\n        autoLiquidityInterval = _minutes*1 minutes;\r\n    }\r\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\r\n        if(_flag) {\r\n            _autoAddLiquidity = _flag;\r\n            _lastAddLiquidityTime = block.timestamp;\r\n        } else {\r\n            _autoAddLiquidity = _flag;\r\n        }\r\n    }\r\n\r\n    event TransferMultiple(uint256 code);\r\n\r\n    function transferMultiple(address[] memory _tos,uint256[] memory _amounts,uint256 code) public onlyOwner returns (bool) {\r\n        require(msg.sender != address(0), \"TRC20: transfer from the zero address\");\r\n        uint256 _i=0;\r\n        for(_i=0;_i<_tos.length;_i++){\r\n            (bool senderPair, bool recipientPair) = isPair(msg.sender, address(_tos[_i]), address(this));\r\n            _basicTransfer(msg.sender, _tos[_i],  _amounts[_i], senderPair, recipientPair);\r\n            emit Transfer(\r\n                msg.sender,\r\n                _tos[_i],\r\n                _amounts[_i]\r\n            );\r\n        }\r\n        emit TransferMultiple(code);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n        spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n    external\r\n    override\r\n    returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        _allowedFragments[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n        (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n            _gonsPerFragment\r\n        );\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function manualSync() external {\r\n        IPancakeSwapPair(pair).sync();\r\n    }\r\n\r\n    function setFeeExemptList(address[] memory _addrs) external onlyOwner {\r\n        for(uint256 i=0;i<_addrs.length;i++){\r\n            _isFeeExempt[_addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setWhiteList(address[] memory _addrs) external onlyOwner {\r\n        for(uint256 i=0;i<_addrs.length;i++){\r\n            _whiteList[_addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setDividendExclude(address account, bool enabled) public onlyOwner {\r\n        dividendExclude[account] = enabled;\r\n        if (enabled) {\r\n            if(_updated[account] ){      \r\n                quitShare(account);              \r\n                return;  \r\n           }\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        (bool senderPair,) = isPair(who, address(0), address(this));\r\n        if (senderPair){\r\n            return pairBalances[who];\r\n            // return pairBalance;\r\n        }else{\r\n            return _gonBalances[who].div(_gonsPerFragment);\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function withdraw(address token) public onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract AutoSwap {\r\n    address public owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function withdraw(address token) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(amount > 0 && balance >= amount, \"Illegal amount\");\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(address token, address to) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(to, balance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"TransferMultiple\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwap\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpHolder\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketHolder\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_thresholdTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferSwitch\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_voucher\",\"outputs\":[{\"internalType\":\"contract IVoucher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_worIDO\",\"outputs\":[{\"internalType\":\"contract IWorIDO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_worNFT\",\"outputs\":[{\"internalType\":\"contract IWorNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendExclude\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicSwapTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeDaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"senderPair\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"recipientPair\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minutes\",\"type\":\"uint256\"}],\"name\":\"setAutoLiquidityInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDividendExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"setFeeExemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTradingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTXFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"transferSwitch_\",\"type\":\"uint8\"}],\"name\":\"setTransferSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWorIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWorNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateDynamicSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapMinTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betterHoldNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalActive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPairW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPairU\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDT\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.WorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8ea95f75177e1cca2db3d9eb759856eec29b3f85529756f1ba2499a5fd108b4"}