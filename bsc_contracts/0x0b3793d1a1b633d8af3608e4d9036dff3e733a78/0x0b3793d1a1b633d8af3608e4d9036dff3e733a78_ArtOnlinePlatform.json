{"SourceCode": "// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ArtOnlinePlatformStorage {\r\n\r\n  uint256 internal _blockTime = 60;\r\n  string internal _uri;\r\n  uint internal unlocked = 1;\r\n\r\n  string[] internal _tokens;\r\n  uint256[] internal _items;\r\n  uint256[] internal _pools;\r\n\r\n  mapping(uint256 => string) public tokenNames;\r\n\r\n  mapping(uint256 => uint256) internal _totalMiners;\r\n  mapping(uint256 => uint256) internal _maxReward;\r\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n  // _miners[id][address] = balance\r\n  mapping(uint256 => mapping(address => uint256)) internal _miners;\r\n  mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal _bonuses;\r\n\r\n  mapping(uint256 => mapping(uint256 => uint256)) internal _mining;\r\n  mapping(uint256 => mapping(uint256 => uint256)) internal _activated;\r\n  mapping(uint256 => mapping(uint256 => address)) internal _owners;\r\n  mapping(uint256 => mapping(address => uint256)) internal _rewards;\r\n  mapping(uint256 => mapping(address => uint256)) internal _startTime;\r\n  mapping(uint256 => uint256) internal _totalSupply;\r\n  mapping(uint256 => uint256) internal _halvings;\r\n  mapping(uint256 => uint256) internal _nextHalving;\r\n  mapping(address => uint256) internal _blacklist;\r\n\r\n  mapping(uint256 => uint256) internal _cap;\r\n  mapping(uint256 => uint256) internal _activationPrice;\r\n\r\n  event AddToken(string name, uint256 id);\r\n  event AddItem(string name, uint256 id, uint256 bonus);\r\n  event AddPool(string name, uint256 id, uint256 bonus);\r\n  event Activate(address indexed account, uint256 id, uint256 tokenId);\r\n  event Deactivate(address indexed account, uint256 id, uint256 tokenId);\r\n  event ActivateItem(address indexed account, uint256 id, uint256 itemId, uint256 tokenId);\r\n  event DeactivateItem(address indexed account, uint256 id, uint256 itemId, uint256 tokenId);\r\n  event Reward(address account, uint256 id, uint256 reward);\r\n}\r\n\r\n\r\n\r\n\r\ncontract EIP712 {\r\n  bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n  uint256 private immutable _CACHED_CHAIN_ID;\r\n\r\n  bytes32 private immutable _HASHED_NAME;\r\n  bytes32 private immutable _HASHED_VERSION;\r\n  bytes32 private immutable _TYPE_HASH;\r\n\r\n  constructor(string memory name, string memory version) {\r\n    bytes32 hashedName = keccak256(bytes(name));\r\n    bytes32 hashedVersion = keccak256(bytes(version));\r\n    bytes32 typeHash = keccak256(\r\n      'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\r\n    );\r\n    _HASHED_NAME = hashedName;\r\n    _HASHED_VERSION = hashedVersion;\r\n    _CACHED_CHAIN_ID = block.chainid;\r\n    _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n    _TYPE_HASH = typeHash;\r\n  }\r\n\r\n  function _domainSeparatorV4() internal view returns (bytes32) {\r\n    if (block.chainid == _CACHED_CHAIN_ID) {\r\n      return _CACHED_DOMAIN_SEPARATOR;\r\n    } else {\r\n      return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n    }\r\n  }\r\n\r\n  function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash, bytes32 versionHash) private view returns (bytes32) {\r\n    return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n  }\r\n\r\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IArtOnline {\r\n  function mint(address to, uint256 amount) external;\r\n  function burn(address from, uint256 amount) external;\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IArtOnlineBridger {\r\n  function setArtOnline(address _address) external;\r\n  function artOnline() external view returns (address);\r\n\r\n  function setArtOnlineExchange(address _address) external;\r\n  function artOnlineExchange() external view returns (address);\r\n\r\n  function setArtOnlinePlatform(address _address) external;\r\n  function artOnlinePlatform() external view returns (address);\r\n\r\n  function setArtOnlineBlacklist(address _address) external;\r\n  function artOnlineBlacklist() external view returns (address);\r\n\r\n  function setArtOnlineMining(address _address) external;\r\n  function artOnlineMining() external view returns (address);\r\n\r\n  function setArtOnlineBridge(address _address) external;\r\n  function artOnlineBridge() external view returns (address);\r\n\r\n  function setArtOnlineFactory(address _address) external;\r\n  function artOnlineFactory() external view returns (address);\r\n\r\n  function setArtOnlineStaking(address _address) external;\r\n  function artOnlineStaking() external view returns (address);\r\n\r\n  function setArtOnlineAccess(address _address) external;\r\n  function artOnlineAccess() external view returns (address);\r\n\r\n  function setArtOnlineExchangeFactory(address _address) external;\r\n  function artOnlineExchangeFactory() external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IArtOnlineMining {\r\n  function setTax(uint256 tax_) external;\r\n  function tax() external view returns (uint256);\r\n  function mining(uint256 id, uint256 tokenId) external view returns (uint256);\r\n  function getReward(address sender, uint256 id) external;\r\n  function stakeReward(address sender, uint256 id) external returns (bytes32 stakeId);\r\n  function getRewardBatch(address sender, uint256[] memory ids) external;\r\n  function stakeRewardBatch(address sender, uint256[] memory ids) external returns (bytes32[] memory stakeIds);\r\n  function activateGPU(address sender, uint256 id, uint256 tokenId) external;\r\n  function deactivateGPU(address sender, uint256 id, uint256 tokenId) external;\r\n  function activateGPUBatch(address sender, uint256[] memory ids, uint256[] memory amounts) external;\r\n  function deactivateGPUBatch(address sender, uint256[] memory ids, uint256[] memory amounts) external;\r\n  function activateItem(address sender, uint256 id, uint256 itemId, uint256 tokenId) external;\r\n  function deactivateItem(address sender, uint256 id, uint256 itemId, uint256 tokenId) external;\r\n}\r\n\r\n\r\n\r\n\r\ninterface IArtOnlineAccess {\r\n  function isAdmin(address account) external returns (bool);\r\n  function isMinter(address account) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IArtOnlineBlacklist {\r\n  function blacklist(address account, bool blacklist_) external;\r\n  function blacklisted(address account) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SetArtOnlinePlatform {\r\n\r\n  IArtOnline internal _artOnlineInterface;\r\n  IArtOnlineBridger internal _artOnlineBridgerInterface;\r\n  IArtOnlineMining internal _artOnlineMiningInterface;\r\n  IArtOnlineAccess internal _artOnlineAccessInterface;\r\n  IArtOnlineBlacklist internal _artOnlineBlacklistInterface;\r\n\r\n  modifier isWhiteListed(address account) {\r\n    require(_artOnlineBlacklistInterface.blacklisted(account) == false, 'BLACKLISTED');\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(_artOnlineAccessInterface.isAdmin(msg.sender) == true, 'NO_PERMISSION');\r\n    _;\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(_artOnlineAccessInterface.isMinter(msg.sender) == true, 'NO_PERMISSION');\r\n    _;\r\n  }\r\n\r\n  modifier onlyExchange() {\r\n    require(msg.sender == _artOnlineBridgerInterface.artOnlineExchange(), 'NO PERMISSION');\r\n    _;\r\n  }\r\n\r\n  constructor(address artOnlineBridger_, address artOnlineAccess_) {\r\n    _artOnlineBridgerInterface = IArtOnlineBridger(artOnlineBridger_);\r\n    _artOnlineAccessInterface = IArtOnlineAccess(artOnlineAccess_);\r\n  }\r\n\r\n  function artOnlineBridgerInterface() external view returns (address) {\r\n    return address(_artOnlineBridgerInterface);\r\n  }\r\n\r\n  function artOnlineInterface() external view  returns (address) {\r\n    return address(_artOnlineInterface);\r\n  }\r\n\r\n  function artOnlineMiningInterface() external view  returns (address) {\r\n    return address(_artOnlineMiningInterface);\r\n  }\r\n\r\n  function artOnlineAccessInterface() external view  returns (address) {\r\n    return address(_artOnlineAccessInterface);\r\n  }\r\n\r\n  function setArtOnlineBridgerInterface(address _artOnlineBridger) external onlyAdmin() {\r\n    _artOnlineBridgerInterface = IArtOnlineBridger(_artOnlineBridger);\r\n    address _artOnline = _artOnlineBridgerInterface.artOnline();\r\n    address _artOnlineMining = _artOnlineBridgerInterface.artOnlineMining();\r\n    address _artOnlineStaking = _artOnlineBridgerInterface.artOnlineStaking();\r\n    address _artOnlineAccess = _artOnlineBridgerInterface.artOnlineAccess();\r\n    address _artOnlineBlacklist = _artOnlineBridgerInterface.artOnlineBlacklist();\r\n\r\n    if (address(_artOnlineInterface) != _artOnline) {\r\n      _setArtOnlineInterface(_artOnline);\r\n    }\r\n    if (address(_artOnlineMiningInterface) != _artOnlineMining) {\r\n      _setArtOnlineMiningInterface(_artOnlineMining);\r\n    }\r\n    if (address(_artOnlineAccessInterface) != _artOnlineAccess) {\r\n      _setArtOnlineAccessInterface(_artOnlineAccess);\r\n    }\r\n\r\n    if (address(_artOnlineBlacklistInterface) != _artOnlineBlacklist) {\r\n      _setArtOnlineBlacklistInterface(_artOnlineBlacklist);\r\n    }\r\n  }\r\n\r\n  function _setArtOnlineInterface(address _artOnline) internal {\r\n    _artOnlineInterface = IArtOnline(_artOnline);\r\n  }\r\n\r\n  function _setArtOnlineMiningInterface(address _artOnlineMining) internal {\r\n    _artOnlineMiningInterface = IArtOnlineMining(_artOnlineMining);\r\n  }\r\n\r\n  function _setArtOnlineAccessInterface(address _artOnlineAccess) internal {\r\n    _artOnlineAccessInterface = IArtOnlineAccess(_artOnlineAccess);\r\n  }\r\n\r\n  function _setArtOnlineBlacklistInterface(address _artOnlineBlacklist) internal {\r\n    _artOnlineBlacklistInterface = IArtOnlineBlacklist(_artOnlineBlacklist);\r\n  }\r\n\r\n  function setArtOnlineInterface(address _address) external onlyAdmin() {\r\n    _setArtOnlineInterface(_address);\r\n  }\r\n\r\n  function setArtOnlineMiningInterface(address _address) external onlyAdmin() {\r\n    _setArtOnlineMiningInterface(_address);\r\n  }\r\n\r\n  function setArtOnlineAccessInterface(address _address) external onlyAdmin() {\r\n    _setArtOnlineAccessInterface(_address);\r\n  }\r\n\r\n  function setArtOnlineBlacklistInterface(address _address) external onlyAdmin() {\r\n    _setArtOnlineBlacklistInterface(_address);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ArtOnlinePlatform is Context, ERC165, IERC1155, IERC1155MetadataURI, Pausable, EIP712, SetArtOnlinePlatform, ArtOnlinePlatformStorage {\r\n  using Address for address;\r\n\r\n  modifier lock() {\r\n    require(unlocked == 1, 'LOCKED');\r\n    unlocked = 0;\r\n    _;\r\n    unlocked = 1;\r\n  }\r\n\r\n  constructor(string memory uri_, string memory name, string memory version, address bridger, address access)\r\n    EIP712(name, version)\r\n    SetArtOnlinePlatform(bridger, access)\r\n  {\r\n    _uri = uri_;\r\n  }\r\n\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len;\r\n    while (_i != 0) {\r\n      k = k-1;\r\n      uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n      bytes1 b1 = bytes1(temp);\r\n      bstr[k] = b1;\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n  function cap(uint256 id) external view virtual returns (uint256) {\r\n    return _cap[id];\r\n  }\r\n\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n    return\r\n      interfaceId == type(IERC1155).interfaceId ||\r\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  function uri(uint256 _tokenId) public view virtual override returns (string memory) {\r\n    return string(abi.encodePacked(_uri, uint2str(_tokenId), \".json\"));\r\n  }\r\n\r\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n    require(account != address(0), \"balance query for the zero address\");\r\n    return _balances[id][account];\r\n  }\r\n\r\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n  public\r\n  view\r\n  virtual\r\n  override\r\n  returns (uint256[] memory) {\r\n    require(accounts.length == ids.length, \"accounts and ids length mismatch\");\r\n\r\n    uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n    for (uint256 i = 0; i < accounts.length; ++i) {\r\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n  function setApprovalForAll(address operator, bool approved) public virtual override {\r\n    require(_msgSender() != operator, \"setting approval status for self\");\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n    return _operatorApprovals[account][operator];\r\n  }\r\n\r\n  function safeTransferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 id,\r\n      uint256 amount,\r\n      bytes memory data\r\n  ) external virtual override isWhiteListed(from) isWhiteListed(to) {\r\n    require(\r\n        from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n        \"caller is not owner nor approved\"\r\n    );\r\n    _safeTransferFrom(from, to, id, amount, data);\r\n  }\r\n\r\n  function safeBatchTransferFrom(\r\n      address from,\r\n      address to,\r\n      uint256[] memory ids,\r\n      uint256[] memory amounts,\r\n      bytes memory data\r\n  ) external virtual override isWhiteListed(from) isWhiteListed(to) {\r\n    require(\r\n        from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n        \"transfer caller is not owner nor approved\"\r\n    );\r\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n  }\r\n\r\n  function _safeTransferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 id,\r\n      uint256 amount,\r\n      bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"transfer to the zero address\");\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n    _removeBalance(from, id, amount, 0);\r\n    _addBalance(to, id, amount, 0);\r\n\r\n    emit TransferSingle(operator, from, to, id, amount);\r\n\r\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n  }\r\n\r\n  function _safeBatchTransferFrom(\r\n      address from,\r\n      address to,\r\n      uint256[] memory ids,\r\n      uint256[] memory amounts,\r\n      bytes memory data\r\n  ) internal virtual {\r\n    require(ids.length == amounts.length, \"ids and amounts length mismatch\");\r\n    require(to != address(0), \"transfer to the zero address\");\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      _removeBalance(from, ids[i], amounts[i], 0);\r\n      _addBalance(to, ids[i], amounts[i], 0);\r\n    }\r\n\r\n    emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n  }\r\n\r\n  function totalSupply(uint256 id) public view returns (uint256) {\r\n    return _totalSupply[id];\r\n  }\r\n\r\n  function addToken(string memory name, uint256 cap_) public virtual onlyAdmin() {\r\n    uint256 id = _tokens.length;\r\n    require(bytes(tokenNames[id]).length == 0, 'token exists');\r\n    _tokens.push(name);\r\n    _cap[id] = cap_;\r\n    tokenNames[id] = name;\r\n    emit AddToken(name, id);\r\n  }\r\n\r\n  function mint(address to, uint256 id, uint256 amount) public whenNotPaused virtual onlyMinter() {\r\n    _mint(to, id, amount, \"\");\r\n  }\r\n\r\n  function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) public whenNotPaused virtual onlyMinter() {\r\n    _mintBatch(to, ids, amounts, \"\");\r\n  }\r\n\r\n  function burn(address from, uint256 id, uint256 amount) public virtual whenNotPaused onlyMinter() {\r\n    _burn(from, id, amount, \"\");\r\n  }\r\n\r\n  function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) public whenNotPaused virtual onlyMinter() {\r\n    _burnBatch(from, ids, amounts, \"\");\r\n  }\r\n\r\n  function _beforeMint(address to, uint256 id, uint256 amount) internal virtual {\r\n    require(_cap[id] >= amount, 'exceeds token cap');\r\n    require(_owners[id][amount] == address(0), 'already exists');\r\n    require(to != address(0), \"mint to the zero address\");\r\n  }\r\n\r\n  function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n    require(ids.length == amounts.length, \"ids and amounts length mismatch\");\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      _beforeMint(to, ids[i], amounts[i]);\r\n      _addBalance(to, ids[i], amounts[i], 1);\r\n    }\r\n\r\n    emit TransferBatch(operator, address(0), to, ids, amounts);\r\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n  }\r\n\r\n  function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n    _beforeMint(to, id, amount);\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n    _addBalance(to, id, amount, 1);\r\n    emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n    _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n  }\r\n\r\n  function _addBalance(address to, uint256 id, uint256 amount, uint256 mints) internal {\r\n    _balances[id][to] += 1;\r\n    if (mints == 1) {\r\n      _totalSupply[id] += 1;\r\n    }\r\n    _owners[id][amount] = to;\r\n  }\r\n\r\n  function _removeBalance(address from, uint256 id, uint256 amount, uint256 burns) internal {\r\n    require(_owners[id][amount] == from || isApprovedForAll(_owners[id][amount], _msgSender()), \"not an owner or approved\");\r\n\r\n    if (burns == 1) {\r\n      unchecked {\r\n        _totalSupply[id] -= 1;\r\n      }\r\n    }\r\n    unchecked {\r\n      _balances[id][from] -= 1;\r\n    }\r\n    _owners[id][amount] = address(0);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n      address operator,\r\n      address from,\r\n      address to,\r\n      uint256[] memory ids,\r\n      uint256[] memory amounts,\r\n      bytes memory data\r\n    ) internal virtual {\r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n        if (from != address(0)) {\r\n          uint256 id = ids[i];\r\n          uint256 amount = amounts[i];\r\n          require(_artOnlineMiningInterface.mining(id, amount) == 0, \"DEACTIVATE_FIRST\");\r\n          require(_owners[id][amount] == from || isApprovedForAll(_owners[id][amount], _msgSender()), \"not an owner or approved\");\r\n        }\r\n      }\r\n    }\r\n\r\n    function _burn(address from, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n      require(from != address(0), \"burn from the zero address\");\r\n\r\n      address operator = _msgSender();\r\n\r\n      _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n      _removeBalance(from, id, amount, 1);\r\n\r\n      emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n      require(from != address(0), \"burn from the zero address\");\r\n      require(ids.length == amounts.length, \"ids and amounts length mismatch\");\r\n\r\n      address operator = _msgSender();\r\n\r\n      _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n        _removeBalance(from, ids[i], amounts[i], 1);\r\n      }\r\n      emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n      if (to.isContract()) {\r\n        try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n            if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                revert(\"ERC1155Receiver rejected tokens\");\r\n            }\r\n        } catch Error(string memory reason) {\r\n            revert(reason);\r\n        } catch {\r\n            revert(\"transfer to non ERC1155Receiver implementer\");\r\n        }\r\n      }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n      if (to.isContract()) {\r\n        try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n            bytes4 response\r\n        ) {\r\n            if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                revert(\"ERC1155Receiver rejected tokens\");\r\n            }\r\n        } catch Error(string memory reason) {\r\n            revert(reason);\r\n        } catch {\r\n            revert(\"transfer to non ERC1155Receiver implementer\");\r\n        }\r\n      }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n      uint256[] memory array = new uint256[](1);\r\n      array[0] = element;\r\n\r\n      return array;\r\n    }\r\n\r\n    function activateGPUBatch(uint256[] memory ids, uint256[] memory tokenIds) external {\r\n      _artOnlineMiningInterface.activateGPUBatch(msg.sender, ids, tokenIds);\r\n    }\r\n\r\n    function deactivateGPUBatch(uint256[] memory ids, uint256[] memory tokenIds) external {\r\n      _artOnlineMiningInterface.deactivateGPUBatch(msg.sender, ids, tokenIds);\r\n    }\r\n\r\n    function activateGPU(uint256 id, uint256 tokenId) public {\r\n      _artOnlineMiningInterface.activateGPU(msg.sender, id, tokenId);\r\n    }\r\n\r\n    function deactivateGPU(uint256 id, uint256 tokenId) public {\r\n      _artOnlineMiningInterface.deactivateGPU(msg.sender, id, tokenId);\r\n    }\r\n\r\n    function activateItem(uint256 id, uint256 itemId, uint256 tokenId) public {\r\n      _artOnlineMiningInterface.activateItem(msg.sender, id, itemId, tokenId);\r\n    }\r\n\r\n    function deactivateItem(uint256 id, uint256 itemId, uint256 tokenId) public {\r\n      _artOnlineMiningInterface.deactivateItem(msg.sender, id, itemId, tokenId);\r\n    }\r\n\r\n    function stakeReward(uint256 id) public {\r\n      _artOnlineMiningInterface.stakeReward(msg.sender, id);\r\n    }\r\n\r\n    function getReward(uint256 id) public {\r\n      _artOnlineMiningInterface.getReward(msg.sender, id);\r\n    }\r\n\r\n    function stakeRewardBatch(uint256[] memory ids) public {\r\n      _artOnlineMiningInterface.getRewardBatch(msg.sender, ids);\r\n    }\r\n\r\n    function getRewardBatch(uint256[] memory ids) public {\r\n      _artOnlineMiningInterface.getRewardBatch(msg.sender, ids);\r\n    }\r\n\r\n    function ownerOf(uint256 id, uint256 tokenId) public view virtual returns (address) {\r\n      address owner = _owners[id][tokenId];\r\n      require(owner != address(0), \"NONEXISTENT_TOKEN\");\r\n      return owner;\r\n    }\r\n\r\n    function ownerOfBatch(uint256[] memory ids, uint256[] memory tokenIds) public view virtual returns (address[] memory) {\r\n      require(ids.length == tokenIds.length, \"ids and tokenIds length mismatch\");\r\n\r\n      address[] memory batchOwners = new address[](ids.length);\r\n\r\n      for (uint256 i = 0; i < ids.length; ++i) {\r\n        batchOwners[i] = ownerOf(ids[i], tokenIds[i]);\r\n      }\r\n\r\n      return batchOwners;\r\n    }\r\n\r\n    function tokensLength() external view virtual returns (uint256) {\r\n      return _tokens.length;\r\n    }\r\n\r\n    function tokens() external view virtual returns (string[] memory) {\r\n      return _tokens;\r\n    }\r\n\r\n    function token(uint256 id) external view virtual returns (string memory) {\r\n      return _tokens[id];\r\n    }\r\n\r\n    function mintAsset(address to, uint256 id) external onlyExchange() returns (uint256) {\r\n      uint256 tokenId = _totalSupply[id] + 1;\r\n      _mint(to, id, tokenId, \"\");\r\n      return tokenId;\r\n    }\r\n\r\n    function mintAssets(address to, uint256 id, uint256 amount) external onlyExchange() returns (uint256[] memory) {\r\n      return __mintAssets(to, id, amount);\r\n    }\r\n\r\n    function _mintAssets(address to, uint256 id, uint256 amount) external onlyAdmin() returns (uint256[] memory) {\r\n      return __mintAssets(to, id, amount);\r\n    }\r\n\r\n    function __mintAssets(address to, uint256 id, uint256 amount) internal returns (uint256[] memory) {\r\n      uint256[] memory tokenIds = new uint256[](amount);\r\n      for (uint256 i = 0; i < amount; i++) {\r\n        uint256 tokenId = _totalSupply[id] + 1;\r\n        _mint(to, id, tokenId, \"\");\r\n        tokenIds[i] = tokenId;\r\n      }\r\n      return tokenIds;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"access\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ActivateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"AddItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deactivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeactivateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mintAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"activateGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"activateGPUBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"activateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artOnlineAccessInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artOnlineBridgerInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artOnlineInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artOnlineMiningInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deactivateGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deactivateGPUBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deactivateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getRewardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mintAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerOfBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtOnlineAccessInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtOnlineBlacklistInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artOnlineBridger\",\"type\":\"address\"}],\"name\":\"setArtOnlineBridgerInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtOnlineInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtOnlineMiningInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeRewardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArtOnlinePlatform", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000001754068179b15364f7e2c217555c4cc4800dd9760000000000000000000000004f992c9c4788893b46569ddc2d4214cb3f109d62000000000000000000000000000000000000000000000000000000000000001c68747470733a2f2f6e6674732e6172746f6e6c696e652e736974652f0000000000000000000000000000000000000000000000000000000000000000000000124172744f6e6c696e6520506c6174666f726d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025632000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://317159a4af5f78ab8cd48cbfb90e66a7b3d5b0e1d924060090d314e13728cf7a"}