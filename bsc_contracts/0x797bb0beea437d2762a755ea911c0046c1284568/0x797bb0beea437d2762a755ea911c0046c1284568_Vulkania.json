{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n /**\r\n * @author Brewlabs\r\n * This treasury contract has been developed by brewlabs.info\r\n */\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ncontract Vulkania is ERC20, Ownable {\r\n\tIRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tstring private constant _name = \"Vulkania\";\r\n\tstring private constant _symbol = \"VLK\";\r\n\tuint8 private constant _decimals = 18;\r\n\r\n\tbool public isTradingEnabled;\r\n\tuint256 private _tradingPausedTimestamp;\r\n\r\n\t// initialSupply\r\n\tuint256 constant initialSupply = 40000000 * (10**18);\r\n\r\n\t// max wallet is 2.0% of initialSupply\r\n\tuint256 public maxWalletAmount = initialSupply * 200 / 10000;\r\n\t// max buy and sell tx is 0.5% of initialSupply\r\n\tuint256 public maxTxAmount = initialSupply * 50 / 10000;\r\n\r\n\tbool private _swapping;\r\n\tuint256 public minimumTokensBeforeSwap = 25000000 * (10**18);\r\n\r\n    address public liquidityWallet;\r\n\taddress public marketingWallet;\r\n\taddress public devWallet;\r\n\taddress public buyBackWallet;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\t\tbytes23 periodName;\r\n\t\tuint8 blocksInPeriod;\r\n\t\tuint256 timeInPeriod;\r\n\t\tuint256 liquidityFeeOnBuy;\r\n\t\tuint256 liquidityFeeOnSell;\r\n\t\tuint256 marketingFeeOnBuy;\r\n\t\tuint256 marketingFeeOnSell;\r\n        uint256 devFeeOnBuy;\r\n\t\tuint256 devFeeOnSell;\r\n\t\tuint256 buyBackFeeOnBuy;\r\n\t\tuint256 buyBackFeeOnSell;\r\n\t}\r\n\r\n\t// Launch taxes\r\n\tbool private _isLaunched;\r\n\tuint256 private _launchStartTimestamp;\r\n\tuint256 private _launchBlockNumber;\r\n\tCustomTaxPeriod private _launch1 = CustomTaxPeriod('launch1',3,0,10000,150,0,300,0,150,0,500);\r\n\tCustomTaxPeriod private _launch2 = CustomTaxPeriod('launch2',0,3600,150,500,300,1500,150,1000,500,500);\r\n\tCustomTaxPeriod private _launch3 = CustomTaxPeriod('launch3',0,82800,150,500,300,1000,150,1000,500,500);\r\n\r\n\t// Base taxes\r\n\tCustomTaxPeriod private _default = CustomTaxPeriod('default',0,0,150,150,300,300,150,150,500,500);\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,150,150,300,300,150,150,500,500);\r\n\r\n\t// Eruption Hour taxes\r\n\tuint256 private _eruptionHourStartTimestamp;\r\n\tCustomTaxPeriod private _eruption1 = CustomTaxPeriod('eruption1',0,3600,0,500,0,1500,0,1000,0,500);\r\n\tCustomTaxPeriod private _eruption2 = CustomTaxPeriod('eruption2',0,3600,0,500,0,1000,0,1000,0,500);\r\n\r\n\tuint256 private constant _blockedTimeLimit = 172800;\r\n    bool private _feeOnWalletTranfers;\r\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n\tmapping (address => bool) private _feeOnSelectedWalletTransfers;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) private _isBlocked;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n\tmapping (address => uint256) private _buyTimesInLaunch;\r\n\r\n\tuint256 private _liquidityFee;\r\n\tuint256 private _marketingFee;\r\n\tuint256 private _devFee;\r\n\tuint256 private _buyBackFee;\r\n\tuint256 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent WalletChange(string indexed walletIdentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent FeeChange(string indexed identifier, uint256 liquidityFee, uint256 marketingFee, uint256 devFee, uint256 buyBackFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent BlockedAccountChange(address indexed holder, bool indexed status);\r\n\tevent EruptionHourChange(bool indexed newValue, bool indexed oldValue);\r\n    event AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n    event MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n    event FeeOnWalletTransferChange(bool indexed newValue, bool indexed oldValue);\r\n\tevent FeeOnSelectedWalletTransfersChange(address indexed account, bool newValue);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    event ClaimBNBOverflow(uint256 amount);\r\n\tevent FeesApplied(uint256 liquidityFee, uint256 marketingFee, uint256 devFee, uint256 buyBackFee, uint256 totalFee);\r\n\r\n\tconstructor() ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        marketingWallet = owner();\r\n\t    devWallet = owner();\r\n\t\tbuyBackWallet = owner();\r\n\r\n\t\tIRouter _uniswapV2Router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n\t\t_mint(owner(), initialSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction _getNow() private view returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\tfunction launch() external onlyOwner {\r\n\t\t_launchStartTimestamp = _getNow();\r\n\t\t_launchBlockNumber = block.number;\r\n\t\tisTradingEnabled = true;\r\n\t\t_isLaunched = true;\r\n\t}\r\n\tfunction cancelLaunch() external onlyOwner {\r\n\t\trequire(this.isInLaunch(), \"Vulkania: Launch is not set\");\r\n\t\t_launchStartTimestamp = 0;\r\n\t\t_launchBlockNumber = 0;\r\n\t\t_isLaunched = false;\r\n\t}\r\n\tfunction activateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n\t}\r\n\tfunction deactivateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t\t_tradingPausedTimestamp = _getNow();\r\n\t}\r\n\tfunction setEruptionHour() external onlyOwner {\r\n\t\trequire(!this.isInEruptionHour(), \"Vulkania: Eruption Hour is already set\");\r\n\t\trequire(isTradingEnabled, \"Vulkania: Trading must be enabled first\");\r\n\t\trequire(!this.isInLaunch(), \"Vulkania: Must not be in launch period\");\r\n\t\temit EruptionHourChange(true, false);\r\n\t\t_eruptionHourStartTimestamp = _getNow();\r\n\t}\r\n\tfunction cancelEruptionHour() external onlyOwner {\r\n\t\trequire(this.isInEruptionHour(), \"Vulkania: Eruption Hour is not set\");\r\n\t\temit EruptionHourChange(false, true);\r\n\t\t_eruptionHourStartTimestamp = 0;\r\n\t}\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"Vulkania: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\temit AutomatedMarketMakerPairChange(pair, value);\r\n\t}\r\n    function allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n\t\t_isAllowedToTradeWhenDisabled[account] = allowed;\r\n\t\temit AllowedWhenTradingDisabledChange(account, allowed);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"Vulkania: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxTransactionLimit[account] != excluded, \"Vulkania: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxTransactionLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxTransferChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"Vulkania: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction blockAccount(address account) external onlyOwner {\r\n\t\tuint256 currentTimestamp = _getNow();\r\n\t\trequire(!_isBlocked[account], \"Vulkania: Account is already blocked\");\r\n\t\tif (_isLaunched) {\r\n\t\t\trequire((currentTimestamp - _launchStartTimestamp) < _blockedTimeLimit, \"Vulkania: Time to block accounts has expired\");\r\n\t\t}\r\n\t\t_isBlocked[account] = true;\r\n\t\temit BlockedAccountChange(account, true);\r\n\t}\r\n\tfunction unblockAccount(address account) external onlyOwner {\r\n\t\trequire(_isBlocked[account], \"Vulkania: Account is not blcoked\");\r\n\t\t_isBlocked[account] = false;\r\n\t\temit BlockedAccountChange(account, false);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newMarketingWallet, address newDevWallet, address newBuyBackWallet) external onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n\t\t\trequire(newLiquidityWallet != address(0), \"Vulkania: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n\t\tif(marketingWallet != newMarketingWallet) {\r\n\t\t\trequire(newMarketingWallet != address(0), \"Vulkania: The marketingWallet cannot be 0\");\r\n\t\t\temit WalletChange('marketingWallet', newMarketingWallet, marketingWallet);\r\n\t\t\tmarketingWallet = newMarketingWallet;\r\n\t\t}\r\n\t\tif(devWallet != newDevWallet) {\r\n\t\t\trequire(newDevWallet != address(0), \"Vulkania: The devWallet cannot be 0\");\r\n\t\t\temit WalletChange('devWallet', newDevWallet, devWallet);\r\n\t\t\tdevWallet = newDevWallet;\r\n\t\t}\r\n\t\tif(buyBackWallet != newBuyBackWallet) {\r\n\t\t\trequire(newBuyBackWallet != address(0), \"Vulkania: The buyBackWallet cannot be 0\");\r\n\t\t\temit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\n\t\t\tbuyBackWallet = newBuyBackWallet;\r\n\t\t}\r\n\t}\r\n    function setFeeOnWalletTransfers(bool value) external onlyOwner {\r\n\t\temit FeeOnWalletTransferChange(value, _feeOnWalletTranfers);\r\n\t\t_feeOnWalletTranfers = value;\r\n\t}\r\n\tfunction setFeeOnSelectedWalletTransfers(address account, bool value) external onlyOwner {\r\n\t\trequire(_feeOnSelectedWalletTransfers[account] != value, \"Vulkania: The selected wallet is already set to the value \");\r\n\t\t_feeOnSelectedWalletTransfers[account] = value;\r\n\t\temit FeeOnSelectedWalletTransfersChange(account, value);\r\n\t}\r\n\tfunction setAllFeesToZero() external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Buy', 0, 0, 0, 0);\r\n\t\t_setCustomSellTaxPeriod(_base, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Sell', 0, 0, 0, 0);\r\n\t}\r\n\tfunction resetAllFees() external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.devFeeOnBuy, _default.buyBackFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.devFeeOnBuy, _default.buyBackFeeOnBuy);\r\n\t\t_setCustomSellTaxPeriod(_base, _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.devFeeOnSell, _default.buyBackFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.devFeeOnSell, _default.buyBackFeeOnSell);\r\n\t}\r\n\t// Base Fees\r\n\tfunction setBaseFeesOnBuy(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy, uint256 _devFeeOnBuy, uint256 _buyBackFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _devFeeOnSell, uint256 _buyBackFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t}\r\n\t// eruption1 Hour Fees\r\n\tfunction setEruptionHour1BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _devFeeOnBuy, uint256 _buyBackFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_eruption1, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t\temit FeeChange('eruption1Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t}\r\n\tfunction setEruptionHour1SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _devFeeOnSell, uint256 _buyBackFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_eruption1, _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t\temit FeeChange('eruption1Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t}\r\n\t// eruption2 Hour Fees\r\n\tfunction setEruptionHour2BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _devFeeOnBuy, uint256 _buyBackFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_eruption2, _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t\temit FeeChange('eruption2Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy);\r\n\t}\r\n\tfunction setEruptionHour2SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _devFeeOnSell, uint256 _buyBackFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_eruption2, _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t\temit FeeChange('eruption2Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell);\r\n\t}\r\n\tfunction setUniswapRouter(address newAddress) external onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"Vulkania: The router already has that address\");\r\n\t\temit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IRouter(newAddress);\r\n\t}\r\n\tfunction setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxTxAmount, \"Vulkania: Cannot update maxTxAmount to same value\");\r\n\t\temit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n\t\tmaxTxAmount = newValue;\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"Vulkania: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"Vulkania: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction claimBNBOverflow() external onlyOwner {\r\n\t    uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){\r\n            emit ClaimBNBOverflow(amount);\r\n        }\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction timeSinceLastEruptionHour() external view returns(uint256){\r\n\t    uint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _eruptionHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\treturn currentTimestamp - _eruptionHourStartTimestamp;\r\n\t}\r\n\tfunction isInEruptionHour() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _eruptionHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 totalEruptionTime = _eruption1.timeInPeriod + _eruption2.timeInPeriod;\r\n\t\tuint256 timeSinceEruption = currentTimestamp - _eruptionHourStartTimestamp;\r\n\t\tif(timeSinceEruption < totalEruptionTime) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction isInLaunch() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp - _launchStartTimestamp;\r\n\t\tuint256 blocksSinceLaunch = block.number - _launchBlockNumber;\r\n\t\tuint256 totalLaunchTime =  _launch1.timeInPeriod + _launch2.timeInPeriod + _launch3.timeInPeriod;\r\n\r\n\t\tif(_isLaunched && (timeSinceLaunch < totalLaunchTime || blocksSinceLaunch < _launch1.blocksInPeriod )) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction getBaseBuyFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.marketingFeeOnBuy, _base.devFeeOnBuy, _base.buyBackFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.marketingFeeOnSell, _base.devFeeOnSell, _base.buyBackFeeOnSell);\r\n\t}\r\n\tfunction geteruption1BuyFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_eruption1.liquidityFeeOnBuy, _eruption1.marketingFeeOnBuy, _eruption1.devFeeOnBuy, _eruption1.buyBackFeeOnBuy);\r\n\t}\r\n\tfunction geteruption1SellFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_eruption1.liquidityFeeOnSell, _eruption1.marketingFeeOnSell, _eruption1.devFeeOnSell, _base.buyBackFeeOnSell);\r\n\t}\r\n\tfunction geteruption2BuyFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_eruption2.liquidityFeeOnBuy, _eruption2.marketingFeeOnBuy, _eruption2.devFeeOnBuy, _eruption2.buyBackFeeOnBuy);\r\n\t}\r\n\tfunction geteruption2SellFees() external view returns (uint256, uint256, uint256, uint256){\r\n\t\treturn (_eruption2.liquidityFeeOnSell, _eruption2.marketingFeeOnSell, _eruption2.devFeeOnSell, _base.buyBackFeeOnSell);\r\n\t}\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t\t) internal override {\r\n\t\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t\tif(amount == 0) {\r\n\t\t\t\tsuper._transfer(from, to, 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tbool isBuyFromLp = automatedMarketMakerPairs[from];\r\n\t\t\tbool isSelltoLp = automatedMarketMakerPairs[to];\r\n\t\t\tbool _isInLaunch = this.isInLaunch();\r\n\t\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\r\n\t\t    if(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n\t\t\t\trequire(isTradingEnabled, \"Vulkania: Trading is currently disabled.\");\r\n\t\t\t\trequire(!_isBlocked[to], \"Vulkania: Account is blocked\");\r\n\t\t\t\trequire(!_isBlocked[from], \"Vulkania: Account is blocked\");\r\n\t\t\t\tif (_isInLaunch && (currentTimestamp - _launchStartTimestamp) <= 300 && isBuyFromLp) {\r\n\t\t\t\t\trequire((currentTimestamp - _buyTimesInLaunch[to]) > 60, \"Vulkania: Cannot buy more than once per min in first 5min of launch\");\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n\t\t\t\t\trequire(amount <= maxTxAmount, \"Vulkania: Buy amount exceeds the maxTxBuyAmount.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isExcludedFromMaxWalletLimit[to]) {\r\n\t\t\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"Vulkania: Expected wallet amount exceeds the maxWalletAmount.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_adjustTaxes(isBuyFromLp, isSelltoLp, _isInLaunch, to, from);\r\n\t\t\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\t\t\tif (\r\n\t\t\t\tisTradingEnabled &&\r\n\t\t\t\tcanSwap &&\r\n\t\t\t\t!_swapping &&\r\n\t\t\t\t_totalFee > 0 &&\r\n\t\t\t\tautomatedMarketMakerPairs[to]\r\n\r\n\t\t\t) {\r\n\t\t\t\t_swapping = true;\r\n\t\t\t\t_swapAndLiquify();\r\n\t\t\t\t_swapping = false;\r\n\t\t\t}\r\n\r\n\t\t\tbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\t\t\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\t\t\t\ttakeFee = false;\r\n\t\t\t}\r\n\t\t\tif (takeFee && _totalFee > 0) {\r\n\t\t\t\tuint256 fee = amount * _totalFee / 10000;\r\n\t\t\t\tamount = amount - fee;\r\n\t\t\t\tsuper._transfer(from, address(this), fee);\r\n\t\t\t}\r\n\r\n\t\t\tif (_isInLaunch && (currentTimestamp - _launchStartTimestamp) <= 300) {\r\n\t\t\t\tif (to != owner() && isBuyFromLp  && (currentTimestamp - _buyTimesInLaunch[to]) > 60) {\r\n\t\t\t\t\t_buyTimesInLaunch[to] = currentTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper._transfer(from, to, amount);\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp, bool isLaunching, address to, address from) private {\r\n\t\tuint256 blocksSinceLaunch = block.number - _launchBlockNumber;\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp - _launchStartTimestamp;\r\n\t\tuint256 timeSinceEruption = currentTimestamp - _eruptionHourStartTimestamp;\r\n\t\t_liquidityFee = 0;\r\n\t\t_marketingFee = 0;\r\n        _devFee = 0;\r\n\t\t_buyBackFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n\t\t    _liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n\t\t\t_devFee = _base.devFeeOnBuy;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\r\n\t\t\tif (isLaunching) {\r\n\t\t\t\tif (_isLaunched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch1.marketingFeeOnBuy;\r\n                    _devFee = _launch1.devFeeOnBuy;\r\n\t\t\t\t\t_buyBackFee = _launch1.buyBackFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t\telse if (_isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch2.marketingFeeOnBuy;\r\n                    _devFee = _launch2.devFeeOnBuy;\r\n\t\t\t\t\t_buyBackFee = _launch2.buyBackFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch3.marketingFeeOnBuy;\r\n                    _devFee = _launch3.devFeeOnBuy;\r\n\t\t\t\t\t_buyBackFee = _launch3.buyBackFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (timeSinceEruption <= _eruption1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _eruption1.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _eruption1.marketingFeeOnBuy;\r\n                _devFee = _eruption1.devFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _eruption1.buyBackFeeOnBuy;\r\n\t\t\t}\r\n\t\t\telse if (timeSinceEruption > _eruption1.timeInPeriod && timeSinceEruption <= (_eruption1.timeInPeriod + _eruption2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _eruption2.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _eruption2.marketingFeeOnBuy;\r\n                _devFee = _eruption2.devFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _eruption2.buyBackFeeOnBuy;\r\n\t\t\t}\r\n\t\t}\r\n\t    if (isSelltoLp) {\r\n\t    \t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n            _devFee = _base.devFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\r\n\t\t\tif (isLaunching) {\r\n\t\t\t\tif (_isLaunched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch1.marketingFeeOnSell;\r\n                    _devFee = _launch1.devFeeOnSell;\r\n\t\t\t\t\t_buyBackFee = _launch1.buyBackFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t\telse if (_isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch2.marketingFeeOnSell;\r\n                    _devFee = _launch2.devFeeOnSell;\r\n\t\t\t\t\t_buyBackFee = _launch2.buyBackFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch3.marketingFeeOnSell;\r\n                    _devFee = _launch3.devFeeOnSell;\r\n\t\t\t\t\t_buyBackFee = _launch3.buyBackFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (timeSinceEruption <= _eruption1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _eruption1.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _eruption1.marketingFeeOnSell;\r\n                _devFee = _eruption1.devFeeOnSell;\r\n\t\t\t\t_buyBackFee = _eruption1.buyBackFeeOnSell;\r\n\t\t\t}\r\n\t\t\telse if (timeSinceEruption > _eruption1.timeInPeriod && timeSinceEruption <= (_eruption1.timeInPeriod + _eruption2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _eruption2.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _eruption2.marketingFeeOnSell;\r\n                _devFee = _eruption2.devFeeOnSell;\r\n\t\t\t\t_buyBackFee = _eruption2.buyBackFeeOnSell;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!isSelltoLp && !isBuyFromLp && (_feeOnSelectedWalletTransfers[from] || _feeOnSelectedWalletTransfers[to])) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n            _devFee = _base.devFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\t\t}\r\n\t\telse if (!isSelltoLp && !isBuyFromLp && !_feeOnSelectedWalletTransfers[from] && !_feeOnSelectedWalletTransfers[to] && _feeOnWalletTranfers) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n            _devFee = _base.devFeeOnBuy;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee + _marketingFee + _devFee + _buyBackFee;\r\n\t\temit FeesApplied(_liquidityFee, _marketingFee, _devFee, _buyBackFee, _totalFee);\r\n\t}\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnSell,\r\n\t\tuint256 _marketingFeeOnSell,\r\n        uint256 _devFeeOnSell,\r\n\t\tuint256 _buyBackFeeOnSell\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnSell, map.marketingFeeOnSell, 'marketingFeeOnSell', map.periodName);\r\n\t\t\tmap.marketingFeeOnSell = _marketingFeeOnSell;\r\n\t\t}\r\n        if (map.devFeeOnSell != _devFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnSell, map.devFeeOnSell, 'devFeeOnSell', map.periodName);\r\n\t\t\tmap.devFeeOnSell = _devFeeOnSell;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\n\t\t\tmap.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnBuy,\r\n\t\tuint256 _marketingFeeOnBuy,\r\n        uint256 _devFeeOnBuy,\r\n\t\tuint256 _buyBackFeeOnBuy\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnBuy, map.marketingFeeOnBuy, 'marketingFeeOnBuy', map.periodName);\r\n\t\t\tmap.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.devFeeOnBuy != _devFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnBuy, map.devFeeOnBuy, 'devFeeOnBuy', map.periodName);\r\n\t\t\tmap.devFeeOnBuy = _devFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\n\t\t\tmap.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialBNBBalance = address(this).balance;\r\n\t\tuint256 totalFeePrior = _totalFee;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n\t\tuint256 amountToSwap = contractBalance - (amountToLiquify);\r\n\r\n\t\t_swapTokensForBNB(amountToSwap);\r\n\r\n\t\tuint256 BNBBalanceAfterSwap = address(this).balance - initialBNBBalance;\r\n\t\tuint256 totalBNBFee = _totalFee - (_liquidityFee / 2);\r\n\r\n\t\tuint256 amountBNBLiquidity = BNBBalanceAfterSwap * _liquidityFee / totalBNBFee / 2;\r\n\t\tuint256 amountBNBMarketing = BNBBalanceAfterSwap * _marketingFee / totalBNBFee;\r\n        uint256 amountBNBBuyBack = BNBBalanceAfterSwap * _buyBackFee / totalBNBFee;\r\n\t\tuint256 amountBNBDev = BNBBalanceAfterSwap - (amountBNBLiquidity + amountBNBMarketing + amountBNBBuyBack);\r\n\r\n\t\t(bool success,) = address(marketingWallet).call{value: amountBNBMarketing}(\"\");\r\n\t\tif (!success) {\r\n\t\t\trevert(\"Vulkania: Error during marketingWallet transfer\");\r\n\t\t}\r\n\r\n\t\t(success,) = address(devWallet).call{value: amountBNBDev}(\"\");\r\n\t\tif (!success) {\r\n\t\t\trevert(\"Vulkania: Error during devWallet transfer\");\r\n\t\t}\r\n\r\n\t\t(success,) = address(buyBackWallet).call{value: amountBNBBuyBack}(\"\");\r\n\t\tif (!success) {\r\n\t\t\trevert(\"Vulkania: Error during buyBackWallet transfer\");\r\n\t\t}\r\n\r\n\t\tif (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwap, amountBNBLiquidity, amountToLiquify);\r\n\t\t}\r\n\r\n\t\t_totalFee = totalFeePrior;\r\n\t}\r\n\tfunction _swapTokensForBNB(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"EruptionHourChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"FeeOnSelectedWalletTransfersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"FeeOnWalletTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"walletIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelEruptionHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBNBOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geteruption1BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geteruption1SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geteruption2BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geteruption2SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInEruptionHour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllFeesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEruptionHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setEruptionHour1BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setEruptionHour1SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setEruptionHour2BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setEruptionHour2SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnSelectedWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceLastEruptionHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vulkania", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f501c7569f52c7466e3d7dec6232724fc4509e38256b10a2d41e4ca9b4ae29b"}