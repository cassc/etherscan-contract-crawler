{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    /**\r\n    * @return the address of the owner.\r\n    */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @return true if `msg.sender` is the owner of the contract.\r\n    */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeRouter02 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract StakingRewards is Ownable{\r\n    IERC20 public VOLTA_token;\r\n    IERC20 public PRP_token;        \r\n\r\n    uint256 public _minstakeamount = 100 * 10**9;\r\n    uint256 public _totalSupply;\r\n    uint256 public _feesAmount;\r\n    \r\n    uint256 public stakefee = 3;\r\n    uint256 public unstakefee = 3;\r\n    uint256 public claimfee = 3;\r\n\r\n    uint256 public prp_voltarate = 6000;\r\n\r\n    uint256 public addresscount = 0;\r\n    mapping(address => bool) public _exist;\r\n    mapping(uint256 => address) public _arr_addr;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => uint256) public _rewards;\r\n    mapping (address => bool) public _isExcludedFromFees;\r\n\r\n    address public routeraddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public VOLTAaddress = 0x38757bE34435d67E4aD2dC3abA2aaF4061EfD91B;\r\n    address public BUSDaddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public WBNBaddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public PRPaddress = 0x84aFB95ca5589674e02d227Bdd6DA7E7DCf31A3E;\r\n\r\n    address public FEESaddress = 0x6C256B2C53BaC46671fb8D91DAbedd559bc8203c;\r\n\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n\r\n    constructor() {\r\n        VOLTA_token = IERC20(VOLTAaddress);\r\n        PRP_token = IERC20(PRPaddress);\r\n    }\r\n\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(_minstakeamount <= _amount, \"Should deposit at least 1000\");\r\n\r\n        if(!_exist[msg.sender])\r\n        {\r\n            _exist[msg.sender] = true;\r\n            _arr_addr[addresscount] = msg.sender;\r\n            addresscount ++;\r\n        }\r\n\r\n\r\n        if(_isExcludedFromFees[msg.sender])\r\n        {\r\n            _totalSupply += _amount;\r\n            _balances[msg.sender] += _amount;\r\n            VOLTA_token.transferFrom(msg.sender, address(this), _amount);\r\n        }\r\n        else\r\n        {\r\n            _totalSupply += _amount * (100 - stakefee) / 100;\r\n            _feesAmount = _amount - (_amount * (100 - stakefee) / 100);\r\n            _balances[msg.sender] += _amount * (100 - stakefee) / 100;\r\n            VOLTA_token.transferFrom(msg.sender, address(this), _amount);\r\n            VOLTA_token.transfer(FEESaddress,_feesAmount);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function withdraw() public {\r\n        //require(_balances[msg.sender] >= _amount, \"Insuffcient token amount\");\r\n        _totalSupply -= _balances[msg.sender];\r\n        if(_isExcludedFromFees[msg.sender])\r\n        {\r\n         uint256 tempbalance = _balances[msg.sender];\r\n         _balances[msg.sender] = 0;\r\n         VOLTA_token.transfer(msg.sender, tempbalance);\r\n        }\r\n        else\r\n        {\r\n            uint256 tempbalance = _balances[msg.sender] * (100 - unstakefee) / 100;\r\n            uint256 tempfees = _balances[msg.sender] - tempbalance;\r\n            _balances[msg.sender] = 0;\r\n            VOLTA_token.transfer(msg.sender, tempbalance);\r\n            VOLTA_token.transfer(FEESaddress, tempfees);\r\n        }\r\n    }\r\n\r\n    function givereward(uint256 _amount) public {\r\n\r\n        PRP_token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        uint256 _realamount = _amount;\r\n        address addr;\r\n        for(uint i = 0; i < addresscount; i ++){\r\n            addr = _arr_addr[i];\r\n            _rewards[addr] += _realamount * _balances[addr] / _totalSupply;\r\n        }\r\n    }\r\n    \r\n\r\n    function claim() public {\r\n        require(_exist[msg.sender]);\r\n\r\n        address[] memory path = new address[](4);\r\n        path[0] = PRPaddress;\r\n        path[1] = WBNBaddress;\r\n        path[2] = BUSDaddress;\r\n        path[3] = VOLTAaddress;\r\n\r\n        if(_isExcludedFromFees[msg.sender])\r\n        {\r\n         _rewards[msg.sender] = _rewards[msg.sender];\r\n         IERC20(PRPaddress).approve(address(routeraddress), _rewards[msg.sender]);\r\n\r\n          IPancakeRouter02(routeraddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n             _rewards[msg.sender],\r\n             0,\r\n             path,\r\n             msg.sender,\r\n             block.timestamp\r\n          );        \r\n         _rewards[msg.sender] = 0;\r\n        }\r\n\r\n        else\r\n        {\r\n            uint256 tempclfees = _rewards[msg.sender] - (_rewards[msg.sender] * (100 - claimfee) / 100);\r\n         _rewards[msg.sender] = _rewards[msg.sender] * (100 - claimfee) / 100;\r\n    \r\n\r\n         IERC20(PRPaddress).approve(address(routeraddress), _rewards[msg.sender]);\r\n\r\n          IPancakeRouter02(routeraddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n             _rewards[msg.sender],\r\n             0,\r\n             path,\r\n             msg.sender,\r\n             block.timestamp\r\n          );\r\n\r\n          IERC20(PRPaddress).approve(address(routeraddress), tempclfees);\r\n\r\n          IPancakeRouter02(routeraddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n             tempclfees,\r\n             0,\r\n             path,\r\n             FEESaddress,\r\n             block.timestamp\r\n          );        \r\n\r\n         _rewards[msg.sender] = 0;\r\n        }\r\n    }\r\n\r\n    function setMinstake(uint256 _amount) public onlyOwner {\r\n        _minstakeamount = _amount;   \r\n    }\r\n    function staketo(address _addr, uint256 _amount, address _to) public onlyOwner {\r\n        IERC20(_addr).transfer(_to, _amount);\r\n    }\r\n    function setSTAKEfees(uint256 _amount) public onlyOwner {\r\n        require(_amount <= 8);\r\n        stakefee = _amount;   \r\n    }\r\n    function setUNSTAKEfees(uint256 _amount) public onlyOwner {\r\n        require(_amount <= 8);\r\n        unstakefee = _amount;   \r\n    }\r\n    function setCLAIMfees(uint256 _amount) public onlyOwner {\r\n        require(_amount <= 8);\r\n        claimfee = _amount;   \r\n    }\r\n    function setAddressfees(address _new) public onlyOwner {\r\n        FEESaddress = _new;   \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFees[account] = false;\r\n    }\r\n\r\n    function includeMultipleAccountsInFee(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = false;\r\n        }\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSDaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEESaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRP_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRPaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOLTA_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOLTAaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNBaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_arr_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minstakeamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addresscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"givereward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"includeMultipleAccountsInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prp_voltarate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routeraddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setAddressfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCLAIMfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSTAKEfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUNSTAKEfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"staketo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99f41cdcbfca944430b213e34719324ed2ff78fc4d010a7e302651cd31ab0818"}