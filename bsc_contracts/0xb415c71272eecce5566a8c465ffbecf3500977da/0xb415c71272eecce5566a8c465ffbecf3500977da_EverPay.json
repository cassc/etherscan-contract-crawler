{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\npragma abicoder v2;\r\n\r\ncontract EverPay {\r\n    // Event\r\n    event Submission(\r\n        bytes32 indexed id,\r\n        uint256 indexed proposalID,\r\n        bytes32 indexed everHash,\r\n        address owner,\r\n        address to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    event SubmissionFailure(\r\n        bytes32 indexed id,\r\n        uint256 indexed proposalID,\r\n        bytes32 indexed everHash,\r\n        address owner,\r\n        address to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    event Execution(\r\n        bytes32 indexed id,\r\n        uint256 indexed proposalID,\r\n        bytes32 indexed everHash,\r\n        address to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    event ExecutionFailure(\r\n        bytes32 indexed id,\r\n        uint256 indexed proposalID,\r\n        bytes32 indexed everHash,\r\n        address to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    // event Revocation(address indexed sender, bytes32 indexed id); // TODO\r\n    event Deposit(address indexed sender, uint256 value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n\r\n    event OperatorChange(address indexed operator);\r\n    event PausedChange(bool paused);\r\n    // Event End\r\n\r\n    // Storage & Struct\r\n    uint256 public chainID;\r\n    bool public paused;\r\n    address public operator;\r\n    uint256 public required;\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n\r\n    mapping(bytes32 => bool) public executed;// tx id => bool\r\n    mapping(bytes32 => mapping(address => bool)) public confirmations;\r\n    // Storage & Struct End\r\n\r\n    // Modifier\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(\r\n            ownerCount >= _required && ownerCount != 0 && _required != 0,\r\n            \"invalid_required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this), \"not_wallet\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"not_operator\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    // Modifier End\r\n\r\n    // Manage\r\n    function getPaused() public view returns (bool) {\r\n        return paused;\r\n    }\r\n\r\n    function getOperator() public view returns (address) {\r\n        return operator;\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getRequire() public view returns (uint256) {\r\n        return required;\r\n    }\r\n\r\n    function setOperator(address _operator) public onlyWallet {\r\n        require(_operator != address(0), \"null_address\");\r\n\r\n        operator = _operator;\r\n\r\n        emit OperatorChange(operator);\r\n    }\r\n\r\n    function setPaused(bool _paused) public onlyOperator {\r\n        paused = _paused;\r\n\r\n        emit PausedChange(paused);\r\n    }\r\n\r\n    function addOwner(address owner) public onlyWallet {\r\n        require(owner != address(0), \"null_address\");\r\n\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    function removeOwner(address owner) public onlyWallet {\r\n        require(isOwner[owner], \"no_owner_found\");\r\n\r\n        isOwner[owner] = false;\r\n        for (uint256 i = 0; i < owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.pop();\r\n\r\n        if (required > owners.length) {\r\n            changeRequirement(owners.length);\r\n        }\r\n\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    function replaceOwner(address owner, address newOwner) public onlyWallet {\r\n        require(isOwner[owner], \"no_owner_found\");\r\n        require(newOwner != address(0), \"null_address\");\r\n\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    // Manage End\r\n\r\n    // Base\r\n    receive() external payable {\r\n        if (msg.value != 0) emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint256 _required) validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n\r\n        owners = _owners;\r\n        required = _required;\r\n\r\n        uint256 _chainID;\r\n        assembly {\r\n            _chainID := chainid()\r\n        }\r\n        chainID = _chainID;\r\n    }\r\n\r\n    function submit(\r\n        uint256 proposalID, // ar tx id\r\n        bytes32 everHash,\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        bytes[] memory sigs\r\n    ) public whenNotPaused returns (bytes32, bool) {\r\n        bytes32 id = txHash(proposalID, everHash, to, value, data);\r\n        require(!executed[id], \"tx_executed\");\r\n\r\n        for (uint256 i = 0; i < sigs.length; i++) {\r\n            address owner = ecAddress(id, sigs[i]);\r\n            if (!isOwner[owner]) {\r\n                emit SubmissionFailure(id, proposalID, everHash, owner, to, value, data);\r\n                continue;\r\n            }\r\n\r\n            confirmations[id][owner] = true;\r\n            emit Submission(id, proposalID, everHash, owner, to, value, data);\r\n        }\r\n\r\n        if (!isConfirmed(id)) return (id, false);\r\n        executed[id] = true;\r\n\r\n        (bool ok, ) = to.call{value: value}(data);\r\n        if (ok) {\r\n            emit Execution(id, proposalID, everHash, to, value, data);\r\n        } else {\r\n            emit ExecutionFailure(id, proposalID, everHash, to, value, data);\r\n        }\r\n\r\n        return (id, true);\r\n    }\r\n\r\n    // execute multi calls\r\n    function executes(address[] memory tos, uint256[] memory values, bytes[] memory datas) payable public onlyWallet {\r\n        require(tos.length == values.length, \"invalid_length\");\r\n        require(tos.length == datas.length, \"invalid_length\");\r\n\r\n        for (uint256 i = 0; i < tos.length; i++) {\r\n          (bool ok, ) = tos[i].call{value: values[i]}(datas[i]);\r\n          require(ok, \"executed_falied\");\r\n        }\r\n    }\r\n\r\n    function isConfirmed(bytes32 id) public view returns (bool) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[id][owners[i]]) count += 1;\r\n            if (count >= required) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Base End\r\n\r\n    // Utils\r\n    function txHash(uint256 proposalID, bytes32 everHash, address to, uint256 value, bytes memory data) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(chainID, address(this), proposalID, everHash, to, value, data));\r\n    }\r\n\r\n    function ecAddress(bytes32 id, bytes memory sig)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(sig.length == 65, \"invalid_sig_len\");\r\n\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        assembly {\r\n            r := mload(add(sig, 0x20))\r\n            s := mload(add(sig, 0x40))\r\n            v := byte(0, mload(add(sig, 0x60)))\r\n        }\r\n\r\n        require(v == 27 || v == 28, \"invalid_sig_v\");\r\n\r\n        return\r\n            ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", id)\r\n                ), v, r, s\r\n            );\r\n    }\r\n    // Utils End\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmissionFailure\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"ecAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"executes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"everHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"txHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverPay", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000005c3066ffc4de627a6b9ea5c3e61e1bf2c369a1960000000000000000000000006dfe3866098805e6e9fa43d7993a71663324cbae000000000000000000000000c5d71acadd3243f027b1bf47170d26d76376d24c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e6ecba8add8213568dfc7c5e671284d125d89109ee61de95af43d185ba5b9d9"}