{"SourceCode": "// SPDX-License-Identifier: MIT                                                                               \r\n                                                    \r\npragma solidity 0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface Donation {\r\n    function invite(address addr) external view returns(address);\r\n    function getinviteCount(address _addr) view external returns(uint);\r\n    function inviteCount(address addr,uint index) external view returns(address);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context{\r\n  /**\r\n   * @dev Event to show ownership has been transferred\r\n   * @param previousOwner representing the address of the previous owner\r\n   * @param newOwner representing the address of the new owner\r\n   */\r\n  event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  // Owner of the contract\r\n  address  private _owner;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n\r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n\r\n  /**\r\n   * @dev The constructor sets the original owner of the contract to the sender account.\r\n   */\r\n    constructor()  {\r\n        setOwner(tx.origin);\r\n    }\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets a new owner address\r\n   */\r\n  function setOwner(address newOwner) internal {\r\n    _owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner(), newOwner);\r\n    setOwner(newOwner);\r\n  }\r\n\r\n\r\n\r\n    function transferWeth(address addr) public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n\r\n    function transferErctoken(address addr,address token) onlyOwner public {\r\n        IERC20 tk = IERC20(token);\r\n        tk.transfer(addr,tk.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint public startVariableBase; // start Compound interest time\r\n    mapping (address => uint) internal Basics;  // \r\n    mapping (address => bool) internal noVBAddr;  // \r\n\r\n    mapping (address => uint) internal CompoundInterestAcount;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint    private dropinproduction = 1;\r\n    uint    private DividendTime     = 15 * 60;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view virtual  returns (uint256) {\r\n        (uint balance,  )= GetBalance(account);\r\n        return balance;\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual returns(bool){\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender,recipient);\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to\r\n    ) internal virtual {\r\n        _balances[from] = isVariableBase(from);\r\n        _balances[to] = isVariableBase(to);\r\n    }\r\n\r\n\r\n\r\n    function isVariableBase(address account)  private returns(uint) {\r\n        uint balance;\r\n        uint comp;\r\n        if (noVBAddr[account] || startVariableBase == 0){\r\n            (balance,  )= GetBalance(account);\r\n            return balance;\r\n        }  \r\n        if (block.timestamp < startVariableBase + DividendTime){\r\n            return _balances[account];\r\n        }\r\n        if (block.timestamp - startVariableBase > 60 * 60 * 24 * 100 * dropinproduction){\r\n            dropinproduction++;\r\n        }                   \r\n        (comp,balance)= GetBalance(account);\r\n        Basics[account] = (block.timestamp - startVariableBase) / DividendTime; // \u91cd\u7f6e\u57fa\u7840\u590d\u5229\u6b21\u6570\r\n        if (CompoundInterestAcount[account]==0){\r\n            CompoundInterestAcount[account] = (block.timestamp - startVariableBase) / DividendTime;\r\n        }\r\n\r\n        _totalSupply += balance;\r\n        return  comp;\r\n    }\r\n\r\n    function GetBalance(address account) private view returns(uint,uint){\r\n        if (noVBAddr[account] || startVariableBase < DividendTime){\r\n            return (_balances[account],0);\r\n        }       \r\n\r\n        if (Basics[account] == 0){\r\n            return (_balances[account],0);\r\n        }\r\n        if (block.timestamp < startVariableBase + DividendTime){\r\n            return (_balances[account],0);\r\n        }\r\n        \r\n        if ((block.timestamp - startVariableBase) / DividendTime < Basics[account]){\r\n            return (_balances[account],0);\r\n        } // 0.0103% 0.0103  1000000\r\n        uint a1 = _balances[account] * ((block.timestamp - startVariableBase) / DividendTime - Basics[account])  * 103 / 1000000;\r\n        \r\n        if (dropinproduction > 1){\r\n            uint a2 = a1 *  85 ** (dropinproduction - 1) / (100 ** (dropinproduction - 1));\r\n            return (_balances[account] + a2,a2);\r\n        }\r\n\r\n        return (_balances[account] + a1,a1) ;\r\n    }\r\n    \r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to\r\n    ) internal virtual {\r\n        if (_balances[from] == 0) {\r\n            Basics[from] = 0;\r\n        }\r\n        if (_balances[to] == 0) {\r\n            Basics[to] = 0;\r\n        }        \r\n    }\r\n\r\n\r\n    function ReduceProduction() public view returns(uint){\r\n        return 60 * 60 * 24 * 100 * dropinproduction - (block.timestamp - startVariableBase);\r\n    }\r\n\r\n\r\n    function CompoundInterestTimes() public view returns(uint){\r\n        if (dropinproduction > 1){\r\n            return 10 ** 50 * 103 / 1000000 * 85 ** (dropinproduction - 1) / (100 ** (dropinproduction - 1));\r\n        }\r\n        return 10 ** 50 * 103 / 1000000;\r\n    }\r\n\r\n\r\n\r\n    function CompoundInterestCountdown() public view returns(uint){\r\n        if (startVariableBase == 0){\r\n            return 0;\r\n        }\r\n        if (block.timestamp < startVariableBase){\r\n            return 0;\r\n        }    \r\n        return 900 - (block.timestamp - startVariableBase) % 900;\r\n    }\r\n\r\n\r\n \r\n    function CompoundInterestCount(address account) public view returns(uint){\r\n        if (startVariableBase == 0){\r\n            return 0;\r\n        }        \r\n        return (block.timestamp - startVariableBase) / 900 - CompoundInterestAcount[account];\r\n    }\r\n\r\n    \r\n \r\n    function CompoundInterestAllCount() public view returns(uint){\r\n        if (startVariableBase == 0){\r\n            return 0;\r\n        }\r\n        return (block.timestamp - startVariableBase) / 900 ;\r\n    }\r\n}\r\n\r\n\r\ncontract AagentAddr is  Context{\r\n      /**\r\n   * @dev Event to show ownership has been transferred\r\n   * @param previousOwner representing the address of the previous owner\r\n   * @param newOwner representing the address of the new owner\r\n   */\r\n  event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  // Owner of the contract\r\n  address  private _owner;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n\r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n\r\n  /**\r\n   * @dev The constructor sets the original owner of the contract to the sender account.\r\n   */\r\n    constructor()  {\r\n        setOwner(_msgSender());\r\n    }\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets a new owner address\r\n   */\r\n  function setOwner(address newOwner) internal {\r\n    _owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner(), newOwner);\r\n    setOwner(newOwner);\r\n  }\r\n\r\n\r\n\r\n\r\n \r\n    function transferWeth(address addr) public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n \r\n    function transferErctoken(address addr,address token) onlyOwner public {\r\n        IERC20 tk = IERC20(token);\r\n        tk.transfer(addr,tk.balanceOf(address(this)));\r\n    }\r\n\r\n\r\n    function transferTK(address addr,address token,uint amount) onlyOwner public {\r\n        IERC20 tk = IERC20(token);\r\n        tk.transfer(addr,amount);\r\n    } \r\n}\r\n\r\n\r\ncontract BTCC is ERC20, Ownable {\r\n    address public GKacount1 =  0x22d64BeB5ba99b458d335913Ea8783a5a6034FEF;\r\n    address public GKacount2 =  0xde2644a985F4D0C9ff000C646BfeF7D0dBAd88Cd;\r\n    \r\n    IPancakeRouter02 public cakeswap = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    IPancakeFactory private factory =  IPancakeFactory(cakeswap.factory());\r\n\r\n    address public LPtoken ;\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    Donation public DonationAddr = Donation(0xd3263cbdF2bdDbc5498A7Dee8b77C538361475f7);\r\n    address[] path;\r\n\r\n    bool public entered;\r\n\r\n    mapping (address => uint) public TotalBuy;\r\n\r\n    AagentAddr public agentAddr = new AagentAddr();\r\n\r\n\r\n    uint public startswap;\r\n\r\n    bool internal locked;\r\n    modifier noReentrant(address sender,address recipient) {\r\n        require(!locked || owner() == recipient || owner() == sender || sender == address(this)  || recipient == address(this), \"No re-entrancy\");\r\n        locked = true;\r\n        _; \r\n       locked = false; \r\n   }\r\n\r\n    constructor() ERC20(\"BTCC token\", \"BTCC\") {\r\n        super._mint( owner(), 4500000 * 10 ** 18);\r\n        LPtoken = address(factory.createPair(USDT,address(this)));\r\n        noVBAddr[LPtoken] = true;\r\n\r\n        path.push(address(this));\r\n        path.push(USDT);\r\n    }\r\n\r\n\r\n\r\n\r\n    function SetstartVariableBase(uint _time) public onlyOwner {\r\n        startVariableBase = _time;\r\n    }\r\n\r\n\r\n\r\n    function Setstartswap(uint _time) public onlyOwner {\r\n        startswap = _time;\r\n    }\r\n\r\n\r\n\r\n    function SetDonation(address addr) public onlyOwner {\r\n        DonationAddr = Donation(addr);\r\n    }\r\n\r\n\r\n    function SetNoVariableBase(address addr,bool bl) public onlyOwner{\r\n        noVBAddr[addr] = bl;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public  override returns (bool) {\r\n        require(allowance(sender,_msgSender()) >= amount,\"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowance(sender,_msgSender()) - amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override  noReentrant(sender,recipient) returns(bool){\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balanceOf(sender) >= amount,\"Insufficient Balance\");\r\n\r\n        if (owner() == recipient || owner() == sender || sender == address(this)){\r\n            super._transfer(sender,recipient,amount);\r\n            return true;\r\n        }\r\n        if (sender != LPtoken && recipient != LPtoken){\r\n            GK2toUSDT();\r\n            AddLp();\r\n            super._transfer(sender,recipient,amount);\r\n            return true;\r\n        }\r\n\r\n        require(block.timestamp > startswap - 30 * 60,\"We can't trade now\");\r\n        require(startswap > 0,\"We can't trade now\");\r\n\r\n        if (sender == LPtoken){\r\n            _BugSlipPoint(sender,recipient,amount);\r\n        }\r\n        if (recipient == LPtoken){\r\n            _SellSlipPoint(sender,recipient,amount);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n  \r\n    function _BugSlipPoint(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        TotalBuy[recipient] = amount;\r\n        super._transfer(sender,recipient,amount);\r\n\r\n        bonusBTCC(recipient,amount * 5 / 100);\r\n\r\n        super._transfer(recipient,address(this),amount  * 2 / 100);\r\n\r\n        super._transfer(recipient,GKacount1,amount * 3 / 100);\r\n    }\r\n\r\n\r\n \r\n    function _SellSlipPoint(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint bonus = amount * 5 / 100;\r\n        bonusBTCC(sender,bonus);\r\n\r\n\r\n        uint adLp = amount * 2 / 100;      \r\n        super._transfer(sender,address(this),adLp);\r\n\r\n        uint GK1 = amount * 3 / 100;\r\n        super._transfer(sender,GKacount1,GK1);\r\n\r\n        super._transfer(sender,recipient,amount - bonus - GK1 - adLp);\r\n    }    \r\n\r\n\r\n\r\n\r\n    function bonusBTCC(address account,uint256 amount) private {\r\n        address b1 = DonationAddr.invite(account);\r\n        _bonusBTCC(account,b1,amount / 10); // 1\r\n        for (uint i = 0;i < 8;i++){\r\n            b1 = DonationAddr.invite(b1);\r\n            _bonusBTCC(account,b1,amount / 10); // 8 \r\n        }\r\n        address b10 = DonationAddr.invite(b1);\r\n        _bonusBTCC(account,b10,amount - amount / 10 * 9);  // 1\r\n    }\r\n\r\n\r\n\r\n    function _bonusBTCC(address account,address b1,uint amount) private {\r\n        if (b1 == address(0)){\r\n            b1 = GKacount2;\r\n        }\r\n        if (balanceOf(b1) < 500  * 10 * 8){\r\n            b1 = GKacount2;\r\n        }\r\n        super._transfer(account,b1,amount);\r\n    }\r\n\r\n\r\n\r\n    function AddLp() public {\r\n        if (balanceOf(address(this)) < 10000 * 10 ** 18){\r\n            return ;\r\n        }\r\n        IERC20(address(this)).approve(address(cakeswap),balanceOf(address(this)) * 10);\r\n        cakeswap.swapExactTokensForTokens(balanceOf(address(this)) / 2,0,path,address(agentAddr),block.timestamp);\r\n\r\n        agentAddr.transferErctoken(address(this),USDT);\r\n        agentAddr.transferWeth(GKacount2);\r\n\r\n        IERC20(address(this)).approve(address(cakeswap),balanceOf(address(this)));\r\n        IERC20(USDT).approve(address(cakeswap),IERC20(USDT).balanceOf(address(this)));\r\n\r\n        cakeswap.addLiquidity(\r\n            address(this),\r\n            USDT,\r\n            balanceOf(address(this)),\r\n            IERC20(USDT).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            address(0),\r\n            block.timestamp);\r\n\r\n        if (address(this).balance >0 ){\r\n            payable(GKacount2).transfer(address(this).balance);\r\n        }\r\n        return ;\r\n    }\r\n\r\n\r\n    function GK2toUSDT() public  {\r\n        uint amount = balanceOf(GKacount2);\r\n        if (amount > 5000 * 10 ** 18 && balanceOf(LPtoken) > 100 * 10 ** 18){\r\n            super._transfer(GKacount2,address(this),amount);\r\n            IERC20(address(this)).approve(address(cakeswap),amount * 10);\r\n            cakeswap.swapExactTokensForTokens(amount,0,path,GKacount2,block.timestamp + 1);\r\n        }\r\n    }\r\n\r\n    function GetTotalBuy10(address _addr) public view returns(uint){\r\n        return  _TotalBuy10(_addr,0,9);\r\n    }\r\n\r\n    function _TotalBuy10(address _addr,uint index,uint end) view public returns(uint){\r\n        uint _iAll;\r\n        if (index > end){\r\n            return _iAll;\r\n        }\r\n\r\n        uint inviteCount = DonationAddr.getinviteCount(_addr);\r\n        for(uint i = 0; i < inviteCount;i++){\r\n            _iAll += TotalBuy[DonationAddr.inviteCount(_addr,i)];\r\n            _iAll += _TotalBuy10(DonationAddr.inviteCount(_addr,i),index+1,end);\r\n        }\r\n        return _iAll;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AddLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompoundInterestAllCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CompoundInterestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompoundInterestCountdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompoundInterestTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DonationAddr\",\"outputs\":[{\"internalType\":\"contract Donation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GK2toUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GKacount1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GKacount2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetTotalBuy10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReduceProduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"SetNoVariableBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SetstartVariableBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Setstartswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TotalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"_TotalBuy10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentAddr\",\"outputs\":[{\"internalType\":\"contract AagentAddr\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeswap\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVariableBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferErctoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCC", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33abda041ef7e1ea86f97d8095c69ad93198e39b343b092fc1c8b61d642a95de"}