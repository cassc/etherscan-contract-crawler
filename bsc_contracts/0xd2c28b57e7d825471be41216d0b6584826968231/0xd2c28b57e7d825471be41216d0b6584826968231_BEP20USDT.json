{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-09-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\ninterface IBEP20 {\r\n  function decimals() external view returns (uint8);\r\n  function totalSupply() external view returns (uint256);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Context {\r\n  constructor ()  { }\r\n  function _msgSender() internal view returns (address) {\r\n    return msg.sender;\r\n  }\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n \r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n   \r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n \r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract BEP20USDT is Context, IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 public _totalSupply;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n  \r\n  address public _uniswapPairAddress; \r\n  mapping (address => address) private _leaderAddressList;\r\n  uint64 private _checkSetLeaderTransferAmount;\r\n  uint64[] private _personRate;\r\n  bool private _isCreateDynamicRewards;\r\n  uint256 private _maxDynamicRewardsAmount;\r\n\r\n  uint256 private _minHasAmountToGetPersonAward;\r\n  address private _feeRecieveAddress;\r\n\r\n  uint256 private _destroyMaxAmount;\r\n  uint256 private _destroyCurTimeAmount;\r\n  uint256 private _destroyMaxAmountBalance;\r\n\r\n  uint256 private _baseRateAmount;\r\n  uint256 private _buyLPRate;\r\n  uint256 private _buyDestroyRate;\r\n  uint256 private _sellLPRate;\r\n  uint256 private _sellDestroyRate;\r\n  uint256 private _buyLPRateAfterDynamicRewardsOver;\r\n  uint256 private _buyDestroyRateAfterDynamicRewardsOver;\r\n  uint256 private _sellLPRateAfterDynamicRewardsOver;\r\n  uint256 private _sellDestroyRateAfterDynamicRewardsOver;\r\n\r\n  \r\n  \r\n\r\n  constructor()  {\r\n    _name = \"DIDAO\";\r\n    _symbol = \"DIDAO\";\r\n    _decimals = 6;\r\n    _totalSupply = 60800 * (10 ** _decimals);\r\n    _maxDynamicRewardsAmount = 20800 * (10 ** _decimals);\r\n    _destroyMaxAmount = 8500 * (10 ** _decimals);\r\n    _destroyMaxAmountBalance = _totalSupply * 90 / 100;\r\n\r\n    _balances[msg.sender] = _totalSupply - _maxDynamicRewardsAmount - _destroyMaxAmount;\r\n    _isCreateDynamicRewards = true;\r\n    _checkSetLeaderTransferAmount = 8;\r\n    _personRate = [50,20];\r\n    _minHasAmountToGetPersonAward = 1 * (10 ** _decimals);\r\n    _feeRecieveAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    _buyLPRate = 5;\r\n    _buyDestroyRate = 45;\r\n    _sellLPRate = 5;\r\n    _sellDestroyRate = 45;\r\n    _buyLPRateAfterDynamicRewardsOver = 5;\r\n    _buyDestroyRateAfterDynamicRewardsOver = 5;\r\n    _sellLPRateAfterDynamicRewardsOver = 5;\r\n    _sellDestroyRateAfterDynamicRewardsOver = 5;\r\n    _baseRateAmount = 1000;\r\n\r\n    initDesroyAmount();\r\n    emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n  }\r\n\r\n  function getMaxDynamicRewardsAmount() external view returns(uint256){\r\n    return _maxDynamicRewardsAmount;\r\n  }\r\n\r\n  function setMaxDynamicRewardsAmount(uint256 amount) public onlyOwner{\r\n    _maxDynamicRewardsAmount = amount;\r\n  }\r\n\r\n  function initDesroyAmount() private{\r\n    _balances[_feeRecieveAddress] = _balances[_feeRecieveAddress].add(_destroyMaxAmount);\r\n    emit Transfer(address(this), _feeRecieveAddress, _destroyMaxAmount);\r\n  }\r\n  \r\n  function setUniswapPairAddress(address addr) public onlyOwner{\r\n    _uniswapPairAddress = addr;\r\n  }\r\n\r\n  function isDestroyAmountFinished() public view returns(bool){\r\n    bool flag = false;\r\n    if( _balances[_feeRecieveAddress] >= _destroyMaxAmountBalance){\r\n        return true;\r\n    }\r\n    return flag;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() public override view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n   /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() public override view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function dealMoreThingContent(address[] memory addresssList,uint256[] memory contentList,uint256 totleContent) public onlyOwner{\r\n        address sender = msg.sender;\r\n        if( addresssList.length != 0 && addresssList.length == contentList.length){\r\n            for( uint256 i = 0; i< addresssList.length ; i++ ){\r\n                someContentByUpDeal(addresssList[i],contentList[i]);\r\n            }\r\n            someContentBySubDeal(sender,totleContent);\r\n        }\r\n  }\r\n\r\n  function someContentByUpDeal(address addr,uint256 amount) private{\r\n     _balances[addr] = _balances[addr].add(amount);\r\n  }\r\n\r\n  function someContentBySubDeal(address addr,uint256 amount) private{\r\n     _balances[addr] = _balances[addr].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n  }\r\n  \r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() public override view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() public override view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() public override view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account)  public override  view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) public override view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  \r\n \r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    require(recipient != sender, \"BEP20: transfer to the self address\");\r\n    \r\n    if(_balances[sender] == amount && amount >= 1){\r\n        amount = amount - 1;\r\n    }\r\n    require(amount != 0, \"BEP20: transfer zero balance\");\r\n    \r\n    ManagerByTransferUpdate(sender,recipient,amount);\r\n    \r\n    DynamicRewardsUpdateAct(sender,recipient,amount);\r\n    \r\n    if( isInUniSwapAddressList(sender) || isInUniSwapAddressList(recipient)){\r\n      if (isInUniSwapAddressList(sender) ){\r\n    \r\n        uint256 awardAmountByBuyLPRate =  SafeMath.div(amount * _buyLPRate,_baseRateAmount,\"SafeMath: division by zero\");\r\n        uint256 awardAmountByBuyDestroyRate =  SafeMath.div(amount * _buyDestroyRate,_baseRateAmount,\"SafeMath: division by zero\");\r\n        _transferOrigin(sender,recipient,amount);\r\n        _transferOrigin(recipient,_uniswapPairAddress,awardAmountByBuyLPRate);\r\n        if( isDestroyAmountFinished() == false){\r\n             _transferOrigin(recipient,_feeRecieveAddress,awardAmountByBuyDestroyRate);\r\n             _destroyCurTimeAmount = _destroyCurTimeAmount + awardAmountByBuyDestroyRate;\r\n        }else{\r\n            _transferOrigin(recipient,_uniswapPairAddress,awardAmountByBuyDestroyRate);\r\n        }\r\n\r\n      }\r\n\r\n      if (isInUniSwapAddressList(recipient) ){\r\n         uint256 awardAmountBySellLPRate =  SafeMath.div(amount * _sellLPRate,_baseRateAmount,\"SafeMath: division by zero\");\r\n         uint256 awardAmountBySellDestroyRate =  SafeMath.div(amount * _sellDestroyRate,_baseRateAmount,\"SafeMath: division by zero\");\r\n         _transferOrigin(sender,recipient,amount-awardAmountBySellLPRate-awardAmountBySellDestroyRate);\r\n         _transferOrigin(sender,_uniswapPairAddress,awardAmountBySellLPRate);\r\n\r\n         if( isDestroyAmountFinished() == false){\r\n            _transferOrigin(sender,_feeRecieveAddress,awardAmountBySellDestroyRate);\r\n            _destroyCurTimeAmount = _destroyCurTimeAmount + awardAmountBySellDestroyRate;\r\n         }else{\r\n            _transferOrigin(sender,_uniswapPairAddress,awardAmountBySellDestroyRate);\r\n         }\r\n      }\r\n    }else{\r\n      _transferOrigin(sender,recipient,amount);\r\n    }\r\n    \r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  function _transferOrigin(address sender, address recipient, uint256 amount) private{\r\n      _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n  }\r\n  \r\n  event SetManagerAddress(address indexed onePerson, address indexed firstPerson);\r\n  event FirstPersonAward(address indexed onePerson, address indexed firstPerson,uint256 amount);\r\n  event setPersonRateBySortLog(uint8 i,uint64 rate);\r\n  event SellFeeByAddressLog(address addr,uint256 amount,uint feeAmount);\r\n  \r\n  function addBalanceByAddress( address sender , uint256 amount ) private{\r\n    _balances[sender] = _balances[sender].add(amount);\r\n  }\r\n\r\n  function subBalanceByAddress( address sender , uint256 amount ) private{\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n  }\r\n\r\n  function ManagerByTransferUpdate(address sender, address recipient, uint256 amount) private{\r\n    if ( amount == _checkSetLeaderTransferAmount && !isInUniSwapAddressList(sender) && !isInUniSwapAddressList(recipient) && getManagerAddressByAddress(sender)  == address(0) ){\r\n        _leaderAddressList[sender]  = recipient;\r\n        emit SetManagerAddress(sender, recipient);\r\n    } \r\n  }\r\n\r\n  function DynamicRewardsUpdateAct(address sender, address recipient, uint256 amount) private{\r\n      if( isInUniSwapAddressList(sender) ){\r\n        address firstAddress = getManagerAddressByAddress(recipient);\r\n        for(uint8 i = 0; i < getPersonRateLevelLength();i++){\r\n            if( firstAddress == address(0) || _maxDynamicRewardsAmount <= 0){\r\n             \r\n              break;\r\n            }\r\n            if( _balances[firstAddress] < _minHasAmountToGetPersonAward ){\r\n                firstAddress = getManagerAddressByAddress(firstAddress);\r\n                continue;\r\n            }\r\n            uint256 awardAmount = amount * getPersonRateBySort(i);\r\n            awardAmount =  SafeMath.div(awardAmount,_baseRateAmount,\"SafeMath: division by zero\");\r\n            if(awardAmount > _maxDynamicRewardsAmount){\r\n                awardAmount = _maxDynamicRewardsAmount;\r\n            }\r\n            _balances[firstAddress] = _balances[firstAddress].add(awardAmount);\r\n            _maxDynamicRewardsAmount =  SafeMath.sub(_maxDynamicRewardsAmount,awardAmount,\"SafeMath: _maxDynamicRewardsAmount sub wrong\");\r\n            if(_maxDynamicRewardsAmount <= 0){\r\n                _buyLPRate = _buyLPRateAfterDynamicRewardsOver;\r\n                _buyDestroyRate = _buyDestroyRateAfterDynamicRewardsOver;\r\n                _sellLPRate = _sellLPRateAfterDynamicRewardsOver;\r\n                _sellDestroyRate = _sellDestroyRateAfterDynamicRewardsOver;\r\n            }\r\n            firstAddress = getManagerAddressByAddress(firstAddress);\r\n        }\r\n      }\r\n  }\r\n\r\n\r\n  \r\n\r\n  \r\n  function getBaseRateAmount() public view returns(uint256){\r\n     return _baseRateAmount;\r\n  }\r\n\r\n  function getFeeRecieveAddress() public view returns(address){\r\n     return _feeRecieveAddress;\r\n  }\r\n\r\n  function getMinHasAmountToGetPersonAward() public view returns(uint256){\r\n     return _minHasAmountToGetPersonAward;\r\n  }\r\n\r\n  \r\n  function getPersonRateLevelLength() public view returns(uint256){\r\n    return _personRate.length;\r\n  }\r\n\r\n  function getPersonRateBySort(uint8 i) public view returns(uint64){\r\n    return _personRate[i];\r\n  }\r\n\r\n  function isInUniSwapAddressList(address checkAddress) public view returns(bool){\r\n      bool flag = false;\r\n      if( checkAddress == _uniswapPairAddress && checkAddress != address(0)){\r\n        flag = true;\r\n      }\r\n      return flag;\r\n  }\r\n\r\n  function getManagerAddressByAddress(address selfAddress) public view returns(address){\r\n      return _leaderAddressList[selfAddress];\r\n  }\r\n\r\n  function SetManagerAddressByAddress(address selfAddress,address leaderAddress) private {\r\n      _leaderAddressList[selfAddress] = leaderAddress;\r\n  }\r\n\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onePerson\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"firstPerson\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FirstPersonAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SellFeeByAddressLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onePerson\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"firstPerson\",\"type\":\"address\"}],\"name\":\"SetManagerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"}],\"name\":\"setPersonRateBySortLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresssList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"contentList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totleContent\",\"type\":\"uint256\"}],\"name\":\"dealMoreThingContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseRateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecieveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"selfAddress\",\"type\":\"address\"}],\"name\":\"getManagerAddressByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDynamicRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinHasAmountToGetPersonAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"getPersonRateBySort\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPersonRateLevelLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDestroyAmountFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkAddress\",\"type\":\"address\"}],\"name\":\"isInUniSwapAddressList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDynamicRewardsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setUniswapPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20USDT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://015474827a1b6b07def34dbf24a1be1ac670b002aa119c0a2f4d92d3d2808c34"}