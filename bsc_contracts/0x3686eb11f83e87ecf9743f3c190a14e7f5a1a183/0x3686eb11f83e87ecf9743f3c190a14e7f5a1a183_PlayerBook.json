{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n library Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/library/NameFilter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string memory _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure first two characters are not 0x\r\n        // if (_temp[0] == 0x30)\r\n        // {\r\n        //     require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n        //     require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        // }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        // bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        // for (uint256 i = 0; i < _length; i++)\r\n        // {\r\n        //     // if its uppercase A-Z\r\n        //     if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n        //     {\r\n        //         // convert to lower case a-z\r\n        //         _temp[i] = byte(uint8(_temp[i]) + 32);\r\n                \r\n        //         // we have a non number\r\n        //         if (_hasNonNumber == false)\r\n        //             _hasNonNumber = true;\r\n        //     } else {\r\n        //         require\r\n        //         (\r\n        //             // OR lowercase a-z\r\n        //             (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n        //             // or 0-9\r\n        //             (_temp[i] > 0x2f && _temp[i] < 0x3a) ||\r\n        //             _temp[i] == 0x2e || _temp[i] == 0x40,\r\n        //             \"string contains invalid characters\"\r\n        //         );\r\n                \r\n        //         // see if we have a character other than a number\r\n        //         if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n        //             _hasNonNumber = true;    \r\n        //     }\r\n        // }\r\n        \r\n        // require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint amount) external;\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContracts(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/library/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContracts(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/library/Governance.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Governance {\r\n\r\n    address public _governance;\r\n\r\n    constructor() public {\r\n        _governance = tx.origin;\r\n    }\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/interface/IPlayerBook.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPlayerBook {\r\n    function settleReward( address from,uint256 amount ) external returns (uint256);\r\n    function bindRefer( address from,string calldata  affCode )  external returns (bool);\r\n    function hasRefer(address from) external returns(bool);\r\n\r\n}\r\n\r\n// File: contracts/referral/PlayerBook.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PlayerBook is Governance, IPlayerBook {\r\n    using NameFilter for string;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n \r\n    address public rewardToken = 0x7eb35225995b097c84eF10501dD6E93A49bdFd63;   //todo\r\n    \r\n    // register pools       \r\n    mapping (address => bool) public _pools;\r\n   \r\n    // (addr => pID) returns player id by address\r\n    mapping (address => uint256) public _pIDxAddr;   \r\n    // (name => pID) returns player id by name      \r\n    mapping (bytes32 => uint256) public _pIDxName;    \r\n    // (pID => data) player data     \r\n    mapping (uint256 => Player) public _plyr;      \r\n    // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        \r\n    mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; \r\n  \r\n    // the  of refrerrals\r\n    uint256 public _totalReferReward;        \r\n    // total number of players\r\n    uint256 public _pID;      \r\n    // total register name count\r\n    uint256 public _totalRegisterCount = 0;\r\n\r\n    // the direct refer's reward rate\r\n    uint256 public _refer1RewardRate = 0; \r\n    // the second direct refer's reward rate\r\n    uint256 public _refer2RewardRate = 0; \r\n    // base rate\r\n    uint256 public _baseRate = 10000;\r\n\r\n    // base price to register a name\r\n    uint256 public _registrationBaseFee = 0;     \r\n    // register fee count step\r\n    uint256 public _registrationStep = 100;\r\n    // add base price for one step\r\n    uint256 public _stepFee = 0;     \r\n\r\n    bytes32 public _defaulRefer =\"abc\";\r\n\r\n    address payable public _teamWallet;\r\n  \r\n    // IERC20 public _bdm = IERC20(0xc4Fc08210780812D46209bF5dBB9a137d891E8FC);\r\n   \r\n    struct Player {\r\n        address addr;\r\n        bytes32 name;\r\n        uint8 nameCount;\r\n        uint256 laff;\r\n        uint256 amount;\r\n        uint256 rreward;\r\n        uint256 allReward;\r\n        uint256 lv1Count;\r\n        uint256 lv2Count;\r\n    }\r\n\r\n    event eveClaim(uint256 pID, address addr, uint256 reward, uint256 balance );\r\n    event eveBindRefer(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName);\r\n    event eveDefaultPlayer(uint256 pID, address addr, bytes32 name);      \r\n    event eveNewName(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName, uint256 balance  );\r\n    event eveSettle(uint256 pID, uint256 affID, uint256 aff_affID, uint256 affReward, uint256 aff_affReward, uint256 amount);\r\n    event eveAddPool(address addr);\r\n    event eveRemovePool(address addr);\r\n\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        _pID = 0;\r\n        _totalReferReward = 0;\r\n        _teamWallet = msg.sender;\r\n        addDefaultPlayer(_teamWallet,_defaulRefer);\r\n    }\r\n    /**\r\n     * check address\r\n     */\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * check pool\r\n     */\r\n    modifier isRegisteredPool(){\r\n        require(_pools[msg.sender],\"invalid pool address!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * contract bdm balances\r\n     */\r\n    function balances()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // only function for creating additional rewards from dust\r\n    function seize(IERC20 asset) external returns (uint256 balance) {\r\n        // require(address(_bdm) != address(asset), \"forbbiden bdm\");\r\n\r\n        balance = asset.balanceOf(address(this));\r\n        asset.safeTransfer(_teamWallet, balance);\r\n    }\r\n\r\n    // get register fee \r\n    function seizeEth() external  {\r\n        uint256 _currentBalance =  address(this).balance;\r\n        _teamWallet.transfer(_currentBalance);\r\n    }\r\n    \r\n    /**\r\n     * revert invalid transfer action\r\n     */\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    /**\r\n     * registe a pool\r\n     */\r\n    function addPool(address poolAddr)\r\n        onlyGovernance\r\n        public\r\n    {\r\n        require( !_pools[poolAddr], \"derp, that pool already been registered\");\r\n\r\n        _pools[poolAddr] = true;\r\n\r\n        emit eveAddPool(poolAddr);\r\n    }\r\n    \r\n    /**\r\n     * remove a pool\r\n     */\r\n    function removePool(address poolAddr)\r\n        onlyGovernance\r\n        public\r\n    {\r\n        require( _pools[poolAddr], \"derp, that pool must be registered\");\r\n\r\n        _pools[poolAddr] = false;\r\n\r\n        emit eveRemovePool(poolAddr);\r\n    }\r\n\r\n    /**\r\n     * resolve the refer's reward from a player \r\n     */\r\n    function settleReward(address from, uint256 amount)\r\n        isRegisteredPool()\r\n        validAddress(from)    \r\n        external\r\n        returns (uint256)\r\n    {\r\n         // set up our tx event data and determine if player is new or not\r\n        _determinePID(from);\r\n\r\n        uint256 pID = _pIDxAddr[from];\r\n        uint256 affID = _plyr[pID].laff;\r\n        \r\n        if(affID <= 0 ){\r\n            affID = _pIDxName[_defaulRefer];\r\n            _plyr[pID].laff = affID;\r\n        }\r\n\r\n        if(amount <= 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 fee = 0;\r\n\r\n        // father\r\n        uint256 affReward = (amount.mul(_refer1RewardRate)).div(_baseRate);\r\n        _plyr[affID].rreward = _plyr[affID].rreward.add(affReward);\r\n        _totalReferReward = _totalReferReward.add(affReward);\r\n        fee = fee.add(affReward);\r\n        \r\n\r\n        // grandfather\r\n        uint256 aff_affID = _plyr[affID].laff;\r\n        uint256 aff_affReward = amount.mul(_refer2RewardRate).div(_baseRate);\r\n        if(aff_affID <= 0){\r\n            aff_affID = _pIDxName[_defaulRefer];\r\n        }\r\n        _plyr[aff_affID].rreward = _plyr[aff_affID].rreward.add(aff_affReward);\r\n        _totalReferReward= _totalReferReward.add(aff_affReward);\r\n        \r\n        _plyr[pID].amount = _plyr[pID].amount.add( amount);\r\n\r\n        fee = fee.add(aff_affReward);\r\n       \r\n        emit eveSettle( pID,affID,aff_affID,affReward,aff_affReward,amount);\r\n\r\n        return fee;\r\n    }\r\n\r\n    /**\r\n     * claim all of the refer reward.\r\n     */\r\n    function claim()\r\n        public\r\n    {\r\n        address addr = msg.sender;\r\n        uint256 pid = _pIDxAddr[addr];\r\n        uint256 reward = _plyr[pid].rreward;\r\n\r\n        require(reward > 0,\"only have reward\");\r\n        \r\n        //reset\r\n        _plyr[pid].allReward = _plyr[pid].allReward.add(reward);\r\n        _plyr[pid].rreward = 0;\r\n        \r\n\r\n        IERC20(rewardToken).safeTransfer(addr,reward);\r\n        \r\n        // fire event\r\n        emit eveClaim(_pIDxAddr[addr], addr, reward, balances());\r\n    }\r\n\r\n\r\n    /**\r\n     * check name string\r\n     */\r\n    function checkIfNameValid(string memory nameStr)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        bytes32 name = nameStr.nameFilter();\r\n        if (_pIDxName[name] == 0)\r\n            return (true);\r\n        else \r\n            return (false);\r\n    }\r\n    \r\n    /**\r\n     * @dev add a default player\r\n     */\r\n    function addDefaultPlayer(address addr, bytes32 name)\r\n        private\r\n    {        \r\n        _pID++;\r\n\r\n        _plyr[_pID].addr = addr;\r\n        _plyr[_pID].name = name;\r\n        _plyr[_pID].nameCount = 1;\r\n        _pIDxAddr[addr] = _pID;\r\n        _pIDxName[name] = _pID;\r\n        _plyrNames[_pID][name] = true;\r\n\r\n        //fire event\r\n        emit eveDefaultPlayer(_pID,addr,name);        \r\n    }\r\n    \r\n    /**\r\n     * @dev set refer reward rate\r\n     */\r\n    function setReferRewardRate(uint256 refer1Rate, uint256 refer2Rate ) public  \r\n        onlyGovernance\r\n    {\r\n        _refer1RewardRate = refer1Rate;\r\n        _refer2RewardRate = refer2Rate;\r\n    }\r\n\r\n    /**\r\n     * @dev set registration step count\r\n     */\r\n    function setRegistrationStep(uint256 registrationStep) public  \r\n        onlyGovernance\r\n    {\r\n        _registrationStep = registrationStep;\r\n    }\r\n\r\n    /**\r\n     * @dev set bdm contract address\r\n     */\r\n    // function setbdmContract(address bdm)  public  \r\n    //     onlyGovernance{\r\n    //     _bdm = IERC20(bdm);\r\n    // }\r\n\r\n\r\n    /**\r\n     * @dev registers a name.  UI will always display the last name you registered.\r\n     * but you will still own all previously registered names to use as affiliate \r\n     * links.\r\n     * - must pay a registration fee.\r\n     * - name must be unique\r\n     * - names will be converted to lowercase\r\n     * - cannot be only numbers\r\n     * - cannot start with 0x \r\n     * - name must be at least 1 char\r\n     * - max length of 32 characters long\r\n     * - allowed characters: a-z, 0-9\r\n     * -functionhash- 0x921dec21 (using ID for affiliate)\r\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\r\n     * -functionhash- 0x685ffd83 (using name for affiliate)\r\n     * @param nameString players desired name\r\n     * @param affCode affiliate name of who refered you\r\n     * (this might cost a lot of gas)\r\n     */\r\n\r\n    function registerNameXName(string memory nameString, string memory affCode)\r\n        public\r\n        payable \r\n    {\r\n        \r\n        // make sure name fees paid\r\n        require (msg.value >= this.getRegistrationFee(), \"umm.....  you have to pay the name fee\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 name = NameFilter.nameFilter(nameString);\r\n        // if names already has been used\r\n        require(_pIDxName[name] == 0, \"sorry that names already taken\");\r\n\r\n        // set up address \r\n        address addr = msg.sender;\r\n         // set up our tx event data and determine if player is new or not\r\n        _determinePID(addr);\r\n        // fetch player id\r\n        uint256 pID = _pIDxAddr[addr];\r\n        // if names already has been used\r\n        require(_plyrNames[pID][name] == false, \"sorry that names already taken\");\r\n        \r\n        // add name to player profile, registry, and name book\r\n        _plyrNames[pID][name] = true;\r\n        _pIDxName[name] = pID;   \r\n        _plyr[pID].name = name;\r\n        _plyr[pID].nameCount++;\r\n\r\n        _totalRegisterCount++;\r\n\r\n\r\n        //try bind a refer\r\n        if(_plyr[pID].laff == 0){\r\n\r\n            bytes memory tempCode = bytes(affCode);\r\n            bytes32 affName = 0x0;\r\n            if (tempCode.length >= 0) {\r\n                assembly {\r\n                    affName := mload(add(tempCode, 32))\r\n                }\r\n            }\r\n\r\n            _bindRefer(addr,affName);\r\n        }\r\n        uint256 affID = _plyr[pID].laff;\r\n\r\n        // fire event\r\n        emit eveNewName(pID, addr, name, affID, _plyr[affID].addr, _plyr[affID].name, _registrationBaseFee );\r\n    }\r\n    \r\n    /**\r\n     * @dev bind a refer,if affcode invalid, use default refer\r\n     */  \r\n     \r\n       function bytes32ToString(bytes32 x) view public  returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n    \r\n     \r\n     \r\n     \r\n    function bindRefer( address from, string calldata  affCode )\r\n        isRegisteredPool()\r\n        external\r\n        returns (bool)\r\n    {\r\n\r\n        bytes memory tempCode = bytes(affCode);\r\n        bytes32 affName = 0x0;\r\n        if (tempCode.length >= 0) {\r\n            assembly {\r\n                affName := mload(add(tempCode, 32))\r\n            }\r\n        }\r\n\r\n        return _bindRefer(from, affName);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev bind a refer,if affcode invalid, use default refer\r\n     */  \r\n    function _bindRefer( address from, bytes32  name )\r\n        validAddress(msg.sender)    \r\n        validAddress(from)  \r\n        private\r\n        returns (bool)\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        _determinePID(from);\r\n\r\n        // fetch player id\r\n        uint256 pID = _pIDxAddr[from];\r\n        if( _plyr[pID].laff != 0){\r\n            return false;\r\n        }\r\n\r\n        if (_pIDxName[name] == 0){\r\n            //unregister name \r\n            name = _defaulRefer;\r\n        }\r\n      \r\n        uint256 affID = _pIDxName[name];\r\n        if( affID == pID){\r\n            affID = _pIDxName[_defaulRefer];\r\n        }\r\n       \r\n        _plyr[pID].laff = affID;\r\n\r\n        //lvcount\r\n        _plyr[affID].lv1Count++;\r\n        uint256 aff_affID = _plyr[affID].laff;\r\n        if(aff_affID != 0 ){\r\n            _plyr[aff_affID].lv2Count++;\r\n        }\r\n        \r\n        // fire event\r\n        emit eveBindRefer(pID, from, name, affID, _plyr[affID].addr, _plyr[affID].name);\r\n\r\n        return true;\r\n    }\r\n    \r\n    //\r\n    function _determinePID(address addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (_pIDxAddr[addr] == 0)\r\n        {\r\n            _pID++;\r\n            _pIDxAddr[addr] = _pID;\r\n            _plyr[_pID].addr = addr;\r\n            \r\n            // set the new player bool to true\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n    \r\n    function hasRefer(address from) \r\n        isRegisteredPool()\r\n        external \r\n        returns(bool) \r\n    {\r\n        _determinePID(from);\r\n        uint256 pID =  _pIDxAddr[from];\r\n        return (_plyr[pID].laff > 0);\r\n    }\r\n\r\n    \r\n    function getPlayerName(address from)\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        uint256 pID =  _pIDxAddr[from];\r\n        if(_pID==0){\r\n            return \"\";\r\n        }\r\n        return (_plyr[pID].name);\r\n    }\r\n\r\n    function getPlayerLaffName(address from)\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        uint256 pID =  _pIDxAddr[from];\r\n        if(_pID==0){\r\n             return \"\";\r\n        }\r\n\r\n        uint256 aID=_plyr[pID].laff;\r\n        if( aID== 0){\r\n            return \"\";\r\n        }\r\n\r\n        return (_plyr[aID].name);\r\n    }\r\n\r\n    function getPlayerInfo(address from)\r\n        external\r\n        view\r\n        returns (uint256,uint256,uint256,uint256)\r\n    {\r\n        uint256 pID = _pIDxAddr[from];\r\n        if(_pID==0){\r\n             return (0,0,0,0);\r\n        }\r\n        return (_plyr[pID].rreward,_plyr[pID].allReward,_plyr[pID].lv1Count,_plyr[pID].lv2Count);\r\n    }\r\n\r\n    function getTotalReferReward()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return(_totalReferReward);\r\n    }\r\n\r\n    function getRegistrationFee()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if( _totalRegisterCount <_registrationStep || _registrationStep == 0){\r\n            return _registrationBaseFee;\r\n        }\r\n        else{\r\n            uint256 step = _totalRegisterCount.div(_registrationStep);\r\n            return _registrationBaseFee.add(step.mul(_stepFee));\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"eveAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"affName\",\"type\":\"bytes32\"}],\"name\":\"eveBindRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"eveClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"eveDefaultPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"affName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"eveNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"eveRemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aff_affID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aff_affReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eveSettle\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_defaulRefer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_pID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pIDxAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_pIDxName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plyr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"nameCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"laff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv1Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv2Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_plyrNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_refer1RewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_refer2RewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_registrationBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_registrationStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_stepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalReferReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalRegisterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"affCode\",\"type\":\"string\"}],\"name\":\"bindRefer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerLaffName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalReferReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"hasRefer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"affCode\",\"type\":\"string\"}],\"name\":\"registerNameXName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seizeEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refer1Rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refer2Rate\",\"type\":\"uint256\"}],\"name\":\"setReferRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"registrationStep\",\"type\":\"uint256\"}],\"name\":\"setRegistrationStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"settleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlayerBook", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2a4dda4ced98f6e1de7deb4caa675c5a99f31f9135f839ae6acf0e62a80d7a27"}