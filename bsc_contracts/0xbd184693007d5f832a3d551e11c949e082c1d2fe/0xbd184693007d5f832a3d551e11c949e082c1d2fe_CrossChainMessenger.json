{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CrossChainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nimport {IRouterClient, Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {ReentrancyGuard} from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IRouter, IFactory} from \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IIntegratedInterfaces.sol\\\";\\nimport \\\"./interfaces/ICrossChainMessenger.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PrecisionConverter.sol\\\";\\n\\ncontract CrossChainMessenger is ICrossChainMessenger, CCIPReceiver, ReentrancyGuard, Ownable2StepUpgradeable, PausableUpgradeable {\\n    address public tradeRouter;\\n    IFactory public factory;\\n\\n    address[] public signers;\\n    address[] public supportedTokenList;\\n    uint64[] public supportedChains;\\n    uint256 public minSignaturesRequired;\\n\\n    mapping(uint64 => ChainInfo) public chains;\\n    mapping(address => bool) public operator;\\n    mapping(address => bool) public isSigner;\\n    mapping(bytes32 => bool) public refundedMsgIds;\\n    mapping(address => bool) public isTokenSupported;\\n    mapping(bytes32 => SourceChainTransfer) private transfersByMsgId;\\n    mapping(uint64 => mapping(bytes32 => OperationStatus)) private chainSourceMessageStatuses;\\n\\n    constructor(address _ccipRouter) CCIPReceiver(_ccipRouter) {}\\n\\n    function initialize(address _tradeRouter, uint256 _minSignaturesRequired) external initializer {\\n        require(_minSignaturesRequired > 0, \\\"CrossChainMessenger: Minimum signatures must be greater than zero\\\");\\n        __Ownable2Step_init();\\n        __Pausable_init();\\n        minSignaturesRequired = _minSignaturesRequired;\\n        tradeRouter = _tradeRouter;\\n        factory = IRouter(tradeRouter).factory();\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator[msg.sender] || msg.sender == owner(), \\\"CrossChainMessenger: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    // View and pure functions\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getTransferByMsgId(bytes32 msgId) public view override returns (SourceChainTransfer memory) {\\n        return transfersByMsgId[msgId];\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getSourceMessageStatus(uint64 chainId, bytes32 msgId) external view override returns (OperationStatus) {\\n        return chainSourceMessageStatuses[chainId][msgId];\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getRouterAddress() public view override returns (address) {\\n        return this.getRouter();\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function listSupportedTokens() external view override returns (address[] memory tokens) {\\n        return supportedTokenList;\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getSupportedChains() external view override returns (uint64[] memory) {\\n        return supportedChains;\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getAllSigners() external view override returns (address[] memory) {\\n        return signers;\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function isChainSupported(uint64 chainId) external view returns (bool) {\\n        return chains[chainId].isSupported;\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function getMessengerForChain(uint64 chainId) external view returns (address) {\\n        return chains[chainId].messenger;\\n    }\\n\\n    // External functions\\n\\n    // Suspension of contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    // Cancel suspension of contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function setTradeRouter(address _tradeRouter) external override onlyOwner {\\n        require(_tradeRouter != address(0), \\\"CrossChainMessenger: Trade router address cannot be zero\\\");\\n        tradeRouter = _tradeRouter;\\n        factory = IRouter(tradeRouter).factory();\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function setMinSignaturesRequired(uint256 newMinSignatures) external override onlyOwner {\\n        require(newMinSignatures > 0, \\\"Minimum signatures must be greater than zero\\\");\\n        minSignaturesRequired = newMinSignatures;\\n        emit MinSignaturesRequiredUpdated(newMinSignatures);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function setOperatorStatus(address addr, bool status) external override onlyOwner {\\n        require(addr != address(0), \\\"CrossChainMessenger: Address is empty\\\");\\n        operator[addr] = status;\\n        emit OperatorStatusChanged(addr, status);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function addSigner(address addr) external override onlyOwner {\\n        require(addr != address(0), \\\"CrossChainMessenger: Cannot add zero address as signer\\\");\\n        require(!isSigner[addr], \\\"CrossChainMessenger: Address is already a signer\\\");\\n\\n        isSigner[addr] = true;\\n        signers.push(addr);\\n\\n        emit SignerAdded(addr, block.timestamp);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function removeSigner(address addr) external override onlyOwner {\\n        require(isSigner[addr], \\\"Address is not a signer\\\");\\n        isSigner[addr] = false;\\n\\n        for (uint i = 0; i < signers.length; i++) {\\n            if (signers[i] == addr) {\\n                signers[i] = signers[signers.length - 1];\\n                signers.pop();\\n                break;\\n            }\\n        }\\n        emit SignerRemoved(addr, block.timestamp);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function approveToken(address token, address spender, uint256 amount) external override onlyOperator {\\n        require(token != address(0), \\\"CrossChainMessenger: Token address cannot be zero address\\\");\\n        address feeManager = factory.feeManager();\\n        require(IFeeManager(feeManager).isFeeToken(token), \\\"CrossChainMessenger: Token is not a valid fee token\\\");\\n\\n        if (spender == address(0)) {\\n            spender = getRouterAddress();\\n        }\\n\\n        IERC20(token).approve(spender, amount);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function addSupportedTokens(address[] calldata _tokensToAdd) external override onlyOperator {\\n        require(_tokensToAdd.length > 0, \\\"CrossChainMessenger: No tokens provided\\\");\\n        for (uint256 i = 0; i < _tokensToAdd.length; i++) {\\n            address tokenAddress = _tokensToAdd[i];\\n            require(tokenAddress != address(0), \\\"CrossChainMessenger: Zero token address\\\");\\n            require(!isTokenSupported[tokenAddress], \\\"CrossChainMessenger: Token already supported\\\");\\n            isTokenSupported[tokenAddress] = true;\\n            supportedTokenList.push(tokenAddress);\\n            address poolAddress = factory.getPool(tokenAddress);\\n            require(poolAddress != address(0), \\\"CrossChainMessenger: Pool not initialized\\\");\\n            IERC20(tokenAddress).approve(poolAddress, type(uint256).max);\\n        }\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function removeTokensFromSupport(address[] calldata _tokensToRemove) external override onlyOperator {\\n        require(_tokensToRemove.length > 0, \\\"CrossChainMessenger: No tokens provided\\\");\\n        require(supportedTokenList.length > 0, \\\"CrossChainMessenger: No supported tokens\\\");\\n        for (uint256 i = 0; i < _tokensToRemove.length; i++) {\\n            address tokenAddress = _tokensToRemove[i];\\n            require(tokenAddress != address(0), \\\"CrossChainMessenger: Zero token address\\\");\\n            require(isTokenSupported[tokenAddress], \\\"CrossChainMessenger: Token not supported\\\");\\n            isTokenSupported[tokenAddress] = false;\\n            for (uint256 j = 0; j < supportedTokenList.length; j++) {\\n                if (supportedTokenList[j] == tokenAddress) {\\n                    supportedTokenList[j] = supportedTokenList[supportedTokenList.length - 1];\\n                    supportedTokenList.pop();\\n                    break;\\n                }\\n            }\\n            address poolAddress = factory.getPool(tokenAddress);\\n            IERC20(tokenAddress).approve(poolAddress, 0);\\n        }\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function setChainInfo(uint64 chainId, address _messengerSender, bool isSupported) external onlyOperator {\\n        ChainInfo storage chain = chains[chainId];\\n\\n        // If the chain was previously unsupported but now is supported, add it to the supportedChains array\\n        if (!chain.isSupported && isSupported) {\\n            supportedChains.push(chainId);\\n            emit ChainSupportUpdated(chainId, true);\\n        }\\n        // If the chain was previously supported but now is no longer supported, remove it from the supportedChains array\\n        else if (chain.isSupported && !isSupported) {\\n            for (uint i = 0; i < supportedChains.length; i++) {\\n                if (supportedChains[i] == chainId) {\\n                    supportedChains[i] = supportedChains[supportedChains.length - 1];\\n                    supportedChains.pop();\\n                    break;\\n                }\\n            }\\n            emit ChainSupportUpdated(chainId, false);\\n        }\\n\\n        // Update the chain's information\\n        chain.isSupported = isSupported;\\n        if (_messengerSender != address(0) && chain.messenger != _messengerSender) {\\n            chain.messenger = _messengerSender;\\n            emit MessengerSenderUpdated(chainId, _messengerSender);\\n        }\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function processTokenTransferToChain(\\n        SourceChainTransfer memory sourceTransferDetails,\\n        uint256 crossChainFee\\n    ) external override onlyTradeRouter returns (bytes32) {\\n        bytes32 messageId = sendMessage(\\n            sourceTransferDetails.targetChainId,\\n            getTargetChainMessenger(sourceTransferDetails.targetChainId),\\n            IFeeManager(factory.feeManager()).getCrossChainGasQuota(IFeeManager.CrossChainOperationType.CrossToken),\\n            crossChainFee,\\n            abi.encode(sourceTransferDetails.details)\\n        );\\n        address poolAddress = factory.getPool(sourceTransferDetails.tokenAddress);\\n        IPool(poolAddress).processIncomingTransfer(sourceTransferDetails.details.netTransferAmount, sourceTransferDetails.totalLPFee);\\n        address platformFeeRecipient = IFeeManager(factory.feeManager()).platformFeeRecipient();\\n        TransferHelper.safeTransfer(sourceTransferDetails.tokenAddress, platformFeeRecipient, sourceTransferDetails.platformFee);\\n        transfersByMsgId[messageId] = sourceTransferDetails;\\n        return messageId;\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function withdrawFunds(address beneficiary, uint256 amount) external override onlyOwner {\\n        uint256 contractBalance = address(this).balance;\\n        require(amount <= contractBalance, \\\"CrossChainMessenger: Insufficient contract ETH balance\\\");\\n        require(amount > 0, \\\"CrossChainMessenger: Withdrawal amount must be greater than zero\\\");\\n        (bool sent, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"CrossChainMessenger: Failed to withdraw ETH\\\");\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function withdrawTokenFunds(address beneficiary, address tokenAddress, uint256 amount) external override onlyOwner {\\n        require(beneficiary != address(0), \\\"CrossChainMessenger: Beneficiary cannot be the zero address\\\");\\n        require(tokenAddress != address(0), \\\"CrossChainMessenger: Token cannot be the zero address\\\");\\n        require(amount > 0, \\\"CrossChainMessenger: Withdrawal amount must be greater than zero\\\");\\n\\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\\n        require(tokenBalance >= amount, \\\"CrossChainMessenger: Insufficient balance for withdrawal\\\");\\n\\n        TransferHelper.safeTransfer(tokenAddress, beneficiary, amount);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function distributePoolFees(address token, uint256 feeAmount) external override onlyOperator {\\n        address poolAddress = factory.getPool(token);\\n        require(poolAddress != address(0), \\\"CrossChainMessenger: Pool not initialized\\\");\\n        require(feeAmount > 0, \\\"CrossChainMessenger: Fee amount must be greater than zero\\\");\\n\\n        IPool(poolAddress).distributeFees(feeAmount);\\n    }\\n\\n    /// @inheritdoc ICrossChainMessenger\\n    function processPoolRefund(uint64 targetChainId, bytes32 messageId, bytes[] memory sigDatas, uint256 deadline) external override {\\n        require(block.timestamp <= deadline, \\\"CrossChainMessenger: Deadline has passed\\\");\\n        require(!refundedMsgIds[messageId], \\\"CrossChainMessenger: Message already refunded\\\");\\n        require(sigDatas.length >= minSignaturesRequired, \\\"CrossChainMessenger: Not enough signatures\\\");\\n\\n        SourceChainTransfer memory detail = getTransferByMsgId(messageId);\\n        require(detail.refundAddress == msg.sender, \\\"CrossChainMessenger: Unauthorized\\\");\\n\\n        bytes32 messageHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(targetChainId, messageId, address(this))));\\n        address[] memory encounteredSigners = new address[](sigDatas.length);\\n        uint256 uniqueSignaturesCount = 0;\\n\\n        for (uint256 i = 0; i < sigDatas.length; i++) {\\n            address recoveredAddress = ECDSA.recover(messageHash, sigDatas[i]);\\n            require(recoveredAddress != address(0), \\\"CrossChainMessenger: Invalid signature\\\");\\n            require(isSigner[recoveredAddress], \\\"CrossChainMessenger: Not is signer\\\");\\n            bool isUnique = true;\\n            for (uint256 j = 0; j < uniqueSignaturesCount; j++) {\\n                if (encounteredSigners[j] == recoveredAddress) {\\n                    isUnique = false;\\n                    break;\\n                }\\n            }\\n            if (isUnique) {\\n                encounteredSigners[uniqueSignaturesCount] = recoveredAddress;\\n                uniqueSignaturesCount++;\\n            }\\n        }\\n\\n        require(uniqueSignaturesCount >= minSignaturesRequired, \\\"CrossChainMessenger: Not enough unique signatures\\\");\\n        refundedMsgIds[messageId] = true;\\n\\n        address poolAddress = factory.getPool(detail.tokenAddress);\\n        uint256 refundAmount = detail.details.netTransferAmount + detail.platformFee + detail.totalLPFee;\\n        IPool(poolAddress).processRefund(msg.sender, refundAmount);\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Retrieves the messenger address for the target chain.\\n     * @dev This method accesses the factory contract to get the messenger address for the target chain. It will fail if not found.\\n     * @param targetChainId The ID of the target chain.\\n     * @return The messenger address of the target chain.\\n     */\\n    function getTargetChainMessenger(uint64 targetChainId) internal view returns (address) {\\n        IMessengerRegistry messengerRegistry = IMessengerRegistry(factory.messengerRegistry());\\n        address targetMessageAddr = messengerRegistry.getMessengerForChain(targetChainId);\\n        require(targetMessageAddr != address(0), \\\"Router: Target chain not supported\\\");\\n        return targetMessageAddr;\\n    }\\n\\n    /// @notice Sends a message to the target chain\\n    /// @param targetChainId The ID of the target chain\\n    /// @param targetMessageAddr The message processing address on the target chain\\n    /// @param gasLimit The Gas limit set for this transaction\\n    /// @param fees The transaction fees\\n    /// @param data The accompanying data or message\\n    /// @return messageId The unique identifier of the sent message\\n    function sendMessage(\\n        uint64 targetChainId,\\n        address targetMessageAddr,\\n        uint256 gasLimit,\\n        uint256 fees,\\n        bytes memory data\\n    ) internal whenNotPaused nonReentrant returns (bytes32 messageId) {\\n        address feeToken = IFeeManager(factory.feeManager()).defaultFeeToken();\\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\n            receiver: abi.encode(targetMessageAddr),\\n            data: data,\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: Client._argsToBytes(Client.EVMExtraArgsV1({gasLimit: gasLimit, strict: false})),\\n            feeToken: feeToken\\n        });\\n        IRouterClient router = IRouterClient(getRouterAddress());\\n        if (feeToken == address(0)) {\\n            messageId = router.ccipSend{value: fees}(targetChainId, evm2AnyMessage);\\n        } else {\\n            messageId = router.ccipSend(targetChainId, evm2AnyMessage);\\n        }\\n        emit MessageSent(messageId, targetChainId, targetMessageAddr, feeToken, fees);\\n        return messageId;\\n    }\\n\\n    /// @notice Receives cross-chain messages\\n    /// @param any2EvmMessage The structure of the cross-chain message\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override whenNotPaused nonReentrant {\\n        uint64 sourceChainSelector = any2EvmMessage.sourceChainSelector;\\n        ChainInfo memory chainInfo = chains[sourceChainSelector];\\n        require(chainInfo.isSupported, \\\"CrossChainMessenger: Unsupported source chain\\\");\\n        address senderAddress = abi.decode(any2EvmMessage.sender, (address));\\n        require(senderAddress == chainInfo.messenger, \\\"CrossChainMessenger: Invalid message sender\\\");\\n        processCrossTokenMessage(sourceChainSelector, any2EvmMessage.data, any2EvmMessage.messageId);\\n    }\\n\\n    /// @notice Processes cross-chain token messages\\n    /// @param sourceChainSelector The selector or ID of the source chain\\n    /// @param data The accompanying data or message\\n    /// @param messageId The unique identifier of the message\\n    function processCrossTokenMessage(uint64 sourceChainSelector, bytes memory data, bytes32 messageId) internal {\\n        CrossChainTransferDetails memory transferDetails = abi.decode(data, (CrossChainTransferDetails));\\n\\n        // Ensure that the message has not been processed\\n        require(\\n            chainSourceMessageStatuses[sourceChainSelector][messageId] == OperationStatus.Unprocessed,\\n            \\\"CrossChainMessenger: Message already processed.\\\"\\n        );\\n\\n        uint256 netTransferAmount = convertTransferDetailsPrecision(transferDetails, sourceChainSelector);\\n\\n        // Attempting to process cross chain transfers\\n        try IPool(transferDetails.targetPool).processOutgoingTransfer(transferDetails.recipient, netTransferAmount, transferDetails.deadline) {\\n            // If the transfer is successful, update the status to successful\\n            chainSourceMessageStatuses[sourceChainSelector][messageId] = OperationStatus.Successful;\\n            emit MessageReceived(messageId, sourceChainSelector);\\n        } catch Error(string memory reason) {\\n            // If the transfer fails, record the reason for the failure and update the status to Failed\\n            emit CrossChainTransferError(messageId, sourceChainSelector, reason);\\n            chainSourceMessageStatuses[sourceChainSelector][messageId] = OperationStatus.Failed;\\n        } catch {\\n            emit CrossChainTransferError(messageId, sourceChainSelector, \\\"CrossChainMessenger: Unknown error\\\");\\n            chainSourceMessageStatuses[sourceChainSelector][messageId] = OperationStatus.Failed;\\n        }\\n    }\\n\\n    /// @notice Converts the precision of cross-chain transfer details\\n    /// @param transferDetails The details of the cross-chain transfer\\n    /// @param sourceChainSelector The selector or ID of the source chain\\n    /// @return netTransferAmount The net transfer amount\\n    function convertTransferDetailsPrecision(\\n        CrossChainTransferDetails memory transferDetails,\\n        uint64 sourceChainSelector\\n    ) internal view returns (uint256 netTransferAmount) {\\n        ITokenMirror.TokenMirrorData memory tokenMirrorData = ITokenMirror(factory.tokenMirror()).getMirrorData(\\n            IPool(transferDetails.targetPool).token(),\\n            sourceChainSelector\\n        );\\n\\n        netTransferAmount = PrecisionConverter.convertPrecision(\\n            transferDetails.netTransferAmount,\\n            tokenMirrorData.mirroredDecimals,\\n            tokenMirrorData.sourceDecimals\\n        );\\n    }\\n\\n    modifier onlyTradeRouter() {\\n        require(msg.sender == tradeRouter, \\\"CrossChainMessenger: Not the trade router\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrossChainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Cross-Chain Messenger Interface\\n/// @dev Defines methods and events for cross-chain communication and transactions.\\n/// @notice This interface is used for handling cross-chain messages, managing operations across different blockchains, and facilitating cross-chain transfers.\\ninterface ICrossChainMessenger {\\n    // --- ENUMS ---\\n\\n    /// @title Cross-Chain Communication Status\\n    /// @notice Defines the states of cross-chain communication.\\n    enum OperationStatus {\\n        Unprocessed, /// Cross-chain communication not processed\\n        Successful, /// Cross-chain communication successful\\n        Failed /// Cross-chain communication failed\\n    }\\n\\n    // --- STRUCTS ---\\n\\n    /// @title Essential Information for Cross-Chain Transfers\\n    /// @notice This structure provides basic details for cross-chain transfers.\\n    struct CrossChainTransferDetails {\\n        address recipient; /// @notice Address of the recipient of cross-chain funds\\n        address targetPool; /// @notice Address of the liquidity pool on the target chain\\n        uint256 netTransferAmount; /// @notice Actual amount received on the target chain\\n        uint256 deadline; /// @notice Deadline for the cross-chain operation; operations cannot be executed past this time\\n    }\\n\\n    /// @title Source Chain Transfer Information\\n    /// @notice This structure provides the cross-chain transfer information stored on the source chain.\\n    struct SourceChainTransfer {\\n        CrossChainTransferDetails details; /// @notice Basic details of the cross-chain transfer\\n        uint64 targetChainId; /// @notice Target chain ID\\n        address refundAddress; /// @notice Address for refunds in case of cross-chain operation failure\\n        address tokenAddress; /// @notice Address of the token to be transferred cross-chain\\n        uint256 platformFee; /// @notice Platform fee charged\\n        uint256 totalLPFee; /// @notice LP fee\\n    }\\n\\n    /// @notice Structure representing cross-chain information\\n    struct ChainInfo {\\n        bool isSupported; /// @notice Indicates whether the chain is supported\\n        address messenger; /// @notice Address of the messenger on the chain\\n    }\\n\\n    /// @notice Structure representing refunds for failed cross-chain operations\\n    struct PoolRefundSigData {\\n        uint64 targetChainId; /// @notice Target chain ID\\n        bytes32 messageId; /// @notice Unique identifier of the sent message\\n    }\\n\\n    // --- EVENTS ---\\n\\n    /// @notice Triggered when a new signer is added.\\n    /// @param addr Address of the newly added signer.\\n    /// @param timestamp Timestamp when the event was recorded.\\n    event SignerAdded(address indexed addr, uint256 timestamp);\\n\\n    /// @notice Triggered when a signer is removed.\\n    /// @param addr Address of the removed signer.\\n    /// @param timestamp Timestamp when the event was recorded.\\n    event SignerRemoved(address indexed addr, uint256 timestamp);\\n\\n    /// @notice Triggered when the contract's minimum signature requirement is updated.\\n    /// @param newMinSignatures Updated minimum number of signatures required.\\n    event MinSignaturesRequiredUpdated(uint256 indexed newMinSignatures);\\n\\n    /// @notice Triggered when the status of an operator changes.\\n    /// @dev This event is emitted when an operator is granted or revoked permission.\\n    /// @param operatorAddress Address of the operator.\\n    /// @param status New status of the operator. True if the operator is granted permission, false if revoked.\\n    event OperatorStatusChanged(address indexed operatorAddress, bool status);\\n\\n    /// @notice Triggered when a message is successfully sent to the target chain.\\n    /// @param messageId Unique identifier of the sent message.\\n    /// @param targetChainId ID of the target chain.\\n    /// @param destination Address on the target chain that processes this message.\\n    /// @param feeToken Address of the token used to pay for the cross-chain operation.\\n    /// @param fees Fees paid for the cross-chain operation.\\n    event MessageSent(bytes32 indexed messageId, uint64 indexed targetChainId, address indexed destination, address feeToken, uint256 fees);\\n\\n    /// @notice Triggered when a cross-chain transfer encounters an error.\\n    /// @param messageId ID of the message that triggered the error.\\n    /// @param reason Description of the error cause.\\n    event CrossChainTransferError(bytes32 indexed messageId, uint64 indexed targetChainId, string reason);\\n\\n    /// @notice Triggered when a message is successfully received from the target chain.\\n    /// @param messageId Unique identifier of the received message.\\n    /// @param originChainId ID of the origin chain.\\n    event MessageReceived(bytes32 indexed messageId, uint64 indexed originChainId);\\n\\n    /// @notice Triggered when the support status of a chain is changed.\\n    /// @param chainId ID of the updated chain.\\n    /// @param isSupported New support status of the chain.\\n    event ChainSupportUpdated(uint64 indexed chainId, bool isSupported);\\n\\n    /// @notice Triggered when the messenger sender address of a chain is changed.\\n    /// @param chainId ID of the updated chain.\\n    /// @param newMessengerSender New messenger sender address of the chain.\\n    event MessengerSenderUpdated(uint64 indexed chainId, address newMessengerSender);\\n\\n    // --- VIEW FUNCTIONS ---\\n\\n    /// @notice Retrieves the address of the trade router.\\n    /// @return tradeRouterAddress Address of the current trade router.\\n    function tradeRouter() external view returns (address tradeRouterAddress);\\n\\n    /// @notice Checks if the specified token is supported for cross-chain operations.\\n    /// @param tokenAddress Address of the token to check.\\n    /// @return supported Whether the specified token is supported.\\n    function isTokenSupported(address tokenAddress) external view returns (bool supported);\\n\\n    /// @notice Queries whether a transaction with the specified message ID has been refunded.\\n    /// @param msgId Message ID of the transaction to query.\\n    /// @return refunded Whether the transaction with the given message ID has been refunded.\\n    function refundedMsgIds(bytes32 msgId) external view returns (bool refunded);\\n\\n    /// @notice Retrieves detailed information about a cross-chain transfer by its message ID.\\n    /// @param msgId Unique identifier of the message.\\n    /// @return SourceChainTransfer Detailed information about the cross-chain transfer.\\n    function getTransferByMsgId(bytes32 msgId) external view returns (SourceChainTransfer memory);\\n\\n    /// @notice Gets the status of the source message based on chain ID and message ID.\\n    /// @param chainId ID of the origin chain.\\n    /// @param msgId Unique identifier of the message.\\n    /// @return OperationStatus Status of the source message.\\n    function getSourceMessageStatus(uint64 chainId, bytes32 msgId) external view returns (OperationStatus);\\n\\n    /// @notice Retrieves the address of the CCIP router on the current chain.\\n    /// @return Address of the current CCIP router.\\n    function getRouterAddress() external view returns (address);\\n\\n    /// @notice Lists all token addresses supported for cross-chain operations.\\n    /// @return tokens List of addresses of all supported tokens.\\n    function listSupportedTokens() external view returns (address[] memory tokens);\\n\\n    /// @notice Retrieves the IDs of all chains supported for cross-chain operations.\\n    /// @return List of IDs of all supported chains.\\n    function getSupportedChains() external view returns (uint64[] memory);\\n\\n    /// @notice Queries if a chain with the specified chain ID is supported.\\n    /// @param chainId ID of the chain to query.\\n    /// @return True if the chain is supported, otherwise false.\\n    function isChainSupported(uint64 chainId) external view returns (bool);\\n\\n    /// @notice Retrieves the messenger address for a specified chain ID.\\n    /// @param chainId ID of the chain to query.\\n    /// @return Messenger address for the chain, may return zero address if the chain is not supported.\\n    function getMessengerForChain(uint64 chainId) external view returns (address);\\n\\n    /// @notice Retrieves the list of all signers.\\n    /// @return List of addresses of all current signers.\\n    function getAllSigners() external view returns (address[] memory);\\n\\n    /// @notice Retrieves the address of a signer at a specified index.\\n    /// @param index Index to query.\\n    /// @return Address of the signer at the given index.\\n    function signers(uint256 index) external view returns (address);\\n\\n    /// @notice Retrieves the current minimum number of signatures required by the contract.\\n    /// @return Current minimum number of signatures required.\\n    function minSignaturesRequired() external view returns (uint256);\\n\\n    // --- EXTERNAL FUNCTIONS ---\\n\\n    /// @notice Sets the address of the trade router.\\n    /// @param _tradeRouter New address of the trade router.\\n    function setTradeRouter(address _tradeRouter) external;\\n\\n    /// @notice Sets or revokes the status of an operator.\\n    /// @param addr Address of the operator.\\n    /// @param status Boolean indicating whether to set the address as an operator.\\n    function setOperatorStatus(address addr, bool status) external;\\n\\n    /// @notice Sets the minimum number of signatures required by the contract.\\n    /// @param newMinSignatures New minimum number of signatures required.\\n    function setMinSignaturesRequired(uint256 newMinSignatures) external;\\n\\n    /// @notice Adds a new signer.\\n    /// @param addr Address of the signer to be added.\\n    function addSigner(address addr) external;\\n\\n    /// @notice Removes an existing signer.\\n    /// @param addr Address of the signer to be removed.\\n    function removeSigner(address addr) external;\\n\\n    /// @notice Approves the CCIP router to transfer a specified amount of tokens from the contract.\\n    /// @param token Address of the token.\\n    /// @param spender Address authorized to spend the tokens.\\n    /// @param amount Amount of tokens to authorize.\\n    function approveToken(address token, address spender, uint256 amount) external;\\n\\n    /// @notice Adds multiple tokens to the supported list.\\n    /// @param _tokensToAdd Array of token addresses to add to the support list.\\n    function addSupportedTokens(address[] calldata _tokensToAdd) external;\\n\\n    /// @notice Removes multiple tokens from the support list.\\n    /// @param _tokensToRemove Array of token addresses to remove from the support list.\\n    function removeTokensFromSupport(address[] calldata _tokensToRemove) external;\\n\\n    /// @notice Sets or updates the support status of a chain\\n    /// @param chainId ChainId of the chain to set\\n    /// @param _messengerSender Address of the messenger sender for the chain (set to address(0) if not updating)\\n    /// @param isSupported Indicates whether the chain is supported\\n    function setChainInfo(uint64 chainId, address _messengerSender, bool isSupported) external;\\n\\n    /// @notice Processes a cross-chain transfer.\\n    /// @param sourceTransferDetails Detailed information of the cross-chain transfer.\\n    /// @param crossChainFee Fees to be paid for the cross-chain transfer.\\n    /// @return messageId Unique identifier of the cross-chain transfer message.\\n    function processTokenTransferToChain(\\n        SourceChainTransfer memory sourceTransferDetails,\\n        uint256 crossChainFee\\n    ) external returns (bytes32 messageId);\\n\\n    /// @notice Withdraws funds from the contract.\\n    /// @param beneficiary Address receiving the withdrawn funds.\\n    /// @param amount Amount of ETH to be withdrawn.\\n    function withdrawFunds(address beneficiary, uint256 amount) external;\\n\\n    /// @notice Withdraws token funds from the contract.\\n    /// @param beneficiary Address receiving the withdrawn funds.\\n    /// @param tokenAddress Address of the token to be withdrawn.\\n    /// @param amount Amount of the token to be withdrawn.\\n    function withdrawTokenFunds(address beneficiary, address tokenAddress, uint256 amount) external;\\n\\n    /// @notice Distributes accumulated fees to a specified token's liquidity pool.\\n    /// @param token Address of the token.\\n    /// @param feeAmount Amount of fees to be distributed.\\n    function distributePoolFees(address token, uint256 feeAmount) external;\\n\\n    /// @notice Processes failed cross-chain transactions, initiated by the sender.\\n    /// @param targetChainId Address of the target chain during the cross-chain process.\\n    /// @param messageId Unique identifier of the sent message.\\n    /// @param sigDatas Array of signatures.\\n    /// @param deadline Deadline for the operation.\\n    function processPoolRefund(uint64 targetChainId, bytes32 messageId, bytes[] memory sigDatas, uint256 deadline) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Factory Interface\\n/// @dev Defines methods and events for a factory contract.\\n/// @notice This interface is used to create and manage liquidity pool contracts.\\ninterface IFactory {\\n    // Event triggered when a liquidity pool is successfully created.\\n    event PoolCreated(address indexed token, address pool, uint256 pid);\\n\\n    // Get the address of the contract owner.\\n    function getOwner() external view returns (address);\\n\\n    // Get the address of the messenger registry.\\n    function messengerRegistry() external view returns (address);\\n\\n    // Get the address of the price oracle.\\n    function priceOracle() external view returns (address);\\n\\n    // Get the address of the token mirror contract.\\n    function tokenMirror() external view returns (address);\\n\\n    // Get the address of the fee management contract.\\n    function feeManager() external view returns (address);\\n\\n    // Return the address of all created liquidity pool contracts based on index.\\n    function allPools(uint256 index) external view returns (address);\\n\\n    // Return the total number of created liquidity pool contracts.\\n    function allPoolsLength() external view returns (uint256);\\n\\n    // Return the address of a created liquidity pool contract based on index.\\n    function getPoolByIndex(uint256 index) external view returns (address);\\n\\n    // Return the liquidity pool contract address corresponding to a token address.\\n    function getPool(address token) external view returns (address);\\n\\n    // Set the address of the messenger registry.\\n    function setMessengerRegistry(address newMessengerRegistry) external;\\n\\n    // Set the address of the price oracle.\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    // Set the address of the token mirror contract.\\n    function setTokenMirror(address newTokenMirror) external;\\n\\n    // Set the address of the fee management contract.\\n    function setFeeManager(address newFeeManager) external;\\n\\n    // Create a new liquidity pool contract and return its address.\\n    function createPool(address token) external returns (address newPool);\\n\\n    // Return the anticipated address of the liquidity pool contract for a token.\\n    function poolFor(address token) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Fee Manager Interface\\n/// @notice This interface defines public methods for a fee manager contract.\\ninterface IFeeManager {\\n    // --- Types and Structures ---\\n\\n    /// @title CrossChainOperationType\\n    /// @notice Defines different types of cross-chain operations.\\n    /// @dev Each operation type may have different fees or handling methods.\\n    enum CrossChainOperationType {\\n        CrossToken, /// Cross-chain token transfer operation, such as sending or receiving tokens from one chain to another.\\n        Swap, /// Token swap operation, such as exchanging two different tokens on a decentralized exchange (DEX).\\n        Other /// Other undefined types of cross-chain operations.\\n    }\\n\\n    /// @notice Structure defining fee rate information, containing rate value and active status.\\n    struct RateInfo {\\n        uint256 rate; /// @notice The fee rate, usually expressed as a fraction of the fee denominator.\\n        bool isActive; /// @notice Indicates whether the fee rate is active.\\n    }\\n\\n    // --- Events ---\\n\\n    /// @notice Triggered when the fee-exempt swap address is updated.\\n    /// @param oldAddress The fee-exempt swap address before the update.\\n    /// @param newAddress The new fee-exempt swap address after the update.\\n    event FeeExemptSwapUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice Triggered when the platform fee rate is updated.\\n    /// @param token The token address for which the fee rate is changed.\\n    /// @param targetChainId The target chain ID for which the fee rate is changed.\\n    /// @param oldRate The fee rate before the update.\\n    /// @param newRate The fee rate after the update.\\n    /// @param isActive Indicates whether the fee rate is active.\\n    /// @param timestamp The timestamp of the event.\\n    event PlatformFeeRateUpdated(\\n        address indexed token,\\n        uint64 indexed targetChainId,\\n        uint256 oldRate,\\n        uint256 newRate,\\n        bool isActive,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Triggered when the liquidity provider (LP) fee rate is updated.\\n    /// @param token The token address for which the LP fee rate is changed.\\n    /// @param targetChainId The target chain ID for which the LP fee rate is changed.\\n    /// @param oldRate The LP fee rate before the update.\\n    /// @param newRate The LP fee rate after the update.\\n    /// @param isActive Indicates whether the fee rate is active.\\n    /// @param timestamp The timestamp of the event.\\n    event LPFeeRateUpdated(address indexed token, uint64 indexed targetChainId, uint256 oldRate, uint256 newRate, bool isActive, uint256 timestamp);\\n\\n    /// @notice Triggered when the swap fee for a specific token is updated.\\n    /// @param token The token address for which the swap fee rate is changed.\\n    /// @param oldRate The swap fee rate before the update.\\n    /// @param newRate The swap fee rate after the update.\\n    /// @param isActive Indicates whether the fee rate is active.\\n    /// @param timestamp The timestamp of the event.\\n    event SwapFeeUpdated(address indexed token, uint256 oldRate, uint256 newRate, bool isActive, uint256 timestamp);\\n\\n    /// @notice Triggered when a new fee token is added.\\n    /// @param token The address of the token added as a fee token.\\n    /// @param timestamp The timestamp of the event.\\n    event FeeTokenAdded(address indexed token, uint256 timestamp);\\n\\n    /// @notice Triggered when a fee token is removed.\\n    /// @param token The address of the fee token being removed.\\n    /// @param timestamp The timestamp of the event.\\n    event FeeTokenRemoved(address indexed token, uint256 timestamp);\\n\\n    /// @notice Triggered when the default fee token is set.\\n    /// @param token The address of the token set as the default fee token.\\n    /// @param timestamp The timestamp of the event.\\n    event DefaultFeeTokenSet(address indexed token, uint256 timestamp);\\n\\n    /// @notice Triggered when the default platform fee rate changes.\\n    /// @param previousRate The fee rate before the change.\\n    /// @param newRate The fee rate after the change.\\n    /// @param timestamp The timestamp of the event.\\n    event DefaultPlatformFeeRateChanged(uint256 previousRate, uint256 newRate, uint256 timestamp);\\n\\n    /// @notice Triggered when the default LP fee rate changes.\\n    /// @param previousRate The fee rate before the change.\\n    /// @param newRate The fee rate after the change.\\n    /// @param timestamp The timestamp of the event.\\n    event DefaultLPFeeRateChanged(uint256 previousRate, uint256 newRate, uint256 timestamp);\\n\\n    /// @notice Triggered when the default swap fee changes.\\n    /// @param oldFee The default swap fee rate before the update.\\n    /// @param newFee The default swap fee rate after the update.\\n    /// @param timestamp The timestamp of the event.\\n    event DefaultSwapFeeChanged(uint256 oldFee, uint256 newFee, uint256 timestamp);\\n\\n    /// @notice Triggered when the platform fee recipient changes.\\n    /// @param previousRecipient The previous fee recipient address.\\n    /// @param newRecipient The new fee recipient address.\\n    /// @param timestamp The timestamp of the event.\\n    event PlatformFeeRecipientSet(address indexed previousRecipient, address indexed newRecipient, uint256 timestamp);\\n\\n    /// @notice Triggered when the gas quota for cross-chain operations changes.\\n    /// @param operationType The type of cross-chain operation.\\n    /// @param oldQuota The previous gas quota.\\n    /// @param newQuota The new gas quota after the change.\\n    /// @param timestamp The timestamp of the event.\\n    event CrossChainGasQuotaChanged(CrossChainOperationType operationType, uint256 oldQuota, uint256 newQuota, uint256 timestamp);\\n\\n    // --- External and Public Functions ---\\n\\n    /// @notice Queries the default platform fee rate.\\n    /// @return The current default platform fee rate.\\n    function defaultPlatformFeeRate() external view returns (uint256);\\n\\n    /// @notice Queries the default LP fee rate.\\n    /// @return The current default LP fee rate.\\n    function defaultLPFeeRate() external view returns (uint256);\\n\\n    /// @notice Queries the default swap fee rate.\\n    /// @return The current default swap fee rate.\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    /// @notice Queries the address of the platform fee recipient.\\n    /// @return The current address of the platform fee recipient.\\n    function platformFeeRecipient() external view returns (address);\\n\\n    /// @notice Queries the address of the default fee token.\\n    /// @return The current address of the default fee token.\\n    function defaultFeeToken() external view returns (address);\\n\\n    /// @notice Queries the address of the fee-exempt contract.\\n    /// @return The current address of the fee-exempt contract.\\n    function feeExemptSwap() external view returns (address);\\n\\n    /// @notice Checks if a given address is a valid fee token.\\n    /// @param token The token address to query.\\n    /// @return True if the address is a valid fee token, false otherwise.\\n    function isFeeToken(address token) external view returns (bool);\\n\\n    /// @notice Retrieves a list of all fee token addresses.\\n    /// @return An array containing all fee token addresses.\\n    function getFeeTokens() external view returns (address[] memory);\\n\\n    /// @notice Queries the platform fee rate for a specified token on a specific chain.\\n    /// @param token The token address for which to query the fee rate.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @return The platform fee rate for the specified token on the target chain.\\n    function getPlatformFeeRate(address token, uint64 targetChainId) external view returns (uint256);\\n\\n    /// @notice Retrieves the LP fee rate for a specified token on a specific chain.\\n    /// @param token The token address for which to query the fee rate.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @return The LP fee rate for the specified token on the target chain.\\n    function getLPFeeRate(address token, uint64 targetChainId) external view returns (uint256);\\n\\n    /// @notice Queries the swap fee rate for a specified token.\\n    /// @param token The token address for which to query the fee rate.\\n    /// @return The current swap fee rate for the specified token if active, otherwise the default swap fee rate.\\n    function getSwapFee(address token) external view returns (uint256);\\n\\n    /// @notice Queries the gas quota for a specific type of cross-chain operation.\\n    /// @param operationType The type of cross-chain operation to query.\\n    /// @return The current gas quota for the specified operation type.\\n    function getCrossChainGasQuota(CrossChainOperationType operationType) external view returns (uint256);\\n\\n    /// @notice Calculates the combined fees (platform and LP fees) based on token, amount, and target chain ID.\\n    /// @param token The token address for which to calculate fees.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @param amount The amount for which to calculate fees.\\n    /// @return platformFeeAmount The calculated platform fee amount.\\n    /// @return lpFeeAmount The calculated LP fee amount.\\n    function getCombinedFees(\\n        address token,\\n        uint64 targetChainId,\\n        uint256 amount\\n    ) external view returns (uint256 platformFeeAmount, uint256 lpFeeAmount);\\n\\n    /// @notice Estimates the cost of a cross-chain operation.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @param receiver The recipient address of the cross-chain operation.\\n    /// @param gasLimit The gas limit for the cross-chain operation.\\n    /// @param routerAddress The address of the routing contract.\\n    /// @param data The data of the cross-chain operation.\\n    /// @return The estimated cost of the cross-chain operation.\\n    function estimateCrossChainFee(\\n        uint64 targetChainId,\\n        address receiver,\\n        uint256 gasLimit,\\n        address routerAddress,\\n        bytes memory data\\n    ) external view returns (uint256);\\n\\n    // Non-view and Non-pure Functions\\n\\n    /// @notice Adds a new fee token.\\n    /// @param token The address of the fee token to add.\\n    function addFeeToken(address token) external;\\n\\n    /// @notice Removes an existing fee token.\\n    /// @param token The address of the fee token to remove.\\n    function removeFeeToken(address token) external;\\n\\n    /// @notice Sets the address of the default fee token.\\n    /// @param token The address of the default fee token to set.\\n    function setDefaultFeeToken(address token) external;\\n\\n    /// @notice Sets the address of the fee-exempt contract.\\n    /// @param _feeExemptSwap The address of the fee-exempt contract to set.\\n    function setFeeExemptSwap(address _feeExemptSwap) external;\\n\\n    /// @notice Sets the default platform fee rate.\\n    /// @param _defaultPlatformFeeRate The new default platform fee rate to set.\\n    function setDefaultPlatformFeeRate(uint256 _defaultPlatformFeeRate) external;\\n\\n    /// @notice Sets the default liquidity provider (LP) fee rate.\\n    /// @param _defaultLPFeeRate The new default LP fee rate to set.\\n    function setDefaultLPFeeRate(uint256 _defaultLPFeeRate) external;\\n\\n    /// @notice Sets the default swap fee rate.\\n    /// @param _defaultSwapFee The new default swap fee rate to set.\\n    function setDefaultSwapFee(uint256 _defaultSwapFee) external;\\n\\n    /// @notice Sets the address of the platform fee recipient.\\n    /// @param _platformFeeRecipient The new platform fee recipient address to set.\\n    function setPlatformFeeRecipient(address _platformFeeRecipient) external;\\n\\n    /// @notice Sets the gas quota for a specific type of cross-chain operation.\\n    /// @param operationType The type of cross-chain operation to set.\\n    /// @param newQuota The new gas quota to set.\\n    function setCrossChainGasQuota(CrossChainOperationType operationType, uint256 newQuota) external;\\n\\n    /// @notice Sets the platform fee rate and active status for a specified token on a specific chain.\\n    /// @param token The token address for which to set the fee rate.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @param _platformFeeRate The new fee rate to set.\\n    /// @param _isActive Indicates whether the fee rate is active.\\n    function setPlatformFeeRate(address token, uint64 targetChainId, uint256 _platformFeeRate, bool _isActive) external;\\n\\n    /// @notice Sets the LP fee rate and active status for a specific token on a specific chain.\\n    /// @param token The token address for which to set the LP fee rate.\\n    /// @param targetChainId The ID of the target chain.\\n    /// @param _lpFeeRate The new LP fee rate to set.\\n    /// @param _isActive Indicates whether the fee rate should be active.\\n    function setLPFeeRate(address token, uint64 targetChainId, uint256 _lpFeeRate, bool _isActive) external;\\n\\n    /// @notice Sets the swap fee rate for a specific token.\\n    /// @param token The token address for which to set the swap fee rate.\\n    /// @param _swapFee The new swap fee rate to set.\\n    /// @param _isActive Indicates whether the new swap fee rate is active.\\n    function setSwapFee(address token, uint256 _swapFee, bool _isActive) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegratedInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./IMessengerRegistry.sol\\\";\\nimport \\\"./ITokenMirror.sol\\\";\\n\\ninterface IIntegratedInterfaces is IFeeManager, IPriceOracle, IMessengerRegistry, ITokenMirror {\\n    // This is a combined interface, so no additional functions are needed here.\\n    // You can just use this interface to represent the combination of the other interfaces.\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessengerRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IMessengerRegistry\\n * @dev This interface defines the function signatures for the MessengerRegistry contract. Any contract that implements this interface must provide actual implementations for these functions.\\n */\\ninterface IMessengerRegistry {\\n    // Event Declarations\\n    /**\\n     * @dev Emitted when a new current chain messenger address is set.\\n     * @param newAddress The newly set messenger address.\\n     */\\n    event CurrentMessengerUpdated(address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when a new messenger address is registered for a specific chain.\\n     * @param chainId The chain ID for which the messenger address is registered.\\n     * @param messengerAddress The messenger address being registered.\\n     */\\n    event MessengerRegisteredForChain(uint64 indexed chainId, address indexed messengerAddress);\\n\\n    /**\\n     * @dev Sets the messenger address for the current chain.\\n     * @param newAddress The messenger address to be set for the current chain.\\n     */\\n    function setCurrentChainMessenger(address newAddress) external;\\n\\n    /**\\n     * @dev Gets the messenger address for the current chain.\\n     * @return The messenger address for the current chain.\\n     */\\n    function getCurrentChainMessenger() external view returns (address);\\n\\n    /**\\n     * @dev Registers a messenger address for a given chain ID.\\n     * @param chainId The ID of the chain for which to register a messenger address.\\n     * @param messengerAddress The messenger address to register for the given chain ID.\\n     */\\n    function registerMessengerForChain(uint64 chainId, address messengerAddress) external;\\n\\n    /**\\n     * @dev Gets the messenger address for a given chain ID.\\n     * @param chainId The ID of the chain for which to get the messenger address.\\n     * @return The messenger address for the given chain ID.\\n     */\\n    function getMessengerForChain(uint64 chainId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Liquidity Pool Interface\\n/// @notice Defines the methods and events that a liquidity pool contract should implement\\ninterface IPool {\\n    // Event Declarations\\n\\n    /// @notice Emitted when liquidity is added to the pool\\n    /// @param recipient The address of the user initiating the addition of liquidity\\n    /// @param addedTokenAmount The amount of tokens added to the pool\\n    /// @param mintedLiquidity The amount of liquidity tokens minted\\n    event Mint(address indexed recipient, uint256 addedTokenAmount, uint256 mintedLiquidity);\\n\\n    /// @notice Emitted when liquidity is removed from the pool\\n    /// @param recipient The address of the token recipient\\n    /// @param poolLiquidity The amount of liquidity tokens removed\\n    /// @param burnedAmount The amount of tokens given to the user after removing liquidity\\n    event Burn(address indexed recipient, uint256 poolLiquidity, uint256 burnedAmount);\\n\\n    /// @notice Emitted when a cross-chain transfer is incoming\\n    /// @param netTransferAmount The net amount of tokens transferred in\\n    /// @param lpFeeAmount The LP fee amount\\n    event IncomingTransferProcessed(uint256 netTransferAmount, uint256 lpFeeAmount);\\n\\n    /// @notice Emitted when a cross-chain transfer is outgoing\\n    /// @param recipient The address receiving the tokens\\n    /// @param netTransferAmount The net amount of tokens transferred out\\n    event OutgoingTransferProcessed(address indexed recipient, uint256 netTransferAmount);\\n\\n    /// @notice Emitted when a refund is processed\\n    /// @param recipient The address of the refund recipient\\n    /// @param refundAmount The amount of the refund\\n    event RefundProcessed(address indexed recipient, uint256 refundAmount);\\n\\n    /// @notice Emitted when fees are distributed to the pool.\\n    /// @param feeAmount The amount of fees distributed.\\n    /// @param timestamp The timestamp of when the event is recorded.\\n    event FeesDistributed(uint256 feeAmount, uint256 timestamp);\\n\\n    // External Functions\\n\\n    /// @notice Get the token address associated with this pool\\n    /// @return The address of the token\\n    function token() external view returns (address);\\n\\n    /// @notice Get the factory contract address that created this pool\\n    /// @return The address of the factory\\n    function factory() external view returns (address);\\n\\n    /// @notice Get the effective balance of tokens in the pool\\n    /// @return The effective token balance\\n    function effectiveBalance() external view returns (uint256);\\n\\n    /// @notice Get the reserve amount of tokens in the pool\\n    /// @return The amount of tokens in reserve\\n    function getReserve() external view returns (uint256);\\n\\n    /// @notice Query the amount of tokens that can be transferred\\n    /// @return The amount of transferable tokens\\n    function getTransferAmount() external view returns (uint256);\\n\\n    /// @notice Add liquidity to the pool\\n    /// @param recipient The address of the liquidity recipient\\n    /// @return mintedLiquidity The amount of liquidity tokens minted\\n    function mint(address recipient) external returns (uint256 mintedLiquidity);\\n\\n    /// @notice Remove liquidity from the pool\\n    /// @param recipient The address of the token recipient\\n    /// @return burnedAmount The amount of tokens removed from the pool\\n    function burn(address recipient) external returns (uint256 burnedAmount);\\n\\n    /// @notice Process an incoming cross-chain transfer\\n    /// @param netTransferAmount The net amount of tokens transferred in\\n    /// @param lpFeeAmount The LP fee amount\\n    /// @return True if the operation is successful\\n    function processIncomingTransfer(uint256 netTransferAmount, uint256 lpFeeAmount) external returns (bool);\\n\\n    /// @notice Process an outgoing cross-chain transfer\\n    /// @param recipient The address receiving the tokens\\n    /// @param netTransferAmount The net amount of tokens to be transferred\\n    /// @param transactionDeadline The deadline of the transaction\\n    /// @return True if the operation is successful\\n    function processOutgoingTransfer(address recipient, uint256 netTransferAmount, uint256 transactionDeadline) external returns (bool);\\n\\n    /// @notice Process a cross-chain refund\\n    /// @param recipient The address receiving the refund\\n    /// @param refundAmount The amount of tokens to be refunded\\n    function processRefund(address recipient, uint256 refundAmount) external;\\n\\n    /// @notice Distribute accumulated fees to the pool's reserve\\n    /// @param feeAmount The amount of fees to be distributed\\n    function distributeFees(uint256 feeAmount) external;\\n\\n    /// @notice Withdraw tokens from the pool\\n    /// @param to The address of the token recipient\\n    function skim(address to) external;\\n\\n    /// @notice Synchronize the state of the pool\\n    function sync() external;\\n\\n    /// @notice Withdraw tokens mistakenly sent to the pool\\n    /// @param beneficiary The address of the token beneficiary\\n    /// @param tokenAddress The address of the token to be withdrawn\\n    /// @param amount The amount of tokens to be withdrawn\\n    function withdrawToken(address beneficiary, address tokenAddress, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title IPriceOracle\\n * @notice Interface for fetching token prices and calculating fees using Chainlink oracles.\\n */\\ninterface IPriceOracle {\\n    event TokenAggregatorUpdated(address indexed tokenA, address indexed tokenB, address indexed aggregator, uint256 priceDecimals);\\n\\n    /**\\n     * @dev Gets the base currency address for the current chain.\\n     * @return The address of the base currency.\\n     */\\n    function baseCurrency() external view returns (address);\\n\\n    /**\\n     * @dev Gets the USDT token address.\\n     * @return The address of the USDT token.\\n     */\\n    function USDTToken() external view returns (address);\\n\\n    /**\\n     * @dev Gets the oracle interface for a specified token pair.\\n     * @param tokenA The address of token A.\\n     * @param tokenB The address of token B.\\n     * @return The corresponding oracle interface.\\n     */\\n    function tokenPairToAggregator(address tokenA, address tokenB) external view returns (AggregatorV3Interface);\\n\\n    /**\\n     * @dev Gets the price decimals for a specified token pair.\\n     * @param tokenA The address of token A.\\n     * @param tokenB The address of token B.\\n     * @return The precision of the price.\\n     */\\n    function tokenPairPriceDecimals(address tokenA, address tokenB) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets the Chainlink oracle address and price decimals for a specified token pair.\\n     * @param tokenA The address of token A.\\n     * @param tokenB The address of token B.\\n     * @param priceDec The precision of the price.\\n     * @param aggregatorAddress The Chainlink oracle address to set for the token pair.\\n     */\\n    function setTokenAggregator(address tokenA, address tokenB, uint256 priceDec, address aggregatorAddress) external;\\n\\n    /**\\n     * @dev Fetches the latest price for a specified token pair.\\n     * @param tokenA The address of token A.\\n     * @param tokenB The address of token B.\\n     * @return The latest price.\\n     */\\n    function fetchLatestPrice(address tokenA, address tokenB) external view returns (int);\\n\\n    /**\\n     * @dev Estimates the equivalent amount in the target token based on a specified fee token and amount.\\n     * @param feeToken The address of the fee token.\\n     * @param feeTokenAmount The amount of the fee token.\\n     * @param targetToken The address of the target token.\\n     * @return The estimated amount in the target token.\\n     */\\n    function estimateFeeInToken(address feeToken, uint256 feeTokenAmount, address targetToken) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IFactory.sol\\\";\\n\\n/// @title Router Interface for Cross-Chain Transfers and Swaps\\n/// @notice Defines the interface for routing cross-chain transfers and token swaps, including liquidity management and cross-chain operations.\\ninterface IRouter {\\n    \\n    /// @title Details of Cross-Chain Transfer\\n    /// @notice This structure defines the main parameters required for performing a cross-chain transfer.\\n    /// @dev These details are needed when calling the cross-chain transfer function.\\n    struct TransferToChainDetails {\\n        uint64 targetChainId; /// @notice The ID of the target chain where the tokens will be sent.\\n        address tokenAddress; /// @notice The contract address of the token to be transferred.\\n        address recipientAddress; /// @notice The address receiving the tokens on the target chain.\\n        uint256 transferAmount; /// @notice The amount of tokens to transfer.\\n        address feeToken; /// @notice The token address used to pay for the cross-chain operation fees. There are four types (BaseToken, WrappedBaseToken, Link, TokenAddress)\\n        uint256 transactionDeadline; /// @notice The deadline for the cross-chain transaction. The transaction must be completed before this time, otherwise it will be considered invalid.\\n    }\\n\\n    /// @notice Transaction route details, used to define parameters for a single token swap route.\\n    struct TokenSwapRoute {\\n        address router; /// @notice The router contract address used for the swap.\\n        address[] path; /// @notice The swap path, an array of addresses from token A to token B.\\n        uint256 amountIn; /// @notice The amount of tokens input.\\n        uint256 amountOutMin; /// @notice The minimum expected output amount, used to prevent slippage.\\n    }\\n\\n    /// @notice Combined swap and cross-chain transfer details, including a series of token swaps and the final cross-chain transfer.\\n    struct CombinedSwapAndTransfer {\\n        TokenSwapRoute[] swapRoutes; /// @notice One or more swap route details, allowing users to convert tokens into the target token through different swap paths.\\n        TransferToChainDetails transferDetails; /// @notice The details of the cross-chain transfer, defining the final tokens and amounts to be sent to the target chain.\\n        uint256 totalAmountIn; /// @notice The total amount of tokens the user wants to swap.\\n        bool isCrossChain; /// @notice Flag indicating whether a cross-chain operation is to be performed.\\n    }\\n\\n    // Events\\n\\n    /// @notice Emitted when token liquidity is added.\\n    event TokenLiquidityAdded(address indexed sender, address indexed recipient, address indexed tokenAddress, uint256 tokenAmount);\\n\\n    /// @notice Emitted when token liquidity is removed.\\n    event TokenLiquidityRemoved(address indexed sender, address indexed recipient, address indexed tokenAddress, uint256 liquidityAmount);\\n\\n    /// @notice Emitted when ETH liquidity is added.\\n    event EthLiquidityAdded(address indexed sender, address indexed recipient, uint256 ethAmount);\\n\\n    /// @notice Emitted when a series of token swaps are completed and a cross-chain transfer operation is performed.\\n    /// @param tokenA The address of the input token.\\n    /// @param tokenB The address of the output token.\\n    /// @param totalAmountIn The total input token amount executed in the swap.\\n    /// @param totalAmountOut The total output token amount executed in the swap.\\n    event SwapAndTransferPerformed(address indexed tokenA, address indexed tokenB, uint256 totalAmountIn, uint256 totalAmountOut);\\n\\n    // View functions\\n    function factory() external view returns (IFactory);\\n\\n    function WETH() external view returns (address);\\n\\n    // External Functions\\n\\n    /// @notice Add liquidity using a specified token to a specified pool.\\n    /// @dev Users must first approve this contract to transfer tokens.\\n    /// @param tokenAddress The address of the token to add as liquidity.\\n    /// @param tokenAmount The amount of tokens to add as liquidity.\\n    /// @param recipient The address receiving the liquidity.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    function addTokenLiquidity(address tokenAddress, uint256 tokenAmount, address recipient, uint256 transactionDeadline) external;\\n\\n    /// @notice Add ETH liquidity to a specified pool.\\n    /// @dev This function allows users to directly send ETH to add liquidity.\\n    /// @param ethAmount The amount of ETH to add.\\n    /// @param recipient The address of the liquidity recipient.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    function addEthLiquidity(uint256 ethAmount, address recipient, uint256 transactionDeadline) external payable;\\n\\n    /// @notice Remove token liquidity from a specified pool.\\n    /// @dev Users must first approve this contract to transfer liquidity tokens.\\n    /// @param tokenAddress The address of the token to remove.\\n    /// @param liquidityAmount The amount of liquidity to remove.\\n    /// @param recipient The address receiving the removed tokens.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    function removeTokenLiquidity(\\n        address tokenAddress,\\n        uint256 liquidityAmount,\\n        address recipient,\\n        uint256 transactionDeadline\\n    ) external returns (uint256);\\n\\n    /// @notice Remove ETH liquidity from a specified pool.\\n    /// @dev Users must first approve this contract to transfer liquidity tokens.\\n    /// @param liquidityAmount The amount of liquidity to remove.\\n    /// @param recipient The address receiving the removed ETH.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    function removeEthLiquidity(uint256 liquidityAmount, address recipient, uint256 transactionDeadline) external returns (uint256);\\n\\n    /// @notice Remove token liquidity from a specified pool using a signature.\\n    /// @dev Users can use EIP-2612 signatures to approve and remove liquidity without making two transactions.\\n    /// @param tokenAddress The address of the token to remove.\\n    /// @param liquidityAmount The amount of liquidity to remove.\\n    /// @param recipient The address receiving the removed tokens.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    /// @param approveMax Whether to approve the maximum amount.\\n    /// @param v The v value of the EIP-712 signature.\\n    /// @param r The r value of the EIP-712 signature.\\n    /// @param s The s value of the EIP-712 signature.\\n    function removeTokenLiquidityWithPermit(\\n        address tokenAddress,\\n        uint256 liquidityAmount,\\n        address recipient,\\n        uint256 transactionDeadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /// @notice Remove ETH liquidity from a specified pool using a signature.\\n    /// @dev Users can use EIP-2612 signatures to approve and remove liquidity without making two transactions.\\n    /// @param liquidityAmount The amount of liquidity to remove.\\n    /// @param recipient The address receiving the removed ETH.\\n    /// @param transactionDeadline The deadline of the transaction.\\n    /// @param approveMax Whether to approve the maximum amount.\\n    /// @param v The v value of the EIP-712 signature.\\n    /// @param r The r value of the EIP-712 signature.\\n    /// @param s The s value of the EIP-712 signature.\\n    function removeEthLiquidityWithPermit(\\n        uint256 liquidityAmount,\\n        address recipient,\\n        uint256 transactionDeadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /// @notice Allows users to send tokens cross-chain.\\n    /// @dev Users need to provide the necessary transfer details.\\n    /// @param details The details of the cross-chain transfer, including:\\n    /// - `targetChainId`: The ID of the target chain.\\n    /// - `tokenAddress`: The contract address of the token to transfer.\\n    /// - `recipientAddress`: The address receiving the tokens on the target chain.\\n    /// - `transferAmount`: The amount of tokens to transfer.\\n    /// - `feeToken`: The token address used to pay for the cross-chain operation fees.\\n    /// - `transactionDeadline`: The deadline before which the transaction must be completed.\\n    /// @return bytes32 A unique transaction ID for tracking the cross-chain operation.\\n    function transferTokenToChain(TransferToChainDetails memory details) external payable returns (bytes32);\\n\\n    /// @notice Allows users to perform a series of token swaps before a cross-chain transfer.\\n    /// @dev Users need to provide swap routes and transfer details. First, the user's tokens are swapped for the target token, then the cross-chain transfer is performed.\\n    /// @param details The details of the swap and cross-chain transfer, including:\\n    /// - `swapRoutes`: An array of token swap route details.\\n    /// - `transferDetails`: The details of the cross-chain transfer.\\n    /// - `totalAmountIn`: The total amount of tokens input for all swap routes.\\n    /// - `isCrossChain`: Flag indicating whether a cross-chain operation is to be performed.\\n    /// @return bytes32 A unique transaction ID for tracking the cross-chain operation.\\n    function swapAndTransferTokenToChain(CombinedSwapAndTransfer memory details) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenMirror.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Token Mirror Interface\\n/// @notice Interface definition for managing cross-chain token \\\"mirrors\\\"\\ninterface ITokenMirror {\\n    /// @dev Token mirror data structure\\n    struct TokenMirrorData {\\n        address sourcePoolAddress; /// @notice The pool address on the source chain\\n        address mirroredPoolAddress; /// @notice The mirrored pool address on the target chain\\n        uint8 sourceDecimals; /// @notice The number of decimal places for the token on the source chain\\n        uint8 mirroredDecimals; /// @notice The number of decimal places for the mirrored token on the target chain\\n    }\\n\\n    /**\\n     * @dev Event triggered when a token mirror is configured\\n     * @param token The token address on the source chain\\n     * @param targetChainId The ID of the target chain\\n     * @param sourcePoolAddress The pool address on the source chain\\n     * @param mirroredPoolAddress The mirrored pool address on the target chain\\n     * @param sourceDecimals The number of decimal places for the token on the source chain\\n     * @param mirroredDecimals The number of decimal places for the mirrored token on the target chain\\n     */\\n    event TokenMirrorConfigured(\\n        address indexed token,\\n        uint64 indexed targetChainId,\\n        address sourcePoolAddress,\\n        address mirroredPoolAddress,\\n        uint8 sourceDecimals,\\n        uint8 mirroredDecimals\\n    );\\n\\n    /// @notice Configure cross-chain token mirror data\\n    /// @param token The token address on the source chain\\n    /// @param targetChainId The ID of the target chain\\n    /// @param mirroredPoolAddress The mirrored pool address on the target chain\\n    /// @param mirroredTokenDecimals The number of decimal places for the mirrored token on the target chain\\n    function configureTokenMirror(address token, uint64 targetChainId, address mirroredPoolAddress, uint8 mirroredTokenDecimals) external;\\n\\n    /// @notice Retrieve mirror data for a specified token and target chain\\n    /// @param token The token address on the source chain\\n    /// @param targetChainId The ID of the target chain\\n    /// @return The mirror data for the token\\n    function getMirrorData(address token, uint64 targetChainId) external view returns (TokenMirrorData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PrecisionConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\n/// @title Precision Conversion Library\\n/// @notice A library for converting the precision of token amounts\\nlibrary PrecisionConverter {\\n    /**\\n     * @dev Converts the amount of Token A to the precision of Token B.\\n     * @param amountA The amount of Token A.\\n     * @param precisionA The precision (number of decimal places) of Token A.\\n     * @param precisionB The precision (number of decimal places) of Token B.\\n     * @return amountB The converted amount in Token B's precision.\\n     */\\n    function convertPrecision(uint256 amountA, uint8 precisionA, uint8 precisionB) internal pure returns (uint256 amountB) {\\n        // Ensure the given precision A is within a valid range\\n        require(precisionA != 0 && precisionA <= 18, \\\"PrecisionConverter: Precision A too high\\\");\\n        // Ensure the given precision B is within a valid range\\n        require(precisionB != 0 && precisionB <= 18, \\\"PrecisionConverter: Precision B too high\\\");\\n\\n        // If the precision of both tokens is the same, return the amount as is\\n        if (precisionA == precisionB) {\\n            return amountA;\\n        }\\n        // If the precision of Token A is less than Token B, multiply by the difference\\n        else if (precisionA < precisionB) {\\n            return amountA * (10 ** (precisionB - precisionA));\\n        }\\n        // If the precision of Token A is greater than Token B, divide by the difference\\n        else {\\n            return amountA / (10 ** (precisionA - precisionB));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccipRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"ChainSupportUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"targetChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CrossChainTransferError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"originChainId\",\"type\":\"uint64\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"targetChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMessengerSender\",\"type\":\"address\"}],\"name\":\"MessengerSenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinSignatures\",\"type\":\"uint256\"}],\"name\":\"MinSignaturesRequiredUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"OperatorStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensToAdd\",\"type\":\"address[]\"}],\"name\":\"addSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"distributePoolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getMessengerForChain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"}],\"name\":\"getSourceMessageStatus\",\"outputs\":[{\"internalType\":\"enum ICrossChainMessenger.OperationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedChains\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"}],\"name\":\"getTransferByMsgId\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainMessenger.CrossChainTransferDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"targetChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLPFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainMessenger.SourceChainTransfer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSignaturesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"targetChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigDatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"processPoolRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainMessenger.CrossChainTransferDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"targetChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLPFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainMessenger.SourceChainTransfer\",\"name\":\"sourceTransferDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossChainFee\",\"type\":\"uint256\"}],\"name\":\"processTokenTransferToChain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"refundedMsgIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensToRemove\",\"type\":\"address[]\"}],\"name\":\"removeTokensFromSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_messengerSender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"setChainInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSignatures\",\"type\":\"uint256\"}],\"name\":\"setMinSignaturesRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeRouter\",\"type\":\"address\"}],\"name\":\"setTradeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrossChainMessenger", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000536d7e53d0adeb1f20e7c81fea45d02ec9dbd698", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}