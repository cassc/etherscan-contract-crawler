{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Commander DeFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n* Dedicated to the rugged MSMI community, reborn into the hands of the Commander. XOXO. King.                                                                                          \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\nimport \\u0027Ownable.sol\\u0027;\\nimport \\u0027SafeMath.sol\\u0027;\\nimport \\u0027Address.sol\\u0027;\\nimport \\u0027IERC20.sol\\u0027;\\n\\ncontract CommanderDefi is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address =\\u003e uint256) private _rOwned;\\n    mapping (address =\\u003e uint256) private _tOwned;\\n    mapping (address =\\u003e uint256) public totalTokensTransferred;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    mapping (address =\\u003e bool) private _isExcludedFromFee;\\n\\n    mapping (address =\\u003e bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    struct ValuesResult {\\n        uint256 tTransferAmount;\\n        uint256 tFee;\\n        uint256 tLiquidity;\\n        uint256 tCommunity;\\n        uint256 tMaintenance;\\n        uint256 tLiquidityWallet;\\n        uint256 rAmount;\\n        uint256 rTransferAmount;\\n        uint256 rFee;\\n        uint256 rLiquidity;\\n        uint256 rCommunity;\\n        uint256 rMaintenance;\\n        uint256 rLiquidityWallet;\\n    }\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _tTotal = 100**7 * 10**18;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\n    string private constant _name = \\\"Commander DeFi\\\";\\n    string private constant _symbol = \\\"COMFI\\\";\\n    uint8 private constant _decimals = 18;\\n    \\n    // fees\\n    uint256 public _taxFee = 100;\\n    uint256 private _previousTaxFee = _taxFee;\\n    \\n    uint256 public _communityFee = 300;\\n    uint256 private _previousCommunityFee = _communityFee;\\n\\n    uint256 public _maintenanceFee = 300;\\n    uint256 private _previousMaintenanceFee = _maintenanceFee;\\n\\n    uint256 public _liquidityWalletFee = 300;\\n    uint256 private _previousliquidityWalletFee = _liquidityWalletFee;\\n\\n    uint256 public _maxTxAmount = 540 * 10**3 * 10**18; // 0.005\\n\\n    event TaxFeePercentChanged(uint256 oldValue, uint256 newValue);\\n    event CommunityFeePercentChanged(uint256 oldValue, uint256 newValue);\\n    event MaintenanceFeePercentChanged(uint256 oldValue, uint256 newValue);\\n    event LiquidityWalletFeePercentChanged(uint256 oldValue, uint256 newValue);\\n    event MaxTxPermillChanged(uint256 oldValue, uint256 newValue);\\n\\n\\n    constructor (address payable communityAddress, address payable maintenanceAddress, address payable liquidityWalletAddress) {\\n        _rOwned[owner()] = _rTotal;\\n\\n        // exclude owner and this contract from fee\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        setCommunityAddress(communityAddress);\\n        setMaintenanceAddress(maintenanceAddress);\\n        setLiquidityWalletAddress(liquidityWalletAddress);\\n        \\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function totalRSupply() external view onlyOwner() returns (uint256) {\\n        return _rTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function balanceOfT(address account) external view onlyOwner() returns (uint256) {\\n        return _tOwned[account];\\n    }\\n\\n    function balanceOfR(address account) external view onlyOwner() returns (uint256) {\\n        return _rOwned[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferOwnership(address newOwner) external virtual onlyOwner() {\\n        emit OwnershipTransferred(owner(), newOwner);\\n        _transfer(owner(), newOwner, balanceOf(owner()));\\n        updateOwner(newOwner);\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) external view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromReward(address account) public override onlyOwner(){\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \\u0027We can not exclude Uniswap router.\\u0027);\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] \\u003e 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is already included\\\");\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n    \\n    function excludeFromFee(address account) public override onlyOwner{\\n        _isExcludedFromFee[account] = true;\\n    }\\n    \\n    function includeInFee(address account) external onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner(){\\n        require(taxFee \\u003c= 100, \\\"Cannot set percentage over 1.0%\\\");\\n        emit TaxFeePercentChanged(_taxFee, taxFee);\\n        _taxFee = taxFee;\\n    }\\n\\n    function setCommunityFeePercent(uint256 communityFee) external onlyOwner(){\\n        require(communityFee \\u003c= 300, \\\"Cannot set percentage over 3.00%\\\");\\n        emit CommunityFeePercentChanged(_communityFee, communityFee);\\n        _communityFee = communityFee;\\n    }\\n\\n    function setMaintenanceFeePercent(uint256 maintenanceFee) external onlyOwner(){\\n        require(maintenanceFee \\u003c= 300, \\\"Cannot set percentage over 3.0%\\\");\\n        emit MaintenanceFeePercentChanged(_maintenanceFee, maintenanceFee);\\n        _maintenanceFee = maintenanceFee;\\n    }\\n    \\n    function setLiquidityWalletFeePercent(uint256 liquidityWalletFee) external onlyOwner(){\\n        require(liquidityWalletFee \\u003c= 300, \\\"Cannot set percentage over 3.0%\\\");\\n        emit LiquidityWalletFeePercentChanged(_liquidityWalletFee, liquidityWalletFee);\\n        _liquidityWalletFee = liquidityWalletFee;\\n    }\\n   \\n    function setMaxTxPermill(uint256 maxTxPermill) external onlyOwner(){\\n        emit LiquidityWalletFeePercentChanged(_maxTxAmount, _tTotal.mul(maxTxPermill).div(10**3));\\n        _maxTxAmount = _tTotal.mul(maxTxPermill).div(\\n            10**3\\n        );\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        ValuesResult memory valuesResult = ValuesResult(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\\n\\n        _getTValues(tAmount, valuesResult);\\n        _getRValues(tAmount, valuesResult, _getRate());\\n\\n        return (valuesResult.rAmount, valuesResult.rTransferAmount, valuesResult.rFee, valuesResult.tTransferAmount, valuesResult.tFee, valuesResult.tLiquidity, valuesResult.tCommunity, valuesResult.tMaintenance, valuesResult.tLiquidityWallet);\\n    }\\n\\n    function _getTValues(uint256 tAmount, ValuesResult memory valuesResult) private view returns (ValuesResult memory) {\\n        {\\n            uint256 tFee = calculateTaxFee(tAmount);\\n            valuesResult.tFee = tFee;\\n        }\\n        {\\n            uint256 tCommunity = calculateCommunityFee(tAmount);\\n            valuesResult.tCommunity = tCommunity;\\n        }\\n        {\\n            uint256 tMaintenance = calculateMaintenanceFee(tAmount);\\n            valuesResult.tMaintenance = tMaintenance;\\n        }\\n        {\\n            uint256 tLiquidityWallet = calculateLiquidityWalletFee(tAmount);\\n            valuesResult.tLiquidityWallet = tLiquidityWallet;\\n        }\\n\\n        valuesResult.tTransferAmount = tAmount.sub(valuesResult.tFee).sub(valuesResult.tCommunity).sub(valuesResult.tMaintenance).sub(valuesResult.tLiquidityWallet);\\n        return valuesResult;\\n    }\\n\\n    function _getRValues(uint256 tAmount, ValuesResult memory valuesResult, uint256 currentRate) private pure returns (ValuesResult memory) {\\n        {\\n            uint256 rAmount = tAmount.mul(currentRate);\\n            valuesResult.rAmount = rAmount;\\n        }\\n        {\\n            uint256 rFee = valuesResult.tFee.mul(currentRate);\\n            valuesResult.rFee = rFee;\\n        }\\n        {\\n            uint256 rCommunity = valuesResult.tCommunity.mul(currentRate);\\n            valuesResult.rCommunity = rCommunity;\\n        }\\n        {\\n            uint256 rMaintenance = valuesResult.tMaintenance.mul(currentRate);\\n            valuesResult.rMaintenance = rMaintenance;\\n        }\\n        {\\n            uint256 rLiquidityWallet = valuesResult.tLiquidityWallet.mul(currentRate);\\n            valuesResult.rLiquidityWallet = rLiquidityWallet;\\n        }\\n\\n        valuesResult.rTransferAmount = valuesResult.rAmount.sub(valuesResult.rFee).sub(valuesResult.rCommunity).sub(valuesResult.rMaintenance).sub(valuesResult.rLiquidityWallet);\\n        return (valuesResult);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n    \\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        if(_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n    }\\n    \\n    function _takeCommunity(uint256 tCommunity) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rCommunity = tCommunity.mul(currentRate);\\n        _rOwned[community()] = _rOwned[community()].add(rCommunity);\\n        if(_isExcluded[community()])\\n            _tOwned[community()] = _tOwned[community()].add(tCommunity);\\n    }\\n\\n    function _takeMaintenance(uint256 tMaintenance) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rMaintenance = tMaintenance.mul(currentRate);\\n        _rOwned[maintenance()] = _rOwned[maintenance()].add(rMaintenance);\\n        if(_isExcluded[maintenance()])\\n            _tOwned[maintenance()] = _tOwned[maintenance()].add(tMaintenance);\\n    }\\n    \\n    function _takeLiquidityWallet(uint256 tLiquidityWallet) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidityWallet = tLiquidityWallet.mul(currentRate);\\n        _rOwned[liquidityWallet()] = _rOwned[liquidityWallet()].add(rLiquidityWallet);\\n        if(_isExcluded[liquidityWallet()])\\n            _tOwned[liquidityWallet()] = _tOwned[liquidityWallet()].add(tLiquidityWallet);\\n    }\\n\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxFee).div(\\n            10**4\\n        );\\n    }\\n\\n    function calculateCommunityFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_communityFee).div(\\n            10**4\\n        );\\n    }\\n\\n    function calculateMaintenanceFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_maintenanceFee).div(\\n            10**4\\n        );\\n    }\\n\\n    function calculateLiquidityWalletFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_liquidityWalletFee).div(\\n            10**4\\n        );\\n    }\\n    \\n    function removeAllFee() private {\\n        if(_taxFee == 0) return;\\n        \\n        _previousTaxFee = _taxFee;\\n        _previousCommunityFee = _communityFee;\\n        _previousMaintenanceFee = _maintenanceFee;\\n        _previousliquidityWalletFee = _liquidityWalletFee;\\n        \\n        _taxFee = 0;\\n        _communityFee = 0;\\n        _maintenanceFee = 0;\\n        _liquidityWalletFee = 0;\\n    }\\n    \\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _communityFee = _previousCommunityFee;\\n        _maintenanceFee = _previousMaintenanceFee;\\n        _liquidityWalletFee = _previousliquidityWalletFee;\\n    }\\n    \\n    function isExcludedFromFee(address account) external view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function addTokensTransferred(address wallet, uint256 amount) private {\\n        uint256 rate = _taxFee.add(_communityFee).add(_maintenanceFee).add(_liquidityWalletFee);\\n        totalTokensTransferred[wallet] = totalTokensTransferred[wallet].add(amount.mul(rate).div(10**4));\\n    }\\n\\n    function getTotalTokensTransferredHistory(address wallet) external view returns(uint256 amount){\\n        amount = totalTokensTransferred[wallet];\\n        return amount;\\n    }\\n\\n    /**\\n    * TRANSFER\\n    */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n        if(from != owner() \\u0026\\u0026 to != owner())\\n            require(amount \\u003c= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n        \\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n        \\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\n            takeFee = false;\\n        }\\n\\n        // if fees are calculated, then these amounts will be tracked in totalTokensTransferred[sender]\\n        if(takeFee){\\n            addTokensTransferred(from, amount);\\n        }\\n        \\n        //transfer amount, it will take tax, burn, liquidity fee\\n        _tokenTransfer(from,to,amount,takeFee);\\n    }\\n\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\n        if(!takeFee)\\n            removeAllFee();\\n        \\n        if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n        \\n        if(!takeFee)\\n            restoreAllFee();\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCommunity, uint256 tMaintenance, uint256 tLiquidityWallet) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _takeCommunity(tCommunity);\\n        _takeMaintenance(tMaintenance);\\n        _takeLiquidityWallet(tLiquidityWallet);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCommunity, uint256 tMaintenance, uint256 tLiquidityWallet) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \\n        _takeLiquidity(tLiquidity);\\n        _takeCommunity(tCommunity);\\n        _takeMaintenance(tMaintenance);\\n        _takeLiquidityWallet(tLiquidityWallet);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCommunity, uint256 tMaintenance, uint256 tLiquidityWallet) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\n        _takeLiquidity(tLiquidity);\\n        _takeCommunity(tCommunity);\\n        _takeMaintenance(tMaintenance);\\n        _takeLiquidityWallet(tLiquidityWallet);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCommunity, uint256 tMaintenance, uint256 tLiquidityWallet) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \\n        _takeLiquidity(tLiquidity);\\n        _takeCommunity(tCommunity);\\n        _takeMaintenance(tMaintenance);\\n        _takeLiquidityWallet(tLiquidityWallet);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    /**\\n    * TRANSFER (END)\\n    */\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\ncontract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"Context.sol\\\";\\nimport \\u0027SafeMath.sol\\u0027;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    using SafeMath for uint256;\\n    address private _owner;\\n    address payable private _communityWalletAddress;\\n    address payable private _maintenanceWalletAddress;\\n    address payable private _liquidityWalletAddress;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event CommunityAddressChanged(address oldAddress, address newAddress);\\n    event MaintenanceAddressChanged(address oldAddress, address newAddress);\\n    event LiquidityWalletAddressChanged(address oldAddress, address newAddress);\\n\\n    enum Functions { excludeFromFee }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function updateOwner(address newOwner) internal onlyOwner() {\\n        _owner = newOwner;\\n    }\\n    \\n    function community() public view returns (address payable)\\n    {\\n        return _communityWalletAddress;\\n    }\\n\\n    function maintenance() public view returns (address payable)\\n    {\\n        return _maintenanceWalletAddress;\\n    }\\n\\n    function liquidityWallet() public view returns (address payable)\\n    {\\n        return _liquidityWalletAddress;\\n    }\\n    \\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyCommunity() {\\n        require(_communityWalletAddress == _msgSender(), \\\"Caller is not the community address\\\");\\n        _;\\n    }\\n\\n    modifier onlyMaintenance() {\\n        require(_maintenanceWalletAddress == _msgSender(), \\\"Caller is not the maintenance address\\\");\\n        _;\\n    }\\n\\n     /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function excludeFromReward(address account) public virtual onlyOwner() {\\n    }\\n\\n    function excludeFromFee(address account) public virtual onlyOwner() {\\n    }\\n    \\n    function setCommunityAddress(address payable CommunityAddress) public virtual onlyOwner ()\\n    {\\n        //require(_community == address(0), \\\"Community address cannot be changed once set\\\");\\n        emit CommunityAddressChanged(_communityWalletAddress, CommunityAddress);\\n        _communityWalletAddress = CommunityAddress;\\n        excludeFromReward(CommunityAddress);\\n        excludeFromFee(CommunityAddress);\\n    }\\n\\n    function setMaintenanceAddress(address payable maintenanceAddress) public virtual onlyOwner ()\\n    {\\n        //require(_maintenance == address(0), \\\"Maintenance address cannot be changed once set\\\");\\n        emit MaintenanceAddressChanged(_maintenanceWalletAddress, maintenanceAddress);\\n        _maintenanceWalletAddress = maintenanceAddress;\\n        excludeFromReward(maintenanceAddress);\\n        excludeFromFee(maintenanceAddress);\\n    }\\n\\n    function setLiquidityWalletAddress(address payable liquidityWalletAddress) public virtual onlyOwner ()\\n    {\\n        //require(_maintenance == address(0), \\\"Liquidity address cannot be changed once set\\\");\\n        emit LiquidityWalletAddressChanged(_liquidityWalletAddress, liquidityWalletAddress);\\n        _liquidityWalletAddress = liquidityWalletAddress;\\n        excludeFromReward(liquidityWalletAddress);\\n        excludeFromFee(liquidityWalletAddress);\\n    }\\n\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////\\n*\\n*   _____ ____  __  __ __  __          _   _ _____  ______ _____    _____  ______ ______ _____ \\n*  / ____/ __ \\\\|  \\\\/  |  \\\\/  |   /\\\\   | \\\\ | |  __ \\\\|  ____|  __ \\\\  |  __ \\\\|  ____|  ____|_   _|\\n* | |   | |  | | \\\\  / | \\\\  / |  /  \\\\  |  \\\\| | |  | | |__  | |__) | | |  | | |__  | |__    | |  \\n* | |   | |  | | |\\\\/| | |\\\\/| | / /\\\\ \\\\ | . ` | |  | |  __| |  _  /  | |  | |  __| |  __|   | |  \\n* | |___| |__| | |  | | |  | |/ ____ \\\\| |\\\\  | |__| | |____| | \\\\ \\\\  | |__| | |____| |     _| |_ \\n*  \\\\_____\\\\____/|_|  |_|_|  |_/_/    \\\\_\\\\_| \\\\_|_____/|______|_|  \\\\_\\\\ |_____/|______|_|    |_____|\\n*                                                                                              \\n*                                                                                            \\n*//////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n \\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"communityAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"maintenanceAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"liquidityWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CommunityAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CommunityFeePercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LiquidityWalletAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LiquidityWalletFeePercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MaintenanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaintenanceFeePercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTxPermillChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TaxFeePercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_communityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityWalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maintenanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getTotalTokensTransferredHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"CommunityAddress\",\"type\":\"address\"}],\"name\":\"setCommunityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"communityFee\",\"type\":\"uint256\"}],\"name\":\"setCommunityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"liquidityWalletAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityWalletFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityWalletFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"maintenanceAddress\",\"type\":\"address\"}],\"name\":\"setMaintenanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFee\",\"type\":\"uint256\"}],\"name\":\"setMaintenanceFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPermill\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPermill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokensTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommanderDefi", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000f8be9f87a056185e0c26656f6f7f1f0dcb7446400000000000000000000000091c77ccab4eb878782702779e8d6814d68a827ff000000000000000000000000f5877eef86a66a104dd74ea77a99d3b2aeb0e2e6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38c4e2d7aec93d5007eea8b0a108782f82a54249f433886429f03e500e369ec7"}