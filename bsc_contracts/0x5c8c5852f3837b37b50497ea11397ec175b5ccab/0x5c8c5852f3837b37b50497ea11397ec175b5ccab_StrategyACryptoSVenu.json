{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: MasterChef/contracts/strategies/StrategyACryptoSVenusLeverageBnbV4b.sol\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface WETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n}\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function earn(address, uint256) external;\r\n    function want(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function vaults(address) external view returns (address);\r\n    function strategies(address) external view returns (address);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IVenusComptroller {\r\n  function _addVenusMarkets ( address[] calldata vTokens ) external;\r\n  function _become ( address unitroller ) external;\r\n  function _borrowGuardianPaused (  ) external view returns ( bool );\r\n  function _dropVenusMarket ( address vToken ) external;\r\n  function _mintGuardianPaused (  ) external view returns ( bool );\r\n  function _setCloseFactor ( uint256 newCloseFactorMantissa ) external returns ( uint256 );\r\n  function _setCollateralFactor ( address vToken, uint256 newCollateralFactorMantissa ) external returns ( uint256 );\r\n  function _setLiquidationIncentive ( uint256 newLiquidationIncentiveMantissa ) external returns ( uint256 );\r\n  function _setMaxAssets ( uint256 newMaxAssets ) external returns ( uint256 );\r\n  function _setPauseGuardian ( address newPauseGuardian ) external returns ( uint256 );\r\n  function _setPriceOracle ( address newOracle ) external returns ( uint256 );\r\n  function _setProtocolPaused ( bool state ) external returns ( bool );\r\n  function _setVAIController ( address vaiController_ ) external returns ( uint256 );\r\n  function _setVAIMintRate ( uint256 newVAIMintRate ) external returns ( uint256 );\r\n  function _setVenusRate ( uint256 venusRate_ ) external;\r\n  function _supportMarket ( address vToken ) external returns ( uint256 );\r\n  function accountAssets ( address, uint256 ) external view returns ( address );\r\n  function admin (  ) external view returns ( address );\r\n  function allMarkets ( uint256 ) external view returns ( address );\r\n  function borrowAllowed ( address vToken, address borrower, uint256 borrowAmount ) external returns ( uint256 );\r\n  function borrowGuardianPaused ( address ) external view returns ( bool );\r\n  function borrowVerify ( address vToken, address borrower, uint256 borrowAmount ) external;\r\n  function checkMembership ( address account, address vToken ) external view returns ( bool );\r\n  function claimVenus ( address holder, address[] calldata vTokens ) external;\r\n  function claimVenus ( address holder ) external;\r\n  function claimVenus ( address[] calldata holders, address[] calldata vTokens, bool borrowers, bool suppliers ) external;\r\n  function closeFactorMantissa (  ) external view returns ( uint256 );\r\n  function comptrollerImplementation (  ) external view returns ( address );\r\n  function enterMarkets ( address[] calldata vTokens ) external returns ( uint256[] memory );\r\n  function exitMarket ( address vTokenAddress ) external returns ( uint256 );\r\n  function getAccountLiquidity ( address account ) external view returns ( uint256, uint256, uint256 );\r\n  function getAllMarkets (  ) external view returns ( address[] memory );\r\n  function getAssetsIn ( address account ) external view returns ( address[] memory );\r\n  function getBlockNumber (  ) external view returns ( uint256 );\r\n  function getHypotheticalAccountLiquidity ( address account, address vTokenModify, uint256 redeemTokens, uint256 borrowAmount ) external view returns ( uint256, uint256, uint256 );\r\n  function getMintableVAI ( address minter ) external view returns ( uint256, uint256 );\r\n  function getVAIMintRate (  ) external view returns ( uint256 );\r\n  function getXVSAddress (  ) external view returns ( address );\r\n  function isComptroller (  ) external view returns ( bool );\r\n  function liquidateBorrowAllowed ( address vTokenBorrowed, address vTokenCollateral, address liquidator, address borrower, uint256 repayAmount ) external returns ( uint256 );\r\n  function liquidateBorrowVerify ( address vTokenBorrowed, address vTokenCollateral, address liquidator, address borrower, uint256 actualRepayAmount, uint256 seizeTokens ) external;\r\n  function liquidateCalculateSeizeTokens ( address vTokenBorrowed, address vTokenCollateral, uint256 actualRepayAmount ) external view returns ( uint256, uint256 );\r\n  function liquidationIncentiveMantissa (  ) external view returns ( uint256 );\r\n  function markets ( address ) external view returns ( bool isListed, uint256 collateralFactorMantissa, bool isVenus );\r\n  function maxAssets (  ) external view returns ( uint256 );\r\n  function mintAllowed ( address vToken, address minter, uint256 mintAmount ) external returns ( uint256 );\r\n  function mintGuardianPaused ( address ) external view returns ( bool );\r\n  function mintVAI ( uint256 mintVAIAmount ) external returns ( uint256 );\r\n  function mintVAIGuardianPaused (  ) external view returns ( bool );\r\n  function mintVerify ( address vToken, address minter, uint256 actualMintAmount, uint256 mintTokens ) external;\r\n  function mintedVAIOf ( address owner ) external view returns ( uint256 );\r\n  function mintedVAIs ( address ) external view returns ( uint256 );\r\n  function oracle (  ) external view returns ( address );\r\n  function pauseGuardian (  ) external view returns ( address );\r\n  function pendingAdmin (  ) external view returns ( address );\r\n  function pendingComptrollerImplementation (  ) external view returns ( address );\r\n  function protocolPaused (  ) external view returns ( bool );\r\n  function redeemAllowed ( address vToken, address redeemer, uint256 redeemTokens ) external returns ( uint256 );\r\n  function redeemVerify ( address vToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens ) external;\r\n  function refreshVenusSpeeds (  ) external;\r\n  function repayBorrowAllowed ( address vToken, address payer, address borrower, uint256 repayAmount ) external returns ( uint256 );\r\n  function repayBorrowVerify ( address vToken, address payer, address borrower, uint256 actualRepayAmount, uint256 borrowerIndex ) external;\r\n  function repayVAI ( uint256 repayVAIAmount ) external returns ( uint256 );\r\n  function repayVAIGuardianPaused (  ) external view returns ( bool );\r\n  function seizeAllowed ( address vTokenCollateral, address vTokenBorrowed, address liquidator, address borrower, uint256 seizeTokens ) external returns ( uint256 );\r\n  function seizeGuardianPaused (  ) external view returns ( bool );\r\n  function seizeVerify ( address vTokenCollateral, address vTokenBorrowed, address liquidator, address borrower, uint256 seizeTokens ) external;\r\n  function setMintedVAIOf ( address owner, uint256 amount ) external returns ( uint256 );\r\n  function transferAllowed ( address vToken, address src, address dst, uint256 transferTokens ) external returns ( uint256 );\r\n  function transferGuardianPaused (  ) external view returns ( bool );\r\n  function transferVerify ( address vToken, address src, address dst, uint256 transferTokens ) external;\r\n  function vaiController (  ) external view returns ( address );\r\n  function vaiMintRate (  ) external view returns ( uint256 );\r\n  function venusAccrued ( address ) external view returns ( uint256 );\r\n  // function venusBorrowState ( address ) external view returns ( uint224 index, uint32 block );\r\n  function venusBorrowerIndex ( address, address ) external view returns ( uint256 );\r\n  function venusClaimThreshold (  ) external view returns ( uint256 );\r\n  function venusInitialIndex (  ) external view returns ( uint224 );\r\n  function venusRate (  ) external view returns ( uint256 );\r\n  function venusSpeeds ( address ) external view returns ( uint256 );\r\n  function venusSupplierIndex ( address, address ) external view returns ( uint256 );\r\n  // function venusSupplyState ( address ) external view returns ( uint224 index, uint32 block );\r\n\r\n  function borrowCaps ( address ) external view returns ( uint256 );\r\n  function treasuryPercent (  ) external view returns ( uint256 );\r\n}\r\n\r\ninterface IVBNB {\r\n  function _acceptAdmin (  ) external returns ( uint256 );\r\n  function _reduceReserves ( uint256 reduceAmount ) external returns ( uint256 );\r\n  function _setComptroller ( address newComptroller ) external returns ( uint256 );\r\n  function _setInterestRateModel ( address newInterestRateModel ) external returns ( uint256 );\r\n  function _setPendingAdmin ( address newPendingAdmin ) external returns ( uint256 );\r\n  function _setReserveFactor ( uint256 newReserveFactorMantissa ) external returns ( uint256 );\r\n  function accrualBlockNumber (  ) external view returns ( uint256 );\r\n  function accrueInterest (  ) external returns ( uint256 );\r\n  function admin (  ) external view returns ( address );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 );\r\n  function approve ( address spender, uint256 amount ) external returns ( bool );\r\n  function balanceOf ( address owner ) external view returns ( uint256 );\r\n  function balanceOfUnderlying ( address owner ) external returns ( uint256 );\r\n  function borrow ( uint256 borrowAmount ) external returns ( uint256 );\r\n  function borrowBalanceCurrent ( address account ) external returns ( uint256 );\r\n  function borrowBalanceStored ( address account ) external view returns ( uint256 );\r\n  function borrowIndex (  ) external view returns ( uint256 );\r\n  function borrowRatePerBlock (  ) external view returns ( uint256 );\r\n  function comptroller (  ) external view returns ( address );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function exchangeRateCurrent (  ) external returns ( uint256 );\r\n  function exchangeRateStored (  ) external view returns ( uint256 );\r\n  function getAccountSnapshot ( address account ) external view returns ( uint256, uint256, uint256, uint256 );\r\n  function getCash (  ) external view returns ( uint256 );\r\n  function initialize ( address comptroller_, address interestRateModel_, uint256 initialExchangeRateMantissa_, string calldata name_, string calldata symbol_, uint8 decimals_ ) external;\r\n  function interestRateModel (  ) external view returns ( address );\r\n  function isVToken (  ) external view returns ( bool );\r\n  function liquidateBorrow ( address borrower, address vTokenCollateral ) external payable;\r\n  function mint (  ) external payable;\r\n  function name (  ) external view returns ( string memory );\r\n  function pendingAdmin (  ) external view returns ( address );\r\n  function redeem ( uint256 redeemTokens ) external returns ( uint256 );\r\n  function redeemUnderlying ( uint256 redeemAmount ) external returns ( uint256 );\r\n  function repayBorrow (  ) external payable;\r\n  function repayBorrowBehalf ( address borrower ) external payable;\r\n  function reserveFactorMantissa (  ) external view returns ( uint256 );\r\n  function seize ( address liquidator, address borrower, uint256 seizeTokens ) external returns ( uint256 );\r\n  function supplyRatePerBlock (  ) external view returns ( uint256 );\r\n  function symbol (  ) external view returns ( string memory );\r\n  function totalBorrows (  ) external view returns ( uint256 );\r\n  function totalBorrowsCurrent (  ) external returns ( uint256 );\r\n  function totalReserves (  ) external view returns ( uint256 );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function transfer ( address dst, uint256 amount ) external returns ( bool );\r\n  function transferFrom ( address src, address dst, uint256 amount ) external returns ( bool );\r\n}\r\n\r\n\r\ncontract StrategyACryptoSVenusLeverageBnbV4b {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    address public constant xvs = address(0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63);\r\n    address public constant venusComptroller = address(0xfD36E2c2a6789Db23113685031d7F16329158384);\r\n\r\n    address public want;\r\n    address public vToken;\r\n    address public uniswapRouter;\r\n    address[] public xvsToWantPath;\r\n    uint256 public targetBorrowLimit;\r\n    uint256 public targetBorrowLimitHysteresis;\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n\r\n    uint256 public performanceFee;\r\n    uint256 public strategistReward;\r\n    uint256 public withdrawalFee;\r\n    uint256 public harvesterReward;\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n    bool public venusRedemptionFeeActive;\r\n\r\n    bool public paused;\r\n\r\n    constructor(address _governance, address _strategist, address _controller, address _want, address _vToken, uint _targetBorrowLimit, uint _targetBorrowLimitHysteresis, address _uniswapRouter, address[] memory _xvsToWantPath, bool _venusRedemptionFeeActive) public {\r\n        performanceFee = 450;\r\n        strategistReward = 50;\r\n        withdrawalFee = 50;\r\n        harvesterReward = 30;\r\n\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n\r\n        want = _want;\r\n        vToken = _vToken;\r\n        targetBorrowLimit = _targetBorrowLimit;\r\n        targetBorrowLimitHysteresis = _targetBorrowLimitHysteresis;\r\n        uniswapRouter = _uniswapRouter;\r\n        xvsToWantPath = _xvsToWantPath;\r\n        venusRedemptionFeeActive = _venusRedemptionFeeActive;\r\n\r\n        address[] memory _markets = new address[](1);\r\n        _markets[0] = vToken;\r\n        IVenusComptroller(venusComptroller).enterMarkets(_markets);\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyACryptoSVenusLeverageBnbV4b\";\r\n    }\r\n\r\n    function deposit() public {\r\n      uint256 _want = IERC20(want).balanceOf(address(this));\r\n      if (_want > 0) {\r\n        _supplyWant();\r\n        _rebalance(0);\r\n      }\r\n    }\r\n\r\n    function _supplyWant() internal {\r\n      if(paused) return;\r\n      WETH(want).withdraw(IERC20(want).balanceOf(address(this)));\r\n      IVBNB(vToken).mint{value: address(this).balance}();\r\n    }\r\n\r\n    function _claimXvs() internal {\r\n      address[] memory _markets = new address[](1);\r\n      _markets[0] = vToken;\r\n      IVenusComptroller(venusComptroller).claimVenus(address(this), _markets);\r\n    }\r\n\r\n\r\n    function _rebalance(uint withdrawAmount) internal {\r\n      uint256 _ox = IVBNB(vToken).balanceOfUnderlying(address(this));\r\n      if(_ox == 0) return;\r\n      if(withdrawAmount >= _ox) withdrawAmount = _ox.sub(1);\r\n      uint256 _x = _ox.sub(withdrawAmount);\r\n      uint256 _y = IVBNB(vToken).borrowBalanceCurrent(address(this));\r\n      uint256 _c = _collateralFactor();\r\n      uint256 _L = _c.mul(targetBorrowLimit).div(1e18);\r\n      uint256 _currentL = _y.mul(1e18).div(_x);\r\n      uint256 _liquidityAvailable = IVBNB(vToken).getCash();\r\n\r\n      if(_currentL < _L && _L.sub(_currentL) > targetBorrowLimitHysteresis) {\r\n        uint256 _dy = _L.mul(_x).div(1e18).sub(_y).mul(1e18).div(uint256(1e18).sub(_L));\r\n        uint256 _max_dy = _ox.mul(_c).div(1e18).sub(_y);\r\n\r\n        if(_dy > _max_dy) _dy = _max_dy;\r\n        if(_dy > _liquidityAvailable) _dy = _liquidityAvailable;\r\n\r\n        uint256 _borrowCap = IVenusComptroller(venusComptroller).borrowCaps(vToken);\r\n        if (_borrowCap != 0) {\r\n            uint _maxBorrowCap = 0;\r\n            uint _totalBorrows = IVBNB(vToken).totalBorrows();\r\n            if(_totalBorrows < _borrowCap.sub(1)) {\r\n              _maxBorrowCap = _borrowCap.sub(1).sub(_totalBorrows);\r\n            }\r\n            if(_dy > _maxBorrowCap) _dy = _maxBorrowCap;\r\n        }\r\n\r\n        if(_dy > 0) {\r\n          IVBNB(vToken).borrow(_dy);\r\n          _supplyWant();\r\n        }\r\n      } else {\r\n        uint256 _fee = _venusRedemptionFee();\r\n        while(_currentL > _L && _currentL.sub(_L) > targetBorrowLimitHysteresis) {\r\n          uint256 _dy = _y.sub(_L.mul(_x).div(1e18)).mul(1e18).div(uint256(1e18).sub(_L));\r\n          uint256 _dx = _dy.mul(1e18).div(uint256(1e18).sub(_fee));\r\n          uint256 _max_dx = _ox.sub(_y.mul(1e18).div(_c));\r\n          if(_dx > _max_dx) _dx = _max_dx;\r\n          if(_dx > _liquidityAvailable) _dx = _liquidityAvailable;\r\n          require(IVBNB(vToken).redeemUnderlying(_dx) == 0, \"_rebalance: redeem failed\");\r\n\r\n          _dy = address(this).balance;\r\n\r\n          _ox = _ox.sub(_dx);\r\n          if(withdrawAmount >= _ox) withdrawAmount = _ox.sub(1);\r\n          _x = _ox.sub(withdrawAmount);\r\n\r\n          if(_dy > _y) _dy = _y;\r\n          IVBNB(vToken).repayBorrow{value: _dy}();\r\n          _y = _y.sub(_dy);\r\n\r\n          _currentL = _y.mul(1e18).div(_x);\r\n          _liquidityAvailable = IVBNB(vToken).getCash();\r\n        }\r\n      }\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n      require(msg.sender == controller, \"!controller\");\r\n\r\n      uint256 _balance = IERC20(want).balanceOf(address(this));\r\n      if (_balance < _amount) {\r\n          _amount = _withdrawSome(_amount.sub(_balance));\r\n          _amount = _amount.add(_balance);\r\n      }\r\n\r\n      uint256 _fee = _amount.mul(withdrawalFee).div(FEE_DENOMINATOR);\r\n      IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\r\n      address _vault = IController(controller).vaults(address(want));\r\n      require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n      IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\r\n      uint256 _amountToRedeem = _amount.mul(1e18).div(uint256(1e18).sub(_venusRedemptionFee()));\r\n      _rebalance(_amountToRedeem);\r\n      require(IVBNB(vToken).redeemUnderlying(_amountToRedeem) == 0, \"_withdrawSome: redeem failed\");\r\n      WETH(want).deposit{value: _amount}();\r\n      return _amount;\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n      require(msg.sender == controller || msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n      _withdrawAll();\r\n\r\n      balance = IERC20(want).balanceOf(address(this));\r\n\r\n      address _vault = IController(controller).vaults(address(want));\r\n      require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n      IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n      targetBorrowLimit = 0;\r\n      targetBorrowLimitHysteresis = 0;\r\n      _rebalance(0);\r\n      require(IVBNB(vToken).redeem(IVBNB(vToken).balanceOf(address(this))) == 0, \"_withdrawAll: redeem failed\");\r\n      WETH(want).deposit{value: address(this).balance}();\r\n    }\r\n\r\n    function _convertRewardsToWant() internal {\r\n      uint256 _xvs = IERC20(xvs).balanceOf(address(this));\r\n      if(_xvs > 0 ) {\r\n        IERC20(xvs).safeApprove(uniswapRouter, 0);\r\n        IERC20(xvs).safeApprove(uniswapRouter, _xvs);\r\n\r\n        IUniswapRouter(uniswapRouter).swapExactTokensForTokens(_xvs, uint256(0), xvsToWantPath, address(this), now.add(1800));\r\n      }\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfStakedWant() public view returns (uint256) {\r\n      return IVBNB(vToken).balanceOf(address(this)).mul(IVBNB(vToken).exchangeRateStored()).div(1e18)\r\n        .mul(uint256(1e18).sub(_venusRedemptionFee())).div(1e18)\r\n        .sub(IVBNB(vToken).borrowBalanceStored(address(this)));\r\n    }\r\n\r\n    function balanceOfStakedWantCurrent() public returns (uint256) {\r\n      return IVBNB(vToken).balanceOfUnderlying(address(this))\r\n        .mul(uint256(1e18).sub(_venusRedemptionFee())).div(1e18)\r\n        .sub(IVBNB(vToken).borrowBalanceCurrent(address(this)));\r\n    }\r\n\r\n    function borrowLimit() public returns (uint256) {\r\n      return IVBNB(vToken).borrowBalanceCurrent(address(this))\r\n        .mul(1e18).div(IVBNB(vToken).balanceOfUnderlying(address(this)).mul(_collateralFactor()).div(1e18));\r\n    }\r\n\r\n    function _collateralFactor() internal view returns (uint256) {\r\n      (,uint256 _cf,) = IVenusComptroller(venusComptroller).markets(vToken);\r\n      return _cf;\r\n    }\r\n\r\n    function _venusRedemptionFee() internal view returns (uint256) {\r\n      if(!venusRedemptionFeeActive) return 0;\r\n      return venusRedemptionFeeActive ? IVenusComptroller(venusComptroller).treasuryPercent() : 0;\r\n    }\r\n\r\n    function harvest() public returns (uint harvesterRewarded) {\r\n      require(msg.sender == tx.origin, \"not eoa\");\r\n\r\n      uint _xvs = IERC20(xvs).balanceOf(address(this)); \r\n      _claimXvs();\r\n      _xvs = IERC20(xvs).balanceOf(address(this)).sub(_xvs); \r\n\r\n      uint256 _harvesterReward;\r\n      if (_xvs > 0) {\r\n        uint256 _fee = _xvs.mul(performanceFee).div(FEE_DENOMINATOR);\r\n        uint256 _reward = _xvs.mul(strategistReward).div(FEE_DENOMINATOR);\r\n        _harvesterReward = _xvs.mul(harvesterReward).div(FEE_DENOMINATOR);\r\n        IERC20(xvs).safeTransfer(IController(controller).rewards(), _fee);\r\n        IERC20(xvs).safeTransfer(strategist, _reward);\r\n        IERC20(xvs).safeTransfer(msg.sender, _harvesterReward);\r\n      }\r\n\r\n      if(want != xvs) _convertRewardsToWant();\r\n      _supplyWant();\r\n      _rebalance(0);\r\n\r\n      return _harvesterReward;\r\n    }\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n      return balanceOfWant()\r\n        .add(balanceOfStakedWant());\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategistReward(uint256 _strategistReward) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        strategistReward = _strategistReward;\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!authorized\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setHarvesterReward(uint256 _harvesterReward) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        harvesterReward = _harvesterReward;\r\n    }\r\n\r\n    function setTargetBorrowLimit(uint256 _targetBorrowLimit, uint256 _targetBorrowLimitHysteresis) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        targetBorrowLimit = _targetBorrowLimit;\r\n        targetBorrowLimitHysteresis = _targetBorrowLimitHysteresis;\r\n    }\r\n\r\n    function setUniswapRouter(address _uniswapRouter, address[] memory _xvsToWantPath) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        uniswapRouter = _uniswapRouter;\r\n        xvsToWantPath = _xvsToWantPath;\r\n    }\r\n\r\n    function setVenusRedemptionFeeActive(bool _venusRedemptionFeeActive) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        venusRedemptionFeeActive = _venusRedemptionFeeActive;\r\n    }\r\n\r\n    function pause() external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        _withdrawAll();\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        paused = false;\r\n    }\r\n\r\n    //In case anything goes wrong - Venus contracts are upgradeable and we have no guarantees how they might change.\r\n    //This does not increase user risk. Governance already controls funds via strategy upgrade, and is behind timelock and/or multisig.\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public payable returns (bytes memory) {\r\n        require(msg.sender == governance, \"!governance\");\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        return returnData;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetBorrowLimitHysteresis\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_xvsToWantPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_venusRedemptionFeeActive\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfStakedWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfStakedWantCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"harvesterRewarded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvesterReward\",\"type\":\"uint256\"}],\"name\":\"setHarvesterReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategistReward\",\"type\":\"uint256\"}],\"name\":\"setStrategistReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetBorrowLimitHysteresis\",\"type\":\"uint256\"}],\"name\":\"setTargetBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_xvsToWantPath\",\"type\":\"address[]\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_venusRedemptionFeeActive\",\"type\":\"bool\"}],\"name\":\"setVenusRedemptionFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetBorrowLimitHysteresis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusComptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusRedemptionFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xvs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xvsToWantPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StrategyACryptoSVenusLeverageBnbV4b", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b9a81e121d8c9d619682bb9ddb6823439178f2f8000000000000000000000000b9a81e121d8c9d619682bb9ddb6823439178f2f8000000000000000000000000d95b9c08285045393862607d6e5fc2d95b9ce129000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000a07c5b74c9b40447a954e1466938b865b6bbea360000000000000000000000000000000000000000000000000d2f13f7789f0000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cf6bb5389c92bdda8a3747ddb454cb7a64626c63000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d47c9aff3e08e2ffcba7434156eb92961e20b8a2c81de37ec98a697247b2ab2f"}