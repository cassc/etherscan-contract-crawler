{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-15\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-06-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-06-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n}\r\n\r\n\r\ncontract MDNToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public iEDFF;\r\n    mapping (address => bool) public iEDBF;\r\n    mapping (address => uint) public lastAddLqTimes;\r\n\r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal = 21000000 * 10 ** 18;\r\n\r\n    string private _name = \"MDN\";\r\n    string private _symbol = \"MDN\";\r\n\r\n    uint public  _lpFee = 2000;\r\n    uint public _burnFee = 601;\r\n    uint public _burnFeeWithTransfer = 400;\r\n\r\n    uint public lpTxAmount = 10000000e18;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    bool inSwapAndLiquify;\r\n    address public uniswapV2Pair;\r\n    address public token;\r\n\r\n    uint public isLiquidityAmount = 1e18;\r\n\r\n    uint public startTime;\r\n\r\n    uint public maxTimes = 4400;\r\n\r\n    address public myCaller;\r\n    address public nftA;\r\n    address public nftB;\r\n    address public station;\r\n    address public marketA;\r\n    address public marketB;\r\n    address public marketC;\r\n    address public marketD;\r\n    address public lpBurnWallet;\r\n    mapping(address => uint256) public userBuyTime;\r\n    mapping(address => uint256) public userBuyAmount;\r\n\r\n    uint public _lockTime = 3600*24;\r\n    //selltime\r\n    uint public _lockAmount = 2000 * 1e18;\r\n    uint public  subAddressAmount = 3600 *12;\r\n    address public subAddressAddress = address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3);\r\n    //\u901a\u7f29\u65f6\u95f4\r\n    uint public _minUpdateBal = 10*1e14;\r\n    uint public _minAllBal = 210000 * 10 ** 18;\r\n    constructor (\r\n        address _route,\r\n        address _token,\r\n        address _holder,\r\n\r\n        address  _nftBig,\r\n\r\n        address  _station,\r\n        address  _marketA,\r\n        address  _marketB,\r\n        address  _marketC,\r\n        address  _marketD,\r\n        address _lpBurnWallet)  {\r\n\r\n         nftA =_nftBig;\r\n\r\n         station=_station;\r\n         marketA=_marketA;\r\n         marketB=_marketB;\r\n         marketC=_marketC;\r\n         marketD=_marketD;\r\n         lpBurnWallet=_lpBurnWallet;\r\n\r\n        _tOwned[_holder] = _tTotal;\r\n        myCaller = msg.sender;\r\n        iEDBF[_holder] = true;\r\n        iEDBF[address(this)] = true;\r\n        iEDBF[address(0x0)] = true;\r\n\r\n        iEDBF[nftA] = true;\r\n        iEDBF[station] = true;\r\n        iEDBF[marketA] = true;\r\n        iEDBF[marketB] = true;\r\n        iEDBF[marketC] = true;\r\n        iEDBF[marketD] = true;\r\n        iEDBF[lpBurnWallet] = true;\r\n        iEDBF[address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3)] = true;\r\n        iEDBF[address(0x9ab1ab931146dF98d1F2E6675b9fa162e235c3F4)] = true;\r\n\r\n        iEDBF[address(0x0bEFf44D6a2E9B2D241e3379F3530Bb289871AC2)] = true;\r\n        iEDBF[address(0x368f2d84B9006EBeC0bcC935184f9F5324650551)] = true;\r\n\r\n        iEDBF[address(0x12322AA084Af572aE381591B128102d776DE4418)] = true;\r\n\r\n\r\n        token = _token;\r\n        iEDFF[address(this)] = true;\r\n        iEDFF[_holder] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_route);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), token);\r\n\r\n        require(IUniswapV2Pair(uniswapV2Pair).token1() == address(this), \"invalid token address\");\r\n\r\n        ammPairs[uniswapV2Pair] = true;\r\n        iEDBF[uniswapV2Pair] = true;\r\n\r\n\r\n        iEDFF[nftA] = true;\r\n        iEDFF[station] = true;\r\n        iEDFF[marketA] = true;\r\n        iEDFF[marketB] = true;\r\n        iEDFF[marketC] = true;\r\n        iEDFF[marketD] = true;\r\n        iEDFF[lpBurnWallet] = true;\r\n        iEDFF[address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3)] = true;\r\n        iEDFF[address(0x9ab1ab931146dF98d1F2E6675b9fa162e235c3F4)] = true;\r\n\r\n        iEDFF[address(0x0bEFf44D6a2E9B2D241e3379F3530Bb289871AC2)] = true;\r\n        iEDFF[address(0x368f2d84B9006EBeC0bcC935184f9F5324650551)] = true;\r\n\r\n        iEDFF[address(0x12322AA084Af572aE381591B128102d776DE4418)] = true;\r\n\r\n        _owner = msg.sender;\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n    }\r\n\r\n    function setBEFA( address _eAddress)external onlyOwner{\r\n        iEDBF[_eAddress] = true;\r\n    }\r\n\r\n    function setEFA( address _eAddress)external onlyOwner{\r\n        iEDFF[_eAddress] = true;\r\n    }\r\n\r\n    function setFaBEFA( address _eAddress)external onlyOwner{\r\n        iEDBF[_eAddress] = false;\r\n    }\r\n\r\n    function setFaEFA( address _eAddress)external onlyOwner{\r\n        iEDFF[_eAddress] = false;\r\n    }\r\n\r\n\r\n\r\n    function setmaxTimes(uint _maxTimes)external onlyOwner{\r\n        maxTimes = _maxTimes;\r\n    }\r\n\r\n\r\n    function setIsLiquidityAmount(uint _isLiquidityAmount)external onlyOwner{\r\n        isLiquidityAmount = _isLiquidityAmount;\r\n    }\r\n\r\n\r\n\r\n    function setAmmPair(address pair,bool hasPair)external onlyOwner{\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if( iEDBF[account] || _isContract(account)  ){\r\n            return _tOwned[account];\r\n        }\r\n        uint time = block.timestamp;\r\n        return _balanceOf(account,time);\r\n    }\r\n\r\n\r\n    function getRate(uint a,uint n)private pure returns(uint){\r\n        for( uint i = 0; i < n; i++){\r\n            a = a * 99 / 100;\r\n        }\r\n        return a;\r\n    }\r\n\r\n\r\n    function _balanceOf(address account,uint time)internal view returns(uint){\r\n\r\n        uint bal = _tOwned[account];\r\n        uint balAddr0 = _tOwned[address(0)];\r\n        if ( (_tTotal - balAddr0) <= _minAllBal){\r\n            return bal;\r\n        }\r\n        if( bal >  _minUpdateBal ){\r\n\r\n            uint lastAddLqTime = lastAddLqTimes[account];\r\n\r\n            if( lastAddLqTime > 0 && time > lastAddLqTime ){\r\n                uint i = (time - lastAddLqTime) / subAddressAmount;\r\n                i = i > maxTimes ? maxTimes : i;\r\n                if( i > 0 ){\r\n                    uint v = getRate(bal,i);\r\n                    if( v <= bal && v > 0 ){\r\n                        if (v<=_minUpdateBal){\r\n                            return _minUpdateBal;\r\n                        }\r\n                       return v;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bal;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue,address from,address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _takeAirdrop(uint amount,address from,uint n)internal{\r\n        address ad = address(uint(keccak256(abi.encodePacked(block.timestamp,from,n))));\r\n        _take(amount, from, ad);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    struct Param{\r\n        bool isTrans;\r\n        bool takeFee;\r\n        uint tTransferAmount;\r\n        uint tLp;\r\n        uint tBurn;\r\n        uint tAd;\r\n        bool isSell;\r\n        bool transferFlag;\r\n        uint transferFlagFee;\r\n    }\r\n\r\n\r\n\r\n\r\n    function swapTokensForAward(uint256 tokenAmount,address to) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = token;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _isLiquidity(address from,address to)internal view returns(bool isAdd,bool isDel){\r\n        if( uniswapV2Pair == address(0)) return( false,false);\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( ammPairs[to] ){\r\n            if( token0 != address(this) && bal0 > r0 ){\r\n                isAdd = bal0 - r0 > isLiquidityAmount;\r\n            }\r\n        }\r\n        if( ammPairs[from] ){\r\n            if( token0 != address(this) && bal0 < r0 ){\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateBal(address owner,uint time)internal{\r\n        uint bal = _tOwned[owner];\r\n        if( bal > 0){\r\n            uint updatedBal = _balanceOf(owner,time);\r\n\r\n            if( bal > updatedBal){\r\n                lastAddLqTimes[owner] = time;\r\n                uint ba = bal - updatedBal;\r\n                _tOwned[owner] = _tOwned[owner].sub(ba);\r\n                _tOwned[address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3)] = _tOwned[address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3)].add(ba);\r\n                emit Transfer(owner, address(0xafb57c252074E35b3834E356E751E4AD94D77Bc3), ba);\r\n            }\r\n        }else{\r\n            lastAddLqTimes[owner] = time;\r\n        }\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint time = block.timestamp;\r\n\r\n        require(startTime == 0 || time > startTime + 30 seconds,\"not start\");\r\n\r\n        if( startTime == 0 && ammPairs[to] ){\r\n            startTime = time;\r\n        }\r\n\r\n        if( !iEDBF[from] && !_isContract(from) ){\r\n            _updateBal(from,time);\r\n        }\r\n\r\n        if( !iEDBF[to] && !_isContract(to) ){\r\n            _updateBal(to,time);\r\n        }\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n\r\n        Param memory param;\r\n        bool takeFee = true;\r\n\r\n        if( iEDFF[from] || iEDFF[to] || isAddLiquidity){\r\n//            add\r\n            takeFee = false;\r\n        }\r\n\r\n        if( takeFee ){\r\n            if( isDelLiquidity && ammPairs[from]  ){\r\n//                remove\r\n                param.isTrans = false;\r\n            }else{\r\n//                sell buy transfer\r\n                param.isTrans = true;\r\n            }\r\n        }\r\n\r\n        param.takeFee = takeFee;\r\n\r\n        if (ammPairs[to] && !isAddLiquidity ){\r\n            param.isSell = true;\r\n        }\r\n        if (!ammPairs[to] && !ammPairs[from]){\r\n            param.transferFlag = true;\r\n        }\r\n\r\n        _initParam(amount,param);\r\n        _tokenTransfer(from,to,amount,param);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n\r\n        if( param.isSell){\r\n            uint256 userTime = userBuyTime[sender];\r\n            uint256 userNum = userBuyAmount[sender];\r\n            bool isSellLocking = false;\r\n            isSellLocking = userTime.add(_lockTime) >= block.timestamp;\r\n            (uint res0,uint res1,) =IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n            uint usdtAmount = tAmount * res0 /res1;\r\n\r\n\r\n            if (isSellLocking){\r\n                bool  canSell =( _lockAmount > userNum + usdtAmount)? true:false ;\r\n                require(canSell, \"too much amount to sell\");\r\n                userBuyAmount[sender] =  userBuyAmount[sender] +  usdtAmount;\r\n            }else{\r\n                userBuyAmount[sender] =  usdtAmount;\r\n                userBuyTime[sender]= block.timestamp;\r\n                bool  canSell =( _lockAmount > usdtAmount)? true:false ;\r\n                require(canSell, \"too much amount to sell\");\r\n            }\r\n        }\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function _initParam(uint256 tAmount,Param memory param) private view  {\r\n        uint tFee = 0;\r\n        if( param.takeFee ){\r\n            if( param.isTrans ){\r\n                // buy sell transfer 601\r\n                if( _burnFee > 0 ){\r\n\r\n\r\n                         param.tBurn = tAmount * _burnFee / 10000;\r\n                         tFee = param.tBurn;\r\n                         if (param.transferFlag){\r\n                            param.transferFlagFee = tAmount * _burnFeeWithTransfer / 10000;\r\n                             tFee = tFee.add(param.transferFlagFee);\r\n                         }\r\n                }\r\n\r\n            }else{\r\n                // remove back to mainPair 1000\r\n                if( _lpFee > 0){\r\n                    param.tLp = tAmount * _lpFee / 10000;\r\n                }\r\n                tFee =  param.tLp;\r\n            }\r\n        }\r\n\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from)private {\r\n       if( param.tLp > 0 ){\r\n            _take(param.tLp, from,uniswapV2Pair);\r\n        }\r\n\r\n        if( param.tBurn > 0 ){\r\n\r\n            _take(param.tBurn *1  / 601, from, from);\r\n            _take(param.tBurn *200 / 601, from, nftA);\r\n            _take(param.tBurn *33 / 601 , from, marketA);\r\n            _take(param.tBurn *33 / 601, from, marketB);\r\n            _take(param.tBurn *34 / 601, from, marketC);\r\n            // _take(param.tBurn *25 / 601, from, marketD);\r\n\r\n            uint stationFee =  (param.tBurn *300 / 601).add(param.transferFlagFee);\r\n            _take( stationFee  , from, station);\r\n        }\r\n    }\r\n    function _MyTokenTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n    function _isContract(address a) internal view returns(bool){\r\n        uint256 size;\r\n        assembly {size := extcodesize(a)}\r\n        return size > 0;\r\n    }\r\n    function setSubAddressAmount(uint _subAddressAmount) public onlyOwner {\r\n        subAddressAmount = _subAddressAmount;\r\n    }\r\n\r\n    function set_lockAmount(uint lockAmount) public onlyOwner {\r\n        _lockAmount = lockAmount;\r\n    }\r\n\r\n    function set_minUpdateBal(uint minUpdateBal) public onlyOwner {\r\n        _minUpdateBal = minUpdateBal;\r\n    }\r\n\r\n\r\n    function set_minAllBal(uint minAllBal) public onlyOwner {\r\n        _minAllBal = minAllBal;\r\n    }\r\n\r\n    function set_lockTime(uint lockTime) public onlyOwner {\r\n        _lockTime = lockTime;\r\n    }\r\n    function burnPair() public  {\r\n        require(msg.sender == myCaller,\"myCaller is not valid\");\r\n        uint256 liquidityPairBalance = balanceOf(uniswapV2Pair);\r\n        if(liquidityPairBalance == 0) return;\r\n        uint256 deadAmount = liquidityPairBalance.mul(2).div(1000).div(4);\r\n        uint256 lp2Amount = liquidityPairBalance.mul(6).div(1000).div(4);\r\n        if(deadAmount > 0){\r\n            _MyTokenTransfer(uniswapV2Pair,  address(0), deadAmount);\r\n        }\r\n        if(lp2Amount > 0){\r\n            _MyTokenTransfer(uniswapV2Pair,  address(lpBurnWallet), lp2Amount);\r\n        }\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n    }\r\n}\r\n\r\ncontract MDN is MDNToken {\r\n    constructor() MDNToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), // PancakeSwap: Router v2\r\n        address(0x55d398326f99059fF775485246999027B3197955), // USDT\r\n        address(0x21837cBd4F81403692136C873fb0EDCe851E79e7), // _holder\r\n\r\n        address(0x9d4fFa67c3D082413255Ff60BD00B6dAFA6e1390), // nftbig\r\n\r\n\r\n        address(0x567fc7f930DAE8e91663dAfA04572d60C8F652B0) ,// station\r\n        address(0x45154a85eFc0eBfA53a629578c0cF88308B039a4), // marketA\r\n        address(0xB7Cb5067635f395C8F231F2Dcfd2c8f26A3410D7), // marketB\r\n        address(0x1fbb4064C880D0E36D7c3aA96DedaA7Fa6DB2592) , // marketC\r\n        address(0x1fbb4064C880D0E36D7c3aA96DedaA7Fa6DB2592),// marketD\r\n\r\n        address(0x811729F3d8f4C0E05A54765f12bfda6CE4c3F246) // lpBurnWallet\r\n\r\n    ){\r\n\r\n    }\r\n}\r\n\r\n//  address(0x10ED43C718714eb63d5aA57B78B54704E256024E), // PancakeSwap: Router v2\r\n// address(0x55d398326f99059fF775485246999027B3197955), // USDT\r\n\r\n//   address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1), // PancakeSwap: Router v2\r\n// address(0xc632079f98dBA60003b06DC5a735E75f5BCe185B), // USDT", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeWithTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAllBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minUpdateBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"iEDBF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"iEDFF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAddLqTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setBEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setFaBEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setFaEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_isLiquidityAmount\",\"type\":\"uint256\"}],\"name\":\"setIsLiquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subAddressAmount\",\"type\":\"uint256\"}],\"name\":\"setSubAddressAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"set_lockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"set_lockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAllBal\",\"type\":\"uint256\"}],\"name\":\"set_minAllBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minUpdateBal\",\"type\":\"uint256\"}],\"name\":\"set_minUpdateBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTimes\",\"type\":\"uint256\"}],\"name\":\"setmaxTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"station\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subAddressAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subAddressAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MDN", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be9aaf171e00d9781276b6a1ad2689f5ce9c6c23b36b687b5d35a4f62defa542"}