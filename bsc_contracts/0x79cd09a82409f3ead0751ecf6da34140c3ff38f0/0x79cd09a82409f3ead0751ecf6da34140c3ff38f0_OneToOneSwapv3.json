{"SourceCode": "// SPDX-License-Identifier: No License\n\npragma solidity ^ 0.6 .12;\n\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract OtcStorage is Ownable {\n    \n    mapping(address => mapping(IERC20 => uint256)) public allowances;\n    mapping(address => bool) public whitelistedContracts;\n\n    event QuotaAdded(IERC20 indexed token, address indexed addr, uint256 quota);\n    event QuotaSet(IERC20 indexed token, address indexed addr, uint256 quota);\n    event QuotaRemoved(IERC20 indexed token, address indexed addr, uint256 quota);\n\n    constructor() public {\n\n    }\n\n    function addWhitelistedContract(address contractAddress) external onlyOwner {\n        whitelistedContracts[contractAddress] = true;\n    }\n\n    function removeWhitelistedContract(address contractAddress) external onlyOwner {\n        whitelistedContracts[contractAddress] = false;\n    }\n\n    modifier onlyOwnerOrWhitelistedContract() {\n        require(owner() == msg.sender || whitelistedContracts[msg.sender], \"Caller is not the owner or a whitelisted contract\");\n        _;\n    }\n\n    function addQuotaForSwap(IERC20 token, address[] calldata addresses, uint256[] calldata quotas) external onlyOwner {\n        for (uint256 i=0;i<addresses.length;i++) {\n            uint256 quota = quotas[i];\n            allowances[addresses[i]][token] += quota;\n            emit QuotaAdded(token, addresses[i], quota);\n        }\n    }\n\n    function setQuotaForSwap(IERC20 token, address[] calldata addresses, uint256[] calldata quotas) external onlyOwner {\n        for (uint256 i=0;i<addresses.length;i++) {\n            uint256 quota = quotas[i];\n            allowances[addresses[i]][token] = quota;\n            emit QuotaSet(token, addresses[i], quota);\n        }\n    }\n\n    function removeQuotaForSwap(IERC20 token, address[] calldata addresses, uint256[] calldata quotas) external onlyOwnerOrWhitelistedContract {\n        for (uint256 i=0;i<addresses.length;i++) {\n            uint256 quota = quotas[i];\n\n            require(quota <= allowances[addresses[i]][token], \"Invalid operation\");\n            \n            allowances[addresses[i]][token] -= quota;\n            emit QuotaRemoved(token, addresses[i], quota);\n        }\n    }\n}\n\ncontract OneToOneSwapv3 is Ownable {\n    using SafeMath\n    for uint256;\n\n    struct TokenPair {\n        IERC20 tokenA;\n        IERC20 tokenB;\n        uint256 swapRate;\n        uint256 otcQuotaRate;\n    }\n\n    address public treasury;\n\n    mapping(bytes32 => TokenPair) public tokenPairs;\n    OtcStorage public otcStorage;\n\n    event Swapped(address indexed from, address indexed to, uint256 amount);\n\nevent SwapPending(address indexed tokenA, address indexed tokenB, uint256 amountA);\n\n\n      function setOtcStorage(address otcStorageAddress) external onlyOwner {\n        otcStorage = OtcStorage(otcStorageAddress);\n    }\n\n    function addTokenPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _swapRate,\n        uint256 _otcQuotaRate\n    ) public onlyOwner {\n        bytes32 pairId = keccak256(abi.encodePacked(_tokenA, _tokenB));\n        tokenPairs[pairId] = TokenPair({\n            tokenA: IERC20(_tokenA),\n            tokenB: IERC20(_tokenB),\n            swapRate: _swapRate,\n            otcQuotaRate: _otcQuotaRate\n        });\n    }\n\n   function setTreasury(address _addr) external onlyOwner {\n        treasury = _addr;\n    }\n\n    function updateRates(\n        address _tokenA,\n        address _tokenB,\n        uint256 _newSwapRate,\n        uint256 _newOtcQuotaRate\n    ) public onlyOwner {\n        bytes32 pairId = keccak256(abi.encodePacked(_tokenA, _tokenB));\n        require(\n            address(tokenPairs[pairId].tokenA) != address(0) &&\n            address(tokenPairs[pairId].tokenB) != address(0),\n            \"Token pair not found\"\n        );\n        tokenPairs[pairId].swapRate = _newSwapRate;\n        tokenPairs[pairId].otcQuotaRate = _newOtcQuotaRate;\n    }\n\n\n\nfunction swapDeductOtc(address _tokenA, address _tokenB, uint256 _amountA) public returns (uint8) {\n    bytes32 pairId = keccak256(abi.encodePacked(_tokenA, _tokenB));\n    require(\n        address(tokenPairs[pairId].tokenA) != address(0) &&\n        address(tokenPairs[pairId].tokenB) != address(0),\n        \"Token pair not found\"\n    );\n\n    uint256 amountB = _amountA.mul(tokenPairs[pairId].swapRate).div(10000);\n\n    require(IERC20(_tokenA).allowance(msg.sender, address(this)) >= _amountA, \"TokenA: Transfer amount exceeds allowance\");\n    IERC20(_tokenA).transferFrom(msg.sender, address(this), _amountA);\n    IERC20(_tokenA).transfer(treasury, _amountA);\n\n    // Deduct OTC quota\n    address[] memory addrs = new address[](1);\n    addrs[0] = msg.sender;\n\n    uint256[] memory amounts = new uint256[](1);\n    amounts[0] = _amountA.mul(tokenPairs[pairId].otcQuotaRate).div(10000);\n\n    require(otcStorage.allowances(msg.sender, IERC20(_tokenB)) >= amounts[0], \"Insufficient quota\");\n    otcStorage.removeQuotaForSwap(IERC20(_tokenB), addrs, amounts);\n\n    // Check balance of this contract for _tokenB\n    uint256 balance = IERC20(_tokenB).balanceOf(address(this));\n    if (balance < amountB) {\n        emit SwapPending(_tokenA, _tokenB, _amountA);\n        return 2;\n    }\n\n    require(IERC20(_tokenB).transfer(msg.sender, amountB), \"TokenB: Transfer failed\");\n\n    emit Swapped(_tokenA, _tokenB, _amountA);\n\n    return 1;\n}\n\n\n    function swap(address _tokenA, address _tokenB, uint256 _amountA) public {\n        bytes32 pairId = keccak256(abi.encodePacked(_tokenA, _tokenB));\n        require(\n            address(tokenPairs[pairId].tokenA) != address(0) &&\n            address(tokenPairs[pairId].tokenB) != address(0),\n            \"Token pair not found\"\n        );\n\n        uint256 amountB = _amountA.mul(tokenPairs[pairId].swapRate).div(10000);\n        IERC20(_tokenA).transferFrom(msg.sender, address(this), _amountA);\n        IERC20(_tokenB).transfer(msg.sender, amountB);\n\n         IERC20(_tokenA).transfer(           \n            treasury,\n            _amountA\n        );\n\n        // Deduct OTC quota\n        address[] memory addrs = new address[](1);\n        addrs[0] = msg.sender;\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = _amountA.mul(tokenPairs[pairId].otcQuotaRate).div(10000);\n\n        require(otcStorage.allowances(msg.sender, IERC20(_tokenB)) >= amounts[0], \"Insufficient quota\");\n\n        otcStorage.removeQuotaForSwap(IERC20(_tokenB), addrs, amounts);\n\n        emit Swapped(_tokenA, _tokenB, _amountA);\n    }\n\n     function removeTokenPair(address _tokenA, address _tokenB) public onlyOwner {\n        bytes32 pairId = keccak256(abi.encodePacked(_tokenA, _tokenB));\n        require(\n            address(tokenPairs[pairId].tokenA) != address(0) &&\n                address(tokenPairs[pairId].tokenB) != address(0),\n            \"Token pair not found\"\n        );\n\n        delete tokenPairs[pairId];\n    }\n\n    function withdrawAllFunds(address _token) public onlyOwner {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, balance);\n    }\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"SwapPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_otcQuotaRate\",\"type\":\"uint256\"}],\"name\":\"addTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otcStorage\",\"outputs\":[{\"internalType\":\"contract OtcStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"removeTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otcStorageAddress\",\"type\":\"address\"}],\"name\":\"setOtcStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"}],\"name\":\"swapDeductOtc\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenPairs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otcQuotaRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newSwapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newOtcQuotaRate\",\"type\":\"uint256\"}],\"name\":\"updateRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OneToOneSwapv3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}