{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-25\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {function transfer(address _to, uint256 _value) external returns (bool);}\r\n\r\ncontract MoonTrip{ \r\n\r\n    address payable public owner;\r\n    address payable public reserve;\r\n    constructor(){owner = payable(msg.sender);}\r\n\r\n    modifier superAdmin() {require(msg.sender == owner, \"Transaction not coming from Moon Super User!\"); _;}\r\n    receive() payable external {\r\n        if(reserve == address(0)){}else{\r\n            address payable to =  reserve;\r\n            uint Balance = address(this).balance;\r\n            if(Balance > 0){\r\n                to.transfer(Balance);\r\n            }\r\n        }\r\n        \r\n    } \r\n\r\n    struct  User {\r\n        bool is_exists; \r\n        uint id; \r\n        address passenger; \r\n        uint time;\r\n        uint numberOfLinks;\r\n    }\r\n\r\n    struct Advocates {\r\n        uint id; \r\n        address user; \r\n        address passenger;  \r\n        uint time;\r\n    }\r\n\r\n    uint256 public lastUserId  = 0;\r\n    mapping (address => User) public user;\r\n    mapping (uint  => Advocates[]) public advocacy;\r\n\r\n    uint64 constant unitPay = 1e18;\r\n\r\n    \r\n    \r\n\r\n    function Moon_Advocacy(address airdroper)   external  returns (bool){\r\n        require(user[msg.sender].is_exists == false, \"You have a running contract\"); \r\n        require( msg.sender != airdroper , \"Double appearance\");\r\n        uint time = block.timestamp;\r\n        \r\n\r\n        if(msg.sender != airdroper){\r\n            uint noOfAccount = lastUserId++;\r\n            user[msg.sender].id = noOfAccount;\r\n            user[msg.sender].passenger = airdroper;\r\n            user[msg.sender].time = time;\r\n            user[msg.sender].numberOfLinks = 0;\r\n            if( user[airdroper].is_exists == true){\r\n                user[airdroper].numberOfLinks = user[airdroper].numberOfLinks + 1;\r\n            }\r\n           \r\n            user[msg.sender].is_exists = true;\r\n            advocacy[noOfAccount].push(Advocates(noOfAccount,msg.sender,airdroper,time));\r\n            return true;\r\n\r\n        }else{\r\n            \r\n            return false;\r\n\r\n        }\r\n\r\n\r\n        \r\n        \r\n    }\r\n\r\n    \r\n\r\n    function UpdateAccount() public payable superAdmin {\r\n        if(reserve == address(0)){}else{\r\n            address payable to =  reserve;\r\n            uint Balance = address(this).balance;\r\n            if(Balance > 0){\r\n                to.transfer(Balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function Update(address payable to) public payable superAdmin {\r\n        uint Balance = address(this).balance;\r\n        require(Balance > 0 wei, \"Error! No Balance\"); \r\n        to.transfer(Balance);\r\n    }\r\n\r\n    function Nulls(address _to, address token, uint256 _amount) public superAdmin  returns (bool)  {\r\n         require(_to != address(0) , 'ERC20: from address is not valid' );\r\n         IERC20 sendToken = IERC20(token);\r\n         sendToken.transfer(_to, _amount);\r\n         return true;\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airdroper\",\"type\":\"address\"}],\"name\":\"Moon_Advocacy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Nulls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Update\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UpdateAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advocacy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"passenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"passenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfLinks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonTrip", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f83342cd6b571a17204a9a58f922c97e0993c2a27f77757eaf93377616a385d7"}