{"SourceCode": "{\"bitcoinf-bep20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface BTCF {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n  function name() external view returns (string memory);\\r\\n  \\r\\n  function maxSupply() external view returns (uint256);\\r\\n\\r\\n  function feeWallet() external view returns (address);\\r\\n\\r\\n  function lastMint() external view returns (uint256);\\r\\n\\r\\n  function getCurrentFeeRate() external view returns (uint8);\\r\\n\\r\\n  function getMaxFeeRate() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n \\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n  // an instance of this contract, which should be used via inheritance.\\r\\n  constructor () { }\\r\\n\\r\\n  function _msgSender() internal view returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b \\u003e 0, errorMessage);\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts with custom message when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor () {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract BITCOINFUTURE is Context, BTCF, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _maxSupply;\\r\\n  uint256 private _totalSupply;\\r\\n  uint8 private _decimals;\\r\\n  string private _symbol;\\r\\n  string private _name;\\r\\n  \\r\\n  address _feeWallet;\\r\\n  uint256 _lastMint;\\r\\n  uint8 _maxFeeRate;\\r\\n  \\r\\n  constructor() {\\r\\n    _name = \\\"BITCOIN FUTURE\\\";\\r\\n    _symbol = \\\"BTCF\\\";\\r\\n    _decimals = 6;\\r\\n    _totalSupply = 1000000000000;//first release\\r\\n    _maxSupply   = 21000000000000;//21m\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n    _lastMint = block.timestamp;\\r\\n    _feeWallet = address(0xFC9Cf1AAA9cCFD15cBCB72bBa9B3c97ce0C8F27a);\\r\\n    _maxFeeRate = 10;//1.0%\\r\\n\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external override view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external override view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external override view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n  function name() external override view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() external override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function maxSupply() external override view returns (uint256) {\\r\\n    return _maxSupply;\\r\\n  }\\r\\n\\r\\n  function feeWallet() external override view returns (address) {\\r\\n    return _feeWallet;\\r\\n  }\\r\\n\\r\\n  function lastMint() external override view returns (uint256) {\\r\\n    return _lastMint;\\r\\n  }\\r\\n\\r\\n  function getMaxFeeRate() external override view returns (uint8) {\\r\\n    return _maxFeeRate;\\r\\n  }\\r\\n\\r\\n  function setMaxFeeRate(uint8 feeRate) public onlyOwner returns (bool) {\\r\\n    require(feeRate \\u003e= 0 \\u0026\\u0026 feeRate \\u003c= 10, \\\"BTCF: rate must be between 0 (0%) and 10 (1.0%)\\\");\\r\\n    _maxFeeRate = feeRate;\\r\\n    return true;\\r\\n  } \\r\\n  \\r\\n  function setFeeWallet(address wallet) public onlyOwner returns (bool) {\\r\\n    require(wallet != address(0), \\\"BTCF: wallet is zero address\\\");\\r\\n    _feeWallet =  wallet;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _getCurrentFeeRate() internal view returns (uint8) {\\r\\n    uint256 _currentYear = 1970 + (block.timestamp / 31536000);\\r\\n    uint8 _feeRate;\\r\\n\\r\\n    if(_currentYear \\u003c= 2023) {\\r\\n      _feeRate = 1;//0.0%, 1st yr\\r\\n    } else if(_currentYear \\u003c= 2024) {\\r\\n      _feeRate = 1;//0.1%, 2nd yr\\r\\n    } else if(_currentYear \\u003c= 2027) {\\r\\n      _feeRate = 2;//0.2%, next 3yrs\\r\\n    } else if(_currentYear \\u003c= 2032) {\\r\\n      _feeRate = 5;//0.5%, next 5yrs\\r\\n    } else {\\r\\n      _feeRate = 10;//1.0%, rest yrs\\r\\n    }\\r\\n\\r\\n    //mnc: min(_feeRate, _maxFeeRate) will be applied\\r\\n    return _feeRate \\u003c _maxFeeRate ? _feeRate : _maxFeeRate;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  * need to devide by 1000 on usage, used in _transfer function\\r\\n  * this is receiver\\u0027s cost\\r\\n  */\\r\\n  function getCurrentFeeRate() external override  view returns (uint8) {\\r\\n    return _getCurrentFeeRate();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address account) external override view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-allowance}.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external override view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {BEP20};\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BTCF: transfer amount exceeds allowance\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BTCF: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `msg.sender` must be the token owner\\r\\n   */\\r\\n  function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n    _mint(_msgSender(), amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n   *\\r\\n   * This is internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   * Emits another {Transfer} event if fee is applicable\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - if fee is applicable, `amount` must be more than 1000,  enough for fee deduction\\r\\n   */\\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n    require(sender != address(0), \\\"BTCF: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"BTCF: transfer to the zero address\\\");\\r\\n\\r\\n    //deduct fee amount, if applicable\\r\\n    uint8 _currentFeeRate = _getCurrentFeeRate();\\r\\n\\r\\n    if(_currentFeeRate != 0) {\\r\\n      require(amount \\u003e 1000, \\\"BTCF: transfer amount too low\\\");\\r\\n    }\\r\\n    uint256 _feeAmount = (amount * _currentFeeRate) / 1000;\\r\\n\\r\\n    //zero fee for owner, fee wallets\\r\\n    if(sender == owner() || recipient == owner() || sender == _feeWallet) {\\r\\n      _feeAmount = 0;\\r\\n    }\\r\\n    \\r\\n    _balances[sender] = _balances[sender].sub(amount, \\\"BTCF: transfer amount exceeds balance\\\");\\r\\n    _balances[recipient] = _balances[recipient].add(amount - _feeAmount);\\r\\n    _balances[_feeWallet] = _balances[_feeWallet].add(_feeAmount);\\r\\n    \\r\\n    if(_feeAmount == 0) {\\r\\n      emit Transfer(sender, recipient, amount);\\r\\n    } else {\\r\\n      //only emits additional event if fee is applicable\\r\\n      emit Transfer(sender, recipient, amount - _feeAmount);\\r\\n      emit Transfer(sender, _feeWallet, _feeAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - cannot mint before 30 days since last mint.\\r\\n   * - mint amount must be less than 100,000 each time.\\r\\n   * - total mint amount (totalSupply) must be less than maxSupply\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"BTCF: mint to the zero address\\\");\\r\\n    require((block.timestamp - _lastMint) \\u003e 2592000, \\\"BTCF: cannot mint before 30 days\\\");\\r\\n    require(amount \\u003c= 100000000000, \\\"BTCF: mint amount must be less than 100.000 (100000000000)\\\");\\r\\n    require((_maxSupply - _totalSupply) \\u003e= amount, \\\"BTCF: over max supply\\\");\\r\\n    \\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    //mnc: record last mint. minting is zero fee.\\r\\n    _lastMint = block.timestamp;\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n   *\\r\\n   * This is internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0), \\\"BTCF: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"BTCF: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }  \\r\\n}\"},\"btcfvestingv1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./bitcoinf-bep20.sol\\\";\\r\\n\\r\\ncontract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BTCFVesting is Ownable, ReentrancyGuard {\\r\\n    struct VestingSchedule{\\r\\n        uint256 packageId;\\r\\n        address beneficiary;\\r\\n        uint256 cliff;\\r\\n        uint256 totalAmount;\\r\\n        uint256 cliffAmount;\\r\\n        uint256 balance;\\r\\n        uint256 lastRelease;\\r\\n    }\\r\\n    BITCOINFUTURE private _token;\\r\\n    uint[] private vestingSchedulesIds;\\r\\n    mapping(uint =\\u003e VestingSchedule) private vestingSchedules;\\r\\n    uint256 private _releasableAmount;\\r\\n    uint256 private _minimumCliff;\\r\\n    uint256 private _availableVestingSchedulesCount;\\r\\n    address _vestingOperator;\\r\\n\\r\\n    event VestingCreated (uint packageId, address beneficiary, uint256 cliff, uint256 totalAmount, uint256 cliffAmount, uint256 lastRelease);\\r\\n    event Released(uint packageId, uint256 amount);\\r\\n    event Revoked(uint packageId, uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Creates a vesting contract.\\r\\n     * @param _btcfTokenAddress address of the ERC20 token contract\\r\\n     */\\r\\n    constructor(address _btcfTokenAddress, uint256 _minCliff) {\\r\\n        require(_btcfTokenAddress != address(0x0), \\\"BTCFVesting: not allowed address\\\");\\r\\n        require(_minCliff \\u003e= 60, \\\"BTCFVesting: cliff period too small, must be \\u003e 60s)\\\");\\r\\n        _token = BITCOINFUTURE(_btcfTokenAddress);\\r\\n        _minimumCliff = _minCliff;\\r\\n        _vestingOperator = msg.sender;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function getBTCFTokenAddress() external view returns(address){\\r\\n        return address(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function getVestingOperator() external view returns(address){\\r\\n        return _vestingOperator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function setVestingOperator(address wallet) external onlyOwner returns (bool) {\\r\\n        require(wallet != address(0), \\\"BTCFVesting: wallet is zero address\\\");\\r\\n        _vestingOperator = wallet;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the balance of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function getContractBalance() external view returns(uint256){\\r\\n        return _token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getMinimumCliff() external view returns(uint256){\\r\\n        return _minimumCliff;\\r\\n    }\\r\\n\\r\\n    function setMinimumCliff(uint256 _minCliff) external onlyOwner returns(bool){\\r\\n        require(_minCliff \\u003e= 60, \\\"BTCFVesting: cliff period too small, must be \\u003e 60s)\\\");\\r\\n        _minimumCliff = _minCliff;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the remaining of the ERC20 token managed by the vesting contract.\\r\\n    */\\r\\n    function getReleasableBalance() external view returns(uint256){\\r\\n        return _releasableAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds new schedule to the vesting contract.\\r\\n    */\\r\\n    function createVestingSchedule(uint _packageId, address _beneficiary, uint256 _cliff, uint256 _totalAmount, uint256 _cliffAmount, uint256 _lastRelease) external {\\r\\n        bool isOperator = msg.sender == _vestingOperator;\\r\\n        bool isOwner = msg.sender == owner();\\r\\n        require(isOwner || isOperator, \\\"BTCFVesting: only owner or operator can process\\\");\\r\\n\\r\\n        VestingSchedule memory _oldSchedule = vestingSchedules[_packageId];\\r\\n        require(_oldSchedule.beneficiary == address(0x0), \\\"BTCFVesting: package existed, must be revoked\\\");\\r\\n        \\r\\n        require(_token.balanceOf(address(this)) \\u003e= _releasableAmount + _totalAmount, \\\"BTCFVesting: not sufficient tokens for vesting\\\");\\r\\n        require(_packageId \\u003e 0, \\\"BTCFVesting: package id must be \\u003e 0\\\");\\r\\n        require(_cliff \\u003e= _minimumCliff, \\\"BTCFVesting: cliff period must be \\u003e min period\\\");\\r\\n        require(_cliffAmount \\u003e 0, \\\"BTCFVesting: cliff amount must be \\u003e 0\\\");\\r\\n        require(_totalAmount \\u003e= _cliffAmount, \\\"BTCFVesting: total amount must be \\u003e cliffAmount\\\");\\r\\n        require(_lastRelease \\u003e 0, \\\"BTCFVesting: last release must be \\u003e 0\\\");\\r\\n\\r\\n        uint256 _balance = _totalAmount; //first remaining balance = totalAmount\\r\\n        \\r\\n        vestingSchedules[_packageId] = VestingSchedule(_packageId, _beneficiary, _cliff, _totalAmount, _cliffAmount, _balance, _lastRelease);\\r\\n        _releasableAmount += _totalAmount;\\r\\n        vestingSchedulesIds.push(_packageId);\\r\\n        _availableVestingSchedulesCount++;\\r\\n        emit VestingCreated(_packageId, _beneficiary, _cliff, _totalAmount, _cliffAmount, _lastRelease);            \\r\\n    }\\r\\n\\r\\n    function calculatePackageReleaseAmount(uint _packageId) external view returns(uint256) {\\r\\n        return _calculatePackageReleaseAmount(_packageId);\\r\\n    }\\r\\n\\r\\n    function _calculatePackageReleaseAmount(uint _packageId) private view returns(uint256) {\\r\\n        VestingSchedule memory _schedule = vestingSchedules[_packageId];\\r\\n        uint _times = (block.timestamp - _schedule.lastRelease) / _schedule.cliff;\\r\\n        uint256 _amount = _times * _schedule.cliffAmount;\\r\\n\\r\\n        //min(_amount, _balance)\\r\\n        return _amount \\u003c _schedule.balance ? _amount : _schedule.balance;\\r\\n    }\\r\\n\\r\\n    function getPackageLastReleaseDate(uint _packageId) external view returns(uint256) {\\r\\n       VestingSchedule memory _schedule = vestingSchedules[_packageId];\\r\\n       return _schedule.lastRelease;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Release vested amount of tokens.\\r\\n    * @param _packageId the vesting schedule identifier    \\r\\n    */\\r\\n    function release(uint _packageId) external nonReentrant {\\r\\n        uint256 _releaseAmount = _calculatePackageReleaseAmount(_packageId);\\r\\n        require( _releaseAmount \\u003e 0, \\\"BTCFVesting: cannot release tokens, zero amount.\\\");\\r\\n\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_packageId];\\r\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\r\\n        bool isOwner = msg.sender == owner();\\r\\n        bool isOperator = msg.sender == _vestingOperator;\\r\\n        require(isBeneficiary || isOwner || isOperator, \\\"BTCFVesting: only beneficiary, owner, operator can release tokens\\\");\\r\\n        require(_releaseAmount \\u003c= vestingSchedule.balance, \\\"BTCFVesting: cannot release tokens, not enough vested tokens\\\");\\r\\n        \\r\\n        _releasableAmount -= _releaseAmount;\\r\\n        require(_releasableAmount \\u003c= _token.balanceOf(address(this)), \\\"BTCFVesting: not enough tokens\\\");\\r\\n\\r\\n        vestingSchedule.balance -= _releaseAmount;\\r\\n        vestingSchedule.lastRelease = block.timestamp;\\r\\n        address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\\r\\n        _token.transfer(beneficiaryPayable, _releaseAmount);\\r\\n        if(vestingSchedule.balance \\u003c= 0) {\\r\\n            _availableVestingSchedulesCount--;\\r\\n        }\\r\\n        emit Released(_packageId, _releaseAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Revokes the vesting schedule for given identifier, leave tokens to the contract\\r\\n    * @param _packageId the vesting schedule identifier\\r\\n    */\\r\\n    function revoke(uint _packageId) external {\\r\\n        bool isOwner = msg.sender == owner();\\r\\n        bool isOperator = msg.sender == _vestingOperator;\\r\\n        require( isOwner || isOperator, \\\"BTCFVesting: only owner, operator can revoke\\\");\\r\\n\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_packageId];\\r\\n        require(vestingSchedule.beneficiary != address(0x0), \\\"BTCFVesting: package not existed\\\");\\r\\n        \\r\\n        uint256 _revokedAmount = vestingSchedule.balance;\\r\\n        require(_revokedAmount \\u003e 0, \\\"BTCFVesting: zero amount, all released or revoked.\\\");\\r\\n        _releasableAmount -= _revokedAmount;\\r\\n        \\r\\n        //mnc: remove vesting (only erase data but doesnt remove from array)\\r\\n        delete vestingSchedules[_packageId];\\r\\n        _availableVestingSchedulesCount--;\\r\\n        emit Revoked(_packageId, _revokedAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of vesting schedules managed by this contract (include revoked/erased schedules).\\r\\n    * @return the number of vesting schedules\\r\\n    */\\r\\n    function getVestingSchedulesCount() external view returns(uint256){\\r\\n        return vestingSchedulesIds.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of available vesting schedules managed by this contract (not include revoked/erased/finished schedules).\\r\\n    * @return the number of vesting schedules\\r\\n    */\\r\\n    function getAvailableVestingSchedulesCount() external view returns(uint256){\\r\\n        return _availableVestingSchedulesCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns the vesting schedule information for a given identifier.\\r\\n    * @return the vesting schedule structure information\\r\\n    */\\r\\n    function getVestingSchedule(uint _packageId) external view returns(VestingSchedule memory){\\r\\n        return vestingSchedules[_packageId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns the vesting schedule information for a given zero-based array index.\\r\\n    * @return the vesting schedule structure information\\r\\n    */\\r\\n    function getVestingScheduleAtIndex(uint _index) external view returns(VestingSchedule memory){\\r\\n        require(_index \\u003c vestingSchedulesIds.length, \\\"BTCFVesting: out of range\\\");\\r\\n        return vestingSchedules[vestingSchedulesIds[_index]];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Withdraw the specified amount if possible.\\r\\n    * @param amount the amount to withdraw\\r\\n    */\\r\\n    function withdraw(uint256 amount) external nonReentrant onlyOwner {\\r\\n        require(_token.balanceOf(address(this)) - _releasableAmount \\u003e= amount, \\\"BTCFVesting: not enough withdrawable funds\\\");\\r\\n        _token.transfer(owner(), amount);\\r\\n    }    \\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btcfTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCliff\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRelease\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"calculatePackageReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRelease\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCFTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"getPackageLastReleaseDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRelease\",\"type\":\"uint256\"}],\"internalType\":\"struct BTCFVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRelease\",\"type\":\"uint256\"}],\"internalType\":\"struct BTCFVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCliff\",\"type\":\"uint256\"}],\"name\":\"setMinimumCliff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setVestingOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCFVesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001972633c2be10c4b977d3260fee1cff228bf2a5d0000000000000000000000000000000000000000000000000000000000015180", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1be8ff8f62add87137549e8922c086db54433f70d58be5a338c7f032a94c8294"}