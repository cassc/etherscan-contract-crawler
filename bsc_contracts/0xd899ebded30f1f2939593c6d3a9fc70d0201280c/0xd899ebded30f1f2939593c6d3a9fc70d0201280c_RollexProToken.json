{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IBEP20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint256);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value) ;\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address _owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract StandardToken is Ownable {\r\n\r\n  mapping (address => bool) public isWhiteListed;\r\n  \r\n    function getWhiteListStatus(address _maker) public view returns (bool) {\r\n        return isWhiteListed[_maker];\r\n    }\r\n\r\n    function ExcludeFromFee (address _evilUser) public onlyOwner {\r\n        isWhiteListed[_evilUser] = true;\r\n        emit AddedWhiteList(_evilUser);\r\n    }\r\n\r\n    function IncludeForFee (address _clearedUser) public onlyOwner {\r\n        isWhiteListed[_clearedUser] = false;\r\n        emit RemovedWhiteList(_clearedUser);\r\n    }\r\n\r\n    event AddedWhiteList(address _user);\r\n\r\n    event RemovedWhiteList(address _user);\r\n}\r\n\r\ncontract RollexProToken is IBEP20, Ownable, StandardToken  {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _totalSupply;\r\n  uint256 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 public _burnlimit;\r\n\r\n  uint256 public indiaFee = 1;\r\n  uint256 public pakistanFee  = 1;\r\n  uint256 public vietnamFee  = 1;\r\n  uint256 public socialmediaFee  = 1;\r\n  uint256 public burnPercent = 1;\r\n\r\n  address private indiaAddress = 0xaFF55d7B23d0Cdefd04fACE7D818429fa38bB0F8;\r\n  address private pakistanAddress  = 0x72ec6C410248cC631F3Ae50d1d5e6b692F3D8e1b;\r\n  address private vietnamAddress  = 0x46ac1C2f150758fA47461491Fa2B69838329CD9d;\r\n  address private socialmediaAddress  = 0x0e1125E0e601d22Fe774fdb3350AC2B83e0D48CA;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(!(msg.data.length < size + 4));\r\n    _;\r\n  }\r\n\r\n\r\n  constructor()  {\r\n    _name = \"Rollex Pro Token\";\r\n    _symbol = \"RLXT\";\r\n    _decimals = 18;\r\n    _totalSupply =  100000000000 * 10 ** _decimals;\r\n    _balances[msg.sender] = _totalSupply;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n    _burnlimit= 10000000 * 10 ** _decimals;\r\n    ExcludeFromFee(msg.sender);\r\n  }\r\n\r\n  function getOwner() external view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  function decimals() external view returns (uint256) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender,msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    uint256 indiaCharge = amount.mul(indiaFee).div(100);\r\n    uint256 pakistanCharge = amount.mul(pakistanFee).div(100);\r\n    uint256 vietnamCharge = amount.mul(vietnamFee).div(100);\r\n    uint256 socialmediaCharge = amount.mul(socialmediaFee).div(100);\r\n    uint256 burnamt = amount.mul(burnPercent).div(100);\r\n\r\n    if(_totalSupply <= _burnlimit){\r\n            burnamt = 0;\r\n    }\r\n    if(isWhiteListed[msg.sender] == true) {\r\n            indiaCharge = 0;\r\n            pakistanCharge = 0;\r\n            vietnamCharge = 0;\r\n            socialmediaCharge = 0;\r\n            burnamt = 0;\r\n    }\r\n\r\n    uint256 sendAmount = amount - indiaCharge - pakistanCharge - vietnamCharge - socialmediaCharge - burnamt;\r\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(sendAmount);\r\n\r\n    if (indiaCharge > 0) {\r\n        _balances[indiaAddress] = _balances[indiaAddress].add(indiaCharge);\r\n        emit Transfer(msg.sender, indiaAddress, indiaCharge);\r\n    }\r\n    if (pakistanCharge > 0) {\r\n        _balances[pakistanAddress] = _balances[pakistanAddress].add(pakistanCharge);\r\n        emit Transfer(msg.sender, pakistanAddress, pakistanCharge);\r\n    }\r\n     if (vietnamCharge > 0) {\r\n        _balances[vietnamAddress] = _balances[vietnamAddress].add(vietnamCharge);\r\n        emit Transfer(msg.sender, vietnamAddress, vietnamCharge);\r\n    }\r\n    if (socialmediaCharge > 0) {\r\n        _balances[socialmediaAddress] = _balances[socialmediaAddress].add(socialmediaCharge);\r\n        emit Transfer(msg.sender, socialmediaAddress, socialmediaCharge);\r\n    }\r\n    if (burnamt > 0) {\r\n        _totalSupply = _totalSupply.sub(burnamt);\r\n        emit Transfer(msg.sender, address(0), burnamt);\r\n    }\r\n   \r\n    emit Transfer(msg.sender, recipient, sendAmount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"ExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"IncludeForFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getWhiteListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indiaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pakistanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialmediaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vietnamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RollexProToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f98413ceae86a542161b18b1e047d4c56a7a3f25fcda2da8a56f85ce81d308b0"}