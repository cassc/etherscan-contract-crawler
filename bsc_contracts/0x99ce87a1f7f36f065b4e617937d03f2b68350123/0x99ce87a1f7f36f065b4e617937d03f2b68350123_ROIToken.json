{"SourceCode": "pragma solidity >=0.4.22 <0.6.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply =  0;\r\n    \r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n \r\n \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        require(value <= _balances[account]);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ROIToken is ERC20, Pausable, ERC20Detailed {\r\n    \r\n\taddress teamWallet = 0x29d9CdF2409E682Fb572AD3737775B8Eb35fe850;\r\n    address serviceWallet = 0x7029Fa9483718AAFEeEC7E5ba22441b393678fA0;\r\n    address partnerWallet = 0xf73f1D67edbD278de7d739D920C6B5E6928b45cC;\r\n    address bountyWallet = 0xDD75f33A2455C514F1c4d832bb3F405F85eD331c;\r\n    \r\n    uint256 private totalCoins; \r\n    \r\n    struct LockItem {\r\n        uint256  releaseDate;\r\n        uint256  amount;\r\n    }\r\n    \r\n    mapping (address => LockItem[]) public lockList;\r\n    mapping (uint => uint) public quarterMap;\r\n    address [] private lockedAddressList; // list of addresses that have some fund currently or previously locked\r\n    \r\n    \r\n\tconstructor() public ERC20Detailed(\"ROI Token\", \"ROI\", 6) {  \r\n\t        \r\n        quarterMap[1]=1632182400;//=Tue, 21 Sep 2021 00:00:00 GMT\r\n        quarterMap[2]=1639958400;//=Mon, 20 Dec 2021 00:00:00 GMT\r\n        quarterMap[3]=1647734400;//=Sun, 20 Mar 2022 00:00:00 GMT\r\n        quarterMap[4]=1655510400;//=Sat, 18 Jun 2022 00:00:00 GMT\r\n        quarterMap[5]=1663286400;//=Fri, 16 Sep 2022 00:00:00 GMT\r\n        quarterMap[6]=1671062400;//=Thu, 15 Dec 2022 00:00:00 GMT\r\n        quarterMap[7]=1678838400;//=Wed, 15 Mar 2023 00:00:00 GMT\r\n        quarterMap[8]=1686614400;//=Tue, 13 Jun 2023 00:00:00 GMT\r\n        quarterMap[9]=1694390400;//=Mon, 11 Sep 2023 00:00:00 GMT\r\n        quarterMap[10]=1702166400;//=Sun, 10 Dec 2023 00:00:00 GMT\r\n        quarterMap[11]=1709942400;//=Sat, 09 Mar 2024 00:00:00 GMT\r\n        quarterMap[12]=1717718400;//=Fri, 07 Jun 2024 00:00:00 GMT\r\n        quarterMap[13]=1725494400;//=Thu, 05 Sep 2024 00:00:00 GMT\r\n        quarterMap[14]=1733270400;//=Wed, 04 Dec 2024 00:00:00 GMT\r\n        quarterMap[15]=1741046400;//=Tue, 04 Mar 2025 00:00:00 GMT\r\n        quarterMap[16]=1748822400;//=Mon, 02 Jun 2025 00:00:00 GMT\r\n        quarterMap[17]=1756598400;//=Sun, 31 Aug 2025 00:00:00 GMT\r\n        quarterMap[18]=1764374400;//=Sat, 29 Nov 2025 00:00:00 GMT\r\n        quarterMap[19]=1772150400;//=Fri, 27 Feb 2026 00:00:00 GMT\r\n        quarterMap[20]=1779926400;//=Thu, 28 May 2026 00:00:00 GMT\r\n        quarterMap[21]=1787702400;//=Wed, 26 Aug 2026 00:00:00 GMT\r\n        quarterMap[22]=1795478400;//=Tue, 24 Nov 2026 00:00:00 GMT\r\n        quarterMap[23]=1803254400;//=Mon, 22 Feb 2027 00:00:00 GMT\r\n        quarterMap[24]=1811030400;//=Sun, 23 May 2027 00:00:00 GMT\r\n        quarterMap[25]=1818806400;//=Sat, 21 Aug 2027 00:00:00 GMT\r\n        quarterMap[26]=1826582400;//=Fri, 19 Nov 2027 00:00:00 GMT\r\n        quarterMap[27]=1834358400;//=Thu, 17 Feb 2028 00:00:00 GMT\r\n        quarterMap[28]=1842134400;//=Wed, 17 May 2028 00:00:00 GMT\r\n        quarterMap[29]=1849910400;//=Tue, 15 Aug 2028 00:00:00 GMT\r\n        quarterMap[30]=1857686400;//=Mon, 13 Nov 2028 00:00:00 GMT\r\n        quarterMap[31]=1865462400;//=Sun, 11 Feb 2029 00:00:00 GMT\r\n        quarterMap[32]=1873238400;//=Sat, 12 May 2029 00:00:00 GMT\r\n        quarterMap[33]=1881014400;//=Fri, 10 Aug 2029 00:00:00 GMT\r\n        quarterMap[34]=1888790400;//=Thu, 08 Nov 2029 00:00:00 GMT\r\n        quarterMap[35]=1896566400;//=Wed, 06 Feb 2030 00:00:00 GMT\r\n        quarterMap[36]=1904342400;//=Tue, 07 May 2030 00:00:00 GMT\r\n        quarterMap[37]=1912118400;//=Mon, 05 Aug 2030 00:00:00 GMT\r\n        quarterMap[38]=1919894400;//=Sun, 03 Nov 2030 00:00:00 GMT\r\n        quarterMap[39]=1927670400;//=Sat, 01 Feb 2031 00:00:00 GMT\r\n        quarterMap[40]=1935446400;//=Fri, 02 May 2031 00:00:00 GMT\r\n        \r\n        totalCoins = 50000000000 * 10 ** uint256(decimals());\r\n        _mint(owner(), totalCoins); // total supply fixed at 50 billion coins\r\n        \r\n        ERC20.transfer(teamWallet, 5000000000 * 10 ** uint256(decimals()));  \r\n        ERC20.transfer(partnerWallet, 5000000000 * 10 ** uint256(decimals()));\r\n        ERC20.transfer(serviceWallet, 12500000000 * 10 ** uint256(decimals()));\r\n        ERC20.transfer(bountyWallet, 7500000000 * 10 ** uint256(decimals()));\r\n\r\n        for(uint i = 1; i<= 40;i++) {\r\n            transferAndLock(serviceWallet, 500000000 * 10 ** uint256(decimals()), quarterMap[i]);\r\n        }\r\n        \r\n    }\r\n\t\r\n\t\r\n     /**\r\n     * @dev transfer of token to another address.\r\n     * always require the sender has enough balance\r\n     * @return the bool true if success. \r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n     \r\n\tfunction transfer(address _receiver, uint256 _amount) public whenNotPaused returns (bool success) {\r\n\t    require(_receiver != address(0)); \r\n\t    require(_amount <= getAvailableBalance(msg.sender));\r\n        return ERC20.transfer(_receiver, _amount);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev transfer of token on behalf of the owner to another address. \r\n     * always require the owner has enough balance and the sender is allowed to transfer the given amount\r\n     * @return the bool true if success. \r\n     * @param _from The address to transfer from.\r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _receiver, uint256 _amount) public whenNotPaused returns (bool) {\r\n        require(_from != address(0));\r\n        require(_receiver != address(0));\r\n        require(_amount <= allowance(_from, msg.sender));\r\n        require(_amount <= getAvailableBalance(_from));\r\n        return ERC20.transferFrom(_from, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer to a given address a given amount and lock this fund until a given time\r\n     * used for sending fund to team members, partners, or for owner to lock service fund over time\r\n     * @return the bool true if success.\r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to transfer.\r\n     * @param _releaseDate The date to release token.\r\n     */\r\n\t\r\n\tfunction transferAndLock(address _receiver, uint256 _amount, uint256 _releaseDate) public whenNotPaused returns (bool success) {\r\n\t    require(msg.sender == teamWallet || msg.sender == partnerWallet || msg.sender == owner());\r\n        ERC20._transfer(msg.sender,_receiver,_amount);\r\n    \t\r\n    \tif (lockList[_receiver].length==0) lockedAddressList.push(_receiver);\r\n\t\t\r\n    \tLockItem memory item = LockItem({amount:_amount, releaseDate:_releaseDate});\r\n\t\tlockList[_receiver].push(item);\r\n\t\t\r\n        return true;\r\n\t}\r\n\t\r\n\t\r\n    /**\r\n     * @return the total amount of locked funds of a given address.\r\n     * @param lockedAddress The address to check.\r\n     */\r\n\tfunction getLockedAmount(address lockedAddress) public view returns(uint256 _amount) {\r\n\t    uint256 lockedAmount =0;\r\n\t    for(uint256 j = 0; j<lockList[lockedAddress].length; j++) {\r\n\t        if(now < lockList[lockedAddress][j].releaseDate) {\r\n\t            uint256 temp = lockList[lockedAddress][j].amount;\r\n\t            lockedAmount += temp;\r\n\t        }\r\n\t    }\r\n\t    return lockedAmount;\r\n\t}\r\n\t\r\n\t/**\r\n     * @return the total amount of locked funds of a given address.\r\n     * @param lockedAddress The address to check.\r\n     */\r\n\tfunction getAvailableBalance(address lockedAddress) public view returns(uint256 _amount) {\r\n\t    uint256 bal = balanceOf(lockedAddress);\r\n\t    uint256 locked = getLockedAmount(lockedAddress);\r\n\t    return bal.sub(locked);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev function that burns an amount of the token of a given account.\r\n     * @param _amount The amount that will be burnt.\r\n     */\r\n    function burn(uint256 _amount) public whenNotPaused {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n    \r\n    function () payable external {   \r\n        revert();\r\n    }\r\n    \r\n    \r\n    // the following functions are useful for frontend dApps\r\n\t\r\n\t/**\r\n     * @return the list of all addresses that have at least a fund locked currently or in the past\r\n     */\r\n\tfunction getLockedAddresses() public view returns (address[] memory) {\r\n\t    return lockedAddressList;\r\n\t}\r\n\t\r\n\t/**\r\n     * @return the number of addresses that have at least a fund locked currently or in the past\r\n     */\r\n\tfunction getNumberOfLockedAddresses() public view returns (uint256 _count) {\r\n\t    return lockedAddressList.length;\r\n\t}\r\n\t    \r\n\t    \r\n\t/**\r\n     * @return the number of addresses that have at least a fund locked currently\r\n     */\r\n\tfunction getNumberOfLockedAddressesCurrently() public view returns (uint256 _count) {\r\n\t    uint256 count=0;\r\n\t    for(uint256 i = 0; i<lockedAddressList.length; i++) {\r\n\t        if (getLockedAmount(lockedAddressList[i])>0) count++;\r\n\t    }\r\n\t    return count;\r\n\t}\r\n\t    \r\n\t/**\r\n     * @return the list of all addresses that have at least a fund locked currently\r\n     */\r\n\tfunction getLockedAddressesCurrently() public view returns (address[] memory) {\r\n\t    address [] memory list = new address[](getNumberOfLockedAddressesCurrently());\r\n\t    uint256 j = 0;\r\n\t    for(uint256 i = 0; i<lockedAddressList.length; i++) {\r\n\t        if (getLockedAmount(lockedAddressList[i])>0) {\r\n\t            list[j] = lockedAddressList[i];\r\n\t            j++;\r\n\t        }\r\n\t    }\r\n\t    \r\n        return list;\r\n    }\r\n    \r\n    \r\n\t/**\r\n     * @return the total amount of locked funds at the current time\r\n     */\r\n\tfunction getLockedAmountTotal() public view returns(uint256 _amount) {\r\n\t    uint256 sum =0;\r\n\t    for(uint256 i = 0; i<lockedAddressList.length; i++) {\r\n\t        uint256 lockedAmount = getLockedAmount(lockedAddressList[i]);\r\n    \t    sum = sum.add(lockedAmount);\r\n\t    }\r\n\t    return sum;\r\n\t}\r\n\t    \r\n\t    \r\n\t/**\r\n\t * @return the total amount of circulating coins that are not locked at the current time\r\n\t * \r\n\t */\r\n\tfunction getCirculatingSupplyTotal() public view returns(uint256 _amount) {\r\n\t    return totalSupply().sub(getLockedAmountTotal());\r\n\t}\r\n    \r\n    /**\r\n\t * @return the total amount of burned coins\r\n\t * \r\n\t */\r\n\tfunction getBurnedAmountTotal() public view returns(uint256 _amount) {\r\n\t    return totalCoins.sub(totalSupply());\r\n\t}\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfLockedAddressesCurrently\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnedAmountTotal\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCirculatingSupplyTotal\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lockedAddress\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfLockedAddresses\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseDate\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedAmountTotal\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lockedAddress\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quarterMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedAddressesCurrently\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockList\",\"outputs\":[{\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "ROIToken", "CompilerVersion": "v0.5.2+commit.1df8f40c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fbb689419121e31df550d6e8f6ea6b366d419d89a794ad720073fbe3eb65cc08"}