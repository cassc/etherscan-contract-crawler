{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.23 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract UNIVERSAL_META_GLOBAL {\r\n    IERC20 public usdt;\r\n    struct Ref {\r\n        address[] referrals;\r\n    }\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint8 partnercount;\r\n        uint8 maxlevel;\r\n        uint directbonus;\r\n        uint levelbonus;\r\n        uint worldpoolincome;\r\n        uint autopoolincome;\r\n        uint boostpoolincome;\r\n        uint boostUplineincome;\r\n        uint[] levelWiseUsers;\r\n        uint totalEarn;\r\n        uint8 teamCount;\r\n        mapping(uint8 => address[]) partners;\r\n        mapping(uint8 => bool) activeLevels;\r\n        mapping(uint8 => bool) activeBoosting;\r\n        mapping(uint8 => Ref) referrals;\r\n        mapping(uint256 => uint[]) worldpool;\r\n        mapping(uint256 => uint[]) autopool;\r\n        mapping(uint256 => uint[]) boostpool;\r\n    }\r\n    struct LevelIncomeReport {\r\n        uint fromid;\r\n        address fromaddress;\r\n        uint slot;\r\n        uint level;\r\n        uint amount;\r\n        uint timestamp;\r\n        uint types;\r\n    }\r\n\r\n    struct wpools {\r\n      uint id; // userID\r\n      uint wid; // autopoolID\r\n      address myAddress; // user address\r\n      uint level;\r\n      uint currectID; // refe ID\r\n      address currectRefAddress; // refe address\r\n      uint id1; // user 1 \r\n      uint id2; // user 2\r\n      uint id3; // user 3\r\n    }\r\n\r\n    struct apools {\r\n      uint id; // userID\r\n      uint wid; // autopoolID\r\n      address myAddress; // user address\r\n      uint level;\r\n      uint currectID; // refe ID\r\n      address currectRefAddress; // refe address\r\n      uint id1; // user 1 \r\n      uint id2; // user 2\r\n      uint id3; // user 3\r\n    }\r\n\r\n    struct bpools {\r\n      uint id; // userID\r\n      uint wid; // autopoolID\r\n      address myAddress; // user address\r\n      uint level;\r\n      uint currectID; // refe ID\r\n      address currectRefAddress; // refe address\r\n      uint id1; // user 1 \r\n      uint id2; // user 2\r\n      uint id3; // user 3\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public userIds;\r\n\r\n    mapping(uint => wpools) public Wpools;\r\n    mapping(uint => address) public worldIds;\r\n\r\n    mapping(uint => apools) public Apools;\r\n    mapping(uint => address) public autoIds;\r\n\r\n    mapping(uint => bpools) public Bpools;\r\n    mapping(uint => address) public boostIds;\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => LevelIncomeReport[]) public LevelIncomeTransactions;\r\n\r\n    mapping(uint8 => mapping(uint256 => uint)) public x3vId_number;\r\n    mapping(uint8 => uint256) public x3CurrentvId;\r\n    mapping(uint8 => uint256) public x3Index;\r\n\r\n    mapping(uint8 => mapping(uint256 => uint)) public x3vId_number_auto;\r\n    mapping(uint8 => uint256) public x3CurrentvId_auto;\r\n    mapping(uint8 => uint256) public x3Index_auto;\r\n\r\n    mapping(uint8 => mapping(uint256 => uint)) public x3vId_number_boost;\r\n    mapping(uint8 => uint256) public x3CurrentvId_boost;\r\n    mapping(uint8 => uint256) public x3Index_boost;\r\n    \r\n    uint public lapsedIncome = 0 ether;\r\n    uint public lastUserId = 2;\r\n    uint public worldId = 1;\r\n    uint public autoId = 1;\r\n    uint public boostId = 1;\r\n    uint8 public constant LAST_LEVEL = 6;\r\n    address public owner;\r\n    uint8[5] private distribution = [0, 20, 36, 20, 24]; // [1]=direct income,[2]=level income,[3]=magical income,[4]=Autopool income\r\n    uint[7] public packageprice = [0, 25 ether, 50 ether, 100 ether, 200 ether, 400 ether, 800 ether];\r\n    uint8[11] private levelPercentage = [0,10,10,10,10,10,10,10,10,10,10];\r\n\r\n    uint public boostingPackagePrice = 15 ether;\r\n    uint public boostLevelIncomePerLevel = 1 ether;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address ownerAddress, IERC20 _usdtAddress) public {\r\n        usdt = _usdtAddress;\r\n        owner = ownerAddress;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnercount: 0,\r\n            maxlevel: 6,\r\n            directbonus: 0,\r\n            levelbonus: 0,\r\n            worldpoolincome: 0,\r\n            autopoolincome: 0,\r\n            boostpoolincome: 0,\r\n            boostUplineincome: 0,\r\n            levelWiseUsers: new uint[](16),\r\n            totalEarn: 0,\r\n            teamCount: 0\r\n        }); \r\n        users[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            x3vId_number[i][1]=worldId;\r\n            x3Index[i]=1;\r\n            x3CurrentvId[i]=1;  \r\n            \r\n            users[ownerAddress].activeLevels[i] = true;\r\n            users[ownerAddress].worldpool[i].push(worldId);\r\n            wpools memory wpool = wpools({\r\n             id: 1, // userID\r\n             wid: worldId, // autopoolID\r\n             myAddress: ownerAddress, // user address\r\n             level: i,\r\n             currectID: 0, // refe ID\r\n             currectRefAddress: address(0), // refe address\r\n             id1: 0, // user 1 \r\n             id2: 0, // user 2\r\n             id3: 0 // user 3\r\n            });\r\n            worldIds[worldId] = ownerAddress;\r\n            Wpools[worldId] = wpool;\r\n            worldId++;\r\n\r\n            x3vId_number_auto[i][1]=autoId;\r\n            x3Index_auto[i]=1;\r\n            x3CurrentvId_auto[i]=1;  \r\n            users[ownerAddress].autopool[i].push(autoId);\r\n            apools memory apool = apools({\r\n             id: 1, // userID\r\n             wid: autoId, // autopoolID\r\n             myAddress: ownerAddress, // user address\r\n             level: i,\r\n             currectID: 0, // refe ID\r\n             currectRefAddress: address(0), // refe address\r\n             id1: 0, // user 1 \r\n             id2: 0, // user 2\r\n             id3: 0 // user 3\r\n            });\r\n            autoIds[autoId] = ownerAddress;\r\n            Apools[autoId] = apool;\r\n            autoId++;\r\n\r\n        }\r\n\r\n        users[ownerAddress].activeBoosting[1] = true;\r\n        x3vId_number_boost[1][1]=boostId;\r\n        x3Index_boost[1]=1;\r\n        x3CurrentvId_boost[1]=1;  \r\n        users[ownerAddress].boostpool[1].push(boostId);\r\n        bpools memory bpool = bpools({\r\n            id: 1, // userID\r\n            wid: boostId, // autopoolID\r\n            myAddress: ownerAddress, // user address\r\n            level: 1,\r\n            currectID: 0, // refe ID\r\n            currectRefAddress: address(0), // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        boostIds[boostId] = ownerAddress;\r\n        Bpools[boostId] = bpool;\r\n        boostId++;\r\n    }\r\n    \r\n    function registrationExt(address referrerAddress, uint256 amount) external {\r\n        require(!isUserExists(msg.sender), \"User already exists\");\r\n        require(isUserExists(referrerAddress), \"Referrer does not exist\");\r\n        require(amount == packageprice[1], \"Registration cost must be 1 ether\");\r\n        require(usdt.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n        require(usdt.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnercount: 0,\r\n            maxlevel: 1,\r\n            directbonus: 0,\r\n            levelbonus: 0,\r\n            worldpoolincome: 0,\r\n            autopoolincome: 0,\r\n            boostpoolincome: 0,\r\n            boostUplineincome: 0,\r\n            levelWiseUsers: new uint[](16),\r\n            totalEarn: 0,\r\n            teamCount: 0\r\n        });\r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeLevels[1] = true;\r\n        userIds[lastUserId] = userAddress;\r\n        users[referrerAddress].partners[0].push(userAddress);\r\n        users[referrerAddress].referrals[0].referrals.push(userAddress);\r\n        users[referrerAddress].partnercount++;\r\n        lastUserId++;\r\n        updateUplinesCount(msg.sender);\r\n        //emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n        distributebonus(userAddress,referrerAddress, 1);\r\n        uint freex3AutoPoolReferrer = findFreex3AutoPoolReferrer(1);\r\n        updateX3AutoPoolReferrer(userAddress, freex3AutoPoolReferrer, 1);\r\n        uint freex3AutoPoolReferrer_auto = findFreex3AutoPoolReferrer_auto(1);\r\n        updateX3AutoPoolReferrer_auto(userAddress, freex3AutoPoolReferrer_auto, 1);\r\n    }\r\n\r\n    function BuyPackage(uint8 level,uint256 amount) external {\r\n      require(isUserExists(msg.sender), \"User does not exist. Register first.\");\r\n      require(usdt.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n      require(usdt.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n      require(amount == packageprice[level], \"Package cost not valid\");        \r\n      require(level > 1 && level <= LAST_LEVEL, \"Invalid level\");\r\n      require(!users[msg.sender].activeLevels[level], \"Level already activated\");\r\n        \r\n      BuyM4Matrix(msg.sender, level);\r\n    }\r\n\r\n    function BuyM4Matrix(address userAddress, uint8 level) private { \r\n        users[userAddress].activeLevels[level] = true;\r\n        users[userAddress].maxlevel = level;\r\n        distributebonus(userAddress,users[userAddress].referrer, level);\r\n        uint freex3AutoPoolReferrer = findFreex3AutoPoolReferrer(level);\r\n        updateX3AutoPoolReferrer(userAddress, freex3AutoPoolReferrer, level);\r\n        uint freex3AutoPoolReferrer_auto = findFreex3AutoPoolReferrer_auto(level);\r\n        updateX3AutoPoolReferrer_auto(userAddress, freex3AutoPoolReferrer_auto, level);\r\n    }\r\n\r\n    function BuyBoostingPackage(uint256 amount) external {\r\n      require(isUserExists(msg.sender), \"User does not exist. Register first.\");\r\n      require(usdt.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n      require(usdt.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n      require(amount == boostingPackagePrice, \"Package cost not valid\");  \r\n      require(!users[msg.sender].activeBoosting[1], \"Boosting already activated\");\r\n      users[msg.sender].activeBoosting[1] = true;  \r\n      uint freex3AutoPoolReferrer_boost = findFreex3AutoPoolReferrer_boost(1);\r\n      updateX3AutoPoolReferrer_boost(msg.sender, freex3AutoPoolReferrer_boost, 1);  \r\n    }\r\n\r\n    // Boostpool payout code start //\r\n    function updateX3AutoPoolReferrer_boost(address userAddress, uint referrerId, uint8 level) private{\r\n        uint256 newIndex=x3Index_boost[level]+1;\r\n        x3vId_number_boost[level][newIndex]=boostId;\r\n        x3Index_boost[level]=newIndex;\r\n        uint256 boostpoolincome=boostingPackagePrice;\r\n        users[userAddress].boostpool[level].push(boostId);\r\n        bpools memory bpool = bpools({\r\n            id: users[userAddress].id, // userID\r\n            wid: boostId, // autopoolID\r\n            myAddress: userAddress, // user address\r\n            level: level,\r\n            currectID: Bpools[referrerId].wid, // refe ID\r\n            currectRefAddress: Bpools[referrerId].myAddress, // // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        boostIds[boostId] = userAddress;\r\n        Bpools[boostId] = bpool;        \r\n\r\n        if(Bpools[referrerId].id1==0){\r\n          Bpools[referrerId].id1 = boostId;\r\n          uint256 sponsorUplineIncome = (boostpoolincome*20)/100;  \r\n          if (users[Bpools[referrerId].myAddress].referrer != address(0) && users[Bpools[referrerId].myAddress].referrer != address(0x0)) {\r\n            transferAmount(users[Bpools[referrerId].myAddress].referrer, sponsorUplineIncome, 5); \r\n          }\r\n          else{\r\n            transferAmount(owner, sponsorUplineIncome, 0);\r\n          }\r\n\r\n          uint256 sponsorIncome = (boostpoolincome*80)/100;   \r\n          transferAmount(Bpools[referrerId].myAddress, sponsorIncome, 6);\r\n          boostId++;   \r\n        }\r\n        else if(Bpools[referrerId].id2==0){\r\n          Bpools[referrerId].id2 = boostId;\r\n          uint upline = Bpools[Bpools[referrerId].currectID].wid;\r\n          levelIncomeDistribute(userAddress,upline,boostpoolincome,level,4);\r\n          boostId++;   \r\n        }\r\n        else if(Bpools[referrerId].id3==0){\r\n          Bpools[referrerId].id3 = boostId;  \r\n          boostId++;\r\n          x3CurrentvId_boost[level]=x3CurrentvId_boost[level]+1;     \r\n          uint freeAutoPoolReferrer = findFreex3AutoPoolReferrer_boost(level);\r\n          updateX3AutoPoolReferrer_boost(Bpools[referrerId].myAddress, freeAutoPoolReferrer,level);\r\n        }        \r\n    }  \r\n\r\n    function findFreex3AutoPoolReferrer_boost(uint8 level) public view returns(uint){\r\n            uint id=x3CurrentvId_boost[level];\r\n            return x3vId_number_boost[level][id];\r\n    } \r\n     \r\n    function usersBoostAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\r\n        return (users[userAddress].boostpool[level].length,users[userAddress].boostpool[level]);\r\n    }\r\n    // Boostpool payout code end //\r\n\r\n    function distributebonus(address userAddress,address referrerAddress, uint8 level) private {\r\n        uint price = packageprice[level];\r\n        uint amount = (price*distribution[1])/100;\r\n        transferAmount(referrerAddress, amount, 1);\r\n        uint LevelDistributeAmount = (price*distribution[2])/100;\r\n        levelIncomeDistribute(userAddress,users[userAddress].id,LevelDistributeAmount,level,1);        \r\n    }    \r\n\r\n    function levelIncomeDistribute(address userAddress, uint referrerId, uint amount, uint8 level, uint8 types) internal {\r\n        uint256 income = amount;\r\n        address user;\r\n        uint currentRecipient;\r\n        uint myID;\r\n        address currentRecipient_1;\r\n        uint recipient = referrerId;\r\n        uint256 uplinesComm;\r\n        uint cnd;\r\n        if(types == 3){\r\n            cnd = 6;\r\n        }\r\n        else if(types == 4){\r\n            cnd = 15;\r\n        }\r\n        else{\r\n            cnd = 10;\r\n        }\r\n\r\n        for (uint8 i = 1; i <= cnd; i++) {\r\n            if(types == 3){\r\n              uplinesComm = income;\r\n            }\r\n            else if(types == 4){\r\n              uplinesComm = boostLevelIncomePerLevel;\r\n            }\r\n            else{\r\n              uplinesComm = (income * levelPercentage[i]) / 100;\r\n            }\r\n\r\n            if (types == 1) {\r\n                //currentRecipient = users[userIds[referrerId]].referrer;\r\n                currentRecipient = recipient;\r\n                user = userAddress;\r\n                currentRecipient_1 = users[userIds[currentRecipient]].referrer;\r\n                myID = 0;\r\n            } else if (types == 2) {\r\n                currentRecipient = recipient;\r\n                user = userAddress;\r\n                currentRecipient_1 = Wpools[currentRecipient].myAddress;\r\n                myID = currentRecipient;\r\n            }\r\n            else if (types == 3) {\r\n                currentRecipient = recipient;\r\n                user = userAddress;\r\n                currentRecipient_1 = Apools[currentRecipient].myAddress;\r\n                myID = currentRecipient;\r\n            }\r\n            else if (types == 4) {\r\n                currentRecipient = recipient;\r\n                user = userAddress;\r\n                currentRecipient_1 = Bpools[currentRecipient].myAddress;\r\n                myID = currentRecipient;    \r\n            }\r\n            if (currentRecipient_1 != address(0) && currentRecipient_1 != address(0x0)) {\r\n                if (users[currentRecipient_1].activeLevels[level]) {\r\n                    LevelIncomeReport memory newLevelReport = LevelIncomeReport({\r\n                        fromid: users[user].id,\r\n                        fromaddress: user,\r\n                        slot: level,\r\n                        level: i,\r\n                        amount: uplinesComm,\r\n                        timestamp: block.timestamp,\r\n                        types: types\r\n                    });\r\n\r\n                    LevelIncomeTransactions[currentRecipient_1].push(newLevelReport);\r\n                    if (types == 3) {\r\n                     transferAmount(currentRecipient_1, uplinesComm, 4);\r\n                    }\r\n                    else{\r\n                     transferAmount(currentRecipient_1, uplinesComm, 2);   \r\n                    }\r\n                } else {\r\n                    transferAmount(owner, uplinesComm, 0);\r\n                }\r\n            } else {\r\n                transferAmount(owner, uplinesComm, 0);\r\n            }\r\n\r\n            if (types == 1) {\r\n                recipient = users[currentRecipient_1].id;\r\n            } else if(types == 2) {\r\n                recipient = Wpools[myID].currectID;\r\n            } else if(types == 3) {\r\n                recipient = Apools[myID].currectID;\r\n            } else if(types == 4) {\r\n                recipient = Bpools[myID].currectID;\r\n            } \r\n\r\n        }\r\n    }\r\n\r\n\r\n    function updateUplinesCount(address userAddress) internal {\r\n        User storage user = users[userAddress];\r\n        address upline = user.referrer;        \r\n        for (uint i = 1; i <= 16 && upline != address(0); i++) {\r\n            User storage uplineUser = users[upline];\r\n            uplineUser.teamCount += 1;\r\n            uplineUser.levelWiseUsers[i - 1] += 1;\r\n            upline = uplineUser.referrer;\r\n        }\r\n    }\r\n\r\n\r\n    // Worldpool payout code start //\r\n    function updateX3AutoPoolReferrer(address userAddress, uint referrerId, uint8 level) private{\r\n        uint256 newIndex=x3Index[level]+1;\r\n        x3vId_number[level][newIndex]=worldId;\r\n        x3Index[level]=newIndex;\r\n        uint price = packageprice[level];\r\n        uint256 worldpoolincome=(price*distribution[3])/100;\r\n        users[userAddress].worldpool[level].push(worldId);\r\n        wpools memory wpool = wpools({\r\n            id: users[userAddress].id, // userID\r\n            wid: worldId, // autopoolID\r\n            myAddress: userAddress, // user address\r\n            level: level,\r\n            currectID: Wpools[referrerId].wid, // refe ID\r\n            currectRefAddress: Wpools[referrerId].myAddress, // // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        worldIds[worldId] = userAddress;\r\n        Wpools[worldId] = wpool;        \r\n\r\n        if(Wpools[referrerId].id1==0){\r\n          Wpools[referrerId].id1 = worldId;\r\n          transferAmount(Wpools[referrerId].myAddress, worldpoolincome, 3);\r\n          worldId++;  \r\n        }\r\n        else if(Wpools[referrerId].id2==0){\r\n          Wpools[referrerId].id2 = worldId;\r\n          uint upline = Wpools[Wpools[referrerId].currectID].wid;\r\n          levelIncomeDistribute(userAddress,upline,worldpoolincome,level,2);\r\n          worldId++;   \r\n        }\r\n        else if(Wpools[referrerId].id3==0){\r\n          Wpools[referrerId].id3 = worldId;  \r\n          worldId++;\r\n          x3CurrentvId[level]=x3CurrentvId[level]+1;     \r\n          uint freeAutoPoolReferrer = findFreex3AutoPoolReferrer(level);\r\n          updateX3AutoPoolReferrer(Wpools[referrerId].myAddress, freeAutoPoolReferrer,level);\r\n        }        \r\n    }  \r\n\r\n    function findFreex3AutoPoolReferrer(uint8 level) public view returns(uint){\r\n            uint id=x3CurrentvId[level];\r\n            return x3vId_number[level][id];\r\n    } \r\n     \r\n    function usersWorldAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\r\n        return (users[userAddress].worldpool[level].length,users[userAddress].worldpool[level]);\r\n    }\r\n    // Worldpool payout code end //\r\n\r\n    // Autopool payout code start //\r\n    function updateX3AutoPoolReferrer_auto(address userAddress, uint referrerId, uint8 level) private{\r\n        uint256 newIndex=x3Index_auto[level]+1;\r\n        x3vId_number_auto[level][newIndex]=autoId;\r\n        x3Index_auto[level]=newIndex;\r\n        uint price = packageprice[level];\r\n        uint256 autopoolincome=(price*distribution[4])/100;\r\n        uint256 income=autopoolincome/6;\r\n        users[userAddress].autopool[level].push(autoId);\r\n        apools memory apool = apools({\r\n            id: users[userAddress].id, // userID\r\n            wid: autoId, // autopoolID\r\n            myAddress: userAddress, // user address\r\n            level: level,\r\n            currectID: Apools[referrerId].wid, // refe ID\r\n            currectRefAddress: Apools[referrerId].myAddress, // // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        autoIds[autoId] = userAddress;\r\n        Apools[autoId] = apool;        \r\n\r\n        if(Apools[referrerId].id1==0){\r\n          Apools[referrerId].id1 = autoId;\r\n          uint upline = Apools[referrerId].wid;\r\n          levelIncomeDistribute(userAddress,upline,income,level,3);\r\n          autoId++;  \r\n        }\r\n        else if(Apools[referrerId].id2==0){\r\n          Apools[referrerId].id2 = autoId;\r\n          uint upline = Apools[referrerId].wid;\r\n          levelIncomeDistribute(userAddress,upline,income,level,3);\r\n          autoId++;   \r\n        }\r\n        else if(Apools[referrerId].id3==0){\r\n          Apools[referrerId].id3 = autoId;  \r\n          uint upline = Apools[referrerId].wid;\r\n          levelIncomeDistribute(userAddress,upline,income,level,3);          \r\n          autoId++;\r\n          x3CurrentvId_auto[level]=x3CurrentvId_auto[level]+1;\r\n        }        \r\n    }  \r\n\r\n    function findFreex3AutoPoolReferrer_auto(uint8 level) public view returns(uint){\r\n            uint id=x3CurrentvId_auto[level];\r\n            return x3vId_number_auto[level][id];\r\n    } \r\n     \r\n    function usersAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\r\n        return (users[userAddress].autopool[level].length,users[userAddress].autopool[level]);\r\n    }\r\n    // Autopool payout code end //\r\n    \r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function levelWiseUsers(address userAddress) public view returns(uint[] memory) {\r\n        return (users[userAddress].levelWiseUsers);\r\n    }\r\n\r\n    function usersActiveLevels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeLevels[level];\r\n    }\r\n\r\n    function usersActiveBoosting(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeBoosting[level];\r\n    }\r\n\r\n    function userspartner(address userAddress) public view returns(address[] memory) {\r\n        return (users[userAddress].partners[0]);\r\n    }\r\n\r\n    function transferAmount(address receiver, uint dividend, uint types) private {\r\n        if (types == 1) {\r\n            users[receiver].directbonus += dividend;\r\n        }\r\n        else if (types == 2) {\r\n            users[receiver].levelbonus += dividend;\r\n        } \r\n        else if (types == 3) {\r\n            users[receiver].worldpoolincome += dividend;\r\n        } \r\n        else if (types == 4) {\r\n            users[receiver].autopoolincome += dividend;\r\n        } \r\n        else if (types == 5) {\r\n            users[receiver].boostpoolincome += dividend;\r\n        }\r\n        else if (types == 6) {\r\n            users[receiver].boostUplineincome += dividend;\r\n        }\r\n        else {\r\n           lapsedIncome += dividend;\r\n        }\r\n\r\n        users[receiver].totalEarn += dividend;\r\n        require(usdt.transfer(receiver, dividend), \"USDT transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Apools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bpools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBoostingPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LevelIncomeTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Wpools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostLevelIncomePerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostingPackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreex3AutoPoolReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreex3AutoPoolReferrer_auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreex3AutoPoolReferrer_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lapsedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"levelWiseUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"partnercount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxlevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"directbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"worldpoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autopoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostpoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostUplineincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"teamCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveBoosting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersAutoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersBoostAutoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersWorldAutoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userspartner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"worldId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worldIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3CurrentvId_auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3CurrentvId_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3Index_auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3Index_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x3vId_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x3vId_number_auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x3vId_number_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UNIVERSAL_META_GLOBAL", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003608246ea4d22193697e0ce07dd24c024a628a5400000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d6dc7f2e95a55dfc568f4e5026ccc3f7c0b864c99d6c13aa258587d326db6142"}