{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/Canaries.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../contracts/interfaces/IChromiaNetResolver.sol\\\";\\n\\ncontract Canaries is\\n    Initializable,\\n    ERC721Upgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address public cnr;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _cnr, address defaultAdmin) public initializer {\\n        __ERC721_init(\\\"Canaries\\\", \\\"MoD-Canaries\\\");\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        cnr = _cnr;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(MINTER_ROLE, defaultAdmin);\\n    }\\n\\n    function safeMint(\\n        address to,\\n        uint256 tokenId\\n    ) public onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds\\n    ) public onlyRole(MINTER_ROLE) {\\n        require(accounts.length == tokenIds.length, \\\"PlanetPlots: array size mismatch\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _safeMint(accounts[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721Upgradeable) returns (string memory) {\\n        return IChromiaNetResolver(cnr).getTokenUri(address(this), tokenId);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/CompetitionTickets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../extensions/ERC1155TradableUpgradeable.sol\\\";\\n\\ncontract CompetitionTickets is\\n    Initializable,\\n    ERC1155Upgradeable,\\n    ERC1155BurnableUpgradeable,\\n    ERC1155TradableUpgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address defaultAdmin) public initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ERC1155Burnable_init();\\n        __ERC1155Tradable_init(false);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(MINTER_ROLE, defaultAdmin);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mint(account, id, amount, \\\"\\\");\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        override(ERC1155Upgradeable, ERC1155TradableUpgradeable)\\n        whenNotPaused\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/Items.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../contracts/interfaces/IChromiaNetResolver.sol\\\";\\n\\ncontract Items is\\n    Initializable,\\n    ERC721Upgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC721BurnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    uint256 public constant COUNTER_MAX = type(uint64).max;\\n    uint256 public constant PREFIX_MAX = type(uint64).max;\\n    uint256 public constant PREFIX_OFFSET = 19;\\n\\n    CountersUpgradeable.Counter public tokenIdCounter;\\n    address public cnr;\\n\\n    mapping(uint256 => uint256) public upgradeLevel;\\n\\n    event Migrated(\\n        address account,\\n        uint256 itemId,\\n        uint256 legacyTokenId,\\n        uint256 tokenId\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _cnr, address defaultAdmin) public initializer {\\n        __ERC721_init(\\\"Items\\\", \\\"MoD-Items\\\");\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ERC721Burnable_init();\\n\\n        cnr = _cnr;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(MINTER_ROLE, defaultAdmin);\\n    }\\n\\n    function _safeMintByPrefix(\\n        address to,\\n        uint64 tokenIdPrefix\\n    ) internal returns (uint256) {\\n        uint256 cnt = tokenIdCounter.current();\\n        require(cnt <= COUNTER_MAX, \\\"Items: counter exceeds maximum\\\");\\n        tokenIdCounter.increment();\\n\\n        uint256 tokenId = (uint256(tokenIdPrefix) * (10 ** PREFIX_OFFSET)) | cnt;\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    function safeMintByPrefix(\\n        address to,\\n        uint64 tokenIdPrefix\\n    ) public onlyRole(MINTER_ROLE) {\\n        _safeMintByPrefix(to, tokenIdPrefix);\\n    }\\n\\n    function safeMintByPrefixBatch(\\n        address[] calldata accounts,\\n        uint64[] calldata tokenIdPrefixes\\n    ) public onlyRole(MINTER_ROLE) {\\n        require(\\n            accounts.length == tokenIdPrefixes.length,\\n            \\\"Items: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _safeMintByPrefix(accounts[i], tokenIdPrefixes[i]);\\n        }\\n    }\\n\\n    function safeMint(\\n        address to,\\n        uint256 tokenId\\n    ) public onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenId\\n    ) public onlyRole(MINTER_ROLE) {\\n        require(\\n            accounts.length == tokenId.length,\\n            \\\"Items: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _safeMint(accounts[i], tokenId[i]);\\n        }\\n    }\\n\\n    function safeMintByPrefixWithUpgradeLevel(\\n        address account,\\n        uint64 tokenIdPrefix,\\n        uint256 upgrades\\n    ) public onlyRole(MINTER_ROLE) {\\n        uint256 tokenId = _safeMintByPrefix(\\n            account,\\n            tokenIdPrefix\\n        );\\n\\n        if(upgrades > 0) {\\n            setUpgradeLevel(tokenId, upgrades);\\n        }\\n    }\\n\\n    function migrate(\\n        address[] calldata accounts,\\n        uint256[] calldata itemIds,\\n        uint256[] calldata legacyTokenIds,\\n        uint64[] calldata tokenIdPrefixes,\\n        uint256[] calldata upgradeLevels\\n    ) external onlyRole(MINTER_ROLE) {\\n        require(\\n            accounts.length == itemIds.length &&\\n                accounts.length == legacyTokenIds.length &&\\n                accounts.length == tokenIdPrefixes.length &&\\n                accounts.length == upgradeLevels.length,\\n            \\\"Items: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            uint256 tokenId = _safeMintByPrefix(\\n                accounts[i],\\n                tokenIdPrefixes[i]\\n            );\\n            upgradeLevel[tokenId] = upgradeLevels[i];\\n\\n            emit Migrated(accounts[i], itemIds[i], legacyTokenIds[i], tokenId);\\n        }\\n    }\\n\\n    function setUpgradeLevel(\\n        uint256 tokenId,\\n        uint256 value\\n    ) public onlyRole(MINTER_ROLE) {\\n        require(upgradeLevel[tokenId] < value, \\\"Items: downgrade not allowed\\\");\\n\\n        upgradeLevel[tokenId] = value;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721Upgradeable) returns (string memory) {\\n        return IChromiaNetResolver(cnr).getTokenUri(address(this), tokenId);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/PlanetPlots.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../contracts/interfaces/IChromiaNetResolver.sol\\\";\\n\\ncontract PlanetPlots is\\n    Initializable,\\n    ERC721Upgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address public cnr;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _cnr, address defaultAdmin) public initializer {\\n        __ERC721_init(\\\"PlanetPlots\\\", \\\"MoD-PlanetPlots\\\");\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        cnr = _cnr;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(MINTER_ROLE, defaultAdmin);\\n    }\\n\\n    function safeMint(\\n        address to,\\n        uint256 tokenId\\n    ) public onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function safeMintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds\\n    ) public onlyRole(MINTER_ROLE) {\\n        require(accounts.length == tokenIds.length, \\\"PlanetPlots: array size mismatch\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _safeMint(accounts[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721Upgradeable) returns (string memory) {\\n        return IChromiaNetResolver(cnr).getTokenUri(address(this), tokenId);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/Resources.sol\": {\r\n      \"content\": \"// krippilippa -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../../contracts/interfaces/IChromiaNetResolverLegacy.sol\\\";\\n\\ncontract Resources is ERC1155, AccessControl {\\n\\n    string public name = \\\"Mines of Dalarnia Resources\\\";\\n    string public symbol = \\\"MoD-Resource\\\";\\n\\n    IChromiaNetResolver private CNR;\\n    bytes32 public constant RESOURCES_HANDLER = keccak256(\\\"RESOURCES_HANDLER\\\");\\n\\n    string [] public resourceCatalogue;\\n\\n    mapping(string => uint) public resourcesToId;\\n\\n    constructor (IChromiaNetResolver _CNR) ERC1155 (\\\"\\\") {\\n        CNR = _CNR;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isResourcesHandler(){\\n        require(hasRole(RESOURCES_HANDLER, msg.sender),\\\"Tx not from resourcesHandler\\\");\\n        _;\\n    }\\n\\n    function createResource (string memory _resourceName) external isResourcesHandler {\\n        for (uint256 index = 0; index < resourceCatalogue.length; index++) {\\n            require(keccak256(abi.encodePacked((_resourceName))) != (keccak256(abi.encodePacked((resourceCatalogue[index])))), \\\"Resource name already taken\\\");\\n        }\\n\\n        resourceCatalogue.push(_resourceName);\\n        resourcesToId[_resourceName] = (resourceCatalogue.length - 1);\\n    }\\n\\n    function mintBatch(address _to, uint[] memory _resources, uint[] memory _amounts) external isResourcesHandler() returns (bool){\\n        for (uint256 index = 0; index < _resources.length; index++) {\\n            require(_resources[index] < resourceCatalogue.length, \\\"Trying to mint non-existant resource\\\");\\n        }\\n        _mintBatch(_to, _resources , _amounts, \\\"\\\");\\n        return true;\\n    }\\n\\n    function burnBatch(address _from, uint256[] memory _ids, uint256[] memory _amounts) external isResourcesHandler() returns (bool) {\\n        require(\\n            _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _burnBatch(_from, _ids, _amounts);\\n        return true;\\n    }\\n\\n    function getResourceCount() external view returns (uint){\\n        return resourceCatalogue.length;\\n    }\\n\\n    function uri(uint _tokenId) override public view returns (string memory) {\\n        require(_tokenId < resourceCatalogue.length, \\\"ERC1155Metadata: URI query for nonexistent token\\\");\\n        return IChromiaNetResolver(CNR).getNFTURI(address(this), _tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChromiaNetResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/IChromiaNetResolver.sol\\\";\\n\\ncontract ChromiaNetResolver is IChromiaNetResolver, AccessControl {\\n    using Strings for uint256;\\n\\n    bytes32 public constant URI_SETTER = keccak256(\\\"URI_SETTER\\\");\\n    string private _baseUri;\\n\\n    constructor(string memory baseUri, address defaultAdmin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(URI_SETTER, defaultAdmin);\\n\\n        _baseUri = baseUri;\\n    }\\n\\n    function getBaseUri() external view override returns (string memory) {\\n        return _baseUri;\\n    }\\n\\n    function setBaseUri(string calldata baseUri)\\n        external\\n        override\\n        onlyRole(URI_SETTER)\\n    {\\n        _baseUri = baseUri;\\n\\n        emit Updated(_msgSender(), baseUri);\\n    }\\n\\n    function getTokenUri(address contractAddress, uint256 id)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseUri,\\n                    uint256(uint160(address(contractAddress))).toHexString(20),\\n                    \\\"/\\\",\\n                    id.toString()\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CompetitionRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../contracts/interfaces/ICompetitionRewardPool.sol\\\";\\nimport \\\"../contracts/interfaces/ITokenFacade.sol\\\";\\nimport \\\"../contracts/assets/CompetitionTickets.sol\\\";\\n\\ncontract ComepetitionRewardPool is\\n    ICompetitionRewardPool,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant COMPETITION_COMMITTEE_ROLE =\\n        keccak256(\\\"COMPETITION_COMMITTEE_ROLE\\\");\\n\\n    uint256 public constant STATE_NOT_ENTERED = 0;\\n    uint256 public constant STATE_ENTERED = 1;\\n    uint256 public constant STATE_CLAIMED = 2;\\n\\n    mapping(uint256 => uint256) public participantCount;\\n    mapping(uint256 => uint256) public balance;\\n    mapping(uint256 => mapping(address => uint256)) public state;\\n\\n    address public taxAccount;\\n    address public genesisAccount;\\n    address public signerAddress;\\n    /// @custom:oz-renamed-from approveProxy\\n    address public tokenFacade;\\n    IERC20Upgradeable public darContract;\\n    CompetitionTickets public ticketContract; // not used\\n    address public resourcesContract;\\n    address public competitionTickets;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _taxAccount,\\n        address _genesisAccount,\\n        address _signerAddress,\\n        address _tokenFacade,\\n        address _resourcesContract,\\n        address _competitionTickets,\\n        IERC20Upgradeable _darContract,\\n        address defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(COMPETITION_COMMITTEE_ROLE, defaultAdmin);\\n\\n        taxAccount = _taxAccount;\\n        genesisAccount = _genesisAccount;\\n        signerAddress = _signerAddress;\\n        tokenFacade = _tokenFacade;\\n        resourcesContract = _resourcesContract;\\n        darContract = _darContract;\\n        competitionTickets = _competitionTickets;\\n    }\\n\\n    function _prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function _transferAndBurnAssets(\\n        address account,\\n        EntranceParameter calldata p\\n    ) internal {\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            account,\\n            address(this),\\n            p.darAmountEntranceFee\\n        );\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            account,\\n            taxAccount,\\n            p.darAmountTaxFee\\n        );\\n\\n        if (p.resourceIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                resourcesContract,\\n                account,\\n                p.resourceIds,\\n                p.resourceAmounts\\n            );\\n        }\\n\\n        if (p.ticketIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                competitionTickets,\\n                account,\\n                p.ticketIds,\\n                p.ticketAmounts\\n            );\\n        }\\n    }\\n\\n    function _hasEnteredBlacklistedEvent(\\n        address account,\\n        EntranceParameter calldata p\\n    ) internal view returns (bool) {\\n        for (uint256 i = 0; i < p.blacklistedEvents.length; i++) {\\n            if (state[p.blacklistedEvents[i]][account] > STATE_NOT_ENTERED) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _hasValidSignedMessage(\\n        bytes32 hashedMessage,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        return ecrecover(_prefixed(hashedMessage), v, r, s) == signerAddress;\\n    }\\n\\n    function getEntranceMessageHash(\\n        address account,\\n        uint256 eventId,\\n        EntranceParameter calldata p\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encode(address(this), account, eventId, p));\\n    }\\n\\n    function getRewardMessageHash(\\n        address account,\\n        uint256 eventId,\\n        RewardParameter calldata p\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encode(address(this), account, eventId, p));\\n    }\\n\\n    function enter(\\n        uint256 eventId,\\n        EntranceParameter calldata p,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant whenNotPaused {\\n        require(\\n            state[eventId][msg.sender] == STATE_NOT_ENTERED,\\n            \\\"ComepetitionRewardPool: account already entered\\\"\\n        );\\n        require(\\n            participantCount[eventId] < p.maxParticipantCount,\\n            \\\"ComepetitionRewardPool: participation limit reached\\\"\\n        );\\n        require(\\n            !_hasEnteredBlacklistedEvent(msg.sender, p),\\n            \\\"ComepetitionRewardPool: account already entered blacklisted event\\\"\\n        );\\n        require(\\n            p.validUntilTimestamp >= block.timestamp,\\n            \\\"ComepetitionRewardPool: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getEntranceMessageHash(msg.sender, eventId, p),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"ComepetitionRewardPool: signature invalid\\\"\\n        );\\n\\n        state[eventId][msg.sender] = STATE_ENTERED;\\n        balance[eventId] += p.darAmountEntranceFee;\\n        participantCount[eventId]++;\\n\\n        _transferAndBurnAssets(msg.sender, p);\\n\\n        emit Entered(\\n            eventId,\\n            msg.sender,\\n            p.darAmountEntranceFee,\\n            p.darAmountTaxFee,\\n            p.darAmountEntranceFee + p.darAmountTaxFee,\\n            p.resourceIds,\\n            p.resourceAmounts,\\n            p.ticketIds,\\n            p.ticketAmounts,\\n            balance[eventId]\\n        );\\n    }\\n\\n    function claimReward(\\n        uint256 eventId,\\n        RewardParameter calldata p,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            state[eventId][account] == STATE_ENTERED,\\n            \\\"ComepetitionRewardPool: account has already claimed or not entered\\\"\\n        );\\n        require(\\n            p.darAmount <= balance[eventId],\\n            \\\"ComepetitionRewardPool: reward exceeds price pool\\\"\\n        );\\n        require(\\n            p.validUntilTimestamp >= block.timestamp,\\n            \\\"ComepetitionRewardPool: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getRewardMessageHash(account, eventId, p),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"ComepetitionRewardPool: signature invalid\\\"\\n        );\\n\\n        state[eventId][account] = STATE_CLAIMED;\\n\\n        if (p.darAmount > 0) {\\n            balance[eventId] -= p.darAmount;\\n            darContract.safeTransfer(account, p.darAmount);\\n\\n            emit DarRewardClaimed(\\n                eventId,\\n                account,\\n                p.darAmount,\\n                p.rank,\\n                balance[eventId]\\n            );\\n        }\\n\\n        if (p.ticketIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_mintBatch(\\n                competitionTickets,\\n                account,\\n                p.ticketIds,\\n                p.ticketAmounts\\n            );\\n\\n            emit TicketRewardClaimed(\\n                eventId,\\n                account,\\n                p.ticketIds,\\n                p.ticketAmounts,\\n                p.rank\\n            );\\n        }\\n    }\\n\\n    function deposit(\\n        uint256 eventId,\\n        uint256 amount\\n    ) external onlyRole(COMPETITION_COMMITTEE_ROLE) {\\n        address account = _msgSender();\\n        balance[eventId] += amount;\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            account,\\n            address(this),\\n            amount\\n        );\\n\\n        emit Deposited(eventId, account, amount, balance[eventId]);\\n    }\\n\\n    function withdrawToGenesis(\\n        uint256 eventId\\n    ) external onlyRole(COMPETITION_COMMITTEE_ROLE) {\\n        uint256 current_balance = balance[eventId];\\n        require(\\n            current_balance > 0,\\n            \\\"ComepetitionRewardPool: nothing to withdraw\\\"\\n        );\\n\\n        balance[eventId] = 0;\\n        darContract.safeTransfer(genesisAccount, current_balance);\\n\\n        emit Withdrew(\\n            eventId,\\n            genesisAccount,\\n            current_balance,\\n            balance[eventId]\\n        );\\n    }\\n\\n    function setSigner(\\n        address _signerAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _signerAddress != address(0),\\n            \\\"CompetitionRewardPool: invalid signer address\\\"\\n        );\\n\\n        signerAddress = _signerAddress;\\n    }\\n\\n    function setContracts(\\n        address _tokenFacade,\\n        address _resourcesContract,\\n        address _competitionTickets\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        tokenFacade = _tokenFacade;\\n        resourcesContract = _resourcesContract;\\n        competitionTickets = _competitionTickets;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CraftingDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../contracts/utils/NoncesUpgradeable.sol\\\";\\nimport \\\"../contracts/interfaces/ITokenFacade.sol\\\";\\n\\ncontract CraftingDelegator is\\n    Initializable,\\n    NoncesUpgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    address public signer;\\n    address public taxAccount;\\n    address public tokenFacade;\\n    address public resourcesContract;\\n    address public itemsContract;\\n\\n    event EquipmentCrafted(\\n        address account,\\n        uint256 recipeId,\\n        uint256 darAmountToRevenue,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts,\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdBurned,\\n        uint64 tokenIdPrefix,\\n        uint256 nonce\\n    );\\n\\n    event EquipmentMinted(\\n        address account,\\n        uint256 itemId,\\n        uint64 tokenIdPrefix,\\n        uint256 nonce\\n    );\\n\\n    event EquipmentDusted(\\n        address account,\\n        uint256 itemId,\\n        uint256 tokenId,\\n        uint256 recipeId,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 nonce\\n    );\\n\\n    event EquipmentUpgraded(\\n        address account,\\n        uint256 itemId,\\n        uint256 tokenId,\\n        uint256 recipeId,\\n        uint256 darAmountToRevenue,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts,\\n        uint256 upgradeFrom,\\n        uint256 upgradeTo,\\n        uint256 nonce\\n    );\\n\\n    event LegacyEquipmentUpgraded(\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdToBurn,\\n        uint256 itemIdToMint,\\n        uint64 tokenPrefixToMint,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 darAmountToRevenue,\\n        uint256 nonce\\n    );\\n\\n    event ResourceCraftedBatch(\\n        address account,\\n        uint256 nonce\\n    );\\n\\n    event EquipmentRecharged(\\n        address account,\\n        uint256[] tokenIds,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts,\\n        uint256 nonce\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _signer,\\n        address _taxAccount,\\n        address _tokenFacade,\\n        address _resourcesContract,\\n        address _itemsContract,\\n        address default_admin\\n    ) public initializer {\\n        __Nonces_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        signer = _signer;\\n        taxAccount = _taxAccount;\\n        tokenFacade = _tokenFacade;\\n        resourcesContract = _resourcesContract;\\n        itemsContract = _itemsContract;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n        _setupRole(PAUSER_ROLE, default_admin);\\n    }\\n\\n    function _prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function useNonce(address account) internal returns (uint256) {\\n        return _useNonce(account);\\n    }\\n\\n    function getCraftMessageHash(\\n        address account,\\n        uint256 recipeId,\\n        uint256 darAmount,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdToBurn,\\n        uint64 tokenIdPrefix,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    recipeId,\\n                    darAmount,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    itemIdToBurn,\\n                    tokenIdToBurn,\\n                    tokenIdPrefix,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getMintMessageHash(\\n        address account,\\n        uint256 itemId,\\n        uint64 tokenIdPrefix,\\n        uint256 upgradeLevel,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    itemId,\\n                    tokenIdPrefix,\\n                    upgradeLevel,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getDustMessageHash(\\n        address account,\\n        uint256 itemId,\\n        uint256 recipeId,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 tokenId,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    itemId,\\n                    recipeId,\\n                    dustId,\\n                    dustAmount,\\n                    tokenId,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getUpgradeMessageHash(\\n        address account,\\n        uint256 itemId,\\n        uint256 tokenId,\\n        uint256 recipeId,\\n        uint256 darAmount,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 upgradeFrom,\\n        uint256 upgradeTo,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    itemId,\\n                    tokenId,\\n                    recipeId,\\n                    darAmount,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    upgradeFrom,\\n                    upgradeTo,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getLegacyUpgradeMessageHash(\\n        address account,\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdToBurn,\\n        uint256 itemIdToMint,\\n        uint64 tokenPrefixToMint,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 darAmountToRevenue,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    itemIdToBurn,\\n                    tokenIdToBurn,\\n                    itemIdToMint,\\n                    tokenPrefixToMint,\\n                    dustId,\\n                    dustAmount,\\n                    darAmountToRevenue,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getCraftResourcesMessageHash(\\n        address account,\\n        uint256[] calldata inputIds,\\n        uint256[] calldata inputAmounts,\\n        uint256[] calldata outputIds,\\n        uint256[] calldata outputAmounts,\\n        uint256 darAmountToRevenue,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    inputIds,\\n                    inputAmounts,\\n                    outputIds,\\n                    outputAmounts,\\n                    darAmountToRevenue,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function getRechargeEquipmentMessageHash(\\n        address account,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 validUntilTimestamp\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    address(this),\\n                    account,\\n                    tokenIds,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    validUntilTimestamp,\\n                    nonces(account)\\n                )\\n            );\\n    }\\n\\n    function _hasValidSignedMessage(\\n        bytes32 hashedMessage,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        return ecrecover(_prefixed(hashedMessage), v, r, s) == signer;\\n    }\\n\\n    function craftEquipment(\\n        uint256 recipeId,\\n        uint256 darAmountToRevenue,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdToBurn,\\n        uint64 tokenIdPrefix,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getCraftMessageHash(\\n                    account,\\n                    recipeId,\\n                    darAmountToRevenue,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    itemIdToBurn,\\n                    tokenIdToBurn,\\n                    tokenIdPrefix,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        if (darAmountToRevenue > 0) {\\n            ITokenFacade(tokenFacade).dar_transferFrom(\\n                account,\\n                taxAccount,\\n                darAmountToRevenue\\n            );\\n        }\\n\\n        if (resourceIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                resourcesContract,\\n                account,\\n                resourceIds,\\n                resourceAmounts\\n            );\\n        }\\n\\n        if (tokenIdToBurn > 0) {\\n            ITokenFacade(tokenFacade).erc721_burn(itemsContract, tokenIdToBurn);\\n        }\\n\\n        if (tokenIdPrefix > 0) {\\n            ITokenFacade(tokenFacade).erc721_safeMintByPrefix(\\n                itemsContract,\\n                account,\\n                tokenIdPrefix\\n            );\\n        }\\n\\n        emit EquipmentCrafted(\\n            account,\\n            recipeId,\\n            darAmountToRevenue,\\n            resourceIds,\\n            resourceAmounts,\\n            itemIdToBurn,\\n            tokenIdToBurn,\\n            tokenIdPrefix,\\n            usedNonce\\n        );\\n    }\\n\\n    function mintEquipment(\\n        uint256 itemId,\\n        uint64 tokenIdPrefix,\\n        uint256 upgradeLevel,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getMintMessageHash(\\n                    account,\\n                    itemId,\\n                    tokenIdPrefix,\\n                    upgradeLevel,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        ITokenFacade(tokenFacade).erc721_safeMintByPrefixWithUpgradeLevel(\\n            itemsContract,\\n            account,\\n            tokenIdPrefix,\\n            upgradeLevel\\n        );\\n\\n        emit EquipmentMinted(account, itemId, tokenIdPrefix, usedNonce);\\n    }\\n\\n    function dustEquipment(\\n        uint256 itemId,\\n        uint256 recipeId,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 tokenId,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n\\n        require(dustId >= 20, \\\"CraftingDelegator: dustId invalid\\\");\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getDustMessageHash(\\n                    account,\\n                    itemId,\\n                    recipeId,\\n                    dustId,\\n                    dustAmount,\\n                    tokenId,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        uint[] memory rIds = new uint[](1);\\n        rIds[0] = dustId;\\n        uint[] memory rAmounts = new uint[](1);\\n        rAmounts[0] = dustAmount;\\n\\n        ITokenFacade(tokenFacade).erc1155_mintBatch(\\n            resourcesContract,\\n            account,\\n            rIds,\\n            rAmounts\\n        );\\n\\n        if (tokenId > 0) {\\n            ITokenFacade(tokenFacade).erc721_burn(itemsContract, tokenId);\\n        }\\n\\n        emit EquipmentDusted(\\n            account,\\n            itemId,\\n            tokenId,\\n            recipeId,\\n            dustId,\\n            dustAmount,\\n            usedNonce\\n        );\\n    }\\n\\n    function upgradeEquipment(\\n        uint256 itemId,\\n        uint256 tokenId,\\n        uint256 recipeId,\\n        uint256 darAmountToRevenue,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 upgradeFrom,\\n        uint256 upgradeTo,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getUpgradeMessageHash(\\n                    account,\\n                    itemId,\\n                    tokenId,\\n                    recipeId,\\n                    darAmountToRevenue,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    upgradeFrom,\\n                    upgradeTo,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        if (darAmountToRevenue > 0) {\\n            ITokenFacade(tokenFacade).dar_transferFrom(\\n                account,\\n                taxAccount,\\n                darAmountToRevenue\\n            );\\n        }\\n\\n        if (resourceIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                resourcesContract,\\n                account,\\n                resourceIds,\\n                resourceAmounts\\n            );\\n        }\\n\\n        if (tokenId > 0) {\\n            ITokenFacade(tokenFacade).item_setUpgradeLevel(itemsContract, tokenId, upgradeTo);\\n        }\\n\\n        emit EquipmentUpgraded(\\n            account,\\n            itemId,\\n            tokenId,\\n            recipeId,\\n            darAmountToRevenue,\\n            resourceIds,\\n            resourceAmounts,\\n            upgradeFrom,\\n            upgradeTo,\\n            usedNonce\\n        );\\n    }\\n\\n    function upgradeLegacyEquipment(\\n        uint256 itemIdToBurn,\\n        uint256 tokenIdToBurn,\\n        uint256 itemIdToMint,\\n        uint64 tokenPrefixToMint,\\n        uint256 dustId,\\n        uint256 dustAmount,\\n        uint256 darAmountToRevenue,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getLegacyUpgradeMessageHash(\\n                    account,\\n                    itemIdToBurn,\\n                    tokenIdToBurn,\\n                    itemIdToMint,\\n                    tokenPrefixToMint,\\n                    dustId,\\n                    dustAmount,\\n                    darAmountToRevenue,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        if(tokenIdToBurn > 0) {\\n             ITokenFacade(tokenFacade).erc721_burn(itemsContract, tokenIdToBurn);\\n        }\\n\\n        if(darAmountToRevenue > 0) {\\n            ITokenFacade(tokenFacade).dar_transferFrom(\\n                account,\\n                taxAccount,\\n                darAmountToRevenue\\n            );\\n        }\\n\\n        if(tokenPrefixToMint > 0) {\\n            ITokenFacade(tokenFacade).erc721_safeMintByPrefix(\\n                itemsContract,\\n                account,\\n                tokenPrefixToMint\\n            );\\n        }\\n\\n        uint[] memory rIds = new uint[](1);\\n        rIds[0] = dustId;\\n        uint[] memory rAmounts = new uint[](1);\\n        rAmounts[0] = dustAmount;\\n\\n        ITokenFacade(tokenFacade).erc1155_mintBatch(\\n            resourcesContract,\\n            account,\\n            rIds,\\n            rAmounts\\n        );\\n\\n        emit LegacyEquipmentUpgraded(\\n            itemIdToBurn,\\n            tokenIdToBurn,\\n            itemIdToMint,\\n            tokenPrefixToMint,\\n            dustId,\\n            dustAmount,\\n            darAmountToRevenue,\\n            usedNonce\\n        );\\n    }\\n\\n    function craftResources(\\n        uint256[] calldata inputIds,\\n        uint256[] calldata inputAmounts,\\n        uint256[] calldata outputIds,\\n        uint256[] calldata outputAmounts,\\n        uint256 darAmountToRevenue,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getCraftResourcesMessageHash(\\n                    account,\\n                    inputIds,\\n                    inputAmounts,\\n                    outputIds,\\n                    outputAmounts,\\n                    darAmountToRevenue,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        if (darAmountToRevenue > 0) {\\n            ITokenFacade(tokenFacade).dar_transferFrom(\\n                account,\\n                taxAccount,\\n                darAmountToRevenue\\n            );\\n        }\\n\\n        if (inputIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                resourcesContract,\\n                account,\\n                inputIds,\\n                inputAmounts\\n            );\\n        }\\n\\n        ITokenFacade(tokenFacade).erc1155_mintBatch(\\n            resourcesContract,\\n            account,\\n            outputIds,\\n            outputAmounts\\n        );\\n\\n        emit ResourceCraftedBatch(account, usedNonce);\\n    }\\n\\n    function rechargeEquipment(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata resourceIds,\\n        uint256[] calldata resourceAmounts,\\n        uint256 validUntilTimestamp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        address account = _msgSender();\\n        require(\\n            validUntilTimestamp >= block.timestamp,\\n            \\\"CraftingDelegator: deadline exceeded\\\"\\n        );\\n        require(\\n            _hasValidSignedMessage(\\n                getRechargeEquipmentMessageHash(\\n                    account,\\n                    tokenIds,\\n                    resourceIds,\\n                    resourceAmounts,\\n                    validUntilTimestamp\\n                ),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"CraftingDelegator: signature invalid\\\"\\n        );\\n\\n        uint256 usedNonce = useNonce(account);\\n\\n        ITokenFacade(tokenFacade).erc1155_burnBatch(\\n            resourcesContract,\\n            account,\\n            resourceIds,\\n            resourceAmounts\\n        );\\n\\n        emit EquipmentRecharged(\\n            account,\\n            tokenIds,\\n            resourceIds,\\n            resourceAmounts,\\n            usedNonce\\n        );\\n    }\\n\\n    function setSigner(address _signer) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        signer = _signer;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dex/Factory.sol\": {\r\n      \"content\": \"// krippilippa\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/ISingleApproveTransfer.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"./Pair.sol\\\";\\n\\ncontract Factory is AccessControl{\\n\\n    bytes32 public constant FACTORY_HANDLER = keccak256(\\\"FACTORY_HANDLER\\\");\\n\\n    IERC20 public dar;\\n    address public resources;\\n    address public singleApproveTransfer;\\n    address public resourceTracker;\\n\\n    event PairCreated (address pair, uint resourceId);\\n\\n    mapping (uint => address) public getPair;\\n\\n    constructor (IERC20 _dar, address _resources, address _singleApproveTransfer, address _resourceTracker) {\\n        dar = _dar;\\n        resources = _resources;\\n        singleApproveTransfer = _singleApproveTransfer;\\n        resourceTracker = _resourceTracker;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function createPair(uint _resourceId) public returns (address pair){\\n        require(hasRole(FACTORY_HANDLER, msg.sender),\\\"Not FACTORY_HANDLER\\\");\\n        require(getPair[_resourceId] == address(0), \\\"Pair already exists\\\");\\n\\n        bytes memory bytecode = type(Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_resourceId));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IPair(pair).init(dar, resources, _resourceId, singleApproveTransfer, msg.sender, resourceTracker);\\n        ISingleApproveTransfer(singleApproveTransfer).setPair(pair);\\n\\n        getPair[_resourceId] = pair;\\n\\n        emit PairCreated(pair, _resourceId);\\n    }\\n\\n    function updateResourceTracker(address _resourceTracker) public {\\n        require(hasRole(FACTORY_HANDLER, msg.sender),\\\"Not FACTORY_HANDLER\\\");\\n        resourceTracker = _resourceTracker;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dex/Pair.sol\": {\r\n      \"content\": \"// krippilippa\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IResources.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/ISingleApproveTransfer.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n\\ncontract Pair is ERC1155Holder, AccessControl, Pausable {\\n\\n    bytes32 public constant FACTORY = keccak256(\\\"FACTORY\\\");\\n    bytes32 public constant LIQUIDITY_PROVIDER = keccak256(\\\"LIQUIDITY_PROVIDER\\\");\\n\\n    IERC20 public dar;\\n    address public resources;\\n    address public singleApproveTransfer;\\n    address public resourceTracker;\\n\\n    uint public resourceId;\\n\\n    uint public kMultiplier;\\n\\n    event SwapResourceIn(address indexed swapper, uint resourceId, uint amount, uint dar);\\n    event SwapResourceOut(address indexed swapper, uint resourceId, uint amount, uint dar);\\n\\n    constructor () {\\n        _setupRole(FACTORY, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Receiver, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isLiquidityProvider(){\\n        require(hasRole(LIQUIDITY_PROVIDER, msg.sender),\\\"Not LIQUIDITY_PROVIDER\\\");\\n        _;\\n    }\\n\\n    function init(IERC20 _dar, address _resources, uint _resourceId, address _singleApproveTransfer, address _owner, address _resourceTracker) external {\\n        require(hasRole(FACTORY, msg.sender),\\\"Not FACTORY\\\");\\n        dar = _dar;\\n        resources = _resources;\\n        singleApproveTransfer = _singleApproveTransfer;\\n        require(IResources(resources).getResourceCount() > _resourceId, \\\"Resource does not exist\\\");\\n        resourceId = _resourceId;\\n        resourceTracker = _resourceTracker;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n    }\\n\\n    function addLiquidity(uint _darAmount, uint _resourceAmount) public isLiquidityProvider(){\\n        uint[] memory resource = new uint[](1);\\n        resource[0] = resourceId;\\n        uint[] memory amount = new uint[](1);\\n\\n        if (IERC20(dar).balanceOf(address(this)) != 0){\\n            amount[0] = (_darAmount * IERC1155(resources).balanceOf(address(this), resourceId)) / IERC20(dar).balanceOf(address(this));\\n        } else {\\n            amount[0] = _resourceAmount;\\n        }\\n\\n        IERC20(dar).transferFrom(msg.sender, address(this), _darAmount);\\n        IResources(resources).mintBatch(address(this), resource, amount);\\n\\n        kMultiplier = IERC20(dar).balanceOf(address(this)) * IERC1155(resources).balanceOf(address(this), resourceId);\\n    }\\n\\n    function removeLiquidity(uint _percent) public isLiquidityProvider(){\\n        uint amountDarToRemove;\\n        uint[] memory amount = new uint[](1);\\n\\n        if (_percent < 100)\\n        {\\n            amountDarToRemove = (IERC20(dar).balanceOf(address(this)) * _percent) / 100;\\n            amount[0] = (IERC1155(resources).balanceOf(address(this), resourceId) * _percent) / 100;\\n        } else {\\n            amountDarToRemove = IERC20(dar).balanceOf(address(this));\\n            amount[0] = IERC1155(resources).balanceOf(address(this), resourceId);\\n        }\\n\\n        IERC20(dar).transfer(msg.sender, amountDarToRemove);\\n\\n        uint[] memory resource = new uint[](1);\\n        resource[0] = resourceId;\\n\\n        IResources(resources).burnBatch(address(this), resource, amount);\\n\\n        kMultiplier = IERC20(dar).balanceOf(address(this)) * IERC1155(resources).balanceOf(address(this), resourceId);\\n    }\\n\\n    function swap(uint _resourceIn, uint _resourceOut, uint _darAmount) public whenNotPaused(){\\n        if(_resourceOut > 0){\\n            uint darToPay = (kMultiplier / (IERC1155(resources).balanceOf(address(this), resourceId) - _resourceOut)) - IERC20(dar).balanceOf(address(this));\\n\\n            require (darToPay > 0, \\\"Not enough Liquidity\\\");\\n            require (darToPay <= _darAmount, \\\"Slippage Failure\\\");\\n\\n            ISingleApproveTransfer(singleApproveTransfer).takeDAR(msg.sender, darToPay);\\n            IERC1155(resources).safeTransferFrom(address(this), msg.sender, resourceId, _resourceOut, \\\"\\\");\\n            emit SwapResourceOut(msg.sender, resourceId, _resourceOut, darToPay);\\n\\n        }else if(_resourceIn > 0){\\n            uint darToGet = IERC20(dar).balanceOf(address(this)) - (kMultiplier / (IERC1155(resources).balanceOf(address(this), resourceId) + _resourceIn));\\n\\n            require (darToGet > 0, \\\"Not enough Liquidity\\\");\\n            require (darToGet >= _darAmount, \\\"Slippage Failure\\\");\\n\\n            ISingleApproveTransfer(singleApproveTransfer).takeResource(msg.sender, resourceId, _resourceIn);\\n            IERC20(dar).transfer(msg.sender, darToGet);\\n            emit SwapResourceIn(msg.sender, resourceId, _resourceIn, darToGet);\\n        }\\n    }\\n\\n    function getPairBalance() view external returns (uint, uint){\\n        return(IERC1155(resources).balanceOf(address(this), resourceId), IERC20(dar).balanceOf(address(this)));\\n    }\\n\\n    function getCurrentSwapValue(uint _resourceIn, uint _resourceOut) view external returns (uint){\\n        if(_resourceOut > 0){\\n            return((kMultiplier / (IERC1155(resources).balanceOf(address(this), resourceId) - _resourceOut)) - IERC20(dar).balanceOf(address(this)));\\n        }else{\\n            return(IERC20(dar).balanceOf(address(this)) - (kMultiplier / (IERC1155(resources).balanceOf(address(this), resourceId) + _resourceIn)));\\n        }\\n    }\\n\\n    function updateResourceTracker(address _resourceTracker) public isLiquidityProvider(){\\n        resourceTracker = _resourceTracker;\\n    }\\n\\n    function pausePair() public isLiquidityProvider(){\\n        _pause();\\n    }\\n    function unpausePair() public isLiquidityProvider(){\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dex/SingleApproveTransfer.sol\": {\r\n      \"content\": \"// krippilippa\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract SingleApproveTransfer is AccessControl{\\n\\n    bytes32 public constant FACTORY = keccak256(\\\"FACTORY\\\");\\n    bytes32 public constant PAIR = keccak256(\\\"PAIR\\\");\\n\\n    IERC20 public dar; \\n    address public resources; \\n\\n    constructor (IERC20 _dar, address _resources) {\\n        dar = _dar;\\n        resources = _resources;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    modifier isPair(){\\n        require(hasRole(PAIR, msg.sender),\\\"Not PAIR\\\");\\n        _;\\n    }\\n\\n    function takeDAR(address _sender, uint _darAmount) external isPair(){\\n        IERC20(dar).transferFrom(_sender, msg.sender, _darAmount);\\n    }\\n\\n    function takeResource(address _sender, uint _resourceId, uint _resourceAmount) external isPair(){\\n        IERC1155(resources).safeTransferFrom(_sender, msg.sender, _resourceId, _resourceAmount, \\\"\\\");\\n    }\\n\\n    function setPair(address _pair) external{\\n        require(hasRole(FACTORY, msg.sender),\\\"Not FACTORY\\\");\\n        _grantRole(PAIR, _pair);\\n    }\\n}\"\r\n    },\r\n    \"contracts/EconomyRefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../contracts/utils/NoncesUpgradeable.sol\\\";\\nimport \\\"../contracts/interfaces/ITokenFacade.sol\\\";\\n\\ncontract EconomyRefund is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ERC1155HolderUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant SERVICE_ROLE = keccak256(\\\"SERVICE_ROLE\\\");\\n\\n    struct ResourceRefund {\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    enum RefundType {\\n        Landowner,\\n        Miner\\n    }\\n\\n    address public tokenFacade;\\n    address public resourcesContract;\\n    uint256 public deadline;\\n\\n    mapping(address => mapping(RefundType => ResourceRefund)) private resourceRefund;\\n\\n    event ResourceRefundClaimed(\\n        address account,\\n        RefundType refundType,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts\\n    );\\n\\n    event CapsuleDisassembled(\\n        address account,\\n        uint256 capsuleId,\\n        uint256 capsuleAmount,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        uint256 _deadline,\\n        address _tokenFacade,\\n        address _resourcesContract,\\n        address default_admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        tokenFacade = _tokenFacade;\\n        resourcesContract = _resourcesContract;\\n\\n        deadline = _deadline;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n        _setupRole(PAUSER_ROLE, default_admin);\\n        _setupRole(SERVICE_ROLE, default_admin);\\n    }\\n\\n    function setResourceRefund(\\n        RefundType refundType,\\n        address[] calldata accounts,\\n        uint256[][] calldata resourceIds,\\n        uint256[][] calldata resourceAmounts\\n    ) external onlyRole(SERVICE_ROLE) {\\n        require(\\n            accounts.length == resourceIds.length && accounts.length == resourceAmounts.length,\\n            \\\"EconomyTransition: arrays size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            require(\\n                resourceIds[i].length == resourceAmounts[i].length,\\n                \\\"EconomyTransition: resource refund arrays size mismatch\\\"\\n            );\\n\\n            resourceRefund[accounts[i]][refundType] = ResourceRefund({ids: resourceIds[i], amounts: resourceAmounts[i]});\\n        }\\n    }\\n\\n    function getResourceRefund(\\n        address account,\\n        RefundType refundType\\n    ) public view returns (uint256[] memory, uint256[] memory){\\n        ResourceRefund memory refund = resourceRefund[account][refundType];\\n        return (refund.ids, refund.amounts);\\n    }\\n\\n    function claimResourceRefund(\\n        RefundType refundType\\n    ) external whenNotPaused {\\n        require(\\n            block.timestamp <= deadline,\\n            \\\"EconomyRefund: deadline exceeded\\\"\\n        );\\n\\n        address account = _msgSender();\\n        (uint256[] memory ids, uint256[] memory amounts) = getResourceRefund(account, refundType);\\n\\n        require(\\n            ids.length > 0,\\n            \\\"EconomyRefund: nothing to claim\\\"\\n        );\\n\\n        delete resourceRefund[account][refundType];\\n\\n        IERC1155(resourcesContract).safeBatchTransferFrom(\\n            address(this),\\n            account,\\n            ids,\\n            amounts,\\n            \\\"\\\"\\n        );\\n\\n        emit ResourceRefundClaimed(account, refundType, ids, amounts);\\n    }\\n\\n    function getResourcesForCapsule(address account, uint256 resourceId) public view returns (uint256, uint256[] memory, uint256[] memory) {\\n        uint256[] memory ids = new uint[](4);\\n        ids[0] = 0;\\n        ids[1] = 1;\\n        ids[2] = 2;\\n        ids[3] = 3;\\n\\n        uint256[] memory amounts = new uint[](4);\\n        uint256 balance = IERC1155(resourcesContract).balanceOf(account, resourceId);\\n\\n        if(resourceId == 6) {\\n            amounts[0] = 1200 * balance;\\n            amounts[1] = 500 * balance;\\n            amounts[2] = 400 * balance;\\n            amounts[3] = 140 * balance;\\n        } else if(resourceId == 14) {\\n            amounts[0] = 240 * balance;\\n            amounts[1] = 12 * balance;\\n            amounts[2] = 12 * balance;\\n            amounts[3] = 14 * balance;\\n        }\\n\\n        return (balance, ids, amounts);\\n    }\\n\\n    function disassembleTerraformingReplenishCapsules() external whenNotPaused {\\n        require(\\n            block.timestamp <= deadline,\\n            \\\"EconomyRefund: deadline exceeded\\\"\\n        );\\n\\n        address account = _msgSender();\\n\\n        uint256[] memory resourceIds = new uint256[](2);\\n        uint256[] memory resourceAmounts = new uint256[](2);\\n        resourceIds[0] = 6;\\n        resourceIds[1] = 14;\\n\\n        (uint256 balance_le1, uint256[] memory ids_le1, uint256[] memory amounts_le1) = getResourcesForCapsule(account, resourceIds[0]);\\n        (uint256 balance_le2, uint256[] memory ids_le2, uint256[] memory amounts_le2) = getResourcesForCapsule(account, resourceIds[1]);\\n        resourceAmounts[0] = balance_le1;\\n        resourceAmounts[1] = balance_le2;\\n\\n        require(\\n            balance_le1 > 0 ||  balance_le2 > 0,\\n            \\\"EconomyRefund: nothing to disassemble\\\"\\n        );\\n\\n        ITokenFacade(tokenFacade).erc1155_burnBatch(\\n            resourcesContract,\\n            account,\\n            resourceIds,\\n            resourceAmounts\\n        );\\n\\n        IERC1155(resourcesContract).safeBatchTransferFrom(\\n            address(this),\\n            account,\\n            ids_le1,\\n            amounts_le1,\\n            \\\"\\\"\\n        );\\n\\n        IERC1155(resourcesContract).safeBatchTransferFrom(\\n            address(this),\\n            account,\\n            ids_le2,\\n            amounts_le2,\\n            \\\"\\\"\\n        );\\n\\n        emit CapsuleDisassembled(\\n            account,\\n            resourceIds[0],\\n            balance_le1,\\n            ids_le1,\\n            amounts_le1\\n        );\\n\\n        emit CapsuleDisassembled(\\n            account,\\n            resourceIds[1],\\n            balance_le2,\\n            ids_le2,\\n            amounts_le2\\n        );\\n    }\\n\\n    function setDeadline(uint256 value) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        deadline = value;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ERC1155TradableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\nabstract contract ERC1155TradableUpgradeable is Initializable, ERC1155Upgradeable {\\n    bool private _tradable;\\n\\n    function __ERC1155Tradable_init(bool tradable) internal onlyInitializing {\\n        __ERC1155Tradable_init_unchained(tradable);\\n    }\\n\\n    function __ERC1155Tradable_init_unchained(bool tradable) internal onlyInitializing {\\n        _tradable = tradable;\\n    }\\n\\n    function isTradable() public view returns (bool) {\\n        return _tradable;\\n    }\\n\\n    function _setTradable(bool tradable) internal virtual {\\n        _tradable = tradable;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable) {\\n        if (!_tradable) {\\n            require(\\n                from == address(0) || to == address(0),\\n                \\\"ERC1155Tradable: transfer between non-zero addresses not allowed\\\"\\n            );\\n        }\\n\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChromiaNetResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChromiaNetResolver {\\n    event Updated(address from, string baseUri);\\n\\n    function getBaseUri() external view returns (string memory);\\n\\n    function setBaseUri(string calldata baseUri) external;\\n\\n    function getTokenUri(address contractAddress, uint256 id)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChromiaNetResolverLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChromiaNetResolver {\\n    function getNFTURI(address contractAddress, uint256 id)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICompetitionRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ICompetitionRewardPool {\\n    event Entered(\\n        uint256 indexed eventId,\\n        address indexed account,\\n        uint256 darAmountToPrizePool,\\n        uint256 darAmountToRevenue,\\n        uint256 darAmountTotal,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts,\\n        uint256[] ticketIds,\\n        uint256[] ticketAmounts,\\n        uint256 updatedPrizePoolBalance\\n    );\\n\\n    event Deposited(\\n        uint256 indexed eventId,\\n        address indexed account,\\n        uint256 amount,\\n        uint256 updatedPrizePoolBalance\\n    );\\n\\n    event Withdrew(\\n        uint256 indexed eventId,\\n        address indexed account,\\n        uint256 amount,\\n        uint256 updatedPrizePoolBalance\\n    );\\n\\n    event DarRewardClaimed(\\n        uint256 indexed eventId,\\n        address indexed account,\\n        uint256 amount,\\n        uint256 rank,\\n        uint256 updatedPrizePoolBalance\\n    );\\n\\n    event TicketRewardClaimed(\\n        uint256 indexed eventId,\\n        address indexed account,\\n        uint256[] ticketId,\\n        uint256[] ticketAmounts,\\n        uint256 rank\\n    );\\n\\n    struct EntranceParameter {\\n        uint256 darAmountEntranceFee;\\n        uint256 darAmountTaxFee;\\n        uint256[] blacklistedEvents;\\n        uint256[] resourceIds;\\n        uint256[] resourceAmounts;\\n        uint256[] ticketIds;\\n        uint256[] ticketAmounts;\\n        uint256 maxParticipantCount;\\n        uint256 validUntilTimestamp;\\n    }\\n\\n    struct RewardParameter {\\n        uint256 rank;\\n        uint256 darAmount;\\n        uint256[] ticketIds;\\n        uint256[] ticketAmounts;\\n        uint256 validUntilTimestamp;\\n    }\\n\\n    function enter(\\n        uint256 event_id,\\n        EntranceParameter calldata p,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReward(\\n        uint256 event_id,\\n        RewardParameter calldata p,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(uint256 event_id, uint256 amount) external;\\n\\n    function withdrawToGenesis(uint256 event_id) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC1155Mintable {\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721MintByPrefix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721MintByPrefix {\\n    function safeMintByPrefix(\\n        address to,\\n        uint64 tokenIdPrefix\\n    ) external;\\n\\n    function safeMintByPrefixBatch(\\n        address[] calldata accounts,\\n        uint64[] calldata tokenIdPrefixes\\n    ) external;\\n\\n    function safeMintByPrefixWithUpgradeLevel(\\n        address account,\\n        uint64 tokenIdPrefix,\\n        uint256 upgrades\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IItemUpgrades.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IItemUpgrades {\\n    function setUpgradeLevel(\\n        uint256 tokenId,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// krippilippa\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPair {\\n    function init(IERC20 _dar, address _resources, uint _resourceId, address _transferer, address _owner, address _resourceTracker) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPlanetPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPlanetPass {\\n    function planetPass(address _user, uint256 _planet) external view returns (uint256, uint256, uint256);\\n    function addPlanetPass(address _user, uint256 _planet, uint256 _passType, uint256 _expirationTime, uint256 _maxDigs) external;\\n    function addPlanetPassBatch(address _user, uint256[] calldata _planets, uint256 _passType, uint256 _expirationTime, uint256 _maxDigs) external;\\n    function setDigsLeft(address _user, uint256 _planet, uint256 _digsLeft) external;\\n    function setExpirationTime(address _user, uint256 _planet, uint256 _expirationTime) external;\\n    function subDigs(address _user, uint256 _planet, uint256 _toSub) external;\\n    function getPass(address _user, uint _planet) external view returns (uint, uint);\\n    function blacklisted(address _user) external view returns (bool);\\n    function setBlacklisted(address _user, bool _status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlanetPassHandler.sol\": {\r\n      \"content\": \"// krippilippa -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPlanetPassHandler {\\n    function passCheck(address _user, uint256 _plotId, uint256 _digs) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlanetPlot.sol\": {\r\n      \"content\": \"// krippilippa  -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nlibrary planetPlotLib {\\n    struct Plot { uint max; uint left; uint rent; bool open; uint latestReplenish; }\\n}\\n\\ninterface IPlanetPlot is IERC721 {\\n    function mintPlotRegion(address _to, uint _planetId, uint _region) external;\\n    function createPlanet (uint _xy, uint _id) external;\\n    function openRentPlot(address _renter, uint _plotId, uint8 _digsToOpen) external returns (bool);\\n    function setFreePlanetPass (uint _planetId, bool _freePass) external;\\n    function setPlayerPlanetPass (address _renter, uint[] memory _planetIds) external;\\n    function rentInfo(uint _plotId) external view returns (address, uint, uint, bool);\\n    function setPlotOpen (address _owner, uint _plotId, bool _open) external;\\n    function setPlotRent (address _owner, uint _plotId, uint _rent) external;\\n    function replenishPlot (uint _plotId, uint _digs) external returns (bool);\\n    function upgradePlotMax (uint _plotId, uint _newMax) external returns (bool);\\n    function plotMax(uint _plotId) external view returns (uint);\\n    function planetExists(uint _planetId) external view returns (bool);\\n    function updateAutoReplenish (uint _digsPerTimeUnit, uint _replenishTimeUnit) external;\\n    function plotState(uint _plotId) external returns( planetPlotLib.Plot calldata );\\n    function planetPass(address _user, uint _planetId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlanetPlotReplenish.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IPlanetPlotReplenish {\\n    struct TerraformingRecipe {\\n        uint256 tier;\\n        uint256[] resourceIds;\\n        uint256[] resourceAmounts;\\n    }\\n\\n    struct TierUpgradeRecipe {\\n        uint256[] tiers;\\n        uint256 darAmount;\\n    }\\n\\n    event TerraformingRecipeSet(\\n        uint256 recipeId,\\n        uint256 tier,\\n        uint256[] resourceIds,\\n        uint256[] resourceAmounts\\n    );\\n    event TierUpgradeRecipeSet(\\n        uint256 recipeId,\\n        uint256[] tiers,\\n        uint256 darAmount\\n    );\\n    event ReplenishCooldownSet(\\n        uint256 cooldownInSecFrom,\\n        uint256 cooldownInSecTo\\n    );\\n\\n    event ReplenishPlot(\\n        address owner,\\n        uint256 plotId,\\n        uint256 recipeId,\\n        uint256 nextDifferntTierReplenishTimestamp,\\n        uint256 nextSameTierReplenishTimestamp\\n    );\\n    event PlotTierUpgraded(\\n        address owner,\\n        uint256 plotId,\\n        uint256[] upgradedTiers,\\n        uint256 darAmountToRevenue\\n    );\\n\\n    event PlotRentSet(\\n        address owner,\\n        uint256 plotId,\\n        uint256 tier,\\n        uint256 updatedRent\\n    );\\n\\n    event MinimumTierRentSet(\\n        uint256 tier,\\n        uint256 updatedRent\\n    );\\n\\n    function replenishPlot(\\n        uint256 plotId,\\n        uint256 recipeId,\\n        uint256 rent\\n    ) external;\\n\\n    function replenishPlotBatch(\\n        uint256[] calldata plotIds,\\n        uint256[] calldata recipeIds,\\n        uint256[] calldata rents\\n    ) external;\\n\\n    function upgradePlot(\\n        uint256 plotId,\\n        uint256 recipeId\\n    ) external;\\n\\n    function upgradePlotBatch(\\n        uint256[] calldata plotIds,\\n        uint256[] calldata recipeIds\\n    ) external;\\n\\n    function setTerraformingRecipeBatch(\\n        uint256[] calldata id,\\n        TerraformingRecipe[] calldata recipe\\n    ) external;\\n\\n    function setTierUpgradeRecipe(\\n        uint256 id,\\n        TierUpgradeRecipe calldata recipe\\n    ) external;\\n\\n    function setCooldownDuration(\\n        uint256 _plotReplenishCooldownDuration,\\n        uint256 _tierReplenishCooldownDuration\\n    ) external;\\n\\n    function getTerraformingRecipe(\\n        uint256 recipeId\\n    ) external view returns (TerraformingRecipe calldata);\\n\\n    function getTierUpgradeRecipe(\\n        uint256 recipeId\\n    ) external view returns (TierUpgradeRecipe calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlotState.sol\": {\r\n      \"content\": \"// krippilippa  -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPlotState {\\n    function setMax(uint _plotId, uint _newMax) external;\\n    function setLeft(uint _plotId, uint _newLeft) external;\\n    function subLeft(uint _plotId, uint _sub) external;\\n    function setRent(uint _plotId, uint _newRent) external;\\n    function setAddressIsRenting(address _renter, uint _plotId, uint _digs) external;\\n    function addAddressIsRenting(address _renter, uint _plotId, uint _addDigs) external;\\n    function subAddressIsRenting(address _renter, uint _plotId, uint _subDigs) external;\\n    function getMax(uint _plotId) external view returns(uint);\\n    function getLeft(uint _plotId) external view returns(uint);\\n    function getRent(uint _plotId) external view returns(uint);\\n    function createPlot(uint[] calldata _plotIds) external;\\n    function setPlot(uint _plotId, uint _max, uint _left, uint _rent) external;\\n    function addressIsRenting(address _renter) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReplenishState.sol\": {\r\n      \"content\": \"// krippilippa  -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IReplenishState {\\n    function setPlotResources(uint _plotId, uint[] calldata _rIds, uint[] calldata _rAmounts) external;\\n    function setPlotResourcesBatch(uint[] calldata _plotIds, uint[][] calldata _rIds, uint[][] calldata _rAmounts) external;\\n    function getPlotResources(uint _plotId) external view returns (uint[] memory rIds, uint[] memory rAmounts);\\n    function upgradeRequired(uint _plotId) external view returns (bool);\\n    function setUpgradeRequired(uint _plotId, bool _upgradeRequired) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IResourceDex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IResourceDex {\\n    enum Direction {\\n        In,\\n        Out\\n    }\\n\\n    event SwapIn(\\n        address indexed sender,\\n        uint256 indexed resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        uint256 darAmountToRevenue\\n    );\\n\\n    event SwapOut(\\n        address indexed sender,\\n        uint256 indexed resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        uint256 darAmountToRevenue\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        Direction indexed direction,\\n        uint256 indexed resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        uint256 darAmountToRevenue\\n    );\\n\\n    event SwapFeeUpdated(\\n        address account,\\n        uint256 amountInPercent\\n    );\\n\\n    event LiquidityAdded(\\n        address account,\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        uint256 kValueFrom,\\n        uint256 kValueTo\\n    );\\n\\n    event LiquidityRemoved(\\n        address account,\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        uint256 kValueFrom,\\n        uint256 kValueTo\\n    );\\n\\n    function addLiquidity(uint256 resourceId, uint256 resourceAmount, uint256 darAmount) external;\\n\\n    function removeLiquidity(uint256 resourceId, uint256 resourceAmount, uint256 darAmount) external;\\n\\n    function swap(Direction direction, uint256 resourceId, uint256 resourceAmount, uint256 darAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IResources.sol\": {\r\n      \"content\": \"// krippilippa -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\ninterface IResources is IERC1155 {\\n    function mintBatch(address _to, uint[] memory _resources, uint[] memory _amounts) external returns (bool);\\n    function createResource(string memory _resourceName) external;\\n    function burnBatch(address _from, uint256[] memory _ids, uint256[] memory _amounts) external returns (bool);\\n    function getResourceCount() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISingleApproveTransfer.sol\": {\r\n      \"content\": \"// krippilippa\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISingleApproveTransfer{\\n    function takeDAR(address _sender, uint _darAmount) external;\\n    function takeResource(address _sender, uint _resourceId, uint _resourceAmount) external;\\n    function setPair(address _pair) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ITokenFacade {\\n    function dar_transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function erc1155_safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) external;\\n\\n    function erc1155_safeBatchTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint[] calldata ids,\\n        uint[] calldata amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function erc1155_mintBatch(\\n        address token,\\n        address account,\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) external;\\n\\n    function erc1155_burnBatch(\\n        address token,\\n        address account,\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) external;\\n\\n    function erc721_safeMintByPrefix(\\n        address token,\\n        address to,\\n        uint64 tokenIdPrefix\\n    ) external;\\n\\n    function erc721_safeMintByPrefixWithUpgradeLevel(\\n        address token,\\n        address to,\\n        uint64 tokenIdPrefix,\\n        uint256 upgrades\\n    ) external;\\n\\n    function erc721_burn(\\n        address token,\\n        uint256 tokenId\\n    ) external;\\n\\n    function erc721_burnBatch(\\n        address token,\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function item_setUpgradeLevel(\\n        address token,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SigLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SigLib {\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function hasValidSignedMessage(\\n        address signer,\\n        bytes32 hashedMessage,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bool) {\\n        return ecrecover(prefixed(hashedMessage), v, r, s) == signer;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mining_company/interfaces/IMiningCompanySeason.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IMiningCompanySeason {\\n    event McSeasonSet(\\n        uint256 seasonId,\\n        uint64 seasonStartTimestamp,\\n        uint64 seasonEndTimestamp,\\n        uint64 rewardClaimStartTimestamp,\\n        uint64 rewardClaimEndTimestamp,\\n        uint64 periodDurationInSec,\\n        uint64 modbotAmountPerPeriod,\\n        uint64 modbotVelocityUnitInSec,\\n        uint64 minPlayerRankForRegistration,\\n        uint256 rewardPoolBalance\\n    );\\n\\n    event McRegister(\\n        uint256 seasonId,\\n        address account,\\n        uint256 timestamp\\n    );\\n\\n    event ModbotsDeployedBatch(\\n        uint256 seasonId,\\n        address account,\\n        uint16[] modbotIds,\\n        uint16[] modbotAmounts,\\n        uint256 timestamp\\n    );\\n\\n    event McModbotPurchasedExt (\\n        uint256 season_id,\\n        address wallet_id,\\n        uint256 purchase_ts,\\n        uint16[] modbot_ids,\\n        uint256[] modbots_cost,\\n        uint64 daily_remained_bot_purchases\\n    );\\n\\n    event MCRewardsClaimed (\\n        uint256 season_id,\\n        address wallet_id,\\n        uint256 reward,\\n        uint256 total_chips_mined\\n    );\\n\\n    event McSeasonRewardPoolBalanceUpdated (\\n        uint256 season_id,\\n        uint256 updated_reward_pool_balance\\n    );\\n\\n    enum MiningCompanySate {\\n        NotRegistered,\\n        Registered,\\n        Claimed\\n    }\\n\\n    struct SeasonState {\\n        uint64 seasonStartTimestamp;\\n        uint64 seasonEndTimestamp;\\n        uint64 rewardClaimStartTimestamp;\\n        uint64 rewardClaimEndTimestamp;\\n        uint64 periodDurationInSec;\\n        uint64 modbotAmountPerPeriod;\\n        uint64 modbotVelocityUnitInSec;\\n        uint64 minPlayerRankForRegistration;\\n        uint256 rewardPoolBalance;\\n    }\\n\\n    struct MiningCompanyProfile {\\n        uint64 lastActionTimestamp;\\n        uint64 lastActionPeriod;\\n        uint64 remainingModbotsInPeriod;\\n    }\\n\\n    function setSeason(\\n        uint256 seasonId,\\n        SeasonState calldata state\\n    ) external;\\n\\n    function getRegistrationMessageHash(\\n        address account,\\n        uint256 seasonId,\\n        uint256 rank\\n    ) external view returns (bytes32);\\n\\n    function registerMiningCompany(\\n        uint256 seasonId,\\n        uint256 rank,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deployModbotBatch(\\n        uint256 seasonId,\\n        uint16[] calldata modBotIds,\\n        uint16[] calldata modBotAmounts\\n    ) external;\\n\\n    function updateTotalMoonChipsMined(\\n        uint256 seasonId,\\n        address[] calldata accounts,\\n        uint256[] calldata moonChipsMined,\\n        uint256 totalMoonChipsMinedInSeason\\n    ) external;\\n\\n    function claimReward(\\n        uint256 seasonId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mining_company/MiningCompanyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary MiningCompanyLib {\\n    enum ModbotType {\\n        None,\\n        Miner,\\n        Guard,\\n        Repair\\n    }\\n\\n    enum PowerKind {\\n        None,\\n        Velocity,\\n        Defence,\\n        Efficiency\\n    }\\n\\n    enum EventType {\\n        None,\\n        Regular,\\n        Specific\\n    }\\n\\n    struct EventEntity {\\n        uint64 timestamp;\\n        uint64 resource;\\n        EventType eventType;\\n    }\\n\\n    struct EventImpact {\\n        uint64 timestamp;\\n        uint64 velocity;\\n        uint64 defense;\\n        uint64 repair;\\n        uint64 guardDivider;\\n        uint64 repairDivider;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mining_company/MiningCompanySeason.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ITokenFacade.sol\\\";\\nimport \\\"../libraries/SigLib.sol\\\";\\nimport \\\"./interfaces/IMiningCompanySeason.sol\\\";\\n\\ncontract MiningCompanySeason is\\n    IMiningCompanySeason,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MGMT_ROLE = keccak256(\\\"MGMT_ROLE\\\");\\n\\n    address public signer;\\n    uint256 public fraction;\\n    address public darToken;\\n    address public resources;\\n    address public tokenFacade;\\n\\n    mapping(uint256 => SeasonState) public seasons;\\n    mapping(uint256 => uint256) public rewardPoolBalance;\\n    mapping(uint256 => mapping(address => MiningCompanySate)) public miningCompanyState;\\n    mapping(uint256 => uint256) public totalMoonChipsMined;\\n    mapping(uint256 => mapping(address => uint256)) public totalMoonChipsMinedByAddress;\\n\\n    mapping(uint256 => mapping(address => MiningCompanyProfile)) public profile;\\n    // season => account => id => amount\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) public modbotAmountByAccount;\\n\\n    mapping(uint256 => bool) public whitelistedModbotIds;\\n\\n    modifier onlyRegistered(uint256 seasonId) {\\n        require(\\n            miningCompanyState[seasonId][_msgSender()] ==\\n                MiningCompanySate.Registered,\\n            \\\"MiningCompanyProfile: sender not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _darToken,\\n        address _resources,\\n        address _tokenFacade,\\n        address _signer,\\n        address mgmtAccount,\\n        address defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(MGMT_ROLE, defaultAdmin);\\n\\n        _grantRole(MGMT_ROLE, mgmtAccount);\\n\\n        fraction = 10 ** 4;\\n\\n        darToken = _darToken;\\n        resources = _resources;\\n        tokenFacade = _tokenFacade;\\n\\n        signer = _signer;\\n    }\\n\\n    function _setSeason(uint256 seasonId, SeasonState calldata state) internal {\\n        address sender = _msgSender();\\n\\n        require(\\n            state.seasonStartTimestamp > block.timestamp,\\n            \\\"MiningCompanySeason: seasonStartTimestamp invalid\\\"\\n        );\\n        require(\\n            state.seasonEndTimestamp > state.seasonStartTimestamp,\\n            \\\"MiningCompanySeason: seasonEndTimestamp invalid\\\"\\n        );\\n        require(\\n            state.rewardClaimStartTimestamp > state.seasonEndTimestamp &&\\n                state.rewardClaimStartTimestamp < state.rewardClaimEndTimestamp,\\n            \\\"MiningCompanySeason: rewardClaimStartTimestamp invalid\\\"\\n        );\\n        require(\\n            state.periodDurationInSec > 0,\\n            \\\"MiningCompanySeason: periodDurationInSec invalid\\\"\\n        );\\n        require(\\n            state.modbotAmountPerPeriod > 0,\\n            \\\"MiningCompanySeason: modbotAmountPerPeriod invalid\\\"\\n        );\\n        require(\\n            state.modbotVelocityUnitInSec > 0,\\n            \\\"MiningCompanySeason: modbotVelocityUnitInSec invalid\\\"\\n        );\\n        require(\\n            state.rewardPoolBalance > 0,\\n            \\\"MiningCompanySeason: rewardPoolBalance invalid\\\"\\n        );\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            state.rewardPoolBalance\\n        );\\n\\n        rewardPoolBalance[seasonId] = state.rewardPoolBalance;\\n        seasons[seasonId] = state;\\n\\n        emit McSeasonSet(\\n            seasonId,\\n            state.seasonStartTimestamp,\\n            state.seasonEndTimestamp,\\n            state.rewardClaimStartTimestamp,\\n            state.rewardClaimEndTimestamp,\\n            state.periodDurationInSec,\\n            state.modbotAmountPerPeriod,\\n            state.modbotVelocityUnitInSec,\\n            state.minPlayerRankForRegistration,\\n            state.rewardPoolBalance\\n        );\\n    }\\n\\n    function setSeason(\\n        uint256 seasonId,\\n        SeasonState calldata state\\n    ) external onlyRole(MGMT_ROLE) {\\n        require(\\n            seasons[seasonId].seasonStartTimestamp == 0,\\n            \\\"MiningCompanySeason: already defined\\\"\\n        );\\n\\n        _setSeason(seasonId, state);\\n    }\\n\\n    function updateSeasonRewardPoolBalance(\\n        uint256 seasonId,\\n        uint256 updatedRewardPoolBalance\\n    ) external onlyRole(MGMT_ROLE) {\\n        require(\\n            seasons[seasonId].seasonStartTimestamp > 0,\\n            \\\"MiningCompanySeason: season not defined\\\"\\n        );\\n\\n        require(\\n            updatedRewardPoolBalance > seasons[seasonId].rewardPoolBalance,\\n            \\\"MiningCompanySeason: updatedRewardPoolBalance not greater rewardPoolBalance\\\"\\n        );\\n\\n        require(\\n            block.timestamp < seasons[seasonId].rewardClaimStartTimestamp,\\n            \\\"MiningCompanySeason: season already in reward claim phase\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        uint256 delta = updatedRewardPoolBalance - seasons[seasonId].rewardPoolBalance;\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            delta\\n        );\\n\\n        rewardPoolBalance[seasonId] = updatedRewardPoolBalance;\\n        seasons[seasonId].rewardPoolBalance = updatedRewardPoolBalance;\\n\\n        emit McSeasonRewardPoolBalanceUpdated(\\n            seasonId,\\n            updatedRewardPoolBalance\\n        );\\n    }\\n\\n    function updateTotalMoonChipsMined(\\n        uint256 seasonId,\\n        address[] calldata accounts,\\n        uint256[] calldata moonChipsMined,\\n        uint256 totalMoonChipsMinedInSeason\\n    ) external onlyRole(MGMT_ROLE) {\\n        require(\\n            accounts.length == moonChipsMined.length,\\n            \\\"MiningCompanyProfile: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            totalMoonChipsMinedByAddress[seasonId][\\n                accounts[i]\\n            ] = moonChipsMined[i];\\n        }\\n\\n        totalMoonChipsMined[seasonId] = totalMoonChipsMinedInSeason;\\n    }\\n\\n    function getRegistrationMessageHash(\\n        address account,\\n        uint256 seasonId,\\n        uint256 rank\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encode(address(this), account, seasonId, rank));\\n    }\\n\\n    function registerMiningCompanyBatch(\\n        uint256 seasonId,\\n        address[] calldata accounts\\n    ) external onlyRole(MGMT_ROLE) {\\n        uint64 rank = seasons[seasonId].minPlayerRankForRegistration;\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _registerMiningCompany(seasonId, accounts[i], rank);\\n            _initProfile(seasonId, accounts[i]);\\n        }\\n    }\\n\\n    function registerMiningCompany(\\n        uint256 seasonId,\\n        uint256 rank,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        address sender = _msgSender();\\n        require(\\n            SigLib.hasValidSignedMessage(\\n                signer,\\n                getRegistrationMessageHash(sender, seasonId, rank),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"ComepetitionRewardPool: signature invalid\\\"\\n        );\\n\\n        _registerMiningCompany(seasonId, sender, rank);\\n        _initProfile(seasonId, sender);\\n    }\\n\\n    function _initProfile(uint256 seasonId, address account) internal {\\n        profile[seasonId][account].lastActionTimestamp = uint64(\\n            block.timestamp\\n        );\\n        profile[seasonId][account].lastActionPeriod = _getPeriodByTimestamp(\\n            seasonId,\\n            uint64(block.timestamp)\\n        );\\n        profile[seasonId][account].remainingModbotsInPeriod = 6;\\n    }\\n\\n    function _registerMiningCompany(\\n        uint256 seasonId,\\n        address account,\\n        uint256 rank\\n    ) internal {\\n        require(\\n            seasons[seasonId].seasonStartTimestamp > 0,\\n            \\\"MiningCompanySeason: unkown season\\\"\\n        );\\n        require(\\n            uint64(block.timestamp) <= seasons[seasonId].seasonEndTimestamp,\\n            \\\"MiningCompanySeason: season mining phase already ended\\\"\\n        );\\n        require(\\n            miningCompanyState[seasonId][account] ==\\n                MiningCompanySate.NotRegistered,\\n            \\\"MiningCompanySeason: mining company already registered\\\"\\n        );\\n        require(\\n            rank >= seasons[seasonId].minPlayerRankForRegistration,\\n            \\\"MiningCompanySeason: rank too low\\\"\\n        );\\n\\n        miningCompanyState[seasonId][account] = MiningCompanySate.Registered;\\n\\n        emit McRegister(seasonId, account, block.timestamp);\\n    }\\n\\n    function deployModbotBatch(\\n        uint256 seasonId,\\n        uint16[] calldata modbotIds,\\n        uint16[] calldata modbotAmounts\\n    ) external onlyRegistered(seasonId) {\\n        address sender = _msgSender();\\n         require(\\n            modbotIds.length <= seasons[seasonId].modbotAmountPerPeriod,\\n            \\\"MiningCompanyProfile: array size exceeds max modbots per period\\\"\\n        );\\n\\n        require(\\n            modbotIds.length == modbotAmounts.length,\\n            \\\"MiningCompanyProfile: array size mismatch\\\"\\n        );\\n\\n        uint64 actionTimestamp = uint64(block.timestamp);\\n\\n        require(\\n            actionTimestamp >= seasons[seasonId].seasonStartTimestamp &&\\n                actionTimestamp <= seasons[seasonId].seasonEndTimestamp,\\n            \\\"MiningCompanySeason: season not in mining phase\\\"\\n        );\\n\\n        _updatePeriod(seasonId, sender, actionTimestamp);\\n        uint64 totalModbotAmount = _updateModbotCapacity(\\n            seasonId,\\n            sender,\\n            modbotAmounts\\n        );\\n        _craftModbotsBatch(\\n            seasonId,\\n            sender,\\n            modbotIds,\\n            modbotAmounts,\\n            totalModbotAmount\\n        );\\n\\n        emit ModbotsDeployedBatch(\\n            seasonId,\\n            sender,\\n            modbotIds,\\n            modbotAmounts,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _getPeriodByTimestamp(\\n        uint256 seasonId,\\n        uint64 timestamp\\n    ) internal view returns (uint64) {\\n        if (timestamp > seasons[seasonId].seasonStartTimestamp) {\\n            return\\n                (timestamp - seasons[seasonId].seasonStartTimestamp) /\\n                seasons[seasonId].periodDurationInSec;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function _updatePeriod(\\n        uint256 seasonId,\\n        address account,\\n        uint64 endTimestamp\\n    ) internal {\\n        uint64 period = _getPeriodByTimestamp(seasonId, endTimestamp);\\n\\n        if (period > profile[seasonId][account].lastActionPeriod) {\\n            uint64 modbotAmountPerPeriod = seasons[seasonId]\\n                .modbotAmountPerPeriod;\\n            profile[seasonId][account]\\n                .remainingModbotsInPeriod = modbotAmountPerPeriod;\\n            profile[seasonId][account].lastActionPeriod = period;\\n        }\\n\\n        profile[seasonId][account].lastActionTimestamp = endTimestamp;\\n    }\\n\\n    function _updateModbotCapacity(\\n        uint256 seasonId,\\n        address account,\\n        uint16[] calldata modBotAmounts\\n    ) internal returns (uint64) {\\n        uint64 modbotAmount = 0;\\n        for (uint256 i = 0; i < modBotAmounts.length; i++) {\\n            modbotAmount += modBotAmounts[i];\\n        }\\n\\n        require(\\n            modbotAmount <= profile[seasonId][account].remainingModbotsInPeriod,\\n            \\\"MiningCompanyProfile: modbot amount exceeds remaining modbot capacity\\\"\\n        );\\n\\n        profile[seasonId][account].remainingModbotsInPeriod -= modbotAmount;\\n\\n        return modbotAmount;\\n    }\\n\\n    function _craftModbots(\\n        uint256 seasonId,\\n        address account,\\n        uint16 id,\\n        uint16 amount\\n    ) internal returns (uint256, uint256, uint256[] memory) {\\n        require(\\n            amount > 0,\\n            \\\"MiningCompanySeason: invalid amount\\\"\\n        );\\n        require(\\n            whitelistedModbotIds[id],\\n            \\\"MiningCompanySeason: invalid modbot id\\\"\\n        );\\n\\n        uint256[] memory costPerModbot = new uint256[](amount);\\n        uint256 cost = 0;\\n        for (uint256 j = 1; j <= amount; j++) {\\n            costPerModbot[j - 1] =\\n                modbotAmountByAccount[seasonId][account][id] +\\n                j;\\n            cost += costPerModbot[j - 1];\\n        }\\n\\n        uint256 resource = uint256(id % 100);\\n        modbotAmountByAccount[seasonId][account][id] += amount;\\n\\n        return (resource, cost, costPerModbot);\\n    }\\n\\n    function _craftModbotsBatch(\\n        uint256 seasonId,\\n        address account,\\n        uint16[] calldata modBotIds,\\n        uint16[] calldata modBotAmounts,\\n        uint64 totalModbotAmount\\n    ) internal {\\n        uint256[] memory rIds = new uint[](modBotIds.length);\\n        uint256[] memory rAmounts = new uint256[](modBotIds.length);\\n        uint16[] memory mIds = new uint16[](totalModbotAmount);\\n        uint256[] memory modbotCosts = new uint256[](totalModbotAmount);\\n        uint256 idx = 0;\\n\\n        for (uint256 i = 0; i < modBotIds.length; i++) {\\n            (uint256 r, uint256 a, uint256[] memory c) = _craftModbots(\\n                seasonId,\\n                account,\\n                modBotIds[i],\\n                modBotAmounts[i]\\n            );\\n            rIds[i] = r;\\n            rAmounts[i] = a;\\n\\n            for (uint256 j = 0; j < c.length; j++) {\\n                mIds[idx] = modBotIds[i];\\n                modbotCosts[idx] = c[j];\\n                idx++;\\n            }\\n        }\\n\\n        ITokenFacade(tokenFacade).erc1155_burnBatch(\\n            resources,\\n            account,\\n            rIds,\\n            rAmounts\\n        );\\n\\n        emit McModbotPurchasedExt(\\n            seasonId,\\n            account,\\n            block.timestamp,\\n            mIds,\\n            modbotCosts,\\n            profile[seasonId][account].remainingModbotsInPeriod\\n        );\\n    }\\n\\n    function claimReward(uint256 seasonId) external {\\n        address sender = _msgSender();\\n        SeasonState memory s = seasons[seasonId];\\n\\n        require(\\n            block.timestamp >= s.rewardClaimStartTimestamp &&\\n                block.timestamp < s.rewardClaimEndTimestamp,\\n            \\\"MiningCompanySeason: not in claim period of season\\\"\\n        );\\n\\n        require(\\n            miningCompanyState[seasonId][sender] ==\\n                MiningCompanySate.Registered,\\n            \\\"MiningCompanySeason: mining company not registered or has already claimed\\\"\\n        );\\n\\n        require(\\n            totalMoonChipsMinedByAddress[seasonId][sender] > 0,\\n            \\\"MiningCompanySeason: nothing to claim\\\"\\n        );\\n\\n        uint256 rewardFactor = (totalMoonChipsMinedByAddress[seasonId][sender] *\\n            fraction) / totalMoonChipsMined[seasonId];\\n        uint256 rewardAmount = (s.rewardPoolBalance * rewardFactor) / fraction;\\n\\n        require(\\n            rewardPoolBalance[seasonId] >= rewardAmount,\\n            \\\"MiningCompanySeason: reward exceeds price pool\\\"\\n        );\\n\\n        miningCompanyState[seasonId][sender] = MiningCompanySate.Claimed;\\n        rewardPoolBalance[seasonId] -= rewardAmount;\\n        IERC20(darToken).transfer(sender, rewardAmount);\\n\\n        emit MCRewardsClaimed(seasonId, sender, rewardAmount, totalMoonChipsMinedByAddress[seasonId][sender]);\\n    }\\n\\n    function setSigner(address _signer) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_signer != address(0), \\\"MiningCompanyProfile: invalid signer\\\");\\n        signer = _signer;\\n    }\\n\\n    function setWhitelistedModbotIds(uint16[] calldata values) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < values.length; i++) {\\n            whitelistedModbotIds[values[i]] = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ERC1155Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\n\\ncontract ERC1155Mock is ERC1155, ERC1155Burnable {\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ERC20Mock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20 {\\n    constructor(uint256 initialSupply) ERC20(\\\"ERC20 Mock Token\\\", \\\"ERC20MT\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MoDPlotState.sol\": {\r\n      \"content\": \"// krippilippa  -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IPlanetPlot.sol\\\";\\n\\ncontract MoDPlotState is AccessControl {\\n\\n    IPlanetPlot planetPlot;\\n    bytes32 public constant PLANET_PLOT_HANDLER = keccak256(\\\"PLANET_PLOT_HANDLER\\\");\\n    bytes32 public constant PLOT_CREATOR = keccak256(\\\"PLOT_CREATOR\\\");\\n\\n    struct Renting{\\n        uint digs;\\n        uint plot;\\n    }\\n\\n    struct Plot{\\n        uint max;\\n        uint left;\\n        uint rent;\\n    }\\n\\n    mapping(address => Renting) public addressIsRenting;\\n    mapping(uint => Plot) public PlotState;\\n\\n    modifier plotExist(uint _plotId){\\n        require(_exists(_plotId), \\\"Plot does not exist in plotState\\\");\\n        _;\\n    }\\n\\n    function setMax(uint _plotId, uint _newMax) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        PlotState[_plotId].max = _newMax;\\n    }\\n\\n    function setLeft(uint _plotId, uint _newLeft) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        PlotState[_plotId].left = _newLeft;\\n    }\\n\\n    function subLeft(uint _plotId, uint _sub) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        PlotState[_plotId].left -= _sub;\\n    }\\n\\n    function setRent(uint _plotId, uint _newRent) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        PlotState[_plotId].rent = _newRent;\\n    }\\n\\n    function setAddressIsRenting(address _renter, uint _plotId, uint _digs) external onlyRole(PLANET_PLOT_HANDLER){\\n        addressIsRenting[_renter].digs = _digs;\\n        addressIsRenting[_renter].plot = _plotId;\\n    }\\n\\n    function addAddressIsRenting(address _renter, uint _plotId, uint _addDigs) external onlyRole(PLANET_PLOT_HANDLER){\\n        if(addressIsRenting[_renter].digs == 0){\\n            addressIsRenting[_renter].digs = _addDigs;\\n            addressIsRenting[_renter].plot = _plotId;\\n        }else{\\n            require(addressIsRenting[_renter].plot == _plotId, \\\"Plot mis-match\\\");\\n            addressIsRenting[_renter].digs += _addDigs;\\n        }\\n    }\\n\\n    function subAddressIsRenting(address _renter, uint _plotId, uint _subDigs) external onlyRole(PLANET_PLOT_HANDLER){\\n        require(addressIsRenting[_renter].plot == _plotId || addressIsRenting[_renter].plot == 1, \\\"Plot mis-match\\\");\\n        addressIsRenting[_renter].digs -= _subDigs;\\n    }\\n\\n    function getMax(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return PlotState[_plotId].max;\\n    }\\n\\n    function getLeft(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return PlotState[_plotId].left;\\n    }\\n\\n    function getRent(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return PlotState[_plotId].rent;\\n    }\\n\\n    function createPlot(uint[] calldata _plotIds) external onlyRole(PLOT_CREATOR){\\n        for (uint256 i = 0; i < _plotIds.length; i++) {\\n            require(!_exists(_plotIds[i]), \\\"Plot already created in state\\\");\\n            planetPlot.ownerOf(_plotIds[i]);\\n            planetPlotLib.Plot memory oldState = planetPlot.plotState(_plotIds[i]);\\n            PlotState[_plotIds[i]].max = oldState.max;\\n            PlotState[_plotIds[i]].left = oldState.left;\\n            PlotState[_plotIds[i]].rent = oldState.rent;\\n        }\\n    }\\n\\n    function setPlot(uint _plotId, uint _max, uint _left, uint _rent) external onlyRole(PLOT_CREATOR) plotExist(_plotId){\\n        PlotState[_plotId].max = _max;\\n        PlotState[_plotId].left = _left;\\n        PlotState[_plotId].rent = _rent;\\n    }\\n\\n    function portOverDigs (address[] calldata _player, uint[] calldata _plots, uint[] calldata _digsOpen) external onlyRole(PLOT_CREATOR) {\\n        require(_player.length == _digsOpen.length);\\n        for (uint256 i = 0; i < _player.length; i++) {\\n            addressIsRenting[_player[i]].digs = _digsOpen[i];\\n            addressIsRenting[_player[i]].plot = _plots[i];\\n\\n        }\\n    }\\n\\n    function _exists(uint _plotId) internal view returns (bool){\\n        if (PlotState[_plotId].max == 0){\\n            return false;\\n        }else{\\n            return true;\\n        }\\n    }\\n\\n    constructor (IPlanetPlot _planetPlot, address default_admin) {\\n        planetPlot = _planetPlot;\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PlanetPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract PlanetPass is AccessControl {\\n\\n    bytes32 public constant PLANET_PASS_HANDLER = keccak256(\\\"PLANET_PASS_HANDLER\\\");\\n\\n    struct PlanetPassInfo {\\n        uint256 expirationTime;\\n        uint256 digsLeft;\\n        uint256 passType;\\n    }\\n\\n    mapping(address => mapping(uint256 => PlanetPassInfo)) public planetPass;\\n    mapping(address => bool) public blacklisted;\\n\\n    constructor(address _default_admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _default_admin);\\n    }\\n\\n    function addPlanetPass(address _user, uint256 _planet, uint256 _passType, uint256 _expirationTime, uint256 _maxDigs) external onlyRole(PLANET_PASS_HANDLER) {\\n        _addPlanetPass(_user, _planet, _passType, _expirationTime, _maxDigs);\\n       \\n    }\\n    function addPlanetPassBatch(address _user, uint256[] calldata _planets, uint256 _passType, uint256 _expirationTime, uint256 _maxDigs) external onlyRole(PLANET_PASS_HANDLER) {\\n        for (uint256 i = 0; i < _planets.length; i++) {\\n            _addPlanetPass(_user, _planets[i], _passType, _expirationTime, _maxDigs);\\n        }\\n    }\\n\\n    function _addPlanetPass(address _user, uint256 _planet, uint256 _passType, uint256 _expirationTime, uint256 _maxDigs) internal {\\n         planetPass[_user][_planet] = PlanetPassInfo({passType: _passType, expirationTime: _expirationTime, digsLeft: _maxDigs});\\n    }\\n\\n    function setDigsLeft(address _user, uint256 _planet, uint256 _digsLeft) external onlyRole(PLANET_PASS_HANDLER) {\\n        _setDigsLeft(_user, _planet, _digsLeft);\\n    }\\n\\n    function subDigs(address _user, uint256 _planet, uint256 _toSub) external onlyRole(PLANET_PASS_HANDLER) {\\n        planetPass[_user][_planet].digsLeft -= _toSub;\\n    }\\n\\n    function setBlacklisted(address _user, bool _status) external onlyRole(PLANET_PASS_HANDLER) {\\n        blacklisted[_user] = _status;\\n    }\\n\\n    function getPass(address _user, uint _planet) external view returns (uint, uint){\\n        return (planetPass[_user][_planet].expirationTime, planetPass[_user][_planet].passType);\\n    }\\n\\n    function setDigsLeftBatch(address _user, uint256[] calldata _planets, uint256 _digsLeft) external onlyRole(PLANET_PASS_HANDLER) {\\n        for (uint256 i = 0; i < _planets.length; i++) {\\n            _setDigsLeft(_user, _planets[i], _digsLeft);\\n        }\\n    }\\n\\n    function setExpirationTime(address _user, uint256[] calldata _planets, uint256 _expirationTime) external onlyRole(PLANET_PASS_HANDLER) {\\n        for (uint256 i = 0; i < _planets.length; i++) {\\n            planetPass[_user][_planets[i]].expirationTime = _expirationTime;\\n        }\\n    }\\n\\n    function _setDigsLeft(address _user, uint256 _planet, uint256 _digsLeft) internal {\\n        planetPass[_user][_planet].digsLeft = _digsLeft;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PlanetPassHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IPlanetPass.sol\\\";\\nimport \\\"./interfaces/IPlanetPlot.sol\\\";\\nimport \\\"./interfaces/ITokenFacade.sol\\\";\\n\\ncontract PlanetPassHandler is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PLANET_PLOT_HANDLER =\\n        keccak256(\\\"PLANET_PLOT_HANDLER\\\");\\n    bytes32 public constant GAME_CONTROL = keccak256(\\\"GAME_CONTROL\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    address public planetPass;\\n    address public planetPlot;\\n    address public tokenFacade;\\n    address public initialPlanetPlot;\\n\\n    address private taxAccount;\\n\\n    uint256[] public allPlanets;\\n    mapping(uint256 => bool) public isPlanet;\\n    mapping(uint => bool) public unrestrictedAccess;\\n    mapping(uint => PlanetPassRecipe) public planetPassRecipe;\\n\\n    struct PlanetPassRecipe {\\n        uint256 recipeId;\\n        uint256[] planets;\\n        uint256 darAmount;\\n        uint256 timeFromBuy;\\n        uint256 digs;\\n    }\\n\\n    enum PlanetPassType {\\n        None,\\n        TimeAndDigsBounded,\\n        DigsBounded,\\n        TimeBounded,\\n        Unbounded\\n    }\\n\\n    event PlanetPassRecipeCreated(PlanetPassRecipe recipe);\\n    event PlanetPassRecipeDeleted(uint recipeId);\\n    event PlanetPassBuy(address user, uint recipeId);\\n    event UnboundedPlanetPassImported(address account, uint256[] planets);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _planetPass,\\n        address _planetPlots,\\n        address _tokenFacade,\\n        address _initialPlanetPlot,\\n        address _taxAccount,\\n        uint256[] calldata _planetIds,\\n        address _defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        planetPass = _planetPass;\\n        planetPlot = _planetPlots;\\n        tokenFacade = _tokenFacade;\\n        initialPlanetPlot = _initialPlanetPlot;\\n\\n        taxAccount = _taxAccount;\\n\\n        for (uint256 i = 0; i < _planetIds.length; i++) {\\n            isPlanet[_planetIds[i]] = true;\\n            allPlanets.push(_planetIds[i]);\\n        }\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _setupRole(PLANET_PLOT_HANDLER, _defaultAdmin);\\n        _setupRole(GAME_CONTROL, _defaultAdmin);\\n        _setupRole(PAUSER_ROLE, _defaultAdmin);\\n    }\\n\\n    function addPlanetPassRecipe(\\n        PlanetPassRecipe calldata recipe\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            !recipeExists(recipe.recipeId),\\n            \\\"PlanetPassHandler: recipe id already exists\\\"\\n        );\\n        require(\\n            recipe.planets.length > 0,\\n            \\\"PlanetPassHandler: must have at least one planet\\\"\\n        );\\n\\n        for (uint256 i = 0; i < recipe.planets.length; i++) {\\n            require(\\n                isPlanet[recipe.planets[i]],\\n                \\\"PlanetPassHandler: planet does not exist\\\"\\n            );\\n        }\\n\\n        require(\\n            recipe.darAmount > 0,\\n            \\\"PlanetPassHandler: planetPass must have dar input\\\"\\n        );\\n\\n        planetPassRecipe[recipe.recipeId] = recipe;\\n\\n        emit PlanetPassRecipeCreated(recipe);\\n    }\\n\\n    function removePlanetPassRecipe(\\n        uint recipeId\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            recipeExists(recipeId),\\n            \\\"PlanetPassHandler: recipe id does not exists\\\"\\n        );\\n\\n        delete planetPassRecipe[recipeId];\\n\\n        emit PlanetPassRecipeDeleted(recipeId);\\n    }\\n\\n    function importUnboundedPlanetPass() external whenNotPaused {\\n        address sender = _msgSender();\\n\\n        require(\\n            IPlanetPlot(initialPlanetPlot).planetPass(sender, 101),\\n            \\\"PlanetPassHandler: sender does not own unbounded pass\\\"\\n        );\\n\\n        addPlanetPass(sender, allPlanets, 0, 0);\\n\\n        emit UnboundedPlanetPassImported(sender, allPlanets);\\n    }\\n\\n    function buyPlanetPass(uint recipeId) external whenNotPaused {\\n        address sender = _msgSender();\\n        require(\\n            recipeExists(recipeId),\\n            \\\"PlanetPassHandler: recipe does not exist\\\"\\n        );\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            taxAccount,\\n            planetPassRecipe[recipeId].darAmount\\n        );\\n\\n        addPlanetPass(\\n            sender,\\n            planetPassRecipe[recipeId].planets,\\n            block.timestamp + planetPassRecipe[recipeId].timeFromBuy,\\n            planetPassRecipe[recipeId].digs\\n        );\\n\\n        emit PlanetPassBuy(sender, recipeId);\\n    }\\n\\n    function addPlanetPass(\\n        address _user,\\n        uint256[] memory planets,\\n        uint256 _expirationTime,\\n        uint256 _maxDigs\\n    ) internal {\\n        PlanetPassType passType;\\n        if (_expirationTime > 0 && _maxDigs > 0) {\\n            passType = PlanetPassType.TimeAndDigsBounded;\\n        } else if (_maxDigs > 0) {\\n            passType = PlanetPassType.DigsBounded;\\n        } else if (_expirationTime > 0) {\\n            passType = PlanetPassType.TimeBounded;\\n        } else {\\n            passType = PlanetPassType.Unbounded;\\n        }\\n\\n        IPlanetPass(planetPass).addPlanetPassBatch(\\n            _user,\\n            planets,\\n            uint256(passType),\\n            _expirationTime,\\n            _maxDigs\\n        );\\n    }\\n\\n    function passCheck(\\n        address _user,\\n        uint256 _plotId,\\n        uint256 digs\\n    ) external onlyRole(PLANET_PLOT_HANDLER) {\\n        require(\\n            IPlanetPass(planetPass).blacklisted(_user) == false,\\n            \\\"PlanetPassHandler: address is suspended\\\"\\n        );\\n\\n        uint planet = _plotId / 1000_000_000;\\n\\n        if (!IPlanetPlot(initialPlanetPlot).planetPass(_user, 101) && !unrestrictedAccess[planet]) {\\n            (uint256 expirationTime, uint256 passType) = IPlanetPass(planetPass)\\n                .getPass(_user, planet);\\n            PlanetPassType planetPassType = PlanetPassType(passType);\\n            require(\\n                planetPassType != PlanetPassType.None,\\n                \\\"PlanetPassHandler: planet pass required\\\"\\n            );\\n\\n            if (\\n                planetPassType == PlanetPassType.TimeAndDigsBounded ||\\n                planetPassType == PlanetPassType.TimeBounded\\n            ) {\\n                require(\\n                    block.timestamp < expirationTime,\\n                    \\\"PlanetPassHandler: planet pass has expired\\\"\\n                );\\n            }\\n            if (\\n                planetPassType == PlanetPassType.TimeAndDigsBounded ||\\n                planetPassType == PlanetPassType.DigsBounded\\n            ) {\\n                IPlanetPass(planetPass).subDigs(_user, planet, digs);\\n            }\\n        }\\n    }\\n\\n    function recipeExists(uint recipeId) public view returns (bool) {\\n        if (planetPassRecipe[recipeId].darAmount > 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function setUnrestrictedAccess(\\n        uint planetId,\\n        bool value\\n    ) external onlyRole(GAME_CONTROL) {\\n        unrestrictedAccess[planetId] = value;\\n    }\\n\\n    function setBlacklisted(\\n        address user,\\n        bool value\\n    ) external onlyRole(GAME_CONTROL) {\\n        IPlanetPass(planetPass).setBlacklisted(user, value);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PlanetPlotHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IPlanetPlot.sol\\\";\\nimport \\\"./interfaces/IResources.sol\\\";\\nimport \\\"./interfaces/IPlotState.sol\\\";\\nimport \\\"./interfaces/ITokenFacade.sol\\\";\\nimport \\\"./interfaces/IPlanetPassHandler.sol\\\";\\nimport \\\"./interfaces/ITokenFacade.sol\\\";\\n\\ncontract PlanetPlotHandler is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    address public planetPlots;\\n    address public plotState;\\n    address public planetPassHandler;\\n    address public tokenFacade;\\n    address public resources;\\n\\n    address public taxAccount;\\n    address public signerAccount;\\n\\n    uint public taxRate;\\n    uint public staticTax;      // not used\\n    uint public breakRent;      // not used\\n    /// @custom:oz-renamed-from playerMinRent\\n    uint public fallbackRent;\\n\\n    uint public fixedRent;      // not used\\n\\n    uint public maxOpenDigs;\\n    uint public miningSafetyCap;\\n\\n    mapping(address => uint) public internalNonce;\\n\\n    event Rent(\\n        address indexed renter,\\n        uint plotId,\\n        uint nrOfDigs,\\n        uint digsLeft\\n    );\\n    event CloseRentAndMint(\\n        address renter,\\n        address plotOwner,\\n        uint plotId,\\n        uint digsClosed\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _planetPlots,\\n        address _plotState,\\n        address _planetPassHandler,\\n        address _tokenFacade,\\n        address _resources,\\n        address _taxAccount,\\n        address _signerAccount,\\n        address _defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(PAUSER_ROLE, _defaultAdmin);\\n\\n        planetPlots = _planetPlots;\\n        plotState = _plotState;\\n        planetPassHandler = _planetPassHandler;\\n        tokenFacade = _tokenFacade;\\n        resources = _resources;\\n\\n        taxAccount = _taxAccount;\\n        signerAccount = _signerAccount;\\n\\n        taxRate = 10;\\n        staticTax = 100_000;\\n        breakRent = 1_000_000;\\n        fallbackRent = 100_000;\\n        fixedRent = 0;\\n\\n        maxOpenDigs = 10;\\n        miningSafetyCap = 1_000;\\n    }\\n\\n    function openRentPlot(\\n        uint plotId,\\n        uint8 digsToOpen,\\n        uint currentRent,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public whenNotPaused {\\n        address sender = _msgSender();\\n        bytes memory message = abi.encode(\\n            sender,\\n            plotId,\\n            digsToOpen,\\n            internalNonce[sender]\\n        );\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n128\\\";\\n        require(\\n            ecrecover(keccak256(abi.encodePacked(prefix, message)), v, r, s) ==\\n                signerAccount,\\n            \\\"Signature invalid\\\"\\n        );\\n        internalNonce[sender]++;\\n\\n        require(\\n            IPlotState(plotState).addressIsRenting(sender) + digsToOpen <= maxOpenDigs,\\n            \\\"Address can not open this amount of digs until closing previous digs\\\"\\n        );\\n        uint left = IPlotState(plotState).getLeft(plotId);\\n        IPlotState(plotState).subLeft(plotId, digsToOpen);\\n        IPlotState(plotState).addAddressIsRenting(sender, plotId, digsToOpen);\\n        IPlanetPassHandler(planetPassHandler).passCheck(sender, plotId, digsToOpen);\\n\\n        uint rent = IPlotState(plotState).getRent(plotId);\\n        require(rent == currentRent, \\\"rent mis-match\\\");\\n\\n        if (rent == 0) {\\n            rent = fallbackRent;\\n        }\\n\\n        uint rentToPay = rent * digsToOpen;\\n        uint tax = (rentToPay * taxRate) / 100;\\n\\n        address plotOwner = IERC721(planetPlots).ownerOf(plotId);\\n        ITokenFacade(tokenFacade).dar_transferFrom(sender, taxAccount, tax);\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            plotOwner,\\n            rentToPay - tax\\n        );\\n\\n        emit Rent(sender, plotId, digsToOpen, left);\\n    }\\n\\n    function closeRentAndMint(\\n        uint[] memory resourceIds,\\n        uint[] memory resourceAmounts,\\n        uint digsToClose,\\n        uint plotId,\\n        bytes memory prefix,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public whenNotPaused {\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < resourceAmounts.length; i++) {\\n            require(\\n                resourceAmounts[i] <= miningSafetyCap,\\n                \\\"Warning: mined resource amount overflow\\\"\\n            );\\n        }\\n        bytes memory message = abi.encode(\\n            sender,\\n            resourceIds,\\n            resourceAmounts,\\n            digsToClose,\\n            plotId,\\n            internalNonce[sender]\\n        );\\n        require(\\n            ecrecover(keccak256(abi.encodePacked(prefix, message)), v, r, s) ==\\n                signerAccount,\\n            \\\"Signature invalid\\\"\\n        );\\n        internalNonce[sender]++;\\n\\n        require(digsToClose > 0, \\\"Can not close 0 digs\\\");\\n        IPlotState(plotState).subAddressIsRenting(sender, plotId, digsToClose);\\n\\n        ITokenFacade(tokenFacade).erc1155_mintBatch(\\n            resources,\\n            sender,\\n            resourceIds,\\n            resourceAmounts\\n        );\\n\\n        address plotOwner = IERC721(planetPlots).ownerOf(plotId);\\n        emit CloseRentAndMint(sender, plotOwner, plotId, digsToClose);\\n    }\\n\\n    function updateFallbackRent(\\n        uint value\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(value > 0, \\\"rent invalid\\\");\\n        fallbackRent = value;\\n    }\\n\\n    function updateTax(\\n        uint _taxRate\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_taxRate < 100, \\\"Invalid tax rate\\\");\\n        taxRate = _taxRate;\\n    }\\n\\n    function updateMiningSafetyCap(\\n        uint _miningSafetyCap\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        miningSafetyCap = _miningSafetyCap;\\n    }\\n\\n    function updateDigLimit(uint8 _maxOpenDigs) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_maxOpenDigs > 0, \\\"Can not be 0\\\");\\n        maxOpenDigs = _maxOpenDigs;\\n    }\\n\\n    function setSigner(address _signerAccount) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        signerAccount = _signerAccount;\\n    }\\n\\n    function setPlanetPassHandler(address _planetPassHandler) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        planetPassHandler = _planetPassHandler;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PlanetPlotReplenish.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IPlanetPlotReplenish.sol\\\";\\nimport \\\"./interfaces/IPlotState.sol\\\";\\nimport \\\"./interfaces/ITokenFacade.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PlanetPlotReplenish is\\n    IPlanetPlotReplenish,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes32 public constant GAME_CONTROL = keccak256(\\\"GAME_CONTROL\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    mapping(uint256 => TerraformingRecipe) public terraformingRecipeMap;\\n    mapping(uint256 => TierUpgradeRecipe) public tierUpgradeRecipeMap;\\n    mapping(uint256 => bool) public tierUpgradeRequiredMap;\\n    mapping(uint256 => mapping(uint256 => bool)) public plotTierUpgradeMap;\\n    mapping(uint256 => uint256) public nextPlotReplenishTimestamp;\\n    mapping(uint256 => mapping(uint256 => uint256)) public nextTierReplenishTimestamp;\\n\\n    address public taxAccount;\\n    address public planetPlots;\\n    address public tokenFacade;\\n    address public resources;\\n    address public plotState;\\n\\n    uint256 public plotReplenishCooldownDuration;\\n    uint256 public tierReplenishCooldownDuration;\\n\\n    uint256 public plotMaxReplenishValue;\\n\\n    uint256 public minimumRentFallback;\\n    mapping(uint256 => uint256) public minimumTierRentMap;\\n    mapping(uint256 => uint256) public replenishedPlotTierMap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _planetPlots,\\n        address _plotState,\\n        address _tokenFacade,\\n        address _resources,\\n        address _taxAccount,\\n        address defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(GAME_CONTROL, defaultAdmin);\\n\\n        taxAccount = _taxAccount;\\n\\n        planetPlots = _planetPlots;\\n        plotState = _plotState;\\n        tokenFacade = _tokenFacade;\\n        resources = _resources;\\n\\n        plotMaxReplenishValue = 50;\\n    }\\n\\n    modifier onlyPlanetPlotOwner(uint tokenId) {\\n        require(\\n            IERC721(planetPlots).ownerOf(tokenId) == msg.sender,\\n            \\\"PlanetPlotReplenish: not owner of plot\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPlanetPlotOwnerBatch(uint[] calldata tokenIds) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                IERC721(planetPlots).ownerOf(tokenIds[i]) == msg.sender,\\n                \\\"PlanetPlotReplenish: not owner of plot\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    function _updateReplenishCooldown(\\n        uint256 plotId,\\n        uint256 tier\\n    ) internal {\\n        uint256 nextPlotReplTs = nextPlotReplenishTimestamp[plotId];\\n        uint256 nextTierReplTs = nextTierReplenishTimestamp[plotId][tier];\\n\\n        require(\\n            nextPlotReplTs < block.timestamp,\\n            \\\"PlanetPlotReplenish: plot replenish cooldown violated\\\"\\n        );\\n\\n        require(\\n            nextTierReplTs < block.timestamp,\\n            \\\"PlanetPlotReplenish: tier specific replenish cooldown violated\\\"\\n        );\\n\\n        nextPlotReplenishTimestamp[plotId] = block.timestamp + plotReplenishCooldownDuration;\\n        nextTierReplenishTimestamp[plotId][tier] = block.timestamp + tierReplenishCooldownDuration;\\n    }\\n\\n    function _replenishPlot(\\n        address planetPlotOwner,\\n        uint256 plotId,\\n        uint256 recipeId,\\n        uint256 rent\\n    ) internal {\\n        require(\\n            recipeId > 0,\\n            \\\"PlanetPlotReplenish: recipeId invalid\\\"\\n        );\\n\\n        TerraformingRecipe memory recipe = terraformingRecipeMap[recipeId];\\n        if(tierUpgradeRequiredMap[recipe.tier]) {\\n            require(\\n                plotTierUpgradeMap[plotId][recipe.tier],\\n                \\\"PlanetPlotReplenish: plot not upgraded\\\"\\n            );\\n        }\\n\\n        _updateReplenishCooldown(plotId, recipe.tier);\\n        _setPlotRent(planetPlotOwner, plotId, recipe.tier, rent);\\n\\n        ITokenFacade(tokenFacade).erc1155_burnBatch(\\n            resources,\\n            planetPlotOwner,\\n            recipe.resourceIds,\\n            recipe.resourceAmounts\\n        );\\n\\n        IPlotState(plotState).setLeft(plotId, plotMaxReplenishValue);\\n        replenishedPlotTierMap[plotId] = recipe.tier;\\n\\n        emit ReplenishPlot(\\n            planetPlotOwner,\\n            plotId,\\n            recipeId,\\n            nextPlotReplenishTimestamp[plotId],\\n            nextTierReplenishTimestamp[plotId][recipe.tier]\\n        );\\n    }\\n\\n    function _setPlotRent(\\n        address planetPlotOwner,\\n        uint256 plotId,\\n        uint256 tier,\\n        uint256 rent\\n    ) internal {\\n        uint256 minimumRent = minimumTierRentMap[tier];\\n        if(minimumRent == 0) {\\n            minimumRent = minimumRentFallback;\\n        }\\n\\n        require(\\n            rent >= minimumRent,\\n            \\\"PlanetPlotReplenish: rent invalid\\\"\\n        );\\n\\n        IPlotState(plotState).setRent(plotId, rent);\\n\\n        emit PlotRentSet(planetPlotOwner, plotId, tier, rent);\\n    }\\n\\n    function setPlotRent(\\n        uint256 plotId,\\n        uint256 rent\\n    ) external onlyPlanetPlotOwner(plotId) whenNotPaused {\\n        address planetPlotOwner = _msgSender();\\n        uint256 tier = replenishedPlotTierMap[plotId];\\n\\n        _setPlotRent(planetPlotOwner, plotId, tier, rent);\\n    }\\n\\n    function setPlotRentBatch(\\n        uint256[] calldata plotIds,\\n        uint256[] calldata rentValues\\n    ) external onlyPlanetPlotOwnerBatch(plotIds) whenNotPaused {\\n        require(\\n            plotIds.length == rentValues.length,\\n            \\\"PlanetPlotReplenish: array size mismatch\\\"\\n        );\\n\\n        address planetPlotOwner = _msgSender();\\n        for (uint256 i = 0; i < plotIds.length; i++) {\\n            uint256 tier = replenishedPlotTierMap[plotIds[i]];\\n            _setPlotRent(planetPlotOwner, plotIds[i], tier, rentValues[i]);\\n        }\\n    }\\n\\n    function replenishPlot(\\n        uint256 plotId,\\n        uint256 recipeId,\\n        uint256 rent\\n    ) external onlyPlanetPlotOwner(plotId) whenNotPaused {\\n        address planetPlotOwner = _msgSender();\\n        _replenishPlot(planetPlotOwner, plotId, recipeId, rent);\\n    }\\n\\n    function replenishPlotBatch(\\n        uint256[] calldata plotIds,\\n        uint256[] calldata recipeIds,\\n        uint256[] calldata rents\\n    ) external onlyPlanetPlotOwnerBatch(plotIds) whenNotPaused {\\n        require(\\n            plotIds.length == recipeIds.length,\\n            \\\"PlanetPlotReplenish: array size mismatch\\\"\\n        );\\n\\n        address planetPlotOwner = _msgSender();\\n        for (uint256 i = 0; i < plotIds.length; i++) {\\n            _replenishPlot(planetPlotOwner, plotIds[i], recipeIds[i], rents[i]);\\n        }\\n    }\\n\\n    function _upgradePlot(\\n        address planetPlotOwner,\\n        uint256 plotId,\\n        uint256 recipeId\\n    ) internal {\\n        TierUpgradeRecipe memory recipe = tierUpgradeRecipeMap[recipeId];\\n        require(\\n            !plotTierUpgradeMap[plotId][recipe.tiers[0]],\\n            \\\"PlanetPlotReplenish: plot already upgraded\\\"\\n        );\\n\\n        uint256 darAmountToRevenue = recipe.darAmount;\\n        require(\\n            darAmountToRevenue > 0,\\n            \\\"PlanetPlotReplenish: recipe invalid\\\"\\n        );\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            planetPlotOwner,\\n            taxAccount,\\n            darAmountToRevenue\\n        );\\n\\n        for (uint256 i = 0; i < recipe.tiers.length; i++) {\\n            plotTierUpgradeMap[plotId][recipe.tiers[i]] = true;\\n        }\\n\\n        emit PlotTierUpgraded(planetPlotOwner, plotId, recipe.tiers, recipe.darAmount);\\n    }\\n\\n    function upgradePlotFor(\\n        uint256 plotId,\\n        uint256[] calldata tiers\\n    ) external onlyRole(GAME_CONTROL) {\\n        for (uint256 i = 0; i < tiers.length; i++) {\\n            plotTierUpgradeMap[plotId][tiers[i]] = true;\\n        }\\n\\n        emit PlotTierUpgraded(\\n            IERC721(planetPlots).ownerOf(plotId),\\n            plotId,\\n            tiers,\\n            0\\n        );\\n    }\\n\\n    function upgradePlot(\\n        uint256 plotId,\\n        uint256 recipeId\\n    ) external onlyPlanetPlotOwner(plotId) whenNotPaused {\\n        address planetPlotOwner = _msgSender();\\n        _upgradePlot(planetPlotOwner, plotId, recipeId);\\n    }\\n\\n    function upgradePlotBatch(\\n        uint256[] calldata plotIds,\\n        uint256[] calldata recipeIds\\n    ) external onlyPlanetPlotOwnerBatch(plotIds) whenNotPaused {\\n        require(\\n            plotIds.length == recipeIds.length,\\n            \\\"PlanetPlotReplenish: array size mismatch\\\"\\n        );\\n\\n        address planetPlotOwner = _msgSender();\\n        for (uint256 i = 0; i < plotIds.length; i++) {\\n            _upgradePlot(planetPlotOwner, plotIds[i], recipeIds[i]);\\n        }\\n    }\\n\\n    function _setTerraformingRecipe(\\n        uint256 id,\\n        TerraformingRecipe calldata recipe\\n    ) internal {\\n        require(\\n            terraformingRecipeMap[id].resourceIds.length == 0,\\n            \\\"PlanetPlotReplenish: recipe already exists\\\"\\n        );\\n\\n        terraformingRecipeMap[id] = recipe;\\n\\n        emit TerraformingRecipeSet(\\n            id,\\n            recipe.tier,\\n            recipe.resourceIds,\\n            recipe.resourceAmounts\\n        );\\n    }\\n\\n    function setTerraformingRecipeBatch(\\n        uint256[] calldata ids,\\n        TerraformingRecipe[] calldata recipes\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            ids.length == recipes.length,\\n            \\\"PlanetPlotReplenish: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _setTerraformingRecipe(ids[i], recipes[i]);\\n        }\\n    }\\n\\n    function setTierUpgradeRecipe(\\n        uint256 recipeId,\\n        TierUpgradeRecipe calldata recipe\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            recipe.darAmount > 0,\\n            \\\"PlanetPlotReplenish: cost invalid\\\"\\n        );\\n\\n        tierUpgradeRecipeMap[recipeId] = recipe;\\n\\n        for (uint256 i = 0; i < recipe.tiers.length; i++) {\\n            tierUpgradeRequiredMap[recipe.tiers[i]] = true;\\n        }\\n\\n        emit TierUpgradeRecipeSet(\\n            recipeId,\\n            recipe.tiers,\\n            recipe.darAmount\\n        );\\n    }\\n\\n    function setCooldownDuration(\\n        uint256 _plotReplenishCooldownDuration,\\n        uint256 _tierReplenishCooldownDuration\\n    ) external onlyRole(GAME_CONTROL) {\\n        plotReplenishCooldownDuration = _plotReplenishCooldownDuration;\\n        tierReplenishCooldownDuration = _tierReplenishCooldownDuration;\\n\\n        emit ReplenishCooldownSet(plotReplenishCooldownDuration, tierReplenishCooldownDuration);\\n    }\\n\\n    function setPlotMaxReplenishValue(\\n        uint256 value\\n    ) external onlyRole(GAME_CONTROL) {\\n        plotMaxReplenishValue = value;\\n    }\\n\\n    function setMinimumTierRentBatch(\\n        uint256[] calldata tiers,\\n        uint256[] calldata rents\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            tiers.length == rents.length,\\n            \\\"PlanetPlotReplenish: array size mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tiers.length; i++) {\\n            uint256 rent = rents[i];\\n            require(rent > 0, \\\"PlanetPlotReplenish: rent invalid\\\");\\n\\n            minimumTierRentMap[tiers[i]] = rents[i];\\n\\n            emit MinimumTierRentSet(tiers[i], rent);\\n        }\\n    }\\n\\n    function setMinimumFallbackRent(\\n        uint256 value\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(value > 0, \\\"PlanetPlotReplenish: value invalid\\\");\\n        minimumRentFallback = value;\\n    }\\n\\n    function getTerraformingRecipe(\\n        uint256 recipeId\\n    ) external view returns(TerraformingRecipe memory) {\\n        return terraformingRecipeMap[recipeId];\\n    }\\n\\n    function getTierUpgradeRecipe(\\n        uint256 recipeId\\n    ) external view returns(TierUpgradeRecipe memory) {\\n        return tierUpgradeRecipeMap[recipeId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PlotState.sol\": {\r\n      \"content\": \"// krippilippa  -- LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IPlanetPlot.sol\\\";\\n\\ncontract PlotState is AccessControl {\\n\\n    IPlanetPlot planetPlot;\\n    bytes32 public constant PLANET_PLOT_HANDLER = keccak256(\\\"PLANET_PLOT_HANDLER\\\");\\n    bytes32 public constant PLOT_CREATOR = keccak256(\\\"PLOT_CREATOR\\\");\\n\\n    struct Renting{\\n        uint digs;\\n        uint plot;\\n    }\\n\\n    struct Plot{\\n        uint max;\\n        uint left;\\n        uint rent;\\n    }\\n\\n    mapping(address => Renting) public addressIsRenting;\\n    mapping(uint => Plot) public state;\\n\\n    modifier plotExist(uint _plotId){\\n        require(_exists(_plotId), \\\"Plot does not exist in plotState\\\");\\n        _;\\n    }\\n\\n    function setMax(uint _plotId, uint _newMax) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        state[_plotId].max = _newMax;\\n    }\\n\\n    function setLeft(uint _plotId, uint _newLeft) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        state[_plotId].left = _newLeft;\\n    }\\n\\n    function subLeft(uint _plotId, uint _sub) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        state[_plotId].left -= _sub;\\n    }\\n\\n    function setRent(uint _plotId, uint _newRent) external onlyRole(PLANET_PLOT_HANDLER) plotExist(_plotId){\\n        state[_plotId].rent = _newRent;\\n    }\\n\\n    function setAddressIsRenting(address _renter, uint _plotId, uint _digs) external onlyRole(PLANET_PLOT_HANDLER){\\n        addressIsRenting[_renter].digs = _digs;\\n        addressIsRenting[_renter].plot = _plotId;\\n    }\\n\\n    function addAddressIsRenting(address _renter, uint _plotId, uint _addDigs) external onlyRole(PLANET_PLOT_HANDLER){\\n        if(addressIsRenting[_renter].digs == 0){\\n            addressIsRenting[_renter].digs = _addDigs;\\n            addressIsRenting[_renter].plot = _plotId;\\n        }else{\\n            require(addressIsRenting[_renter].plot == _plotId, \\\"Plot mis-match\\\");\\n            addressIsRenting[_renter].digs += _addDigs;\\n        }\\n    }\\n\\n    function subAddressIsRenting(address _renter, uint _plotId, uint _subDigs) external onlyRole(PLANET_PLOT_HANDLER){\\n        require(addressIsRenting[_renter].plot == _plotId || addressIsRenting[_renter].plot == 1, \\\"Plot mis-match\\\");\\n        addressIsRenting[_renter].digs -= _subDigs;\\n    }\\n\\n    function getMax(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return state[_plotId].max;\\n    }\\n\\n    function getLeft(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return state[_plotId].left;\\n    }\\n\\n    function getRent(uint _plotId) external view plotExist(_plotId) returns(uint){\\n        return state[_plotId].rent;\\n    }\\n\\n    function createPlot(uint[] calldata _plotIds) external onlyRole(PLOT_CREATOR){\\n        for (uint256 i = 0; i < _plotIds.length; i++) {\\n            require(!_exists(_plotIds[i]), \\\"Plot already created in state\\\");\\n            planetPlot.ownerOf(_plotIds[i]);\\n            planetPlotLib.Plot memory oldState = planetPlot.plotState(_plotIds[i]);\\n            state[_plotIds[i]].max = oldState.max;\\n            state[_plotIds[i]].left = oldState.left;\\n            state[_plotIds[i]].rent = oldState.rent;\\n        }\\n    }\\n\\n    function setPlot(uint _plotId, uint _max, uint _left, uint _rent) external onlyRole(PLOT_CREATOR) plotExist(_plotId){\\n        state[_plotId].max = _max;\\n        state[_plotId].left = _left;\\n        state[_plotId].rent = _rent;\\n    }\\n\\n    function portOverDigs (address[] calldata _player, uint[] calldata _plots, uint[] calldata _digsOpen) external onlyRole(PLOT_CREATOR) {\\n        require(_player.length == _digsOpen.length);\\n        for (uint256 i = 0; i < _player.length; i++) {\\n            addressIsRenting[_player[i]].digs = _digsOpen[i];\\n            addressIsRenting[_player[i]].plot = _plots[i];\\n\\n        }\\n    }\\n\\n    function _exists(uint _plotId) internal view returns (bool){\\n        if (state[_plotId].max == 0){\\n            return false;\\n        }else{\\n            return true;\\n        }\\n    }\\n\\n    // ONLY FOR TESTING\\n    function createPlotForTesting(uint _plotId, uint _max, uint _left, uint _rent) external onlyRole(PLOT_CREATOR) {\\n        state[_plotId].max = _max;\\n        state[_plotId].left = _left;\\n        state[_plotId].rent = _rent;\\n    }\\n\\n    constructor (IPlanetPlot _planetPlot, address default_admin) {\\n        planetPlot = _planetPlot;\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RedeemLand.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract RedeemLand is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    address public landTickets;\\n    address public planetPlots;\\n    address public fiduciary;\\n\\n   /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _landTickets,\\n        address _planetPlots,\\n        address _fiduciary,\\n        address default_admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n        _setupRole(PAUSER_ROLE, default_admin);\\n\\n        landTickets = _landTickets;\\n        planetPlots = _planetPlots;\\n        fiduciary = _fiduciary;\\n    }\\n\\n    function _getPlotIdFromTicket(uint256 ticket) pure internal returns(uint256) {\\n        uint256 planet = ticket / 100_000;\\n        uint256 region = (ticket / 1000) % 100;\\n        uint256 index = ticket % 1000;\\n\\n        if (planet == 11){\\n            planet = 101;\\n        } else if (planet == 12){\\n            planet = 102;\\n        } else {\\n            planet = 103;\\n        }\\n\\n        uint256 plotXInRegion = index % 10;\\n        if(plotXInRegion == 0){\\n            plotXInRegion = 10;\\n        }\\n\\n        uint256 plotYInRegion = (index / 10);\\n        if(plotXInRegion != 10){\\n            plotYInRegion++;\\n        }\\n\\n        region--;\\n        uint256 regionX = region % 4;\\n        uint256 regionY = region / 4;\\n        uint256 x = regionX * 10 + plotXInRegion;\\n        uint256 y = regionY * 10 + plotYInRegion;\\n\\n        uint256 plotId = planet * 1000_000_000;\\n        plotId = plotId + (region + 1) * 1000_000;\\n        plotId = plotId + x * 1000;\\n        plotId = plotId + y;\\n\\n        return plotId;\\n    }\\n\\n    function redeemLand(uint[] calldata tokenIds) external whenNotPaused {\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 ticket = tokenIds[i];\\n            uint256 plotId = _getPlotIdFromTicket(ticket);\\n\\n            IERC721(landTickets).safeTransferFrom(sender, fiduciary, ticket);\\n            IERC721(planetPlots).safeTransferFrom(fiduciary, sender, plotId);\\n        }\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ReplenishHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IResources.sol\\\";\\nimport \\\"./interfaces/IPlanetPlot.sol\\\";\\nimport \\\"./interfaces/IPlotState.sol\\\";\\nimport \\\"./interfaces/IReplenishState.sol\\\";\\nimport \\\"./interfaces/ITokenFacade.sol\\\";\\n\\ncontract ReplenishHandler is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant GAME_CONTROL = keccak256(\\\"GAME_CONTROL\\\");\\n\\n    address public planetPlots;\\n    address public plotState;\\n    address public replenishState;\\n    address public resources;\\n    address public tokenFacade;\\n\\n    address private taxAccount;\\n    address private signerAccount;\\n\\n    uint public capsuleId;\\n    uint public replenishCooldown;\\n    uint public divideMultiplier;\\n\\n    mapping(address => uint) public internalNonce;\\n    mapping(uint => uint) public plotCooldown;\\n    mapping(uint => uint) public resourceMultiplier;\\n    mapping(uint => uint) public resourceBaseline;\\n\\n    struct EventRecipe {\\n        uint eventId;\\n        uint[] RIIds;\\n        uint[] RIAmounts;\\n        uint DIAmount;\\n        uint digAmount;\\n    }\\n    mapping(uint => EventRecipe) private eventRecipes;\\n\\n    event ReplenishPlot(\\n        address owner,\\n        uint plotId,\\n        uint digAmount,\\n        uint[] rIds,\\n        uint[] rAmounts\\n    );\\n    event EventRecipeCreated(uint recipeId);\\n    event EventRecipeRemoved(uint recipeId);\\n    event PlotEvent(uint plotId, uint eventId, uint digAmount);\\n\\n    modifier onlyPlotOwner(uint _plotId) {\\n        require(\\n            IERC721(planetPlots).ownerOf(_plotId) == msg.sender,\\n            \\\"Sender not owner of plot\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _planetPlots,\\n        address _plotState,\\n        address _replenishState,\\n        address _resources,\\n        address _tokenFacade,\\n        address _taxAccount,\\n        address _signerAccount,\\n        address _defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(PAUSER_ROLE, _defaultAdmin);\\n        _grantRole(GAME_CONTROL, _defaultAdmin);\\n\\n        planetPlots = _planetPlots;\\n        resources = _resources;\\n        plotState = _plotState;\\n        replenishState = _replenishState;\\n        tokenFacade = _tokenFacade;\\n\\n        taxAccount = _taxAccount;\\n        signerAccount = _signerAccount;\\n\\n        capsuleId = 14;\\n        replenishCooldown = 12 hours;\\n        divideMultiplier = 1;\\n    }\\n\\n    function addPlotEventRecipe(\\n        uint _recipeId,\\n        uint _eventId,\\n        uint[] calldata _RIIds,\\n        uint[] calldata _RIAmounts,\\n        uint _DIAmount,\\n        uint _digAmount\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            eventRecipes[_recipeId].digAmount == 0,\\n            \\\"Event recipe already exists\\\"\\n        );\\n        require(\\n            (_RIIds.length > 0 || _DIAmount > 0) && _digAmount > 0,\\n            \\\"Input failure\\\"\\n        );\\n\\n        eventRecipes[_recipeId] = EventRecipe({\\n            eventId: _eventId,\\n            RIIds: checkResourceIds(_RIIds),\\n            RIAmounts: validAmountArray(_RIAmounts, _RIIds.length),\\n            DIAmount: _DIAmount,\\n            digAmount: _digAmount\\n        });\\n\\n        emit EventRecipeCreated(_recipeId);\\n    }\\n\\n    function removePlotEventRecipe(\\n        uint _recipeId\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            eventRecipes[_recipeId].digAmount != 0,\\n            \\\"Event recipe does not exist\\\"\\n        );\\n        delete eventRecipes[_recipeId];\\n        emit EventRecipeRemoved(_recipeId);\\n    }\\n\\n    function setPlotEvent(\\n        uint _plotId,\\n        uint _recipeId\\n    ) external whenNotPaused onlyPlotOwner(_plotId) {\\n        address sender = _msgSender();\\n        require(\\n            eventRecipes[_recipeId].digAmount != 0,\\n            \\\"Event recipe does not exist\\\"\\n        );\\n\\n        if (eventRecipes[_recipeId].RIIds.length > 0) {\\n            ITokenFacade(tokenFacade).erc1155_burnBatch(\\n                resources,\\n                sender,\\n                eventRecipes[_recipeId].RIIds,\\n                eventRecipes[_recipeId].RIAmounts\\n            );\\n        }\\n        if (eventRecipes[_recipeId].DIAmount > 0) {\\n            ITokenFacade(tokenFacade).dar_transferFrom(\\n                sender,\\n                taxAccount,\\n                eventRecipes[_recipeId].DIAmount\\n            );\\n        }\\n\\n        emit PlotEvent(\\n            _plotId,\\n            eventRecipes[_recipeId].eventId,\\n            eventRecipes[_recipeId].digAmount\\n        );\\n    }\\n\\n    function replenishUpgradedPlot(\\n        uint _plotId,\\n        uint[] calldata _resourceIds,\\n        uint[] calldata _resourceAmounts,\\n        bytes memory _prefix,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external whenNotPaused {\\n        bytes memory message = abi.encode(\\n            msg.sender,\\n            _plotId,\\n            _resourceIds,\\n            _resourceAmounts,\\n            internalNonce[msg.sender]\\n        );\\n        require(\\n            ecrecover(\\n                keccak256(abi.encodePacked(_prefix, message)),\\n                _v,\\n                _r,\\n                _s\\n            ) == signerAccount,\\n            \\\"Signature invalid\\\"\\n        );\\n        internalNonce[msg.sender]++;\\n\\n        IReplenishState(replenishState).setPlotResources(\\n            _plotId,\\n            _resourceIds,\\n            _resourceAmounts\\n        );\\n        IReplenishState(replenishState).setUpgradeRequired(_plotId, false);\\n        replenishPlot(_plotId);\\n    }\\n\\n    function replenishPlot(\\n        uint _plotId\\n    ) public whenNotPaused onlyPlotOwner(_plotId) {\\n        address sender = _msgSender();\\n        require(\\n            IReplenishState(replenishState).upgradeRequired(_plotId) == false,\\n            \\\"Plot upgrade required\\\"\\n        );\\n        require(\\n            plotCooldown[_plotId] + replenishCooldown < block.timestamp,\\n            \\\"Plot in cooldown\\\"\\n        );\\n        uint plotMax = IPlotState(plotState).getMax(_plotId);\\n        uint digAmount = plotMax - IPlotState(plotState).getLeft(_plotId);\\n\\n        (uint[] memory rIds, uint[] memory rAmounts) = getReplenishCost(\\n            _plotId,\\n            digAmount\\n        );\\n        ITokenFacade(tokenFacade).erc1155_burnBatch(\\n            resources,\\n            sender,\\n            rIds,\\n            rAmounts\\n        );\\n\\n        IPlotState(plotState).setLeft(_plotId, plotMax);\\n        plotCooldown[_plotId] = block.timestamp;\\n        emit ReplenishPlot(sender, _plotId, digAmount, rIds, rAmounts);\\n    }\\n\\n    function setResourceMultiplier(\\n        uint[] calldata _resourceId,\\n        uint[] calldata _multiplier\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            _resourceId.length == _multiplier.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n        for (uint256 i = 0; i < _resourceId.length; i++) {\\n            resourceMultiplier[_resourceId[i]] = _multiplier[i];\\n        }\\n    }\\n\\n    function setResourceBaseline(\\n        uint[] calldata _resourceId,\\n        uint[] calldata _baseline\\n    ) external onlyRole(GAME_CONTROL) {\\n        require(\\n            _resourceId.length == _baseline.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n        for (uint256 i = 0; i < _resourceId.length; i++) {\\n            resourceBaseline[_resourceId[i]] = _baseline[i];\\n        }\\n    }\\n\\n    function setDivideMultiplier(uint _divide) external onlyRole(GAME_CONTROL) {\\n        divideMultiplier = _divide;\\n    }\\n\\n    function setPlotResources(\\n        uint _plotId,\\n        uint[] calldata _rIds,\\n        uint[] calldata _rAmounts\\n    ) external onlyRole(GAME_CONTROL) {\\n        IReplenishState(replenishState).setPlotResources(\\n            _plotId,\\n            _rIds,\\n            _rAmounts\\n        );\\n    }\\n\\n    function setPlotResourcesBatch(\\n        uint[] calldata _plotIds,\\n        uint[][] calldata _rIds,\\n        uint[][] calldata _rAmounts\\n    ) external onlyRole(GAME_CONTROL) {\\n        IReplenishState(replenishState).setPlotResourcesBatch(\\n            _plotIds,\\n            _rIds,\\n            _rAmounts\\n        );\\n    }\\n\\n    function getReplenishCost(\\n        uint _plotId,\\n        uint _digsToReplenish\\n    )\\n        public\\n        view\\n        returns (uint[] memory resourceIds, uint[] memory resourceAmounts)\\n    {\\n        (uint[] memory rIds, uint[] memory rAmounts) = IReplenishState(\\n            replenishState\\n        ).getPlotResources(_plotId);\\n        uint length = rIds.length;\\n        resourceIds = new uint[](length + 1);\\n        resourceAmounts = new uint[](length + 1);\\n        for (uint256 i = 0; i < length; i++) {\\n            resourceIds[i] = rIds[i];\\n            resourceAmounts[i] =\\n                ((resourceBaseline[rIds[i]] +\\n                    (rAmounts[i] * resourceMultiplier[rIds[i]])) *\\n                    _digsToReplenish) /\\n                divideMultiplier;\\n        }\\n        resourceIds[length] = capsuleId;\\n        resourceAmounts[length] = 1;\\n    }\\n\\n    function validAmountArray(\\n        uint[] memory _arr,\\n        uint _l\\n    ) internal pure returns (uint[] memory) {\\n        require(_arr.length == _l, \\\"Id/pre arr not same length as amount arr\\\");\\n        for (uint256 index = 0; index < _arr.length; index++) {\\n            require(_arr[index] > 0, \\\"Can't be zero amount\\\");\\n        }\\n        return _arr;\\n    }\\n\\n    function checkResourceIds(\\n        uint[] memory _rIds\\n    ) internal view returns (uint[] memory) {\\n        if (_rIds.length > 0) {\\n            uint count = IResources(resources).getResourceCount();\\n            for (uint256 i = 0; i < _rIds.length; i++) {\\n                require(_rIds[i] < count, \\\"Resource does not exist\\\");\\n                for (uint256 j = 0; j < _rIds.length; j++) {\\n                    if (i != j) {\\n                        require(\\n                            _rIds[i] != _rIds[j],\\n                            \\\"Can not have the same _rId input multiple times\\\"\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n        return _rIds;\\n    }\\n\\n    function updateReplenishCooldown(\\n        uint _replenishCooldown\\n    ) external onlyRole(GAME_CONTROL) {\\n        replenishCooldown = _replenishCooldown;\\n    }\\n\\n    function setSigner(\\n        address _signerAccount\\n    ) external onlyRole(GAME_CONTROL) {\\n        signerAccount = _signerAccount;\\n    }\\n\\n    function setReplenishState(\\n        address _replenishState\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        replenishState = _replenishState;\\n    }\\n\\n    function updateCapsuleId(uint _id) external onlyRole(GAME_CONTROL) {\\n        capsuleId = _id;\\n    }\\n\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ReplenishState.sol\": {\r\n      \"content\": \"// LEGACY\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n//L\u00e4gg till dive data i events\\ncontract ReplenishState is AccessControl {\\n    bytes32 public constant REPLENISH_HANDLER = keccak256(\\\"REPLENISH_HANDLER\\\");\\n\\n    struct ResourceData {\\n        uint[] resourceIds;\\n        uint[] resourceAmounts;\\n    }\\n\\n    mapping(uint => ResourceData) private plotResources;\\n    mapping(uint => bool) public upgradeRequired;\\n\\n    constructor (address default_admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n    }\\n\\n    function setUpgradeRequired(uint _plotId, bool _updateRequired) external onlyRole(REPLENISH_HANDLER) {\\n        upgradeRequired[_plotId] = _updateRequired;\\n    }\\n\\n    function setPlotResources(uint _plotId, uint[] calldata _rIds, uint[] calldata _rAmounts) external onlyRole(REPLENISH_HANDLER) {\\n        plotResources[_plotId].resourceIds = _rIds;\\n        plotResources[_plotId].resourceAmounts = _rAmounts;\\n    }\\n\\n    function setPlotResourcesBatch(uint[] calldata _plotIds, uint[][] calldata _rIds, uint[][] calldata _rAmounts) external onlyRole(REPLENISH_HANDLER) {\\n        for (uint256 i = 0; i < _plotIds.length; i++) {\\n            plotResources[_plotIds[i]].resourceIds = _rIds[i];\\n            plotResources[_plotIds[i]].resourceAmounts = _rAmounts[i];\\n        }\\n    }\\n\\n    function getPlotResources(uint _plotId) external view returns (uint[] memory rIds, uint[] memory rAmounts){\\n        rIds = plotResources[_plotId].resourceIds;\\n        rAmounts = plotResources[_plotId].resourceAmounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ResourceDex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../contracts/interfaces/ITokenFacade.sol\\\";\\nimport \\\"../contracts/interfaces/IResourceDex.sol\\\";\\n\\ncontract ResourceDex is\\n    IResourceDex,\\n    Initializable,\\n    ERC1155HolderUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant LIQUIDITY_PROVIDER_ROLE =\\n        keccak256(\\\"LIQUIDITY_PROVIDER_ROLE\\\");\\n\\n    address public taxAccount;\\n    address public tokenFacade;\\n    IERC20 public darContract;\\n    address public resourcesContract;\\n    uint256 public swapFeeInPercent;\\n\\n    struct Pair {\\n        uint256 resourceId;\\n        uint256 darBalance;\\n        uint256 resourceBalance;\\n        uint256 kValue;\\n    }\\n\\n    mapping(uint256 => Pair) public tradingPair;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _taxAccount,\\n        address _approveProxy,\\n        IERC20 _darContract,\\n        address _resourcesContract,\\n        uint256 _swapFeeInPercent,\\n        address defaultAdmin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSER_ROLE, defaultAdmin);\\n        _grantRole(LIQUIDITY_PROVIDER_ROLE, defaultAdmin);\\n\\n        taxAccount = _taxAccount;\\n        tokenFacade = _approveProxy;\\n        darContract = _darContract;\\n        resourcesContract = _resourcesContract;\\n        swapFeeInPercent = _swapFeeInPercent;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC1155ReceiverUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function addLiquidity(\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount\\n    ) external onlyRole(LIQUIDITY_PROVIDER_ROLE) {\\n        address sender = _msgSender();\\n        Pair memory pair = tradingPair[resourceId];\\n        uint256 kValueFrom = pair.kValue;\\n\\n        pair.darBalance += darAmount;\\n        pair.resourceBalance += resourceAmount;\\n        pair.kValue = pair.darBalance * pair.resourceBalance;\\n\\n        tradingPair[resourceId] = pair;\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            darAmount\\n        );\\n        ITokenFacade(tokenFacade).erc1155_safeTransferFrom(\\n            resourcesContract,\\n            sender,\\n            address(this),\\n            resourceId,\\n            resourceAmount,\\n            \\\"\\\"\\n        );\\n\\n        emit LiquidityAdded(\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            darAmount,\\n            kValueFrom,\\n            pair.kValue\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount\\n    ) external onlyRole(LIQUIDITY_PROVIDER_ROLE) {\\n        address sender = _msgSender();\\n        Pair memory pair = tradingPair[resourceId];\\n        uint256 kValueFrom = pair.kValue;\\n\\n        require(\\n            pair.resourceBalance >= resourceAmount,\\n            \\\"ResourceDex: resourceAmount greater than resource balance for pair\\\"\\n        );\\n        require(\\n            pair.darBalance >= darAmount,\\n            \\\"ResourceDex: darAmount greater than dar balance for pair\\\"\\n        );\\n\\n        pair.darBalance -= darAmount;\\n        pair.resourceBalance -= resourceAmount;\\n        pair.kValue = pair.darBalance * pair.resourceBalance;\\n\\n        tradingPair[resourceId] = pair;\\n\\n        IERC20(darContract).transfer(sender, darAmount);\\n        IERC1155(resourcesContract).safeTransferFrom(\\n            address(this),\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            \\\"\\\"\\n        );\\n\\n        emit LiquidityRemoved(\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            darAmount,\\n            kValueFrom,\\n            pair.kValue\\n        );\\n    }\\n\\n    function getSwapValue(\\n        Direction direction,\\n        uint256 resourceId,\\n        uint256 resourceAmount\\n    ) public view returns (uint256 darAmount, uint256 darAmountToRevenue) {\\n        Pair memory pair = tradingPair[resourceId];\\n        uint256 darBalance = IERC20(darContract).balanceOf(address(this));\\n        uint256 resourceBalance = IERC1155(resourcesContract).balanceOf(\\n            address(this),\\n            resourceId\\n        );\\n\\n        if (direction == Direction.In) {\\n            // prettier-ignore\\n            darAmount = darBalance - (pair.kValue / (resourceBalance + resourceAmount));\\n            darAmountToRevenue = darAmount * swapFeeInPercent;\\n        } else {\\n            // prettier-ignore\\n            darAmount = (pair.kValue / (resourceBalance - resourceAmount)) - darBalance;\\n            darAmountToRevenue = darAmount * swapFeeInPercent;\\n        }\\n    }\\n\\n    function swap(\\n        Direction direction,\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount\\n    ) external nonReentrant whenNotPaused {\\n        address sender = _msgSender();\\n        Pair memory pair = tradingPair[resourceId];\\n\\n        if (direction == Direction.In) {\\n            _swapIn(sender, resourceId, resourceAmount, darAmount, pair);\\n        } else if (direction == Direction.Out) {\\n            _swapOut(sender, resourceId, resourceAmount, darAmount, pair);\\n        } else {\\n            revert(\\\"ResourceDex: unsupported swap direction\\\");\\n        }\\n    }\\n\\n    function _swapIn(\\n        address sender,\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        Pair memory pair\\n    ) internal {\\n        (uint256 darAmountToSender, uint256 darAmountToRevenue) = getSwapValue(\\n            Direction.In,\\n            resourceId,\\n            resourceAmount\\n        );\\n\\n        require(darAmountToSender > 0, \\\"ResourceDex: not enough liquidity\\\");\\n\\n        require(\\n            darAmountToSender >= darAmount,\\n            \\\"ResourceDex: slippage failure\\\"\\n        );\\n\\n        pair.darBalance += resourceAmount;\\n        pair.darBalance -= darAmountToSender;\\n        tradingPair[resourceId] = pair;\\n\\n        ITokenFacade(tokenFacade).erc1155_safeTransferFrom(\\n            resourcesContract,\\n            sender,\\n            address(this),\\n            resourceId,\\n            resourceAmount,\\n            \\\"\\\"\\n        );\\n\\n        IERC20(darContract).transfer(sender, darAmountToSender);\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            darAmountToRevenue\\n        );\\n\\n        emit SwapIn(\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            darAmount,\\n            darAmountToRevenue\\n        );\\n    }\\n\\n    function _swapOut(\\n        address sender,\\n        uint256 resourceId,\\n        uint256 resourceAmount,\\n        uint256 darAmount,\\n        Pair memory pair\\n    ) internal {\\n        (uint256 darAmountToDex, uint256 darAmountToRevenue) = getSwapValue(\\n            Direction.Out,\\n            resourceId,\\n            resourceAmount\\n        );\\n\\n        require(darAmountToDex > 0, \\\"ResourceDex: not enough liquidity\\\");\\n\\n        require(darAmountToDex <= darAmount, \\\"ResourceDex: slippage failure\\\");\\n\\n        pair.darBalance -= resourceAmount;\\n        pair.darBalance += darAmountToDex;\\n        tradingPair[resourceId] = pair;\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            darAmount\\n        );\\n\\n        IERC1155(resourcesContract).safeTransferFrom(\\n            address(this),\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            \\\"\\\"\\n        );\\n\\n        ITokenFacade(tokenFacade).dar_transferFrom(\\n            sender,\\n            address(this),\\n            darAmountToRevenue\\n        );\\n\\n        emit SwapOut(\\n            sender,\\n            resourceId,\\n            resourceAmount,\\n            darAmount,\\n            darAmountToRevenue\\n        );\\n    }\\n\\n    function setSwapFee(\\n        uint256 _swapFeeInPercent\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        swapFeeInPercent = _swapFeeInPercent;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"../contracts/interfaces/IERC1155Mintable.sol\\\";\\nimport \\\"../contracts/interfaces/IERC721MintByPrefix.sol\\\";\\nimport \\\"../contracts/interfaces/ITokenFacade.sol\\\";\\nimport \\\"../contracts/interfaces/IItemUpgrades.sol\\\";\\n\\ncontract TokenFacade is\\n    ITokenFacade,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    bytes32 public constant HANDLER_ROLE = keccak256(\\\"HANDLER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    IERC20 public darContract;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IERC20 _darContract,\\n        address default_admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        darContract = _darContract;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, default_admin);\\n        _setupRole(PAUSER_ROLE, default_admin);\\n    }\\n\\n    function dar_transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        darContract.transferFrom(from, to, amount);\\n    }\\n\\n    function erc1155_safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IERC1155(token).safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function erc1155_safeBatchTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IERC1155(token).safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function erc1155_mintBatch(\\n        address token,\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IERC1155Mintable(token).mintBatch(account, ids, amounts);\\n    }\\n\\n    function erc1155_burnBatch(\\n        address token,\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        ERC1155Burnable(token).burnBatch(account, ids, amounts);\\n    }\\n\\n    function erc721_safeMintByPrefix(\\n        address token,\\n        address to,\\n        uint64 tokenIdPrefix\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IERC721MintByPrefix(token).safeMintByPrefix(to, tokenIdPrefix);\\n    }\\n\\n    function erc721_safeMintByPrefixWithUpgradeLevel(\\n        address token,\\n        address to,\\n        uint64 tokenIdPrefix,\\n        uint256 upgrades\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IERC721MintByPrefix(token).safeMintByPrefixWithUpgradeLevel(to, tokenIdPrefix, upgrades);\\n    }\\n\\n    function erc721_burn(\\n        address token,\\n        uint256 tokenId\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        ERC721Burnable(token).burn(tokenId);\\n    }\\n\\n    function erc721_burnBatch(\\n        address token,\\n        uint256[] calldata tokenIds\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            ERC721Burnable(token).burn(tokenIds[i]);\\n        }\\n    }\\n\\n    function item_setUpgradeLevel(\\n        address token,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external whenNotPaused onlyRole(HANDLER_ROLE) {\\n        IItemUpgrades(token).setUpgradeLevel(tokenId, value);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NoncesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(address => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns an address nonce.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EquipmentCrafted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EquipmentDusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EquipmentMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EquipmentRecharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upgradeFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upgradeTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"EquipmentUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemIdToMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"tokenPrefixToMint\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"LegacyEquipmentUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ResourceCraftedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"craftEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"craftResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"dustEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCraftMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"inputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCraftResourcesMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getDustMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIdToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenPrefixToMint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getLegacyUpgradeMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"upgradeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getMintMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getRechargeEquipmentMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUpgradeMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFacade\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resourcesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itemsContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"default_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenIdPrefix\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"upgradeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"rechargeEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourcesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"upgradeEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIdToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenPrefixToMint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"dustId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darAmountToRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"upgradeLegacyEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CraftingDelegator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}