{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract MultiSend {\r\n    address public owner;\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function sendETH(address[] memory tos, uint256 perAmount) external payable {\r\n        uint256 len = tos.length;\r\n        require(msg.value >= perAmount * len, \"eth not enough\");\r\n        for (uint256 i; i < len;) {\r\n            safeTransferETH(tos[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function sendETHs(address[] memory tos, uint256[] memory amounts) external payable {\r\n        uint256 len = tos.length;\r\n        uint256 totalAmount;\r\n        for (uint256 i; i < len;) {\r\n            safeTransferETH(tos[i], amounts[i]);\r\n            totalAmount += amounts[i];\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        require(msg.value >= totalAmount, \"eth not enough\");\r\n    }\r\n\r\n    function sendToken(address token, address[] memory tos, uint256 perAmount) external {\r\n        uint256 len = tos.length;\r\n        safeTransferFrom(token, msg.sender, address(this), perAmount * len);\r\n        for (uint256 i; i < len;) {\r\n            safeTransfer(token, tos[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function sendTokenV2(address token, address[] memory tos, uint256 perAmount) external {\r\n        uint256 len = tos.length;\r\n        address sender = msg.sender;\r\n        for (uint256 i; i < len;) {\r\n            safeTransferFrom(token, sender, tos[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function sendTokens(address token, address[] memory tos, uint256[] memory amounts) external {\r\n        uint256 len = tos.length;\r\n        address sender = msg.sender;\r\n        for (uint256 i; i < len;) {\r\n            safeTransferFrom(token, sender, tos[i], amounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function claimETH(uint256 amount) external {\r\n        owner.call{value : amount}(new bytes(0));\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        token.call(abi.encodeWithSelector(0xa9059cbb, owner, amount));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TAF');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TTF');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TTFF');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TF');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendETHs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"}],\"name\":\"sendTokenV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSend", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19bee7f83dc95e99d7a63f94bb7aa345a46a90e685c4b07e26f132b3d0b99506"}