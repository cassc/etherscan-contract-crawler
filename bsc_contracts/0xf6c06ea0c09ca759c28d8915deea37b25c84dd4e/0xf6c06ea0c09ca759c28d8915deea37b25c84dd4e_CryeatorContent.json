{"SourceCode": "{\"CryeatorContent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {CryeatorToken} from \\\"./CryeatorToken.sol\\\";\\n\\n\\ncontract CryeatorProtection is CryeatorToken {\\n    mapping(address =\\u003e mapping(string =\\u003e mapping(uint256 =\\u003e bool)))\\n        private _withdrawInSameBlock;\\n\\n    function _inWithdraw(\\n        address _creator,\\n        string memory _contentID\\n    ) internal view returns (bool) {\\n        return _withdrawInSameBlock[_creator][_contentID][_getBlockNumber()];\\n    }\\n\\n    function _setInWithdraw(\\n        address _creator,\\n        string memory _contentID,\\n        bool _status\\n    ) internal {\\n        _withdrawInSameBlock[_creator][_contentID][_getBlockNumber()] = _status;\\n    }\\n\\n    modifier _noReentranceWithdraw(string memory contentID) {\\n        uint256 currentBlock = _getBlockNumber();\\n        require(\\n            !_inWithdraw(_msgSender(), contentID),\\n            \\\"reentrance not allowed\\\"\\n        );\\n        _setInWithdraw(_msgSender(), contentID, true);\\n        _;\\n        _setInWithdraw(_msgSender(), contentID, true);\\n    }\\n}\\n\\nabstract contract CryeatorStructure is CryeatorProtection {\\n    event CreatedContent(address indexed author, string indexed contentID);\\n    event WithdrawContentReward(\\n        address indexed author,\\n        address indexed withdrawTo,\\n        string indexed contentID,\\n        uint256 amount\\n    );\\n\\n    event LikeContent(\\n        address indexed liker,\\n        address indexed creator,\\n        string indexed contentID,\\n        uint256 amount\\n    );\\n    event DislikeContent(\\n        address indexed liker,\\n        address indexed creator,\\n        string indexed contentID,\\n        uint256 amount\\n    );\\n    event WithdrawContentRewardToLikeConent(\\n        address indexed author,\\n        address indexed likedContentAuthor,\\n        string indexed likedContentID,\\n        uint256 amount\\n    );\\n\\n    error DuplicatedContent();\\n    error ContentNotFound();\\n    error ContentRewardNotEnough();\\n    error WithdrawAmountTooLow();\\n    error SpentIsGreaterThanEarned();\\n    error ContentRewardIsTooLow();\\n\\n    struct Reaction {\\n        uint256 value;\\n        address addr;\\n    }\\n\\n    struct Post {\\n        bool created;\\n        uint256 likes;\\n        uint256 dislikes;\\n        uint256 withdrawn;\\n        uint256 burnt;\\n\\n        uint256 totalLikersCounts;\\n        uint256 totalDislikersCounts;\\n    }\\n\\n    struct CreatorStats {\\n        string[] ids;\\n        uint256 totalContent;\\n    }\\n\\n    \\n    // creator =\\u003e contentID =\\u003e (like / dislike) =\\u003e reactor =\\u003e totalReaction\\n    mapping(address=\\u003emapping(string=\\u003emapping(bool=\\u003emapping(address=\\u003euint256)))) internal _totalReactions;\\n    \\n    // creator =\\u003e contentID =\\u003e (like / dislike) =\\u003e reactionID =\\u003e Reaction\\n    mapping(address=\\u003emapping(string=\\u003emapping(bool=\\u003emapping(uint256=\\u003eReaction)))) internal _reactions;\\n    \\n    // creator =\\u003e contentID =\\u003e Post data\\n    mapping(address =\\u003e mapping(string =\\u003e Post)) internal _creatorsContent;\\n\\n    // creator =\\u003e total content stats\\n    mapping(address =\\u003e CreatorStats) internal _creatorsContentIds;\\n\\n    modifier noDuplicateContent(string memory _contentID) virtual {\\n        if (_creatorsContent[_msgSender()][_contentID].created) revert DuplicatedContent();\\n        _;\\n    }\\n\\n    modifier _contentExist(address _creator, string memory _contentID) virtual {\\n        require(_creatorsContent[_creator][_contentID].created, \\\"content not found\\\");\\n        _;\\n    }\\n\\n    function getCreatorContentsIds(address _creator, uint256 _fromIndex, uint256 _toIndex) external view virtual returns (string[] memory contentIDs);\\n    function getContent(address _creator,string memory _contentID) external view virtual returns (Post memory post);\\n    function getContentByIndex(address _creator, uint256 _contentIndex) external view virtual returns (Post memory post);\\n    function getContentsByRange(address _creator, uint256 _contentFromIndex, uint256 _contentToIndex) external view virtual returns (Post[] memory posts);\\n    function getCreatorContentCounts(address _creator) external view virtual returns (uint256 counts);\\n\\n    function calculateContentEarningStats(Post memory post) external pure virtual returns (uint256 _freeContentEarning, uint256 _contentOwing){ \\n        uint256 _free = (post.likes - (post.withdrawn + post.burnt));\\n        return (_free, post.dislikes - post.burnt);\\n    }\\n\\n    function getContentBalance(address _creator, string memory _contentID) external view virtual returns (uint256 _freeContentEarning, uint256 _contentOwing){\\n        Post memory post = this.getContent(_creator, _contentID);\\n        return this.calculateContentEarningStats(post);\\n    }\\n\\n    function createContent(string memory _contentID) external virtual returns (bool);\\n    function likeContent(address _creator, string memory _contentID, uint256 _value) external virtual returns (bool);\\n    function dislikeContent(address _creator,string memory _contentID,uint256 _value) external virtual returns (bool);\\n    function likeContentWithContentEarning(address _likeContentCreator, string memory _likeContentID, string memory _contentID, uint256 _value) external virtual returns (bool);\\n    function likeContentWithAllContentEarning(address _likeContentCreator, string memory _likeContentID, string memory _contentID) external virtual returns (bool);\\n    function dislikeContentWithContentEarning(address _dislikeContentCreator, string memory _dislikeContentID, string memory _contentID, uint256 _value) external virtual returns (bool);\\n    function dislikeContentWithAllContentEarning(address _dislikeContentCreator, string memory _dislikeContentID, string memory _contentID) external virtual returns (bool);\\n    function withdrawContentEarning(address _withdrawTo, string memory _contentID, uint256 _value) external virtual returns (bool);\\n    function withdrawAllContentEarning(address _withdrawTo,string memory _contentID) external virtual returns (bool);\\n}\\n\\n\\nabstract contract ContentGetters is CryeatorStructure {\\n\\n    \\n    // get a total of all creator\\u0027s content\\n    function getCreatorContentCounts(address _creator) public view override returns (uint256) {\\n        return _creatorsContentIds[_creator].totalContent;\\n    }\\n\\n    // get creator\\u0027s content IDs (return all the address of the content that has be created by a user)\\n    function getCreatorContentsIds(address _creator, uint256 _fromIndex, uint256 _toIndex) public view override returns (string[] memory ids) {\\n        uint256 totalCreatorContent = getCreatorContentCounts(_creator);\\n        require(_fromIndex \\u003c= totalCreatorContent \\u0026\\u0026 _toIndex \\u003c= totalCreatorContent, \\\"invalid index provided\\\");\\n        ids = new string[](_toIndex-_fromIndex);\\n        for (uint256 index; index\\u003cids.length; index++){\\n            ids[index] = getIndexID(_creator, _fromIndex + index);\\n        }\\n    }\\n\\n    function getIndexID(address _creator, uint256 _contentIndex) public view returns(string memory _contentID) {\\n        uint256 totalCreatorContent = getCreatorContentCounts(_creator);\\n        require(_contentIndex \\u003c= totalCreatorContent, \\\"invalid index provided\\\");\\n        _contentID = _creatorsContentIds[_creator].ids[_contentIndex];\\n    }\\n\\n    // get creator\\u0027s content, throw a error if the content is not found\\n    function getContent(address _creator, string memory _contentID) public view override _contentExist(_creator, _contentID) returns (Post memory){\\n        return _creatorsContent[_creator][_contentID];\\n    }\\n\\n    // get creator content by the ID index\\n    function getContentByIndex(address _creator, uint256 _contentIndex) public view override returns (Post memory) {\\n        return getContent(_creator, getIndexID(_creator, _contentIndex));\\n    }\\n\\n    // get a range of creator\\u0027s content\\n    function getContentsByRange(address _creator, uint256 _contentFromIndex, uint256 _contentToIndex) public view override returns (Post[] memory posts) {\\n        string[] memory _ids = getCreatorContentsIds(_creator, _contentFromIndex, _contentToIndex);\\n        posts = new Post[](_ids.length);\\n        for (uint256 index; index \\u003c posts.length; index++) {\\n            posts[index] = getContentByIndex(_creator, _contentFromIndex + index);\\n        }\\n    }\\n\\n\\n    function getLikeRaction(address _creator, string memory _contentID, uint256 _reactionID) public view returns(Reaction memory reaction){\\n        require(_reactionID \\u003c= getContent(_creator, _contentID).totalLikersCounts, \\\"invalid like ID\\\");\\n        reaction = _reactions[_creator][_contentID][true][_reactionID];\\n    }\\n\\n    function getDislikeRaction(address _creator, string memory _contentID, uint256 _reactionID) public view returns(Reaction memory reaction){\\n        require(_reactionID \\u003c= getContent(_creator, _contentID).totalDislikersCounts, \\\"invalid dislike ID\\\");\\n        reaction = _reactions[_creator][_contentID][false][_reactionID];\\n    }\\n\\n    // get content likes reactions \\n    function getContentLikesReactions(address _creator, string memory _contentID, uint256 _fromReactionID, uint256 _toReactionID) public view returns(Reaction[] memory reactions){\\n        uint256 totalLikersCounts = getContent(_creator, _contentID).totalLikersCounts;\\n        require(_fromReactionID \\u003c= totalLikersCounts \\u0026\\u0026 _toReactionID \\u003c= totalLikersCounts, \\\"invalid reaction IDs provided\\\");\\n        reactions = new Reaction[]((_toReactionID - _fromReactionID) + 1);\\n\\n        for ( uint256 index; index \\u003c reactions.length; index++){\\n            reactions[index] = getLikeRaction(_creator, _contentID, _fromReactionID+index);\\n        }\\n    }\\n\\n    function getContentDislikesReactions(address _creator, string memory _contentID, uint256 _fromReactionID, uint256 _toReactionID) public view returns(Reaction[] memory reactions){\\n        uint256 totalDislikersCounts = getContent(_creator, _contentID).totalDislikersCounts;\\n        require(_fromReactionID \\u003c= totalDislikersCounts \\u0026\\u0026 _toReactionID \\u003c= totalDislikersCounts, \\\"invalid range provided\\\");\\n        reactions = new Reaction[]((_toReactionID - _fromReactionID) + 1);\\n\\n        for ( uint256 index; index \\u003c reactions.length; index++){\\n            reactions[index] = getDislikeRaction(_creator, _contentID, _fromReactionID+index);\\n        }\\n    }\\n\\n    function _getTotalReaction(address _creator, address _reactor, string memory _contentID, bool isLike) private view returns(uint256){\\n        return _totalReactions[_creator][_contentID][isLike][_reactor];\\n    }\\n\\n    function getContentAddressTotalLikeValue(address _creator, address _reactor, string memory _contentID) public view returns(uint256){\\n        return _getTotalReaction(_creator, _reactor, _contentID, true);\\n    }\\n\\n    function getContentAddressTotalDislikeValue(address _creator, address _reactor, string memory _contentID) public view returns(uint256){\\n        return _getTotalReaction(_creator, _reactor, _contentID, false);\\n    }\\n\\n}\\n\\nabstract contract CoreSetters is ContentGetters {\\n    struct CryeatorStats{\\n        uint256 deposits;\\n        uint256 withdrawn;\\n        uint256 burnt;\\n        uint256 contents;\\n    }\\n\\n    CryeatorStats public stats;\\n\\n    error ValueGreaterThanAllowance(uint256 allowance, uint256 spending);\\n    error LowBalance(uint256 balance, uint256 spending);\\n\\n\\n    function _replayContentOwing(address _creator, string memory _contentID, Post memory post) internal {\\n        if (post.dislikes == post.burnt) return;\\n        (uint256 _freeLikes, uint256 _owingDebt) = this.calculateContentEarningStats(post);\\n        if (_owingDebt \\u003e 0 \\u0026\\u0026 _freeLikes \\u003e 0) { \\n            uint256 toBurn = _owingDebt \\u003e= _freeLikes ? _freeLikes : _owingDebt;\\n            _creatorsContent[_creator][_contentID].burnt += toBurn;\\n            _burn(address(this), toBurn);\\n            stats.burnt += toBurn;\\n        }\\n    }\\n\\n    function _increaseContentWithdrawn(address _creator, string memory _contentID, uint256 _value) internal {\\n        _creatorsContent[_creator][_contentID].withdrawn += _value;\\n    }\\n\\n    function _addReaction(address _reactor, address _creator, string memory _contentID, uint256 _value, bool isLike) private {\\n        uint256 _reactionID;\\n        if (isLike) {\\n            _creatorsContent[_creator][_contentID].likes += _value;\\n            _creatorsContent[_creator][_contentID].totalLikersCounts++;\\n            _reactionID = getContent(_creator, _contentID).totalLikersCounts;\\n        }\\n        else {\\n            _creatorsContent[_creator][_contentID].dislikes += _value;\\n            _creatorsContent[_creator][_contentID].totalDislikersCounts++;\\n            _reactionID = getContent(_creator, _contentID).totalDislikersCounts;\\n        }\\n        _reactions[_creator][_contentID][isLike][_reactionID].addr = _reactor;\\n        _reactions[_creator][_contentID][isLike][_reactionID].value = _value;\\n        _totalReactions[_creator][_contentID][isLike][_reactor] += _value; \\n    }\\n\\n    function _addNewLike(address _liker, address _creator, string memory _contentID, uint256 _value) internal {\\n       _addReaction(_liker, _creator, _contentID, _value, true);\\n    }\\n\\n    function _addNewDislike(address _disliker, address _creator, string memory _contentID, uint256 _value) internal {\\n       _addReaction(_disliker, _creator, _contentID, _value, false);\\n    }\\n\\n\\n    function _likeContent(address _liker, address creator, string memory contentID, uint256 _value) internal virtual {\\n        Post memory post = getContent(creator, contentID);\\n        _transfer(_liker, address(this), _value);\\n        _addNewLike(_liker, creator, contentID, _value);\\n        post.likes += _value;\\n        _replayContentOwing(creator, contentID, post);\\n        stats.deposits += _value;\\n        emit LikeContent(msg.sender, creator, contentID, _value);\\n    }\\n\\n    function _dislikeContent(address _disliker, address creator, string memory contentID, uint256 _value) internal virtual {\\n        Post memory post = getContent(creator, contentID);\\n        _burn(_disliker, _value);\\n        _addNewDislike(_disliker, creator, contentID, _value);\\n        _replayContentOwing(creator, contentID, post);\\n        post.dislikes += _value;\\n        emit DislikeContent(_disliker, creator, contentID, _value);\\n    }\\n\\n    function _likeContentWithContentEarning(address _creator, address _likeContentCreator, string memory _likeContentID, string memory _contentID, uint256 _value) internal {\\n        Post memory post = getContent(_creator, _contentID);\\n        Post memory likePost = getContent(_likeContentCreator, _likeContentID);\\n\\n        (uint256 _freeLikes,) = this.calculateContentEarningStats(post);\\n        if (_value \\u003e _freeLikes) revert ContentRewardIsTooLow();\\n\\n        _increaseContentWithdrawn(_creator, _contentID, _value);\\n        _addNewLike(_creator, _likeContentCreator, _likeContentID, _value);\\n\\n        likePost.likes += _value;\\n        _replayContentOwing(_likeContentCreator, _likeContentID, likePost);\\n        emit LikeContent(_creator, _likeContentCreator, _likeContentID, _value);\\n    }\\n\\n    function _likeContentFrom(address _spender, address _liker, address _creator, string memory _contentID, uint256 _value) internal {\\n        uint256 allowed = allowance(_liker, _spender);\\n        if (_value \\u003e allowed) revert ValueGreaterThanAllowance({allowance: allowed, spending: _value});\\n        uint256 balance = balanceOf(_liker);\\n        if(_value \\u003e balance) revert LowBalance({balance: balance, spending: _value});\\n        _approve(_liker, _spender, allowance(_liker, _spender) - _value);\\n        _likeContent(_liker, _creator, _contentID, _value);\\n    }\\n\\n    function _dislikeContentFrom(address _spender, address _disliker, address _creator, string memory _contentID, uint256 _value) internal {\\n        uint256 allowed = allowance(_disliker, _spender);\\n        if (_value \\u003e allowed) revert ValueGreaterThanAllowance({allowance: allowed, spending: _value});\\n        uint256 balance = balanceOf(_disliker);\\n        if(_value \\u003e balance) revert LowBalance({balance: balance, spending: _value});\\n        _approve(_disliker, _spender, allowance(_disliker, _spender) - _value);\\n        _dislikeContent(_disliker, _creator, _contentID, _value);\\n    }\\n\\n    function _dislikeContentWithContentEarning(address _creator, address _dislikeContentCreator, string memory _dislikeContentID, string memory _contentID, uint256 _value) internal{\\n        Post memory dislikePost = getContent(_dislikeContentCreator, _dislikeContentID);\\n        Post memory post = getContent(_creator, _contentID);\\n\\n        (uint256 _freeLikes, ) = this.calculateContentEarningStats(post);\\n        if (_value \\u003e _freeLikes) revert ContentRewardNotEnough();\\n\\n        _increaseContentWithdrawn(_creator, _contentID, _value);\\n        _addNewDislike(_creator,_dislikeContentCreator,_dislikeContentID,_value);\\n        dislikePost.dislikes += _value;\\n        _replayContentOwing(_dislikeContentCreator, _dislikeContentID, dislikePost);\\n        emit DislikeContent(_creator,_dislikeContentCreator,_dislikeContentID,_value);\\n    }\\n\\n    function _withdrawContentEarning(address _creator, address _to, string memory _contentID, uint256 _value) internal _noReentranceWithdraw(_contentID) {\\n        (uint256 _freeLikes, ) = this.calculateContentEarningStats(getContent(_creator, _contentID));\\n        if (_value \\u003e _freeLikes) revert ContentRewardNotEnough();\\n        _increaseContentWithdrawn(_creator, _contentID, _value);\\n        _transfer(address(this), _to, _value);\\n        stats.withdrawn += _value;\\n        emit WithdrawContentReward(_creator, _to, _contentID, _value);\\n    }\\n}\\n\\n\\ncontract CryeatorContent is CoreSetters {\\n    mapping(address=\\u003emapping(address=\\u003emapping(string=\\u003euint256))) private _contentAllowance;\\n\\n    event ApproveContent(address indexed _owner, address indexed _spender, string indexed _contentID, uint256 _value);\\n\\n    // return cryeator\\u0027s stats\\n    function getStats() public view returns(CryeatorStats memory){\\n        return stats;\\n    }\\n\\n     // allow creator to create new content (duplicate content not allowed)\\n    function createContent(string memory _contentID) public override noDuplicateContent(_contentID) returns (bool) {\\n        address _creator = _msgSender();\\n        _creatorsContent[_creator][_contentID].created = true;\\n        _creatorsContentIds[_creator].ids.push(_contentID);\\n        _creatorsContentIds[_creator].totalContent++;\\n        stats.contents++;\\n        return true;\\n    }\\n\\n\\n    // like creators content with token\\n    function likeContent(address _creator, string memory _contentID, uint256 _value) public override returns (bool) {\\n        _likeContent(_msgSender(), _creator, _contentID, _value);\\n        return true;\\n    }\\n\\n    // dislike content with token\\n    function dislikeContent(address _creator,string memory _contentID,uint256 _value) public override returns (bool) {\\n        _dislikeContent(_msgSender(), _creator, _contentID, _value);\\n        return true;\\n    }\\n\\n    // allow a creator to like another creator\\u0027s content with part of their content earning that is avalible\\n    function likeContentWithContentEarning(address _likeContentCreator, string memory _likeContentID, string memory _contentID, uint256 _value) public override returns (bool) {\\n        _likeContentWithContentEarning(_msgSender(), _likeContentCreator, _likeContentID, _contentID, _value);\\n        return true;\\n    }\\n\\n    // allow a creator to like another creator\\u0027s content with all their content earning that is avalible\\n    function likeContentWithAllContentEarning(address _likeContentCreator,string memory _likeContentID,string memory _contentID) public override returns (bool) {\\n        (uint256 _freeLikes, ) = this.calculateContentEarningStats(getContent(_msgSender(), _contentID));\\n        return likeContentWithContentEarning(_likeContentCreator, _likeContentID, _contentID, _freeLikes);\\n    }\\n\\n    // allow a creator to dislike another creator\\u0027s content with part of their content earning that is avalible\\n    function dislikeContentWithContentEarning(address _dislikeContentCreator, string memory _dislikeContentID, string memory _contentID, uint256 _value) public override returns (bool){\\n        _dislikeContentWithContentEarning(_msgSender(), _dislikeContentCreator, _dislikeContentID, _contentID, _value);\\n        return true;\\n    }\\n\\n    // allow a creator to dislike another creator\\u0027s content with all their content earning that is avalible\\n    function dislikeContentWithAllContentEarning(address _dislikeContentCreator, string memory _dislikeContentID, string memory _contentID) public override returns (bool) {\\n        Post memory post = getContent(_msgSender(), _contentID);\\n        (uint256 _freeLikes,) = this.calculateContentEarningStats(post);\\n        return dislikeContentWithContentEarning(_dislikeContentCreator, _dislikeContentID, _contentID, _freeLikes);\\n    }\\n\\n    // allow a creator to withdraw part of the content that is avalible to another address\\n    function withdrawContentEarning(address _withdrawTo, string memory _contentID, uint256 _value) public override returns (bool) {\\n        _withdrawContentEarning(_msgSender(), _withdrawTo, _contentID, _value);\\n        return true;\\n    }\\n\\n    // allow a creator to withdraw all content earning that is avalible to another address\\n    function withdrawAllContentEarning(address _withdrawTo, string memory _contentID) public override returns (bool) {\\n        Post memory post = getContent(_msgSender(), _contentID);\\n        (uint256 _freeLikes, uint256 _owingDebt) = this.calculateContentEarningStats(post);\\n        if (_owingDebt \\u003e _freeLikes) revert ContentRewardIsTooLow();\\n        return withdrawContentEarning(_withdrawTo, _contentID, _freeLikes);\\n    }\\n\\n    // get the content allowance an address can spend on behalf of a creator\\n    function getContentAllowance(address _owner, address _spender, string memory _contentID) public view _contentExist(_owner, _contentID) returns(uint256){\\n        return _contentAllowance[_owner][_spender][_contentID];\\n    }\\n\\n    // use to set content allowance\\n    function _approveContent(address _owner, address _spender, string memory _contentID, uint256 _value) private {\\n        _contentAllowance[_owner][_spender][_contentID] = _value;\\n    }\\n\\n    // approve content to another address to spend content earning in behalf of the content creator\\n    function approveContent(address _spender, string memory _contentID, uint256 _value) public _contentExist(_msgSender(), _contentID) returns(bool){\\n        address _owner = _msgSender();\\n        _approveContent(_owner, _spender, _contentID, _value);\\n        emit ApproveContent(_owner, _spender, _contentID, _value);\\n        return true;\\n    }\\n\\n    // increase content allowance for an address\\n    function increaseContentAllowance(address _spender, string memory _contentID, uint256 _value) public _contentExist(_msgSender(), _contentID) returns(bool){\\n        uint256 contentAllowance = getContentAllowance(_msgSender(), _spender, _contentID);\\n        approveContent(_spender, _contentID, contentAllowance + _value);\\n        return true;\\n    }\\n    \\n    // decrease content spending allowance for an address\\n    function decreaseContentAllowance(address _spender, string memory _contentID, uint256 _value) public _contentExist(_msgSender(), _contentID) returns(bool){\\n        uint256 contentAllowance = getContentAllowance(_msgSender(), _spender, _contentID);\\n        approveContent(_spender, _contentID, contentAllowance - _value);\\n        return true;\\n    }\\n\\n    // allow another address to spend creator\\u0027s content earning\\n    function withdrawContentFrom(address _creator, address _withdrawTo, string memory _contentID, uint256 _value) public {\\n        address _spender = _msgSender();\\n        uint256 contentAllowance = getContentAllowance(_creator, _spender, _contentID);\\n        if (_value \\u003e contentAllowance) revert ValueGreaterThanAllowance({allowance: contentAllowance,spending: _value});\\n        \\n        (uint256 _freeLikes, ) = this.calculateContentEarningStats(getContent(_creator, _contentID));\\n        if (_value \\u003e _freeLikes) revert ContentRewardNotEnough();\\n\\n        _approveContent(_creator, _spender, _contentID, contentAllowance - _value);\\n        _withdrawContentEarning(_creator, _withdrawTo, _contentID, _value);\\n    }\\n\\n    // like content using ERC20 allowance\\n    function likeContentFrom(address _liker, address _creator, string memory _contentID, uint256 _value) public returns(bool){\\n        _likeContentFrom(_msgSender(), _liker, _creator, _contentID, _value);\\n        return true;\\n    }\\n\\n    // like content using ERC20 allowance\\n    function dislikeContentFrom(address _liker, address _creator, string memory _contentID, uint256 _value) public returns(bool){\\n        _dislikeContentFrom(_msgSender(), _liker, _creator, _contentID, _value);\\n        return true;\\n    }\\n}\\n\"},\"CryeatorToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256 remaining);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function burn(uint256 _value) external returns (bool);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event Burn(address indexed _from, uint256 amount);\\n}\\n\\ncontract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal pure virtual returns (bytes memory) {\\n        return msg.data;\\n    }\\n\\n    function _getChainID() internal view virtual returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    function _getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    function _getBlockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\\ncontract Token is IERC20, Context {\\n    mapping(address =\\u003e uint256) private _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    error AllowanceTooLow(uint256 allowed);\\n    error AddressNotAllowed(address addr);\\n    error BalanceTooLow(uint256 balance, uint256 spending);\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _mint(msg.sender, totalSupply_ * 10 ** decimals());\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return _balances[_owner];\\n    }\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) public view returns (uint256) {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal virtual {\\n        if (_to == address(0)) revert AddressNotAllowed({addr: _to});\\n        if (_from == address(0)) revert AddressNotAllowed({addr: _to});\\n\\n        uint256 balance = balanceOf(_from);\\n        if (_value \\u003e balance) revert BalanceTooLow({balance: balance, spending: _value});\\n        \\n        _balances[_from] -= _value;\\n        _balances[_to] += _value;\\n        emit Transfer(_from, _to, _value);\\n    }\\n\\n    function _burn(address _from, uint256 _value) internal virtual {\\n        uint256 balance = balanceOf(_from);\\n        if (_value \\u003e balance) revert BalanceTooLow({balance: balance, spending: _value});\\n\\n        _balances[_from] -= _value;\\n        _totalSupply -= _value;\\n        emit Transfer(_from, address(0), _value);\\n        emit Burn(_from, _value);\\n    }\\n\\n    function _mint(address _to, uint256 _value) internal virtual {\\n        if (_to == address(0)) revert AddressNotAllowed({addr: _to});\\n        _balances[_to] += _value;\\n        _totalSupply += _value;\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function burn(uint256 value) public returns (bool) {\\n        _burn(_msgSender(), value);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        _transfer(_msgSender(), _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        address _sender = _msgSender();\\n        uint256 _allowed = allowance(_from, _sender);\\n        if (_allowed \\u003c _value) revert AllowanceTooLow({allowed: _allowed});\\n        uint256 balance = balanceOf(_from);\\n        if (_value \\u003e balance) revert BalanceTooLow({balance: balance, spending: _value});\\n        _approve(_from, _sender, _allowed - _value);\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _updateAllowance(\\n        address _owner,\\n        address _spender,\\n        uint256 _value\\n    ) private {\\n        _allowances[_owner][_spender] = _value;\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _value\\n    ) internal {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _updateAllowance(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        _updateAllowance(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _value\\n    ) public returns (bool) {\\n        address _sender = _msgSender();\\n        _approve(_sender, _spender, allowance(_sender, _spender) + _value);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _value\\n    ) public returns (bool) {\\n        address _sender = _msgSender();\\n        _approve(_sender, _spender, allowance(_sender, _spender) - _value);\\n        return true;\\n    }\\n}\\n\\ncontract CryeatorPanel {\\n    bool public taxStatus;\\n    address public taxWallet;\\n    uint256 public taxPercent;\\n    address public owner;\\n\\n    mapping(address =\\u003e bool) private _excludeTax;\\n\\n    event AddedNoTaxWallet(address indexed addr);\\n    event RemoveNoTaxWallet(address indexed addr);\\n    event UpdatedTax(uint256 indexed percent);\\n    event ToggleTaxStatus(bool status);\\n    event UpdatedBurnTaxPercent(uint256 percent);\\n\\n    error RoughPlayActionNotAllow();\\n    error TaxSettingIsTheSame();\\n\\n    constructor() {\\n        owner = msg.sender;\\n        taxPercent = 5;\\n        taxStatus=true;\\n        setTaxWallet(owner);\\n        setTaxWallet(0x0E9b7CCA833F0E2AE7527b0d835022832E46218b);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    function setTaxWallet(address _taxWallet) public onlyOwner {\\n        require(_taxWallet!=taxWallet, \\\"tax wallet unchanged\\\");\\n        taxWallet = _taxWallet;\\n        if (!_isTaxFree(_taxWallet)){addTaxFree(_taxWallet);}\\n    }\\n\\n    function isTaxFree(address addr) public view returns (bool) {\\n        return _isTaxFree(addr);\\n    }\\n\\n    function _isTaxFree(address addr) internal view returns (bool) {\\n        return _excludeTax[addr];\\n    }\\n\\n    function addTaxFree(address addr) public onlyOwner {\\n        require(!_isTaxFree(addr));\\n        _excludeTax[addr] = true;\\n        emit AddedNoTaxWallet(addr);\\n    }\\n\\n    function removeTaxFree(address addr) public onlyOwner {\\n        require(_isTaxFree(addr));\\n        _excludeTax[addr] = false;\\n        emit RemoveNoTaxWallet(addr);\\n    }\\n\\n    function updateTax(uint256 percent) public onlyOwner {\\n        if (percent == taxPercent) revert TaxSettingIsTheSame();\\n        taxPercent = percent;\\n        emit UpdatedTax(percent);\\n    }\\n\\n    function toggleTaxStatus() public onlyOwner {\\n        taxStatus = !taxStatus;\\n        emit ToggleTaxStatus(taxStatus);\\n    }\\n}\\n\\ncontract CryeatorToken is Token, CryeatorPanel {\\n    constructor() Token(\\\"Cryeator\\\", \\\"CR8\\\", 8_000_000_000) {}\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal override {\\n        require(_from != address(0) \\u0026\\u0026 _to != address(0), \\\"Address unsupported\\\" );\\n        \\n        if (!taxStatus || _value == 0 || taxWallet == address(0)) return super._transfer(_from, _to, _value);\\n        address _thisContract = address(this);\\n        if (_from == _thisContract || _to == _thisContract) return super._transfer(_from, _to, _value);\\n        if (_isTaxFree(_from) || _isTaxFree(_to)) return super._transfer(_from, _to, _value);\\n\\n        require(balanceOf(_from) \\u003e= _value, \\\"ERC20: balance too low\\\");\\n        uint256 _taxAmount = (_value * taxPercent) / 100;\\n        _value = _value - _taxAmount;\\n\\n        super._transfer(_from, taxWallet, _taxAmount);\\n        super._transfer(_from, _to, _value);\\n    }\\n\\n    receive() external payable{}\\n\\n    function removeToken(address token) public onlyOwner {\\n        if (token == address(0)) {\\n            payable(_msgSender()).transfer(address(this).balance);\\n            return;\\n        }\\n        if (token == address(this)) revert RoughPlayActionNotAllow();\\n\\n        IERC20 erc20 = IERC20(token);\\n        erc20.transfer(_msgSender(), erc20.balanceOf(address(this)));\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spending\",\"type\":\"uint256\"}],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContentNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContentRewardIsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContentRewardNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatedContent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spending\",\"type\":\"uint256\"}],\"name\":\"LowBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoughPlayActionNotAllow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpentIsGreaterThanEarned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxSettingIsTheSame\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spending\",\"type\":\"uint256\"}],\"name\":\"ValueGreaterThanAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAmountTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddedNoTaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"}],\"name\":\"CreatedContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DislikeContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LikeContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveNoTaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ToggleTaxStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"UpdatedBurnTaxPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"UpdatedTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContentReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"likedContentAuthor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"likedContentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContentRewardToLikeConent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addTaxFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveContent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dislikes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLikersCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDislikersCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct CryeatorStructure.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"calculateContentEarningStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeContentEarning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contentOwing\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"createContent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseContentAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"dislikeContent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"dislikeContentFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dislikeContentCreator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dislikeContentID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"dislikeContentWithAllContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dislikeContentCreator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dislikeContentID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"dislikeContentWithContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"getContent\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dislikes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLikersCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDislikersCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct CryeatorStructure.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reactor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"getContentAddressTotalDislikeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reactor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"getContentAddressTotalLikeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"getContentAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"getContentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeContentEarning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contentOwing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contentIndex\",\"type\":\"uint256\"}],\"name\":\"getContentByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dislikes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLikersCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDislikersCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct CryeatorStructure.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fromReactionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toReactionID\",\"type\":\"uint256\"}],\"name\":\"getContentDislikesReactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct CryeatorStructure.Reaction[]\",\"name\":\"reactions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fromReactionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toReactionID\",\"type\":\"uint256\"}],\"name\":\"getContentLikesReactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct CryeatorStructure.Reaction[]\",\"name\":\"reactions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contentFromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contentToIndex\",\"type\":\"uint256\"}],\"name\":\"getContentsByRange\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dislikes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLikersCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDislikersCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct CryeatorStructure.Post[]\",\"name\":\"posts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorContentCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getCreatorContentsIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"ids\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_reactionID\",\"type\":\"uint256\"}],\"name\":\"getDislikeRaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct CryeatorStructure.Reaction\",\"name\":\"reaction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contentIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_reactionID\",\"type\":\"uint256\"}],\"name\":\"getLikeRaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct CryeatorStructure.Reaction\",\"name\":\"reaction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct CoreSetters.CryeatorStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseContentAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isTaxFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"likeContent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"likeContentFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_likeContentCreator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_likeContentID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"likeContentWithAllContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_likeContentCreator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_likeContentID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"likeContentWithContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeTaxFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTaxStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"}],\"name\":\"withdrawAllContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawContentEarning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contentID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawContentFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryeatorContent", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c928d270f318a2e88dbded1acc011cb0beb38448c207c306fd8f1bb61a44abd"}