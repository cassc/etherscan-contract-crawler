{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/interfaces/ISecurityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Facet Registry Interface\\n * @dev Infrastructure contract to manage security parameters of users\\n * @author David Yongjun Kim (@Powerstream3604)\\n * @author Ruslan Serebriakov (@rsrbk)\\n */\\ninterface ISecurityManager {\\n    error SecurityManager__OutOfBoundary();\\n    error SecurityManager__CallerNotWallet();\\n    error SecurityManager__AlreadyIntialized();\\n\\n    function initializeAdditionSecurityPeriod(\\n        uint128 defaultAdditionSecurityPeriod,\\n        uint128 minAdditionSecurityPeriod,\\n        uint128 maxAdditionSecurityPeriod\\n    ) external;\\n\\n    function initializeRemovalSecurityPeriod(\\n        uint128 defaultRemovalSecurityPeriod,\\n        uint128 minRemovalSecurityPeriod,\\n        uint128 maxRemovalSecurityPeriod\\n    ) external;\\n\\n    function initializeApprovalValidationPeriod(\\n        uint128 defaultApprovalValidationPeriod,\\n        uint128 minApprovalValidationPeriod,\\n        uint128 maxApprovalValidationPeriod\\n    ) external;\\n\\n    function initializeMigrationPeriod(\\n        uint128 defaultMigrationPeriod,\\n        uint128 minMigrationPeriod,\\n        uint128 maxMigrationPeriod\\n    ) external;\\n\\n    function initializeLockPeriod(\\n        uint128 defaultLockPeriod,\\n        uint128 minLockPeriod,\\n        uint128 maxLockPeriod\\n    ) external;\\n\\n    function initializeRecoveryPeriod(\\n        uint128 defaultRecoveryPeriod,\\n        uint128 minRecoveryPeriod,\\n        uint128 maxRecoveryPeriod\\n    ) external;\\n\\n    function initializeSecurityWindow(\\n        uint128 defaultSecurityWindow,\\n        uint128 minSecurityWindow,\\n        uint128 maxSecurityWindow\\n    ) external;\\n\\n    function setAdditionSecurityPeriod(\\n        address wallet,\\n        uint128 additionSecurityPeriod\\n    ) external;\\n\\n    function setRemovalSecurityPeriod(\\n        address wallet,\\n        uint128 removalSecurityPeriod\\n    ) external;\\n\\n    function setSecurityWindow(address wallet, uint128 securityWindow) external;\\n\\n    function setRecoveryPeriod(address wallet, uint128 recoveryPeriod) external;\\n\\n    function setLockPeriod(address wallet, uint128 lockPeriod) external;\\n\\n    function setApprovalValidationPeriod(\\n        address wallet,\\n        uint128 approvalValidationPeriod\\n    ) external;\\n\\n    function setMigrationPeriod(\\n        address wallet,\\n        uint128 migrationPeriod\\n    ) external;\\n\\n    function additionSecurityPeriodOf(\\n        address wallet\\n    ) external view returns (uint128);\\n\\n    function removalSecurityPeriodOf(\\n        address wallet\\n    ) external view returns (uint128);\\n\\n    function securityWindowOf(address wallet) external view returns (uint128);\\n\\n    function recoveryPeriodOf(address wallet) external view returns (uint128);\\n\\n    function lockPeriodOf(address wallet) external view returns (uint128);\\n\\n    function migrationPeriodOf(address wallet) external view returns (uint128);\\n\\n    function approvalValidationPeriodOf(\\n        address wallet\\n    ) external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/SecurityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {ISecurityManager} from \\\"./interfaces/ISecurityManager.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n/**\\n * @title Security Manager\\n * @dev Infrastructure contract to manage security parameters of users\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ncontract SecurityManager is ISecurityManager, Ownable2Step {\\n    uint128 public minAdditionSecurityPeriod;\\n    uint128 public maxAdditionSecurityPeriod;\\n    uint128 private defaultAdditionSecurityPeriod;\\n\\n    uint128 public minRemovalSecurityPeriod;\\n    uint128 public maxRemovalSecurityPeriod;\\n    uint128 private defaultRemovalSecurityPeriod;\\n\\n    uint128 public minSecurityWindow;\\n    uint128 public maxSecurityWindow;\\n    uint128 private defaultSecurityWindow;\\n\\n    uint128 public minRecoveryPeriod;\\n    uint128 public maxRecoveryPeriod;\\n    uint128 private defaultRecoveryPeriod;\\n\\n    uint128 public minLockPeriod;\\n    uint128 public maxLockPeriod;\\n    uint128 private defaultLockPeriod;\\n\\n    uint128 public minApprovalValidationPeriod;\\n    uint128 public maxApprovalValidationPeriod;\\n    uint128 private defaultApprovalValidationPeriod;\\n\\n    uint128 public minMigrationPeriod;\\n    uint128 public maxMigrationPeriod;\\n    uint128 private defaultMigrationPeriod;\\n\\n    bool public _isAdditionSecurityPeriodInitialized;\\n    bool public _isRemovalSecurityPeriodInitialized;\\n    bool public _isSecurityWindowInitialized;\\n    bool public _isRecoveryPeriodInitialized;\\n    bool public _isLockPeriodInitialized;\\n    bool public _isApprovalValidationPeriodInitialized;\\n    bool public _isMigrationPeriodInitialized;\\n\\n    mapping(address => CustomSecurityConfig) securityConfigs;\\n\\n    struct CustomSecurityConfig {\\n        uint128 additionSecurityPeriod;\\n        uint128 removalSecurityPeriod;\\n        uint128 securityWindow;\\n        uint128 recoveryPeriod;\\n        uint128 lockPeriod;\\n        uint128 approvalValidationPeriod;\\n        uint128 migrationPeriod;\\n    }\\n\\n    /**\\n     * @notice Modifier to only allow wallet itself to make a call to wallet\\n     */\\n    modifier onlyWallet(address _wallet) {\\n        if (msg.sender != _wallet) revert SecurityManager__CallerNotWallet();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to revert if the variable is already initialized\\n     */\\n    modifier initializer(bool _isInitialized) {\\n        if (_isInitialized) revert SecurityManager__AlreadyIntialized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership of the contract to the given owner\\n     * @param _owner Address of owner who has access to initialize the default security variables for security manager\\n     */\\n    constructor(address _owner) {\\n        transferOwnership(_owner);\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max addition security period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultAdditionSecurityPeriod Default Addition Security Period for all Barz contracts\\n     * @param _minAdditionSecurityPeriod Minimum Addition Security Period for all Barz contracts\\n     * @param _maxAdditionSecurityPeriod Maximum Addition Security Period for all Barz contracts\\n     */\\n    function initializeAdditionSecurityPeriod(\\n        uint128 _defaultAdditionSecurityPeriod,\\n        uint128 _minAdditionSecurityPeriod,\\n        uint128 _maxAdditionSecurityPeriod\\n    )\\n        external\\n        override\\n        onlyOwner\\n        initializer(_isAdditionSecurityPeriodInitialized)\\n    {\\n        _isAdditionSecurityPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultAdditionSecurityPeriod,\\n            _minAdditionSecurityPeriod,\\n            _maxAdditionSecurityPeriod\\n        );\\n        defaultAdditionSecurityPeriod = _defaultAdditionSecurityPeriod;\\n        minAdditionSecurityPeriod = _minAdditionSecurityPeriod;\\n        maxAdditionSecurityPeriod = _maxAdditionSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max removal security period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultRemovalSecurityPeriod Default Removal Security Period for all Barz contracts\\n     * @param _minRemovalSecurityPeriod Minimum Removal Security Period for all Barz contracts\\n     * @param _maxRemovalSecurityPeriod Maximum Removal Security Period for all Barz contracts\\n     */\\n    function initializeRemovalSecurityPeriod(\\n        uint128 _defaultRemovalSecurityPeriod,\\n        uint128 _minRemovalSecurityPeriod,\\n        uint128 _maxRemovalSecurityPeriod\\n    )\\n        external\\n        override\\n        onlyOwner\\n        initializer(_isRemovalSecurityPeriodInitialized)\\n    {\\n        _isRemovalSecurityPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultRemovalSecurityPeriod,\\n            _minRemovalSecurityPeriod,\\n            _maxRemovalSecurityPeriod\\n        );\\n        defaultRemovalSecurityPeriod = _defaultRemovalSecurityPeriod;\\n        minRemovalSecurityPeriod = _minRemovalSecurityPeriod;\\n        maxRemovalSecurityPeriod = _maxRemovalSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/maxd security window for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultSecurityWindow Default Security Window for all Barz contracts\\n     * @param _minSecurityWindow Minimum Security Window for all Barz contracts\\n     * @param _maxSecurityWindow Maximum Security Window for all Barz contracts\\n     */\\n    function initializeSecurityWindow(\\n        uint128 _defaultSecurityWindow,\\n        uint128 _minSecurityWindow,\\n        uint128 _maxSecurityWindow\\n    ) external override onlyOwner initializer(_isSecurityWindowInitialized) {\\n        _isSecurityWindowInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultSecurityWindow,\\n            _minSecurityWindow,\\n            _maxSecurityWindow\\n        );\\n        defaultSecurityWindow = _defaultSecurityWindow;\\n        minSecurityWindow = _minSecurityWindow;\\n        maxSecurityWindow = _maxSecurityWindow;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max recovery period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultRecoveryPeriod Default Recovery Period for all Barz contracts\\n     * @param _minRecoveryPeriod Minimum Recovery Period for all Barz contracts\\n     * @param _maxRecoveryPeriod Maximum Recovery Period for all Barz contracts\\n     */\\n    function initializeRecoveryPeriod(\\n        uint128 _defaultRecoveryPeriod,\\n        uint128 _minRecoveryPeriod,\\n        uint128 _maxRecoveryPeriod\\n    ) external override onlyOwner initializer(_isRecoveryPeriodInitialized) {\\n        _isRecoveryPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultRecoveryPeriod,\\n            _minRecoveryPeriod,\\n            _maxRecoveryPeriod\\n        );\\n        defaultRecoveryPeriod = _defaultRecoveryPeriod;\\n        minRecoveryPeriod = _minRecoveryPeriod;\\n        maxRecoveryPeriod = _maxRecoveryPeriod;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max lock period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultLockPeriod Default Lock Period for all Barz contracts\\n     * @param _minLockPeriod Minimum Lock Period for all Barz contracts\\n     * @param _maxLockPeriod Maximum Lock Period for all Barz contracts\\n     */\\n    function initializeLockPeriod(\\n        uint128 _defaultLockPeriod,\\n        uint128 _minLockPeriod,\\n        uint128 _maxLockPeriod\\n    ) external override onlyOwner initializer(_isLockPeriodInitialized) {\\n        _isLockPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultLockPeriod,\\n            _minLockPeriod,\\n            _maxLockPeriod\\n        );\\n        defaultLockPeriod = _defaultLockPeriod;\\n        minLockPeriod = _minLockPeriod;\\n        maxLockPeriod = _maxLockPeriod;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max approval validation period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultApprovalValidationPeriod Default Approval Validation Period for all Barz contracts\\n     * @param _minApprovalValidationPeriod Minimum Approval Validation Period for all Barz contracts\\n     * @param _maxApprovalValidationPeriod Maximum Approval Validation Period for all Barz contracts\\n     */\\n    function initializeApprovalValidationPeriod(\\n        uint128 _defaultApprovalValidationPeriod,\\n        uint128 _minApprovalValidationPeriod,\\n        uint128 _maxApprovalValidationPeriod\\n    )\\n        external\\n        override\\n        onlyOwner\\n        initializer(_isApprovalValidationPeriodInitialized)\\n    {\\n        _isApprovalValidationPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultApprovalValidationPeriod,\\n            _minApprovalValidationPeriod,\\n            _maxApprovalValidationPeriod\\n        );\\n        defaultApprovalValidationPeriod = _defaultApprovalValidationPeriod;\\n        minApprovalValidationPeriod = _minApprovalValidationPeriod;\\n        maxApprovalValidationPeriod = _maxApprovalValidationPeriod;\\n    }\\n\\n    /**\\n     * @notice Sets the initial default/min/max migration period for all Barz contracts that use this as Security Manager\\n     *         This function can only be called by the owner of the SecurityManager\\n     *         Default value should be bigger than the min and smaller than the max\\n     * @param _defaultMigrationPeriod Default Migration Period for all Barz contracts\\n     * @param _minMigrationPeriod Minimum Migration Period for all Barz contracts\\n     * @param _maxMigrationPeriod Maximum Migration Period for all Barz contracts\\n     */\\n    function initializeMigrationPeriod(\\n        uint128 _defaultMigrationPeriod,\\n        uint128 _minMigrationPeriod,\\n        uint128 _maxMigrationPeriod\\n    ) external override onlyOwner initializer(_isMigrationPeriodInitialized) {\\n        _isMigrationPeriodInitialized = true;\\n\\n        _validatePeriodBoundaries(\\n            _defaultMigrationPeriod,\\n            _minMigrationPeriod,\\n            _maxMigrationPeriod\\n        );\\n        defaultMigrationPeriod = _defaultMigrationPeriod;\\n        minMigrationPeriod = _minMigrationPeriod;\\n        maxMigrationPeriod = _maxMigrationPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the addition security period for the wallet. Only the owner of wallet can call this function.\\n     *         The addition security period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _additionSecurityPeriod Custom Addition Security Period for the wallet\\n     */\\n    function setAdditionSecurityPeriod(\\n        address _wallet,\\n        uint128 _additionSecurityPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _additionSecurityPeriod,\\n            minAdditionSecurityPeriod,\\n            maxAdditionSecurityPeriod\\n        );\\n        securityConfigs[_wallet]\\n            .additionSecurityPeriod = _additionSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the removal security period for the wallet. Only the owner of wallet can call this function.\\n     *         The removal security period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _removalSecurityPeriod Custom Removal Security Period for the wallet\\n     */\\n    function setRemovalSecurityPeriod(\\n        address _wallet,\\n        uint128 _removalSecurityPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _removalSecurityPeriod,\\n            minRemovalSecurityPeriod,\\n            maxRemovalSecurityPeriod\\n        );\\n        securityConfigs[_wallet].removalSecurityPeriod = _removalSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the security window for the wallet. Only the owner of wallet can call this function.\\n     *         The security window should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _securityWindow Custom Security Window for the wallet\\n     */\\n    function setSecurityWindow(\\n        address _wallet,\\n        uint128 _securityWindow\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _securityWindow,\\n            minSecurityWindow,\\n            maxSecurityWindow\\n        );\\n        securityConfigs[_wallet].securityWindow = _securityWindow;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the recovery period for the wallet. Only the owner of wallet can call this function.\\n     *         The recovery period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _recoveryPeriod Custom recovery period for the wallet\\n     */\\n    function setRecoveryPeriod(\\n        address _wallet,\\n        uint128 _recoveryPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _recoveryPeriod,\\n            minRecoveryPeriod,\\n            maxRecoveryPeriod\\n        );\\n        securityConfigs[_wallet].recoveryPeriod = _recoveryPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the lock period for the wallet. Only the owner of wallet can call this function.\\n     *         The lock period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _lockPeriod Custom Lock period for the wallet\\n     */\\n    function setLockPeriod(\\n        address _wallet,\\n        uint128 _lockPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(_lockPeriod, minLockPeriod, maxLockPeriod);\\n        securityConfigs[_wallet].lockPeriod = _lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the approval validation period for the wallet. Only the owner of wallet can call this function.\\n     *         The approval validation period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _approvalValidationPeriod Custom approval validation period for the wallet\\n     */\\n    function setApprovalValidationPeriod(\\n        address _wallet,\\n        uint128 _approvalValidationPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _approvalValidationPeriod,\\n            minApprovalValidationPeriod,\\n            maxApprovalValidationPeriod\\n        );\\n        securityConfigs[_wallet]\\n            .approvalValidationPeriod = _approvalValidationPeriod;\\n    }\\n\\n    /**\\n     * @notice Wallet owner sets the migration period for the wallet. Only the owner of wallet can call this function.\\n     *         The migration period should be within the boundry of min and max value set by the owner\\n     * @param _wallet Address of wallet\\n     * @param _migrationPeriod Custom migration period for the wallet\\n     */\\n\\n    function setMigrationPeriod(\\n        address _wallet,\\n        uint128 _migrationPeriod\\n    ) external override onlyWallet(_wallet) {\\n        _validatePeriodBoundaries(\\n            _migrationPeriod,\\n            minMigrationPeriod,\\n            maxMigrationPeriod\\n        );\\n        securityConfigs[_wallet].migrationPeriod = _migrationPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the addition security period. Returns default value when custom addition security period is not set\\n     * @param _wallet Address of wallet\\n     * @return additionSecurityPeriod Addition Security Period of the given Barz account or wallet\\n     */\\n    function additionSecurityPeriodOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 additionSecurityPeriod)\\n    {\\n        additionSecurityPeriod = securityConfigs[_wallet]\\n            .additionSecurityPeriod;\\n        additionSecurityPeriod = (additionSecurityPeriod == 0)\\n            ? defaultAdditionSecurityPeriod\\n            : additionSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the removal security period. Returns default value when custom removal security period is not set\\n     * @param _wallet Address of wallet\\n     * @return removalSecurityPeriod Removal Security Period of the given Barz account or wallet\\n     */\\n    function removalSecurityPeriodOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 removalSecurityPeriod)\\n    {\\n        removalSecurityPeriod = securityConfigs[_wallet].removalSecurityPeriod;\\n        removalSecurityPeriod = (removalSecurityPeriod == 0)\\n            ? defaultRemovalSecurityPeriod\\n            : removalSecurityPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the security window. Returns default value when custom security window is not set\\n     * @param _wallet Address of wallet\\n     * @return securityWindow Security window of the given Barz account or wallet\\n     */\\n    function securityWindowOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 securityWindow)\\n    {\\n        securityWindow = securityConfigs[_wallet].securityWindow;\\n        securityWindow = (securityWindow == 0)\\n            ? defaultSecurityWindow\\n            : securityWindow;\\n    }\\n\\n    /**\\n     * @notice Returns the recovery period. Returns default value when custom recovery period is not set\\n     * @param _wallet Address of wallet\\n     * @return recoveryPeriod Recovery Period of the given Barz account or wallet\\n     */\\n    function recoveryPeriodOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 recoveryPeriod)\\n    {\\n        recoveryPeriod = securityConfigs[_wallet].recoveryPeriod;\\n        recoveryPeriod = (recoveryPeriod == 0)\\n            ? defaultRecoveryPeriod\\n            : recoveryPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the lock period. Returns default value when custom lock period is not set\\n     * @param _wallet Address of wallet\\n     * @return lockPeriod Lock Period of the given Barz account or wallet\\n     */\\n    function lockPeriodOf(\\n        address _wallet\\n    ) public view override onlyWallet(_wallet) returns (uint128 lockPeriod) {\\n        lockPeriod = securityConfigs[_wallet].lockPeriod;\\n        lockPeriod = (lockPeriod == 0) ? defaultLockPeriod : lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the approval validation period. Returns default value when custom approval validation period is not set\\n     * @param _wallet Address of wallet\\n     * @return approvalValidationPeriod Approval Validation Period of the given Barz account or wallet\\n     */\\n    function approvalValidationPeriodOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 approvalValidationPeriod)\\n    {\\n        approvalValidationPeriod = securityConfigs[_wallet]\\n            .approvalValidationPeriod;\\n        approvalValidationPeriod = (approvalValidationPeriod == 0)\\n            ? defaultApprovalValidationPeriod\\n            : approvalValidationPeriod;\\n    }\\n\\n    /**\\n     * @notice Returns the migration period. Returns default value when custom migration period is not set\\n     * @param _wallet Address of wallet\\n     * @return migrationPeriod Migration Period of the given Barz account or wallet\\n     */\\n    function migrationPeriodOf(\\n        address _wallet\\n    )\\n        public\\n        view\\n        override\\n        onlyWallet(_wallet)\\n        returns (uint128 migrationPeriod)\\n    {\\n        migrationPeriod = securityConfigs[_wallet].migrationPeriod;\\n        migrationPeriod = (migrationPeriod == 0)\\n            ? defaultMigrationPeriod\\n            : migrationPeriod;\\n    }\\n\\n    /**\\n     * @notice Validates if the period is smaller than the max period or bigger than the min period\\n     * @param _period Period to be checked\\n     * @param _minPeriod Minimum period\\n     * @param _maxPeriod Maximum period\\n     */\\n    function _validatePeriodBoundaries(\\n        uint128 _period,\\n        uint128 _minPeriod,\\n        uint128 _maxPeriod\\n    ) internal pure {\\n        if (_period >= _maxPeriod || _period <= _minPeriod)\\n            revert SecurityManager__OutOfBoundary();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SecurityManager__AlreadyIntialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SecurityManager__CallerNotWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SecurityManager__OutOfBoundary\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_isAdditionSecurityPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isApprovalValidationPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isLockPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isMigrationPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isRecoveryPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isRemovalSecurityPeriodInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isSecurityWindowInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"additionSecurityPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"additionSecurityPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"approvalValidationPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"approvalValidationPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultAdditionSecurityPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minAdditionSecurityPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAdditionSecurityPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeAdditionSecurityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultApprovalValidationPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minApprovalValidationPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxApprovalValidationPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeApprovalValidationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxLockPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultMigrationPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minMigrationPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxMigrationPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeMigrationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultRecoveryPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minRecoveryPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxRecoveryPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeRecoveryPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultRemovalSecurityPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minRemovalSecurityPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxRemovalSecurityPeriod\",\"type\":\"uint128\"}],\"name\":\"initializeRemovalSecurityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultSecurityWindow\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minSecurityWindow\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxSecurityWindow\",\"type\":\"uint128\"}],\"name\":\"initializeSecurityWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"lockPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lockPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAdditionSecurityPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApprovalValidationPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMigrationPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRecoveryPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRemovalSecurityPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecurityWindow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"migrationPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"migrationPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAdditionSecurityPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApprovalValidationPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMigrationPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRecoveryPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRemovalSecurityPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSecurityWindow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"recoveryPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"recoveryPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removalSecurityPeriodOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"removalSecurityPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"securityWindowOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"securityWindow\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_additionSecurityPeriod\",\"type\":\"uint128\"}],\"name\":\"setAdditionSecurityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_approvalValidationPeriod\",\"type\":\"uint128\"}],\"name\":\"setApprovalValidationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_lockPeriod\",\"type\":\"uint128\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_migrationPeriod\",\"type\":\"uint128\"}],\"name\":\"setMigrationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_recoveryPeriod\",\"type\":\"uint128\"}],\"name\":\"setRecoveryPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_removalSecurityPeriod\",\"type\":\"uint128\"}],\"name\":\"setRemovalSecurityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_securityWindow\",\"type\":\"uint128\"}],\"name\":\"setSecurityWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SecurityManager", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000008e09185c92aed7692919b53c0ccdd163ec16d7a2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}