{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ninterface IMintable {\r\n  function mint(address to, uint256 amount) external;\r\n  function decimals() external returns (uint256);\r\n}\r\n\r\n/// @title A Minter contract for Splinterlands\r\n/// @author Splinterlands Team (@fbslo)\r\n\r\ncontract SPSMinter {\r\n  /// @notice Address that can change pools\r\n  address public admin;\r\n  /// @notice Address of the token to mint\r\n  IMintable public immutable token;\r\n  /// @notice Block number when mint() was last called\r\n  uint256 public lastMintBlock;\r\n  /// @notice Total number of tokens already minted\r\n  uint256 public totalMinted;\r\n  /// @notice Maximum number of tokens minted, 3B (with 18 decimal places)\r\n  uint256 constant public cap = 3000000000 ether;\r\n  /// @notice Maximum number of pools\r\n  uint256 constant public poolsCap = 100;\r\n  /// @notice Maximum amount per block to each pool\r\n  uint256 constant public maxToPoolPerBlock = 50 ether;\r\n\r\n  /// @notice Struct to store information about each pool\r\n  struct Pool {\r\n    address receiver;\r\n    uint256 amountPerBlock;\r\n  }\r\n  /// @notice Array to store all pools\r\n  Pool[] public pools;\r\n\r\n  /// @notice Emitted when mint() is called\r\n  event Mint(address indexed receiver, uint256 amount);\r\n  /// @notice Emitted when pool is added\r\n  event PoolAdded(address indexed newReceiver, uint256 newAmount);\r\n  /// @notice Emitted when pool is updated\r\n  event PoolUpdated(uint256 index, address indexed newReceiver, uint256 newAmount);\r\n  /// @notice Emitted when pool is removed\r\n  event PoolRemoved(uint256 index, address indexed receiver, uint256 amount);\r\n  /// @notice Emitted when admin address is updated\r\n  event UpdateAdmin(address indexed admin, address indexed newAdmin);\r\n\r\n  /// @notice Modifier to allow only admin to call certain functions\r\n  modifier onlyAdmin(){\r\n    require(msg.sender == admin, 'SPSMinter: Only admin');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Constructor of new minter contract\r\n   * @param newToken Address of the token to mint\r\n   * @param startBlock Initial lastMint block\r\n   * @param newAdmin Initial admin address\r\n   */\r\n  constructor(address newToken, uint256 startBlock, address newAdmin){\r\n    require(startBlock >= block.number, \"SPSMinter: Start block must be above current block\");\r\n    require(newToken != address(0), 'SPSMinter: Token cannot be address 0');\r\n    require(newAdmin != address(0), 'SPSMinter: Admin cannot be address 0');\r\n\r\n    token = IMintable(newToken);\r\n    lastMintBlock = startBlock;\r\n    admin = newAdmin;\r\n\r\n    require(token.decimals() == 18, \"SPSMinter: Token doesn't have 18 decimals\");\r\n\r\n    emit UpdateAdmin(address(0), newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens to all pools, can be called by anyone\r\n   */\r\n  function mint() public {\r\n    require(totalMinted < cap, \"SPSMinter: Cap reached\");\r\n    require(block.number > lastMintBlock, \"SPSMinter: Mint block not yet reached\");\r\n\r\n\r\n    uint256 mintDifference;\r\n    unchecked {\r\n      mintDifference = block.number - lastMintBlock;\r\n    }\r\n\r\n    lastMintBlock = block.number;\r\n\r\n    for (uint256 i = 0; i < pools.length; i++){\r\n      uint256 amount = pools[i].amountPerBlock * mintDifference;\r\n\r\n      if(totalMinted + amount >= cap){\r\n        unchecked {\r\n          amount = cap - totalMinted;\r\n        }\r\n      }\r\n\r\n      unchecked {\r\n        totalMinted = totalMinted + amount;\r\n      }\r\n      token.mint(pools[i].receiver, amount);\r\n\r\n      emit Mint(pools[i].receiver, amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Add new pool, can be called by admin\r\n   * @param newReceiver Address of the receiver\r\n   * @param newAmount Amount of tokens per block\r\n   */\r\n  function addPool(address newReceiver, uint256 newAmount) external onlyAdmin {\r\n    require(pools.length < poolsCap, 'SPSMinter: Pools cap reached');\r\n    require(newAmount <= maxToPoolPerBlock, 'SPSMinter: Maximum amount per block reached');\r\n    pools.push(Pool(newReceiver, newAmount));\r\n    emit PoolAdded(newReceiver, newAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Update pool, can be called by admin\r\n   * @param index Index in the array of the pool\r\n   * @param newReceiver Address of the receiver\r\n   * @param newAmount Amount of tokens per block\r\n   */\r\n  function updatePool(uint256 index, address newReceiver, uint256 newAmount) external onlyAdmin {\r\n    require(newAmount <= maxToPoolPerBlock, 'SPSMinter: Maximum amount per block reached');\r\n    mint();\r\n    pools[index] = Pool(newReceiver, newAmount);\r\n    emit PoolUpdated(index, newReceiver, newAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove pool, can be called by admin\r\n   * @param index Index in the array of the pool\r\n   */\r\n  function removePool(uint256 index) external onlyAdmin {\r\n    require(pools.length > index, 'Index is not valid');\r\n\r\n    mint();\r\n    emit PoolRemoved(index, pools[index].receiver, pools[index].amountPerBlock);\r\n\r\n    unchecked {\r\n      pools[index] = pools[pools.length - 1];\r\n    }\r\n    pools.pop();\r\n  }\r\n\r\n  /**\r\n   * @notice Update admin address\r\n   * @param newAdmin Address of the new admin\r\n   */\r\n  function updateAdmin(address newAdmin) external onlyAdmin {\r\n    emit UpdateAdmin(admin, newAdmin);\r\n    admin = newAdmin;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get details about certain pool\r\n   * @param index Index in the array of the pool\r\n   */\r\n  function getPool(uint256 index) external view returns (Pool memory pool) {\r\n    return pools[index];\r\n  }\r\n\r\n  /// @notice View function to get the length of `pools` array\r\n  function getPoolLength() external view returns (uint256 poolLength) {\r\n    return pools.length;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct SPSMinter.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToPoolPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SPSMinter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001633b7157e7638c4d6593436111bf125ee74703f0000000000000000000000000000000000000000000000000000000000ec5bd0000000000000000000000000df5fd6b21e0e7ac559b41cf2597126b3714f432c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0679488ddaf6a9b0c3ce8d25e0a4837c1f61268e98e6ed678d8784ad9c379db6"}