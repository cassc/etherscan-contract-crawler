{"SourceCode": "// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol@v3.4.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.4.0\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.2\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/prize-pool/beefy/IYieldSource.sol\r\n\r\n\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\n/// @title Defines the functions used to interact with MooToken from Beefy finance.\r\ninterface IYieldSource {\r\n\r\n    function totalYieldTokenAmount() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/prize-pool/beefy/IMooToken.sol\r\n\r\n\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\n/// @title Defines the functions used to interact with MooToken from Beefy finance.\r\ninterface IMooToken is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    /**\r\n     * @dev The entrypoint of funds into the system. People deposit with this function\r\n     * into the vault. The vault is then in charge of sending funds into the strategy.\r\n     */\r\n    function deposit(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Function to exit the system. The vault will withdraw the required tokens\r\n     * from the strategy and pay up the token holder. A proportional number of IOU\r\n     * tokens are burned in the process.\r\n     */\r\n    function withdraw(uint256 _shares) external;\r\n\r\n    /**\r\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\r\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\r\n     */\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function balance() external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol@v3.4.0\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/token/TokenListenerInterface.sol\r\n\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\r\ninterface TokenListenerInterface is IERC165Upgradeable {\r\n  /// @notice Called when tokens are minted.\r\n  /// @param to The address of the receiver of the minted tokens.\r\n  /// @param amount The amount of tokens being minted\r\n  /// @param controlledToken The address of the token that is being minted\r\n  /// @param referrer The address that referred the minting.\r\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\r\n\r\n  /// @notice Called when tokens are transferred or burned.\r\n  /// @param from The address of the sender of the token transfer\r\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\r\n  /// @param amount The amount of tokens transferred\r\n  /// @param controlledToken The address of the token that was transferred\r\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\r\n}\r\n\r\n\r\n// File contracts/token/TokenControllerInterface.sol\r\n\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n/// @title Controlled ERC20 Token Interface\r\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\r\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\r\ninterface TokenControllerInterface {\r\n\r\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\r\n  /// This includes minting and burning.\r\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\r\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\r\n  /// @param amount Amount of tokens being transferred\r\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/token/ControlledTokenInterface.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n/// @title Controlled ERC20 Token\r\n/// @notice ERC20 Tokens with a controller for minting & burning\r\ninterface ControlledTokenInterface is IERC20Upgradeable {\r\n\r\n  /// @notice Interface to the contract responsible for controlling mint/burn\r\n  function controller() external view returns (TokenControllerInterface);\r\n\r\n  /// @notice Allows the controller to mint tokens for a user account\r\n  /// @dev May be overridden to provide more granular control over minting\r\n  /// @param _user Address of the receiver of the minted tokens\r\n  /// @param _amount Amount of tokens to mint\r\n  function controllerMint(address _user, uint256 _amount) external;\r\n\r\n  /// @notice Allows the controller to burn tokens from a user account\r\n  /// @dev May be overridden to provide more granular control over burning\r\n  /// @param _user Address of the holder account to burn tokens from\r\n  /// @param _amount Amount of tokens to burn\r\n  function controllerBurn(address _user, uint256 _amount) external;\r\n\r\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\r\n  /// @dev May be overridden to provide more granular control over operator-burning\r\n  /// @param _operator Address of the operator performing the burn action via the controller contract\r\n  /// @param _user Address of the holder account to burn tokens from\r\n  /// @param _amount Amount of tokens to burn\r\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/prize-pool/IPrizePool.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\r\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\r\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\r\ninterface IPrizePool {\r\n\r\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\r\n  /// @param to The address receiving the newly minted tokens\r\n  /// @param amount The amount of assets to deposit\r\n  /// @param controlledToken The address of the type of token the user is minting\r\n  /// @param referrer The referrer of the deposit\r\n  function depositTo(\r\n    address to,\r\n    uint256 amount,\r\n    address controlledToken,\r\n    address referrer\r\n  )\r\n    external;\r\n\r\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\r\n  /// @param from The address to redeem tokens from.\r\n  /// @param amount The amount of tokens to redeem for assets.\r\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\r\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\r\n  /// @return The actual exit fee paid\r\n  function withdrawInstantlyFrom(\r\n    address from,\r\n    uint256 amount,\r\n    address controlledToken,\r\n    uint256 maximumExitFee\r\n  ) external returns (uint256);\r\n\r\n  function withdrawReserve(address to) external returns (uint256);\r\n\r\n  /// @notice Returns the balance that is available to award.\r\n  /// @dev captureAwardBalance() should be called first\r\n  /// @return The total amount of assets to be awarded for the current prize\r\n  function awardBalance() external view returns (uint256);\r\n\r\n  /// @notice Captures any available interest as award balance.\r\n  /// @dev This function also captures the reserve fees.\r\n  /// @return The total amount of assets to be awarded for the current prize\r\n  function captureAwardBalance() external returns (uint256);\r\n\r\n  /// @notice Called by the prize strategy to award prizes.\r\n  /// @dev The amount awarded must be less than the awardBalance()\r\n  /// @param to The address of the winner that receives the award\r\n  /// @param amount The amount of assets to be awarded\r\n  /// @param controlledToken The address of the asset token being awarded\r\n  function award(\r\n    address to,\r\n    uint256 amount,\r\n    address controlledToken\r\n  )\r\n    external;\r\n\r\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\r\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\r\n  /// @param to The address of the winner that receives the award\r\n  /// @param amount The amount of external assets to be awarded\r\n  /// @param externalToken The address of the external asset token being awarded\r\n  function transferExternalERC20(\r\n    address to,\r\n    address externalToken,\r\n    uint256 amount\r\n  )\r\n    external;\r\n\r\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\r\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\r\n  /// @param to The address of the winner that receives the award\r\n  /// @param amount The amount of external assets to be awarded\r\n  /// @param externalToken The address of the external asset token being awarded\r\n  function awardExternalERC20(\r\n    address to,\r\n    address externalToken,\r\n    uint256 amount\r\n  )\r\n    external;\r\n\r\n  /// @notice Called by the prize strategy to award external ERC721 prizes\r\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\r\n  /// @param to The address of the winner that receives the award\r\n  /// @param externalToken The address of the external NFT token being awarded\r\n  /// @param tokenIds An array of NFT Token IDs to be transferred\r\n  function awardExternalERC721(\r\n    address to,\r\n    address externalToken,\r\n    uint256[] calldata tokenIds\r\n  )\r\n    external;\r\n\r\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\r\n  /// @param users An array of account addresses to sweep balances for\r\n  /// @return The total amount of assets swept from the Prize Pool\r\n  function sweepTimelockBalances(\r\n    address[] calldata users\r\n  )\r\n    external\r\n    returns (uint256);\r\n\r\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\r\n  /// @param from The user who is withdrawing\r\n  /// @param amount The amount the user is withdrawing\r\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\r\n  /// @return durationSeconds The duration of the timelock in seconds\r\n  function calculateTimelockDuration(\r\n    address from,\r\n    address controlledToken,\r\n    uint256 amount\r\n  )\r\n    external\r\n    returns (\r\n      uint256 durationSeconds,\r\n      uint256 burnedCredit\r\n    );\r\n\r\n  /// @notice Calculates the early exit fee for the given amount\r\n  /// @param from The user who is withdrawing\r\n  /// @param controlledToken The type of collateral being withdrawn\r\n  /// @param amount The amount of collateral to be withdrawn\r\n  /// @return exitFee The exit fee\r\n  /// @return burnedCredit The user's credit that was burned\r\n  function calculateEarlyExitFee(\r\n    address from,\r\n    address controlledToken,\r\n    uint256 amount\r\n  )\r\n    external\r\n    returns (\r\n      uint256 exitFee,\r\n      uint256 burnedCredit\r\n    );\r\n\r\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\r\n  /// @param _principal The principal amount on which interest is accruing\r\n  /// @param _interest The amount of interest that must accrue\r\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\r\n  function estimateCreditAccrualTime(\r\n    address _controlledToken,\r\n    uint256 _principal,\r\n    uint256 _interest\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 durationSeconds);\r\n\r\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\r\n  /// @param user The user whose credit balance should be returned\r\n  /// @return The balance of the users credit\r\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\r\n\r\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\r\n  /// @param _controlledToken The controlled token for whom to set the credit plan\r\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\r\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\r\n  function setCreditPlanOf(\r\n    address _controlledToken,\r\n    uint128 _creditRateMantissa,\r\n    uint128 _creditLimitMantissa\r\n  )\r\n    external;\r\n\r\n  /// @notice Returns the credit rate of a controlled token\r\n  /// @param controlledToken The controlled token to retrieve the credit rates for\r\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\r\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\r\n  function creditPlanOf(\r\n    address controlledToken\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint128 creditLimitMantissa,\r\n      uint128 creditRateMantissa\r\n    );\r\n\r\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\r\n  /// @param _liquidityCap The new liquidity cap for the prize pool\r\n  function setLiquidityCap(uint256 _liquidityCap) external;\r\n\r\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\r\n  /// @param _prizeStrategy The new prize strategy.  Must implement TokenListenerInterface\r\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external;\r\n\r\n  /// @dev Returns the address of the underlying ERC20 asset\r\n  /// @return The address of the asset\r\n  function token() external view returns (address);\r\n\r\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\r\n  /// @return An array of controlled token addresses\r\n  function tokens() external view returns (address[] memory);\r\n\r\n  /// @notice The total of all controlled tokens and timelock.\r\n  /// @return The current total of all tokens and timelock.\r\n  function accountedBalance() external view returns (uint256);\r\n\r\n  function yieldSource() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/gatemanager/GateManagerMultiRewards.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n/// @title Manager of user's funds entering MoonPot\r\n/// @notice Manages divying up assets into prize pool and yield farming\r\ncontract GateManagerMultiRewards is ReentrancyGuardUpgradeable, Ownable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    // Interface for Moonpot prize pool\r\n    IPrizePool public immutable prizePool;\r\n\r\n    // prize pool lottery token\r\n    address public immutable prizePoolControlledToken;\r\n\r\n    // Interface for the Yield-bearing mooToken by Beefy, empty if isMooToken == false\r\n    IMooToken public immutable mooToken;\r\n\r\n    // deposit token, converted to mooToken if isMooToken == true\r\n    address public immutable underlying;\r\n\r\n    // if true underlying will be converted to mooToken during deposit\r\n    bool public immutable isMooToken;\r\n\r\n    // total mooTokens or underlying held by gate manager\r\n    uint256 private _totalSupply;\r\n\r\n    // mooTokens or underlying balances per user\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public isPrizeToken;\r\n\r\n    // Staking Rewards\r\n    struct RewardInfo {\r\n        address rewardToken;\r\n        uint256 duration;\r\n        uint256 periodFinish;\r\n        uint256 rewardRate;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n        uint256 rewardBalance;\r\n    }\r\n\r\n    RewardInfo[] public rewardInfo;\r\n\r\n    // rewardToken => user => rewardPaid\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n\r\n    // rewardToken => user => rewardEarned\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n\r\n    // address which can notifyRewards\r\n    address public notifier;\r\n\r\n    // address zap contract\r\n    address public zap;\r\n\r\n    event RewardAdded(address indexed rewardToken, uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\r\n    event NewNotifier(address NewNotifier, address oldNotifier);\r\n    event NewZap(address NewZap, address oldZap);\r\n\r\n    /// @notice set up GateManger\r\n    /// @param _mooToken Address of the Beefy mooToken interface\r\n    /// @param _prizePool Address of the MoonPot prize pool\r\n    /// @param _underlying Address of the token to add to the pools\r\n    /// @param _prizePoolControlledToken Address of prize pool token aka lottery tickets\r\n    constructor(\r\n        IMooToken _mooToken,\r\n        IPrizePool _prizePool,\r\n        address _underlying,\r\n        address _prizePoolControlledToken,\r\n        uint256 _stakingRewardsDuration,\r\n        bool _isMooToken,\r\n        address _notifier, \r\n        address _zap \r\n    ) public {\r\n        mooToken = _mooToken;\r\n        prizePool = _prizePool;\r\n        underlying = _underlying;\r\n        prizePoolControlledToken = _prizePoolControlledToken;\r\n        isMooToken = _isMooToken;\r\n        notifier = _notifier;\r\n        zap = _zap;\r\n\r\n        rewardInfo.push(\r\n            RewardInfo({\r\n                rewardToken: _underlying,\r\n                duration: _stakingRewardsDuration,\r\n                periodFinish: 0,\r\n                rewardRate: 0,\r\n                lastUpdateTime: 0,\r\n                rewardPerTokenStored: 0,\r\n                rewardBalance: 0\r\n            })\r\n        );\r\n\r\n        isPrizeToken[_underlying] = true;\r\n    }\r\n\r\n    // checks that caller is either owner or notifier.\r\n    modifier onlyNotifier() {\r\n        require(msg.sender == owner() || msg.sender == notifier, \"!notifier\");\r\n        _;\r\n    }\r\n\r\n    // checks that caller is either owner or notifier.\r\n    modifier onlyZap() {\r\n        require(msg.sender == zap, \"!Only Zap\");\r\n        _;\r\n    }\r\n\r\n    // Updates state and is called on deposit, withdraw & claim\r\n    modifier updateReward(address account) {\r\n        for (uint256 i; i < rewardInfo.length; i++) {\r\n            rewardInfo[i].rewardPerTokenStored = rewardPerToken(i);\r\n            rewardInfo[i].lastUpdateTime = lastTimeRewardApplicable(i);\r\n            if (account != address(0)) {\r\n                rewards[rewardInfo[i].rewardToken][account] = earned(account, i);\r\n                userRewardPerTokenPaid[rewardInfo[i].rewardToken][account] = rewardInfo[i].rewardPerTokenStored;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Total supply for math to pay the reward pool users\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Returns number of reward tokens in the contract\r\n    function rewardTokenLength() external view returns (uint256) {\r\n        return rewardInfo.length;\r\n    }\r\n\r\n    // Last time rewards will be paid per reward id\r\n    function lastTimeRewardApplicable(uint256 id) public view returns (uint256) {\r\n        return MathUpgradeable.min(block.timestamp, rewardInfo[id].periodFinish);\r\n    }\r\n\r\n    // Rewards per token based on reward id \r\n    function rewardPerToken(uint256 id) public view returns (uint256) {\r\n        RewardInfo storage info = rewardInfo[id];\r\n        if (totalSupply() == 0) {\r\n            return info.rewardPerTokenStored;\r\n        }\r\n        return\r\n            info.rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable(id)\r\n                    .sub(info.lastUpdateTime)\r\n                    .mul(info.rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    // returns earned amount based on user and reward id\r\n    function earned(address account, uint256 id) public view returns (uint256) {\r\n        RewardInfo storage info = rewardInfo[id];\r\n        return\r\n            balances[account]\r\n                .mul(rewardPerToken(id).sub(userRewardPerTokenPaid[info.rewardToken][account]))\r\n                .div(1e18)\r\n                .add(rewards[info.rewardToken][account]);\r\n    }\r\n\r\n    // Converts mooTokens to underlying if isMooToken == true\r\n    function convertToUnderlying(uint256 amount) public view returns (uint256) {\r\n        uint256 underlyingAmount;\r\n        if (isMooToken == false || mooToken.totalSupply() == 0) {\r\n            underlyingAmount = amount;\r\n        } else {\r\n            underlyingAmount = amount.mul(mooToken.balance()).div(mooToken.totalSupply());\r\n        }\r\n        return underlyingAmount;\r\n    }\r\n\r\n    // Returns TVL, PrizePool + GateManager totalSupply\r\n    function TVL() external view returns (uint256) {\r\n        uint256 totalYieldSourceBal = IYieldSource(prizePool.yieldSource()).totalYieldTokenAmount();\r\n        uint256 underlyingAmountYS = convertToUnderlying(totalYieldSourceBal);\r\n        uint256 underlyingAmountGM = convertToUnderlying(totalSupply());\r\n        return underlyingAmountYS.add(underlyingAmountGM);\r\n    }\r\n\r\n    // Returns total award balance, PrizePool - tickets\r\n    function awardBalance() external view returns (uint256) {\r\n        uint256 ticketTotalSupply = IERC20Upgradeable(prizePoolControlledToken).totalSupply();\r\n        uint256 totalYieldBal = IYieldSource(prizePool.yieldSource()).totalYieldTokenAmount();\r\n        uint256 underlyingAmount = convertToUnderlying(totalYieldBal);\r\n        return underlyingAmount.sub(ticketTotalSupply);\r\n    }\r\n\r\n    /// Returns user total balance\r\n    function userTotalBalance(address user) external view returns (uint256) {\r\n        uint256 ticketBal = IERC20Upgradeable(prizePoolControlledToken).balanceOf(user);\r\n        uint256 yieldBal = balances[user];\r\n        uint256 underlyingAmount = convertToUnderlying(yieldBal);\r\n        return ticketBal.add(underlyingAmount);\r\n    }\r\n\r\n    /// Deposit all want tokens in a user address\r\n    function depositAll(address referrer) external {\r\n        uint256 tokenBal = IERC20Upgradeable(underlying).balanceOf(msg.sender);\r\n        depositMoonPot(tokenBal, referrer);\r\n    }\r\n\r\n    /// Deposit amount of want tokens in a user address\r\n    function depositMoonPot(uint256 amount, address referrer) public {\r\n        depositMoonPot(msg.sender, amount, referrer);\r\n    }\r\n\r\n    /// @notice Supplies underlying token. 1/2 to MoonPot prize pool and 1/2 to Moo vault.\r\n    /// @param user The address where to account deposit\r\n    /// @param amount The amount of `underlying` to be supplied\r\n    /// @param referrer Partners may receive commission from ticket referral\r\n    function depositMoonPot(address user, uint256 amount, address referrer)\r\n        public\r\n        nonReentrant\r\n        updateReward(user)\r\n    {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        uint256 balBefore = IERC20Upgradeable(underlying).balanceOf(address(this));\r\n        IERC20Upgradeable(underlying).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 halvedAmount = amount.div(2);\r\n\r\n        // deposit to MoonPot prize pool\r\n        IERC20Upgradeable(underlying).safeApprove(address(prizePool), amount - halvedAmount);\r\n        prizePool.depositTo(user, amount - halvedAmount, prizePoolControlledToken, referrer);\r\n\r\n        if (isMooToken) {\r\n            // deposit yield farming\r\n            IERC20Upgradeable(underlying).safeApprove(address(mooToken), halvedAmount);\r\n            uint256 mooTokenBalBefore = mooToken.balanceOf(address(this));\r\n            mooToken.deposit(halvedAmount);\r\n            uint256 mooTokenDiff = mooToken.balanceOf(address(this)).sub(mooTokenBalBefore);\r\n            _totalSupply = _totalSupply.add(mooTokenDiff);\r\n            balances[user] = balances[user].add(mooTokenDiff);\r\n            emit Staked(user, mooTokenDiff);\r\n        } else {\r\n            uint256 balAfter = IERC20Upgradeable(underlying).balanceOf(address(this));\r\n            uint256 balDiff = balAfter.sub(balBefore);\r\n            _totalSupply = _totalSupply.add(balDiff);\r\n            balances[user] = balances[user].add(balDiff);\r\n            emit Staked(user, balDiff);\r\n        }\r\n    }\r\n\r\n    /// Withdraw all sender funds with possible exit fee & claim rewards\r\n    function exitInstantly() external {\r\n        getReward();\r\n        withdrawAllInstantly();\r\n    }\r\n\r\n    /// Withdraw all sender funds with possible exit fee\r\n    function withdrawAllInstantly() public {\r\n        uint256 ticketBal = IERC20Upgradeable(prizePoolControlledToken).balanceOf(msg.sender);\r\n        if (ticketBal > 0) {\r\n            withdrawInstantlyFromMoonPotPrizePool(ticketBal);\r\n        }\r\n\r\n        uint256 yieldBal = balances[msg.sender];\r\n        if (yieldBal > 0) {\r\n            _withdrawMoonPotYieldShares(msg.sender, yieldBal);\r\n        }\r\n    }\r\n\r\n    /// @notice withdraw underlying from yield earning vault\r\n    /// @param amount The amount of `underlying` to withdraw.\r\n    function withdrawMoonPotYield(uint256 amount) public {\r\n        uint256 sharesAmount;\r\n        if (isMooToken == false || mooToken.totalSupply() == 0) {\r\n            sharesAmount = amount;\r\n        } else {\r\n            // Beefy Vault's withdraw function is looking for a \"share amount\".\r\n            sharesAmount = amount.mul(mooToken.totalSupply()).div(mooToken.balance());\r\n        }\r\n        _withdrawMoonPotYieldShares(msg.sender, sharesAmount);\r\n    }\r\n\r\n    /// @notice withdraw a users shares from yield earning vault\r\n    /// @param shares The amount of shares to withdraw.\r\n    /// if isMooToken == false, shares == underlyingAmount\r\n    function withdrawMoonPotYieldShares(address user, uint256 shares)\r\n        external\r\n        onlyZap\r\n    {\r\n        _withdrawMoonPotYieldShares(user, shares);\r\n    }\r\n\r\n    /// @notice withdraw shares from yield earning vault\r\n    /// @param shares The amount of shares to withdraw.\r\n    /// if isMooToken == false, shares == underlyingAmount\r\n    function _withdrawMoonPotYieldShares(address user, uint256 shares)\r\n        internal\r\n        nonReentrant\r\n        updateReward(user)\r\n    {\r\n         if (isMooToken) {\r\n            uint256 mooTokenBalanceBefore = mooToken.balanceOf(address(this));\r\n            uint256 balanceBefore = IERC20Upgradeable(underlying).balanceOf(address(this));\r\n\r\n            mooToken.withdraw(shares);\r\n\r\n            uint256 mooTokenDiff = mooTokenBalanceBefore.sub(mooToken.balanceOf(address(this)));\r\n            uint256 diff = IERC20Upgradeable(underlying).balanceOf(address(this)).sub(balanceBefore);\r\n\r\n            balances[user] = balances[user].sub(mooTokenDiff);\r\n            _totalSupply = _totalSupply.sub(mooTokenDiff);\r\n            IERC20Upgradeable(underlying).safeTransfer(user, diff);\r\n            emit Withdrawn(user, diff);\r\n        } else {\r\n            balances[user] = balances[user].sub(shares);\r\n            _totalSupply = _totalSupply.sub(shares);\r\n            IERC20Upgradeable(underlying).safeTransfer(user, shares);\r\n            emit Withdrawn(user, shares);\r\n        }\r\n    }\r\n\r\n    /// @notice withdraw from prize pool with possible exit fee.\r\n    /// @param amount The amount of controlled prize pool token to redeem for underlying.\r\n    function withdrawInstantlyFromMoonPotPrizePool(uint256 amount) public nonReentrant {\r\n        require(\r\n            IERC20Upgradeable(prizePoolControlledToken).allowance(\r\n                msg.sender,\r\n                address(this)\r\n            ) >= amount,\r\n            \"GateManager: approve contract to withdraw tokens for you\"\r\n        );\r\n\r\n        (uint256 exitFee, ) = prizePool.calculateEarlyExitFee(\r\n            msg.sender,\r\n            prizePoolControlledToken,\r\n            amount\r\n        );\r\n\r\n        uint256 actualFee = prizePool.withdrawInstantlyFrom(\r\n            msg.sender,\r\n            amount,\r\n            prizePoolControlledToken,\r\n            exitFee\r\n        );\r\n        require(actualFee <= exitFee, \"!fee\");\r\n    }\r\n\r\n    // Compound user stake reward if extra is give, will extend users fair play\r\n    function compound() external updateReward(msg.sender)  {\r\n        uint256 earnedAmt = earned(msg.sender, 0);\r\n        getReward(0);\r\n        depositMoonPot(earnedAmt, address(0));\r\n    }\r\n\r\n    // User claims rewards from individual reward pool\r\n    function getReward(uint256 id) public {\r\n        getReward(msg.sender, id);\r\n    }\r\n\r\n    // User claims rewards from individual reward pool\r\n    function getReward(address user, uint256 id) public updateReward(user) {\r\n        uint256 reward = earned(user, id);\r\n        if (reward > 0) {\r\n            address token = rewardInfo[id].rewardToken;\r\n            rewards[token][user] = 0;\r\n            rewardInfo[id].rewardBalance = rewardInfo[id].rewardBalance.sub(reward);\r\n            IERC20Upgradeable(token).safeTransfer(user, reward);\r\n            emit RewardPaid(user, token, reward);\r\n        }\r\n    }\r\n\r\n    // User claims all available rewards\r\n    function getReward() public {\r\n        getReward(msg.sender);\r\n    }\r\n\r\n    // User claims all available rewards\r\n    function getReward(address user) public updateReward(user) {\r\n        for (uint256 i; i < rewardInfo.length; i++) {\r\n            uint256 reward = earned(user, i);\r\n            if (reward > 0) {\r\n                address token = rewardInfo[i].rewardToken;\r\n                rewards[token][user] = 0;\r\n                rewardInfo[i].rewardBalance = rewardInfo[i].rewardBalance.sub(reward);\r\n                IERC20Upgradeable(token).safeTransfer(user, reward);\r\n                emit RewardPaid(user, token, reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Adds new reward token to the gate manager\r\n    function addRewardToken(address _rewardToken, uint256 _duration) external onlyOwner {\r\n        require(_rewardToken != address(mooToken), \"Can't reward mooToken\");\r\n        require(isPrizeToken[_rewardToken] == false, \"Can't add exisiting prize token\");\r\n        rewardInfo.push(\r\n            RewardInfo({\r\n                rewardToken: _rewardToken,\r\n                duration: _duration,\r\n                periodFinish: 0,\r\n                rewardRate: 0,\r\n                lastUpdateTime: 0,\r\n                rewardPerTokenStored: 0,\r\n                rewardBalance: 0\r\n            })\r\n        );\r\n        isPrizeToken[_rewardToken] = true;\r\n    }\r\n\r\n    // Sets notifier\r\n    function setNotifier(address newNotifier) external onlyOwner {\r\n        emit NewNotifier(newNotifier, notifier);\r\n        notifier = newNotifier;\r\n    }\r\n\r\n    // Upgrade Zap\r\n    function setZap(address newZap) external onlyOwner {\r\n        emit NewZap(newZap, zap);\r\n        zap = newZap;\r\n    }\r\n\r\n    // Sets new reward duration for existing reward token\r\n    function setRewardDuration(uint256 id, uint256 rewardDuration) external onlyOwner {\r\n        require(block.timestamp >= rewardInfo[id].periodFinish);\r\n        rewardInfo[id].duration = rewardDuration;\r\n    }\r\n\r\n    // Tells gate manager the reward amount per each reward token\r\n    function notifyRewardAmount(uint256 id, uint256 reward)\r\n        external\r\n        onlyNotifier\r\n        updateReward(address(0))\r\n    {\r\n        RewardInfo storage info = rewardInfo[id];\r\n\r\n        uint256 balance = IERC20Upgradeable(info.rewardToken).balanceOf(address(this));\r\n        uint256 userRewards = info.rewardBalance;\r\n        if (info.rewardToken == address(underlying) && isMooToken == false) {\r\n            userRewards = userRewards.add(totalSupply());\r\n        }\r\n        require(reward <= balance.sub(userRewards), \"!too many rewards\");\r\n\r\n        if (block.timestamp >= info.periodFinish) {\r\n            info.rewardRate = reward.div(info.duration);\r\n        } else {\r\n            uint256 remaining = info.periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(info.rewardRate);\r\n            info.rewardRate = reward.add(leftover).div(info.duration);\r\n        }\r\n        info.rewardBalance = info.rewardBalance.add(reward);\r\n        info.lastUpdateTime = block.timestamp;\r\n        info.periodFinish = block.timestamp.add(info.duration);\r\n        emit RewardAdded(info.rewardToken, reward);\r\n    }\r\n\r\n    // In case of airdrops or wrong tokens sent to gate manager\r\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\r\n        require(_token != address(mooToken), \"!staked\");\r\n        require(_token != address(underlying), \"!underlying\");\r\n        require(_token != address(prizePoolControlledToken), \"!ticket\");\r\n\r\n        uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this));\r\n        IERC20Upgradeable(_token).safeTransfer(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMooToken\",\"name\":\"_mooToken\",\"type\":\"address\"},{\"internalType\":\"contract IPrizePool\",\"name\":\"_prizePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePoolControlledToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isMooToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_notifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewNotifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldNotifier\",\"type\":\"address\"}],\"name\":\"NewNotifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewZap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldZap\",\"type\":\"address\"}],\"name\":\"NewZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositMoonPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositMoonPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMooToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPrizeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooToken\",\"outputs\":[{\"internalType\":\"contract IMooToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"contract IPrizePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolControlledToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNotifier\",\"type\":\"address\"}],\"name\":\"setNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newZap\",\"type\":\"address\"}],\"name\":\"setZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantlyFromMoonPotPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMoonPotYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawMoonPotYieldShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GateManagerMultiRewards", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000021403739a1dc0e3cec70cbd5ceae78ff25f102a4000000000000000000000000c95382a725df5c037d51330ed14f48035240fd1d00000000000000000000000055671114d774ee99d653d6c12460c780a67f1d1800000000000000000000000076b0fbdf8437126c3aa16995f2d2c2b0ddabedd80000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000654ac60246c9b7e35f0f51f116d67ebc0a956d090000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eccb1da1c6aa58894df32c304b689aec519f4c537eb36b03d304d03daf65be7e"}