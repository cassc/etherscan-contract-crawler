{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/coin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract AstroDiggers is ERC20 {\\r\\n    uint8 public constant _decimals = 18;\\r\\n\\r\\n    address private Owner;\\r\\n    address private swap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n\\r\\n    uint256 buyTax = 100;\\r\\n    uint256 sellTax = 200;\\r\\n\\r\\n\\r\\n    address private lottery = 0x808cf925270Aee5B65b0D11DfF701d658A16Dcf5;\\r\\n    address private liquidity = 0xa67D61b4a0E0EC822018a1196212f7e718D4d8f0;\\r\\n    address private marketing = 0xda740ec17D9Be08865a9BC3e8A9a91BCA566aA9F;\\r\\n    address private team = 0x9B7E06C8078A67Eb366CAE968cD7A6f0097153bE;\\r\\n    address private safeDeposit = 0xE219FdAC79B44FD4160746c572D4D42C0CFE8aa6;\\r\\n    address private dead = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    mapping(address => bool) blacklists;\\r\\n    mapping(address => bool) whitelist;\\r\\n    \\r\\n    bool limitEnabled = true;\\r\\n    uint256[] allowedAmounts = [0];\\r\\n    uint256 allowedMax = 2000000 ether;\\r\\n    bool disabled = true;\\r\\n\\r\\n    // Total stats\\r\\n    uint256 totalPlayers;\\r\\n    address[] playerList;\\r\\n    uint256 totalProperPlayers;\\r\\n    address[] properPlayerList;\\r\\n    mapping(address => bool) addedToList;\\r\\n    mapping(address => bool) addedToProperList;\\r\\n    uint256 properStakingLimit = 100000 ether;\\r\\n    uint256 totalStakes;\\r\\n    uint256 totalAmountStaked;\\r\\n\\r\\n    mapping(address => uint256[]) stakingIndexes;\\r\\n    mapping(address => mapping(uint256 => uint256)) stakingAmount;\\r\\n    mapping(address => mapping(uint256 => uint256)) stakingTimestamp;\\r\\n    uint256 stakingCycle = 86400;\\r\\n\\r\\n    event Blacklist(\\r\\n        address indexed owner,\\r\\n        address indexed blacklisted,\\r\\n        bool indexed added\\r\\n    );\\r\\n    event Ownership(\\r\\n        address indexed owner,\\r\\n        address indexed newOwner,\\r\\n        bool indexed added\\r\\n    );\\r\\n    event StakeCreated(\\r\\n        address indexed owner,\\r\\n        uint256 indexed amount,\\r\\n        uint256 index\\r\\n    );\\r\\n    event StakeClaimed(\\r\\n        address indexed owner,\\r\\n        uint256 indexed amount,\\r\\n        uint256 amountStaked,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    constructor(address _owner) ERC20(\\\"AstroDiggers\\\", \\\"ADIS\\\") {\\r\\n        Owner = _owner;\\r\\n        _mint(msg.sender, 1000000000 * 10**_decimals);\\r\\n        whitelist[_owner] = true;\\r\\n    }\\r\\n\\r\\n    modifier OnlyOwners() {\\r\\n        require(\\r\\n            (msg.sender == Owner),\\r\\n            \\\"You are not the owner of the token\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier BlacklistCheck() {\\r\\n        require(blacklists[msg.sender] == false, \\\"You are in the blacklist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Basic Functions\\r\\n\\r\\n    function decimals() public pure override(ERC20) returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        BlacklistCheck\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(balanceOf(msg.sender) >= amount, \\\"You do not have enough tokens\\\");\\r\\n        \\r\\n        require(recipient != address(0), \\\"The receiver address has to exist\\\");\\r\\n\\r\\n\\r\\n        uint256 _value = amount;\\r\\n\\r\\n        if (whitelist[recipient]) {\\r\\n            _transfer(msg.sender, recipient, _value);\\r\\n            return true;\\r\\n        }\\r\\n        require(!disabled, \\\"Transfer is disabled\\\");\\r\\n\\r\\n        if (msg.sender == swap) {\\r\\n            require(amount <= allowedMax, \\\"You are not allowed to transfer more than the maximum\\\");\\r\\n            if (limitEnabled)\\r\\n                require(checkAllowedAmount(amount), \\\"Wrong amount!\\\");\\r\\n            uint256 deadValue = _value * buyTax / 1000;\\r\\n            _value -= deadValue;\\r\\n            _burn(deadValue);\\r\\n        }\\r\\n        if (recipient == swap) {\\r\\n            uint256 _tax = _value * sellTax / 1000;\\r\\n            _value -= _tax;\\r\\n            _TaxDistribution(_tax);\\r\\n        }\\r\\n\\r\\n        _transfer(msg.sender, recipient, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override BlacklistCheck returns (bool) {\\r\\n        require(!blacklists[sender], \\\"Sender is blacklisted!\\\");\\r\\n        \\r\\n        uint256 _value = amount;\\r\\n\\r\\n        if (whitelist[recipient] || whitelist[sender]) {\\r\\n            _spendAllowance(sender, msg.sender, amount);\\r\\n            _transfer(sender, recipient, amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (msg.sender == lottery) {\\r\\n            _transfer(sender, recipient, amount);\\r\\n            return true;\\r\\n        }\\r\\n        require(!disabled, \\\"Transfer is disabled\\\");\\r\\n        if (recipient == swap) {\\r\\n            uint256 _tax = _value * sellTax / 1000;\\r\\n            _value -= _tax;\\r\\n            _spendAllowance(sender, msg.sender, _tax);\\r\\n            _TaxDistributionFrom(_tax, sender);\\r\\n        } \\r\\n        if (sender == swap) {\\r\\n            require(amount <= allowedMax, \\\"You are not allowed to transfer more than the maximum\\\");\\r\\n            if (limitEnabled)\\r\\n                require(checkAllowedAmount(amount), \\\"Wrong amount!\\\");\\r\\n            uint256 deadValue = _value * buyTax / 1000;\\r\\n            _value -= deadValue;\\r\\n            _spendAllowance(sender, msg.sender, deadValue);\\r\\n            _burn(deadValue);\\r\\n        }\\r\\n\\r\\n        _spendAllowance(sender, msg.sender, _value);\\r\\n        _transfer(sender, recipient, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Tax Functions\\r\\n\\r\\n    function _TaxDistribution(uint256 _amount) private {\\r\\n        uint256 fifth = _amount / 5;\\r\\n        uint256 left = _amount - fifth * 4;\\r\\n        _transfer(msg.sender, lottery, fifth);\\r\\n        _transfer(msg.sender, liquidity, fifth);\\r\\n        _transfer(msg.sender, marketing, fifth);\\r\\n        _transfer(msg.sender, team, fifth);\\r\\n        _transfer(msg.sender, address(this), left);\\r\\n    }\\r\\n\\r\\n    function _TaxDistributionFrom(uint256 _amount, address _who) private {\\r\\n        uint256 fifth = _amount / 5;\\r\\n        uint256 left = _amount - fifth * 4;\\r\\n        _transfer(_who, lottery, fifth);\\r\\n        _transfer(_who, liquidity, fifth);\\r\\n        _transfer(_who, marketing, fifth);\\r\\n        _transfer(_who, team, fifth);\\r\\n        _transfer(_who, address(this), left);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 _amount) private {\\r\\n        _transfer(msg.sender, dead, _amount);\\r\\n    }\\r\\n\\r\\n    // Staking Functions\\r\\n\\r\\n    function createStake(uint256 _value) public BlacklistCheck {\\r\\n        address _player = msg.sender;\\r\\n        if (!addedToList[_player]) {\\r\\n            totalPlayers++;\\r\\n            playerList.push(_player);\\r\\n            addedToList[_player] = true;\\r\\n        }\\r\\n        if (!addedToProperList[_player] && (_value >= properStakingLimit)) {\\r\\n            totalProperPlayers++;\\r\\n            properPlayerList.push(_player);\\r\\n            addedToProperList[_player] = true;\\r\\n        }\\r\\n        uint256 amountOfStakes = checkAmountOfStakes(_player);\\r\\n        _transfer(_player, safeDeposit, _value);\\r\\n        stakingIndexes[_player].push(amountOfStakes);\\r\\n        stakingAmount[_player][amountOfStakes] = _value;\\r\\n        stakingTimestamp[_player][amountOfStakes] = block.timestamp;\\r\\n        totalStakes++;\\r\\n        totalAmountStaked += _value;\\r\\n        emit StakeCreated(_player, _value, amountOfStakes);\\r\\n    }\\r\\n\\r\\n    function claimStake(uint256 _index) public BlacklistCheck {\\r\\n        address _player = msg.sender;\\r\\n        uint256 _value = checkEarnedStake(_player, _index);\\r\\n        require(_value > 0, \\\"Stake does not exist!\\\");\\r\\n        uint256 _indexinArr = indexOf(stakingIndexes[_player], _index);\\r\\n        uint256 amountOfStakes = checkAmountOfStakes(_player);\\r\\n        if (amountOfStakes == 1) {\\r\\n            if (addedToList[_player]) {\\r\\n                uint256 _tempindex = indexOfAddress(playerList, _player);\\r\\n                playerList[_tempindex] = playerList[playerList.length - 1];\\r\\n                playerList.pop();\\r\\n                totalPlayers--;\\r\\n                addedToList[_player] = false;\\r\\n            }\\r\\n            if (addedToProperList[_player]) {\\r\\n                uint256 _tempproperindex = indexOfAddress(properPlayerList, _player);\\r\\n                properPlayerList[_tempproperindex] = properPlayerList[properPlayerList.length - 1];\\r\\n                properPlayerList.pop();\\r\\n                totalProperPlayers--;\\r\\n                addedToProperList[_player] = false;\\r\\n            }\\r\\n        }\\r\\n        uint256 _stakedValue = stakingAmount[_player][_index];\\r\\n        stakingAmount[_player][_indexinArr] = stakingAmount[_player][amountOfStakes - 1];\\r\\n        stakingAmount[_player][amountOfStakes - 1] = 0;\\r\\n        stakingTimestamp[_player][_indexinArr] = stakingTimestamp[_player][amountOfStakes - 1];\\r\\n        stakingTimestamp[_player][amountOfStakes - 1] = 0;\\r\\n        stakingIndexes[_player].pop();\\r\\n        totalStakes--;\\r\\n        totalAmountStaked -= _value;\\r\\n        emit StakeClaimed(_player, _value, stakingAmount[_player][_index], _index);\\r\\n        _transfer(safeDeposit, _player, _stakedValue);\\r\\n        if (balanceOf(address(this)) < _value - _stakedValue) {\\r\\n            _transfer(address(this), _player, balanceOf(address(this)));\\r\\n            return;\\r\\n        }    \\r\\n        _transfer(address(this), _player, _value - _stakedValue);\\r\\n         \\r\\n    }\\r\\n\\r\\n    function checkEarnedStake(address _who, uint256 _index) public view returns(uint256) {\\r\\n        uint256 timepassed = block.timestamp - stakingTimestamp[_who][_index];\\r\\n        uint256 _stakedValue = stakingAmount[_who][_index];\\r\\n        uint256 cycles = timepassed / stakingCycle;\\r\\n        uint256 _value = 0;\\r\\n\\r\\n        if (cycles < 4) {\\r\\n            _value = _stakedValue * 10 / 1000 * cycles + _stakedValue;\\r\\n            return _value;\\r\\n        }\\r\\n\\r\\n        if (cycles < 8) {\\r\\n            _value = _stakedValue * 25 / 1000 * cycles + _stakedValue;\\r\\n            return _value;\\r\\n        }\\r\\n\\r\\n        if (cycles < 13) {\\r\\n            _value = _stakedValue * 35 / 1000 * cycles + _stakedValue;\\r\\n            return _value;\\r\\n        }\\r\\n\\r\\n        _value = _stakedValue * 50 / 1000 * cycles + _stakedValue;\\r\\n        return _value;\\r\\n    }\\r\\n\\r\\n    function indexOf(uint256[] memory arr, uint256 _index) private pure returns (uint256) {\\r\\n        for (uint256 i = 0; i < arr.length; i++) {\\r\\n          if (arr[i] == _index) {\\r\\n            return i;\\r\\n          }\\r\\n        }\\r\\n        revert(\\\"Not Found\\\");\\r\\n    }\\r\\n\\r\\n    function indexOfAddress(address[] memory arr, address _index) private pure returns (uint256) {\\r\\n        for (uint256 i = 0; i < arr.length; i++) {\\r\\n          if (arr[i] == _index) {\\r\\n            return i;\\r\\n          }\\r\\n        }\\r\\n        revert(\\\"Not Found\\\");\\r\\n    }\\r\\n\\r\\n    function checkAmountOfStakes(address _who) public view returns(uint256) {\\r\\n        return stakingIndexes[_who].length;\\r\\n    }\\r\\n\\r\\n    function checkStakeTimestamp(address _who, uint256 _index)public view returns(uint256) {\\r\\n        return stakingTimestamp[_who][_index];\\r\\n    }\\r\\n\\r\\n    function checkStakeBody(address _who, uint256 _index)public view returns(uint256) {\\r\\n        return stakingAmount[_who][_index];\\r\\n    }\\r\\n\\r\\n    function checkStakes(address _who)public view returns(uint256[] memory) {\\r\\n        return stakingIndexes[_who];\\r\\n    }\\r\\n\\r\\n    // Token Utilities\\r\\n\\r\\n    function checkAllowedAmount(uint256 _amount) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < allowedAmounts.length;) {\\r\\n            if (_amount == allowedAmounts[i]) \\r\\n                return true;\\r\\n            i++;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addBlacklistMember(address _who) public OnlyOwners {\\r\\n        blacklists[_who] = true;\\r\\n        emit Blacklist(msg.sender, _who, true);\\r\\n    }\\r\\n\\r\\n    function removeBlacklistMember(address _who) public OnlyOwners {\\r\\n        blacklists[_who] = false;\\r\\n    }\\r\\n\\r\\n    function checkBlacklistMember(address _who) public view returns (bool) {\\r\\n        return blacklists[_who];\\r\\n    }\\r\\n\\r\\n    function addWhitelistMember(address _who) public OnlyOwners {\\r\\n        whitelist[_who] = true;\\r\\n    }\\r\\n\\r\\n    function removeWhitelistMember(address _who) public OnlyOwners {\\r\\n        whitelist[_who] = false;\\r\\n    }\\r\\n\\r\\n    function checkWhitelistMember(address _who) public view returns (bool) {\\r\\n        return whitelist[_who];\\r\\n    }\\r\\n\\r\\n    function checkTotalPlayers() public view returns (uint256) {\\r\\n        return totalPlayers;\\r\\n    }\\r\\n\\r\\n    function checkTotalPlayersList() public view returns (address[] memory) {\\r\\n        return playerList;\\r\\n    }\\r\\n\\r\\n    function checkTotalProperPlayers() public view returns (uint256) {\\r\\n        return totalProperPlayers;\\r\\n    }\\r\\n\\r\\n    function checkTotalProperPlayersList() public view returns (address[] memory) {\\r\\n        return properPlayerList;\\r\\n    }\\r\\n\\r\\n    function checkTotalAmountStaked() public view returns (uint256) {\\r\\n        return totalAmountStaked;\\r\\n    }\\r\\n\\r\\n    function checkTotalStakes() public view returns (uint256) {\\r\\n        return totalStakes;\\r\\n    }\\r\\n\\r\\n    function transferOwner(address _who) public OnlyOwners returns (bool) {\\r\\n        Owner = _who;\\r\\n        emit Ownership(msg.sender, _who, true);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeBuyTax(uint256 _tax) public OnlyOwners {\\r\\n        buyTax = _tax;\\r\\n    }\\r\\n\\r\\n    function changeSellTax(uint256 _tax) public OnlyOwners {\\r\\n        sellTax = _tax;\\r\\n    }\\r\\n\\r\\n    function changeMax(uint256 _max) public OnlyOwners {\\r\\n        allowedMax = _max;\\r\\n    }\\r\\n\\r\\n    function changeLimits(uint256[] memory _amounts) public OnlyOwners {\\r\\n        allowedAmounts = _amounts;\\r\\n    }\\r\\n\\r\\n    function toggleLimit(bool _status) public OnlyOwners {\\r\\n        limitEnabled = _status;\\r\\n    }\\r\\n\\r\\n    function changeProperStakeLimit(uint256 _limit) public OnlyOwners {\\r\\n        properStakingLimit = _limit;\\r\\n    }\\r\\n\\r\\n    function addLotteryContract(address _contract) public OnlyOwners {\\r\\n        _transfer(lottery, _contract, balanceOf(lottery));\\r\\n        lottery = _contract;\\r\\n    }\\r\\n\\r\\n    function changeSwap(address _address) public OnlyOwners {\\r\\n        swap = _address;\\r\\n    }\\r\\n\\r\\n    function withdraw() public OnlyOwners {\\r\\n        require(address(this).balance > 0);\\r\\n        payable(Owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function setDisabled(bool _status) public OnlyOwners {\\r\\n        disabled = _status;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        if (!whitelist[from]) {\\r\\n\\r\\n        }\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklisted\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"Ownership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addBlacklistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addLotteryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addWhitelistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"changeBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"changeProperStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"changeSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkAllowedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"checkAmountOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"checkBlacklistMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkEarnedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkStakeBody\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkStakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"checkStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalPlayersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalProperPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalProperPlayersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"checkWhitelistMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeBlacklistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeWhitelistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"toggleLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AstroDiggers", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d5398c0849e1eb49c6818aacb6b95b3c5771fff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}