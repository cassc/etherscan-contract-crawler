{"SourceCode": "// File: tests/IterableMapping.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n// File: tests/uniswap/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: tests/uniswap/IUniswapV2Router.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: tests/node_modules/openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: tests/node_modules/openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: tests/node_modules/openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: tests/node_modules/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: tests/node_modules/openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: tests/node_modules/openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: tests/AngelNodeManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AngelNodeManager is Ownable {\r\n    using SafeMath for uint256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    // Nodes\r\n    struct NodeType {\r\n      uint256 rewards; // Rewards of the Node\r\n      uint256 timeToUpgrade; // Time to upgrade to the next Node\r\n      uint256 typeUpgradeNode; // Type of the next Node\r\n      uint256 price; // Price of the Node\r\n\r\n      bool buyable;\r\n      bool upgradable;\r\n      bool disabled;\r\n      bool bonus; // Bonus = not calculated in maxNode\r\n    }\r\n\r\n    struct Node {\r\n      uint256 id;\r\n      string name;\r\n      uint256 nodeType;\r\n\r\n      bool upgrading;\r\n\r\n      uint256 createTimestamp;\r\n      uint256 lastClaimTimestamp;\r\n      uint256 angelUpgradeStartTimestamp;\r\n\r\n      uint256 availableRewards;\r\n    }\r\n\r\n    // Booster\r\n    struct BoosterData {\r\n      address[] boosterChilds;\r\n      address boosterGodFather;\r\n      string boosterCode;\r\n\r\n      bool boosterCodeSetup;\r\n      bool boosterCodeUsed;\r\n    }\r\n\r\n    struct BoosterCode {\r\n      bool isValid;\r\n      address codeOwner;\r\n      uint256 used;\r\n    }\r\n\r\n    // Settings\r\n    uint256 public _maxNodes = 100;\r\n    uint256 public _claimingTimestamp = 86400;\r\n    uint256 public _gasForProcessing = 300000;\r\n    uint256 public _minimumNodeUseRef = 1;\r\n    uint256 public _minimumNodeSetRef = 3;\r\n    uint256 public _maxAmountPerNode = 3;\r\n\r\n    // Datas\r\n    uint256 public _totalCreatedNodes = 0;\r\n    uint256 public _totalEarn = 0;\r\n    uint256 public _lastProcessedIndex = 0;\r\n    bool private distributing = false;\r\n\r\n    // Nodes\r\n    IterableMapping.Map private nodeOwners;\r\n    mapping(address => Node[]) private usersNodes;\r\n    NodeType[] _nodeTypes;\r\n\r\n    // Boosters\r\n    mapping(address => BoosterData) private boosterDatas;\r\n    mapping(string => BoosterCode) private boosterCodes;\r\n\r\n    constructor() {\r\n      // Angel\r\n      _nodeTypes.push(NodeType({\r\n        rewards: 0.066 * (10**8),\r\n        timeToUpgrade: 66 * 3600 * 24, // 66 Days\r\n        typeUpgradeNode: 1, // Upgrade possible to 1\r\n        price: 13 * (10**8),\r\n        buyable: true,\r\n        upgradable: true,\r\n        disabled: false,\r\n        bonus: false\r\n      }));\r\n\r\n      // Dark Angel\r\n      _nodeTypes.push(NodeType({\r\n        rewards: 0.366 * (10**8),\r\n        timeToUpgrade: 33 * 3600 * 24, // 33 Days\r\n        typeUpgradeNode: 2, // Upgrade possible to 2\r\n        price: 66 * (10**8),\r\n        buyable: true,\r\n        upgradable: true,\r\n        disabled: false,\r\n        bonus: false\r\n      }));\r\n\r\n      // Arch Angel\r\n      _nodeTypes.push(NodeType({\r\n        rewards: 0.666 * (10**8),\r\n        timeToUpgrade: 11 * 3600 * 24, // 11 Days\r\n        typeUpgradeNode: 3, // Upgrade possible to 3\r\n        price: 111 * (10**8),\r\n        buyable: true,\r\n        upgradable: true,\r\n        disabled: false,\r\n        bonus: false\r\n      }));\r\n\r\n      // Nemesis\r\n      _nodeTypes.push(NodeType({\r\n        rewards: 1 * (10**8),\r\n        timeToUpgrade: 0,\r\n        typeUpgradeNode: 0, // Upgrade impossible\r\n        price: 100000000 * (10**8),\r\n        buyable: false,\r\n        upgradable: false,\r\n        disabled: false,\r\n        bonus: false\r\n      }));\r\n\r\n      // Booster\r\n      _nodeTypes.push(NodeType({\r\n        rewards: 0.111 * (10**8),\r\n        timeToUpgrade: 0,\r\n        typeUpgradeNode: 0, // Upgrade impossible\r\n        price: 100000000 * (10**8),\r\n        buyable: false,\r\n        upgradable: false,\r\n        disabled: false,\r\n        bonus: true\r\n      }));\r\n    }\r\n\r\n    function _setBoosterCode(address user, string memory code) external onlyOwner {\r\n      require(!boosterCodes[code].isValid, \"This code is already exist\");\r\n      require(!boosterDatas[user].boosterCodeSetup, \"Cannot edit a booster code\");\r\n      require(getNumberOfSpecifiedMinNodes(user, _minimumNodeSetRef) > 0, \"You need to have a specific node\");\r\n\r\n      boosterCodes[code].isValid = true;\r\n      boosterCodes[code].codeOwner = user;\r\n      boosterCodes[code].used = 0;\r\n\r\n      boosterDatas[user].boosterCodeSetup = true;\r\n      boosterDatas[user].boosterCode = code;\r\n      boosterDatas[user].boosterGodFather = user;\r\n    }\r\n\r\n    function _useBoosterCode(address user, string memory code) external onlyOwner returns (address) {\r\n      require(boosterCodes[code].isValid, \"This code is not valid\");\r\n      require(!boosterDatas[user].boosterCodeUsed, \"You already used a code\");\r\n      require(getNumberOfSpecifiedMinNodes(user, _minimumNodeUseRef) > 0, \"You need to have a specific node\");\r\n\r\n      address codeOwner = boosterCodes[code].codeOwner;\r\n      require(codeOwner != user, \"You cannot use your code\");\r\n      require(\r\n        boosterDatas[codeOwner].boosterChilds.length < getNumberOfSpecifiedMinNodes(codeOwner, _minimumNodeSetRef) * _maxAmountPerNode,\r\n        \"The code owner has no empty place\");\r\n\r\n      boosterDatas[codeOwner].boosterChilds.push(user);\r\n      boosterDatas[user].boosterCodeUsed = true;\r\n      boosterDatas[user].boosterGodFather = codeOwner;\r\n\r\n      _createNode(codeOwner, \"Booster Node\", 4);\r\n\r\n      return codeOwner;\r\n    }\r\n\r\n    function _createNode(address user, string memory name, uint256 nodeTypeId) public onlyOwner {\r\n      require(_getNumberOfNodes(user) < _maxNodes, \"Maximum of nodes reached\");\r\n\r\n      uint256 id = ++_totalCreatedNodes;\r\n\r\n      usersNodes[user].push(Node({\r\n        id: id,\r\n        name: name,\r\n        nodeType: nodeTypeId,\r\n        upgrading: false,\r\n        createTimestamp: block.timestamp,\r\n        lastClaimTimestamp: block.timestamp,\r\n        angelUpgradeStartTimestamp: 0,\r\n        availableRewards: 0\r\n      }));\r\n\r\n      nodeOwners.set(user, usersNodes[user].length);\r\n\r\n      if(!distributing) distributeRewards();\r\n    }\r\n\r\n    function _buyNode(address user, string memory name, uint256 nodeTypeId) external onlyOwner {\r\n      NodeType storage nodeType = _nodeTypes[nodeTypeId];\r\n      require(!nodeType.disabled, \"Cannot buy a disabled node\");\r\n      require(nodeType.buyable, \"Cannot buy a non-buyable node\");\r\n\r\n      _createNode(user, name, nodeTypeId);\r\n    }\r\n\r\n    function distributeRewards() private returns (uint256, uint256) {\r\n      distributing = true;\r\n      require(_totalCreatedNodes > 0, \"No nodes to distribute\");\r\n\r\n      uint256 ownersCount = nodeOwners.keys.length;\r\n      uint256 gasUsed = 0;\r\n      uint256 gasLeft = gasleft();\r\n      uint256 newGasLeft;\r\n      uint256 iterations = 0;\r\n      uint256 claims = 0;\r\n\r\n      Node[] storage nodes;\r\n      Node storage _node;\r\n      NodeType storage _nodeType;\r\n\r\n      while (gasUsed < _gasForProcessing && iterations < ownersCount) {\r\n        if (_lastProcessedIndex >= nodeOwners.keys.length) _lastProcessedIndex = 0;\r\n\r\n        nodes = usersNodes[nodeOwners.keys[_lastProcessedIndex]];\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n          _node = nodes[i];\r\n          _nodeType = _nodeTypes[_node.nodeType];\r\n\r\n          // If we can process a claim, if is not a disabled node and not in upgrade\r\n          if (canClaim(_node) && !_nodeType.disabled && !_node.upgrading) {\r\n            _node.availableRewards += _nodeType.rewards;\r\n            _node.lastClaimTimestamp = block.timestamp;\r\n            _totalEarn += _nodeType.rewards;\r\n            claims++;\r\n          }\r\n        }\r\n\r\n        newGasLeft = gasleft();\r\n        if (gasLeft > newGasLeft) gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n        gasLeft = newGasLeft;\r\n\r\n        iterations++;\r\n\r\n        _lastProcessedIndex++;\r\n      }\r\n\r\n      distributing = false;\r\n      return (iterations, claims);\r\n    }\r\n\r\n    function _cashoutNode(address user, uint256 id) external onlyOwner returns (uint256) {\r\n      Node[] storage nodes = usersNodes[user];\r\n\r\n      uint256 nodesCount = nodes.length;\r\n      require(nodesCount > 0, \"No nodes to cashout\");\r\n\r\n      (uint256 nodeIndex, bool finded) = getNodeIndexWithId(nodes, id);\r\n\r\n      require(finded, \"Cannot find the node\");\r\n\r\n      Node storage node = nodes[nodeIndex];\r\n      uint256 rewards = node.availableRewards;\r\n      node.availableRewards = 0;\r\n\r\n      return rewards;\r\n    }\r\n\r\n    function _cashoutAllNodes(address user) external onlyOwner returns (uint256) {\r\n      Node[] storage nodes = usersNodes[user];\r\n\r\n      uint256 nodesCount = nodes.length;\r\n      require(nodesCount > 0, \"No nodes to cashout\");\r\n\r\n      Node storage _node;\r\n      uint256 rewards = 0;\r\n\r\n      for (uint256 i = 0; i < nodesCount; i++) {\r\n        _node = nodes[i];\r\n        rewards += _node.availableRewards;\r\n        _node.availableRewards = 0;\r\n      }\r\n\r\n      return rewards;\r\n    }\r\n\r\n    function _upgradeNode(address user, uint256 id) external onlyOwner returns (bool) {\r\n      Node[] storage nodes = usersNodes[user];\r\n\r\n      uint256 nodesCount = nodes.length;\r\n      require(nodesCount > 0, \"No nodes to upgrade\");\r\n\r\n      (uint256 nodeIndex, bool finded) = getNodeIndexWithId(nodes, id);\r\n      require(finded, \"Cannot find the node\");\r\n\r\n      Node storage node = nodes[nodeIndex];\r\n      require(!node.upgrading, \"Already upgrading\");\r\n\r\n      NodeType storage nodeType = _nodeTypes[node.nodeType];\r\n      require(nodeType.upgradable, \"Cannot upgrade this Node\");\r\n\r\n      node.upgrading = true;\r\n      node.angelUpgradeStartTimestamp = block.timestamp;\r\n\r\n      return true;\r\n    }\r\n\r\n    function _upgradeAllNodes(address user) external onlyOwner returns (uint256) {\r\n      Node[] storage nodes = usersNodes[user];\r\n\r\n      uint256 nodesCount = nodes.length;\r\n      require(nodesCount > 0, \"No nodes to cashout\");\r\n\r\n      Node storage node;\r\n      NodeType storage nodeType;\r\n      uint256 count = 0;\r\n\r\n      for (uint256 i = 0; i < nodes.length; i++) {\r\n        node = nodes[i];\r\n        nodeType = _nodeTypes[node.nodeType];\r\n\r\n        if(!node.upgrading && nodeType.upgradable) {\r\n          node.upgrading = true;\r\n          node.angelUpgradeStartTimestamp = block.timestamp;\r\n          count++;\r\n        }\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    function _claimUpgrade(address user, uint256 id) external onlyOwner returns (bool) {\r\n      Node[] storage nodes = usersNodes[user];\r\n\r\n      uint256 nodesCount = nodes.length;\r\n      require(nodesCount > 0, \"No nodes to cashout\");\r\n\r\n      (uint256 nodeIndex, bool finded) = getNodeIndexWithId(nodes, id);\r\n      require(finded, \"Cannot find the node\");\r\n\r\n      Node storage node = nodes[nodeIndex];\r\n      require(canClaimUpgrade(node), \"Cannot claim the upgrade node\");\r\n\r\n      node.upgrading = false;\r\n      node.angelUpgradeStartTimestamp = 0;\r\n      node.nodeType = _nodeTypes[node.nodeType].typeUpgradeNode;\r\n\r\n      return true;\r\n    }\r\n\r\n    function _getClaimableUpgrades(address user) external onlyOwner view returns (uint256[] memory) {\r\n      require(_getNumberOfNodes(user) > 0, \"Cannot claim any nodes\");\r\n\r\n      Node[] storage nodes = usersNodes[user];\r\n      Node storage node;\r\n      NodeType storage nodeType;\r\n      uint256[] memory idsClaimable = new uint256[](nodes.length);\r\n\r\n      for (uint256 i = 0; i < nodes.length; i++) {\r\n        node = nodes[i];\r\n        nodeType = _nodeTypes[node.nodeType];\r\n\r\n        if(node.upgrading) {\r\n          if(block.timestamp >= node.angelUpgradeStartTimestamp + nodeType.timeToUpgrade) {\r\n            idsClaimable[idsClaimable.length] = node.id;\r\n          }\r\n        }\r\n      }\r\n\r\n      return idsClaimable;\r\n    }\r\n\r\n    // Utils\r\n    function canClaim(Node memory node) private view returns (bool) {\r\n      return block.timestamp >= node.lastClaimTimestamp + _claimingTimestamp;\r\n    }\r\n\r\n    function getNodeIndexWithId(Node[] storage nodes, uint256 id) private view returns (uint256, bool) {\r\n      for (uint256 i = 0; i < nodes.length; i++) {\r\n        if(nodes[i].id == id) return (i, true);\r\n      }\r\n      return (0, false);\r\n    }\r\n\r\n    function canClaimUpgrade(Node memory node) private view returns (bool) {\r\n      NodeType storage nodeType = _nodeTypes[node.nodeType];\r\n\r\n      return node.upgrading && block.timestamp >= node.angelUpgradeStartTimestamp + nodeType.timeToUpgrade;\r\n    }\r\n\r\n    function getNumberOfSpecifiedMinNodes(address user, uint256 nodeTypeId) private view returns (uint256) {\r\n      Node[] storage nodes = usersNodes[user];\r\n      Node storage node;\r\n      uint256 count = 0;\r\n\r\n      for (uint256 i = 0; i < nodes.length; i++) {\r\n        node = nodes[i];\r\n        if(node.nodeType >= nodeTypeId && !_nodeTypes[node.nodeType].bonus) count++;\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    function _processDistribution() external onlyOwner {\r\n      distributeRewards();\r\n    }\r\n\r\n    // Getters\r\n    function _getClaimingTimestamp() external view returns (uint256) {\r\n      return _claimingTimestamp;\r\n    }\r\n\r\n    function _getMaxNodes() external view returns (uint256) {\r\n      return _maxNodes;\r\n    }\r\n\r\n    function _getTotalEarned() external view returns (uint256) {\r\n      return _totalEarn;\r\n    }\r\n\r\n    function _getTotalCreatedNodes() external view returns (uint256) {\r\n      return _totalCreatedNodes;\r\n    }\r\n\r\n    function _getNumberOfNodes(address user) private view returns (uint256) {\r\n      Node[] storage nodes = usersNodes[user];\r\n      uint256 count = 0;\r\n\r\n      for (uint256 i = 0; i < nodes.length; i++) {\r\n        if(!_nodeTypes[nodes[i].nodeType].bonus) count++;\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    function _isNodeOwner(address user) private view returns (bool) {\r\n      return usersNodes[user].length > 0;\r\n    }\r\n\r\n    function _getPriceOfNode(uint256 nodeTypeId) public view returns (uint256) {\r\n      require(nodeTypeId < _nodeTypes.length && nodeTypeId >= 0, \"Not valid id of a type of Node\");\r\n\r\n      return _nodeTypes[nodeTypeId].price;\r\n    }\r\n\r\n    function _getNodes(address user) external onlyOwner view returns (Node[] memory) {\r\n      return usersNodes[user];\r\n    }\r\n\r\n    function _getNodeTypes() external onlyOwner view returns (NodeType[] memory) {\r\n      return _nodeTypes;\r\n    }\r\n\r\n    function _getBoosterDatas(address user) external onlyOwner view returns (BoosterData memory) {\r\n      require(boosterDatas[user].boosterCodeSetup, \"Booster code not setup yet\");\r\n      return boosterDatas[user];\r\n    }\r\n\r\n    function _setMinimumNodeUseRef(uint256 nodeId) external onlyOwner {\r\n      _minimumNodeUseRef = nodeId;\r\n    }\r\n\r\n    function _setMinimumNodeSetRef(uint256 nodeId) external onlyOwner {\r\n      _minimumNodeSetRef = nodeId;\r\n    }\r\n\r\n    function _setMaxAmountPerNode(uint256 amount) external onlyOwner {\r\n      _maxAmountPerNode = amount;\r\n    }\r\n\r\n    // Setters\r\n    function _updateGasForProcessing(uint256 amount) external onlyOwner {\r\n      require(amount >= 200000 && amount <= 500000, \"gasForProcessing must be between 200,000 and 500,000\");\r\n      require(amount != _gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n\r\n      emit GasForProcessingUpdated(amount, _gasForProcessing);\r\n\r\n      _gasForProcessing = amount;\r\n    }\r\n\r\n    function _setClaimingTimestamp(uint256 amount) external onlyOwner {\r\n      _claimingTimestamp = amount;\r\n    }\r\n\r\n    function _setMaxNodes(uint256 amount) external onlyOwner {\r\n      _maxNodes = amount;\r\n    }\r\n\r\n    function _editNodeType(uint256 nodeTypeId, uint256 rewards, uint256 timeToUpgrade, uint256 typeUpgradeNode,\r\n                           uint256 price, bool buyable, bool upgradable, bool bonus) external onlyOwner {\r\n      require(nodeTypeId < _nodeTypes.length && nodeTypeId >= 0, \"Not valid id of a type of Node\");\r\n\r\n      NodeType storage nodeType = _nodeTypes[nodeTypeId];\r\n\r\n      nodeType.rewards = rewards;\r\n      nodeType.timeToUpgrade = timeToUpgrade;\r\n      nodeType.typeUpgradeNode = typeUpgradeNode;\r\n      nodeType.price = price;\r\n      nodeType.buyable = buyable;\r\n      nodeType.upgradable = upgradable;\r\n      nodeType.bonus = bonus;\r\n    }\r\n\r\n    function _addNodeType(uint256 rewards, uint256 timeToUpgrade, uint256 typeUpgradeNode,\r\n                           uint256 price, bool buyable, bool upgradable, bool bonus) external onlyOwner {\r\n      _nodeTypes.push(NodeType({\r\n        rewards: rewards,\r\n        timeToUpgrade: timeToUpgrade,\r\n        typeUpgradeNode: typeUpgradeNode,\r\n        price: price,\r\n        buyable: buyable,\r\n        upgradable: upgradable,\r\n        disabled: false,\r\n        bonus: bonus\r\n      }));\r\n    }\r\n\r\n    function _disableNodeType(uint256 id) external onlyOwner {\r\n      require(id < _nodeTypes.length && id >= 0, \"Not valid id of a type of Node\");\r\n\r\n      _nodeTypes[id].disabled = true;\r\n    }\r\n\r\n    function _enableNodeType(uint256 id) external onlyOwner {\r\n      require(id < _nodeTypes.length && id >= 0, \"Not valid id of a type of Node\");\r\n\r\n      _nodeTypes[id].disabled = false;\r\n    }\r\n\r\n}\r\n// File: tests/node_modules/openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: tests/Angel.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Angel is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    AngelNodeManager private nodeManager;\r\n\r\n    // Global Informations\r\n    uint8 private _decimals = 8;\r\n    uint256 private _totalSupply = 10_000_000 * (10**8);\r\n\r\n    // Fees\r\n    uint256 public _futurUseSellFee = 15; // 15\r\n    uint256 public _burnSellFee = 0; // 0\r\n    uint256 public _futurUseNodeFee = 7; // 7\r\n    uint256 public _liquidityPoolFee = 20; // 20\r\n    uint256 public _distributionSwapFee = 3; // 3 | 3% of the 73% from rewardsNodeFee\r\n\r\n    uint256 public _boosterChildAmount = 3;\r\n\r\n    // Pools & Wallets\r\n    address public _futurUsePool = 0x31D0b942b31C8Ecf41d09A178A2F2ec4D3cFbe71;\r\n    address public _distributionPool = 0xFE2B4a02cdbF18be695791A80Fc8CbE1a8297670;\r\n    address public _deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Pancakeswap V2\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool private swapping = false;\r\n    uint256 public swapTokensAtAmount = 300 * (10**8);\r\n\r\n    // Security\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    // Events\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n    constructor() ERC20(\"Angel Nodes\", \"AngeL\") {\r\n        nodeManager = new AngelNodeManager();\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        // Exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(_futurUsePool, true);\r\n        excludeFromFees(_distributionPool, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        _mint(owner(), _totalSupply);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n      return _decimals;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function buyNode(string memory name, uint256 nodeType) external  {\r\n      address sender = safeSender();\r\n\r\n      require(bytes(name).length >= 3 && bytes(name).length <= 32,\r\n        \"Name size must be between 3 and 32 length\");\r\n\r\n      uint256 price = nodeManager._getPriceOfNode(nodeType);\r\n      require(balanceOf(sender) >= price,\r\n        \"You have not the balance to buy this node\");\r\n\r\n      uint256 contractAngelBalance = balanceOf(address(this));\r\n      bool canProcess = contractAngelBalance >= swapTokensAtAmount;\r\n\r\n      if (canProcess && !swapping) {\r\n          swapping = true;\r\n\r\n          // FuturUse\r\n          if(_futurUseNodeFee > 0) {\r\n            uint256 futurUseTokens = contractAngelBalance.mul(_futurUseNodeFee).div(100);\r\n            swapAndSendToFee(_futurUsePool, futurUseTokens);\r\n          }\r\n\r\n          // Liquidity\r\n          if(_liquidityPoolFee > 0) {\r\n            uint256 swapTokens = contractAngelBalance.mul(_liquidityPoolFee).div(100);\r\n            swapAndLiquify(swapTokens);\r\n          }\r\n\r\n          // Distribution\r\n          if(_distributionSwapFee > 0) {\r\n            uint256 distributionTokensToSwap = balanceOf(address(this)).mul(_distributionSwapFee).div(100);\r\n            swapAndSendToFee(_distributionPool, distributionTokensToSwap);\r\n          }\r\n\r\n          super._transfer(address(this), _distributionPool, balanceOf(address(this)));\r\n\r\n          swapping = false;\r\n      }\r\n\r\n      super._transfer(sender, address(this), price);\r\n\r\n      nodeManager._buyNode(msg.sender, name, nodeType);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n      require(from != address(0), \"Transfer from the zero address\");\r\n      require(to != address(0), \"Transfer to the zero address\");\r\n      require(from != _deadWallet, \"Transfer from the dead wallet address\");\r\n      require(!_isBlacklisted[from] && !_isBlacklisted[to], 'Blacklisted address');\r\n\r\n      if(amount == 0) {\r\n        super._transfer(from, to, 0);\r\n        return;\r\n      }\r\n\r\n      // If any account is inside _isExcludedFromFee then don't take the fee\r\n      bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n      // Fees on sell\r\n      if(takeFee && to == uniswapV2Pair) {\r\n        uint256 futurFees = amount.mul(_futurUseSellFee).div(100);\r\n        super._transfer(from, _futurUsePool, futurFees);\r\n\r\n        uint256 burnFees = amount.mul(_burnSellFee).div(100);\r\n        super._transfer(from, _deadWallet, burnFees);\r\n\r\n        amount = amount.sub(futurFees).sub(burnFees);\r\n      }\r\n\r\n      super._transfer(from, to, amount);\r\n    }\r\n\r\n    /*\r\n     * Wrapper\r\n     */\r\n    function cashoutNode(uint256 id) external {\r\n      address sender = safeSender();\r\n      uint256 rewards = nodeManager._cashoutNode(sender, id);\r\n      super._transfer(_distributionPool, sender, rewards);\r\n    }\r\n\r\n    function cashoutAllNodes() external {\r\n      address sender = safeSender();\r\n      uint256 rewards = nodeManager._cashoutAllNodes(sender);\r\n      super._transfer(_distributionPool, sender, rewards);\r\n    }\r\n\r\n    function upgradeNode(uint256 id) external returns (bool) {\r\n      address sender = safeSender();\r\n      return nodeManager._upgradeNode(sender, id);\r\n    }\r\n\r\n    function upgradeAllNodes() external returns (uint256) {\r\n      address sender = safeSender();\r\n      return nodeManager._upgradeAllNodes(sender);\r\n    }\r\n\r\n    function claimUpgrade(uint256 id) external returns (bool) {\r\n      address sender = safeSender();\r\n      return nodeManager._claimUpgrade(sender, id);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n      swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function giveNode(address[] memory users, string memory name, uint256 nodeType) external onlyOwner {\r\n      for (uint256 i = 0; i < users.length; i++)\r\n        nodeManager._createNode(users[i], name, nodeType);\r\n    }\r\n\r\n    function getPriceOfNode(uint256 nodeTypeId) external view returns (uint256) {\r\n      return nodeManager._getPriceOfNode(nodeTypeId);\r\n    }\r\n\r\n    function setBoosterCode(string memory code) external {\r\n      address sender = safeSender();\r\n      nodeManager._setBoosterCode(sender, code);\r\n    }\r\n\r\n    function useBoosterCode(string memory code) external {\r\n      address sender = safeSender();\r\n      nodeManager._useBoosterCode(sender, code);\r\n      super._transfer(_distributionPool, sender, _boosterChildAmount);\r\n    }\r\n\r\n    function getClaimableUpgrades(address user) external view returns (uint256[] memory) {\r\n      return nodeManager._getClaimableUpgrades(user);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        nodeManager._updateGasForProcessing(newValue);\r\n    }\r\n\r\n    function updateClaimingTimestamp(uint256 newValue) external onlyOwner {\r\n        nodeManager._setClaimingTimestamp(newValue);\r\n    }\r\n\r\n    function updateMaxNodes(uint256 newValue) external onlyOwner {\r\n        nodeManager._setMaxNodes(newValue);\r\n    }\r\n\r\n    function getClaimingTimestamp() external view returns (uint256) {\r\n        return nodeManager._getClaimingTimestamp();\r\n    }\r\n\r\n    function getMaxNodes() external view returns (uint256) {\r\n        return nodeManager._getMaxNodes();\r\n    }\r\n\r\n    function getTotalEarned() external view returns (uint256) {\r\n        return nodeManager._getTotalEarned();\r\n    }\r\n\r\n    function setMinimumNodeUseRef(uint256 nodeId) external onlyOwner {\r\n      return nodeManager._setMinimumNodeUseRef(nodeId);\r\n    }\r\n\r\n    function setMinimumNodeSetRef(uint256 nodeId) external onlyOwner {\r\n      return nodeManager._setMinimumNodeSetRef(nodeId);\r\n    }\r\n\r\n    function setMaxAmountPerNode(uint256 amount) external onlyOwner {\r\n      return nodeManager._setMaxAmountPerNode(amount);\r\n    }\r\n\r\n    function getTotalCreatedNodes() external view returns (uint256) {\r\n        return nodeManager._getTotalCreatedNodes();\r\n    }\r\n\r\n    function getNodes(address user) external view returns (AngelNodeManager.Node[] memory) {\r\n      return nodeManager._getNodes(user);\r\n    }\r\n\r\n    function getNodeTypes() external onlyOwner view returns (AngelNodeManager.NodeType[] memory) {\r\n      return nodeManager._getNodeTypes();\r\n    }\r\n\r\n    function getBoosterDatas(address user) external view returns (AngelNodeManager.BoosterData memory) {\r\n      return nodeManager._getBoosterDatas(user);\r\n    }\r\n\r\n    function editNodeType(uint256 nodeTypeId, uint256 rewards, uint256 timeToUpgrade, uint256 typeUpgradeNode,\r\n                           uint256 price, bool buyable, bool upgradable, bool bonus) external onlyOwner {\r\n      nodeManager._editNodeType(nodeTypeId, rewards, timeToUpgrade, typeUpgradeNode, price, buyable, upgradable, bonus);\r\n    }\r\n\r\n    function addNodeType(uint256 rewards, uint256 timeToUpgrade, uint256 typeUpgradeNode,\r\n                           uint256 price, bool buyable, bool upgradable, bool bonus) external onlyOwner {\r\n      nodeManager._addNodeType(rewards, timeToUpgrade, typeUpgradeNode, price, buyable, upgradable, bonus);\r\n    }\r\n\r\n    function disableNodeType(uint256 id) external onlyOwner {\r\n      nodeManager._disableNodeType(id);\r\n    }\r\n\r\n    function enableNodeType(uint256 id) external onlyOwner {\r\n      nodeManager._enableNodeType(id);\r\n    }\r\n\r\n    function processDistribution() external onlyOwner {\r\n      nodeManager._processDistribution();\r\n    }\r\n\r\n    /*\r\n     * Utils\r\n     */\r\n    function safeSender() private view returns (address) {\r\n      address sender = _msgSender();\r\n\r\n      require(sender != address(0), \"Cannot cashout from the zero address\");\r\n      require(!_isBlacklisted[sender], \"Blacklisted address\");\r\n\r\n      return sender;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n      address[] memory path = new address[](2);\r\n      path[0] = address(this);\r\n      path[1] = uniswapV2Router.WETH();\r\n\r\n      _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n      uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n    }\r\n\r\n    function swapAndSendToFee(address destination, uint256 tokens) private {\r\n      uint256 initialETHBalance = address(this).balance;\r\n\r\n      swapTokensForEth(tokens);\r\n      uint256 newBalance = (address(this).balance).sub(initialETHBalance);\r\n\r\n      payable(destination).transfer(newBalance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n      uint256 half = tokens.div(2);\r\n      uint256 otherHalf = tokens.sub(half);\r\n\r\n      uint256 initialBalance = address(this).balance;\r\n\r\n      // Swaping the half\r\n      swapTokensForEth(half);\r\n      uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n      // Approving and adding liquidity\r\n      _approve(address(this), address(uniswapV2Router), tokens);\r\n      uniswapV2Router.addLiquidityETH{value: newBalance}(\r\n        address(this),\r\n        tokens,\r\n        0,\r\n        0,\r\n        address(0),\r\n        block.timestamp\r\n      );\r\n\r\n      emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function setFuturUsePool(address payable wallet) external onlyOwner {\r\n       _futurUsePool = wallet;\r\n    }\r\n\r\n    function setDistributionPool(address payable wallet) external onlyOwner {\r\n       _distributionPool = wallet;\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner {\r\n      _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function setFuturUseSellFee(uint256 value) external onlyOwner {\r\n      _futurUseSellFee = value;\r\n    }\r\n\r\n    function setBurnSellFee(uint256 value) external onlyOwner {\r\n      _burnSellFee = value;\r\n    }\r\n\r\n    function setFuturUseNodeFee(uint256 value) external onlyOwner {\r\n      _futurUseNodeFee = value;\r\n    }\r\n\r\n    function setLiquidityPoolFee(uint256 value) external onlyOwner {\r\n      _liquidityPoolFee = value;\r\n    }\r\n\r\n    function setDistributionSwapFee(uint256 value) external onlyOwner {\r\n      _distributionSwapFee = value;\r\n    }\r\n\r\n    function setPairAddress(address pair) external onlyOwner {\r\n        uniswapV2Pair = pair;\r\n    }\r\n\r\n    function setBoosterChildAmount(uint256 value) external onlyOwner {\r\n      _boosterChildAmount = value;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n      return _isExcludedFromFees[account];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_boosterChildAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_distributionSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_futurUseNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_futurUsePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_futurUseSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToUpgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeUpgradeNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"upgradable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"name\":\"addNodeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nodeType\",\"type\":\"uint256\"}],\"name\":\"buyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAllNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cashoutNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"disableNodeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToUpgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeUpgradeNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"upgradable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"name\":\"editNodeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"enableNodeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBoosterDatas\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"boosterChilds\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"boosterGodFather\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"boosterCode\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"boosterCodeSetup\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"boosterCodeUsed\",\"type\":\"bool\"}],\"internalType\":\"struct AngelNodeManager.BoosterData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableUpgrades\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToUpgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeUpgradeNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"upgradable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"internalType\":\"struct AngelNodeManager.NodeType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nodeType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"upgrading\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"angelUpgradeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct AngelNodeManager.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeTypeId\",\"type\":\"uint256\"}],\"name\":\"getPriceOfNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCreatedNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nodeType\",\"type\":\"uint256\"}],\"name\":\"giveNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBoosterChildAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"setBoosterCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBurnSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDistributionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDistributionSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFuturUseNodeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFuturUsePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFuturUseSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLiquidityPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountPerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"setMinimumNodeSetRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"setMinimumNodeUseRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateClaimingTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeAllNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"upgradeNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"useBoosterCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Angel", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:32c03f2a3ce2742b6e81dc09fc609a9bb8f48fac", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b04dcecbc0ec4896a513ff808e65ad13b1717b6bb99947bf87a3ffef4e6b51c"}