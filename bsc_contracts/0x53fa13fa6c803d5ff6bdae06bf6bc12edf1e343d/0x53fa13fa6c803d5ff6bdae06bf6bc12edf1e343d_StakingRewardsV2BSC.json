{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingRewardsV2BSC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"./StakingLockableBSC.sol\\\";\\nimport \\\"../interfaces/IMigrationReceiver.sol\\\";\\n\\n/// @author  umb.network\\ncontract StakingRewardsV2BSC is StakingLockableBSC {\\n    constructor(\\n        address _owner,\\n        address _rewardsDistribution,\\n        address _umb,\\n        address _rUmb1,\\n        address _rUmb2\\n    ) StakingLockableBSC(_owner, _rewardsDistribution, _umb, _rUmb1, _rUmb2) {}\\n\\n    /// @param _newPool address of new pool, where tokens will be staked\\n    /// @param _data additional data for new pool\\n    function getRewardAndMigrate(IMigrationReceiver _newPool, bytes calldata _data) external {\\n        uint256 reward = _getReward(msg.sender, address(_newPool));\\n        _newPool.migrateTokenCallback(rUmb2, msg.sender, reward, _data);\\n    }\\n\\n    /// @param _newPool address of new pool, where tokens will be staked\\n    /// @param _amount amount of staked tokens to migrate to new pool\\n    /// @param _data additional data for new pool\\n    function withdrawAndMigrate(IMigrationReceiver _newPool, uint256 _amount, bytes calldata _data) external {\\n        _withdraw(_amount, msg.sender, address(_newPool));\\n        _newPool.migrateTokenCallback(umb, msg.sender, _amount, _data);\\n    }\\n\\n    function unlockAndMigrate(IMigrationReceiver _newPool, uint256[] calldata _ids, bytes calldata _data) external {\\n        (address token, uint256 totalRawAmount) = _unlockTokensFor(msg.sender, _ids, address(_newPool));\\n        _newPool.migrateTokenCallback(token, msg.sender, totalRawAmount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/StakingLockableBSC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"./StakingLockable.sol\\\";\\n\\n/// @author  umb.network\\n/// @notice Math is based on synthetix staking contract\\n///         Contract allows to stake and lock tokens. For rUMB tokens only locking option is available.\\n///         When locking user choose period and based on period multiplier is apply to the amount (boost).\\n///         If pool is set for rUMB1->rUMB2, (rUmbPool) then rUMB2 can be locked as well\\ncontract StakingLockableBSC is StakingLockable {\\n    bool public swapStarted;\\n\\n    constructor(\\n        address _owner,\\n        address _rewardsDistribution,\\n        address _umb,\\n        address _rUmb1,\\n        address _rUmb2\\n    ) StakingLockable(_owner, _rewardsDistribution, _umb, _rUmb1, _rUmb2) {}\\n\\n    function setSwapStarted(bool _start) external onlyOwner {\\n        swapStarted = _start;\\n    }\\n\\n    function isSwapStarted() public view override returns (bool) {\\n        return swapStarted;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrationReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.5 <0.9.0;\\n\\n/// @dev when modifying this contract, please copy all to MigrationPoolsV8\\ninterface IMigrationReceiver {\\n\\n    /// @dev should use onlyPool modifier\\n    ///         this method is responsible for \\\"accepting\\\" tokens from other pool to our\\n    function migrateTokenCallback(address _token, address _user, uint256 _amount, bytes calldata _data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/StakingLockable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// Inheritance\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/Pausable.sol\\\";\\nimport \\\"../interfaces/IBurnableToken.sol\\\";\\nimport \\\"../interfaces/RewardsDistributionRecipient.sol\\\";\\nimport \\\"../interfaces/OnDemandToken.sol\\\";\\nimport \\\"../interfaces/LockSettings.sol\\\";\\nimport \\\"../interfaces/SwappableTokenV2.sol\\\";\\n\\n/// @author  umb.network\\n/// @notice Math is based on synthetix staking contract\\n///         Contract allows to stake and lock tokens. For rUMB tokens only locking option is available.\\n///         When locking user choose period and based on period multiplier is apply to the amount (boost).\\n///         If pool is set for rUMB1->rUMB2, (rUmbPool) then rUMB2 can be locked as well\\ncontract StakingLockable is LockSettings, RewardsDistributionRecipient, ReentrancyGuard, Pausable {\\n    struct Times {\\n        uint32 periodFinish;\\n        uint32 rewardsDuration;\\n        uint32 lastUpdateTime;\\n        uint96 totalRewardsSupply;\\n    }\\n\\n    struct Balance {\\n        // total supply of UMB = 500_000_000e18, it can be saved using 89bits, so we good with 96 and above\\n        // user UMB balance\\n        uint96 umbBalance;\\n        // amount locked + virtual balance generated using multiplier when locking\\n        uint96 lockedWithBonus;\\n        uint32 nextLockIndex;\\n        uint160 userRewardPerTokenPaid;\\n        uint96 rewards;\\n    }\\n\\n    struct Supply {\\n        // staked + raw locked\\n        uint128 totalBalance;\\n        // virtual balance\\n        uint128 totalBonus;\\n    }\\n\\n    struct Lock {\\n        uint8 tokenId;\\n        // total supply of UMB can be saved using 89bits, so we good with 96 and above\\n        uint120 amount;\\n        uint32 lockDate;\\n        uint32 unlockDate;\\n        uint32 multiplier;\\n        uint32 withdrawnAt;\\n    }\\n\\n    uint8 public constant UMB_ID = 2 ** 0;\\n    uint8 public constant RUMB1_ID = 2 ** 1;\\n    uint8 public constant RUMB2_ID = 2 ** 2;\\n\\n    uint256 public immutable maxEverTotalRewards;\\n\\n    address public immutable umb;\\n    address public immutable rUmb1;\\n    /// @dev this is reward token but we also allow to lock it\\n    address public immutable rUmb2;\\n\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardPerTokenStored;\\n\\n    Supply public totalSupply;\\n\\n    Times public timeData;\\n\\n    /// @dev user => Balance\\n    mapping(address => Balance) public balances;\\n\\n    /// @dev user => lock ID => Lock\\n    mapping(address => mapping(uint256 => Lock)) public locks;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount, uint256 bonus);\\n\\n    event LockedTokens(\\n        address indexed user,\\n        address indexed token,\\n        uint256 lockId,\\n        uint256 amount,\\n        uint256 period,\\n        uint256 multiplier\\n    );\\n\\n    event UnlockedTokens(address indexed user, address indexed token, uint256 lockId, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event FarmingFinished();\\n    event Swap1to2(uint256 swapped);\\n\\n    modifier updateReward(address _account) virtual {\\n        uint256 newRewardPerTokenStored = rewardPerToken();\\n        rewardPerTokenStored = newRewardPerTokenStored;\\n        timeData.lastUpdateTime = uint32(lastTimeRewardApplicable());\\n\\n        if (_account != address(0)) {\\n            balances[_account].rewards = uint96(earned(_account));\\n            balances[_account].userRewardPerTokenPaid = uint160(newRewardPerTokenStored);\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _rewardsDistribution,\\n        address _umb,\\n        address _rUmb1,\\n        address _rUmb2\\n    ) Owned(_owner) {\\n        require(\\n            (\\n                MintableToken(_umb).maxAllowedTotalSupply() +\\n                MintableToken(_rUmb1).maxAllowedTotalSupply() +\\n                MintableToken(_rUmb2).maxAllowedTotalSupply()\\n            ) * MAX_MULTIPLIER / RATE_DECIMALS <= type(uint96).max,\\n            \\\"staking overflow\\\"\\n        );\\n\\n        require(\\n            MintableToken(_rUmb2).maxAllowedTotalSupply() * MAX_MULTIPLIER / RATE_DECIMALS <= type(uint96).max,\\n            \\\"rewards overflow\\\"\\n        );\\n\\n        require(OnDemandToken(_rUmb2).ON_DEMAND_TOKEN(), \\\"rewardsToken must be OnDemandToken\\\");\\n\\n        umb = _umb;\\n        rUmb1 = _rUmb1;\\n        rUmb2 = _rUmb2;\\n\\n        rewardsDistribution = _rewardsDistribution;\\n        timeData.rewardsDuration = 2592000; // 30 days\\n        maxEverTotalRewards = MintableToken(_rUmb2).maxAllowedTotalSupply();\\n    }\\n\\n    function lockTokens(address _token, uint256 _amount, uint256 _period) external {\\n        if (_token == rUmb2 && !isSwapStarted()) {\\n            revert(\\\"locking rUMB2 not available yet\\\");\\n        }\\n\\n        _lockTokens(msg.sender, _token, _amount, _period);\\n    }\\n\\n    function unlockTokens(uint256[] calldata _ids) external {\\n        _unlockTokensFor(msg.sender, _ids, msg.sender);\\n    }\\n\\n    function restart(uint256 _rewardsDuration, uint256 _reward) external {\\n        setRewardsDuration(_rewardsDuration);\\n        notifyRewardAmount(_reward);\\n    }\\n\\n    // when farming was started with 1y and 12tokens\\n    // and we want to finish after 4 months, we need to end up with situation\\n    // like we were starting with 4mo and 4 tokens.\\n    function finishFarming() external onlyOwner {\\n        Times memory t = timeData;\\n        require(block.timestamp < t.periodFinish, \\\"can't stop if not started or already finished\\\");\\n\\n        if (totalSupply.totalBalance != 0) {\\n            uint32 remaining = uint32(t.periodFinish - block.timestamp);\\n            timeData.rewardsDuration = t.rewardsDuration - remaining;\\n        }\\n\\n        timeData.periodFinish = uint32(block.timestamp);\\n\\n        emit FarmingFinished();\\n    }\\n\\n    /// @notice one of the reasons this method can throw is, when we swap for UMB and somebody stake rUMB1 after that.\\n    ///         In that case execution of `swapForUMB()` is required (anyone can execute this method) before proceeding.\\n    function exit() external {\\n        _withdraw(type(uint256).max, msg.sender, msg.sender);\\n        _getReward(msg.sender, msg.sender);\\n    }\\n\\n    /// @notice one of the reasons this method can throw is, when we swap for UMB and somebody stake rUMB1 after that.\\n    ///         In that case execution of `swapForUMB()` is required (anyone can execute this method) before proceeding.\\n    function exitAndUnlock(uint256[] calldata _lockIds) external {\\n        _withdraw(type(uint256).max, msg.sender, msg.sender);\\n        _unlockTokensFor(msg.sender, _lockIds, msg.sender);\\n        _getReward(msg.sender, msg.sender);\\n    }\\n\\n    function stake(uint256 _amount) external {\\n        _stake(umb, msg.sender, _amount, 0);\\n    }\\n\\n    function getReward() external {\\n        _getReward(msg.sender, msg.sender);\\n    }\\n\\n    function swap1to2() public {\\n        if (!isSwapStarted()) return;\\n\\n        uint256 myBalance = IERC20(rUmb1).balanceOf(address(this));\\n        if (myBalance == 0) return;\\n\\n        IBurnableToken(rUmb1).burn(myBalance);\\n        OnDemandToken(rUmb2).mint(address(this), myBalance);\\n\\n        emit Swap1to2(myBalance);\\n    }\\n\\n    /// @dev when notifying about amount, we don't have to mint or send any tokens, reward tokens will be mint on demand\\n    ///         this method is used to restart staking\\n    function notifyRewardAmount(\\n        uint256 _reward\\n    ) override public onlyRewardsDistribution updateReward(address(0)) {\\n        // this method can be executed on its own as well, I'm including here to not need to remember about it\\n        swap1to2();\\n\\n        Times memory t = timeData;\\n        uint256 newRewardRate;\\n\\n        if (block.timestamp >= t.periodFinish) {\\n            newRewardRate = _reward / t.rewardsDuration;\\n        } else {\\n            uint256 remaining = t.periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            newRewardRate = (_reward + leftover) / t.rewardsDuration;\\n        }\\n\\n        require(newRewardRate != 0, \\\"invalid rewardRate\\\");\\n\\n        rewardRate = newRewardRate;\\n\\n        // always increasing by _reward even if notification is in a middle of period\\n        // because leftover is included\\n        uint256 totalRewardsSupply = timeData.totalRewardsSupply + _reward;\\n        require(totalRewardsSupply <= maxEverTotalRewards, \\\"rewards overflow\\\");\\n\\n        timeData.totalRewardsSupply = uint96(totalRewardsSupply);\\n        timeData.lastUpdateTime = uint32(block.timestamp);\\n        timeData.periodFinish = uint32(block.timestamp + t.rewardsDuration);\\n\\n        emit RewardAdded(_reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) public onlyRewardsDistribution {\\n        require(_rewardsDuration != 0, \\\"empty _rewardsDuration\\\");\\n\\n        require(\\n            block.timestamp > timeData.periodFinish,\\n            \\\"Previous period must be complete before changing the duration\\\"\\n        );\\n\\n        timeData.rewardsDuration = uint32(_rewardsDuration);\\n        emit RewardsDurationUpdated(_rewardsDuration);\\n    }\\n\\n    /// @notice one of the reasons this method can throw is, when we swap for UMB and somebody stake rUMB1 after that.\\n    ///         In that case execution of `swapForUMB()` is required (anyone can execute this method) before proceeding.\\n    function withdraw(uint256 _amount) public {\\n        _withdraw(_amount, msg.sender, msg.sender);\\n    }\\n\\n    function isSwapStarted() public view virtual returns (bool) {\\n        return SwappableTokenV2(rUmb2).isSwapStarted();\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 periodFinish = timeData.periodFinish;\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256 perToken) {\\n        Supply memory s = totalSupply;\\n\\n        if (s.totalBalance == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        perToken = rewardPerTokenStored + (\\n            (lastTimeRewardApplicable() - timeData.lastUpdateTime) * rewardRate * 1e18 / (s.totalBalance + s.totalBonus)\\n        );\\n    }\\n\\n    function earned(address _account) virtual public view returns (uint256) {\\n        Balance memory b = balances[_account];\\n        uint256 totalBalance = b.umbBalance + b.lockedWithBonus;\\n        return (totalBalance * (rewardPerToken() - b.userRewardPerTokenPaid) / 1e18) + b.rewards;\\n    }\\n\\n    function calculateBonus(uint256 _amount, uint256 _multiplier) public pure returns (uint256 bonus) {\\n        if (_multiplier <= RATE_DECIMALS) return 0;\\n\\n        bonus = _amount * _multiplier / RATE_DECIMALS - _amount;\\n    }\\n\\n    /// @param _token token that we allow to stake, validator check should be do outside\\n    /// @param _user token owner\\n    /// @param _amount amount\\n    /// @param _bonus if bonus is 0, means we are staking, bonus > 0 means this is locking\\n    function _stake(address _token, address _user, uint256 _amount, uint256 _bonus)\\n        internal\\n        nonReentrant\\n        notPaused\\n        updateReward(_user)\\n    {\\n        uint256 amountWithBonus = _amount + _bonus;\\n\\n        require(timeData.periodFinish > block.timestamp, \\\"Stake period not started yet\\\");\\n        require(amountWithBonus != 0, \\\"Cannot stake 0\\\");\\n\\n        // TODO check if we ever need to separate balance and bonuses\\n        totalSupply.totalBalance += uint96(_amount);\\n        totalSupply.totalBonus += uint128(_bonus);\\n\\n        if (_bonus == 0) {\\n            balances[_user].umbBalance += uint96(_amount);\\n        } else {\\n            balances[_user].lockedWithBonus += uint96(amountWithBonus);\\n        }\\n\\n        // not using safe transfer, because we working with trusted tokens\\n        require(IERC20(_token).transferFrom(_user, address(this), _amount), \\\"token transfer failed\\\");\\n\\n        emit Staked(_user, _amount, _bonus);\\n    }\\n\\n    function _lockTokens(address _user, address _token, uint256 _amount, uint256 _period) internal notPaused {\\n        uint256 multiplier = multipliers[_token][_period];\\n        require(multiplier != 0, \\\"invalid period or not supported token\\\");\\n\\n        uint256 stakeBonus = calculateBonus(_amount, multiplier);\\n\\n        _stake(_token, _user, _amount, stakeBonus);\\n        _addLock(_user, _token, _amount, _period, multiplier);\\n    }\\n\\n    function _addLock(address _user, address _token, uint256 _amount, uint256 _period, uint256 _multiplier) internal {\\n        uint256 newIndex = balances[_user].nextLockIndex;\\n        if (newIndex == type(uint32).max) revert(\\\"nextLockIndex overflow\\\");\\n\\n        balances[_user].nextLockIndex = uint32(newIndex + 1);\\n\\n        Lock storage lock = locks[_user][newIndex];\\n\\n        lock.amount = uint120(_amount);\\n        lock.multiplier = uint32(_multiplier);\\n        lock.lockDate = uint32(block.timestamp);\\n        lock.unlockDate = uint32(block.timestamp + _period);\\n\\n        if (_token == rUmb2) lock.tokenId = RUMB2_ID;\\n        else if (_token == rUmb1) lock.tokenId = RUMB1_ID;\\n        else lock.tokenId = UMB_ID;\\n\\n        emit LockedTokens(_user, _token, newIndex, _amount, _period, _multiplier);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _unlockTokensFor(address _user, uint256[] calldata _indexes, address _recipient)\\n        internal\\n        returns (address token, uint256 totalRawAmount)\\n    {\\n        uint256 totalBonus;\\n        uint256 acceptedTokenId;\\n        bool swapPossible = isSwapStarted();\\n\\n        for (uint256 i; i < _indexes.length; i++) {\\n            (uint256 amount, uint256 bonus, uint256 tokenId) = _markAsUnlocked(_user, _indexes[i]);\\n            if (amount == 0) continue;\\n\\n            if (acceptedTokenId == 0) {\\n                acceptedTokenId = tokenId;\\n                token = _idToToken(tokenId);\\n\\n                // if token is already rUmb2 means swap started already\\n\\n                if (token == rUmb1 && swapPossible) {\\n                    token = rUmb2;\\n                    acceptedTokenId = RUMB2_ID;\\n                }\\n            } else if (acceptedTokenId != tokenId) {\\n                if (acceptedTokenId == RUMB2_ID && tokenId == RUMB1_ID) {\\n                    // this lock is for rUMB1 but swap 1->2 is started so we unlock as rUMB2\\n                } else revert(\\\"batch unlock possible only for the same tokens\\\");\\n            }\\n\\n            emit UnlockedTokens(_user, token, _indexes[i], amount);\\n\\n            totalRawAmount += amount;\\n            totalBonus += bonus;\\n        }\\n\\n        if (totalRawAmount == 0) revert(\\\"nothing to unlock\\\");\\n        _withdrawUnlockedTokens(_user, token, _recipient, totalRawAmount, totalBonus);\\n    }\\n\\n    function _withdrawUnlockedTokens(\\n        address _user,\\n        address _token,\\n        address _recipient,\\n        uint256 _totalRawAmount,\\n        uint256 _totalBonus\\n    )\\n        internal\\n    {\\n        uint256 amountWithBonus = _totalRawAmount + _totalBonus;\\n\\n        balances[_user].lockedWithBonus -= uint96(amountWithBonus);\\n\\n        totalSupply.totalBalance -= uint96(_totalRawAmount);\\n        totalSupply.totalBonus -= uint128(_totalBonus);\\n\\n        // note: there is one case when this transfer can fail:\\n        // when swap is started by we did not swap rUmb1 -> rUmb2,\\n        // in that case we have to execute `swap1to2`\\n        // to save gas I'm not including it here, because it is unlikely case\\n        require(IERC20(_token).transfer(_recipient, _totalRawAmount), \\\"withdraw unlocking failed\\\");\\n    }\\n\\n    function _markAsUnlocked(address _user, uint256 _index)\\n        internal\\n        returns (uint256 amount, uint256 bonus, uint256 tokenId)\\n    {\\n        // TODO will storage save gas?\\n        Lock memory lock = locks[_user][_index];\\n\\n        if (lock.withdrawnAt != 0) revert(\\\"DepositAlreadyWithdrawn\\\");\\n        if (block.timestamp < lock.unlockDate) revert(\\\"DepositLocked\\\");\\n\\n        if (lock.amount == 0) return (0, 0, 0);\\n\\n        locks[_user][_index].withdrawnAt = uint32(block.timestamp);\\n\\n        return (lock.amount, calculateBonus(lock.amount, lock.multiplier), lock.tokenId);\\n    }\\n\\n    /// @param _amount tokens to withdraw\\n    /// @param _user address\\n    /// @param _recipient address, where to send tokens, if we migrating token address can be zero\\n    function _withdraw(uint256 _amount, address _user, address _recipient) internal nonReentrant updateReward(_user) {\\n        Balance memory balance = balances[_user];\\n\\n        if (_amount == type(uint256).max) _amount = balance.umbBalance;\\n        else require(balance.umbBalance >= _amount, \\\"withdraw amount to high\\\");\\n\\n        if (_amount == 0) return;\\n\\n        // not using safe math, because there is no way to overflow because of above check\\n        totalSupply.totalBalance -= uint120(_amount);\\n        balances[_user].umbBalance = uint96(balance.umbBalance - _amount);\\n\\n        // not using safe transfer, because we working with trusted tokens\\n        require(IERC20(umb).transfer(_recipient, _amount), \\\"token transfer failed\\\");\\n\\n        emit Withdrawn(_user, _amount);\\n    }\\n\\n    /// @param _user address\\n    /// @param _recipient address, where to send reward\\n    function _getReward(address _user, address _recipient)\\n        internal\\n        nonReentrant\\n        updateReward(_user)\\n        returns (uint256 reward)\\n    {\\n        reward = balances[_user].rewards;\\n\\n        if (reward != 0) {\\n            balances[_user].rewards = 0;\\n            OnDemandToken(address(rUmb2)).mint(_recipient, reward);\\n            emit RewardPaid(_user, reward);\\n        }\\n    }\\n\\n    function _idToToken(uint256 _tokenId) internal view returns (address token) {\\n        if (_tokenId == RUMB2_ID) token = rUmb2;\\n        else if (_tokenId == RUMB1_ID) token = rUmb1;\\n        else if (_tokenId == UMB_ID) token = umb;\\n        else return address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n\\ninterface IStakingRewards {\\n    // Mutative\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Pausable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\n\\nabstract contract Pausable is Owned {\\n    bool public paused;\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner() != address(0), \\\"Owner must be set\\\");\\n        // Paused will be false\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurnableToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IBurnableToken {\\n    function burn(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/RewardsDistributionRecipient.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\n\\n// https://docs.synthetix.io/contracts/RewardsDistributionRecipient\\nabstract contract RewardsDistributionRecipient is Owned {\\n    address public rewardsDistribution;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"Caller is not RewardsDistributor\\\");\\n        _;\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) virtual external;\\n\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/OnDemandToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"./MintableToken.sol\\\";\\n\\nabstract contract OnDemandToken is MintableToken {\\n    bool constant public ON_DEMAND_TOKEN = true;\\n\\n    mapping (address => bool) public minters;\\n\\n    event SetupMinter(address minter, bool active);\\n\\n    modifier onlyOwnerOrMinter() {\\n        address msgSender = _msgSender();\\n        require(owner() == msgSender || minters[msgSender], \\\"access denied\\\");\\n\\n        _;\\n    }\\n\\n    function setupMinter(address _minter, bool _active) external onlyOwner() {\\n        minters[_minter] = _active;\\n        emit SetupMinter(_minter, _active);\\n    }\\n\\n    function setupMinters(address[] calldata _minters, bool[] calldata _actives) external onlyOwner() {\\n        for (uint256 i; i < _minters.length; i++) {\\n            minters[_minters[i]] = _actives[i];\\n            emit SetupMinter(_minters[i], _actives[i]);\\n        }\\n    }\\n\\n    function mint(address _holder, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyOwnerOrMinter()\\n        assertMaxSupply(_amount)\\n    {\\n        require(_amount != 0, \\\"zero amount\\\");\\n\\n        _mint(_holder, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/LockSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract LockSettings is Ownable {\\n    /// @dev decimals for: baseRate, APY, multipliers\\n    ///         eg for baseRate: 1e6 is 1%, 50e6 is 50%\\n    ///         eg for multipliers: 1e6 is 1.0x, 3210000 is 3.21x\\n    uint256 public constant RATE_DECIMALS = 10 ** 6;\\n    uint256 public constant MAX_MULTIPLIER = 5 * RATE_DECIMALS;\\n\\n    /// @notice token => period => multiplier\\n    mapping(address => mapping(uint256 => uint256)) public multipliers;\\n\\n    /// @notice token => period => index in periods array\\n    mapping(address => mapping(uint256 => uint256)) public periodIndexes;\\n\\n    /// @notice token => periods\\n    mapping(address => uint256[]) public periods;\\n\\n    event TokenSettings(address indexed token, uint256 period, uint256 multiplier);\\n\\n    function removePeriods(address _token, uint256[] calldata _periods) external onlyOwner {\\n        for (uint256 i; i < _periods.length; i++) {\\n            if (_periods[i] == 0) revert(\\\"InvalidSettings\\\");\\n\\n            multipliers[_token][_periods[i]] = 0;\\n            _removePeriod(_token, _periods[i]);\\n\\n            emit TokenSettings(_token, _periods[i], 0);\\n        }\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function setLockingTokenSettings(address _token, uint256[] calldata _periods, uint256[] calldata _multipliers)\\n        external\\n        onlyOwner\\n    {\\n        if (_periods.length == 0) revert(\\\"EmptyPeriods\\\");\\n        if (_periods.length != _multipliers.length) revert(\\\"ArraysNotMatch\\\");\\n\\n        for (uint256 i; i < _periods.length; i++) {\\n            if (_periods[i] == 0) revert(\\\"InvalidSettings\\\");\\n            if (_multipliers[i] < RATE_DECIMALS) revert(\\\"multiplier must be >= 1e6\\\");\\n            if (_multipliers[i] > MAX_MULTIPLIER) revert(\\\"multiplier overflow\\\");\\n\\n            multipliers[_token][_periods[i]] = _multipliers[i];\\n            emit TokenSettings(_token, _periods[i], _multipliers[i]);\\n\\n            if (_multipliers[i] == 0) _removePeriod(_token, _periods[i]);\\n            else _addPeriod(_token, _periods[i]);\\n        }\\n    }\\n\\n    function periodsCount(address _token) external view returns (uint256) {\\n        return periods[_token].length;\\n    }\\n\\n    function getPeriods(address _token) external view returns (uint256[] memory) {\\n        return periods[_token];\\n    }\\n\\n    function _addPeriod(address _token, uint256 _period) internal {\\n        uint256 key = periodIndexes[_token][_period];\\n        if (key != 0) return;\\n\\n        periods[_token].push(_period);\\n        // periodIndexes are starting from 1, not from 0\\n        periodIndexes[_token][_period] = periods[_token].length;\\n    }\\n\\n    function _removePeriod(address _token, uint256 _period) internal {\\n        uint256 key = periodIndexes[_token][_period];\\n        if (key == 0) return;\\n\\n        periods[_token][key - 1] = periods[_token][periods[_token].length - 1];\\n        periodIndexes[_token][_period] = 0;\\n        periods[_token].pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/SwappableTokenV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/Owned.sol\\\";\\nimport \\\"../interfaces/ISwapReceiver.sol\\\";\\n\\n\\n/// @title   Umbrella Rewards contract V2\\n/// @author  umb.network\\n/// @notice  This contract serves Swap functionality for rewards tokens\\n/// @dev     It allows to swap itself for other token (main UMB token).\\nabstract contract SwappableTokenV2 is Owned, ERC20 {\\n    struct SwapData {\\n        // number of tokens swapped so far (no decimals)\\n        uint32 swappedSoFar;\\n        // used limit since last swap (no decimals)\\n        uint32 usedLimit;\\n        // daily cup (no decimals)\\n        uint32 dailyCup;\\n        uint32 dailyCupTimestamp;\\n        uint32 swapEnabledAt;\\n    }\\n\\n    uint256 public constant ONE = 1e18;\\n\\n    uint256 public immutable swapStartsOn;\\n    ISwapReceiver public immutable umb;\\n\\n    SwapData public swapData;\\n\\n    event LogStartEarlySwapNow(uint time);\\n    event LogSwap(address indexed swappedTo, uint amount);\\n    event LogDailyCup(uint newCup);\\n\\n    constructor(address _umb, uint32 _swapStartsOn, uint32 _dailyCup) {\\n        require(_dailyCup != 0, \\\"invalid dailyCup\\\");\\n        require(_swapStartsOn > block.timestamp, \\\"invalid swapStartsOn\\\");\\n        require(ERC20(_umb).decimals() == 18, \\\"invalid UMB token\\\");\\n\\n        swapStartsOn = _swapStartsOn;\\n        umb = ISwapReceiver(_umb);\\n        swapData.dailyCup = _dailyCup;\\n    }\\n\\n    function swapForUMB() external {\\n        SwapData memory data = swapData;\\n\\n        (uint256 limit, bool fullLimit) = _currentLimit(data);\\n        require(limit != 0, \\\"swapping period not started OR limit\\\");\\n\\n        uint256 amountToSwap = balanceOf(msg.sender);\\n        require(amountToSwap != 0, \\\"you dont have tokens to swap\\\");\\n\\n        uint32 amountWoDecimals = uint32(amountToSwap / ONE);\\n        require(amountWoDecimals <= limit, \\\"daily CUP limit\\\");\\n\\n        swapData.usedLimit = uint32(fullLimit ? amountWoDecimals : data.usedLimit + amountWoDecimals);\\n        swapData.swappedSoFar += amountWoDecimals;\\n        if (fullLimit) swapData.dailyCupTimestamp = uint32(block.timestamp);\\n\\n        _burn(msg.sender, amountToSwap);\\n        umb.swapMint(msg.sender, amountToSwap);\\n\\n        emit LogSwap(msg.sender, amountToSwap);\\n    }\\n\\n    function startEarlySwap() external onlyOwner {\\n        require(block.timestamp < swapStartsOn, \\\"swap is already allowed\\\");\\n        require(swapData.swapEnabledAt == 0, \\\"swap was already enabled\\\");\\n\\n        swapData.swapEnabledAt = uint32(block.timestamp);\\n        emit LogStartEarlySwapNow(block.timestamp);\\n    }\\n\\n    /// @param _cup daily cup limit (no decimals), eg. if cup=5 means it is 5 * 10^18 tokens\\n    function setDailyCup(uint32 _cup) external onlyOwner {\\n        swapData.dailyCup = _cup;\\n        emit LogDailyCup(_cup);\\n    }\\n\\n    function isSwapStarted() external view returns (bool) {\\n        // will it save gas if I do 2x if??\\n        return block.timestamp >= swapStartsOn || swapData.swapEnabledAt != 0;\\n    }\\n\\n    function canSwapTokens(address _address) external view returns (bool) {\\n        uint256 balance = balanceOf(_address);\\n        if (balance == 0) return false;\\n\\n        (uint256 limit,) = _currentLimit(swapData);\\n        return balance / ONE <= limit;\\n    }\\n\\n    function currentLimit() external view returns (uint256 limit) {\\n        (limit,) = _currentLimit(swapData);\\n        limit *= ONE;\\n    }\\n\\n    function _currentLimit(SwapData memory data) internal view returns (uint256 limit, bool fullLimit) {\\n        if (block.timestamp < swapStartsOn && data.swapEnabledAt == 0) return (0, false);\\n\\n        fullLimit = block.timestamp - data.dailyCupTimestamp >= 24 hours;\\n        limit = fullLimit ? data.dailyCup : data.dailyCup - data.usedLimit;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Owned.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Owned is Ownable {\\n    constructor(address _owner) {\\n        transferOwnership(_owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MintableToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/Owned.sol\\\";\\nimport \\\"../interfaces/IBurnableToken.sol\\\";\\n\\n/// @author  umb.network\\nabstract contract MintableToken is Owned, ERC20, IBurnableToken {\\n    uint256 public immutable maxAllowedTotalSupply;\\n    uint256 public everMinted;\\n\\n    modifier assertMaxSupply(uint256 _amountToMint) {\\n        _assertMaxSupply(_amountToMint);\\n        _;\\n    }\\n\\n    // ========== CONSTRUCTOR ========== //\\n\\n    constructor (uint256 _maxAllowedTotalSupply) {\\n        require(_maxAllowedTotalSupply != 0, \\\"_maxAllowedTotalSupply is empty\\\");\\n\\n        maxAllowedTotalSupply = _maxAllowedTotalSupply;\\n    }\\n\\n    // ========== MUTATIVE FUNCTIONS ========== //\\n\\n    function burn(uint256 _amount) override external {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    // ========== RESTRICTED FUNCTIONS ========== //\\n\\n    function mint(address _holder, uint256 _amount)\\n        virtual\\n        external\\n        onlyOwner()\\n        assertMaxSupply(_amount)\\n    {\\n        require(_amount != 0, \\\"zero amount\\\");\\n\\n        _mint(_holder, _amount);\\n    }\\n\\n    function _assertMaxSupply(uint256 _amountToMint) internal {\\n        uint256 everMintedTotal = everMinted + _amountToMint;\\n        everMinted = everMintedTotal;\\n        require(everMintedTotal <= maxAllowedTotalSupply, \\\"total supply limit exceeded\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface ISwapReceiver {\\n    function swapMint(address _holder, uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_umb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rUmb1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rUmb2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FarmingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"LockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"}],\"name\":\"Swap1to2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"TokenSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUMB1_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUMB2_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UMB_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"umbBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"lockedWithBonus\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"nextLockIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"rewards\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"calculateBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lockIds\",\"type\":\"uint256[]\"}],\"name\":\"exitAndUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPeriods\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrationReceiver\",\"name\":\"_newPool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getRewardAndMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"},{\"internalType\":\"uint32\",\"name\":\"lockDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawnAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEverTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"periodsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rUmb1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rUmb2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"removePeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"restart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"}],\"name\":\"setLockingTokenSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_start\",\"type\":\"bool\"}],\"name\":\"setSwapStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap1to2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"totalRewardsSupply\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBonus\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"umb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrationReceiver\",\"name\":\"_newPool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unlockAndMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrationReceiver\",\"name\":\"_newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"withdrawAndMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewardsV2BSC", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a6e4ffa19b213abea258ae72e8e1a209b9e543e7000000000000000000000000a6e4ffa19b213abea258ae72e8e1a209b9e543e7000000000000000000000000846f52020749715f02aef25b5d1d65e48945649d0000000000000000000000000bdc4edd85bee69552d9ad6426e322199915cf790000000000000000000000008690666153b101201a104719c3424179730ac2bc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}