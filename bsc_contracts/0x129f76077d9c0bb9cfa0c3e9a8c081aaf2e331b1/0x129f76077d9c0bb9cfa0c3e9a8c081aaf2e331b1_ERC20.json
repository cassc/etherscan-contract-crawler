{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface SWAP {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface Intermediate {\r\n    function toTransfer(\r\n        address contract_,\r\n        address to_,\r\n        uint256 amount_\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract ERC20 is Context {\r\n    address public swapC = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public usdtC = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address public intermediateC;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    uint256 public _decimals;\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public marketingAddress =\r\n        0x2e44307257AEC8d2B8903E1ef267C6C416Aac44A;\r\n    address public holdingCurrencyAddress =\r\n        0xc5C323E1498d9DeC5b342FaE068EE8923822098a;\r\n    address public lpAddress = 0xCAa8CE02D72443321dDf6840cc89b3C684bb65C1;\r\n    address public dynamicAddress = 0x749f9A0f7DA3F1eB9E24479325Fb7391049CBadc;\r\n    address public volcanoAddress = 0x1eCE5Fba1B6Abf649B9eee0a304859F50CBC846F;\r\n    address public newwalletAddress =\r\n        0xD458151E2db2634Afe8caa3E428Af38077BFd5F5;\r\n    address public destroyAddress = 0x65aD67a1Ed1466d68efb783d679ca44bd3106dCf;\r\n\r\n    uint256 public blackHoleSlippage = 25;\r\n    uint256 public marketingSlippage = 75;\r\n    uint256 public holdingCurrencySlippage = 30;\r\n    uint256 public lpSlippage = 70;\r\n    uint256 public dynamicSlippage = 100;\r\n    uint256 public volcanoSlippage = 5;\r\n    uint256 public newwalletSlippage = 25;\r\n    uint256 public totatDestroy;\r\n\r\n    mapping(address => bool) public _FeeList;\r\n\r\n    address[] public paths = new address[](2);\r\n\r\n    address public owners;\r\n    modifier _Owner() {\r\n        require(owners == msg.sender);\r\n        _;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event FeeList(address address_, bool status_);\r\n\r\n    event holdingCurrencyEvent(\r\n        address address_,\r\n        uint256 value,\r\n        address contract_\r\n    );\r\n    event lpEvent(address address_, uint256 value, address contract_);\r\n    event dynamicEvent(address address_, uint256 value, address contract_);\r\n\r\n    constructor(address address_) {\r\n        _name = \"Business development coin\";\r\n        _symbol = \"BDC\";\r\n        _decimals = 18;\r\n        owners = msg.sender;\r\n        paths[0] = address(this);\r\n        paths[1] = usdtC;\r\n        intermediateC = 0x77B8d00F8DC362a9b42845B3ECb3f4520A8C95f6;\r\n        _mint(address_, 22000000 * 10 ** decimals());\r\n        _burn(address_, 11000000 * 10 ** decimals());\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function setOwner(address owner_) public _Owner returns (bool) {\r\n        owners = owner_;\r\n        return true;\r\n    }\r\n\r\n    function setintermediateC(address owner_) public _Owner returns (bool) {\r\n        intermediateC = owner_;\r\n        return true;\r\n    }\r\n\r\n    function setAddress(\r\n        address address_,\r\n        uint256 type_\r\n    ) public _Owner returns (bool) {\r\n        require(address_ != address(0), \"ERC20: incorrect address\");\r\n        if (type_ == 1) {\r\n            marketingAddress = address_;\r\n            return true;\r\n        }\r\n        if (type_ == 2) {\r\n            holdingCurrencyAddress = address_;\r\n            return true;\r\n        }\r\n        if (type_ == 3) {\r\n            lpAddress = address_;\r\n            return true;\r\n        }\r\n        if (type_ == 4) {\r\n            dynamicAddress = address_;\r\n            return true;\r\n        }\r\n        if (type_ == 5) {\r\n            volcanoAddress = address_;\r\n            return true;\r\n        }\r\n        if (type_ == 6) {\r\n            newwalletAddress = address_;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setSlippage(\r\n        uint256 slippage_,\r\n        uint256 type_\r\n    ) public _Owner returns (bool) {\r\n        require(slippage_ < 100, \"ERC20: slippage out of range\");\r\n        require(slippage_ > 0, \"ERC20: slippage less than range\");\r\n        if (type_ == 0) {\r\n            blackHoleSlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 1) {\r\n            marketingSlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 2) {\r\n            holdingCurrencySlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 3) {\r\n            lpSlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 4) {\r\n            dynamicSlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 5) {\r\n            volcanoSlippage = slippage_;\r\n            return true;\r\n        }\r\n        if (type_ == 6) {\r\n            newwalletSlippage = slippage_;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setFeeList(\r\n        address address_,\r\n        bool state_\r\n    ) public _Owner returns (bool) {\r\n        _FeeList[address_] = state_;\r\n        emit FeeList(address_, state_);\r\n        return true;\r\n    }\r\n\r\n    function transferall(\r\n        address[] memory recipient,\r\n        uint256[] memory amount\r\n    ) public virtual returns (bool) {\r\n        require(\r\n            recipient.length == amount.length,\r\n            \"ERC20: Array lengths are different\"\r\n        );\r\n        for (uint i = 0; i < recipient.length; i++) {\r\n            _transfer(_msgSender(), recipient[i], amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (sender == _msgSender()) {\r\n            return true;\r\n        }\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        uint256 accountAmount = amount;\r\n        if (_FeeList[sender] && !_FeeList[recipient]) {\r\n            if (recipient != address(this) && recipient != marketingAddress) {\r\n                accountAmount =\r\n                    accountAmount -\r\n                    toBuyfee(amount, sender, recipient);\r\n            }\r\n        }\r\n        if (_FeeList[recipient] && !_FeeList[sender]) {\r\n            if (sender != address(this) && sender != marketingAddress) {\r\n                accountAmount = accountAmount - toSellfee(amount, sender);\r\n            }\r\n        }\r\n        _balances[recipient] += accountAmount;\r\n        emit Transfer(sender, recipient, accountAmount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function toBuyfee(\r\n        uint256 amount,\r\n        address sender,\r\n        address recipient\r\n    ) internal virtual returns (uint256) {\r\n        uint256 a = (amount * blackHoleSlippage) / 10000;\r\n        if (totatDestroy >= 7000000 * 10 ** _decimals) {\r\n            _balances[destroyAddress] += a;\r\n            emit Transfer(sender, destroyAddress, a);\r\n        } else {\r\n            _balances[sender] += a;\r\n            _burn(sender, a);\r\n            totatDestroy += a;\r\n        }\r\n\r\n        uint256 b = (amount * marketingSlippage) / 10000;\r\n        _balances[marketingAddress] += b;\r\n        emit Transfer(sender, marketingAddress, b);\r\n\r\n        uint256 c = (amount * holdingCurrencySlippage) / 10000;\r\n        _balances[holdingCurrencyAddress] += c;\r\n        emit holdingCurrencyEvent(recipient, c, address(this));\r\n        emit Transfer(sender, holdingCurrencyAddress, c);\r\n\r\n        uint256 d = (amount * lpSlippage) / 10000;\r\n        _balances[lpAddress] += d;\r\n        emit lpEvent(recipient, d, address(this));\r\n        emit Transfer(sender, lpAddress, d);\r\n\r\n        uint256 e = (amount * dynamicSlippage) / 10000;\r\n        _balances[dynamicAddress] += e;\r\n        emit dynamicEvent(recipient, e, address(this));\r\n        emit Transfer(sender, dynamicAddress, e);\r\n\r\n        uint256 f = (amount * volcanoSlippage) / 10000;\r\n        _balances[volcanoAddress] += f;\r\n        emit Transfer(sender, volcanoAddress, f);\r\n\r\n        uint256 g = (amount * newwalletSlippage) / 10000;\r\n        _balances[newwalletAddress] += g;\r\n        emit Transfer(sender, newwalletAddress, g);\r\n        return a + b + c + d + e + f + g;\r\n    }\r\n\r\n    function toSellfee(\r\n        uint256 amount,\r\n        address sender\r\n    ) internal virtual returns (uint256) {\r\n        uint256 glod_a = (amount * blackHoleSlippage) / 10000;\r\n        if (totatDestroy >= 7000000 * 10 ** _decimals) {\r\n            _balances[destroyAddress] += glod_a;\r\n            emit Transfer(sender, destroyAddress, glod_a);\r\n        } else {\r\n            _balances[sender] += glod_a;\r\n            _burn(sender, glod_a);\r\n            totatDestroy += glod_a;\r\n        }\r\n\r\n        uint256 b = (amount * marketingSlippage) / 10000;\r\n        _balances[marketingAddress] += b;\r\n        emit Transfer(sender, marketingAddress, b);\r\n\r\n        uint256 c = (amount * dynamicSlippage) / 10000;\r\n        _balances[dynamicAddress] += c;\r\n        emit dynamicEvent(sender, c, address(this));\r\n        emit Transfer(sender, dynamicAddress, c);\r\n\r\n        uint256 allSlippage = holdingCurrencySlippage +\r\n            lpSlippage +\r\n            volcanoSlippage +\r\n            newwalletSlippage;\r\n        uint256 glod_b = (amount * allSlippage) / 10000;\r\n\r\n        _balances[address(this)] += glod_b;\r\n        _approve(address(this), swapC, glod_b);\r\n        SWAP theswap = SWAP(swapC);\r\n        uint256[] memory amounts = theswap.swapExactTokensForTokens(\r\n            glod_b,\r\n            0,\r\n            paths,\r\n            intermediateC,\r\n            block.timestamp + 1800\r\n        );\r\n\r\n        Intermediate ints = Intermediate(intermediateC);\r\n        ints.toTransfer(usdtC, address(this), amounts[1]);\r\n\r\n        IERC20 usdts = IERC20(usdtC);\r\n\r\n        uint256 usdt_b = (amounts[1] * holdingCurrencySlippage) / allSlippage;\r\n        emit holdingCurrencyEvent(sender, usdt_b, usdtC);\r\n        usdts.transfer(holdingCurrencyAddress, usdt_b);\r\n\r\n        uint256 usdt_c = (amounts[1] * lpSlippage) / allSlippage;\r\n        emit lpEvent(sender, usdt_c, usdtC);\r\n        usdts.transfer(lpAddress, usdt_c);\r\n\r\n        uint256 usdt_e = (amounts[1] * volcanoSlippage) / allSlippage;\r\n        usdts.transfer(volcanoAddress, usdt_e);\r\n\r\n        uint256 usdt_f = amounts[1] - usdt_c - usdt_b - usdt_e;\r\n        usdts.transfer(newwalletAddress, usdt_f);\r\n        return glod_a + glod_b + b + c;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        _balances[address(0)] += amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"FeeList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"dynamicEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"holdingCurrencyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"lpEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_FeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHoleSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingCurrencySlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intermediateC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newwalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newwalletSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"setAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setFeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setintermediateC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totatDestroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volcanoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volcanoSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000016e6ffd796973a97d51052131d5761175246b5d9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e33782ed2be88ad9c3072cab1121df1c6fea70293f8e587ae6beb6e69927d49a"}