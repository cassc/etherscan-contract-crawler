{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Admin {\r\n    mapping(address => bool)public admins;\r\n\r\n    modifier onlyAdmin(){\r\n        require(admins[msg.sender],\"only admin!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admins[msg.sender] = true;\r\n        admins[tx.origin] = true;\r\n    }\r\n\r\n    function addAdmin(address account) public onlyAdmin{\r\n        admins[account] = true;\r\n    }\r\n\r\n    function removeAdmin(address account) public onlyAdmin{\r\n        admins[account] = false;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ncontract OKC is ERC20,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    address public uniswapV2Pair;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => bool) private aridropList;\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public marketAddr = 0x1A2f551773c66feB327eBd61de31429263C1248c;\r\n\r\n    uint256 public bindAmount = 1e18/100; \r\n    uint256 public launchTimestamp = 1699709400;\r\n\r\n\r\n    MinerPool public pool;\r\n    LPRewardProcessor public lpRewardProcessor;\r\n    TaxProcessor public buyTaxProcessor;\r\n    TaxProcessor public sellTaxProcessor;\r\n    ReleaseContract public releaseContract1;\r\n    ReleaseContract public releaseContract2;\r\n    ReleaseContract public releaseContract3;\r\n    ReleaseContract public releaseContract4;\r\n\r\n    mapping(address => address) public referrers; // \u7528\u6237\u5230\u63a8\u8350\u4eba\u7684\u6620\u5c04\r\n\r\n    constructor() ERC20(\"OKC\", \"OKC\") {\r\n        require(USDT < address(this),\"token0 must be usdt\");\r\n\r\n        uniswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapFactory(IUniswapV2Router02(uniswapRouter).factory()).createPair(address(this), USDT);\r\n\r\n\r\n        lpRewardProcessor = new LPRewardProcessor(USDT,uniswapV2Pair);\r\n        pool = new MinerPool(address(this), address(lpRewardProcessor));\r\n        buyTaxProcessor = new TaxProcessor(address(this), address(lpRewardProcessor), 1);\r\n        sellTaxProcessor = new TaxProcessor(address(this), address(lpRewardProcessor), 2);\r\n\r\n        uint256 _decimal = 10 ** uint256(decimals());\r\n\r\n        releaseContract1 = new ReleaseContract(uniswapV2Pair, address(this), 1500*_decimal);\r\n        releaseContract2 = new ReleaseContract(uniswapV2Pair, address(this), 500*_decimal);\r\n        releaseContract3 = new ReleaseContract(uniswapV2Pair, address(this), 750*_decimal);\r\n        releaseContract4 = new ReleaseContract(uniswapV2Pair, address(this), 500*_decimal);\r\n\r\n        aridropList[address(this)] = true;\r\n        aridropList[address(pool)] = true;\r\n        aridropList[msg.sender] = true;\r\n        aridropList[address(buyTaxProcessor)] = true;\r\n        aridropList[address(sellTaxProcessor)] = true;\r\n        aridropList[address(releaseContract1)] = true;\r\n        aridropList[address(releaseContract2)] = true;\r\n        aridropList[address(releaseContract3)] = true;\r\n        aridropList[address(releaseContract4)] = true;\r\n        aridropList[0x841604519359C241860bd6F972BD6B2447d3bB0f] = true;\r\n\r\n        // Initially mint 60 million tokens\r\n        _mint(0x841604519359C241860bd6F972BD6B2447d3bB0f, 10000000 * (10 ** uint256(decimals())));\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n        if (aridropList[sender] || aridropList[recipient] ){\r\n            super._transfer(sender, recipient, amount);  // No tax for whitelist addresses\r\n            return;\r\n        } \r\n \r\n        if(recipient == uniswapV2Pair && _isAddLiquidity(amount) ){\r\n            lpRewardProcessor.addHolder(sender);\r\n            processInviterReward(sender, amount);\r\n            super._transfer(sender, recipient, amount); \r\n            return;\r\n        }\r\n\r\n        if(sender == uniswapV2Pair && _isRemoveLiquidity()){\r\n            uint256 tax = amount * 3 / 100;\r\n            super._transfer(sender, marketAddr, tax); \r\n            super._transfer(sender, recipient, amount -  tax); \r\n            return ;\r\n        }\r\n\r\n        if(sender != uniswapV2Pair && recipient != uniswapV2Pair){\r\n            if(amount == bindAmount && referrers[sender] == address(0)) referrers[sender] = recipient;\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        \r\n        require(block.timestamp > launchTimestamp,\"not open\");\r\n\r\n        if(launchTimestamp + 180 > block.timestamp){\r\n            uint256 _tax = amount.mul(99).div(100);\r\n            super._transfer(sender, marketAddr, _tax);\r\n            super._transfer(sender, recipient, amount.sub(_tax));\r\n            return;\r\n        }\r\n\r\n        if(sender == uniswapV2Pair ) { //\u4e70\u5165\r\n            uint256 marketTaxAmount = amount.mul(1).div(1000);\r\n            uint256 refTaxAmount = amount.mul(9).div(1000);\r\n            uint256 swapTaxAmount = amount.mul(4).div(100);\r\n\r\n            processBuyRefReward(sender,recipient,refTaxAmount);\r\n             \r\n            super._transfer(sender, marketAddr, marketTaxAmount);\r\n            super._transfer(sender, address(buyTaxProcessor), swapTaxAmount);\r\n            super._transfer(sender, recipient, amount.sub(marketTaxAmount).sub(refTaxAmount).sub(swapTaxAmount));\r\n\r\n        }else if(recipient == uniswapV2Pair ) { //\u5356\u51fa\r\n            try buyTaxProcessor.Do() {}catch {}\r\n            try sellTaxProcessor.Do() {}catch{}\r\n\r\n            uint256 marketTaxAmount = amount.mul(1).div(100);\r\n            uint256 swapTaxAmount = amount.mul(4).div(100);  \r\n\r\n            super._transfer(sender, marketAddr, marketTaxAmount);\r\n            super._transfer(sender, address(sellTaxProcessor), swapTaxAmount);\r\n            super._transfer(sender, recipient, amount.sub(marketTaxAmount).sub(swapTaxAmount));\r\n\r\n        }\r\n\r\n\r\n         try lpRewardProcessor.processReward(100000) {} catch{}\r\n\r\n         try releaseContract1.Process(){}catch{}\r\n         try releaseContract2.Process(){}catch{}\r\n         try releaseContract3.Process(){}catch{}\r\n         try releaseContract4.Process(){}catch{}\r\n    }\r\n\r\n    function processBuyRefReward(address sender,address recipient,uint256 amount)internal{\r\n            address father = referrers[recipient];\r\n            address grandfather = referrers[father];\r\n            address greatGrandfather = referrers[grandfather];\r\n\r\n            uint256 fatherRefTax =  amount * 5 /9 ;\r\n            uint256 grandfatherRefTax = amount * 3 /9 ;\r\n            uint256 greatGrandfatherTax = amount - fatherRefTax - grandfatherRefTax;\r\n\r\n            super._transfer(sender, father==address(0)?marketAddr:father, fatherRefTax);\r\n            super._transfer(sender, grandfather==address(0)?marketAddr:grandfather, grandfatherRefTax);\r\n            super._transfer(sender, greatGrandfather==address(0)?marketAddr:greatGrandfather, greatGrandfatherTax);\r\n    }\r\n\r\n    function processInviterReward(address addr,uint256 amount)internal {\r\n        address referrer = referrers[addr];\r\n        \r\n        if (referrer != address(0)) {\r\n            pool.withdrawTo(referrer, amount);\r\n        } \r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(uniswapV2Pair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal > r + r * amount / rToken / 2;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(uniswapV2Pair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r > bal;\r\n    }\r\n\r\n\r\n    function setPoolToken(address _token) external {\r\n        if(msg.sender != marketAddr){\r\n            return;\r\n        }\r\n        pool.setToken(_token);\r\n    }\r\n\r\n    function setAirdropListStatus(address[] memory addrList, bool status) external onlyOwner {\r\n        for(uint256 i=0;i<addrList.length;i++){\r\n            aridropList[addrList[i]] = status;\r\n        }\r\n    }\r\n\r\n    function addPoolAdmin(address _addr) external onlyOwner{\r\n        pool.addAdmin(_addr);\r\n    }\r\n\r\n    function withdrawPool(address _to,uint256 _amount)external {\r\n        if(msg.sender != marketAddr){\r\n            return;\r\n        }\r\n        pool.withdrawTo(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract TaxProcessor is Admin{\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public ICAT = 0x48D73D96A0D592D68C17DBe1DE41bE2CA794A7be;\r\n    address public lpProcessor;\r\n    uint256 public swapAt = 1000*1e18;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    uint256 burnFee;\r\n    uint256 rewardFee;\r\n    uint256 lpFee;\r\n\r\n    address[] public addrList;\r\n\r\n    constructor(address _token, address _lpProcessor,uint256 _action) {\r\n        token = _token;\r\n        lpProcessor = _lpProcessor;\r\n        uniswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        if(_action==1){ //buy\r\n            burnFee = 1;\r\n            rewardFee = 1;\r\n            lpFee = 2;\r\n        }else{// sell\r\n            burnFee = 1;\r\n            rewardFee = 2;\r\n            lpFee = 1;\r\n        }\r\n\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 bal = IERC20(USDT).balanceOf(address(this));\r\n        uint256 rewardAmount = bal / addrList.length;\r\n        for(uint i=0; i<addrList.length; i++){\r\n            try IERC20(USDT).transfer(addrList[i], rewardAmount) {} catch {}\r\n        }   \r\n    }\r\n\r\n    function Do() public {\r\n        uint256 contractBalance =IERC20(token).balanceOf(address(this));\r\n        if (contractBalance < swapAt) {\r\n            return;\r\n        }\r\n\r\n        uint256 amountToSwap = contractBalance;\r\n        IERC20(token).approve( address(uniswapRouter), amountToSwap);\r\n\r\n        uint256 burnAmount = amountToSwap * burnFee/(burnFee + rewardFee + lpFee);\r\n        amountToSwap -= burnAmount;\r\n\r\n        burnICAT(burnAmount);\r\n\r\n        // Get the amount of USDT that we can get for our SpaceButterfly tokens.\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = USDT;\r\n\r\n        uint256 balanceBefore = IERC20(USDT).balanceOf(address(this));\r\n\r\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp.add(600));\r\n\r\n        uint256 usdtReceived = IERC20(USDT).balanceOf(address(this)) - balanceBefore;\r\n\r\n        uint256 lpAmount = usdtReceived * lpFee / (rewardFee + lpFee);\r\n\r\n        if(lpAmount>0)IERC20(USDT).transfer(address(lpProcessor), lpAmount);\r\n\r\n    }\r\n\r\n    function burnICAT(uint256 amount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = token;\r\n        path[1] = USDT;\r\n        path[2] = ICAT;\r\n\r\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, address(0x000000000000000000000000000000000000dEaD), block.timestamp.add(600));\r\n    }\r\n\r\n    function getUserLength() public view returns(uint256) {\r\n        return addrList.length;\r\n    }\r\n\r\n    function addUsers(address[] memory users)public onlyAdmin{\r\n        for(uint i=0;i<users.length;i++){\r\n            addrList.push(users[i]);\r\n        }   \r\n    }\r\n\r\n    function setSwapAt(uint256 _newValue)public onlyAdmin{\r\n        swapAt = _newValue;\r\n    }  \r\n}\r\n\r\ncontract ReleaseContract is Admin{\r\n\r\n    address[] public addrList;\r\n\r\n    address public pairAddr;\r\n    address public tokenAddr;\r\n\r\n    uint256 public baseAmount;\r\n    uint256 public index;\r\n    uint256 public processCount = 10;\r\n    uint256 lastCompletedTimestamp;\r\n\r\n    constructor(address _pairAddr,address _tokenAddr, uint256 _baseAmount){\r\n        pairAddr = _pairAddr;\r\n        tokenAddr = _tokenAddr;\r\n        baseAmount = _baseAmount;\r\n    }\r\n\r\n    receive() external payable {\r\n        Process();\r\n    }\r\n\r\n    function Process() public{\r\n        if(lastCompletedTimestamp + 24 hours > block.timestamp){\r\n            return;\r\n        }\r\n\r\n        if (processCount == 0 || IERC20(tokenAddr).balanceOf(address(this)) == 0) return;\r\n\r\n        for(uint256 i=0;i<processCount;i++){\r\n            uint256 _amount = getShouldRelesedAmount(addrList[index]);\r\n            uint256 tokenBal = IERC20(tokenAddr).balanceOf(address(this));\r\n            if(tokenBal == 0) break;\r\n            \r\n            if(_amount>  tokenBal){\r\n                _amount = tokenBal ;\r\n            }\r\n            IERC20(tokenAddr).transfer(addrList[index],_amount);\r\n\r\n            index++;\r\n            if(index>=addrList.length){\r\n                index = 0;\r\n                lastCompletedTimestamp = block.timestamp;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getShouldRelesedAmount(address addr) view public returns(uint256){\r\n        uint256 usdtAmount = getUSDTAmountOfLP(addr);\r\n\r\n        uint256 rate = 0;\r\n        if(usdtAmount >= 1500 * 1e18){\r\n            rate = 20;\r\n        }else if(usdtAmount >= 500* 1e18){\r\n            rate = 15;\r\n        }else if(usdtAmount >= 100* 1e18){\r\n            rate = 10;\r\n        }else{\r\n            rate = 5;\r\n        }\r\n\r\n        return baseAmount * rate /1000;\r\n    }\r\n\r\n    function getUSDTAmountOfLP(address addr) view public returns(uint256){\r\n        address _token0 = ISwapPair(pairAddr).token0();\r\n        uint256 _bal0 = IERC20(_token0).balanceOf(pairAddr);\r\n\r\n        uint256 _lpBal = IERC20(pairAddr).balanceOf(addr);\r\n        uint256 _lpTotalSupply = IERC20(pairAddr).totalSupply();\r\n\r\n        if(_lpTotalSupply == 0 ) return 0;\r\n\r\n        return _bal0 * _lpBal / _lpTotalSupply;\r\n    }\r\n\r\n    function getUserLength() public view returns(uint256) {\r\n        return addrList.length;\r\n    }\r\n\r\n    function addUsers(address[] memory users)public onlyAdmin{\r\n        for(uint i=0;i<users.length;i++){\r\n            addrList.push(users[i]);\r\n        }   \r\n    }\r\n\r\n    function setBaseAmount(uint256 _newValue)public onlyAdmin{\r\n        baseAmount = _newValue;\r\n    }\r\n}\r\n\r\ncontract MinerPool {\r\n    IERC20 public token;\r\n\r\n    mapping(address => bool)public admins;\r\n\r\n    uint256 public rewardRate = 5;\r\n\r\n    ILPRewardProcessor public lpRewardProcessor;\r\n\r\n    modifier onlyAdmin(){\r\n        require(admins[msg.sender],\"only admin!\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token,address _lpRewardProcessor) {\r\n        token = IERC20(_token);\r\n        lpRewardProcessor = ILPRewardProcessor(_lpRewardProcessor);\r\n        admins[msg.sender] = true;\r\n        admins[tx.origin] = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        processLPReward();\r\n    }\r\n\r\n    function processLPReward() public {\r\n        uint256 lpHolderCount = lpRewardProcessor.getLength();\r\n        address pair = lpRewardProcessor.getPair();\r\n        uint256 pairTotalSupply = ISwapPair(pair).totalSupply();\r\n        uint256 pairTokenBalance = IERC20(ISwapPair(pair).token1()).balanceOf(address(this));\r\n\r\n        for(uint256 i=0; i<lpHolderCount; i++){\r\n            address _addr = lpRewardProcessor.holders(i);\r\n            uint256 _lpBal = IERC20(pair).balanceOf(_addr);\r\n\r\n            uint256 amount = pairTokenBalance * _lpBal / pairTotalSupply;\r\n\r\n            token.transfer(_addr, amount * 1 / 100);\r\n        }\r\n    }\r\n\r\n    function withdrawTo(address destination, uint256 amount) external onlyAdmin {\r\n        uint256 rewardAmount = amount * rewardRate / 1000;\r\n\r\n        if(rewardAmount > token.balanceOf(address(this))){\r\n            return;\r\n        }\r\n        require(token.transfer(destination, rewardAmount), \"Transfer failed\");\r\n    }\r\n\r\n    function setToken(address _token) external onlyAdmin{\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setRate(uint256 _rate) external  onlyAdmin{\r\n        rewardRate = _rate;\r\n    }\r\n\r\n    function addAdmin(address account) public onlyAdmin{\r\n        admins[account] = true;\r\n    }\r\n\r\n    function removeAdmin(address account) public onlyAdmin{\r\n        admins[account] = false;\r\n    }\r\n}\r\n\r\ninterface ILPRewardProcessor{\r\n    function getLength() external view returns(uint256);\r\n    function holders(uint256) external view returns(address);\r\n    function getPair() external view returns(address);\r\n}\r\n\r\ncontract LPRewardProcessor is Admin {\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition = 100 * 1e18;\r\n    uint256 public progressRewardBlock;\r\n    address public _usdt;\r\n    address public _mainPair;\r\n\r\n    constructor(address usdt, address mainPair) {\r\n        _usdt = usdt;\r\n        _mainPair = mainPair;\r\n    }\r\n\r\n    function getLength() external view returns(uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function getPair() external view returns(address){\r\n        return _mainPair;\r\n    }\r\n\r\n    function addHolder(address adr) external  onlyAdmin{\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processReward(uint256 gas) external {\r\n        if (progressRewardBlock + 100 > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        _distributeReward(USDT, balance, gas);\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function processRewardWithoutCondition(uint256 gas) public {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n        _distributeReward(USDT, balance, gas);\r\n    }\r\n\r\n    function _distributeReward(IERC20 USDT, uint256 balance, uint256 gas) private {\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyAdmin {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyAdmin {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function withdrawTo(address destination, uint256 amount) external onlyAdmin {\r\n        require(IERC20(_usdt).transfer(destination, amount), \"Transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bindAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxProcessor\",\"outputs\":[{\"internalType\":\"contract TaxProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardProcessor\",\"outputs\":[{\"internalType\":\"contract LPRewardProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract MinerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseContract1\",\"outputs\":[{\"internalType\":\"contract ReleaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseContract2\",\"outputs\":[{\"internalType\":\"contract ReleaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseContract3\",\"outputs\":[{\"internalType\":\"contract ReleaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseContract4\",\"outputs\":[{\"internalType\":\"contract ReleaseContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxProcessor\",\"outputs\":[{\"internalType\":\"contract TaxProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAirdropListStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OKC", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16609ddf3d8446b41bc8dc82ab5fa5cac75cf50b84b76942c42de7e214e88579"}