{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IPair} from \\\"./interfaces/IPair.sol\\\";\\nimport {IBribe} from \\\"./interfaces/IBribe.sol\\\";\\nimport {IVoter} from \\\"./interfaces/IVoter.sol\\\";\\n\\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge {\\n\\n    address public immutable stake; // the LP token that needs to be staked for rewards\\n    address public immutable _ve; // the ve token used for gauges\\n    address public immutable bribe;\\n    address public immutable voter;\\n\\n    uint public derivedSupply;\\n    mapping(address => uint) public derivedBalances;\\n\\n    uint internal constant DURATION = 7 days; // rewards are released over 7 days\\n    uint internal constant PRECISION = 10 ** 18;\\n    uint internal constant MAX_REWARD_TOKENS = 16;\\n\\n    // default snx staking contract implementation\\n    mapping(address => uint) public rewardRate;\\n    mapping(address => uint) public periodFinish;\\n    mapping(address => uint) public lastUpdateTime;\\n    mapping(address => uint) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint)) public lastEarn;\\n    mapping(address => mapping(address => uint)) public userRewardPerTokenStored;\\n\\n    mapping(address => uint) public tokenIds;\\n\\n    uint public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint timestamp;\\n        uint balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking reward rate\\n    struct RewardPerTokenCheckpoint {\\n        uint timestamp;\\n        uint rewardPerToken;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint timestamp;\\n        uint supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping (address => mapping (uint => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping (uint => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping (address => mapping (uint => RewardPerTokenCheckpoint)) public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping (address => uint) public rewardPerTokenNumCheckpoints;\\n\\n    uint public fees0;\\n    uint public fees1;\\n\\n    event Deposit(address indexed from, uint tokenId, uint amount);\\n    event Withdraw(address indexed from, uint tokenId, uint amount);\\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\\n    event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\n    event ClaimRewards(address indexed from, address indexed reward, uint amount);\\n\\n    constructor(address _stake, address _bribe, address  __ve, address _voter) {\\n        require(\\n            _stake != address(0) &&\\n            _bribe != address(0) &&\\n            __ve != address(0) &&\\n            _voter != address(0),\\n            \\\"Gauge: zero address provided in constructor\\\"\\n        );\\n        stake = _stake;\\n        bribe = _bribe;\\n        _ve = __ve;\\n        voter = _voter;\\n    }\\n\\n    // simple re-entrancy check\\n    uint internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n    \\n    /**\\n     * @notice Claim fees on its associated pair and send them to its associated bribe\\n     */\\n    function claimFees() external lock returns (uint claimed0, uint claimed1) {\\n        return _claimFees();\\n    }\\n\\n    function _claimFees() internal returns (uint claimed0, uint claimed1) {\\n        (claimed0, claimed1) = IPair(stake).claimFees();\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            uint _fees0 = fees0 + claimed0;\\n            uint _fees1 = fees1 + claimed1;\\n            (address _token0, address _token1) = IPair(stake).tokens();\\n            if (_fees0 > IBribe(bribe).left(_token0) && _fees0 / DURATION > 0) {\\n                fees0 = 0;\\n                _safeApprove(_token0, bribe, _fees0);\\n                IBribe(bribe).notifyRewardAmount(_token0, _fees0);\\n            } else {\\n                fees0 = _fees0;\\n            }\\n            if (_fees1 > IBribe(bribe).left(_token1) && _fees1 / DURATION > 0) {\\n                fees1 = 0;\\n                _safeApprove(_token1, bribe, _fees1);\\n                IBribe(bribe).notifyRewardAmount(_token1, _fees1);\\n            } else {\\n                fees1 = _fees1;\\n            }\\n\\n            emit ClaimFees(msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    /**\\n    * @notice Determine the prior balance for an account as of a block number\\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    * @param account The address of the account to check\\n    * @param timestamp The timestamp to get the balance at\\n    * @return The balance the account had as of the given block\\n    */\\n    function getPriorBalanceIndex(address account, uint timestamp) public view returns (uint) {\\n        uint nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorSupplyIndex(uint timestamp) public view returns (uint) {\\n        uint nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint timestamp) public view returns (uint, uint) {\\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0,0);\\n        }\\n\\n        // First check most recent balance\\n        if (rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (rewardPerTokenCheckpoints[token][nCheckpoints - 1].rewardPerToken, rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\\n            return (0,0);\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[token][center];\\n            if (cp.timestamp == timestamp) {\\n                return (cp.rewardPerToken, cp.timestamp);\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return (rewardPerTokenCheckpoints[token][lower].rewardPerToken, rewardPerTokenCheckpoints[token][lower].timestamp);\\n    }\\n\\n    function _writeCheckpoint(address account, uint balance) internal {\\n        uint _timestamp = block.timestamp;\\n        uint _nCheckPoints = numCheckpoints[account];\\n\\n        if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = Checkpoint(_timestamp, balance);\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(address token, uint reward, uint timestamp) internal {\\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].rewardPerToken = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = RewardPerTokenCheckpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint _nCheckPoints = supplyNumCheckpoints;\\n        uint _timestamp = block.timestamp;\\n\\n        if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(_timestamp, derivedSupply);\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint) {\\n        return rewards.length;\\n    }\\n\\n    /** \\n    * @dev Returns the last time the reward was modified or periodFinish if the reward has ended.\\n     */\\n    function lastTimeRewardApplicable(address token) public view returns (uint) {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    /**\\n    * @dev Claim earned rewards for a depositor.\\n    * @param account The address of the account to claim for.\\n    * @param tokens A list of the tokens to claim.\\n    */\\n    function getReward(address account, address[] memory tokens) external lock {\\n        require(msg.sender == account || msg.sender == voter);\\n        _unlocked = 1;\\n        IVoter(voter).distribute(address(this));\\n        _unlocked = 2;\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (rewardPerTokenStored[tokens[i]], lastUpdateTime[tokens[i]]) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n            uint _reward = earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[tokens[i]];\\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\\n\\n            emit ClaimRewards(account, tokens[i], _reward);\\n        }\\n\\n        uint _derivedBalance = derivedBalances[account];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(account);\\n        derivedBalances[account] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(account, derivedBalances[account]);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n\\n    function rewardPerToken(address token) public view returns (uint) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return rewardPerTokenStored[token] + ((lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token])) * rewardRate[token] * PRECISION / derivedSupply);\\n    }\\n\\n    function derivedBalance(address account) public view returns (uint) {\\n        return balanceOf[account];\\n    }\\n\\n    function batchRewardPerToken(address token, uint maxRuns) external {\\n        (rewardPerTokenStored[token], lastUpdateTime[token])  = _batchRewardPerToken(token, maxRuns);\\n    }\\n\\n    function _batchRewardPerToken(address token, uint maxRuns) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints-1, maxRuns);\\n\\n        for (uint i = _startIndex; i < _endIndex; i++) {\\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n            if (sp0.supply > 0) {\\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\\n                (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                _startTimestamp = _endTime;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(address token, uint timestamp1, uint timestamp0, uint supply, uint startTimestamp) internal view returns (uint, uint) {\\n        uint endTime = Math.max(timestamp1, startTimestamp);\\n        return (((Math.min(endTime, periodFinish[token]) - Math.min(Math.max(timestamp0, startTimestamp), periodFinish[token])) * rewardRate[token] * PRECISION / supply), endTime);\\n    }\\n\\n/// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n      (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint length = rewards.length;\\n        for (uint i; i < length; i++) {\\n            address token = rewards[i];\\n            (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n        }\\n    }\\n\\n    function _updateRewardPerToken(address token, uint maxRuns, bool actualLast) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.supply > 0) {\\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n        \\n        if (actualLast) {\\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.supply > 0) {\\n                (uint _reward,) = _calcRewardPerToken(token, lastTimeRewardApplicable(token), Math.max(sp.timestamp, _startTimestamp), sp.supply, _startTimestamp);\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function earned(address token, address account) public view returns (uint) {\\n        uint _startTimestamp = Math.max(lastEarn[token][account], rewardPerTokenCheckpoints[token][0].timestamp);\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n\\n        uint _startIndex = getPriorBalanceIndex(account, _startTimestamp);\\n        uint _endIndex = numCheckpoints[account]-1;\\n\\n        uint reward = 0;\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex-1; i++) {\\n                Checkpoint memory cp0 = checkpoints[account][i];\\n                Checkpoint memory cp1 = checkpoints[account][i+1];\\n                (uint _rewardPerTokenStored0,) = getPriorRewardPerToken(token, cp0.timestamp);\\n                (uint _rewardPerTokenStored1,) = getPriorRewardPerToken(token, cp1.timestamp);\\n                reward += cp0.balanceOf * (_rewardPerTokenStored1 - _rewardPerTokenStored0) / PRECISION;\\n            }\\n        }\\n\\n        Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint _rewardPerTokenStored,) = getPriorRewardPerToken(token, cp.timestamp);\\n        reward += cp.balanceOf * (rewardPerToken(token) - Math.max(_rewardPerTokenStored, userRewardPerTokenStored[token][account])) / PRECISION;\\n\\n        return reward;\\n    }\\n\\n    function depositAll(uint tokenId) external {\\n        deposit(IERC20(stake).balanceOf(msg.sender), tokenId);\\n    }\\n\\n    function deposit(uint amount, uint tokenId) public lock {\\n        require(amount > 0);\\n        _updateRewardForAllTokens();\\n\\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\\n        totalSupply += amount;\\n        balanceOf[msg.sender] += amount;\\n\\n        if (tokenId > 0) {\\n            require(IVotingEscrow(_ve).ownerOf(tokenId) == msg.sender);\\n            if (tokenIds[msg.sender] == 0) {\\n                tokenIds[msg.sender] = tokenId;\\n                IVoter(voter).attachTokenToGauge(tokenId, msg.sender);\\n            }\\n            require(tokenIds[msg.sender] == tokenId);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, _derivedBalance);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n        emit Deposit(msg.sender, tokenId, amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf[msg.sender]);\\n    }\\n\\n    function withdraw(uint amount) public {\\n        uint tokenId = 0;\\n        if (amount == balanceOf[msg.sender]) {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n        withdrawToken(amount, tokenId);\\n    }\\n\\n    function withdrawToken(uint amount, uint tokenId) public lock {\\n        _updateRewardForAllTokens();\\n        \\n        totalSupply -= amount;\\n        balanceOf[msg.sender] -= amount;\\n        _safeTransfer(stake, msg.sender, amount);\\n\\n        if (tokenId > 0) {\\n            require(tokenId == tokenIds[msg.sender]);\\n            tokenIds[msg.sender] = 0;\\n            IVoter(voter).detachTokenFromGauge(tokenId, msg.sender);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n        emit Withdraw(msg.sender, tokenId, amount);\\n    }\\n\\n    function left(address token) external view returns (uint) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint _remaining = periodFinish[token] - block.timestamp;\\n        return _remaining * rewardRate[token];\\n    }\\n\\n    function notifyRewardAmount(address token, uint amount) external lock {\\n        require(token != stake, \\\"cannot rewards with stake tokens\\\");\\n        require(amount > 0, \\\"invalid amount\\\");\\n        require(totalSupply > 0, \\\"no tokens staked\\\");\\n        if (!isReward[token]) {\\n            require(IVoter(voter).isReward(address(this), token), \\\"rewards tokens must be whitelisted\\\");\\n            require(rewards.length < MAX_REWARD_TOKENS, \\\"too many rewards tokens\\\");\\n            isReward[token] = true; \\n            rewards.push(token);\\n        }\\n        if (rewardRate[token] == 0) _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n        _claimFees();\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = amount / DURATION;\\n        } else {\\n            uint _remaining = periodFinish[token] - block.timestamp;\\n            uint _left = _remaining * rewardRate[token];\\n            require(amount > _left);\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = (amount + _left) / DURATION;\\n        }\\n        require(rewardRate[token] > 0);\\n        uint balance = IERC20(token).balanceOf(address(this));\\n        require(rewardRate[token] <= balance / DURATION, \\\"Provided reward too high\\\");\\n        periodFinish[token] = block.timestamp + DURATION;\\n\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    function swapOutReward(uint i, address oldToken, address newToken) external {\\n        require(msg.sender == IVoter(voter).admin());\\n        require(rewards[i] == oldToken);\\n        isReward[oldToken] = false;\\n        isReward[newToken] = true;\\n        rewards[i] = newToken;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeApprove(address token, address spender, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\"\r\n    },\r\n    \"contracts/GaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {Gauge} from \\\"./Gauge.sol\\\";\\n\\ncontract GaugeFactory {\\n    address public last_gauge;\\n\\n    // @param _stake address of the LP tokens\\n    // @param _bribe address of the bribe contract linked to the Gauge\\n    // @param _ve address of the VotingEscrow contract\\n    // @return the gauge address\\n    function createGauge(address _stake, address _bribe, address _ve) external returns (address) {\\n        last_gauge = address(new Gauge(_stake, _bribe, _ve, msg.sender));\\n        return last_gauge;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IBribe {\\n    function _deposit(uint amount, uint tokenId) external;\\n    function _withdraw(uint amount, uint tokenId) external;\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function left(address token) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IPair {\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function claimFees() external returns (uint, uint);\\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint);\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function stable() external view returns (bool);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function tokens() external returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IVoter {\\n\\n    function attachTokenToGauge(uint tokenId, address account) external;\\n    function detachTokenFromGauge(uint tokenId, address account) external;\\n    function emitDeposit(uint tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint tokenId, address account, uint amount) external;\\n    function notifyRewardAmount(uint amount) external;\\n    function _ve() external view returns (address);\\n    function createGauge(address _pair) external returns (address);\\n    function factory() external view returns (address);\\n    function whitelistingFee() external view returns (uint256);\\n    function setWhitelistingFee(uint256 _fee) external;\\n    function whitelist(address _token) external;\\n    function isWhitelisted(address _token) external view returns (bool);\\n    function delist(address _token) external;\\n    function bribeFactory() external view returns (address);\\n    function bribes(address gauge) external view returns (address);\\n    function gauges(address pair) external view returns (address);\\n    function isGauge(address gauge) external view returns (bool);\\n    function allGauges(uint index) external view returns (address);\\n    function vote(uint tokenId, address[] calldata gaugeVote, uint[] calldata weights) external;\\n    function gaugeVote(uint tokenId) external view returns (address[] memory);\\n    function votes(uint tokenId, address gauge) external view returns (uint);\\n    function weights(address gauge) external view returns (uint);\\n    function usedWeights(uint tokenId) external view returns (uint);\\n    function claimable(address gauge) external view returns (uint);\\n    function totalWeight() external view returns (uint);\\n    function reset(uint _tokenId) external;\\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint _tokenId) external;\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n    function distributeFees(address[] memory _gauges) external;\\n    function updateGauge(address _gauge) external;\\n    function poke(uint _tokenId) external;\\n    function initialize(address[] memory _tokens, address _minter) external;\\n    function minter() external view returns (address);\\n    function admin() external view returns (address);\\n    function feeManagers(address feeManager) external view returns (bool);\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens) external;\\n    function isReward(address gauge, address token) external view returns (bool);\\n    function isBribe(address bribe, address token) external view returns (bool);\\n    function isLive(address gauge) external view returns (bool);\\n    function setBribe(address _bribe, address _token, bool _status) external;\\n    function setReward(address _gauge, address _token, bool _status) external;\\n    function killGauge(address _gauge) external;\\n    function reviveGauge(address _gauge) external;\\n    function distroFees() external;\\n    function distro() external;\\n    function distribute(address _gauge) external;\\n    function distributeRange(uint start, uint finish) external;\\n    function distributeGauges(address[] memory _gauges) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n    function epoch() external view returns (uint);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function token() external view returns (address);\\n    function user_point_history__ts(uint tokenId, uint idx) external view returns (uint);\\n    function locked__end(uint _tokenId) external view returns (uint);\\n    function locked__amount(uint _tokenId) external view returns (uint);\\n    function approve(address spender, uint tokenId) external;\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n    function lockVote(uint tokenId) external;\\n    function isVoteExpired(uint tokenId) external view returns (bool);\\n    function voteExpiry(uint _tokenId) external view returns (uint);\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function voted(uint tokenId) external view returns (bool);\\n    function withdraw(uint tokenId) external;\\n    function create_lock(uint value, uint duration) external returns (uint);\\n    function setVoter(address voter) external;\\n    function balanceOf(address owner) external view returns (uint);\\n    function safeTransferFrom(address from, address to, uint tokenId) external;\\n    function burn(uint _tokenId) external;\\n    function setAdmin(address _admin) external;\\n    function setArtProxy(address _proxy) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GaugeFactory", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}