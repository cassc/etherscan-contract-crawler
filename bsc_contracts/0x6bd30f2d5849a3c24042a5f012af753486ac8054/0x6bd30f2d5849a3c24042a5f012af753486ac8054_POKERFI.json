{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IPancake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.5;\\r\\ninterface PancakeFactory {\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface PancakeRouter {\\r\\n  function factory() external pure returns (address);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"pokerfi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./IPancake.sol\\\";\\r\\nimport \\\"./SwapHelper.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ncontract POKERFI is Ownable, ERC20 {\\r\\n      address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n      address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n      address constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\r\\n      address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n\\r\\n    string constant _name = \\\"PokerFi\\\";\\r\\n    string constant _symbol = \\\"POKERFI\\\";\\r\\n\\r\\n    // Token supply control\\r\\n    uint8 constant decimal = 18;\\r\\n    uint8 constant decimalUSDT = 18;\\r\\n    uint256 constant maxSupply = 10_000_000_000 * (10 ** decimal);\\r\\n    bool public tradingEnabled;\\r\\n\\r\\n    // Fees in sell\\r\\n    uint256 public sellfeeDevelopmentWallet = 200; // 2%\\r\\n    uint256 public sellfeeDevelopmentWallet2 = 200; // 2%\\r\\n    uint256 public sellfeeDevelopmentWallet3 = 200; // 2%\\r\\n\\r\\n    // Fees in buy\\r\\n    uint256 public buyfeeDevelopmentWallet = 200; // 2%\\r\\n\\r\\n    // special wallet permissions\\r\\n    mapping(address =\\u003e bool) public exemptFee;\\r\\n    address public liquidityPool;\\r\\n    address public developingWallet;\\r\\n    address public developingWallet2;\\r\\n    address public developingWallet3;\\r\\n\\r\\n    SwapHelper private swapHelper;\\r\\n\\r\\n    address WBNB_USDT_PAIR = 0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE;\\r\\n    address WBNB_TOKEN_PAIR;\\r\\n\\r\\n    bool private _noReentrancy = false;\\r\\n\\r\\n\\r\\n    address constant public vestingWallet1 = 0x1B053813e20AE62F335a8930C07C830Ba9581Ba5;\\r\\n    address constant public vestingWallet2 = 0xD6F4A2C11EfC06eA8775Ac6cA3948930E5182c60; \\r\\n    address constant public vestingWallet3 = 0xe3a967c2De0415B72e1c8290E4f61b8af78c341e;\\r\\n    address constant public vestingWallet4 = 0x4A5DD1EAc5a3B89ffDB9DFF3277aCb5391d3518C;\\r\\n\\r\\n\\r\\n    struct VestingInfo {\\r\\n    uint256 initialBalance;\\r\\n    uint256 lastReleaseTime;\\r\\n    uint256 totalReleased;\\r\\n    uint256 startVesting;\\r\\n}\\r\\n\\r\\n\\r\\n    mapping(address =\\u003e VestingInfo) public vestingInfo;\\r\\n    mapping(address =\\u003e bool) public isVestingWallet;\\r\\n    mapping(address =\\u003e bool) public isBeneficiaryAdded;\\r\\n    uint256 public constant vestingDuration = 50 * 30 * 24 * 60 * 60; \\r\\n    uint256 public constant releaseInterval = 30 * 24 * 60 * 60;  \\r\\n    uint256 public constant releasePercentage = 2;     \\r\\n\\r\\n    function getOwner() external view returns (address) { return owner(); }\\r\\n\\r\\n    function getsellFeeTotal() public view returns(uint256) { return sellfeeDevelopmentWallet + sellfeeDevelopmentWallet2 + sellfeeDevelopmentWallet3; }\\r\\n    function getbuyFeeTotal() public view returns(uint256) { return buyfeeDevelopmentWallet; }\\r\\n\\r\\n    function getSwapHelperAddress() external view returns (address) { return address(swapHelper); }\\r\\n    function setExemptFee(address account, bool operation) public onlyOwner { exemptFee[account] = operation; }\\r\\n\\r\\n    function setDevelopingWallet(address account) public onlyOwner { developingWallet = account; }\\r\\n    function setdevelopingWallet2(address account) public onlyOwner { developingWallet2 = account; }\\r\\n    function setdevelopingWallet3(address account) public onlyOwner { developingWallet3 = account; }\\r\\n\\r\\n    function setSellFeesForDevelopmentWallets(uint256 fee1, uint256 fee2, uint256 fee3) external onlyOwner {\\r\\n        require(fee1 + fee2 + fee3 \\u003c= 600, \\\"Total fees cannot exceed 6%\\\");\\r\\n\\r\\n        sellfeeDevelopmentWallet = fee1;\\r\\n        sellfeeDevelopmentWallet2 = fee2;\\r\\n        sellfeeDevelopmentWallet3 = fee3;\\r\\n    }\\r\\n\\r\\n    function setBuyFeesForDevelopmentWallets(uint256 fee1) external onlyOwner {\\r\\n        require(fee1 \\u003c= 200, \\\"Total fees cannot exceed 2%\\\");\\r\\n\\r\\n        buyfeeDevelopmentWallet = fee1;\\r\\n    }\\r\\n\\r\\n    function addVestingBeneficiary(address beneficiary, uint256 initialBalance) external onlyOwner {\\r\\n    require(isVestingWallet[beneficiary], \\\"Not a valid vesting wallet\\\");\\r\\n    require(beneficiary != address(0), \\\"Invalid beneficiary address\\\");\\r\\n    require(initialBalance \\u003e 0, \\\"Initial balance must be greater than zero\\\");\\r\\n    require(!isBeneficiaryAdded[beneficiary], \\\"Beneficiary already added\\\");\\r\\n\\r\\n    VestingInfo storage info = vestingInfo[beneficiary];\\r\\n    info.initialBalance = initialBalance;\\r\\n    info.lastReleaseTime = block.timestamp;\\r\\n    info.totalReleased = 0;\\r\\n    info.startVesting = block.timestamp;\\r\\n\\r\\n    _transfer(msg.sender, beneficiary, initialBalance);\\r\\n\\r\\n    isBeneficiaryAdded[beneficiary] = true;\\r\\n\\r\\n    emit VestingBeneficiaryAdded(beneficiary, initialBalance);\\r\\n    }\\r\\n\\r\\n    receive() external payable { }\\r\\n\\r\\n    constructor() ERC20(_name, _symbol) {\\r\\n        PancakeRouter router = PancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        WBNB_TOKEN_PAIR = address(PancakeFactory(router.factory()).createPair(WBNB, address(this)));\\r\\n        liquidityPool = WBNB_TOKEN_PAIR;\\r\\n\\r\\n        exemptFee[address(this)] = true;\\r\\n        exemptFee[DEAD] = true;\\r\\n        address ownerWallet = 0x4147b280bD0C33244791f69a556E8DEa620a04AC;\\r\\n        exemptFee[ownerWallet] = true;\\r\\n\\r\\n        developingWallet = 0x710Fb7a4B28676e65Ca8A386c707D22d779d667c;\\r\\n        developingWallet2 = 0xD0dA8626c3Ec1a43bf7ae91A2252F6c6880ACaD2;\\r\\n        developingWallet3 = 0x6720e49fC650Ec62165c3AfEB98db97068D68265;\\r\\n\\r\\n        exemptFee[developingWallet] = true;\\r\\n        exemptFee[developingWallet2] = true;\\r\\n        exemptFee[developingWallet3] = true;\\r\\n\\r\\n        isVestingWallet[vestingWallet1] = true;\\r\\n        isVestingWallet[vestingWallet2] = true;\\r\\n        isVestingWallet[vestingWallet3] = true;\\r\\n        isVestingWallet[vestingWallet4] = true;\\r\\n\\r\\n\\r\\n\\r\\n        swapHelper = new SwapHelper();\\r\\n        swapHelper.safeApprove(WBNB, address(this), type(uint256).max);\\r\\n        swapHelper.transferOwnership(_msgSender());\\r\\n\\r\\n        _mint(ownerWallet, maxSupply);\\r\\n        tradingEnabled = false;\\r\\n        transferOwnership(ownerWallet);\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) { return decimal; }\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        tradingEnabled = true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n    require(!_noReentrancy, \\\"ReentrancyGuard: reentrant call happens\\\");\\r\\n    _noReentrancy = true;\\r\\n    require(sender != address(0) \\u0026\\u0026 recipient != address(0), \\\"transfer from/to the zero address\\\");\\r\\n    require(tradingEnabled || exemptFee[sender], \\\"Trading is currently disabled\\\");\\r\\n\\r\\n    uint256 senderBalance = _balances[sender];\\r\\n    require(senderBalance \\u003e= amount, \\\"transfer amount exceeds your balance\\\");\\r\\n    uint256 newSenderBalance = senderBalance - amount;\\r\\n\\r\\n    if (vestingInfo[sender].initialBalance \\u003e 0) {\\r\\n    VestingInfo storage info = vestingInfo[sender];\\r\\n    uint256 currentTime = block.timestamp;\\r\\n    uint256 timeElapsed = currentTime - info.lastReleaseTime;\\r\\n\\r\\n    if (currentTime \\u003e= info.startVesting \\u0026\\u0026 currentTime \\u003c info.startVesting + vestingDuration) {\\r\\n        uint256 totalCycles = (currentTime - info.startVesting) / releaseInterval;\\r\\n        uint256 releaseAmountPerCycle = (info.initialBalance * releasePercentage) / 100;\\r\\n        uint256 maxTotalReleaseAmount = releaseAmountPerCycle * totalCycles;\\r\\n\\r\\n        if (maxTotalReleaseAmount == info.totalReleased) {\\r\\n            revert(\\\"Exceeded the cycle movement limit\\\");\\r\\n        }\\r\\n\\r\\n        uint256 RemainingAmountThisCycle = maxTotalReleaseAmount - info.totalReleased;\\r\\n\\r\\n        if (amount \\u003e RemainingAmountThisCycle) {\\r\\n    revert(\\\"Transfer amount exceeds your vesting balance for this cycle\\\");\\r\\n        }\\r\\n\\r\\n        info.totalReleased += amount;\\r\\n        info.lastReleaseTime = currentTime;\\r\\n       } else if (currentTime \\u003e= info.startVesting + vestingDuration) {\\r\\n    } else {\\r\\n        revert(\\\"Vesting wallet can\\u0027t send tokens now\\\");\\r\\n    }\\r\\n    }\\r\\n    \\r\\n    _balances[sender] = newSenderBalance;\\r\\n    uint256 feeAmount = 0;\\r\\n    uint256 transferAmount = amount;\\r\\n\\r\\n\\r\\n    if (recipient == liquidityPool) {\\r\\n    if (!exemptFee[sender]) {\\r\\n        feeAmount = (getsellFeeTotal() * amount) / 10000;\\r\\n        exchangeFeeParts(feeAmount);\\r\\n    }\\r\\n    } else if (sender == liquidityPool) {\\r\\n    if (!exemptFee[recipient]) {\\r\\n        feeAmount = (getbuyFeeTotal() * amount) / 10000;\\r\\n        _balances[developingWallet] += feeAmount;\\r\\n        emit Transfer(sender, developingWallet, feeAmount);\\r\\n        transferAmount -= feeAmount;\\r\\n    }\\r\\n    }\\r\\n    uint256 newRecipientAmount = _balances[recipient] + (amount - feeAmount);\\r\\n    _balances[recipient] = newRecipientAmount;\\r\\n    \\r\\n    _noReentrancy = false;\\r\\n    emit Transfer(sender, recipient, transferAmount);\\r\\n    }\\r\\n\\r\\n    function exchangeFeeParts(uint256 incomingFeeTokenAmount) private returns (bool) {\\r\\n        if (incomingFeeTokenAmount == 0) return false;\\r\\n        _balances[address(this)] += incomingFeeTokenAmount;\\r\\n\\r\\n        address pairWbnbToken = WBNB_TOKEN_PAIR;\\r\\n        if (_msgSender() == pairWbnbToken) return false;\\r\\n        uint256 feeTokenAmount = _balances[address(this)];\\r\\n        _balances[address(this)] = 0;\\r\\n\\r\\n        // Gas optimization\\r\\n        address wbnbAddress = WBNB;\\r\\n        (uint112 reserve0, uint112 reserve1) = getTokenReserves(pairWbnbToken);\\r\\n        bool reversed = isReversed(pairWbnbToken, wbnbAddress);\\r\\n        if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\r\\n        _balances[pairWbnbToken] += feeTokenAmount;\\r\\n        address swapHelperAddress = address(swapHelper);\\r\\n        uint256 wbnbBalanceBefore = getTokenBalanceOf(wbnbAddress, swapHelperAddress);\\r\\n\\r\\n        uint256 wbnbAmount = getAmountOut(feeTokenAmount, reserve1, reserve0);\\r\\n        swapToken(pairWbnbToken, reversed ? 0 : wbnbAmount, reversed ? wbnbAmount : 0, swapHelperAddress);\\r\\n        uint256 wbnbBalanceNew = getTokenBalanceOf(wbnbAddress, swapHelperAddress);\\r\\n        require(wbnbBalanceNew == wbnbBalanceBefore + wbnbAmount, \\\"Wrong amount of swapped on WBNB\\\");\\r\\n\\r\\n        // Deep Stack problem avoid\\r\\n        {\\r\\n            // Gas optimization\\r\\n            address usdtAddress = USDT;\\r\\n            address pairWbnbUsdt = WBNB_USDT_PAIR;\\r\\n            (reserve0, reserve1) = getTokenReserves(pairWbnbUsdt);\\r\\n            reversed = isReversed(pairWbnbUsdt, wbnbAddress);\\r\\n            if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\r\\n\\r\\n            uint256 usdtBalanceBefore = getTokenBalanceOf(usdtAddress, address(this));\\r\\n            tokenTransferFrom(wbnbAddress, swapHelperAddress, pairWbnbUsdt, wbnbAmount);\\r\\n            uint256 usdtAmount = getAmountOut(wbnbAmount, reserve0, reserve1);\\r\\n            swapToken(pairWbnbUsdt, reversed ? usdtAmount : 0, reversed ? 0 : usdtAmount, address(this));\\r\\n            uint256 usdtBalanceNew = getTokenBalanceOf(usdtAddress, address(this));\\r\\n            require(usdtBalanceNew == usdtBalanceBefore + usdtAmount, \\\"Wrong amount swapped on USDT\\\");\\r\\n\\r\\n            uint SellFee = getsellFeeTotal();\\r\\n            if (sellfeeDevelopmentWallet \\u003e 0) tokenTransfer(usdtAddress, developingWallet, (usdtAmount * sellfeeDevelopmentWallet) / SellFee);\\r\\n            if (sellfeeDevelopmentWallet2 \\u003e 0) tokenTransfer(usdtAddress, developingWallet2, (usdtAmount * sellfeeDevelopmentWallet2) / SellFee);\\r\\n            if (sellfeeDevelopmentWallet3 \\u003e 0) tokenTransfer(usdtAddress, developingWallet3, (usdtAmount * sellfeeDevelopmentWallet3) / SellFee);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027Insufficient amount in\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027Insufficient liquidity\\u0027);\\r\\n        uint256 amountInWithFee = amountIn * 9975;\\r\\n        uint256 numerator = amountInWithFee  * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 10000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    // gas optimization on get Token0 from a pair liquidity pool\\r\\n    function isReversed(address pair, address tokenA) internal view returns (bool) {\\r\\n        address token0;\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0x0dfe168100000000000000000000000000000000000000000000000000000000)\\r\\n            failed := iszero(staticcall(gas(), pair, emptyPointer, 0x04, emptyPointer, 0x20))\\r\\n            token0 := mload(emptyPointer)\\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to check the direction of token from the pair\\\");\\r\\n        return token0 != tokenA;\\r\\n    }\\r\\n\\r\\n    // gas optimization on transfer token\\r\\n    function tokenTransfer(address token, address recipient, uint256 amount) internal {\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(emptyPointer, 0x04), recipient)\\r\\n            mstore(add(emptyPointer, 0x24), amount)\\r\\n            failed := iszero(call(gas(), token, 0, emptyPointer, 0x44, 0, 0))\\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to transfer token to the address\\\");\\r\\n    }\\r\\n\\r\\n    // gas optimization on transfer from token method\\r\\n    function tokenTransferFrom(address token, address from, address recipient, uint256 amount) internal {\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(emptyPointer, 0x04), from)\\r\\n            mstore(add(emptyPointer, 0x24), recipient)\\r\\n            mstore(add(emptyPointer, 0x44), amount)\\r\\n            failed := iszero(call(gas(), token, 0, emptyPointer, 0x64, 0, 0)) \\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to transfer from token to the address\\\");\\r\\n    }\\r\\n\\r\\n    // gas optimization on swap operation using a liquidity pool\\r\\n    function swapToken(address pair, uint amount0Out, uint amount1Out, address receiver) internal {\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0x022c0d9f00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(emptyPointer, 0x04), amount0Out)\\r\\n            mstore(add(emptyPointer, 0x24), amount1Out)\\r\\n            mstore(add(emptyPointer, 0x44), receiver)\\r\\n            mstore(add(emptyPointer, 0x64), 0x80)\\r\\n            mstore(add(emptyPointer, 0x84), 0)\\r\\n            failed := iszero(call(gas(), pair, 0, emptyPointer, 0xa4, 0, 0))\\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to swap to the receiver\\\");\\r\\n    }\\r\\n\\r\\n    // gas optimization on get balanceOf from BEP20 or ERC20 token\\r\\n    function getTokenBalanceOf(address token, address holder) internal view returns (uint112 tokenBalance) {\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0x70a0823100000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(emptyPointer, 0x04), holder)\\r\\n            failed := iszero(staticcall(gas(), token, emptyPointer, 0x24, emptyPointer, 0x40))\\r\\n            tokenBalance := mload(emptyPointer)\\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to get the balance from the wallet\\\");\\r\\n    }\\r\\n\\r\\n    // gas optimization on get reserves from the liquidity pool\\r\\n    function getTokenReserves(address pairAddress) internal view returns (uint112 reserve0, uint112 reserve1) {\\r\\n        bool failed = false;\\r\\n        assembly {\\r\\n            let emptyPointer := mload(0x40)\\r\\n            mstore(emptyPointer, 0x0902f1ac00000000000000000000000000000000000000000000000000000000)\\r\\n            failed := iszero(staticcall(gas(), pairAddress, emptyPointer, 0x4, emptyPointer, 0x40))\\r\\n            reserve0 := mload(emptyPointer)\\r\\n            reserve1 := mload(add(emptyPointer, 0x20))\\r\\n        }\\r\\n        if (failed) revert(\\\"Unable to get reserves from the pair\\\");\\r\\n    }\\r\\n\\r\\n    function setWBNB_TOKEN_PAIR(address newPair) external onlyOwner { WBNB_TOKEN_PAIR = newPair; }\\r\\n    function setWBNB_USDT_Pair(address newPair) external onlyOwner { WBNB_USDT_PAIR = newPair; }\\r\\n    function getWBNB_TOKEN_PAIR() external view returns(address) { return WBNB_TOKEN_PAIR; }\\r\\n    function getWBNB_USDT_Pair() external view returns(address) { return WBNB_USDT_PAIR; }\\r\\n    event VestingBeneficiaryAdded(address indexed beneficiary, uint256 initialBalance);\\r\\n    event TokensReleased(address indexed beneficiary, uint256 amount);\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"},\"SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract SwapHelper is Ownable {\\r\\n  constructor() {}\\r\\n\\r\\n  function safeApprove(address token, address spender, uint256 amount) external onlyOwner { IERC20(token).approve(spender, amount); }\\r\\n\\r\\n  function safeWithdraw() external onlyOwner { payable(_msgSender()).transfer(address(this).balance); }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"name\":\"VestingBeneficiaryAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"name\":\"addVestingBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfeeDevelopmentWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB_TOKEN_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB_USDT_Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbuyFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsellFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBeneficiaryAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVestingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"setBuyFeesForDevelopmentWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevelopingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee3\",\"type\":\"uint256\"}],\"name\":\"setSellFeesForDevelopmentWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setWBNB_TOKEN_PAIR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setWBNB_USDT_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setdevelopingWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setdevelopingWallet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startVesting\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingWallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingWallet3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingWallet4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "POKERFI", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://590160fb8ab9c98c68d66d325a3b06c3311da9f653dc403d5cc634876703cfe1"}