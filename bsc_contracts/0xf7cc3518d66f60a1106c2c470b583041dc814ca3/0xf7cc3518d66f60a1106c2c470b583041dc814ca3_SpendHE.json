{"SourceCode": "pragma solidity ^0.8.0;\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\ninterface IBEP20 { \r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n\tfunction mint(address account, uint256 amount) external returns (bool);\r\n\tfunction burn(address account, uint256 amount) external returns (bool);\r\n\tfunction addOperator(address minter) external returns (bool);\r\n\tfunction removeOperator(address minter) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        // uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n} \r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom( address from, address to, uint256 tokenId) external;\r\n    function transferFrom( address from,address to,uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;\r\n\r\n    struct HeroesInfo {uint256 heroesNumber; string name; string race; string class; string tier; string tierBasic; string uri;}\r\n    function getHeroesNumber(uint256 _tokenId) external view returns (HeroesInfo memory);\r\n    function safeMint(address _to, uint256 _tokenId) external;\r\n    function burn(address _from, uint256 _tokenId) external;\r\n    function addHeroesNumber(uint256 _tokenId, uint256 _heroesNumber, string memory name, string memory race, string memory class, string memory tier, string memory tierBasic) external;\r\n    function editTier(uint256 tokenId, string memory _tier) external;\r\n    function deleteHeroesNumber(uint256 tokenId) external;\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(IERC165).interfaceId; }\r\n}\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n    mapping(bytes32 => RoleData) private _roles;\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool){\r\n        return\r\n            interfaceId == type(IAccessControl).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) { return _roles[role].members[account]; }\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) { return _roles[role].adminRole; }\r\n    function grantRole(bytes32 role, address account) public virtual override { \r\n        require( hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n        _grantRole(role, account);\r\n    }\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        require( hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n        _revokeRole(role, account);\r\n    }\r\n    function renounceRole(bytes32 role, address account) public virtual override\r\n    {\r\n        require( account == _msgSender(), \"AccessControl: can only renounce roles for self\" );\r\n        _revokeRole(role, account);\r\n    }\r\n    function _setupRole(bytes32 role, address account) internal virtual { _grantRole(role, account); }\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\ncontract SpendHE is AccessControl {\r\n    using SafeMath for uint;\r\n    using SafeBEP20 for IBEP20;\r\n    IBEP20 public heroesToken;\r\n    bytes32 public constant CREATOR_ADMIN_SERVER = keccak256(\"CREATOR_ADMIN_SERVER\");\r\n    address public receiveFee = 0x06eD3d7ef90551333b7185412337c9DF6F17C795;\r\n    uint256 public feeClan = 2500000000000000000000; \r\n    uint256 public feeEditClan = 25000000000000000000; \r\n    uint256 public feeEditName = 12000000000000000000; \r\n    uint256 public feeRefreshChallengeStore = 25000000000000000000;\r\n    uint256 public feeRefreshClanStore = 25000000000000000000;\r\n    uint256 public unitTimeDeposit = 86400; \r\n    uint256 public limitDepositPerDay = 5000*1e18;\r\n    uint256 public startTimeDeposit;\r\n    constructor( address minter, address _heroesToken, uint256 _startTime ) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(CREATOR_ADMIN_SERVER, minter);\r\n        heroesToken = IBEP20(_heroesToken); // Token Heroes\r\n        startTimeDeposit = _startTime;\r\n\t}\r\n    event clanmap(\r\n        address Owner,\r\n        uint256 fee,\r\n        uint256 timeClan\r\n    );\r\n     event editname(\r\n        address Owner,\r\n        uint256 fee,\r\n        uint256 timeName\r\n    );\r\n    event unionblessing(\r\n        address Owner,\r\n        uint256 slot,\r\n        uint256 fee,\r\n        uint256 timeUnion\r\n    );\r\n    event BuySlot(\r\n        address Owner,\r\n        uint256 slot,\r\n        uint256 fee,\r\n        uint256 timeBuyslot\r\n    );\r\n    event FeeRefreshChallengeStore(\r\n        address Owner,\r\n        uint256 fee,\r\n        uint256 timeFeeRefreshChallengeStore\r\n    );\r\n    event FeeRefreshClanStore(\r\n        address Owner,\r\n        uint256 fee,\r\n        uint256 timeFeeRefreshClanStore\r\n    );\r\n    event PurchaseItemDungeon(\r\n        address Owner,\r\n        uint256 fee,\r\n        string item,\r\n        uint256 timePurchaseItemDungeon\r\n    );\r\n    event Deposit(\r\n        address Owner,\r\n        uint256 fee,\r\n        uint256 timeDeposit\r\n    );\r\n    mapping(uint256 => uint256) public feeUnionBlessing;\r\n    mapping(uint256 => uint256) public feeBuySlot;\r\n    mapping(uint256 => mapping(address => uint256)) public amountDeposit;\r\n    function changeLimitDepositPerDay(uint256 _amount) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_amount > 0,\"amount > 0\");\r\n        limitDepositPerDay = _amount;\r\n    }\r\n    function changeStartTimeDeposit(uint256 _time) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_time > 0,\"time > 0\");\r\n        startTimeDeposit = _time;\r\n    }\r\n    function getDepositPerDay(address _address) public view returns(uint256){\r\n        uint256 unitTime = (block.timestamp - startTimeDeposit).div(unitTimeDeposit);\r\n        return amountDeposit[unitTime][_address];\r\n    }\r\n    function deposit(uint256 _amount) public {\r\n        require(_amount > 0,\"amount > 0\");\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), _amount);\r\n        uint256 unitTime = (block.timestamp - startTimeDeposit).div(unitTimeDeposit);\r\n        require(amountDeposit[unitTime][msg.sender].add(_amount) <= limitDepositPerDay, \"The limit has been exceeded\");\r\n        amountDeposit[unitTime][msg.sender] = amountDeposit[unitTime][msg.sender].add(_amount);\r\n        emit Deposit(\r\n            address(msg.sender),\r\n            _amount,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function changeReceiveFee(address _receive) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_receive != address(0));\r\n        receiveFee = _receive;\r\n    }\r\n    function changeFeeRefreshChallengeStore(uint256 _fee) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_fee >= 0, 'need fee >= 0');\r\n        feeRefreshChallengeStore = _fee;\r\n    }\r\n     function changeFeeRefreshClanStore(uint256 _fee) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_fee >= 0, 'need fee >= 0');\r\n        feeRefreshClanStore = _fee;\r\n    }\r\n    function changeFeeClan(uint256 _fee) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_fee >= 0, 'need fee >= 0');\r\n        feeClan = _fee;\r\n    }\r\n    function changeFeeEditName(uint256 _fee) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_fee >= 0, 'need fee >= 0');\r\n        feeEditName = _fee;\r\n    }\r\n    function changeFeeEditClan(uint256 _fee) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(_fee >= 0, 'need fee >= 0');\r\n        feeEditClan = _fee;\r\n    } \r\n    function addFeeUnionBlessing(uint256[] memory slot, uint256[] memory amount) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(slot.length == amount.length, 'Input not true');\r\n        for(uint256 i = 0; i < slot.length; i++){\r\n            feeUnionBlessing[slot[i]] = amount[i]*1e18;\r\n        }\r\n    }\r\n    function addFeeSlot(uint256[] memory slot, uint256[] memory amount) public {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \"Caller is not a owner\");\r\n        require(slot.length == amount.length, 'Input not true');\r\n        for(uint256 i = 0; i < slot.length; i++){\r\n            feeBuySlot[slot[i]] = amount[i]*1e18;\r\n        }\r\n    }\r\n    function refreshChallengeStore() public {\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeRefreshChallengeStore);\r\n        emit FeeRefreshChallengeStore(\r\n            address(msg.sender),\r\n            feeRefreshChallengeStore,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function refreshClanStore() public {\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeRefreshClanStore);\r\n        emit FeeRefreshClanStore(\r\n            address(msg.sender),\r\n            feeRefreshClanStore,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function purchaseItemDungeon(uint256 _amount, string memory _item) public {\r\n        require(_amount > 0, \"need amount > 0\");\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), _amount);\r\n        emit PurchaseItemDungeon(\r\n            msg.sender,\r\n            _amount,\r\n            _item,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function clan() public {\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeClan);\r\n        emit clanmap(\r\n            address(msg.sender),\r\n            feeClan,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function editName() public {\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeEditName);\r\n        emit editname(\r\n            address(msg.sender),\r\n            feeClan,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function editClan() public {\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeEditClan);\r\n        emit clanmap(\r\n            address(msg.sender),\r\n            feeClan,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function unionBlessing(uint256 slot) public {\r\n        uint256 feeUnion = feeUnionBlessing[slot];\r\n        require(feeUnion > 0, \"Amoun <= 0\");\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeUnion);\r\n        emit unionblessing(\r\n            address(msg.sender),\r\n            slot,\r\n            feeUnion,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buySlot(uint256 slot) public {\r\n        uint256 feeSlot = feeBuySlot[slot];\r\n         require(feeSlot > 0, \"Amoun <= 0\");\r\n        heroesToken.safeTransferFrom(address(msg.sender), address(receiveFee), feeSlot);\r\n        emit BuySlot(\r\n            address(msg.sender),\r\n            slot,\r\n            feeSlot,\r\n            block.timestamp\r\n        );\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_heroesToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuyslot\",\"type\":\"uint256\"}],\"name\":\"BuySlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeFeeRefreshChallengeStore\",\"type\":\"uint256\"}],\"name\":\"FeeRefreshChallengeStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeFeeRefreshClanStore\",\"type\":\"uint256\"}],\"name\":\"FeeRefreshClanStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePurchaseItemDungeon\",\"type\":\"uint256\"}],\"name\":\"PurchaseItemDungeon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeClan\",\"type\":\"uint256\"}],\"name\":\"clanmap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeName\",\"type\":\"uint256\"}],\"name\":\"editname\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUnion\",\"type\":\"uint256\"}],\"name\":\"unionblessing\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR_ADMIN_SERVER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"slot\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addFeeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"slot\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addFeeUnionBlessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"buySlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeClan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeEditClan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeEditName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeRefreshChallengeStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeRefreshClanStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeLimitDepositPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"}],\"name\":\"changeReceiveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeStartTimeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editClan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeBuySlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeClan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEditClan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEditName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRefreshChallengeStore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRefreshClanStore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeUnionBlessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDepositPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroesToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitDepositPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_item\",\"type\":\"string\"}],\"name\":\"purchaseItemDungeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshChallengeStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshClanStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"unionBlessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitTimeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpendHE", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d998ea274c1edcce9ee97182a112735441f21dbe00000000000000000000000020d39a5130f799b95b55a930e5b7ebc589ea9ed8000000000000000000000000000000000000000000000000000000006196e900", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://876b92c20f9e9ba0929b46ef07de019901eba57062dc56534a8fe8d4e8935584"}