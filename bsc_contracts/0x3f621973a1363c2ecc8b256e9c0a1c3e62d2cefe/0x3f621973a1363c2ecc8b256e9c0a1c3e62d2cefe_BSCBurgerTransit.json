{"SourceCode": "// Dependency file: contracts/BSC/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/BSC/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/BSC/BurgerERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.16;\r\n// import 'contracts/BSC/libraries/SafeMath.sol';\r\ncontract BurgerERC20 {\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant TokenSignature = \"BURGER_TRANSIT\";\r\n\r\n    address public platform;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public \r\n    {\r\n        platform = msg.sender;\r\n    }\r\n    \r\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals) public {\r\n        require(msg.sender == platform, \"FORBIDDEN\");\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        if (to == address(0)) { // burn\r\n            totalSupply = totalSupply.sub(value);\r\n        }\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function mint(address to, uint256 value) external {\r\n        require(msg.sender == platform, \"FORBIDDEN\");\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Mint(address(0), to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external {\r\n        require(msg.sender == platform, \"FORBIDDEN\");\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(from, address(0), value);\r\n    }\r\n}\r\n\r\n// Root file: contracts/BSC/BSCBurgerTransit.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\n// import 'contracts/BSC/libraries/TransferHelper.sol';\r\n// import 'contracts/BSC/BurgerERC20.sol';\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract BSCBurgerTransit {\r\n    using SafeMath for uint;\r\n    address public owner;\r\n    address public signWallet;\r\n    address public developWallet;\r\n    \r\n    uint public totalFee;\r\n    \r\n    uint public developFee;\r\n    \r\n    // key: bsc token, value: transit token\r\n    mapping (address => address) public pairFor; \r\n    // key: transit token, value: bsc token\r\n    mapping (address => address) public pairTo;\r\n    \r\n    // key: transit_id\r\n    mapping (bytes32 => bool) public executedMap;\r\n    \r\n    event Payback(address indexed from, address indexed token, uint amount);\r\n    event Withdraw(bytes32 transitId, address indexed to, address indexed token, uint amount);\r\n    event CollectFee(address indexed handler, uint amount);\r\n    \r\n    constructor(address _signer, address _developer) public {\r\n        signWallet = _signer;\r\n        developWallet = _developer;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeSigner(address _wallet) external {\r\n        require(msg.sender == owner, \"CHANGE_SIGNER_FORBIDDEN\");\r\n        signWallet = _wallet;\r\n    }\r\n    \r\n    function changeDevelopWallet(address _wallet) external {\r\n        require(msg.sender == owner, \"CHANGE_DEVELOP_WALLET_FORBIDDEN\");\r\n        developWallet = _wallet;\r\n    } \r\n    \r\n    function changeDevelopFee(uint _amount) external {\r\n        require(msg.sender == owner, \"CHANGE_DEVELOP_FEE_FORBIDDEN\");\r\n        developFee = _amount;\r\n    }\r\n    \r\n    function collectFee() external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        require(developWallet != address(0), \"SETUP_DEVELOP_WALLET\");\r\n        require(totalFee > 0, \"NO_FEE\");\r\n        TransferHelper.safeTransferETH(developWallet, totalFee);\r\n        totalFee = 0;\r\n    }\r\n    \r\n    function paybackTransit(address _token, uint _amount) external payable {\r\n        require(pairFor[_token] != address(0), \"UNSUPPORT_TOKEN\");\r\n        require(_amount > 0 && BurgerERC20(_token).balanceOf(msg.sender) >= _amount, \"INVALID_AMOUNT\");\r\n        require(msg.value == developFee, \"FEE_VALUE_INCORRECT\");\r\n        totalFee = totalFee.add(developFee);\r\n        BurgerERC20(_token).burn(msg.sender, _amount);\r\n        emit Payback(msg.sender, pairFor[_token], _amount);\r\n    }\r\n    \r\n    function withdrawTransitToken(\r\n    bytes calldata _signature,\r\n    bytes32 _transitId,\r\n    uint _amount,\r\n    address _token,\r\n    string calldata _name,\r\n    string calldata _symbol,\r\n    uint8 _decimals\r\n    ) external payable {\r\n        require(executedMap[_transitId] == false, \"ALREADY_EXECUTED\");\r\n        bytes32 message = keccak256(abi.encodePacked(_transitId, msg.sender, _amount, _token, _name, _symbol, _decimals));\r\n        require(_verify(message, _signature), \"INVALID_SIGNATURE\");\r\n\r\n        require(_amount > 0, \"NOTHING_TO_WITHDRAW\");\r\n        require(msg.value == developFee, \"INSUFFICIENT_VALUE\");\r\n        \r\n        if(pairTo[_token] == address(0)) {\r\n            _createToken(_token, _name, _symbol, _decimals);\r\n        }\r\n        \r\n        BurgerERC20(pairTo[_token]).mint(msg.sender, _amount);\r\n        totalFee = totalFee.add(developFee);\r\n        executedMap[_transitId] = true;\r\n        \r\n        emit Withdraw(_transitId, msg.sender, _token, _amount);\r\n    }\r\n    \r\n    function _verify(bytes32 _message, bytes memory _signature) internal view returns (bool) {\r\n        bytes32 hash = _toEthBytes32SignedMessageHash(_message);\r\n        address[] memory signList = _recoverAddresses(hash, _signature);\r\n        return signList[0] == signWallet;\r\n    }\r\n    \r\n    function _toEthBytes32SignedMessageHash (bytes32 _msg) pure internal returns (bytes32 signHash)\r\n    {\r\n        signHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _msg));\r\n    }\r\n    \r\n    function _recoverAddresses(bytes32 _hash, bytes memory _signatures) pure internal returns (address[] memory addresses)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint count = _countSignatures(_signatures);\r\n        addresses = new address[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            (v, r, s) = _parseSignature(_signatures, i);\r\n            addresses[i] = ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n    \r\n    function _parseSignature(bytes memory _signatures, uint _pos) pure internal returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        uint offset = _pos * 65;\r\n        assembly {\r\n            r := mload(add(_signatures, add(32, offset)))\r\n            s := mload(add(_signatures, add(64, offset)))\r\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\r\n        }\r\n\r\n        if (v < 27) v += 27;\r\n\r\n        require(v == 27 || v == 28);\r\n    }\r\n    \r\n    function _countSignatures(bytes memory _signatures) pure internal returns (uint)\r\n    {\r\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\r\n    }\r\n    \r\n    function _createToken (address _transitToken, string memory _name, string memory _symbol, uint8 _decimals) internal returns(address bscBurgerToken){\r\n        bytes memory bytecode = type(BurgerERC20).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_transitToken, _name, _symbol, _decimals));\r\n            assembly {\r\n                bscBurgerToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n            }\r\n        BurgerERC20(bscBurgerToken).initialize(_name, _symbol, _decimals);\r\n        pairFor[bscBurgerToken] = _transitToken;\r\n        pairTo[_transitToken] = bscBurgerToken;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transitId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeDevelopFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeDevelopWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paybackTransit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_transitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"withdrawTransitToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BSCBurgerTransit", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000005fdd700d4d438301a3c4378276ffb424fa36cd000000000000000000000000bc554d0fa1745aeb52acba8343106cf8aca038ca", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://208d81d47bf6507936cd0a7e37081e5832591cc8ad01cca7662ec3064c6d53e9"}